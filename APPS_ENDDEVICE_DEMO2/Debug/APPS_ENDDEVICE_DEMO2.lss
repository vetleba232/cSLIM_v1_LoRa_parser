
APPS_ENDDEVICE_DEMO2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00020928  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00020928  00020928  00030928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20000000  00020930  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  000409c8  2**0
                  CONTENTS
  4 .bss          00002620  200009c8  000212f8  000409c8  2**3
                  ALLOC
  5 .stack        00002000  20002fe8  00023918  000409c8  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  000409c8  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  000409f0  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a57aa  00000000  00000000  00040a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001044b  00000000  00000000  000e6226  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00027b7b  00000000  00000000  000f6671  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002120  00000000  00000000  0011e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002810  00000000  00000000  0012030c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003533e  00000000  00000000  00122b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003b4ec  00000000  00000000  00157e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ba337  00000000  00000000  00193346  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000070a0  00000000  00000000  0024d680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 4f 00 20 a9 78 00 00 a5 78 00 00 a5 78 00 00     .O. .x...x...x..
	...
      2c:	a5 78 00 00 00 00 00 00 00 00 00 00 a5 78 00 00     .x...........x..
      3c:	a5 78 00 00 a5 78 00 00 a5 78 00 00 b9 51 00 00     .x...x...x...Q..
      4c:	51 49 00 00 a5 78 00 00 a5 78 00 00 a5 78 00 00     QI...x...x...x..
      5c:	a5 78 00 00 e9 5f 00 00 f9 5f 00 00 09 60 00 00     .x..._..._...`..
      6c:	19 60 00 00 29 60 00 00 39 60 00 00 a5 78 00 00     .`..)`..9`...x..
      7c:	a5 78 00 00 a5 78 00 00 61 74 00 00 71 74 00 00     .x...x..at..qt..
      8c:	81 74 00 00 91 74 00 00 a1 74 00 00 9d 46 00 00     .t...t...t...F..
      9c:	a5 78 00 00 a5 78 00 00 a5 78 00 00 a5 78 00 00     .x...x...x...x..
      ac:	a5 78 00 00 00 00 00 00                             .x......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200009c8 	.word	0x200009c8
      d4:	00000000 	.word	0x00000000
      d8:	00020930 	.word	0x00020930

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200009cc 	.word	0x200009cc
     108:	00020930 	.word	0x00020930
     10c:	00020930 	.word	0x00020930
     110:	00000000 	.word	0x00000000

00000114 <atcab_release>:
/** \brief release (free) the global ATCADevice instance.
 *  This must be called in order to release or free up the interface.
 *  \return Returns ATCA_SUCCESS .
 */
ATCA_STATUS atcab_release(void)
{
     114:	b510      	push	{r4, lr}
    {
        return status;
    }
    _gDevice = NULL;
#else
    deleteATCADevice(&_gDevice);
     116:	4802      	ldr	r0, [pc, #8]	; (120 <atcab_release+0xc>)
     118:	4b02      	ldr	r3, [pc, #8]	; (124 <atcab_release+0x10>)
     11a:	4798      	blx	r3
#endif
    return ATCA_SUCCESS;
}
     11c:	2000      	movs	r0, #0
     11e:	bd10      	pop	{r4, pc}
     120:	200009e4 	.word	0x200009e4
     124:	00000cb9 	.word	0x00000cb9

00000128 <atcab_init>:
{
     128:	b510      	push	{r4, lr}
     12a:	b082      	sub	sp, #8
     12c:	0004      	movs	r4, r0
    if (_gDevice)
     12e:	4b14      	ldr	r3, [pc, #80]	; (180 <atcab_init+0x58>)
     130:	681b      	ldr	r3, [r3, #0]
     132:	2b00      	cmp	r3, #0
     134:	d001      	beq.n	13a <atcab_init+0x12>
        atcab_release();
     136:	4b13      	ldr	r3, [pc, #76]	; (184 <atcab_init+0x5c>)
     138:	4798      	blx	r3
    _gDevice = newATCADevice(cfg);
     13a:	0020      	movs	r0, r4
     13c:	4b12      	ldr	r3, [pc, #72]	; (188 <atcab_init+0x60>)
     13e:	4798      	blx	r3
     140:	4b0f      	ldr	r3, [pc, #60]	; (180 <atcab_init+0x58>)
     142:	6018      	str	r0, [r3, #0]
    if (_gDevice == NULL)
     144:	2800      	cmp	r0, #0
     146:	d019      	beq.n	17c <atcab_init+0x54>
    if (cfg->devtype == ATECC608A)
     148:	7862      	ldrb	r2, [r4, #1]
    return ATCA_SUCCESS;
     14a:	2300      	movs	r3, #0
    if (cfg->devtype == ATECC608A)
     14c:	2a03      	cmp	r2, #3
     14e:	d002      	beq.n	156 <atcab_init+0x2e>
}
     150:	0018      	movs	r0, r3
     152:	b002      	add	sp, #8
     154:	bd10      	pop	{r4, pc}
        if ((status = atcab_read_bytes_zone(ATCA_ZONE_CONFIG, 0, ATCA_CHIPMODE_OFFSET, &_gDevice->mCommands->clock_divider, 1)) != ATCA_SUCCESS)
     156:	6803      	ldr	r3, [r0, #0]
     158:	3301      	adds	r3, #1
     15a:	3a02      	subs	r2, #2
     15c:	9200      	str	r2, [sp, #0]
     15e:	3212      	adds	r2, #18
     160:	2100      	movs	r1, #0
     162:	2000      	movs	r0, #0
     164:	4c09      	ldr	r4, [pc, #36]	; (18c <atcab_init+0x64>)
     166:	47a0      	blx	r4
     168:	1e03      	subs	r3, r0, #0
     16a:	d1f1      	bne.n	150 <atcab_init+0x28>
        _gDevice->mCommands->clock_divider &= ATCA_CHIPMODE_CLOCK_DIV_MASK;
     16c:	4a04      	ldr	r2, [pc, #16]	; (180 <atcab_init+0x58>)
     16e:	6812      	ldr	r2, [r2, #0]
     170:	6811      	ldr	r1, [r2, #0]
     172:	784a      	ldrb	r2, [r1, #1]
     174:	2007      	movs	r0, #7
     176:	4382      	bics	r2, r0
     178:	704a      	strb	r2, [r1, #1]
     17a:	e7e9      	b.n	150 <atcab_init+0x28>
        return ATCA_GEN_FAIL;
     17c:	23e1      	movs	r3, #225	; 0xe1
     17e:	e7e7      	b.n	150 <atcab_init+0x28>
     180:	200009e4 	.word	0x200009e4
     184:	00000115 	.word	0x00000115
     188:	00000c2d 	.word	0x00000c2d
     18c:	0000077d 	.word	0x0000077d

00000190 <atcab_get_addr>:
 *  \param[in] offset Offset Number within the block of data or configuration or OTP zone.
 *  \param[out] addr  Pointer to the address of data or configuration or OTP zone.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_get_addr(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint16_t* addr)
{
     190:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_SUCCESS;
    uint8_t mem_zone = zone & 0x03;

    if (addr == NULL)
     192:	9c02      	ldr	r4, [sp, #8]
     194:	2c00      	cmp	r4, #0
     196:	d008      	beq.n	1aa <atcab_get_addr+0x1a>
    uint8_t mem_zone = zone & 0x03;
     198:	2403      	movs	r4, #3
     19a:	4020      	ands	r0, r4
    {
        return ATCA_BAD_PARAM;
    }
    if ((mem_zone != ATCA_ZONE_CONFIG) && (mem_zone != ATCA_ZONE_DATA) && (mem_zone != ATCA_ZONE_OTP))
     19c:	d007      	beq.n	1ae <atcab_get_addr+0x1e>
     19e:	2802      	cmp	r0, #2
     1a0:	d00d      	beq.n	1be <atcab_get_addr+0x2e>
     1a2:	2801      	cmp	r0, #1
     1a4:	d003      	beq.n	1ae <atcab_get_addr+0x1e>
    {
        return ATCA_BAD_PARAM;
     1a6:	20e2      	movs	r0, #226	; 0xe2
     1a8:	e012      	b.n	1d0 <atcab_get_addr+0x40>
        return ATCA_BAD_PARAM;
     1aa:	20e2      	movs	r0, #226	; 0xe2
     1ac:	e010      	b.n	1d0 <atcab_get_addr+0x40>
        *addr = 0;
        // Mask the offset
        offset = offset & (uint8_t)0x07;
        if ((mem_zone == ATCA_ZONE_CONFIG) || (mem_zone == ATCA_ZONE_OTP))
        {
            *addr = block << 3;
     1ae:	00d2      	lsls	r2, r2, #3
            *addr |= offset;
     1b0:	2007      	movs	r0, #7
     1b2:	4003      	ands	r3, r0
     1b4:	431a      	orrs	r2, r3
     1b6:	9b02      	ldr	r3, [sp, #8]
     1b8:	801a      	strh	r2, [r3, #0]
            *addr |= block << 8;
        }
    }
    while (0);

    return status;
     1ba:	2000      	movs	r0, #0
     1bc:	e008      	b.n	1d0 <atcab_get_addr+0x40>
            *addr = slot << 3;
     1be:	00c9      	lsls	r1, r1, #3
            *addr  |= offset;
     1c0:	2007      	movs	r0, #7
     1c2:	4003      	ands	r3, r0
     1c4:	430b      	orrs	r3, r1
            *addr |= block << 8;
     1c6:	0212      	lsls	r2, r2, #8
     1c8:	431a      	orrs	r2, r3
     1ca:	9b02      	ldr	r3, [sp, #8]
     1cc:	801a      	strh	r2, [r3, #0]
    return status;
     1ce:	2000      	movs	r0, #0
}
     1d0:	bd10      	pop	{r4, pc}
	...

000001d4 <atcab_get_zone_size>:
 */
ATCA_STATUS atcab_get_zone_size(uint8_t zone, uint16_t slot, size_t* size)
{
    ATCA_STATUS status = ATCA_SUCCESS;

    if (size == NULL)
     1d4:	2a00      	cmp	r2, #0
     1d6:	d03e      	beq.n	256 <atcab_get_zone_size+0x82>
    {
        return ATCA_BAD_PARAM;
    }

    if (_gDevice->mIface->mIfaceCFG->devtype == ATSHA204A)
     1d8:	4b20      	ldr	r3, [pc, #128]	; (25c <atcab_get_zone_size+0x88>)
     1da:	681b      	ldr	r3, [r3, #0]
     1dc:	685b      	ldr	r3, [r3, #4]
     1de:	685b      	ldr	r3, [r3, #4]
     1e0:	785b      	ldrb	r3, [r3, #1]
     1e2:	2b00      	cmp	r3, #0
     1e4:	d113      	bne.n	20e <atcab_get_zone_size+0x3a>
    {
        switch (zone)
     1e6:	2801      	cmp	r0, #1
     1e8:	d009      	beq.n	1fe <atcab_get_zone_size+0x2a>
     1ea:	2800      	cmp	r0, #0
     1ec:	d003      	beq.n	1f6 <atcab_get_zone_size+0x22>
     1ee:	2802      	cmp	r0, #2
     1f0:	d009      	beq.n	206 <atcab_get_zone_size+0x32>
        {
        case ATCA_ZONE_CONFIG: *size = 88; break;
        case ATCA_ZONE_OTP:    *size = 64; break;
        case ATCA_ZONE_DATA:   *size = 32; break;
        default: status = ATCA_BAD_PARAM; break;
     1f2:	20e2      	movs	r0, #226	; 0xe2
     1f4:	e030      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 88; break;
     1f6:	2358      	movs	r3, #88	; 0x58
     1f8:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     1fa:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 88; break;
     1fc:	e02c      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
     1fe:	2340      	movs	r3, #64	; 0x40
     200:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     202:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
     204:	e028      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_DATA:   *size = 32; break;
     206:	2320      	movs	r3, #32
     208:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     20a:	2000      	movs	r0, #0
        case ATCA_ZONE_DATA:   *size = 32; break;
     20c:	e024      	b.n	258 <atcab_get_zone_size+0x84>
        }
    }
    else
    {
        switch (zone)
     20e:	2801      	cmp	r0, #1
     210:	d009      	beq.n	226 <atcab_get_zone_size+0x52>
     212:	2800      	cmp	r0, #0
     214:	d003      	beq.n	21e <atcab_get_zone_size+0x4a>
     216:	2802      	cmp	r0, #2
     218:	d009      	beq.n	22e <atcab_get_zone_size+0x5a>
            else
            {
                status = ATCA_BAD_PARAM;
            }
            break;
        default: status = ATCA_BAD_PARAM; break;
     21a:	20e2      	movs	r0, #226	; 0xe2
     21c:	e01c      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_CONFIG: *size = 128; break;
     21e:	2380      	movs	r3, #128	; 0x80
     220:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     222:	2000      	movs	r0, #0
        case ATCA_ZONE_CONFIG: *size = 128; break;
     224:	e018      	b.n	258 <atcab_get_zone_size+0x84>
        case ATCA_ZONE_OTP:    *size = 64; break;
     226:	2340      	movs	r3, #64	; 0x40
     228:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     22a:	2000      	movs	r0, #0
        case ATCA_ZONE_OTP:    *size = 64; break;
     22c:	e014      	b.n	258 <atcab_get_zone_size+0x84>
            if (slot < 8)
     22e:	2907      	cmp	r1, #7
     230:	d908      	bls.n	244 <atcab_get_zone_size+0x70>
            else if (slot == 8)
     232:	2908      	cmp	r1, #8
     234:	d00a      	beq.n	24c <atcab_get_zone_size+0x78>
                status = ATCA_BAD_PARAM;
     236:	20e2      	movs	r0, #226	; 0xe2
            else if (slot < 16)
     238:	290f      	cmp	r1, #15
     23a:	d80d      	bhi.n	258 <atcab_get_zone_size+0x84>
                *size = 72;
     23c:	2348      	movs	r3, #72	; 0x48
     23e:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     240:	2000      	movs	r0, #0
     242:	e009      	b.n	258 <atcab_get_zone_size+0x84>
                *size = 36;
     244:	2324      	movs	r3, #36	; 0x24
     246:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     248:	2000      	movs	r0, #0
     24a:	e005      	b.n	258 <atcab_get_zone_size+0x84>
                *size = 416;
     24c:	23d0      	movs	r3, #208	; 0xd0
     24e:	005b      	lsls	r3, r3, #1
     250:	6013      	str	r3, [r2, #0]
    ATCA_STATUS status = ATCA_SUCCESS;
     252:	2000      	movs	r0, #0
     254:	e000      	b.n	258 <atcab_get_zone_size+0x84>
        return ATCA_BAD_PARAM;
     256:	20e2      	movs	r0, #226	; 0xe2
        }
    }

    return status;
}
     258:	4770      	bx	lr
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	200009e4 	.word	0x200009e4

00000260 <atcab_aes>:
 *  \param[out] aes_out  Output data from the AES command is returned here (16
 *                       bytes).
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_aes(uint8_t mode, uint16_t key_id, const uint8_t* aes_in, uint8_t* aes_out)
{
     260:	b570      	push	{r4, r5, r6, lr}
     262:	b0b2      	sub	sp, #200	; 0xc8
     264:	0014      	movs	r4, r2
     266:	001d      	movs	r5, r3
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        if (aes_in == NULL)
     268:	2a00      	cmp	r2, #0
     26a:	d032      	beq.n	2d2 <atcab_aes+0x72>
    ATCACommand ca_cmd = _gDevice->mCommands;
     26c:	4b1a      	ldr	r3, [pc, #104]	; (2d8 <atcab_aes+0x78>)
     26e:	681b      	ldr	r3, [r3, #0]
     270:	681e      	ldr	r6, [r3, #0]
            status = ATCA_BAD_PARAM;
            break;
        }

        // build a AES command
        packet.param1 = mode;
     272:	466b      	mov	r3, sp
     274:	70d8      	strb	r0, [r3, #3]
        packet.param2 = key_id;
     276:	8099      	strh	r1, [r3, #4]
        if (AES_MODE_GFM == (mode & AES_MODE_GFM))
     278:	43c0      	mvns	r0, r0
     27a:	0783      	lsls	r3, r0, #30
     27c:	d00e      	beq.n	29c <atcab_aes+0x3c>
        {
            memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);
        }
        else
        {
            memcpy(packet.data, aes_in, AES_DATA_SIZE);
     27e:	2210      	movs	r2, #16
     280:	0021      	movs	r1, r4
     282:	466b      	mov	r3, sp
     284:	1d98      	adds	r0, r3, #6
     286:	4b15      	ldr	r3, [pc, #84]	; (2dc <atcab_aes+0x7c>)
     288:	4798      	blx	r3
        }

        if ((status = atAES(ca_cmd, &packet)) != ATCA_SUCCESS)
     28a:	4669      	mov	r1, sp
     28c:	0030      	movs	r0, r6
     28e:	4b14      	ldr	r3, [pc, #80]	; (2e0 <atcab_aes+0x80>)
     290:	4798      	blx	r3
     292:	1e04      	subs	r4, r0, #0
     294:	d009      	beq.n	2aa <atcab_aes+0x4a>

    }
    while (0);

    return status;
}
     296:	0020      	movs	r0, r4
     298:	b032      	add	sp, #200	; 0xc8
     29a:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);
     29c:	2220      	movs	r2, #32
     29e:	0021      	movs	r1, r4
     2a0:	466b      	mov	r3, sp
     2a2:	1d98      	adds	r0, r3, #6
     2a4:	4b0d      	ldr	r3, [pc, #52]	; (2dc <atcab_aes+0x7c>)
     2a6:	4798      	blx	r3
     2a8:	e7ef      	b.n	28a <atcab_aes+0x2a>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     2aa:	4b0b      	ldr	r3, [pc, #44]	; (2d8 <atcab_aes+0x78>)
     2ac:	6819      	ldr	r1, [r3, #0]
     2ae:	4668      	mov	r0, sp
     2b0:	4b0c      	ldr	r3, [pc, #48]	; (2e4 <atcab_aes+0x84>)
     2b2:	4798      	blx	r3
     2b4:	1e04      	subs	r4, r0, #0
     2b6:	d1ee      	bne.n	296 <atcab_aes+0x36>
        if (aes_out && packet.data[ATCA_COUNT_IDX] >= (3 + AES_DATA_SIZE))
     2b8:	2d00      	cmp	r5, #0
     2ba:	d0ec      	beq.n	296 <atcab_aes+0x36>
     2bc:	466b      	mov	r3, sp
     2be:	799b      	ldrb	r3, [r3, #6]
     2c0:	2b12      	cmp	r3, #18
     2c2:	d9e8      	bls.n	296 <atcab_aes+0x36>
            memcpy(aes_out, &packet.data[ATCA_RSP_DATA_IDX], AES_DATA_SIZE);
     2c4:	2210      	movs	r2, #16
     2c6:	466b      	mov	r3, sp
     2c8:	1dd9      	adds	r1, r3, #7
     2ca:	0028      	movs	r0, r5
     2cc:	4b03      	ldr	r3, [pc, #12]	; (2dc <atcab_aes+0x7c>)
     2ce:	4798      	blx	r3
     2d0:	e7e1      	b.n	296 <atcab_aes+0x36>
            status = ATCA_BAD_PARAM;
     2d2:	24e2      	movs	r4, #226	; 0xe2
     2d4:	e7df      	b.n	296 <atcab_aes+0x36>
     2d6:	46c0      	nop			; (mov r8, r8)
     2d8:	200009e4 	.word	0x200009e4
     2dc:	00019d1d 	.word	0x00019d1d
     2e0:	00000af1 	.word	0x00000af1
     2e4:	00000cf5 	.word	0x00000cf5

000002e8 <atcab_aes_encrypt>:
 * \param[out] ciphertext  Output ciphertext is returned here (16 bytes).
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS  atcab_aes_encrypt(uint16_t key_id, uint8_t key_block, const uint8_t* plaintext, uint8_t* ciphertext)
{
     2e8:	b510      	push	{r4, lr}
     2ea:	0004      	movs	r4, r0
    uint8_t mode;

    mode = AES_MODE_ENCRYPT | (AES_MODE_KEY_BLOCK_MASK & (key_block << AES_MODE_KEY_BLOCK_POS));
     2ec:	0189      	lsls	r1, r1, #6
    return atcab_aes(mode, key_id, plaintext, ciphertext);
     2ee:	b2c8      	uxtb	r0, r1
     2f0:	0021      	movs	r1, r4
     2f2:	4c01      	ldr	r4, [pc, #4]	; (2f8 <atcab_aes_encrypt+0x10>)
     2f4:	47a0      	blx	r4
}
     2f6:	bd10      	pop	{r4, pc}
     2f8:	00000261 	.word	0x00000261

000002fc <atcab_gendig>:
 *                              "Shared Nonce" mode, otherwise ignored (can be NULL).
 *  \param[in] other_data_size  Size of other_data in bytes.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_gendig(uint8_t zone, uint16_t key_id, const uint8_t *other_data, uint8_t other_data_size)
{
     2fc:	b530      	push	{r4, r5, lr}
     2fe:	b0b3      	sub	sp, #204	; 0xcc
     300:	0014      	movs	r4, r2
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     302:	4a1e      	ldr	r2, [pc, #120]	; (37c <atcab_gendig+0x80>)
     304:	6812      	ldr	r2, [r2, #0]
     306:	6815      	ldr	r5, [r2, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    bool is_no_mac_key = false;

    if (other_data_size > 0 && other_data == NULL)
     308:	2b00      	cmp	r3, #0
     30a:	d026      	beq.n	35a <atcab_gendig+0x5e>
     30c:	2c00      	cmp	r4, #0
     30e:	d022      	beq.n	356 <atcab_gendig+0x5a>
    }

    do
    {
        // build gendig command
        packet.param1 = zone;
     310:	466a      	mov	r2, sp
     312:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     314:	8091      	strh	r1, [r2, #4]

        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
     316:	2803      	cmp	r0, #3
     318:	d124      	bne.n	364 <atcab_gendig+0x68>
     31a:	2b1f      	cmp	r3, #31
     31c:	d911      	bls.n	342 <atcab_gendig+0x46>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
     31e:	2220      	movs	r2, #32
     320:	0021      	movs	r1, r4
     322:	466b      	mov	r3, sp
     324:	1d98      	adds	r0, r3, #6
     326:	4b16      	ldr	r3, [pc, #88]	; (380 <atcab_gendig+0x84>)
     328:	4798      	blx	r3
    bool is_no_mac_key = false;
     32a:	2200      	movs	r2, #0
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
     32c:	e01d      	b.n	36a <atcab_gendig+0x6e>
        }
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
     32e:	2b03      	cmp	r3, #3
     330:	d91b      	bls.n	36a <atcab_gendig+0x6e>
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_WORD_SIZE);
     332:	3204      	adds	r2, #4
     334:	0021      	movs	r1, r4
     336:	466b      	mov	r3, sp
     338:	1d98      	adds	r0, r3, #6
     33a:	4b11      	ldr	r3, [pc, #68]	; (380 <atcab_gendig+0x84>)
     33c:	4798      	blx	r3
            is_no_mac_key = true;
     33e:	2201      	movs	r2, #1
     340:	e013      	b.n	36a <atcab_gendig+0x6e>
    bool is_no_mac_key = false;
     342:	2200      	movs	r2, #0
     344:	e011      	b.n	36a <atcab_gendig+0x6e>
     346:	2200      	movs	r2, #0
     348:	e00f      	b.n	36a <atcab_gendig+0x6e>
        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
        {
            break;
        }

        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     34a:	4b0c      	ldr	r3, [pc, #48]	; (37c <atcab_gendig+0x80>)
     34c:	6819      	ldr	r1, [r3, #0]
     34e:	4668      	mov	r0, sp
     350:	4b0c      	ldr	r3, [pc, #48]	; (384 <atcab_gendig+0x88>)
     352:	4798      	blx	r3
     354:	e00f      	b.n	376 <atcab_gendig+0x7a>
        return ATCA_BAD_PARAM;
     356:	20e2      	movs	r0, #226	; 0xe2
     358:	e00d      	b.n	376 <atcab_gendig+0x7a>
        packet.param1 = zone;
     35a:	466a      	mov	r2, sp
     35c:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     35e:	8091      	strh	r1, [r2, #4]
        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
     360:	2803      	cmp	r0, #3
     362:	d0f0      	beq.n	346 <atcab_gendig+0x4a>
    bool is_no_mac_key = false;
     364:	2200      	movs	r2, #0
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
     366:	2802      	cmp	r0, #2
     368:	d0e1      	beq.n	32e <atcab_gendig+0x32>
        if ((status = atGenDig(ca_cmd, &packet, is_no_mac_key)) != ATCA_SUCCESS)
     36a:	4669      	mov	r1, sp
     36c:	0028      	movs	r0, r5
     36e:	4b06      	ldr	r3, [pc, #24]	; (388 <atcab_gendig+0x8c>)
     370:	4798      	blx	r3
     372:	2800      	cmp	r0, #0
     374:	d0e9      	beq.n	34a <atcab_gendig+0x4e>

    }
    while (0);

    return status;
}
     376:	b033      	add	sp, #204	; 0xcc
     378:	bd30      	pop	{r4, r5, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	200009e4 	.word	0x200009e4
     380:	00019d1d 	.word	0x00019d1d
     384:	00000cf5 	.word	0x00000cf5
     388:	00000a21 	.word	0x00000a21

0000038c <atcab_kdf>:
 *                        encryption is not used, this can be NULL.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_kdf(uint8_t mode, uint16_t key_id, const uint32_t details, const uint8_t* message, uint8_t* out_data, uint8_t* out_nonce)
{
     38c:	b5f0      	push	{r4, r5, r6, r7, lr}
     38e:	b0b3      	sub	sp, #204	; 0xcc
     390:	0015      	movs	r5, r2
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint16_t out_data_size = 0;

    do
    {
        if (message == NULL)
     392:	2b00      	cmp	r3, #0
     394:	d053      	beq.n	43e <atcab_kdf+0xb2>
    ATCACommand ca_cmd = _gDevice->mCommands;
     396:	4a2b      	ldr	r2, [pc, #172]	; (444 <atcab_kdf+0xb8>)
     398:	6812      	ldr	r2, [r2, #0]
     39a:	6814      	ldr	r4, [r2, #0]
        {
            return ATCA_BAD_PARAM;
        }

        // Build the KDF command
        packet.param1 = mode;
     39c:	466a      	mov	r2, sp
     39e:	70d0      	strb	r0, [r2, #3]
        packet.param2 = key_id;
     3a0:	8091      	strh	r1, [r2, #4]

        // Add details parameter
        packet.data[0] = details;
     3a2:	7195      	strb	r5, [r2, #6]
        packet.data[1] = details >> 8;
     3a4:	0a2a      	lsrs	r2, r5, #8
     3a6:	4669      	mov	r1, sp
     3a8:	71ca      	strb	r2, [r1, #7]
        packet.data[2] = details >> 16;
     3aa:	0c2a      	lsrs	r2, r5, #16
     3ac:	720a      	strb	r2, [r1, #8]
        packet.data[3] = details >> 24;
     3ae:	0e2a      	lsrs	r2, r5, #24
     3b0:	724a      	strb	r2, [r1, #9]
     3b2:	2660      	movs	r6, #96	; 0x60
     3b4:	4006      	ands	r6, r0

        // Add input message
        if ((mode & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_AES)
     3b6:	2e20      	cmp	r6, #32
     3b8:	d00d      	beq.n	3d6 <atcab_kdf+0x4a>
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);
        }
        else
        {
            // All other algorithms encode message size in the last byte of details
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, packet.data[3]);
     3ba:	0019      	movs	r1, r3
     3bc:	200a      	movs	r0, #10
     3be:	4468      	add	r0, sp
     3c0:	4b21      	ldr	r3, [pc, #132]	; (448 <atcab_kdf+0xbc>)
     3c2:	4798      	blx	r3
        }

        // Build command
        if ((status = atKDF(ca_cmd, &packet)) != ATCA_SUCCESS)
     3c4:	4669      	mov	r1, sp
     3c6:	0020      	movs	r0, r4
     3c8:	4b20      	ldr	r3, [pc, #128]	; (44c <atcab_kdf+0xc0>)
     3ca:	4798      	blx	r3
     3cc:	1e04      	subs	r4, r0, #0
     3ce:	d009      	beq.n	3e4 <atcab_kdf+0x58>
        }
    }
    while (false);

    return status;
}
     3d0:	0020      	movs	r0, r4
     3d2:	b033      	add	sp, #204	; 0xcc
     3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);
     3d6:	2210      	movs	r2, #16
     3d8:	0019      	movs	r1, r3
     3da:	200a      	movs	r0, #10
     3dc:	4468      	add	r0, sp
     3de:	4b1a      	ldr	r3, [pc, #104]	; (448 <atcab_kdf+0xbc>)
     3e0:	4798      	blx	r3
     3e2:	e7ef      	b.n	3c4 <atcab_kdf+0x38>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     3e4:	4b17      	ldr	r3, [pc, #92]	; (444 <atcab_kdf+0xb8>)
     3e6:	6819      	ldr	r1, [r3, #0]
     3e8:	4668      	mov	r0, sp
     3ea:	4b19      	ldr	r3, [pc, #100]	; (450 <atcab_kdf+0xc4>)
     3ec:	4798      	blx	r3
     3ee:	1e04      	subs	r4, r0, #0
     3f0:	d1ee      	bne.n	3d0 <atcab_kdf+0x44>
            out_data_size = 32;
     3f2:	2720      	movs	r7, #32
        if (((mode & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_PRF) && (details & KDF_DETAILS_PRF_TARGET_LEN_64))
     3f4:	2e00      	cmp	r6, #0
     3f6:	d102      	bne.n	3fe <atcab_kdf+0x72>
     3f8:	05eb      	lsls	r3, r5, #23
     3fa:	d500      	bpl.n	3fe <atcab_kdf+0x72>
            out_data_size = 64;
     3fc:	3720      	adds	r7, #32
        if (out_data != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size))
     3fe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
     400:	2b00      	cmp	r3, #0
     402:	d004      	beq.n	40e <atcab_kdf+0x82>
     404:	466b      	mov	r3, sp
     406:	799a      	ldrb	r2, [r3, #6]
     408:	1cfb      	adds	r3, r7, #3
     40a:	429a      	cmp	r2, r3
     40c:	da10      	bge.n	430 <atcab_kdf+0xa4>
        if (out_nonce != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size + 32))
     40e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
     410:	2b00      	cmp	r3, #0
     412:	d0dd      	beq.n	3d0 <atcab_kdf+0x44>
     414:	466b      	mov	r3, sp
     416:	799a      	ldrb	r2, [r3, #6]
     418:	003b      	movs	r3, r7
     41a:	3323      	adds	r3, #35	; 0x23
     41c:	429a      	cmp	r2, r3
     41e:	dbd7      	blt.n	3d0 <atcab_kdf+0x44>
            memcpy(out_nonce, &packet.data[ATCA_RSP_DATA_IDX + out_data_size], 32);
     420:	ab32      	add	r3, sp, #200	; 0xc8
     422:	19d9      	adds	r1, r3, r7
     424:	39c1      	subs	r1, #193	; 0xc1
     426:	2220      	movs	r2, #32
     428:	9839      	ldr	r0, [sp, #228]	; 0xe4
     42a:	4b07      	ldr	r3, [pc, #28]	; (448 <atcab_kdf+0xbc>)
     42c:	4798      	blx	r3
     42e:	e7cf      	b.n	3d0 <atcab_kdf+0x44>
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], out_data_size);
     430:	003a      	movs	r2, r7
     432:	466b      	mov	r3, sp
     434:	1dd9      	adds	r1, r3, #7
     436:	9838      	ldr	r0, [sp, #224]	; 0xe0
     438:	4b03      	ldr	r3, [pc, #12]	; (448 <atcab_kdf+0xbc>)
     43a:	4798      	blx	r3
     43c:	e7e7      	b.n	40e <atcab_kdf+0x82>
            return ATCA_BAD_PARAM;
     43e:	24e2      	movs	r4, #226	; 0xe2
     440:	e7c6      	b.n	3d0 <atcab_kdf+0x44>
     442:	46c0      	nop			; (mov r8, r8)
     444:	200009e4 	.word	0x200009e4
     448:	00019d1d 	.word	0x00019d1d
     44c:	00000b1d 	.word	0x00000b1d
     450:	00000cf5 	.word	0x00000cf5

00000454 <atcab_nonce_base>:
 *                          needed.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_base(uint8_t mode, uint16_t zero, const uint8_t *num_in, uint8_t* rand_out)
{
     454:	b5f0      	push	{r4, r5, r6, r7, lr}
     456:	b0b3      	sub	sp, #204	; 0xcc
     458:	0016      	movs	r6, r2
     45a:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     45c:	4b1f      	ldr	r3, [pc, #124]	; (4dc <atcab_nonce_base+0x88>)
     45e:	681b      	ldr	r3, [r3, #0]
     460:	681f      	ldr	r7, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t nonce_mode = mode & NONCE_MODE_MASK;
     462:	2303      	movs	r3, #3
     464:	4003      	ands	r3, r0

    do
    {
        // build a nonce command
        packet.param1 = mode;
     466:	466a      	mov	r2, sp
     468:	70d0      	strb	r0, [r2, #3]
        packet.param2 = zero;
     46a:	8091      	strh	r1, [r2, #4]

        // Copy the right amount of NumIn data
        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
     46c:	2b01      	cmp	r3, #1
     46e:	d905      	bls.n	47c <atcab_nonce_base+0x28>
                memcpy(packet.data, num_in, 32);
            }
        }
        else
        {
            return ATCA_BAD_PARAM;
     470:	24e2      	movs	r4, #226	; 0xe2
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
     472:	2b03      	cmp	r3, #3
     474:	d022      	beq.n	4bc <atcab_nonce_base+0x68>

    }
    while (0);

    return status;
}
     476:	0020      	movs	r0, r4
     478:	b033      	add	sp, #204	; 0xcc
     47a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
     47c:	2214      	movs	r2, #20
     47e:	0031      	movs	r1, r6
     480:	466b      	mov	r3, sp
     482:	1d98      	adds	r0, r3, #6
     484:	4b16      	ldr	r3, [pc, #88]	; (4e0 <atcab_nonce_base+0x8c>)
     486:	4798      	blx	r3
        if ((status = atNonce(ca_cmd, &packet)) != ATCA_SUCCESS)
     488:	4669      	mov	r1, sp
     48a:	0038      	movs	r0, r7
     48c:	4b15      	ldr	r3, [pc, #84]	; (4e4 <atcab_nonce_base+0x90>)
     48e:	4798      	blx	r3
     490:	1e04      	subs	r4, r0, #0
     492:	d1f0      	bne.n	476 <atcab_nonce_base+0x22>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     494:	4b11      	ldr	r3, [pc, #68]	; (4dc <atcab_nonce_base+0x88>)
     496:	6819      	ldr	r1, [r3, #0]
     498:	4668      	mov	r0, sp
     49a:	4b13      	ldr	r3, [pc, #76]	; (4e8 <atcab_nonce_base+0x94>)
     49c:	4798      	blx	r3
     49e:	1e04      	subs	r4, r0, #0
     4a0:	d1e9      	bne.n	476 <atcab_nonce_base+0x22>
        if ((rand_out != NULL) && (packet.data[ATCA_COUNT_IDX] >= 35))
     4a2:	2d00      	cmp	r5, #0
     4a4:	d0e7      	beq.n	476 <atcab_nonce_base+0x22>
     4a6:	466b      	mov	r3, sp
     4a8:	799b      	ldrb	r3, [r3, #6]
     4aa:	2b22      	cmp	r3, #34	; 0x22
     4ac:	d9e3      	bls.n	476 <atcab_nonce_base+0x22>
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
     4ae:	2220      	movs	r2, #32
     4b0:	466b      	mov	r3, sp
     4b2:	1dd9      	adds	r1, r3, #7
     4b4:	0028      	movs	r0, r5
     4b6:	4b0a      	ldr	r3, [pc, #40]	; (4e0 <atcab_nonce_base+0x8c>)
     4b8:	4798      	blx	r3
     4ba:	e7dc      	b.n	476 <atcab_nonce_base+0x22>
            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
     4bc:	0683      	lsls	r3, r0, #26
     4be:	d506      	bpl.n	4ce <atcab_nonce_base+0x7a>
                memcpy(packet.data, num_in, 64);
     4c0:	2240      	movs	r2, #64	; 0x40
     4c2:	0031      	movs	r1, r6
     4c4:	466b      	mov	r3, sp
     4c6:	1d98      	adds	r0, r3, #6
     4c8:	4b05      	ldr	r3, [pc, #20]	; (4e0 <atcab_nonce_base+0x8c>)
     4ca:	4798      	blx	r3
     4cc:	e7dc      	b.n	488 <atcab_nonce_base+0x34>
                memcpy(packet.data, num_in, 32);
     4ce:	2220      	movs	r2, #32
     4d0:	0031      	movs	r1, r6
     4d2:	466b      	mov	r3, sp
     4d4:	1d98      	adds	r0, r3, #6
     4d6:	4b02      	ldr	r3, [pc, #8]	; (4e0 <atcab_nonce_base+0x8c>)
     4d8:	4798      	blx	r3
     4da:	e7d5      	b.n	488 <atcab_nonce_base+0x34>
     4dc:	200009e4 	.word	0x200009e4
     4e0:	00019d1d 	.word	0x00019d1d
     4e4:	00000a51 	.word	0x00000a51
     4e8:	00000cf5 	.word	0x00000cf5

000004ec <atcab_nonce_rand>:
 *                        here. Can be NULL if not needed.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_nonce_rand(const uint8_t *num_in, uint8_t* rand_out)
{
     4ec:	b510      	push	{r4, lr}
     4ee:	0002      	movs	r2, r0
     4f0:	000b      	movs	r3, r1
    return atcab_nonce_base(NONCE_MODE_SEED_UPDATE, 0, num_in, rand_out);
     4f2:	2100      	movs	r1, #0
     4f4:	2000      	movs	r0, #0
     4f6:	4c01      	ldr	r4, [pc, #4]	; (4fc <atcab_nonce_rand+0x10>)
     4f8:	47a0      	blx	r4
}
     4fa:	bd10      	pop	{r4, pc}
     4fc:	00000455 	.word	0x00000455

00000500 <atcab_random>:
 * \param[out] rand_out  32 bytes of random data is returned here.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_random(uint8_t *rand_out)
{
     500:	b530      	push	{r4, r5, lr}
     502:	b0b3      	sub	sp, #204	; 0xcc
     504:	0005      	movs	r5, r0
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
     506:	4b12      	ldr	r3, [pc, #72]	; (550 <atcab_random+0x50>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	6818      	ldr	r0, [r3, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;

    do
    {
        // build an random command
        packet.param1 = RANDOM_SEED_UPDATE;
     50c:	2300      	movs	r3, #0
     50e:	466a      	mov	r2, sp
     510:	70d3      	strb	r3, [r2, #3]
        packet.param2 = 0x0000;
     512:	8093      	strh	r3, [r2, #4]

        if ((status = atRandom(ca_cmd, &packet)) != ATCA_SUCCESS)
     514:	4669      	mov	r1, sp
     516:	4b0f      	ldr	r3, [pc, #60]	; (554 <atcab_random+0x54>)
     518:	4798      	blx	r3
     51a:	1e04      	subs	r4, r0, #0
     51c:	d002      	beq.n	524 <atcab_random+0x24>
    }
    while (0);


    return status;
}
     51e:	0020      	movs	r0, r4
     520:	b033      	add	sp, #204	; 0xcc
     522:	bd30      	pop	{r4, r5, pc}
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     524:	4b0a      	ldr	r3, [pc, #40]	; (550 <atcab_random+0x50>)
     526:	6819      	ldr	r1, [r3, #0]
     528:	4668      	mov	r0, sp
     52a:	4b0b      	ldr	r3, [pc, #44]	; (558 <atcab_random+0x58>)
     52c:	4798      	blx	r3
     52e:	1e04      	subs	r4, r0, #0
     530:	d1f5      	bne.n	51e <atcab_random+0x1e>
        if (packet.data[ATCA_COUNT_IDX] != RANDOM_RSP_SIZE)
     532:	466b      	mov	r3, sp
     534:	799b      	ldrb	r3, [r3, #6]
     536:	2b23      	cmp	r3, #35	; 0x23
     538:	d001      	beq.n	53e <atcab_random+0x3e>
            status = ATCA_RX_FAIL;
     53a:	24e6      	movs	r4, #230	; 0xe6
     53c:	e7ef      	b.n	51e <atcab_random+0x1e>
        if (rand_out)
     53e:	2d00      	cmp	r5, #0
     540:	d0ed      	beq.n	51e <atcab_random+0x1e>
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
     542:	2220      	movs	r2, #32
     544:	466b      	mov	r3, sp
     546:	1dd9      	adds	r1, r3, #7
     548:	0028      	movs	r0, r5
     54a:	4b04      	ldr	r3, [pc, #16]	; (55c <atcab_random+0x5c>)
     54c:	4798      	blx	r3
     54e:	e7e6      	b.n	51e <atcab_random+0x1e>
     550:	200009e4 	.word	0x200009e4
     554:	00000a8d 	.word	0x00000a8d
     558:	00000cf5 	.word	0x00000cf5
     55c:	00019d1d 	.word	0x00019d1d

00000560 <atcab_read_zone>:
 *  \param[in]  len     Length of the data to be read. Must be either 4 or 32.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, uint8_t *data, uint8_t len)
{
     560:	b5f0      	push	{r4, r5, r6, r7, lr}
     562:	b0b9      	sub	sp, #228	; 0xe4
     564:	9003      	str	r0, [sp, #12]
     566:	a83e      	add	r0, sp, #248	; 0xf8
     568:	c880      	ldmia	r0!, {r7}
     56a:	7805      	ldrb	r5, [r0, #0]
    uint16_t addr;

    do
    {
        // Check the input parameters
        if (data == NULL)
     56c:	2f00      	cmp	r7, #0
     56e:	d00a      	beq.n	586 <atcab_read_zone+0x26>
    ATCACommand ca_cmd = _gDevice->mCommands;
     570:	4822      	ldr	r0, [pc, #136]	; (5fc <atcab_read_zone+0x9c>)
     572:	6800      	ldr	r0, [r0, #0]
     574:	6806      	ldr	r6, [r0, #0]
        {
            return ATCA_BAD_PARAM;
        }

        if (len != 4 && len != 32)
     576:	2d04      	cmp	r5, #4
     578:	d016      	beq.n	5a8 <atcab_read_zone+0x48>
        {
            return ATCA_BAD_PARAM;
     57a:	24e2      	movs	r4, #226	; 0xe2
        if (len != 4 && len != 32)
     57c:	2d20      	cmp	r5, #32
     57e:	d004      	beq.n	58a <atcab_read_zone+0x2a>
        memcpy(data, &packet.data[1], len);
    }
    while (0);

    return status;
}
     580:	0020      	movs	r0, r4
     582:	b039      	add	sp, #228	; 0xe4
     584:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ATCA_BAD_PARAM;
     586:	24e2      	movs	r4, #226	; 0xe2
     588:	e7fa      	b.n	580 <atcab_read_zone+0x20>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     58a:	200e      	movs	r0, #14
     58c:	ac02      	add	r4, sp, #8
     58e:	46a4      	mov	ip, r4
     590:	4460      	add	r0, ip
     592:	9000      	str	r0, [sp, #0]
     594:	9803      	ldr	r0, [sp, #12]
     596:	4c1a      	ldr	r4, [pc, #104]	; (600 <atcab_read_zone+0xa0>)
     598:	47a0      	blx	r4
     59a:	1e04      	subs	r4, r0, #0
     59c:	d1f0      	bne.n	580 <atcab_read_zone+0x20>
            zone = zone | ATCA_ZONE_READWRITE_32;
     59e:	2380      	movs	r3, #128	; 0x80
     5a0:	9a03      	ldr	r2, [sp, #12]
     5a2:	431a      	orrs	r2, r3
     5a4:	9203      	str	r2, [sp, #12]
     5a6:	e009      	b.n	5bc <atcab_read_zone+0x5c>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     5a8:	200e      	movs	r0, #14
     5aa:	ac02      	add	r4, sp, #8
     5ac:	46a4      	mov	ip, r4
     5ae:	4460      	add	r0, ip
     5b0:	9000      	str	r0, [sp, #0]
     5b2:	9803      	ldr	r0, [sp, #12]
     5b4:	4c12      	ldr	r4, [pc, #72]	; (600 <atcab_read_zone+0xa0>)
     5b6:	47a0      	blx	r4
     5b8:	1e04      	subs	r4, r0, #0
     5ba:	d1e1      	bne.n	580 <atcab_read_zone+0x20>
        packet.param1 = zone;
     5bc:	a906      	add	r1, sp, #24
     5be:	466b      	mov	r3, sp
     5c0:	7b1b      	ldrb	r3, [r3, #12]
     5c2:	70cb      	strb	r3, [r1, #3]
        packet.param2 = addr;
     5c4:	230e      	movs	r3, #14
     5c6:	aa02      	add	r2, sp, #8
     5c8:	4694      	mov	ip, r2
     5ca:	4463      	add	r3, ip
     5cc:	881b      	ldrh	r3, [r3, #0]
     5ce:	808b      	strh	r3, [r1, #4]
        if ((status = atRead(ca_cmd, &packet)) != ATCA_SUCCESS)
     5d0:	0030      	movs	r0, r6
     5d2:	4b0c      	ldr	r3, [pc, #48]	; (604 <atcab_read_zone+0xa4>)
     5d4:	4798      	blx	r3
     5d6:	1e04      	subs	r4, r0, #0
     5d8:	d1d2      	bne.n	580 <atcab_read_zone+0x20>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     5da:	4b08      	ldr	r3, [pc, #32]	; (5fc <atcab_read_zone+0x9c>)
     5dc:	6819      	ldr	r1, [r3, #0]
     5de:	a806      	add	r0, sp, #24
     5e0:	4b09      	ldr	r3, [pc, #36]	; (608 <atcab_read_zone+0xa8>)
     5e2:	4798      	blx	r3
     5e4:	1e04      	subs	r4, r0, #0
     5e6:	d1cb      	bne.n	580 <atcab_read_zone+0x20>
        memcpy(data, &packet.data[1], len);
     5e8:	002a      	movs	r2, r5
     5ea:	2117      	movs	r1, #23
     5ec:	ab02      	add	r3, sp, #8
     5ee:	469c      	mov	ip, r3
     5f0:	4461      	add	r1, ip
     5f2:	0038      	movs	r0, r7
     5f4:	4b05      	ldr	r3, [pc, #20]	; (60c <atcab_read_zone+0xac>)
     5f6:	4798      	blx	r3
     5f8:	e7c2      	b.n	580 <atcab_read_zone+0x20>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	200009e4 	.word	0x200009e4
     600:	00000191 	.word	0x00000191
     604:	00000aa5 	.word	0x00000aa5
     608:	00000cf5 	.word	0x00000cf5
     60c:	00019d1d 	.word	0x00019d1d

00000610 <atcab_read_serial_number>:
 *  \param[out] serial_number  9 byte serial number is returned here.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_serial_number(uint8_t* serial_number)
{
     610:	b570      	push	{r4, r5, r6, lr}
     612:	b08a      	sub	sp, #40	; 0x28
     614:	0005      	movs	r5, r0
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint8_t read_buf[ATCA_BLOCK_SIZE];

    if (!serial_number)
    {
        return ATCA_BAD_PARAM;
     616:	24e2      	movs	r4, #226	; 0xe2
    if (!serial_number)
     618:	2800      	cmp	r0, #0
     61a:	d00b      	beq.n	634 <atcab_read_serial_number+0x24>
    }

    do
    {
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, read_buf, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
     61c:	2320      	movs	r3, #32
     61e:	9301      	str	r3, [sp, #4]
     620:	ab02      	add	r3, sp, #8
     622:	9300      	str	r3, [sp, #0]
     624:	2300      	movs	r3, #0
     626:	2200      	movs	r2, #0
     628:	2100      	movs	r1, #0
     62a:	2000      	movs	r0, #0
     62c:	4c08      	ldr	r4, [pc, #32]	; (650 <atcab_read_serial_number+0x40>)
     62e:	47a0      	blx	r4
     630:	1e04      	subs	r4, r0, #0
     632:	d002      	beq.n	63a <atcab_read_serial_number+0x2a>
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
    while (0);

    return status;
}
     634:	0020      	movs	r0, r4
     636:	b00a      	add	sp, #40	; 0x28
     638:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(&serial_number[0], &read_buf[0], 4);
     63a:	2204      	movs	r2, #4
     63c:	a902      	add	r1, sp, #8
     63e:	0028      	movs	r0, r5
     640:	4e04      	ldr	r6, [pc, #16]	; (654 <atcab_read_serial_number+0x44>)
     642:	47b0      	blx	r6
        memcpy(&serial_number[4], &read_buf[8], 5);
     644:	1d28      	adds	r0, r5, #4
     646:	2205      	movs	r2, #5
     648:	a904      	add	r1, sp, #16
     64a:	47b0      	blx	r6
     64c:	e7f2      	b.n	634 <atcab_read_serial_number+0x24>
     64e:	46c0      	nop			; (mov r8, r8)
     650:	00000561 	.word	0x00000561
     654:	00019d1d 	.word	0x00019d1d

00000658 <atcab_read_enc>:
 *  \param[in]  enc_key_id  KeyID of the ReadKey being used.
 *
 *  returns ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_enc(uint16_t key_id, uint8_t block, uint8_t *data, const uint8_t* enc_key, const uint16_t enc_key_id)
{
     658:	b5f0      	push	{r4, r5, r6, r7, lr}
     65a:	46d6      	mov	lr, sl
     65c:	b500      	push	{lr}
     65e:	b0b6      	sub	sp, #216	; 0xd8
     660:	9002      	str	r0, [sp, #8]
     662:	9103      	str	r1, [sp, #12]
     664:	0015      	movs	r5, r2
     666:	001c      	movs	r4, r3
     668:	ab3c      	add	r3, sp, #240	; 0xf0
     66a:	881e      	ldrh	r6, [r3, #0]
    uint8_t zone = ATCA_ZONE_DATA | ATCA_ZONE_READWRITE_32;
    atca_nonce_in_out_t nonce_params;
    atca_gen_dig_in_out_t gen_dig_param;
    atca_temp_key_t temp_key;
    uint8_t serial_num[32];
    uint8_t num_in[NONCE_NUMIN_SIZE] = { 0 };
     66c:	2214      	movs	r2, #20
     66e:	2100      	movs	r1, #0
     670:	a80e      	add	r0, sp, #56	; 0x38
     672:	4f3b      	ldr	r7, [pc, #236]	; (760 <atcab_read_enc+0x108>)
     674:	47b8      	blx	r7
    uint8_t rand_out[RANDOM_NUM_SIZE] = { 0 };
     676:	2220      	movs	r2, #32
     678:	2100      	movs	r1, #0
     67a:	a806      	add	r0, sp, #24
     67c:	47b8      	blx	r7
    uint8_t other_data[4] = { 0 };
     67e:	2300      	movs	r3, #0
     680:	9305      	str	r3, [sp, #20]
    int i = 0;

    do
    {
        // Verify inputs parameters
        if (data == NULL || enc_key == NULL)
     682:	2d00      	cmp	r5, #0
     684:	d067      	beq.n	756 <atcab_read_enc+0xfe>
        {
            status = ATCA_BAD_PARAM;
     686:	20e2      	movs	r0, #226	; 0xe2
        if (data == NULL || enc_key == NULL)
     688:	2c00      	cmp	r4, #0
     68a:	d065      	beq.n	758 <atcab_read_enc+0x100>
            break;
        }

        // Read the device SN
        if ((status = atcab_read_zone(ATCA_ZONE_CONFIG, 0, 0, 0, serial_num, 32)) != ATCA_SUCCESS)
     68c:	3320      	adds	r3, #32
     68e:	9301      	str	r3, [sp, #4]
     690:	ab13      	add	r3, sp, #76	; 0x4c
     692:	9300      	str	r3, [sp, #0]
     694:	2300      	movs	r3, #0
     696:	2200      	movs	r2, #0
     698:	2100      	movs	r1, #0
     69a:	2000      	movs	r0, #0
     69c:	4f31      	ldr	r7, [pc, #196]	; (764 <atcab_read_enc+0x10c>)
     69e:	47b8      	blx	r7
     6a0:	2800      	cmp	r0, #0
     6a2:	d159      	bne.n	758 <atcab_read_enc+0x100>
        {
            break;
        }
        // Make the SN continuous by moving SN[4:8] right after SN[0:3]
        memmove(&serial_num[4], &serial_num[8], 5);
     6a4:	2205      	movs	r2, #5
     6a6:	a915      	add	r1, sp, #84	; 0x54
     6a8:	a814      	add	r0, sp, #80	; 0x50
     6aa:	4b2f      	ldr	r3, [pc, #188]	; (768 <atcab_read_enc+0x110>)
     6ac:	4798      	blx	r3

        // Send the random Nonce command
        if ((status = atcab_nonce_rand(num_in, rand_out)) != ATCA_SUCCESS)
     6ae:	a906      	add	r1, sp, #24
     6b0:	a80e      	add	r0, sp, #56	; 0x38
     6b2:	4b2e      	ldr	r3, [pc, #184]	; (76c <atcab_read_enc+0x114>)
     6b4:	4798      	blx	r3
     6b6:	2800      	cmp	r0, #0
     6b8:	d14e      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "Nonce failed");
        }

        // Calculate Tempkey
        memset(&temp_key, 0, sizeof(temp_key));
     6ba:	af1b      	add	r7, sp, #108	; 0x6c
     6bc:	2244      	movs	r2, #68	; 0x44
     6be:	2100      	movs	r1, #0
     6c0:	0038      	movs	r0, r7
     6c2:	4b27      	ldr	r3, [pc, #156]	; (760 <atcab_read_enc+0x108>)
     6c4:	469a      	mov	sl, r3
     6c6:	4798      	blx	r3
        memset(&nonce_params, 0, sizeof(nonce_params));
     6c8:	2210      	movs	r2, #16
     6ca:	2100      	movs	r1, #0
     6cc:	a832      	add	r0, sp, #200	; 0xc8
     6ce:	47d0      	blx	sl
        nonce_params.mode = NONCE_MODE_SEED_UPDATE;
        nonce_params.zero = 0;
        nonce_params.num_in = (uint8_t*)&num_in;
     6d0:	ab0e      	add	r3, sp, #56	; 0x38
     6d2:	9333      	str	r3, [sp, #204]	; 0xcc
        nonce_params.rand_out = (uint8_t*)&rand_out;
     6d4:	ab06      	add	r3, sp, #24
     6d6:	9334      	str	r3, [sp, #208]	; 0xd0
        nonce_params.temp_key = &temp_key;
     6d8:	9735      	str	r7, [sp, #212]	; 0xd4
        if ((status = atcah_nonce(&nonce_params)) != ATCA_SUCCESS)
     6da:	a832      	add	r0, sp, #200	; 0xc8
     6dc:	4b24      	ldr	r3, [pc, #144]	; (770 <atcab_read_enc+0x118>)
     6de:	4798      	blx	r3
     6e0:	2800      	cmp	r0, #0
     6e2:	d139      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "Calc TempKey failed");
        }

        // Supply OtherData so GenDig behavior is the same for keys with SlotConfig.NoMac set
        other_data[0] = ATCA_GENDIG;
     6e4:	aa05      	add	r2, sp, #20
     6e6:	2315      	movs	r3, #21
     6e8:	7013      	strb	r3, [r2, #0]
        other_data[1] = GENDIG_ZONE_DATA;
     6ea:	3b13      	subs	r3, #19
     6ec:	7053      	strb	r3, [r2, #1]
        other_data[2] = (uint8_t)(enc_key_id);
     6ee:	7096      	strb	r6, [r2, #2]
        other_data[3] = (uint8_t)(enc_key_id >> 8);
     6f0:	0a33      	lsrs	r3, r6, #8
     6f2:	70d3      	strb	r3, [r2, #3]

        // Send the GenDig command
        if ((status = atcab_gendig(GENDIG_ZONE_DATA, enc_key_id, other_data, sizeof(other_data))) != ATCA_SUCCESS)
     6f4:	2304      	movs	r3, #4
     6f6:	0031      	movs	r1, r6
     6f8:	3002      	adds	r0, #2
     6fa:	4f1e      	ldr	r7, [pc, #120]	; (774 <atcab_read_enc+0x11c>)
     6fc:	47b8      	blx	r7
     6fe:	2800      	cmp	r0, #0
     700:	d12a      	bne.n	758 <atcab_read_enc+0x100>
        }

        // Calculate Tempkey
        // NoMac bit isn't being considered here on purpose to remove having to read SlotConfig.
        // OtherData is built to get the same result regardless of the NoMac bit.
        memset(&gen_dig_param, 0, sizeof(gen_dig_param));
     702:	af2c      	add	r7, sp, #176	; 0xb0
     704:	2218      	movs	r2, #24
     706:	2100      	movs	r1, #0
     708:	0038      	movs	r0, r7
     70a:	4b15      	ldr	r3, [pc, #84]	; (760 <atcab_read_enc+0x108>)
     70c:	4798      	blx	r3
        gen_dig_param.key_id = enc_key_id;
     70e:	807e      	strh	r6, [r7, #2]
        gen_dig_param.is_key_nomac = false;
        gen_dig_param.sn = serial_num;
     710:	ab13      	add	r3, sp, #76	; 0x4c
     712:	60bb      	str	r3, [r7, #8]
        gen_dig_param.stored_value = enc_key;
     714:	60fc      	str	r4, [r7, #12]
        gen_dig_param.zone = GENDIG_ZONE_DATA;
     716:	2302      	movs	r3, #2
     718:	703b      	strb	r3, [r7, #0]
        gen_dig_param.other_data = other_data;
     71a:	ab05      	add	r3, sp, #20
     71c:	613b      	str	r3, [r7, #16]
        gen_dig_param.temp_key = &temp_key;
     71e:	ab1b      	add	r3, sp, #108	; 0x6c
     720:	617b      	str	r3, [r7, #20]
        if ((status = atcah_gen_dig(&gen_dig_param)) != ATCA_SUCCESS)
     722:	0038      	movs	r0, r7
     724:	4b14      	ldr	r3, [pc, #80]	; (778 <atcab_read_enc+0x120>)
     726:	4798      	blx	r3
     728:	2800      	cmp	r0, #0
     72a:	d115      	bne.n	758 <atcab_read_enc+0x100>
        {
            BREAK(status, "");
        }

        // Read Encrypted
        if ((status = atcab_read_zone(zone, key_id, block, 0, data, ATCA_BLOCK_SIZE)) != ATCA_SUCCESS)
     72c:	2320      	movs	r3, #32
     72e:	9301      	str	r3, [sp, #4]
     730:	9500      	str	r5, [sp, #0]
     732:	2300      	movs	r3, #0
     734:	9a03      	ldr	r2, [sp, #12]
     736:	9902      	ldr	r1, [sp, #8]
     738:	3082      	adds	r0, #130	; 0x82
     73a:	4c0a      	ldr	r4, [pc, #40]	; (764 <atcab_read_enc+0x10c>)
     73c:	47a0      	blx	r4
     73e:	2800      	cmp	r0, #0
     740:	d10a      	bne.n	758 <atcab_read_enc+0x100>
     742:	2300      	movs	r3, #0
        }

        // Decrypt
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
        {
            data[i] = data[i] ^ temp_key.value[i];
     744:	ac1b      	add	r4, sp, #108	; 0x6c
     746:	5cea      	ldrb	r2, [r5, r3]
     748:	5d19      	ldrb	r1, [r3, r4]
     74a:	404a      	eors	r2, r1
     74c:	54ea      	strb	r2, [r5, r3]
        for (i = 0; i < ATCA_BLOCK_SIZE; i++)
     74e:	3301      	adds	r3, #1
     750:	2b20      	cmp	r3, #32
     752:	d1f8      	bne.n	746 <atcab_read_enc+0xee>
     754:	e000      	b.n	758 <atcab_read_enc+0x100>
            status = ATCA_BAD_PARAM;
     756:	20e2      	movs	r0, #226	; 0xe2
    }
    while (0);


    return status;
}
     758:	b036      	add	sp, #216	; 0xd8
     75a:	bc04      	pop	{r2}
     75c:	4692      	mov	sl, r2
     75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     760:	00019e41 	.word	0x00019e41
     764:	00000561 	.word	0x00000561
     768:	00019da1 	.word	0x00019da1
     76c:	000004ed 	.word	0x000004ed
     770:	0000197d 	.word	0x0000197d
     774:	000002fd 	.word	0x000002fd
     778:	00001a45 	.word	0x00001a45

0000077c <atcab_read_bytes_zone>:
 *  \param[in]  length  Number of bytes to read starting from the offset.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_read_bytes_zone(uint8_t zone, uint16_t slot, size_t offset, uint8_t *data, size_t length)
{
     77c:	b5f0      	push	{r4, r5, r6, r7, lr}
     77e:	46de      	mov	lr, fp
     780:	4657      	mov	r7, sl
     782:	464e      	mov	r6, r9
     784:	4645      	mov	r5, r8
     786:	b5e0      	push	{r5, r6, r7, lr}
     788:	b091      	sub	sp, #68	; 0x44
     78a:	0005      	movs	r5, r0
     78c:	9102      	str	r1, [sp, #8]
     78e:	0017      	movs	r7, r2
     790:	9303      	str	r3, [sp, #12]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    size_t zone_size = 0;
     792:	2300      	movs	r3, #0
     794:	930f      	str	r3, [sp, #60]	; 0x3c
    size_t copy_length = 0;
    size_t read_offset = 0;

    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
    {
        return ATCA_BAD_PARAM;
     796:	24e2      	movs	r4, #226	; 0xe2
    if (zone != ATCA_ZONE_CONFIG && zone != ATCA_ZONE_OTP && zone != ATCA_ZONE_DATA)
     798:	2802      	cmp	r0, #2
     79a:	d907      	bls.n	7ac <atcab_read_bytes_zone+0x30>
        }
    }
    while (false);

    return status;
}
     79c:	0020      	movs	r0, r4
     79e:	b011      	add	sp, #68	; 0x44
     7a0:	bc3c      	pop	{r2, r3, r4, r5}
     7a2:	4690      	mov	r8, r2
     7a4:	4699      	mov	r9, r3
     7a6:	46a2      	mov	sl, r4
     7a8:	46ab      	mov	fp, r5
     7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (zone == ATCA_ZONE_DATA && slot > 15)
     7ac:	2802      	cmp	r0, #2
     7ae:	d01f      	beq.n	7f0 <atcab_read_bytes_zone+0x74>
        return ATCA_SUCCESS;  // Always succeed reading 0 bytes
     7b0:	2400      	movs	r4, #0
    if (length == 0)
     7b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     7b4:	2b00      	cmp	r3, #0
     7b6:	d0f1      	beq.n	79c <atcab_read_bytes_zone+0x20>
        return ATCA_BAD_PARAM;
     7b8:	34e2      	adds	r4, #226	; 0xe2
    if (data == NULL)
     7ba:	9b03      	ldr	r3, [sp, #12]
     7bc:	2b00      	cmp	r3, #0
     7be:	d0ed      	beq.n	79c <atcab_read_bytes_zone+0x20>
        status = atcab_get_zone_size(zone, slot, &zone_size);
     7c0:	aa0f      	add	r2, sp, #60	; 0x3c
     7c2:	9902      	ldr	r1, [sp, #8]
     7c4:	0028      	movs	r0, r5
     7c6:	4b2e      	ldr	r3, [pc, #184]	; (880 <atcab_read_bytes_zone+0x104>)
     7c8:	4798      	blx	r3
     7ca:	1e04      	subs	r4, r0, #0
        if (status != ATCA_SUCCESS)
     7cc:	d1e6      	bne.n	79c <atcab_read_bytes_zone+0x20>
        if (offset + length > zone_size)
     7ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     7d0:	19db      	adds	r3, r3, r7
            return ATCA_BAD_PARAM; // Can't read past the end of a zone
     7d2:	34e2      	adds	r4, #226	; 0xe2
        if (offset + length > zone_size)
     7d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     7d6:	4293      	cmp	r3, r2
     7d8:	d8e0      	bhi.n	79c <atcab_read_bytes_zone+0x20>
        cur_block = offset / ATCA_BLOCK_SIZE;
     7da:	097b      	lsrs	r3, r7, #5
     7dc:	4698      	mov	r8, r3
     7de:	2320      	movs	r3, #32
     7e0:	469a      	mov	sl, r3
     7e2:	2300      	movs	r3, #0
     7e4:	2600      	movs	r6, #0
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
     7e6:	46a9      	mov	r9, r5
     7e8:	001d      	movs	r5, r3
     7ea:	9705      	str	r7, [sp, #20]
     7ec:	4657      	mov	r7, sl
     7ee:	e01e      	b.n	82e <atcab_read_bytes_zone+0xb2>
    if (zone == ATCA_ZONE_DATA && slot > 15)
     7f0:	290f      	cmp	r1, #15
     7f2:	d8d3      	bhi.n	79c <atcab_read_bytes_zone+0x20>
     7f4:	e7dc      	b.n	7b0 <atcab_read_bytes_zone+0x34>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
     7f6:	4643      	mov	r3, r8
     7f8:	015b      	lsls	r3, r3, #5
     7fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     7fc:	1ad3      	subs	r3, r2, r3
     7fe:	2b1f      	cmp	r3, #31
     800:	d817      	bhi.n	832 <atcab_read_bytes_zone+0xb6>
                cur_offset = ((data_idx + offset) / ATCA_WORD_SIZE) % (ATCA_BLOCK_SIZE / ATCA_WORD_SIZE);
     802:	9b05      	ldr	r3, [sp, #20]
     804:	199b      	adds	r3, r3, r6
     806:	089b      	lsrs	r3, r3, #2
     808:	2507      	movs	r5, #7
     80a:	401d      	ands	r5, r3
                read_size = ATCA_WORD_SIZE;
     80c:	3f1c      	subs	r7, #28
     80e:	e010      	b.n	832 <atcab_read_bytes_zone+0xb6>
            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
     810:	9b03      	ldr	r3, [sp, #12]
     812:	1998      	adds	r0, r3, r6
     814:	ab07      	add	r3, sp, #28
     816:	469c      	mov	ip, r3
     818:	4461      	add	r1, ip
     81a:	0022      	movs	r2, r4
     81c:	4b19      	ldr	r3, [pc, #100]	; (884 <atcab_read_bytes_zone+0x108>)
     81e:	4798      	blx	r3
            data_idx += copy_length;
     820:	1936      	adds	r6, r6, r4
            if (read_size == ATCA_BLOCK_SIZE)
     822:	2f20      	cmp	r7, #32
     824:	d024      	beq.n	870 <atcab_read_bytes_zone+0xf4>
                cur_offset += 1;
     826:	3501      	adds	r5, #1
        while (data_idx < length)
     828:	9b1a      	ldr	r3, [sp, #104]	; 0x68
     82a:	42b3      	cmp	r3, r6
     82c:	d924      	bls.n	878 <atcab_read_bytes_zone+0xfc>
            if (read_size == ATCA_BLOCK_SIZE && zone_size - cur_block * ATCA_BLOCK_SIZE < ATCA_BLOCK_SIZE)
     82e:	2f20      	cmp	r7, #32
     830:	d0e1      	beq.n	7f6 <atcab_read_bytes_zone+0x7a>
            status = atcab_read_zone(
     832:	b2eb      	uxtb	r3, r5
     834:	4642      	mov	r2, r8
     836:	4669      	mov	r1, sp
     838:	740a      	strb	r2, [r1, #16]
     83a:	7c0a      	ldrb	r2, [r1, #16]
     83c:	9701      	str	r7, [sp, #4]
     83e:	a907      	add	r1, sp, #28
     840:	9100      	str	r1, [sp, #0]
     842:	9902      	ldr	r1, [sp, #8]
     844:	4648      	mov	r0, r9
     846:	4c10      	ldr	r4, [pc, #64]	; (888 <atcab_read_bytes_zone+0x10c>)
     848:	47a0      	blx	r4
     84a:	9004      	str	r0, [sp, #16]
            if (status != ATCA_SUCCESS)
     84c:	2800      	cmp	r0, #0
     84e:	d115      	bne.n	87c <atcab_read_bytes_zone+0x100>
            read_offset = cur_block * ATCA_BLOCK_SIZE + cur_offset * ATCA_WORD_SIZE;
     850:	4643      	mov	r3, r8
     852:	00db      	lsls	r3, r3, #3
     854:	195b      	adds	r3, r3, r5
     856:	009b      	lsls	r3, r3, #2
                read_buf_idx = 0;                     // Read data is within the requested chunk
     858:	2100      	movs	r1, #0
            if (read_offset < offset)
     85a:	9805      	ldr	r0, [sp, #20]
     85c:	4298      	cmp	r0, r3
     85e:	d900      	bls.n	862 <atcab_read_bytes_zone+0xe6>
                read_buf_idx = offset - read_offset;  // Read data starts before the requested chunk
     860:	1ac1      	subs	r1, r0, r3
            if (length - data_idx < read_size - read_buf_idx)
     862:	1a7b      	subs	r3, r7, r1
     864:	9a1a      	ldr	r2, [sp, #104]	; 0x68
     866:	1b94      	subs	r4, r2, r6
     868:	429c      	cmp	r4, r3
     86a:	d9d1      	bls.n	810 <atcab_read_bytes_zone+0x94>
     86c:	001c      	movs	r4, r3
     86e:	e7cf      	b.n	810 <atcab_read_bytes_zone+0x94>
                cur_block += 1;
     870:	2301      	movs	r3, #1
     872:	469c      	mov	ip, r3
     874:	44e0      	add	r8, ip
     876:	e7d7      	b.n	828 <atcab_read_bytes_zone+0xac>
     878:	9c04      	ldr	r4, [sp, #16]
     87a:	e78f      	b.n	79c <atcab_read_bytes_zone+0x20>
     87c:	9c04      	ldr	r4, [sp, #16]
     87e:	e78d      	b.n	79c <atcab_read_bytes_zone+0x20>
     880:	000001d5 	.word	0x000001d5
     884:	00019d1d 	.word	0x00019d1d
     888:	00000561 	.word	0x00000561

0000088c <atcab_write>:
 *                     if not required.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write(uint8_t zone, uint16_t address, const uint8_t *value, const uint8_t *mac)
{
     88c:	b570      	push	{r4, r5, r6, lr}
     88e:	b0b2      	sub	sp, #200	; 0xc8
     890:	0014      	movs	r4, r2
     892:	001d      	movs	r5, r3
    ATCAPacket packet;
    ATCACommand ca_cmd = _gDevice->mCommands;
    ATCA_STATUS status = ATCA_GEN_FAIL;

    if (value == NULL)
     894:	2a00      	cmp	r2, #0
     896:	d02e      	beq.n	8f6 <atcab_write+0x6a>
    ATCACommand ca_cmd = _gDevice->mCommands;
     898:	4b18      	ldr	r3, [pc, #96]	; (8fc <atcab_write+0x70>)
     89a:	681b      	ldr	r3, [r3, #0]
     89c:	681e      	ldr	r6, [r3, #0]
    }

    do
    {
        // Build the write command
        packet.param1 = zone;
     89e:	466b      	mov	r3, sp
     8a0:	70d8      	strb	r0, [r3, #3]
        packet.param2 = address;
     8a2:	8099      	strh	r1, [r3, #4]
        if (zone & ATCA_ZONE_READWRITE_32)
     8a4:	b240      	sxtb	r0, r0
     8a6:	2800      	cmp	r0, #0
     8a8:	db0e      	blt.n	8c8 <atcab_write+0x3c>
            }
        }
        else
        {
            // 4-byte write
            memcpy(packet.data, value, 4);
     8aa:	2204      	movs	r2, #4
     8ac:	0021      	movs	r1, r4
     8ae:	466b      	mov	r3, sp
     8b0:	1d98      	adds	r0, r3, #6
     8b2:	4b13      	ldr	r3, [pc, #76]	; (900 <atcab_write+0x74>)
     8b4:	4798      	blx	r3
        }

        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
     8b6:	2200      	movs	r2, #0
     8b8:	4669      	mov	r1, sp
     8ba:	0030      	movs	r0, r6
     8bc:	4b11      	ldr	r3, [pc, #68]	; (904 <atcab_write+0x78>)
     8be:	4798      	blx	r3
     8c0:	2800      	cmp	r0, #0
     8c2:	d012      	beq.n	8ea <atcab_write+0x5e>

    }
    while (0);

    return status;
}
     8c4:	b032      	add	sp, #200	; 0xc8
     8c6:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(packet.data, value, 32);
     8c8:	2220      	movs	r2, #32
     8ca:	0021      	movs	r1, r4
     8cc:	1d98      	adds	r0, r3, #6
     8ce:	4b0c      	ldr	r3, [pc, #48]	; (900 <atcab_write+0x74>)
     8d0:	4798      	blx	r3
            if (mac)
     8d2:	2d00      	cmp	r5, #0
     8d4:	d007      	beq.n	8e6 <atcab_write+0x5a>
                memcpy(&packet.data[32], mac, 32);
     8d6:	2220      	movs	r2, #32
     8d8:	0029      	movs	r1, r5
     8da:	2026      	movs	r0, #38	; 0x26
     8dc:	4468      	add	r0, sp
     8de:	4b08      	ldr	r3, [pc, #32]	; (900 <atcab_write+0x74>)
     8e0:	4798      	blx	r3
        if ((status = atWrite(ca_cmd, &packet, mac && (zone & ATCA_ZONE_READWRITE_32))) != ATCA_SUCCESS)
     8e2:	2201      	movs	r2, #1
     8e4:	e7e8      	b.n	8b8 <atcab_write+0x2c>
     8e6:	2200      	movs	r2, #0
     8e8:	e7e6      	b.n	8b8 <atcab_write+0x2c>
        if ((status = atca_execute_command(&packet, _gDevice)) != ATCA_SUCCESS)
     8ea:	4b04      	ldr	r3, [pc, #16]	; (8fc <atcab_write+0x70>)
     8ec:	6819      	ldr	r1, [r3, #0]
     8ee:	4668      	mov	r0, sp
     8f0:	4b05      	ldr	r3, [pc, #20]	; (908 <atcab_write+0x7c>)
     8f2:	4798      	blx	r3
     8f4:	e7e6      	b.n	8c4 <atcab_write+0x38>
        return ATCA_BAD_PARAM;
     8f6:	20e2      	movs	r0, #226	; 0xe2
     8f8:	e7e4      	b.n	8c4 <atcab_write+0x38>
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	200009e4 	.word	0x200009e4
     900:	00019d1d 	.word	0x00019d1d
     904:	00000abd 	.word	0x00000abd
     908:	00000cf5 	.word	0x00000cf5

0000090c <atcab_write_zone>:
 *  \param[in] len     Number of bytes to be written. Must be either 4 or 32.
 *
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcab_write_zone(uint8_t zone, uint16_t slot, uint8_t block, uint8_t offset, const uint8_t *data, uint8_t len)
{
     90c:	b570      	push	{r4, r5, r6, lr}
     90e:	b084      	sub	sp, #16
     910:	0004      	movs	r4, r0
     912:	a808      	add	r0, sp, #32
     914:	c840      	ldmia	r0!, {r6}
     916:	7805      	ldrb	r5, [r0, #0]
    ATCA_STATUS status = ATCA_GEN_FAIL;
    uint16_t addr;

    // Check the input parameters
    if (data == NULL)
     918:	2e00      	cmp	r6, #0
     91a:	d006      	beq.n	92a <atcab_write_zone+0x1e>
    {
        return ATCA_BAD_PARAM;
    }

    if (len != 4 && len != 32)
     91c:	2d04      	cmp	r5, #4
     91e:	d011      	beq.n	944 <atcab_write_zone+0x38>
    {
        return ATCA_BAD_PARAM;
     920:	20e2      	movs	r0, #226	; 0xe2
    if (len != 4 && len != 32)
     922:	2d20      	cmp	r5, #32
     924:	d003      	beq.n	92e <atcab_write_zone+0x22>

    }
    while (0);

    return status;
}
     926:	b004      	add	sp, #16
     928:	bd70      	pop	{r4, r5, r6, pc}
        return ATCA_BAD_PARAM;
     92a:	20e2      	movs	r0, #226	; 0xe2
     92c:	e7fb      	b.n	926 <atcab_write_zone+0x1a>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     92e:	200e      	movs	r0, #14
     930:	4468      	add	r0, sp
     932:	9000      	str	r0, [sp, #0]
     934:	0020      	movs	r0, r4
     936:	4d0c      	ldr	r5, [pc, #48]	; (968 <atcab_write_zone+0x5c>)
     938:	47a8      	blx	r5
     93a:	2800      	cmp	r0, #0
     93c:	d1f3      	bne.n	926 <atcab_write_zone+0x1a>
            zone = zone | ATCA_ZONE_READWRITE_32;
     93e:	2380      	movs	r3, #128	; 0x80
     940:	431c      	orrs	r4, r3
     942:	e007      	b.n	954 <atcab_write_zone+0x48>
        if ((status = atcab_get_addr(zone, slot, block, offset, &addr)) != ATCA_SUCCESS)
     944:	200e      	movs	r0, #14
     946:	4468      	add	r0, sp
     948:	9000      	str	r0, [sp, #0]
     94a:	0020      	movs	r0, r4
     94c:	4d06      	ldr	r5, [pc, #24]	; (968 <atcab_write_zone+0x5c>)
     94e:	47a8      	blx	r5
     950:	2800      	cmp	r0, #0
     952:	d1e8      	bne.n	926 <atcab_write_zone+0x1a>
        status = atcab_write(zone, addr, data, NULL);
     954:	230e      	movs	r3, #14
     956:	446b      	add	r3, sp
     958:	8819      	ldrh	r1, [r3, #0]
     95a:	2300      	movs	r3, #0
     95c:	0032      	movs	r2, r6
     95e:	0020      	movs	r0, r4
     960:	4c02      	ldr	r4, [pc, #8]	; (96c <atcab_write_zone+0x60>)
     962:	47a0      	blx	r4
     964:	e7df      	b.n	926 <atcab_write_zone+0x1a>
     966:	46c0      	nop			; (mov r8, r8)
     968:	00000191 	.word	0x00000191
     96c:	0000088d 	.word	0x0000088d

00000970 <initATCACommand>:
 * \param[in] ca_cmd       Pre-allocated command structure to initialize.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCACommand(ATCADeviceType device_type, ATCACommand ca_cmd)
{
    if (ca_cmd == NULL)
     970:	2900      	cmp	r1, #0
     972:	d004      	beq.n	97e <initATCACommand+0xe>
    {
        return ATCA_BAD_PARAM;
    }

    ca_cmd->dt = device_type;
     974:	7008      	strb	r0, [r1, #0]
    ca_cmd->clock_divider = 0;
     976:	2300      	movs	r3, #0
     978:	704b      	strb	r3, [r1, #1]

    return ATCA_SUCCESS;
     97a:	2000      	movs	r0, #0
}
     97c:	4770      	bx	lr
        return ATCA_BAD_PARAM;
     97e:	20e2      	movs	r0, #226	; 0xe2
     980:	e7fc      	b.n	97c <initATCACommand+0xc>
	...

00000984 <deleteATCACommand>:
#ifndef ATCA_NO_HEAP
/** \brief ATCACommand destructor
 * \param[in] ca_cmd instance of a command object
 */
void deleteATCACommand(ATCACommand *ca_cmd)
{
     984:	b510      	push	{r4, lr}
     986:	1e04      	subs	r4, r0, #0
    if (ca_cmd == NULL)
     988:	d004      	beq.n	994 <deleteATCACommand+0x10>
    {
        return;
    }

    free(*ca_cmd);
     98a:	6800      	ldr	r0, [r0, #0]
     98c:	4b02      	ldr	r3, [pc, #8]	; (998 <deleteATCACommand+0x14>)
     98e:	4798      	blx	r3
    *ca_cmd = NULL;
     990:	2300      	movs	r3, #0
     992:	6023      	str	r3, [r4, #0]
}
     994:	bd10      	pop	{r4, pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	00019729 	.word	0x00019729

0000099c <atCRC>:
 * \param[in]  data    Pointer to the data over which to compute the CRC
 * \param[out] crc_le  Pointer to the place where the two-bytes of CRC will be
 *                     returned in little-endian byte order.
 */
void atCRC(size_t length, const uint8_t *data, uint8_t *crc_le)
{
     99c:	b5f0      	push	{r4, r5, r6, r7, lr}
     99e:	46d6      	mov	lr, sl
     9a0:	464f      	mov	r7, r9
     9a2:	4646      	mov	r6, r8
     9a4:	b5c0      	push	{r6, r7, lr}
     9a6:	4694      	mov	ip, r2
    uint16_t crc_register = 0;
    uint16_t polynom = 0x8005;
    uint8_t shift_register;
    uint8_t data_bit, crc_bit;

    for (counter = 0; counter < length; counter++)
     9a8:	2800      	cmp	r0, #0
     9aa:	d021      	beq.n	9f0 <atCRC+0x54>
     9ac:	4689      	mov	r9, r1
     9ae:	4688      	mov	r8, r1
     9b0:	4480      	add	r8, r0
     9b2:	2300      	movs	r3, #0
            data_bit = (data[counter] & shift_register) ? 1 : 0;
            crc_bit = crc_register >> 15;
            crc_register <<= 1;
            if (data_bit != crc_bit)
            {
                crc_register ^= polynom;
     9b4:	4813      	ldr	r0, [pc, #76]	; (a04 <atCRC+0x68>)
     9b6:	e016      	b.n	9e6 <atCRC+0x4a>
        for (shift_register = 0x01; shift_register > 0x00; shift_register <<= 1)
     9b8:	006d      	lsls	r5, r5, #1
     9ba:	b2ed      	uxtb	r5, r5
     9bc:	3e01      	subs	r6, #1
     9be:	2e00      	cmp	r6, #0
     9c0:	d00c      	beq.n	9dc <atCRC+0x40>
            crc_bit = crc_register >> 15;
     9c2:	0bdf      	lsrs	r7, r3, #15
            crc_register <<= 1;
     9c4:	005b      	lsls	r3, r3, #1
     9c6:	b29b      	uxth	r3, r3
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     9c8:	002c      	movs	r4, r5
     9ca:	400c      	ands	r4, r1
     9cc:	1e62      	subs	r2, r4, #1
     9ce:	4194      	sbcs	r4, r2
            if (data_bit != crc_bit)
     9d0:	b2e4      	uxtb	r4, r4
     9d2:	42bc      	cmp	r4, r7
     9d4:	d0f0      	beq.n	9b8 <atCRC+0x1c>
                crc_register ^= polynom;
     9d6:	4043      	eors	r3, r0
     9d8:	b29b      	uxth	r3, r3
     9da:	e7ed      	b.n	9b8 <atCRC+0x1c>
     9dc:	2201      	movs	r2, #1
     9de:	4692      	mov	sl, r2
     9e0:	44d1      	add	r9, sl
    for (counter = 0; counter < length; counter++)
     9e2:	45c1      	cmp	r9, r8
     9e4:	d005      	beq.n	9f2 <atCRC+0x56>
            data_bit = (data[counter] & shift_register) ? 1 : 0;
     9e6:	464a      	mov	r2, r9
     9e8:	7811      	ldrb	r1, [r2, #0]
     9ea:	2608      	movs	r6, #8
     9ec:	2501      	movs	r5, #1
     9ee:	e7e8      	b.n	9c2 <atCRC+0x26>
    uint16_t crc_register = 0;
     9f0:	2300      	movs	r3, #0
            }
        }
    }
    crc_le[0] = (uint8_t)(crc_register & 0x00FF);
     9f2:	4662      	mov	r2, ip
     9f4:	7013      	strb	r3, [r2, #0]
    crc_le[1] = (uint8_t)(crc_register >> 8);
     9f6:	0a1b      	lsrs	r3, r3, #8
     9f8:	7053      	strb	r3, [r2, #1]
}
     9fa:	bc1c      	pop	{r2, r3, r4}
     9fc:	4690      	mov	r8, r2
     9fe:	4699      	mov	r9, r3
     a00:	46a2      	mov	sl, r4
     a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a04:	ffff8005 	.word	0xffff8005

00000a08 <atCalcCrc>:
/** \brief This function calculates CRC and adds it to the correct offset in the packet data
 * \param[in] packet Packet to calculate CRC data for
 */

void atCalcCrc(ATCAPacket *packet)
{
     a08:	b510      	push	{r4, lr}
    uint8_t length, *crc;

    length = packet->txsize - ATCA_CRC_SIZE;
    // computer pointer to CRC in the packet
    crc = &(packet->txsize) + length;
     a0a:	1c41      	adds	r1, r0, #1
    length = packet->txsize - ATCA_CRC_SIZE;
     a0c:	7840      	ldrb	r0, [r0, #1]
     a0e:	3802      	subs	r0, #2
    crc = &(packet->txsize) + length;
     a10:	b2c0      	uxtb	r0, r0
     a12:	180a      	adds	r2, r1, r0

    // stuff CRC into packet
    atCRC(length, &(packet->txsize), crc);
     a14:	4b01      	ldr	r3, [pc, #4]	; (a1c <atCalcCrc+0x14>)
     a16:	4798      	blx	r3
}
     a18:	bd10      	pop	{r4, pc}
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	0000099d 	.word	0x0000099d

00000a20 <atGenDig>:
{
     a20:	b510      	push	{r4, lr}
    packet->opcode = ATCA_GENDIG;
     a22:	2315      	movs	r3, #21
     a24:	708b      	strb	r3, [r1, #2]
    if (packet->param1 == GENDIG_ZONE_SHARED_NONCE) // shared nonce mode
     a26:	78cb      	ldrb	r3, [r1, #3]
     a28:	2b03      	cmp	r3, #3
     a2a:	d008      	beq.n	a3e <atGenDig+0x1e>
    else if (is_no_mac_key)
     a2c:	2a00      	cmp	r2, #0
     a2e:	d109      	bne.n	a44 <atGenDig+0x24>
        packet->txsize = GENDIG_COUNT;
     a30:	2307      	movs	r3, #7
     a32:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a34:	0008      	movs	r0, r1
     a36:	4b05      	ldr	r3, [pc, #20]	; (a4c <atGenDig+0x2c>)
     a38:	4798      	blx	r3
}
     a3a:	2000      	movs	r0, #0
     a3c:	bd10      	pop	{r4, pc}
        packet->txsize = GENDIG_COUNT + 32;
     a3e:	3324      	adds	r3, #36	; 0x24
     a40:	704b      	strb	r3, [r1, #1]
     a42:	e7f7      	b.n	a34 <atGenDig+0x14>
        packet->txsize = GENDIG_COUNT + 4;  // noMac keys use 4 bytes of OtherData in calculation
     a44:	230b      	movs	r3, #11
     a46:	704b      	strb	r3, [r1, #1]
     a48:	e7f4      	b.n	a34 <atGenDig+0x14>
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	00000a09 	.word	0x00000a09

00000a50 <atNonce>:
{
     a50:	b510      	push	{r4, lr}
    uint8_t calc_mode = packet->param1 & NONCE_MODE_MASK;
     a52:	78ca      	ldrb	r2, [r1, #3]
     a54:	2303      	movs	r3, #3
     a56:	4013      	ands	r3, r2
    packet->opcode = ATCA_NONCE;
     a58:	2016      	movs	r0, #22
     a5a:	7088      	strb	r0, [r1, #2]
    if ((calc_mode == NONCE_MODE_SEED_UPDATE || calc_mode == NONCE_MODE_NO_SEED_UPDATE))
     a5c:	2b01      	cmp	r3, #1
     a5e:	d903      	bls.n	a68 <atNonce+0x18>
        return ATCA_BAD_PARAM;
     a60:	20e2      	movs	r0, #226	; 0xe2
    else if (calc_mode == NONCE_MODE_PASSTHROUGH)
     a62:	2b03      	cmp	r3, #3
     a64:	d007      	beq.n	a76 <atNonce+0x26>
}
     a66:	bd10      	pop	{r4, pc}
        packet->txsize = NONCE_COUNT_SHORT;
     a68:	231b      	movs	r3, #27
     a6a:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a6c:	0008      	movs	r0, r1
     a6e:	4b06      	ldr	r3, [pc, #24]	; (a88 <atNonce+0x38>)
     a70:	4798      	blx	r3
    return ATCA_SUCCESS;
     a72:	2000      	movs	r0, #0
     a74:	e7f7      	b.n	a66 <atNonce+0x16>
        if ((packet->param1 & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
     a76:	0693      	lsls	r3, r2, #26
     a78:	d502      	bpl.n	a80 <atNonce+0x30>
            packet->txsize = NONCE_COUNT_LONG_64;
     a7a:	2347      	movs	r3, #71	; 0x47
     a7c:	704b      	strb	r3, [r1, #1]
     a7e:	e7f5      	b.n	a6c <atNonce+0x1c>
            packet->txsize = NONCE_COUNT_LONG;
     a80:	2327      	movs	r3, #39	; 0x27
     a82:	704b      	strb	r3, [r1, #1]
     a84:	e7f2      	b.n	a6c <atNonce+0x1c>
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	00000a09 	.word	0x00000a09

00000a8c <atRandom>:
{
     a8c:	b510      	push	{r4, lr}
    packet->opcode = ATCA_RANDOM;
     a8e:	231b      	movs	r3, #27
     a90:	708b      	strb	r3, [r1, #2]
    packet->txsize = RANDOM_COUNT;
     a92:	3b14      	subs	r3, #20
     a94:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     a96:	0008      	movs	r0, r1
     a98:	4b01      	ldr	r3, [pc, #4]	; (aa0 <atRandom+0x14>)
     a9a:	4798      	blx	r3
}
     a9c:	2000      	movs	r0, #0
     a9e:	bd10      	pop	{r4, pc}
     aa0:	00000a09 	.word	0x00000a09

00000aa4 <atRead>:
{
     aa4:	b510      	push	{r4, lr}
    packet->opcode = ATCA_READ;
     aa6:	2302      	movs	r3, #2
     aa8:	708b      	strb	r3, [r1, #2]
    packet->txsize = READ_COUNT;
     aaa:	3305      	adds	r3, #5
     aac:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     aae:	0008      	movs	r0, r1
     ab0:	4b01      	ldr	r3, [pc, #4]	; (ab8 <atRead+0x14>)
     ab2:	4798      	blx	r3
}
     ab4:	2000      	movs	r0, #0
     ab6:	bd10      	pop	{r4, pc}
     ab8:	00000a09 	.word	0x00000a09

00000abc <atWrite>:
{
     abc:	b510      	push	{r4, lr}
    packet->opcode = ATCA_WRITE;
     abe:	2312      	movs	r3, #18
     ac0:	708b      	strb	r3, [r1, #2]
    packet->txsize = 7;
     ac2:	3b0b      	subs	r3, #11
     ac4:	704b      	strb	r3, [r1, #1]
    if (packet->param1 & ATCA_ZONE_READWRITE_32)
     ac6:	78cb      	ldrb	r3, [r1, #3]
     ac8:	2b7f      	cmp	r3, #127	; 0x7f
     aca:	d80b      	bhi.n	ae4 <atWrite+0x28>
        packet->txsize += ATCA_WORD_SIZE;
     acc:	230b      	movs	r3, #11
     ace:	704b      	strb	r3, [r1, #1]
    if (has_mac)
     ad0:	2a00      	cmp	r2, #0
     ad2:	d002      	beq.n	ada <atWrite+0x1e>
        packet->txsize += WRITE_MAC_SIZE;
     ad4:	784b      	ldrb	r3, [r1, #1]
     ad6:	3320      	adds	r3, #32
     ad8:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     ada:	0008      	movs	r0, r1
     adc:	4b03      	ldr	r3, [pc, #12]	; (aec <atWrite+0x30>)
     ade:	4798      	blx	r3
}
     ae0:	2000      	movs	r0, #0
     ae2:	bd10      	pop	{r4, pc}
        packet->txsize += ATCA_BLOCK_SIZE;
     ae4:	2327      	movs	r3, #39	; 0x27
     ae6:	704b      	strb	r3, [r1, #1]
     ae8:	e7f2      	b.n	ad0 <atWrite+0x14>
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	00000a09 	.word	0x00000a09

00000af0 <atAES>:
{
     af0:	b510      	push	{r4, lr}
    packet->opcode = ATCA_AES;
     af2:	2351      	movs	r3, #81	; 0x51
     af4:	708b      	strb	r3, [r1, #2]
    packet->txsize = ATCA_CMD_SIZE_MIN;
     af6:	3b4a      	subs	r3, #74	; 0x4a
     af8:	704b      	strb	r3, [r1, #1]
    if ((packet->param1 & AES_MODE_OP_MASK) == AES_MODE_GFM)
     afa:	78ca      	ldrb	r2, [r1, #3]
     afc:	4013      	ands	r3, r2
     afe:	2b03      	cmp	r3, #3
     b00:	d006      	beq.n	b10 <atAES+0x20>
        packet->txsize += AES_DATA_SIZE;
     b02:	2317      	movs	r3, #23
     b04:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     b06:	0008      	movs	r0, r1
     b08:	4b03      	ldr	r3, [pc, #12]	; (b18 <atAES+0x28>)
     b0a:	4798      	blx	r3
}
     b0c:	2000      	movs	r0, #0
     b0e:	bd10      	pop	{r4, pc}
        packet->txsize += ATCA_AES_GFM_SIZE;
     b10:	3324      	adds	r3, #36	; 0x24
     b12:	704b      	strb	r3, [r1, #1]
     b14:	e7f7      	b.n	b06 <atAES+0x16>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	00000a09 	.word	0x00000a09

00000b1c <atKDF>:
{
     b1c:	b510      	push	{r4, lr}
    packet->opcode = ATCA_KDF;
     b1e:	2356      	movs	r3, #86	; 0x56
     b20:	708b      	strb	r3, [r1, #2]
    if ((packet->param1 & KDF_MODE_ALG_MASK) == KDF_MODE_ALG_AES)
     b22:	78ca      	ldrb	r2, [r1, #3]
     b24:	330a      	adds	r3, #10
     b26:	4013      	ands	r3, r2
     b28:	2b20      	cmp	r3, #32
     b2a:	d007      	beq.n	b3c <atKDF+0x20>
        packet->txsize = ATCA_CMD_SIZE_MIN + KDF_DETAILS_SIZE + packet->data[3];
     b2c:	7a4b      	ldrb	r3, [r1, #9]
     b2e:	330b      	adds	r3, #11
     b30:	704b      	strb	r3, [r1, #1]
    atCalcCrc(packet);
     b32:	0008      	movs	r0, r1
     b34:	4b03      	ldr	r3, [pc, #12]	; (b44 <atKDF+0x28>)
     b36:	4798      	blx	r3
}
     b38:	2000      	movs	r0, #0
     b3a:	bd10      	pop	{r4, pc}
        packet->txsize = ATCA_CMD_SIZE_MIN + KDF_DETAILS_SIZE + AES_DATA_SIZE;
     b3c:	3b05      	subs	r3, #5
     b3e:	704b      	strb	r3, [r1, #1]
     b40:	e7f7      	b.n	b32 <atKDF+0x16>
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	00000a09 	.word	0x00000a09

00000b48 <atCheckCrc>:
 * \param[in] response pointer to response
 * \return ATCA_SUCCESS on success, otherwise ATCA_RX_CRC_ERROR
 */

ATCA_STATUS atCheckCrc(const uint8_t *response)
{
     b48:	b570      	push	{r4, r5, r6, lr}
     b4a:	b082      	sub	sp, #8
     b4c:	0005      	movs	r5, r0
    uint8_t crc[ATCA_CRC_SIZE];
    uint8_t count = response[ATCA_COUNT_IDX];
     b4e:	7804      	ldrb	r4, [r0, #0]

    count -= ATCA_CRC_SIZE;
     b50:	3c02      	subs	r4, #2
    atCRC(count, response, crc);
     b52:	b2e4      	uxtb	r4, r4
     b54:	ae01      	add	r6, sp, #4
     b56:	0032      	movs	r2, r6
     b58:	0001      	movs	r1, r0
     b5a:	0020      	movs	r0, r4
     b5c:	4b08      	ldr	r3, [pc, #32]	; (b80 <atCheckCrc+0x38>)
     b5e:	4798      	blx	r3

    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     b60:	7832      	ldrb	r2, [r6, #0]
     b62:	5d2b      	ldrb	r3, [r5, r4]
     b64:	20e5      	movs	r0, #229	; 0xe5
     b66:	429a      	cmp	r2, r3
     b68:	d001      	beq.n	b6e <atCheckCrc+0x26>
}
     b6a:	b002      	add	sp, #8
     b6c:	bd70      	pop	{r4, r5, r6, pc}
    return (crc[0] == response[count] && crc[1] == response[count + 1]) ? ATCA_SUCCESS : ATCA_RX_CRC_ERROR;
     b6e:	192c      	adds	r4, r5, r4
     b70:	ab01      	add	r3, sp, #4
     b72:	785a      	ldrb	r2, [r3, #1]
     b74:	7863      	ldrb	r3, [r4, #1]
     b76:	429a      	cmp	r2, r3
     b78:	d1f7      	bne.n	b6a <atCheckCrc+0x22>
     b7a:	2000      	movs	r0, #0
     b7c:	e7f5      	b.n	b6a <atCheckCrc+0x22>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	0000099d 	.word	0x0000099d

00000b84 <isATCAError>:
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS isATCAError(uint8_t *data)
{
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     b84:	7802      	ldrb	r2, [r0, #0]
            break;
        }
    }
    else
    {
        return ATCA_SUCCESS;
     b86:	2300      	movs	r3, #0
    if (data[0] == 0x04)        // error packets are always 4 bytes long
     b88:	2a04      	cmp	r2, #4
     b8a:	d001      	beq.n	b90 <isATCAError+0xc>
    }
}
     b8c:	0018      	movs	r0, r3
     b8e:	4770      	bx	lr
        switch (data[1])
     b90:	7842      	ldrb	r2, [r0, #1]
     b92:	2a07      	cmp	r2, #7
     b94:	d021      	beq.n	bda <isATCAError+0x56>
     b96:	b2d3      	uxtb	r3, r2
     b98:	2b07      	cmp	r3, #7
     b9a:	d80b      	bhi.n	bb4 <isATCAError+0x30>
     b9c:	2a01      	cmp	r2, #1
     b9e:	d01a      	beq.n	bd6 <isATCAError+0x52>
     ba0:	2a00      	cmp	r2, #0
     ba2:	d01e      	beq.n	be2 <isATCAError+0x5e>
            return ATCA_PARSE_ERROR;
     ba4:	23d2      	movs	r3, #210	; 0xd2
        switch (data[1])
     ba6:	2a03      	cmp	r2, #3
     ba8:	d0f0      	beq.n	b8c <isATCAError+0x8>
            return ATCA_STATUS_ECC;
     baa:	3304      	adds	r3, #4
        switch (data[1])
     bac:	2a05      	cmp	r2, #5
     bae:	d0ed      	beq.n	b8c <isATCAError+0x8>
            return ATCA_GEN_FAIL;
     bb0:	23e1      	movs	r3, #225	; 0xe1
     bb2:	e7eb      	b.n	b8c <isATCAError+0x8>
        switch (data[1])
     bb4:	2a0f      	cmp	r2, #15
     bb6:	d012      	beq.n	bde <isATCAError+0x5a>
     bb8:	b2d3      	uxtb	r3, r2
     bba:	2b0f      	cmp	r3, #15
     bbc:	d907      	bls.n	bce <isATCAError+0x4a>
            return ATCA_WAKE_SUCCESS;
     bbe:	23f3      	movs	r3, #243	; 0xf3
        switch (data[1])
     bc0:	2a11      	cmp	r2, #17
     bc2:	d0e3      	beq.n	b8c <isATCAError+0x8>
     bc4:	b2d2      	uxtb	r2, r2
            return ATCA_STATUS_CRC;
     bc6:	3b1f      	subs	r3, #31
        switch (data[1])
     bc8:	2aff      	cmp	r2, #255	; 0xff
     bca:	d0df      	beq.n	b8c <isATCAError+0x8>
     bcc:	e7f0      	b.n	bb0 <isATCAError+0x2c>
            return ATCA_HEALTH_TEST_ERROR;
     bce:	23fa      	movs	r3, #250	; 0xfa
        switch (data[1])
     bd0:	2a08      	cmp	r2, #8
     bd2:	d0db      	beq.n	b8c <isATCAError+0x8>
     bd4:	e7ec      	b.n	bb0 <isATCAError+0x2c>
            return ATCA_CHECKMAC_VERIFY_FAILED;
     bd6:	23d1      	movs	r3, #209	; 0xd1
     bd8:	e7d8      	b.n	b8c <isATCAError+0x8>
            return ATCA_STATUS_SELFTEST_ERROR;
     bda:	23d7      	movs	r3, #215	; 0xd7
     bdc:	e7d6      	b.n	b8c <isATCAError+0x8>
            return ATCA_EXECUTION_ERROR;
     bde:	23f4      	movs	r3, #244	; 0xf4
     be0:	e7d4      	b.n	b8c <isATCAError+0x8>
            return ATCA_SUCCESS;
     be2:	2300      	movs	r3, #0
     be4:	e7d2      	b.n	b8c <isATCAError+0x8>
	...

00000be8 <initATCADevice>:
 *                       mCommands and mIface members should point to existing
 *                       structures to be initialized.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS initATCADevice(ATCAIfaceCfg *cfg, ATCADevice ca_dev)
{
     be8:	b570      	push	{r4, r5, r6, lr}
     bea:	0005      	movs	r5, r0
     bec:	000c      	movs	r4, r1
    ATCA_STATUS status;

    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     bee:	2800      	cmp	r0, #0
     bf0:	d012      	beq.n	c18 <initATCADevice+0x30>
     bf2:	2900      	cmp	r1, #0
     bf4:	d012      	beq.n	c1c <initATCADevice+0x34>
     bf6:	6809      	ldr	r1, [r1, #0]
     bf8:	2900      	cmp	r1, #0
     bfa:	d011      	beq.n	c20 <initATCADevice+0x38>
    {
        return ATCA_BAD_PARAM;
     bfc:	20e2      	movs	r0, #226	; 0xe2
    if (cfg == NULL || ca_dev == NULL || ca_dev->mCommands == NULL || ca_dev->mIface == NULL)
     bfe:	6863      	ldr	r3, [r4, #4]
     c00:	2b00      	cmp	r3, #0
     c02:	d00a      	beq.n	c1a <initATCADevice+0x32>
    }

    status = initATCACommand(cfg->devtype, ca_dev->mCommands);
     c04:	7868      	ldrb	r0, [r5, #1]
     c06:	4b07      	ldr	r3, [pc, #28]	; (c24 <initATCADevice+0x3c>)
     c08:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
     c0a:	2800      	cmp	r0, #0
     c0c:	d105      	bne.n	c1a <initATCADevice+0x32>
    {
        return status;
    }

    status = initATCAIface(cfg, ca_dev->mIface);
     c0e:	6861      	ldr	r1, [r4, #4]
     c10:	0028      	movs	r0, r5
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <initATCADevice+0x40>)
     c14:	4798      	blx	r3
     c16:	e000      	b.n	c1a <initATCADevice+0x32>
        return ATCA_BAD_PARAM;
     c18:	20e2      	movs	r0, #226	; 0xe2
    {
        return status;
    }

    return ATCA_SUCCESS;
}
     c1a:	bd70      	pop	{r4, r5, r6, pc}
        return ATCA_BAD_PARAM;
     c1c:	20e2      	movs	r0, #226	; 0xe2
     c1e:	e7fc      	b.n	c1a <initATCADevice+0x32>
     c20:	20e2      	movs	r0, #226	; 0xe2
     c22:	e7fa      	b.n	c1a <initATCADevice+0x32>
     c24:	00000971 	.word	0x00000971
     c28:	00000f99 	.word	0x00000f99

00000c2c <newATCADevice>:
{
     c2c:	b570      	push	{r4, r5, r6, lr}
     c2e:	1e05      	subs	r5, r0, #0
    if (cfg == NULL)
     c30:	d02d      	beq.n	c8e <newATCADevice+0x62>
    ca_dev = (ATCADevice)malloc(sizeof(*ca_dev));
     c32:	2008      	movs	r0, #8
     c34:	4b17      	ldr	r3, [pc, #92]	; (c94 <newATCADevice+0x68>)
     c36:	4798      	blx	r3
     c38:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
     c3a:	d011      	beq.n	c60 <newATCADevice+0x34>
    ca_dev->mCommands = (ATCACommand)malloc(sizeof(*(ca_dev->mCommands)));
     c3c:	2004      	movs	r0, #4
     c3e:	4b15      	ldr	r3, [pc, #84]	; (c94 <newATCADevice+0x68>)
     c40:	4798      	blx	r3
     c42:	1e06      	subs	r6, r0, #0
     c44:	6020      	str	r0, [r4, #0]
    if (ca_dev->mCommands == NULL)
     c46:	d00d      	beq.n	c64 <newATCADevice+0x38>
    ca_dev->mIface = (ATCAIface)malloc(sizeof(*(ca_dev->mIface)));
     c48:	2028      	movs	r0, #40	; 0x28
     c4a:	4b12      	ldr	r3, [pc, #72]	; (c94 <newATCADevice+0x68>)
     c4c:	4798      	blx	r3
     c4e:	6060      	str	r0, [r4, #4]
    if (ca_dev->mIface == NULL)
     c50:	2800      	cmp	r0, #0
     c52:	d00c      	beq.n	c6e <newATCADevice+0x42>
    status = initATCADevice(cfg, ca_dev);
     c54:	0021      	movs	r1, r4
     c56:	0028      	movs	r0, r5
     c58:	4b0f      	ldr	r3, [pc, #60]	; (c98 <newATCADevice+0x6c>)
     c5a:	4798      	blx	r3
    if (status != ATCA_SUCCESS)
     c5c:	2800      	cmp	r0, #0
     c5e:	d10d      	bne.n	c7c <newATCADevice+0x50>
}
     c60:	0020      	movs	r0, r4
     c62:	bd70      	pop	{r4, r5, r6, pc}
        free(ca_dev);
     c64:	0020      	movs	r0, r4
     c66:	4b0d      	ldr	r3, [pc, #52]	; (c9c <newATCADevice+0x70>)
     c68:	4798      	blx	r3
        return NULL;
     c6a:	2400      	movs	r4, #0
     c6c:	e7f8      	b.n	c60 <newATCADevice+0x34>
        free(ca_dev->mCommands);
     c6e:	0030      	movs	r0, r6
     c70:	4d0a      	ldr	r5, [pc, #40]	; (c9c <newATCADevice+0x70>)
     c72:	47a8      	blx	r5
        free(ca_dev);
     c74:	0020      	movs	r0, r4
     c76:	47a8      	blx	r5
        return NULL;
     c78:	2400      	movs	r4, #0
     c7a:	e7f1      	b.n	c60 <newATCADevice+0x34>
        free(ca_dev->mIface);
     c7c:	6860      	ldr	r0, [r4, #4]
     c7e:	4d07      	ldr	r5, [pc, #28]	; (c9c <newATCADevice+0x70>)
     c80:	47a8      	blx	r5
        free(ca_dev->mCommands);
     c82:	6820      	ldr	r0, [r4, #0]
     c84:	47a8      	blx	r5
        free(ca_dev);
     c86:	0020      	movs	r0, r4
     c88:	47a8      	blx	r5
        return NULL;
     c8a:	2400      	movs	r4, #0
     c8c:	e7e8      	b.n	c60 <newATCADevice+0x34>
        return NULL;
     c8e:	2400      	movs	r4, #0
     c90:	e7e6      	b.n	c60 <newATCADevice+0x34>
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	00019715 	.word	0x00019715
     c98:	00000be9 	.word	0x00000be9
     c9c:	00019729 	.word	0x00019729

00000ca0 <releaseATCADevice>:
/** \brief Release any resources associated with the device.
 *  \param[in] ca_dev  Device to release
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCADevice(ATCADevice ca_dev)
{
     ca0:	b510      	push	{r4, lr}
    if (ca_dev == NULL)
    {
        return ATCA_BAD_PARAM;
     ca2:	23e2      	movs	r3, #226	; 0xe2
    if (ca_dev == NULL)
     ca4:	2800      	cmp	r0, #0
     ca6:	d003      	beq.n	cb0 <releaseATCADevice+0x10>
    }

    return releaseATCAIface(ca_dev->mIface);
     ca8:	6840      	ldr	r0, [r0, #4]
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <releaseATCADevice+0x14>)
     cac:	4798      	blx	r3
     cae:	0003      	movs	r3, r0
}
     cb0:	0018      	movs	r0, r3
     cb2:	bd10      	pop	{r4, pc}
     cb4:	00000f1d 	.word	0x00000f1d

00000cb8 <deleteATCADevice>:
{
     cb8:	b510      	push	{r4, lr}
     cba:	1e04      	subs	r4, r0, #0
    if (ca_dev == NULL)
     cbc:	d013      	beq.n	ce6 <deleteATCADevice+0x2e>
    releaseATCADevice(*ca_dev);
     cbe:	6800      	ldr	r0, [r0, #0]
     cc0:	4b09      	ldr	r3, [pc, #36]	; (ce8 <deleteATCADevice+0x30>)
     cc2:	4798      	blx	r3
    deleteATCACommand(&(*ca_dev)->mCommands);
     cc4:	6820      	ldr	r0, [r4, #0]
     cc6:	4b09      	ldr	r3, [pc, #36]	; (cec <deleteATCADevice+0x34>)
     cc8:	4798      	blx	r3
    if ((*ca_dev)->mIface)
     cca:	6823      	ldr	r3, [r4, #0]
     ccc:	6858      	ldr	r0, [r3, #4]
     cce:	2800      	cmp	r0, #0
     cd0:	d004      	beq.n	cdc <deleteATCADevice+0x24>
        free((*ca_dev)->mIface);
     cd2:	4b07      	ldr	r3, [pc, #28]	; (cf0 <deleteATCADevice+0x38>)
     cd4:	4798      	blx	r3
        (*ca_dev)->mIface = NULL;
     cd6:	6823      	ldr	r3, [r4, #0]
     cd8:	2200      	movs	r2, #0
     cda:	605a      	str	r2, [r3, #4]
    free(*ca_dev);
     cdc:	6820      	ldr	r0, [r4, #0]
     cde:	4b04      	ldr	r3, [pc, #16]	; (cf0 <deleteATCADevice+0x38>)
     ce0:	4798      	blx	r3
    *ca_dev = NULL;
     ce2:	2300      	movs	r3, #0
     ce4:	6023      	str	r3, [r4, #0]
}
     ce6:	bd10      	pop	{r4, pc}
     ce8:	00000ca1 	.word	0x00000ca1
     cec:	00000985 	.word	0x00000985
     cf0:	00019729 	.word	0x00019729

00000cf4 <atca_execute_command>:
 * \param[in]    device  CryptoAuthentication device to send the command to.
 *
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atca_execute_command(ATCAPacket* packet, ATCADevice device)
{
     cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cf6:	46de      	mov	lr, fp
     cf8:	4657      	mov	r7, sl
     cfa:	464e      	mov	r6, r9
     cfc:	4645      	mov	r5, r8
     cfe:	b5e0      	push	{r5, r6, r7, lr}
     d00:	b083      	sub	sp, #12
     d02:	4681      	mov	r9, r0
     d04:	000f      	movs	r7, r1
#else
        execution_or_wait_time = ATCA_POLLING_INIT_TIME_MSEC;
        max_delay_count = ATCA_POLLING_MAX_TIME_MSEC / ATCA_POLLING_FREQUENCY_TIME_MSEC;
#endif

        if ((status = atwake(device->mIface)) != ATCA_SUCCESS)
     d06:	6848      	ldr	r0, [r1, #4]
     d08:	4b24      	ldr	r3, [pc, #144]	; (d9c <atca_execute_command+0xa8>)
     d0a:	4798      	blx	r3
     d0c:	1e04      	subs	r4, r0, #0
     d0e:	d00a      	beq.n	d26 <atca_execute_command+0x32>
            break;
        }
    }
    while (0);

    atidle(device->mIface);
     d10:	6878      	ldr	r0, [r7, #4]
     d12:	4b23      	ldr	r3, [pc, #140]	; (da0 <atca_execute_command+0xac>)
     d14:	4798      	blx	r3
    return status;
}
     d16:	0020      	movs	r0, r4
     d18:	b003      	add	sp, #12
     d1a:	bc3c      	pop	{r2, r3, r4, r5}
     d1c:	4690      	mov	r8, r2
     d1e:	4699      	mov	r9, r3
     d20:	46a2      	mov	sl, r4
     d22:	46ab      	mov	fp, r5
     d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((status = atsend(device->mIface, (uint8_t*)packet, packet->txsize)) != ATCA_SUCCESS)
     d26:	464b      	mov	r3, r9
     d28:	785a      	ldrb	r2, [r3, #1]
     d2a:	4649      	mov	r1, r9
     d2c:	6878      	ldr	r0, [r7, #4]
     d2e:	4b1d      	ldr	r3, [pc, #116]	; (da4 <atca_execute_command+0xb0>)
     d30:	4798      	blx	r3
     d32:	1e04      	subs	r4, r0, #0
     d34:	d1ec      	bne.n	d10 <atca_execute_command+0x1c>
        atca_delay_ms(execution_or_wait_time);
     d36:	2001      	movs	r0, #1
     d38:	4b1b      	ldr	r3, [pc, #108]	; (da8 <atca_execute_command+0xb4>)
     d3a:	4798      	blx	r3
     d3c:	4e1b      	ldr	r6, [pc, #108]	; (dac <atca_execute_command+0xb8>)
            memset(packet->data, 0, sizeof(packet->data));
     d3e:	23c0      	movs	r3, #192	; 0xc0
     d40:	4698      	mov	r8, r3
     d42:	4b1b      	ldr	r3, [pc, #108]	; (db0 <atca_execute_command+0xbc>)
     d44:	469b      	mov	fp, r3
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
     d46:	4b1b      	ldr	r3, [pc, #108]	; (db4 <atca_execute_command+0xc0>)
     d48:	469a      	mov	sl, r3
            memset(packet->data, 0, sizeof(packet->data));
     d4a:	464b      	mov	r3, r9
     d4c:	1d9d      	adds	r5, r3, #6
     d4e:	4642      	mov	r2, r8
     d50:	2100      	movs	r1, #0
     d52:	0028      	movs	r0, r5
     d54:	47d8      	blx	fp
            rxsize = sizeof(packet->data);
     d56:	466b      	mov	r3, sp
     d58:	1d9a      	adds	r2, r3, #6
     d5a:	4643      	mov	r3, r8
     d5c:	8013      	strh	r3, [r2, #0]
            if ((status = atreceive(device->mIface, packet->data, &rxsize)) == ATCA_SUCCESS)
     d5e:	0029      	movs	r1, r5
     d60:	6878      	ldr	r0, [r7, #4]
     d62:	47d0      	blx	sl
     d64:	1e04      	subs	r4, r0, #0
     d66:	d010      	beq.n	d8a <atca_execute_command+0x96>
            atca_delay_ms(ATCA_POLLING_FREQUENCY_TIME_MSEC);
     d68:	2002      	movs	r0, #2
     d6a:	4b0f      	ldr	r3, [pc, #60]	; (da8 <atca_execute_command+0xb4>)
     d6c:	4798      	blx	r3
     d6e:	3e01      	subs	r6, #1
        while (max_delay_count-- > 0);
     d70:	2e00      	cmp	r6, #0
     d72:	d1ea      	bne.n	d4a <atca_execute_command+0x56>
     d74:	e7cc      	b.n	d10 <atca_execute_command+0x1c>
        if ((status = atCheckCrc(packet->data)) != ATCA_SUCCESS)
     d76:	0028      	movs	r0, r5
     d78:	4b0f      	ldr	r3, [pc, #60]	; (db8 <atca_execute_command+0xc4>)
     d7a:	4798      	blx	r3
     d7c:	1e04      	subs	r4, r0, #0
     d7e:	d1c7      	bne.n	d10 <atca_execute_command+0x1c>
        if ((status = isATCAError(packet->data)) != ATCA_SUCCESS)
     d80:	0028      	movs	r0, r5
     d82:	4b0e      	ldr	r3, [pc, #56]	; (dbc <atca_execute_command+0xc8>)
     d84:	4798      	blx	r3
     d86:	0004      	movs	r4, r0
     d88:	e7c2      	b.n	d10 <atca_execute_command+0x1c>
        if (rxsize < 4)
     d8a:	466b      	mov	r3, sp
     d8c:	88dc      	ldrh	r4, [r3, #6]
     d8e:	2c03      	cmp	r4, #3
     d90:	d8f1      	bhi.n	d76 <atca_execute_command+0x82>
                status = ATCA_RX_NO_RESPONSE;
     d92:	4260      	negs	r0, r4
     d94:	4160      	adcs	r0, r4
     d96:	30e6      	adds	r0, #230	; 0xe6
     d98:	0004      	movs	r4, r0
     d9a:	e7b9      	b.n	d10 <atca_execute_command+0x1c>
     d9c:	00000ee1 	.word	0x00000ee1
     da0:	00000f01 	.word	0x00000f01
     da4:	00000ed1 	.word	0x00000ed1
     da8:	00001961 	.word	0x00001961
     dac:	000004e3 	.word	0x000004e3
     db0:	00019e41 	.word	0x00019e41
     db4:	00000ed9 	.word	0x00000ed9
     db8:	00000b49 	.word	0x00000b49
     dbc:	00000b85 	.word	0x00000b85

00000dc0 <isHexAlpha>:
 * \param[in] c  character to check
 * \return True if the character is a hex
 */
bool isHexAlpha(char c)
{
    return ((c >= 'A') && (c <= 'F')) || ((c >= 'a') && (c <= 'f'));
     dc0:	0002      	movs	r2, r0
     dc2:	3a41      	subs	r2, #65	; 0x41
     dc4:	2301      	movs	r3, #1
     dc6:	2a05      	cmp	r2, #5
     dc8:	d906      	bls.n	dd8 <isHexAlpha+0x18>
     dca:	3861      	subs	r0, #97	; 0x61
     dcc:	b2c0      	uxtb	r0, r0
     dce:	2300      	movs	r3, #0
     dd0:	2205      	movs	r2, #5
     dd2:	4282      	cmp	r2, r0
     dd4:	415b      	adcs	r3, r3
     dd6:	b2db      	uxtb	r3, r3
}
     dd8:	0018      	movs	r0, r3
     dda:	4770      	bx	lr

00000ddc <isHexDigit>:
 * \brief Returns true if this character is a valid hex character.
 * \param[in] c  character to check
 * \return True if the character can be included in a valid hexstring
 */
bool isHexDigit(char c)
{
     ddc:	b510      	push	{r4, lr}
    return isDigit(c) || isHexAlpha(c);
     dde:	0002      	movs	r2, r0
     de0:	3a30      	subs	r2, #48	; 0x30
     de2:	2301      	movs	r3, #1
     de4:	2a09      	cmp	r2, #9
     de6:	d902      	bls.n	dee <isHexDigit+0x12>
     de8:	4b02      	ldr	r3, [pc, #8]	; (df4 <isHexDigit+0x18>)
     dea:	4798      	blx	r3
     dec:	0003      	movs	r3, r0
}
     dee:	0018      	movs	r0, r3
     df0:	bd10      	pop	{r4, pc}
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	00000dc1 	.word	0x00000dc1

00000df8 <atcab_hex2bin>:
{
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfa:	46de      	mov	lr, fp
     dfc:	4657      	mov	r7, sl
     dfe:	464e      	mov	r6, r9
     e00:	4645      	mov	r5, r8
     e02:	b5e0      	push	{r5, r6, r7, lr}
     e04:	b083      	sub	sp, #12
     e06:	1e0f      	subs	r7, r1, #0
     e08:	9201      	str	r2, [sp, #4]
     e0a:	469a      	mov	sl, r3
    for (hex_index = 0; hex_index < hex_size; hex_index++)
     e0c:	d057      	beq.n	ebe <atcab_hex2bin+0xc6>
     e0e:	0004      	movs	r4, r0
     e10:	4680      	mov	r8, r0
     e12:	4488      	add	r8, r1
     e14:	2601      	movs	r6, #1
     e16:	2700      	movs	r7, #0
        if (!isHexDigit(hex[hex_index]))
     e18:	4b2c      	ldr	r3, [pc, #176]	; (ecc <atcab_hex2bin+0xd4>)
     e1a:	4699      	mov	r9, r3
        is_upper_nibble = !is_upper_nibble;
     e1c:	2301      	movs	r3, #1
     e1e:	469b      	mov	fp, r3
     e20:	e00e      	b.n	e40 <atcab_hex2bin+0x48>
    return 16;
     e22:	2310      	movs	r3, #16
    if (c >= 'A' && c <= 'F')
     e24:	0029      	movs	r1, r5
     e26:	3941      	subs	r1, #65	; 0x41
     e28:	2905      	cmp	r1, #5
     e2a:	d801      	bhi.n	e30 <atcab_hex2bin+0x38>
        return (uint8_t)(c - 'A') + 10;
     e2c:	3d37      	subs	r5, #55	; 0x37
     e2e:	b2eb      	uxtb	r3, r5
            bin[bin_index] = hex_digit_to_num(hex[hex_index]) << 4;
     e30:	011b      	lsls	r3, r3, #4
     e32:	7013      	strb	r3, [r2, #0]
        is_upper_nibble = !is_upper_nibble;
     e34:	465b      	mov	r3, fp
     e36:	405e      	eors	r6, r3
     e38:	b2f6      	uxtb	r6, r6
     e3a:	3401      	adds	r4, #1
    for (hex_index = 0; hex_index < hex_size; hex_index++)
     e3c:	4544      	cmp	r4, r8
     e3e:	d034      	beq.n	eaa <atcab_hex2bin+0xb2>
        if (!isHexDigit(hex[hex_index]))
     e40:	7825      	ldrb	r5, [r4, #0]
     e42:	0028      	movs	r0, r5
     e44:	47c8      	blx	r9
     e46:	2800      	cmp	r0, #0
     e48:	d0f7      	beq.n	e3a <atcab_hex2bin+0x42>
        if (bin_index >= *bin_size)
     e4a:	4653      	mov	r3, sl
     e4c:	681b      	ldr	r3, [r3, #0]
     e4e:	42bb      	cmp	r3, r7
     e50:	d939      	bls.n	ec6 <atcab_hex2bin+0xce>
        if (is_upper_nibble)
     e52:	2e00      	cmp	r6, #0
     e54:	d00e      	beq.n	e74 <atcab_hex2bin+0x7c>
            bin[bin_index] = hex_digit_to_num(hex[hex_index]) << 4;
     e56:	9b01      	ldr	r3, [sp, #4]
     e58:	19da      	adds	r2, r3, r7
    if (c >= '0' && c <= '9')
     e5a:	0029      	movs	r1, r5
     e5c:	3930      	subs	r1, #48	; 0x30
     e5e:	b2c9      	uxtb	r1, r1
        return (uint8_t)(c - '0');
     e60:	000b      	movs	r3, r1
    if (c >= '0' && c <= '9')
     e62:	2909      	cmp	r1, #9
     e64:	d9e4      	bls.n	e30 <atcab_hex2bin+0x38>
    if (c >= 'a' && c <= 'f')
     e66:	002b      	movs	r3, r5
     e68:	3b61      	subs	r3, #97	; 0x61
     e6a:	2b05      	cmp	r3, #5
     e6c:	d8d9      	bhi.n	e22 <atcab_hex2bin+0x2a>
        return (uint8_t)(c - 'a') + 10;
     e6e:	3d57      	subs	r5, #87	; 0x57
     e70:	b2eb      	uxtb	r3, r5
     e72:	e7dd      	b.n	e30 <atcab_hex2bin+0x38>
    if (c >= '0' && c <= '9')
     e74:	002a      	movs	r2, r5
     e76:	3a30      	subs	r2, #48	; 0x30
     e78:	b2d2      	uxtb	r2, r2
        return (uint8_t)(c - '0');
     e7a:	0013      	movs	r3, r2
    if (c >= '0' && c <= '9')
     e7c:	2a09      	cmp	r2, #9
     e7e:	d905      	bls.n	e8c <atcab_hex2bin+0x94>
    if (c >= 'a' && c <= 'f')
     e80:	002b      	movs	r3, r5
     e82:	3b61      	subs	r3, #97	; 0x61
     e84:	2b05      	cmp	r3, #5
     e86:	d808      	bhi.n	e9a <atcab_hex2bin+0xa2>
        return (uint8_t)(c - 'a') + 10;
     e88:	3d57      	subs	r5, #87	; 0x57
     e8a:	b2eb      	uxtb	r3, r5
            bin[bin_index] += hex_digit_to_num(hex[hex_index]);
     e8c:	9a01      	ldr	r2, [sp, #4]
     e8e:	19d2      	adds	r2, r2, r7
     e90:	7815      	ldrb	r5, [r2, #0]
     e92:	195d      	adds	r5, r3, r5
     e94:	7015      	strb	r5, [r2, #0]
            bin_index++;
     e96:	3701      	adds	r7, #1
     e98:	e7cc      	b.n	e34 <atcab_hex2bin+0x3c>
    return 16;
     e9a:	2310      	movs	r3, #16
    if (c >= 'A' && c <= 'F')
     e9c:	002a      	movs	r2, r5
     e9e:	3a41      	subs	r2, #65	; 0x41
     ea0:	2a05      	cmp	r2, #5
     ea2:	d8f3      	bhi.n	e8c <atcab_hex2bin+0x94>
        return (uint8_t)(c - 'A') + 10;
     ea4:	3d37      	subs	r5, #55	; 0x37
     ea6:	b2eb      	uxtb	r3, r5
     ea8:	e7f0      	b.n	e8c <atcab_hex2bin+0x94>
        return ATCA_BAD_PARAM;
     eaa:	20e2      	movs	r0, #226	; 0xe2
    if (!is_upper_nibble)
     eac:	2e00      	cmp	r6, #0
     eae:	d106      	bne.n	ebe <atcab_hex2bin+0xc6>
}
     eb0:	b003      	add	sp, #12
     eb2:	bc3c      	pop	{r2, r3, r4, r5}
     eb4:	4690      	mov	r8, r2
     eb6:	4699      	mov	r9, r3
     eb8:	46a2      	mov	sl, r4
     eba:	46ab      	mov	fp, r5
     ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *bin_size = bin_index;
     ebe:	4653      	mov	r3, sl
     ec0:	601f      	str	r7, [r3, #0]
    return ATCA_SUCCESS;
     ec2:	2000      	movs	r0, #0
     ec4:	e7f4      	b.n	eb0 <atcab_hex2bin+0xb8>
            return ATCA_SMALL_BUFFER;
     ec6:	20ed      	movs	r0, #237	; 0xed
     ec8:	e7f2      	b.n	eb0 <atcab_hex2bin+0xb8>
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00000ddd 	.word	0x00000ddd

00000ed0 <atsend>:
 * \param[in] txdata    Data to be transmitted to the device.
 * \param[in] txlength  Number of bytes to be transmitted to the device.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atsend(ATCAIface ca_iface, uint8_t *txdata, int txlength)
{
     ed0:	b510      	push	{r4, lr}
    return ca_iface->atsend(ca_iface, txdata, txlength);
     ed2:	6903      	ldr	r3, [r0, #16]
     ed4:	4798      	blx	r3
}
     ed6:	bd10      	pop	{r4, pc}

00000ed8 <atreceive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atreceive(ATCAIface ca_iface, uint8_t *rxdata, uint16_t *rxlength)
{
     ed8:	b510      	push	{r4, lr}
    return ca_iface->atreceive(ca_iface, rxdata, rxlength);
     eda:	6943      	ldr	r3, [r0, #20]
     edc:	4798      	blx	r3
}
     ede:	bd10      	pop	{r4, pc}

00000ee0 <atwake>:
 *         instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atwake(ATCAIface ca_iface)
{
     ee0:	b510      	push	{r4, lr}
     ee2:	0004      	movs	r4, r0
    ATCA_STATUS status = ca_iface->atwake(ca_iface);
     ee4:	6983      	ldr	r3, [r0, #24]
     ee6:	4798      	blx	r3

    if (status == ATCA_WAKE_FAILED)
     ee8:	28d0      	cmp	r0, #208	; 0xd0
     eea:	d000      	beq.n	eee <atwake+0xe>

        status = ca_iface->atwake(ca_iface);
    }

    return status;
}
     eec:	bd10      	pop	{r4, pc}
        atca_delay_ms(ATCA_POST_DELAY_MSEC);
     eee:	38b7      	subs	r0, #183	; 0xb7
     ef0:	4b02      	ldr	r3, [pc, #8]	; (efc <atwake+0x1c>)
     ef2:	4798      	blx	r3
        status = ca_iface->atwake(ca_iface);
     ef4:	69a3      	ldr	r3, [r4, #24]
     ef6:	0020      	movs	r0, r4
     ef8:	4798      	blx	r3
     efa:	e7f7      	b.n	eec <atwake+0xc>
     efc:	00001961 	.word	0x00001961

00000f00 <atidle>:
 *         be used instead.
 * \param[in] ca_iface  Device to interact with.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atidle(ATCAIface ca_iface)
{
     f00:	b510      	push	{r4, lr}
    ATCA_STATUS status;

    status = ca_iface->atidle(ca_iface);
     f02:	69c3      	ldr	r3, [r0, #28]
     f04:	4798      	blx	r3
     f06:	0004      	movs	r4, r0
    atca_delay_ms(1);
     f08:	2001      	movs	r0, #1
     f0a:	4b02      	ldr	r3, [pc, #8]	; (f14 <atidle+0x14>)
     f0c:	4798      	blx	r3
    return status;
}
     f0e:	0020      	movs	r0, r4
     f10:	bd10      	pop	{r4, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	00001961 	.word	0x00001961

00000f18 <atgetifacecfg>:
 * \param[in] ca_iface  Device interface.
 * \return Logical interface configuration.
 */
ATCAIfaceCfg * atgetifacecfg(ATCAIface ca_iface)
{
    return ca_iface->mIfaceCFG;
     f18:	6840      	ldr	r0, [r0, #4]
}
     f1a:	4770      	bx	lr

00000f1c <releaseATCAIface>:
 *         this interface.
 *  \param[in] ca_iface  Device interface.
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS releaseATCAIface(ATCAIface ca_iface)
{
     f1c:	b510      	push	{r4, lr}
    if (ca_iface == NULL)
    {
        return ATCA_BAD_PARAM;
     f1e:	23e2      	movs	r3, #226	; 0xe2
    if (ca_iface == NULL)
     f20:	2800      	cmp	r0, #0
     f22:	d004      	beq.n	f2e <releaseATCAIface+0x12>
    }

    return hal_iface_release(ca_iface->mType, ca_iface->hal_data);
     f24:	6a41      	ldr	r1, [r0, #36]	; 0x24
     f26:	7800      	ldrb	r0, [r0, #0]
     f28:	4b02      	ldr	r3, [pc, #8]	; (f34 <releaseATCAIface+0x18>)
     f2a:	4798      	blx	r3
     f2c:	0003      	movs	r3, r0
}
     f2e:	0018      	movs	r0, r3
     f30:	bd10      	pop	{r4, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00001369 	.word	0x00001369

00000f38 <_atinit>:
    *ca_iface = NULL;
}
#endif

ATCA_STATUS _atinit(ATCAIface ca_iface, ATCAHAL_t *hal)
{
     f38:	b570      	push	{r4, r5, r6, lr}
     f3a:	0004      	movs	r4, r0
     f3c:	000d      	movs	r5, r1
    // get method mapping to HAL methods for this interface
    hal_iface_init(ca_iface->mIfaceCFG, hal);
     f3e:	6840      	ldr	r0, [r0, #4]
     f40:	4b09      	ldr	r3, [pc, #36]	; (f68 <_atinit+0x30>)
     f42:	4798      	blx	r3
    ca_iface->atinit     = hal->halinit;
     f44:	682b      	ldr	r3, [r5, #0]
     f46:	60a3      	str	r3, [r4, #8]
    ca_iface->atpostinit = hal->halpostinit;
     f48:	686b      	ldr	r3, [r5, #4]
     f4a:	60e3      	str	r3, [r4, #12]
    ca_iface->atsend     = hal->halsend;
     f4c:	68ab      	ldr	r3, [r5, #8]
     f4e:	6123      	str	r3, [r4, #16]
    ca_iface->atreceive  = hal->halreceive;
     f50:	68eb      	ldr	r3, [r5, #12]
     f52:	6163      	str	r3, [r4, #20]
    ca_iface->atwake     = hal->halwake;
     f54:	692b      	ldr	r3, [r5, #16]
     f56:	61a3      	str	r3, [r4, #24]
    ca_iface->atsleep    = hal->halsleep;
     f58:	69ab      	ldr	r3, [r5, #24]
     f5a:	6223      	str	r3, [r4, #32]
    ca_iface->atidle     = hal->halidle;
     f5c:	696b      	ldr	r3, [r5, #20]
     f5e:	61e3      	str	r3, [r4, #28]
    ca_iface->hal_data   = hal->hal_data;
     f60:	6a2b      	ldr	r3, [r5, #32]
     f62:	6263      	str	r3, [r4, #36]	; 0x24

    return ATCA_SUCCESS;
}
     f64:	2000      	movs	r0, #0
     f66:	bd70      	pop	{r4, r5, r6, pc}
     f68:	00001315 	.word	0x00001315

00000f6c <atinit>:
{
     f6c:	b510      	push	{r4, lr}
     f6e:	b08a      	sub	sp, #40	; 0x28
     f70:	0004      	movs	r4, r0
    _atinit(ca_iface, &hal);
     f72:	a901      	add	r1, sp, #4
     f74:	4b07      	ldr	r3, [pc, #28]	; (f94 <atinit+0x28>)
     f76:	4798      	blx	r3
    status = ca_iface->atinit(&hal, ca_iface->mIfaceCFG);
     f78:	6861      	ldr	r1, [r4, #4]
     f7a:	a801      	add	r0, sp, #4
     f7c:	68a3      	ldr	r3, [r4, #8]
     f7e:	4798      	blx	r3
    if (status == ATCA_SUCCESS)
     f80:	2800      	cmp	r0, #0
     f82:	d001      	beq.n	f88 <atinit+0x1c>
}
     f84:	b00a      	add	sp, #40	; 0x28
     f86:	bd10      	pop	{r4, pc}
        ca_iface->hal_data = hal.hal_data;
     f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f8a:	6263      	str	r3, [r4, #36]	; 0x24
        status = ca_iface->atpostinit(ca_iface);
     f8c:	68e3      	ldr	r3, [r4, #12]
     f8e:	0020      	movs	r0, r4
     f90:	4798      	blx	r3
     f92:	e7f7      	b.n	f84 <atinit+0x18>
     f94:	00000f39 	.word	0x00000f39

00000f98 <initATCAIface>:
{
     f98:	b510      	push	{r4, lr}
    if (cfg == NULL || ca_iface == NULL)
     f9a:	2800      	cmp	r0, #0
     f9c:	d00b      	beq.n	fb6 <initATCAIface+0x1e>
        return ATCA_BAD_PARAM;
     f9e:	23e2      	movs	r3, #226	; 0xe2
    if (cfg == NULL || ca_iface == NULL)
     fa0:	2900      	cmp	r1, #0
     fa2:	d006      	beq.n	fb2 <initATCAIface+0x1a>
    ca_iface->mType = cfg->iface_type;
     fa4:	7803      	ldrb	r3, [r0, #0]
     fa6:	700b      	strb	r3, [r1, #0]
    ca_iface->mIfaceCFG = cfg;
     fa8:	6048      	str	r0, [r1, #4]
    status = atinit(ca_iface);
     faa:	0008      	movs	r0, r1
     fac:	4b03      	ldr	r3, [pc, #12]	; (fbc <initATCAIface+0x24>)
     fae:	4798      	blx	r3
     fb0:	0003      	movs	r3, r0
}
     fb2:	0018      	movs	r0, r3
     fb4:	bd10      	pop	{r4, pc}
        return ATCA_BAD_PARAM;
     fb6:	23e2      	movs	r3, #226	; 0xe2
     fb8:	e7fb      	b.n	fb2 <initATCAIface+0x1a>
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	00000f6d 	.word	0x00000f6d

00000fc0 <atcac_sw_sha2_256>:
 * \param[out] digest     result
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

int atcac_sw_sha2_256(const uint8_t* data, size_t data_size, uint8_t digest[ATCA_SHA2_256_DIGEST_SIZE])
{
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	b0b0      	sub	sp, #192	; 0xc0
     fc4:	0005      	movs	r5, r0
     fc6:	000e      	movs	r6, r1
     fc8:	0014      	movs	r4, r2
    sw_sha256_init((sw_sha256_ctx*)ctx);
     fca:	4668      	mov	r0, sp
     fcc:	4b06      	ldr	r3, [pc, #24]	; (fe8 <atcac_sw_sha2_256+0x28>)
     fce:	4798      	blx	r3
    sw_sha256_update((sw_sha256_ctx*)ctx, data, (uint32_t)data_size);
     fd0:	0032      	movs	r2, r6
     fd2:	0029      	movs	r1, r5
     fd4:	4668      	mov	r0, sp
     fd6:	4b05      	ldr	r3, [pc, #20]	; (fec <atcac_sw_sha2_256+0x2c>)
     fd8:	4798      	blx	r3
    sw_sha256_final((sw_sha256_ctx*)ctx, digest);
     fda:	0021      	movs	r1, r4
     fdc:	4668      	mov	r0, sp
     fde:	4b04      	ldr	r3, [pc, #16]	; (ff0 <atcac_sw_sha2_256+0x30>)
     fe0:	4798      	blx	r3
    {
        return ret;
    }

    return ATCA_SUCCESS;
     fe2:	2000      	movs	r0, #0
     fe4:	b030      	add	sp, #192	; 0xc0
     fe6:	bd70      	pop	{r4, r5, r6, pc}
     fe8:	000011a1 	.word	0x000011a1
     fec:	00001205 	.word	0x00001205
     ff0:	00001291 	.word	0x00001291

00000ff4 <sw_sha256_process>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] blocks       Raw blocks to be processed
 * \param[in] block_count  Number of 64-byte blocks to process
 */
static void sw_sha256_process(sw_sha256_ctx* ctx, const uint8_t* blocks, uint32_t block_count)
{
     ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ff6:	46de      	mov	lr, fp
     ff8:	4657      	mov	r7, sl
     ffa:	464e      	mov	r6, r9
     ffc:	4645      	mov	r5, r8
     ffe:	b5e0      	push	{r5, r6, r7, lr}
    1000:	b0d5      	sub	sp, #340	; 0x154
    1002:	900b      	str	r0, [sp, #44]	; 0x2c
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    // Loop through all the blocks to process
    for (block = 0; block < block_count; block++)
    1004:	2a00      	cmp	r2, #0
    1006:	d100      	bne.n	100a <sw_sha256_process+0x16>
    1008:	e0c0      	b.n	118c <sw_sha256_process+0x198>
    100a:	000b      	movs	r3, r1
    100c:	0192      	lsls	r2, r2, #6
    100e:	1889      	adds	r1, r1, r2
    1010:	910a      	str	r1, [sp, #40]	; 0x28
    1012:	0002      	movs	r2, r0
    1014:	32a8      	adds	r2, #168	; 0xa8
    1016:	9209      	str	r2, [sp, #36]	; 0x24
            s1 = rotate_right(rotate_register[4], 6)
                 ^ rotate_right(rotate_register[4], 11)
                 ^ rotate_right(rotate_register[4], 25);
            ch = (rotate_register[4] & rotate_register[5])
                 ^ (~rotate_register[4] & rotate_register[6]);
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1018:	4a60      	ldr	r2, [pc, #384]	; (119c <sw_sha256_process+0x1a8>)
    101a:	4691      	mov	r9, r2
    101c:	e05c      	b.n	10d8 <sw_sha256_process+0xe4>

            rotate_register[7] = rotate_register[6];
            rotate_register[6] = rotate_register[5];
    101e:	9d02      	ldr	r5, [sp, #8]
    1020:	9501      	str	r5, [sp, #4]
            rotate_register[5] = rotate_register[4];
    1022:	9002      	str	r0, [sp, #8]
            rotate_register[4] = rotate_register[3] + t1;
    1024:	4658      	mov	r0, fp
            rotate_register[3] = rotate_register[2];
            rotate_register[2] = rotate_register[1];
    1026:	46bc      	mov	ip, r7
            rotate_register[1] = rotate_register[0];
    1028:	0027      	movs	r7, r4
            rotate_register[0] = t1 + t2;
    102a:	0014      	movs	r4, r2
                 ^ rotate_right(rotate_register[4], 11)
    102c:	0002      	movs	r2, r0
    102e:	250b      	movs	r5, #11
    1030:	41ea      	rors	r2, r5
    1032:	0005      	movs	r5, r0
    1034:	2606      	movs	r6, #6
    1036:	41f5      	rors	r5, r6
    1038:	4055      	eors	r5, r2
                 ^ rotate_right(rotate_register[4], 25);
    103a:	0002      	movs	r2, r0
    103c:	3613      	adds	r6, #19
    103e:	41f2      	rors	r2, r6
            s1 = rotate_right(rotate_register[4], 6)
    1040:	4055      	eors	r5, r2
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1042:	464a      	mov	r2, r9
    1044:	588a      	ldr	r2, [r1, r2]
    1046:	9e04      	ldr	r6, [sp, #16]
    1048:	598e      	ldr	r6, [r1, r6]
    104a:	46b0      	mov	r8, r6
    104c:	4442      	add	r2, r8
    104e:	18ad      	adds	r5, r5, r2
            ch = (rotate_register[4] & rotate_register[5])
    1050:	9a02      	ldr	r2, [sp, #8]
    1052:	4002      	ands	r2, r0
    1054:	4690      	mov	r8, r2
    1056:	9a01      	ldr	r2, [sp, #4]
    1058:	4382      	bics	r2, r0
    105a:	4646      	mov	r6, r8
    105c:	4072      	eors	r2, r6
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    105e:	18aa      	adds	r2, r5, r2
    1060:	18d3      	adds	r3, r2, r3
            rotate_register[4] = rotate_register[3] + t1;
    1062:	9d03      	ldr	r5, [sp, #12]
    1064:	46ab      	mov	fp, r5
    1066:	449b      	add	fp, r3
                 ^ rotate_right(rotate_register[0], 13)
    1068:	0025      	movs	r5, r4
    106a:	260d      	movs	r6, #13
    106c:	41f5      	rors	r5, r6
    106e:	0022      	movs	r2, r4
    1070:	3e0b      	subs	r6, #11
    1072:	41f2      	rors	r2, r6
    1074:	406a      	eors	r2, r5
                 ^ rotate_right(rotate_register[0], 22);
    1076:	0025      	movs	r5, r4
    1078:	4656      	mov	r6, sl
    107a:	41f5      	rors	r5, r6
            s0 = rotate_right(rotate_register[0], 2)
    107c:	406a      	eors	r2, r5
                  ^ (rotate_register[0] & rotate_register[2])
    107e:	4665      	mov	r5, ip
    1080:	407d      	eors	r5, r7
    1082:	4025      	ands	r5, r4
                  ^ (rotate_register[1] & rotate_register[2]);
    1084:	4666      	mov	r6, ip
    1086:	403e      	ands	r6, r7
            maj = (rotate_register[0] & rotate_register[1])
    1088:	4075      	eors	r5, r6
            t2 = s0 + maj;
    108a:	1952      	adds	r2, r2, r5
            rotate_register[0] = t1 + t2;
    108c:	18d2      	adds	r2, r2, r3
    108e:	3104      	adds	r1, #4
            rotate_register[7] = rotate_register[6];
    1090:	9b01      	ldr	r3, [sp, #4]
            rotate_register[3] = rotate_register[2];
    1092:	4665      	mov	r5, ip
    1094:	9503      	str	r5, [sp, #12]
        for (i = 0; i < SHA256_BLOCK_SIZE; i++)
    1096:	2580      	movs	r5, #128	; 0x80
    1098:	006d      	lsls	r5, r5, #1
    109a:	42a9      	cmp	r1, r5
    109c:	d1bf      	bne.n	101e <sw_sha256_process+0x2a>
    109e:	003d      	movs	r5, r7
    10a0:	4667      	mov	r7, ip
    10a2:	9b08      	ldr	r3, [sp, #32]
    10a4:	469c      	mov	ip, r3
    10a6:	4659      	mov	r1, fp
    10a8:	920c      	str	r2, [sp, #48]	; 0x30
    10aa:	940d      	str	r4, [sp, #52]	; 0x34
    10ac:	950e      	str	r5, [sp, #56]	; 0x38
    10ae:	9110      	str	r1, [sp, #64]	; 0x40
    10b0:	9011      	str	r0, [sp, #68]	; 0x44
    10b2:	9b02      	ldr	r3, [sp, #8]
    10b4:	9312      	str	r3, [sp, #72]	; 0x48
    10b6:	9b01      	ldr	r3, [sp, #4]
    10b8:	9313      	str	r3, [sp, #76]	; 0x4c
    10ba:	970f      	str	r7, [sp, #60]	; 0x3c
    10bc:	4663      	mov	r3, ip
    10be:	9905      	ldr	r1, [sp, #20]
    10c0:	9807      	ldr	r0, [sp, #28]
        }

        // Add the hash of this block to current result.
        for (i = 0; i < 8; i++)
        {
            ctx->hash[i] += rotate_register[i];
    10c2:	c904      	ldmia	r1!, {r2}
    10c4:	681c      	ldr	r4, [r3, #0]
    10c6:	46a4      	mov	ip, r4
    10c8:	4462      	add	r2, ip
    10ca:	c304      	stmia	r3!, {r2}
        for (i = 0; i < 8; i++)
    10cc:	4283      	cmp	r3, r0
    10ce:	d1f8      	bne.n	10c2 <sw_sha256_process+0xce>
    10d0:	9b06      	ldr	r3, [sp, #24]
    for (block = 0; block < block_count; block++)
    10d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    10d4:	429a      	cmp	r2, r3
    10d6:	d059      	beq.n	118c <sw_sha256_process+0x198>
    10d8:	a814      	add	r0, sp, #80	; 0x50
    10da:	2240      	movs	r2, #64	; 0x40
    10dc:	4694      	mov	ip, r2
    10de:	449c      	add	ip, r3
    10e0:	4662      	mov	r2, ip
    10e2:	4664      	mov	r4, ip
    10e4:	9206      	str	r2, [sp, #24]
{
    10e6:	0002      	movs	r2, r0
            w_union.w_byte[i + 3] = cur_msg_block[i + 0];
    10e8:	7819      	ldrb	r1, [r3, #0]
    10ea:	70d1      	strb	r1, [r2, #3]
            w_union.w_byte[i + 2] = cur_msg_block[i + 1];
    10ec:	7859      	ldrb	r1, [r3, #1]
    10ee:	7091      	strb	r1, [r2, #2]
            w_union.w_byte[i + 1] = cur_msg_block[i + 2];
    10f0:	7899      	ldrb	r1, [r3, #2]
    10f2:	7051      	strb	r1, [r2, #1]
            w_union.w_byte[i + 0] = cur_msg_block[i + 3];
    10f4:	78d9      	ldrb	r1, [r3, #3]
    10f6:	7011      	strb	r1, [r2, #0]
    10f8:	3304      	adds	r3, #4
    10fa:	3204      	adds	r2, #4
        for (i = 0; i < SHA256_BLOCK_SIZE; i += 4)
    10fc:	42a3      	cmp	r3, r4
    10fe:	d1f3      	bne.n	10e8 <sw_sha256_process+0xf4>
            word_value = w_union.w_word[w_index - 15];
    1100:	6842      	ldr	r2, [r0, #4]
            word_value = w_union.w_word[w_index - 2];
    1102:	6b81      	ldr	r1, [r0, #56]	; 0x38
            s0 = rotate_right(word_value, 7) ^ rotate_right(word_value, 18) ^ (word_value >> 3);
    1104:	0013      	movs	r3, r2
    1106:	2407      	movs	r4, #7
    1108:	41e3      	rors	r3, r4
    110a:	0014      	movs	r4, r2
    110c:	2512      	movs	r5, #18
    110e:	41ec      	rors	r4, r5
    1110:	4063      	eors	r3, r4
    1112:	08d2      	lsrs	r2, r2, #3
    1114:	4053      	eors	r3, r2
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1116:	6802      	ldr	r2, [r0, #0]
    1118:	6a44      	ldr	r4, [r0, #36]	; 0x24
    111a:	46a4      	mov	ip, r4
    111c:	4462      	add	r2, ip
    111e:	189b      	adds	r3, r3, r2
            s1 = rotate_right(word_value, 17) ^ rotate_right(word_value, 19) ^ (word_value >> 10);
    1120:	000a      	movs	r2, r1
    1122:	2411      	movs	r4, #17
    1124:	41e2      	rors	r2, r4
    1126:	000c      	movs	r4, r1
    1128:	3501      	adds	r5, #1
    112a:	41ec      	rors	r4, r5
    112c:	4062      	eors	r2, r4
    112e:	0a89      	lsrs	r1, r1, #10
    1130:	404a      	eors	r2, r1
            w_union.w_word[w_index] = w_union.w_word[w_index - 16] + s0 + w_union.w_word[w_index - 7] + s1;
    1132:	189b      	adds	r3, r3, r2
    1134:	6403      	str	r3, [r0, #64]	; 0x40
    1136:	3004      	adds	r0, #4
        while (w_index < SHA256_BLOCK_SIZE)
    1138:	ab44      	add	r3, sp, #272	; 0x110
    113a:	4298      	cmp	r0, r3
    113c:	d1e0      	bne.n	1100 <sw_sha256_process+0x10c>
    113e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1140:	2288      	movs	r2, #136	; 0x88
    1142:	4690      	mov	r8, r2
    1144:	4443      	add	r3, r8
    1146:	469c      	mov	ip, r3
    1148:	ab0c      	add	r3, sp, #48	; 0x30
    114a:	9305      	str	r3, [sp, #20]
    114c:	4662      	mov	r2, ip
    114e:	9809      	ldr	r0, [sp, #36]	; 0x24
            rotate_register[i] = ctx->hash[i];
    1150:	ca02      	ldmia	r2!, {r1}
    1152:	c302      	stmia	r3!, {r1}
        for (i = 0; i < 8; i++)
    1154:	4282      	cmp	r2, r0
    1156:	d1fb      	bne.n	1150 <sw_sha256_process+0x15c>
    1158:	9207      	str	r2, [sp, #28]
    115a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    115c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    115e:	9301      	str	r3, [sp, #4]
    1160:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1162:	9302      	str	r3, [sp, #8]
    1164:	9810      	ldr	r0, [sp, #64]	; 0x40
    1166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1168:	4698      	mov	r8, r3
    116a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    116c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    116e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    1170:	2500      	movs	r5, #0
            t1 = rotate_register[7] + s1 + ch + k[i] + w_union.w_word[i];
    1172:	a914      	add	r1, sp, #80	; 0x50
    1174:	9104      	str	r1, [sp, #16]
                 ^ rotate_right(rotate_register[0], 22);
    1176:	2116      	movs	r1, #22
    1178:	468a      	mov	sl, r1
    117a:	4661      	mov	r1, ip
    117c:	9108      	str	r1, [sp, #32]
    117e:	46bc      	mov	ip, r7
    1180:	001f      	movs	r7, r3
    1182:	0013      	movs	r3, r2
    1184:	0029      	movs	r1, r5
    1186:	4642      	mov	r2, r8
    1188:	9203      	str	r2, [sp, #12]
    118a:	e74f      	b.n	102c <sw_sha256_process+0x38>
        }
    }
}
    118c:	b055      	add	sp, #340	; 0x154
    118e:	bc3c      	pop	{r2, r3, r4, r5}
    1190:	4690      	mov	r8, r2
    1192:	4699      	mov	r9, r3
    1194:	46a2      	mov	sl, r4
    1196:	46ab      	mov	fp, r5
    1198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    119a:	46c0      	nop			; (mov r8, r8)
    119c:	0001ea18 	.word	0x0001ea18

000011a0 <sw_sha256_init>:
 *
 * \param[in] ctx          SHA256 hash context
 */

void sw_sha256_init(sw_sha256_ctx* ctx)
{
    11a0:	b510      	push	{r4, lr}
    11a2:	0004      	movs	r4, r0
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };
    int i;

    memset(ctx, 0, sizeof(*ctx));
    11a4:	22a8      	movs	r2, #168	; 0xa8
    11a6:	2100      	movs	r1, #0
    11a8:	4b0d      	ldr	r3, [pc, #52]	; (11e0 <sw_sha256_init+0x40>)
    11aa:	4798      	blx	r3
    for (i = 0; i < 8; i++)
    {
        ctx->hash[i] = hash_init[i];
    11ac:	4a0d      	ldr	r2, [pc, #52]	; (11e4 <sw_sha256_init+0x44>)
    11ae:	2388      	movs	r3, #136	; 0x88
    11b0:	50e2      	str	r2, [r4, r3]
    11b2:	4a0d      	ldr	r2, [pc, #52]	; (11e8 <sw_sha256_init+0x48>)
    11b4:	3304      	adds	r3, #4
    11b6:	50e2      	str	r2, [r4, r3]
    11b8:	4a0c      	ldr	r2, [pc, #48]	; (11ec <sw_sha256_init+0x4c>)
    11ba:	3304      	adds	r3, #4
    11bc:	50e2      	str	r2, [r4, r3]
    11be:	4a0c      	ldr	r2, [pc, #48]	; (11f0 <sw_sha256_init+0x50>)
    11c0:	3304      	adds	r3, #4
    11c2:	50e2      	str	r2, [r4, r3]
    11c4:	4a0b      	ldr	r2, [pc, #44]	; (11f4 <sw_sha256_init+0x54>)
    11c6:	3304      	adds	r3, #4
    11c8:	50e2      	str	r2, [r4, r3]
    11ca:	4a0b      	ldr	r2, [pc, #44]	; (11f8 <sw_sha256_init+0x58>)
    11cc:	3304      	adds	r3, #4
    11ce:	50e2      	str	r2, [r4, r3]
    11d0:	4a0a      	ldr	r2, [pc, #40]	; (11fc <sw_sha256_init+0x5c>)
    11d2:	3304      	adds	r3, #4
    11d4:	50e2      	str	r2, [r4, r3]
    11d6:	4a0a      	ldr	r2, [pc, #40]	; (1200 <sw_sha256_init+0x60>)
    11d8:	3304      	adds	r3, #4
    11da:	50e2      	str	r2, [r4, r3]
    }
}
    11dc:	bd10      	pop	{r4, pc}
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	00019e41 	.word	0x00019e41
    11e4:	6a09e667 	.word	0x6a09e667
    11e8:	bb67ae85 	.word	0xbb67ae85
    11ec:	3c6ef372 	.word	0x3c6ef372
    11f0:	a54ff53a 	.word	0xa54ff53a
    11f4:	510e527f 	.word	0x510e527f
    11f8:	9b05688c 	.word	0x9b05688c
    11fc:	1f83d9ab 	.word	0x1f83d9ab
    1200:	5be0cd19 	.word	0x5be0cd19

00001204 <sw_sha256_update>:
 * \param[in] ctx          SHA256 hash context
 * \param[in] msg          Raw blocks to be processed
 * \param[in] msg_size     The size of the message passed
 */
void sw_sha256_update(sw_sha256_ctx* ctx, const uint8_t* msg, uint32_t msg_size)
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
    1206:	46d6      	mov	lr, sl
    1208:	464f      	mov	r7, r9
    120a:	b580      	push	{r7, lr}
    120c:	b083      	sub	sp, #12
    120e:	0006      	movs	r6, r0
    1210:	000d      	movs	r5, r1
    1212:	0014      	movs	r4, r2
    uint32_t block_count;
    uint32_t rem_size = SHA256_BLOCK_SIZE - ctx->block_size;
    1214:	6840      	ldr	r0, [r0, #4]
    1216:	2740      	movs	r7, #64	; 0x40
    1218:	1a3f      	subs	r7, r7, r0
    uint32_t copy_size = msg_size > rem_size ? rem_size : msg_size;
    121a:	4297      	cmp	r7, r2
    121c:	d900      	bls.n	1220 <sw_sha256_update+0x1c>
    121e:	0017      	movs	r7, r2

    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);
    1220:	3008      	adds	r0, #8
    1222:	1830      	adds	r0, r6, r0
    1224:	003a      	movs	r2, r7
    1226:	0029      	movs	r1, r5
    1228:	4b17      	ldr	r3, [pc, #92]	; (1288 <sw_sha256_update+0x84>)
    122a:	4798      	blx	r3

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
    122c:	6873      	ldr	r3, [r6, #4]
    122e:	18e3      	adds	r3, r4, r3
    1230:	2b3f      	cmp	r3, #63	; 0x3f
    1232:	d805      	bhi.n	1240 <sw_sha256_update+0x3c>
    {
        // Not enough data to finish off the current block
        ctx->block_size += msg_size;
    1234:	6073      	str	r3, [r6, #4]

    // Save any remaining data
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}
    1236:	b003      	add	sp, #12
    1238:	bc0c      	pop	{r2, r3}
    123a:	4691      	mov	r9, r2
    123c:	469a      	mov	sl, r3
    123e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sw_sha256_process(ctx, ctx->block, 1);
    1240:	2308      	movs	r3, #8
    1242:	469c      	mov	ip, r3
    1244:	44b4      	add	ip, r6
    1246:	4663      	mov	r3, ip
    1248:	2201      	movs	r2, #1
    124a:	9301      	str	r3, [sp, #4]
    124c:	4661      	mov	r1, ip
    124e:	0030      	movs	r0, r6
    1250:	4b0e      	ldr	r3, [pc, #56]	; (128c <sw_sha256_update+0x88>)
    1252:	469a      	mov	sl, r3
    1254:	4798      	blx	r3
    msg_size -= copy_size; // Adjust to the remaining message bytes
    1256:	1be4      	subs	r4, r4, r7
    block_count = msg_size / SHA256_BLOCK_SIZE;
    1258:	09a2      	lsrs	r2, r4, #6
    125a:	4691      	mov	r9, r2
    sw_sha256_process(ctx, &msg[copy_size], block_count);
    125c:	19e9      	adds	r1, r5, r7
    125e:	0030      	movs	r0, r6
    1260:	47d0      	blx	sl
    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    1262:	464a      	mov	r2, r9
    1264:	1c53      	adds	r3, r2, #1
    1266:	019b      	lsls	r3, r3, #6
    1268:	6832      	ldr	r2, [r6, #0]
    126a:	4694      	mov	ip, r2
    126c:	4463      	add	r3, ip
    126e:	6033      	str	r3, [r6, #0]
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    1270:	233f      	movs	r3, #63	; 0x3f
    1272:	001a      	movs	r2, r3
    1274:	4022      	ands	r2, r4
    1276:	6072      	str	r2, [r6, #4]
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
    1278:	0021      	movs	r1, r4
    127a:	4399      	bics	r1, r3
    127c:	19c9      	adds	r1, r1, r7
    127e:	1869      	adds	r1, r5, r1
    1280:	9801      	ldr	r0, [sp, #4]
    1282:	4b01      	ldr	r3, [pc, #4]	; (1288 <sw_sha256_update+0x84>)
    1284:	4798      	blx	r3
    1286:	e7d6      	b.n	1236 <sw_sha256_update+0x32>
    1288:	00019d1d 	.word	0x00019d1d
    128c:	00000ff5 	.word	0x00000ff5

00001290 <sw_sha256_final>:
/** \brief completes the final SHA256 calculation and returns the final digest/hash
 * \param[in]  ctx     ptr to context data structure
 * \param[out] digest  receives the computed digest of the SHA 256
 */
void sw_sha256_final(sw_sha256_ctx* ctx, uint8_t digest[SHA256_DIGEST_SIZE])
{
    1290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1292:	0005      	movs	r5, r0
    1294:	000c      	movs	r4, r1
    int i, j;
    uint32_t msg_size_bits;
    uint32_t pad_zero_count;

    // Calculate the total message size in bits
    ctx->total_msg_size += ctx->block_size;
    1296:	6840      	ldr	r0, [r0, #4]
    1298:	682b      	ldr	r3, [r5, #0]
    129a:	18c7      	adds	r7, r0, r3
    129c:	602f      	str	r7, [r5, #0]
    msg_size_bits = ctx->total_msg_size * 8;
    129e:	00ff      	lsls	r7, r7, #3

    // Calculate the number of padding zero bytes required between the 1 bit byte and the 64 bit message size in bits.
    pad_zero_count = (SHA256_BLOCK_SIZE - ((ctx->block_size + 9) % SHA256_BLOCK_SIZE)) % SHA256_BLOCK_SIZE;
    12a0:	2309      	movs	r3, #9
    12a2:	425b      	negs	r3, r3
    12a4:	1a1b      	subs	r3, r3, r0
    12a6:	263f      	movs	r6, #63	; 0x3f
    12a8:	401e      	ands	r6, r3

    // Append a single 1 bit
    ctx->block[ctx->block_size++] = 0x80;
    12aa:	1c43      	adds	r3, r0, #1
    12ac:	606b      	str	r3, [r5, #4]
    12ae:	182b      	adds	r3, r5, r0
    12b0:	2280      	movs	r2, #128	; 0x80
    12b2:	721a      	strb	r2, [r3, #8]

    // Add padding zeros plus upper 4 bytes of total msg size in bits (only supporting 32bit message bit counts)
    memset(&ctx->block[ctx->block_size], 0, pad_zero_count + 4);
    12b4:	1d32      	adds	r2, r6, #4
    12b6:	3009      	adds	r0, #9
    12b8:	1828      	adds	r0, r5, r0
    12ba:	2100      	movs	r1, #0
    12bc:	4b13      	ldr	r3, [pc, #76]	; (130c <sw_sha256_final+0x7c>)
    12be:	4798      	blx	r3
    ctx->block_size += pad_zero_count + 4;
    12c0:	686b      	ldr	r3, [r5, #4]
    12c2:	469c      	mov	ip, r3
    12c4:	4466      	add	r6, ip

    // Add the total message size in bits to the end of the current block. Technically this is
    // supposed to be 8 bytes. This shortcut will reduce the max message size to 536,870,911 bytes.
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 24);
    12c6:	19ab      	adds	r3, r5, r6
    12c8:	0e3a      	lsrs	r2, r7, #24
    12ca:	731a      	strb	r2, [r3, #12]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 16);
    12cc:	0c3a      	lsrs	r2, r7, #16
    12ce:	735a      	strb	r2, [r3, #13]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 8);
    12d0:	0a3a      	lsrs	r2, r7, #8
    12d2:	739a      	strb	r2, [r3, #14]
    ctx->block[ctx->block_size++] = (uint8_t)(msg_size_bits >> 0);
    12d4:	0032      	movs	r2, r6
    12d6:	3208      	adds	r2, #8
    12d8:	606a      	str	r2, [r5, #4]
    12da:	73df      	strb	r7, [r3, #15]

    sw_sha256_process(ctx, ctx->block, ctx->block_size / SHA256_BLOCK_SIZE);
    12dc:	0992      	lsrs	r2, r2, #6
    12de:	0029      	movs	r1, r5
    12e0:	3108      	adds	r1, #8
    12e2:	0028      	movs	r0, r5
    12e4:	4b0a      	ldr	r3, [pc, #40]	; (1310 <sw_sha256_final+0x80>)
    12e6:	4798      	blx	r3
    12e8:	0028      	movs	r0, r5
    12ea:	3088      	adds	r0, #136	; 0x88
    12ec:	35a8      	adds	r5, #168	; 0xa8
    12ee:	e003      	b.n	12f8 <sw_sha256_final+0x68>
    12f0:	3004      	adds	r0, #4
    12f2:	3404      	adds	r4, #4

    // All blocks have been processed.
    // Concatenate the hashes to produce digest, MSB of every hash first.
    for (i = 0; i < 8; i++)
    12f4:	42a8      	cmp	r0, r5
    12f6:	d008      	beq.n	130a <sw_sha256_final+0x7a>
{
    12f8:	2303      	movs	r3, #3
    {
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
        {
            digest[i * sizeof(int32_t) + j] = ctx->hash[i] & 0xFF;
    12fa:	7802      	ldrb	r2, [r0, #0]
    12fc:	54e2      	strb	r2, [r4, r3]
        for (j = sizeof(int32_t) - 1; j >= 0; j--, ctx->hash[i] >>= 8)
    12fe:	6802      	ldr	r2, [r0, #0]
    1300:	0a12      	lsrs	r2, r2, #8
    1302:	6002      	str	r2, [r0, #0]
    1304:	3b01      	subs	r3, #1
    1306:	d2f8      	bcs.n	12fa <sw_sha256_final+0x6a>
    1308:	e7f2      	b.n	12f0 <sw_sha256_final+0x60>
        }
    }
}
    130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    130c:	00019e41 	.word	0x00019e41
    1310:	00000ff5 	.word	0x00000ff5

00001314 <hal_iface_init>:
    // The key here is to provide the flexibility to include just the types of interfaces you want/need without breaking the
    // object model.  The former is needed so in an embedded, constrained memory environment, you don't have to pay the price
    // (in terms of memory) for interfaces you don't use in your application.
    ATCA_STATUS status = ATCA_COMM_FAIL;

    switch (cfg->iface_type)
    1314:	7803      	ldrb	r3, [r0, #0]
    ATCA_STATUS status = ATCA_COMM_FAIL;
    1316:	20f0      	movs	r0, #240	; 0xf0
    switch (cfg->iface_type)
    1318:	2b00      	cmp	r3, #0
    131a:	d000      	beq.n	131e <hal_iface_init+0xa>
        break;
    default:
        break;
    }
    return status;
}
    131c:	4770      	bx	lr
        hal->halinit = &hal_i2c_init;
    131e:	4b0a      	ldr	r3, [pc, #40]	; (1348 <hal_iface_init+0x34>)
    1320:	600b      	str	r3, [r1, #0]
        hal->halpostinit = &hal_i2c_post_init;
    1322:	4b0a      	ldr	r3, [pc, #40]	; (134c <hal_iface_init+0x38>)
    1324:	604b      	str	r3, [r1, #4]
        hal->halreceive = &hal_i2c_receive;
    1326:	4b0a      	ldr	r3, [pc, #40]	; (1350 <hal_iface_init+0x3c>)
    1328:	60cb      	str	r3, [r1, #12]
        hal->halsend = &hal_i2c_send;
    132a:	4b0a      	ldr	r3, [pc, #40]	; (1354 <hal_iface_init+0x40>)
    132c:	608b      	str	r3, [r1, #8]
        hal->halsleep = &hal_i2c_sleep;
    132e:	4b0a      	ldr	r3, [pc, #40]	; (1358 <hal_iface_init+0x44>)
    1330:	618b      	str	r3, [r1, #24]
        hal->halwake = &hal_i2c_wake;
    1332:	4b0a      	ldr	r3, [pc, #40]	; (135c <hal_iface_init+0x48>)
    1334:	610b      	str	r3, [r1, #16]
        hal->halidle = &hal_i2c_idle;
    1336:	4b0a      	ldr	r3, [pc, #40]	; (1360 <hal_iface_init+0x4c>)
    1338:	614b      	str	r3, [r1, #20]
        hal->halrelease = &hal_i2c_release;
    133a:	4b0a      	ldr	r3, [pc, #40]	; (1364 <hal_iface_init+0x50>)
    133c:	61cb      	str	r3, [r1, #28]
        hal->hal_data = NULL;
    133e:	2300      	movs	r3, #0
    1340:	620b      	str	r3, [r1, #32]
        status = ATCA_SUCCESS;
    1342:	2000      	movs	r0, #0
        break;
    1344:	e7ea      	b.n	131c <hal_iface_init+0x8>
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	000013d9 	.word	0x000013d9
    134c:	00001585 	.word	0x00001585
    1350:	000015dd 	.word	0x000015dd
    1354:	00001589 	.word	0x00001589
    1358:	000018d1 	.word	0x000018d1
    135c:	00001799 	.word	0x00001799
    1360:	0000187d 	.word	0x0000187d
    1364:	00001925 	.word	0x00001925

00001368 <hal_iface_release>:
 * \param[in] hal_data - pointer to opaque hal data maintained by HAL implementation for this interface type
 *  \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_iface_release(ATCAIfaceType iface_type, void *hal_data)
{
    1368:	b510      	push	{r4, lr}
    ATCA_STATUS status = ATCA_GEN_FAIL;

    switch (iface_type)
    136a:	2800      	cmp	r0, #0
    136c:	d001      	beq.n	1372 <hal_iface_release+0xa>
    ATCA_STATUS status = ATCA_GEN_FAIL;
    136e:	20e1      	movs	r0, #225	; 0xe1
    default:
        break;
    }

    return status;
}
    1370:	bd10      	pop	{r4, pc}
        status = hal_i2c_release(hal_data);
    1372:	0008      	movs	r0, r1
    1374:	4b01      	ldr	r3, [pc, #4]	; (137c <hal_iface_release+0x14>)
    1376:	4798      	blx	r3
        break;
    1378:	e7fa      	b.n	1370 <hal_iface_release+0x8>
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	00001925 	.word	0x00001925

00001380 <hal_check_wake>:
 * \param[in] response_size  Size of the response to check.
 * \return ATCA_SUCCESS for expected wake, ATCA_STATUS_SELFTEST_ERROR if the
 *         power on self test failed, ATCA_WAKE_FAILED for other failures.
 */
ATCA_STATUS hal_check_wake(const uint8_t* response, int response_size)
{
    1380:	b510      	push	{r4, lr}
    1382:	b082      	sub	sp, #8
    1384:	0004      	movs	r4, r0
    const uint8_t expected_response[4] = { 0x04, 0x11, 0x33, 0x43 };
    1386:	4b0f      	ldr	r3, [pc, #60]	; (13c4 <hal_check_wake+0x44>)
    1388:	681a      	ldr	r2, [r3, #0]
    138a:	9201      	str	r2, [sp, #4]
    uint8_t selftest_fail_resp[4] = { 0x04, 0x07, 0xC4, 0x40 };
    138c:	685b      	ldr	r3, [r3, #4]
    138e:	9300      	str	r3, [sp, #0]

    if (response_size != 4)
    {
        return ATCA_WAKE_FAILED;
    1390:	20d0      	movs	r0, #208	; 0xd0
    if (response_size != 4)
    1392:	2904      	cmp	r1, #4
    1394:	d001      	beq.n	139a <hal_check_wake+0x1a>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    {
        return ATCA_STATUS_SELFTEST_ERROR;
    }
    return ATCA_WAKE_FAILED;
    1396:	b002      	add	sp, #8
    1398:	bd10      	pop	{r4, pc}
    if (memcmp(response, expected_response, 4) == 0)
    139a:	2204      	movs	r2, #4
    139c:	a901      	add	r1, sp, #4
    139e:	0020      	movs	r0, r4
    13a0:	4b09      	ldr	r3, [pc, #36]	; (13c8 <hal_check_wake+0x48>)
    13a2:	4798      	blx	r3
    13a4:	0003      	movs	r3, r0
        return ATCA_SUCCESS;
    13a6:	2000      	movs	r0, #0
    if (memcmp(response, expected_response, 4) == 0)
    13a8:	2b00      	cmp	r3, #0
    13aa:	d0f4      	beq.n	1396 <hal_check_wake+0x16>
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    13ac:	2204      	movs	r2, #4
    13ae:	4669      	mov	r1, sp
    13b0:	0020      	movs	r0, r4
    13b2:	4b05      	ldr	r3, [pc, #20]	; (13c8 <hal_check_wake+0x48>)
    13b4:	4798      	blx	r3
    13b6:	0003      	movs	r3, r0
        return ATCA_STATUS_SELFTEST_ERROR;
    13b8:	20d7      	movs	r0, #215	; 0xd7
    if (memcmp(response, selftest_fail_resp, 4) == 0)
    13ba:	2b00      	cmp	r3, #0
    13bc:	d0eb      	beq.n	1396 <hal_check_wake+0x16>
    return ATCA_WAKE_FAILED;
    13be:	3807      	subs	r0, #7
    13c0:	e7e9      	b.n	1396 <hal_check_wake+0x16>
    13c2:	46c0      	nop			; (mov r8, r8)
    13c4:	0001eb18 	.word	0x0001eb18
    13c8:	00019cd1 	.word	0x00019cd1

000013cc <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    13cc:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    13ce:	2207      	movs	r2, #7
    13d0:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    13d2:	421a      	tst	r2, r3
    13d4:	d1fc      	bne.n	13d0 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    13d6:	4770      	bx	lr

000013d8 <hal_i2c_init>:
 * \param[in] hal - opaque ptr to HAL data
 * \param[in] cfg - interface configuration
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_init(void *hal, ATCAIfaceCfg *cfg)
{
    13d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13da:	46de      	mov	lr, fp
    13dc:	464f      	mov	r7, r9
    13de:	4646      	mov	r6, r8
    13e0:	b5c0      	push	{r6, r7, lr}
    13e2:	b082      	sub	sp, #8
    13e4:	4681      	mov	r9, r0
    13e6:	000d      	movs	r5, r1
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    13e8:	794c      	ldrb	r4, [r1, #5]
    {
        return ATCA_COMM_FAIL;
    13ea:	20f0      	movs	r0, #240	; 0xf0
    if (cfg->atcai2c.bus >= MAX_I2C_BUSES)
    13ec:	2c05      	cmp	r4, #5
    13ee:	d905      	bls.n	13fc <hal_i2c_init+0x24>
    }

    ((ATCAHAL_t*)hal)->hal_data = data;

    return ATCA_SUCCESS;
}
    13f0:	b002      	add	sp, #8
    13f2:	bc1c      	pop	{r2, r3, r4}
    13f4:	4690      	mov	r8, r2
    13f6:	4699      	mov	r9, r3
    13f8:	46a3      	mov	fp, r4
    13fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    13fc:	9400      	str	r4, [sp, #0]
    13fe:	2734      	movs	r7, #52	; 0x34
    1400:	4367      	muls	r7, r4
    1402:	4b50      	ldr	r3, [pc, #320]	; (1544 <hal_i2c_init+0x16c>)
    1404:	4698      	mov	r8, r3
    1406:	44b8      	add	r8, r7
    if (data->ref_ct <= 0)
    1408:	4643      	mov	r3, r8
    140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    140c:	2b00      	cmp	r3, #0
    140e:	dd0a      	ble.n	1426 <hal_i2c_init+0x4e>
        data->ref_ct++;
    1410:	2234      	movs	r2, #52	; 0x34
    1412:	4362      	muls	r2, r4
    1414:	4c4b      	ldr	r4, [pc, #300]	; (1544 <hal_i2c_init+0x16c>)
    1416:	18a4      	adds	r4, r4, r2
    1418:	3301      	adds	r3, #1
    141a:	62e3      	str	r3, [r4, #44]	; 0x2c
    ((ATCAHAL_t*)hal)->hal_data = data;
    141c:	464b      	mov	r3, r9
    141e:	4642      	mov	r2, r8
    1420:	621a      	str	r2, [r3, #32]
    return ATCA_SUCCESS;
    1422:	2000      	movs	r0, #0
    1424:	e7e4      	b.n	13f0 <hal_i2c_init+0x18>
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    1426:	4e48      	ldr	r6, [pc, #288]	; (1548 <hal_i2c_init+0x170>)
    1428:	4b48      	ldr	r3, [pc, #288]	; (154c <hal_i2c_init+0x174>)
    142a:	6073      	str	r3, [r6, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    142c:	2300      	movs	r3, #0
    142e:	60b3      	str	r3, [r6, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    1430:	7333      	strb	r3, [r6, #12]
	config->run_in_standby   = false;
    1432:	7633      	strb	r3, [r6, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    1434:	2280      	movs	r2, #128	; 0x80
    1436:	0392      	lsls	r2, r2, #14
    1438:	6132      	str	r2, [r6, #16]
	config->buffer_timeout   = 65535;
    143a:	2201      	movs	r2, #1
    143c:	4252      	negs	r2, r2
    143e:	82f2      	strh	r2, [r6, #22]
	config->unknown_bus_state_timeout = 65535;
	config->pinmux_pad0      = PINMUX_DEFAULT;
    1440:	61f3      	str	r3, [r6, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    1442:	6233      	str	r3, [r6, #32]
	config->scl_low_timeout  = false;
    1444:	3225      	adds	r2, #37	; 0x25
    1446:	54b3      	strb	r3, [r6, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    1448:	62b3      	str	r3, [r6, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    144a:	3208      	adds	r2, #8
    144c:	54b3      	strb	r3, [r6, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    144e:	3201      	adds	r2, #1
    1450:	54b3      	strb	r3, [r6, r2]
	config->master_scl_low_extend_timeout  = false;
    1452:	3201      	adds	r2, #1
    1454:	54b3      	strb	r3, [r6, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    1456:	33d7      	adds	r3, #215	; 0xd7
    1458:	8633      	strh	r3, [r6, #48]	; 0x30
        config_i2c_master.unknown_bus_state_timeout = 500;
    145a:	331e      	adds	r3, #30
    145c:	33ff      	adds	r3, #255	; 0xff
    145e:	82b3      	strh	r3, [r6, #20]
        config_i2c_master.baud_rate = cfg->atcai2c.baud / 1000;
    1460:	21fa      	movs	r1, #250	; 0xfa
    1462:	0089      	lsls	r1, r1, #2
    1464:	68a8      	ldr	r0, [r5, #8]
    1466:	4b3a      	ldr	r3, [pc, #232]	; (1550 <hal_i2c_init+0x178>)
    1468:	4798      	blx	r3
    146a:	6030      	str	r0, [r6, #0]
        switch (cfg->atcai2c.bus)
    146c:	796b      	ldrb	r3, [r5, #5]
    146e:	2b05      	cmp	r3, #5
    1470:	d866      	bhi.n	1540 <hal_i2c_init+0x168>
    1472:	009b      	lsls	r3, r3, #2
    1474:	4a37      	ldr	r2, [pc, #220]	; (1554 <hal_i2c_init+0x17c>)
    1476:	58d3      	ldr	r3, [r2, r3]
    1478:	469f      	mov	pc, r3
            data->i2c_sercom = SERCOM0;
    147a:	2334      	movs	r3, #52	; 0x34
    147c:	4363      	muls	r3, r4
    147e:	2184      	movs	r1, #132	; 0x84
    1480:	05c9      	lsls	r1, r1, #23
    1482:	4a30      	ldr	r2, [pc, #192]	; (1544 <hal_i2c_init+0x16c>)
    1484:	5099      	str	r1, [r3, r2]
		config_i2c_master.pinmux_pad0 = ATCAD_HOST_I2C_SERCOM_PINMUX_PAD0;
    1486:	4a30      	ldr	r2, [pc, #192]	; (1548 <hal_i2c_init+0x170>)
    1488:	4b33      	ldr	r3, [pc, #204]	; (1558 <hal_i2c_init+0x180>)
    148a:	61d3      	str	r3, [r2, #28]
		config_i2c_master.pinmux_pad1 = ATCAD_HOST_I2C_SERCOM_PINMUX_PAD1;
    148c:	4b33      	ldr	r3, [pc, #204]	; (155c <hal_i2c_init+0x184>)
    148e:	6213      	str	r3, [r2, #32]
        i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    1490:	4e2c      	ldr	r6, [pc, #176]	; (1544 <hal_i2c_init+0x16c>)
    1492:	3704      	adds	r7, #4
    1494:	19f3      	adds	r3, r6, r7
    1496:	2734      	movs	r7, #52	; 0x34
    1498:	4367      	muls	r7, r4
    149a:	59b9      	ldr	r1, [r7, r6]
    149c:	9301      	str	r3, [sp, #4]
    149e:	0018      	movs	r0, r3
    14a0:	4b2f      	ldr	r3, [pc, #188]	; (1560 <hal_i2c_init+0x188>)
    14a2:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14a4:	46b3      	mov	fp, r6
    14a6:	44bb      	add	fp, r7
    14a8:	465a      	mov	r2, fp
    14aa:	6857      	ldr	r7, [r2, #4]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    14ac:	9801      	ldr	r0, [sp, #4]
    14ae:	4b2d      	ldr	r3, [pc, #180]	; (1564 <hal_i2c_init+0x18c>)
    14b0:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    14b2:	683b      	ldr	r3, [r7, #0]
    14b4:	2202      	movs	r2, #2
    14b6:	4313      	orrs	r3, r2
    14b8:	603b      	str	r3, [r7, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    14ba:	465b      	mov	r3, fp
    14bc:	6858      	ldr	r0, [r3, #4]
    14be:	4b2a      	ldr	r3, [pc, #168]	; (1568 <hal_i2c_init+0x190>)
    14c0:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    14c2:	231f      	movs	r3, #31
    14c4:	4018      	ands	r0, r3
    14c6:	3b1e      	subs	r3, #30
    14c8:	4083      	lsls	r3, r0
    14ca:	4a28      	ldr	r2, [pc, #160]	; (156c <hal_i2c_init+0x194>)
    14cc:	6013      	str	r3, [r2, #0]
	uint32_t timeout_counter = 0;
    14ce:	2300      	movs	r3, #0
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    14d0:	2110      	movs	r1, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    14d2:	2234      	movs	r2, #52	; 0x34
    14d4:	9e00      	ldr	r6, [sp, #0]
    14d6:	4356      	muls	r6, r2
    14d8:	4a1a      	ldr	r2, [pc, #104]	; (1544 <hal_i2c_init+0x16c>)
    14da:	4694      	mov	ip, r2
    14dc:	4466      	add	r6, ip
    14de:	360a      	adds	r6, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    14e0:	8b7a      	ldrh	r2, [r7, #26]
    14e2:	420a      	tst	r2, r1
    14e4:	d105      	bne.n	14f2 <hal_i2c_init+0x11a>
		timeout_counter++;
    14e6:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    14e8:	8832      	ldrh	r2, [r6, #0]
    14ea:	4293      	cmp	r3, r2
    14ec:	d3f8      	bcc.n	14e0 <hal_i2c_init+0x108>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    14ee:	2310      	movs	r3, #16
    14f0:	837b      	strh	r3, [r7, #26]
        data->bus_index = cfg->atcai2c.bus;
    14f2:	2334      	movs	r3, #52	; 0x34
    14f4:	4363      	muls	r3, r4
    14f6:	4c13      	ldr	r4, [pc, #76]	; (1544 <hal_i2c_init+0x16c>)
    14f8:	18e4      	adds	r4, r4, r3
    14fa:	796b      	ldrb	r3, [r5, #5]
    14fc:	6323      	str	r3, [r4, #48]	; 0x30
        data->ref_ct = 1;
    14fe:	2301      	movs	r3, #1
    1500:	62e3      	str	r3, [r4, #44]	; 0x2c
    1502:	e78b      	b.n	141c <hal_i2c_init+0x44>
            data->i2c_sercom = SERCOM1;
    1504:	2334      	movs	r3, #52	; 0x34
    1506:	4363      	muls	r3, r4
    1508:	4919      	ldr	r1, [pc, #100]	; (1570 <hal_i2c_init+0x198>)
    150a:	4a0e      	ldr	r2, [pc, #56]	; (1544 <hal_i2c_init+0x16c>)
    150c:	5099      	str	r1, [r3, r2]
            break;
    150e:	e7ba      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM2;
    1510:	2334      	movs	r3, #52	; 0x34
    1512:	4363      	muls	r3, r4
    1514:	4917      	ldr	r1, [pc, #92]	; (1574 <hal_i2c_init+0x19c>)
    1516:	4a0b      	ldr	r2, [pc, #44]	; (1544 <hal_i2c_init+0x16c>)
    1518:	5099      	str	r1, [r3, r2]
            break;
    151a:	e7b4      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM3;
    151c:	2334      	movs	r3, #52	; 0x34
    151e:	4363      	muls	r3, r4
    1520:	4915      	ldr	r1, [pc, #84]	; (1578 <hal_i2c_init+0x1a0>)
    1522:	4a08      	ldr	r2, [pc, #32]	; (1544 <hal_i2c_init+0x16c>)
    1524:	5099      	str	r1, [r3, r2]
            break;
    1526:	e7ae      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM4;
    1528:	2334      	movs	r3, #52	; 0x34
    152a:	4363      	muls	r3, r4
    152c:	4913      	ldr	r1, [pc, #76]	; (157c <hal_i2c_init+0x1a4>)
    152e:	4a05      	ldr	r2, [pc, #20]	; (1544 <hal_i2c_init+0x16c>)
    1530:	5099      	str	r1, [r3, r2]
            break;
    1532:	e7a8      	b.n	1486 <hal_i2c_init+0xae>
            data->i2c_sercom = SERCOM5;
    1534:	2334      	movs	r3, #52	; 0x34
    1536:	4363      	muls	r3, r4
    1538:	4911      	ldr	r1, [pc, #68]	; (1580 <hal_i2c_init+0x1a8>)
    153a:	4a02      	ldr	r2, [pc, #8]	; (1544 <hal_i2c_init+0x16c>)
    153c:	5099      	str	r1, [r3, r2]
            break;
    153e:	e7a2      	b.n	1486 <hal_i2c_init+0xae>
            return ATCA_COMM_FAIL;
    1540:	20f0      	movs	r0, #240	; 0xf0
    1542:	e755      	b.n	13f0 <hal_i2c_init+0x18>
    1544:	20000a1c 	.word	0x20000a1c
    1548:	200009e8 	.word	0x200009e8
    154c:	00000d48 	.word	0x00000d48
    1550:	000165b9 	.word	0x000165b9
    1554:	0001eb20 	.word	0x0001eb20
    1558:	00100002 	.word	0x00100002
    155c:	00110002 	.word	0x00110002
    1560:	00005289 	.word	0x00005289
    1564:	000013cd 	.word	0x000013cd
    1568:	00005fb9 	.word	0x00005fb9
    156c:	e000e100 	.word	0xe000e100
    1570:	42000400 	.word	0x42000400
    1574:	42000800 	.word	0x42000800
    1578:	42000c00 	.word	0x42000c00
    157c:	42001000 	.word	0x42001000
    1580:	43000400 	.word	0x43000400

00001584 <hal_i2c_post_init>:
 * \return ATCA_SUCCESS
 */
ATCA_STATUS hal_i2c_post_init(ATCAIface iface)
{
    return ATCA_SUCCESS;
}
    1584:	2000      	movs	r0, #0
    1586:	4770      	bx	lr

00001588 <hal_i2c_send>:
 * \param[in] txlength  number of bytes to send
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_send(ATCAIface iface, uint8_t *txdata, int txlength)
{
    1588:	b530      	push	{r4, r5, lr}
    158a:	b085      	sub	sp, #20
    158c:	000d      	movs	r5, r1
    158e:	0014      	movs	r4, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1590:	4b0f      	ldr	r3, [pc, #60]	; (15d0 <hal_i2c_send+0x48>)
    1592:	4798      	blx	r3

    struct i2c_master_packet packet = {
    1594:	a901      	add	r1, sp, #4
    1596:	7903      	ldrb	r3, [r0, #4]
    1598:	085b      	lsrs	r3, r3, #1
    159a:	800b      	strh	r3, [r1, #0]
    159c:	604d      	str	r5, [r1, #4]
    159e:	2300      	movs	r3, #0
    15a0:	720b      	strb	r3, [r1, #8]
    15a2:	724b      	strb	r3, [r1, #9]
    15a4:	728b      	strb	r3, [r1, #10]

    // for this implementation of I2C with CryptoAuth chips, txdata is assumed to have ATCAPacket format
    // other device types that don't require i/o tokens on the front end of a command need a different hal_i2c_send and wire it up instead of this one
    // this covers devices such as ATSHA204A and ATECCx08A that require a word address value pre-pended to the packet
    // txdata[0] is using _reserved byte of the ATCAPacket
    txdata[0] = 0x03;   // insert the Word Address Value, Command token
    15a6:	3303      	adds	r3, #3
    15a8:	702b      	strb	r3, [r5, #0]
    txlength++;         // account for word address value byte.
    15aa:	3401      	adds	r4, #1
    packet.data_length = txlength;
    15ac:	804c      	strh	r4, [r1, #2]

    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    15ae:	7943      	ldrb	r3, [r0, #5]
    15b0:	2034      	movs	r0, #52	; 0x34
    15b2:	4358      	muls	r0, r3
    15b4:	3004      	adds	r0, #4
    15b6:	4b07      	ldr	r3, [pc, #28]	; (15d4 <hal_i2c_send+0x4c>)
    15b8:	1818      	adds	r0, r3, r0
    15ba:	4b07      	ldr	r3, [pc, #28]	; (15d8 <hal_i2c_send+0x50>)
    15bc:	4798      	blx	r3
    15be:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    15c0:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    15c2:	1e5a      	subs	r2, r3, #1
    15c4:	4193      	sbcs	r3, r2
    15c6:	425b      	negs	r3, r3
    15c8:	4018      	ands	r0, r3
}
    15ca:	b005      	add	sp, #20
    15cc:	bd30      	pop	{r4, r5, pc}
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	00000f19 	.word	0x00000f19
    15d4:	20000a1c 	.word	0x20000a1c
    15d8:	00005941 	.word	0x00005941

000015dc <hal_i2c_receive>:
 * \param[inout] rxlength  As input, the size of the rxdata buffer.
 *                         As output, the number of bytes received.
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS hal_i2c_receive(ATCAIface iface, uint8_t *rxdata, uint16_t *rxlength)
{
    15dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    15de:	46d6      	mov	lr, sl
    15e0:	464f      	mov	r7, r9
    15e2:	4646      	mov	r6, r8
    15e4:	b5c0      	push	{r6, r7, lr}
    15e6:	b084      	sub	sp, #16
    15e8:	4689      	mov	r9, r1
    15ea:	4690      	mov	r8, r2
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    15ec:	4b2c      	ldr	r3, [pc, #176]	; (16a0 <hal_i2c_receive+0xc4>)
    15ee:	4798      	blx	r3
    15f0:	0005      	movs	r5, r0
    int retries = cfg->rx_retries;
    15f2:	6a84      	ldr	r4, [r0, #40]	; 0x28
    int status = !ATCA_SUCCESS;
    uint16_t rxdata_max_size = *rxlength;
    15f4:	4643      	mov	r3, r8
    15f6:	881b      	ldrh	r3, [r3, #0]
    15f8:	469a      	mov	sl, r3

    struct i2c_master_packet packet = {
    15fa:	ab01      	add	r3, sp, #4
    15fc:	7902      	ldrb	r2, [r0, #4]
    15fe:	0852      	lsrs	r2, r2, #1
    1600:	801a      	strh	r2, [r3, #0]
    1602:	2201      	movs	r2, #1
    1604:	805a      	strh	r2, [r3, #2]
    1606:	464a      	mov	r2, r9
    1608:	9202      	str	r2, [sp, #8]
    160a:	2200      	movs	r2, #0
    160c:	721a      	strb	r2, [r3, #8]
    160e:	725a      	strb	r2, [r3, #9]
    1610:	729a      	strb	r2, [r3, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    *rxlength = 0;
    1612:	4643      	mov	r3, r8
    1614:	801a      	strh	r2, [r3, #0]
    if (rxdata_max_size < 1)
    {
        return ATCA_SMALL_BUFFER;
    1616:	20ed      	movs	r0, #237	; 0xed
    if (rxdata_max_size < 1)
    1618:	4653      	mov	r3, sl
    161a:	2b00      	cmp	r3, #0
    161c:	d105      	bne.n	162a <hal_i2c_receive+0x4e>
    }

    *rxlength = rxdata[0];

    return ATCA_SUCCESS;
}
    161e:	b004      	add	sp, #16
    1620:	bc1c      	pop	{r2, r3, r4}
    1622:	4690      	mov	r8, r2
    1624:	4699      	mov	r9, r3
    1626:	46a2      	mov	sl, r4
    1628:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (rxdata_max_size < 1)
    162a:	2301      	movs	r3, #1
        if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    162c:	4f1d      	ldr	r7, [pc, #116]	; (16a4 <hal_i2c_receive+0xc8>)
    162e:	4e1e      	ldr	r6, [pc, #120]	; (16a8 <hal_i2c_receive+0xcc>)
    1630:	e00c      	b.n	164c <hal_i2c_receive+0x70>
    1632:	796b      	ldrb	r3, [r5, #5]
    1634:	2034      	movs	r0, #52	; 0x34
    1636:	4358      	muls	r0, r3
    1638:	3004      	adds	r0, #4
    163a:	1838      	adds	r0, r7, r0
    163c:	a901      	add	r1, sp, #4
    163e:	47b0      	blx	r6
            status = ATCA_COMM_FAIL;
    1640:	23f0      	movs	r3, #240	; 0xf0
            status = ATCA_SUCCESS;
    1642:	1e42      	subs	r2, r0, #1
    1644:	4190      	sbcs	r0, r2
    1646:	4240      	negs	r0, r0
    1648:	4003      	ands	r3, r0
    164a:	3c01      	subs	r4, #1
    while (retries-- > 0 && status != ATCA_SUCCESS)
    164c:	2c00      	cmp	r4, #0
    164e:	dd1c      	ble.n	168a <hal_i2c_receive+0xae>
    1650:	2b00      	cmp	r3, #0
    1652:	d1ee      	bne.n	1632 <hal_i2c_receive+0x56>
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    1654:	464b      	mov	r3, r9
    1656:	781b      	ldrb	r3, [r3, #0]
        return ATCA_INVALID_SIZE;
    1658:	20e4      	movs	r0, #228	; 0xe4
    if (rxdata[0] < ATCA_RSP_SIZE_MIN)
    165a:	2b03      	cmp	r3, #3
    165c:	d9df      	bls.n	161e <hal_i2c_receive+0x42>
    if (rxdata[0] > rxdata_max_size)
    165e:	b29b      	uxth	r3, r3
        return ATCA_SMALL_BUFFER;
    1660:	3009      	adds	r0, #9
    if (rxdata[0] > rxdata_max_size)
    1662:	459a      	cmp	sl, r3
    1664:	d3db      	bcc.n	161e <hal_i2c_receive+0x42>
    packet.data_length = rxdata[0] - 1;
    1666:	a901      	add	r1, sp, #4
    1668:	3b01      	subs	r3, #1
    166a:	804b      	strh	r3, [r1, #2]
    packet.data = &rxdata[1];
    166c:	464b      	mov	r3, r9
    166e:	3301      	adds	r3, #1
    1670:	604b      	str	r3, [r1, #4]
    if (i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    1672:	796b      	ldrb	r3, [r5, #5]
    1674:	38b9      	subs	r0, #185	; 0xb9
    1676:	4358      	muls	r0, r3
    1678:	3004      	adds	r0, #4
    167a:	4b0a      	ldr	r3, [pc, #40]	; (16a4 <hal_i2c_receive+0xc8>)
    167c:	1818      	adds	r0, r3, r0
    167e:	4b0a      	ldr	r3, [pc, #40]	; (16a8 <hal_i2c_receive+0xcc>)
    1680:	4798      	blx	r3
    1682:	2800      	cmp	r0, #0
    1684:	d005      	beq.n	1692 <hal_i2c_receive+0xb6>
        return status;
    1686:	20f0      	movs	r0, #240	; 0xf0
    1688:	e7c9      	b.n	161e <hal_i2c_receive+0x42>
    if (status != ATCA_SUCCESS)
    168a:	2b00      	cmp	r3, #0
    168c:	d0e2      	beq.n	1654 <hal_i2c_receive+0x78>
        return status;
    168e:	b2d8      	uxtb	r0, r3
    1690:	e7c5      	b.n	161e <hal_i2c_receive+0x42>
    *rxlength = rxdata[0];
    1692:	464b      	mov	r3, r9
    1694:	781b      	ldrb	r3, [r3, #0]
    1696:	4642      	mov	r2, r8
    1698:	8013      	strh	r3, [r2, #0]
    return ATCA_SUCCESS;
    169a:	2000      	movs	r0, #0
    169c:	e7bf      	b.n	161e <hal_i2c_receive+0x42>
    169e:	46c0      	nop			; (mov r8, r8)
    16a0:	00000f19 	.word	0x00000f19
    16a4:	20000a1c 	.word	0x20000a1c
    16a8:	0000591d 	.word	0x0000591d

000016ac <change_i2c_speed>:
 * \param[in] iface  interface on which to change bus speed
 * \param[in] speed  baud rate (typically 100000 or 400000)
 */

void change_i2c_speed(ATCAIface iface, uint32_t speed)
{
    16ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ae:	46de      	mov	lr, fp
    16b0:	4657      	mov	r7, sl
    16b2:	464e      	mov	r6, r9
    16b4:	4645      	mov	r5, r8
    16b6:	b5e0      	push	{r5, r6, r7, lr}
    16b8:	b085      	sub	sp, #20
    16ba:	9103      	str	r1, [sp, #12]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    16bc:	4b2d      	ldr	r3, [pc, #180]	; (1774 <change_i2c_speed+0xc8>)
    16be:	4798      	blx	r3
    ATCAI2CMaster_t* data = &i2c_hal_data[cfg->atcai2c.bus];
    16c0:	7943      	ldrb	r3, [r0, #5]

    i2c_master_disable(&data->i2c_master_instance);
    16c2:	4a2d      	ldr	r2, [pc, #180]	; (1778 <change_i2c_speed+0xcc>)
    16c4:	4690      	mov	r8, r2
    16c6:	2534      	movs	r5, #52	; 0x34
    16c8:	9302      	str	r3, [sp, #8]
    16ca:	435d      	muls	r5, r3
    16cc:	1d2c      	adds	r4, r5, #4
    16ce:	4444      	add	r4, r8
    16d0:	9401      	str	r4, [sp, #4]
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16d2:	1957      	adds	r7, r2, r5
    16d4:	687e      	ldr	r6, [r7, #4]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    16d6:	0030      	movs	r0, r6
    16d8:	4c28      	ldr	r4, [pc, #160]	; (177c <change_i2c_speed+0xd0>)
    16da:	46a2      	mov	sl, r4
    16dc:	47a0      	blx	r4
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    16de:	241f      	movs	r4, #31
    16e0:	4020      	ands	r0, r4
    16e2:	3c1e      	subs	r4, #30
    16e4:	0022      	movs	r2, r4
    16e6:	4082      	lsls	r2, r0
    16e8:	4925      	ldr	r1, [pc, #148]	; (1780 <change_i2c_speed+0xd4>)
    16ea:	4689      	mov	r9, r1
    16ec:	2380      	movs	r3, #128	; 0x80
    16ee:	50ca      	str	r2, [r1, r3]
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    16f0:	9801      	ldr	r0, [sp, #4]
    16f2:	4a24      	ldr	r2, [pc, #144]	; (1784 <change_i2c_speed+0xd8>)
    16f4:	4693      	mov	fp, r2
    16f6:	4790      	blx	r2

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    16f8:	2383      	movs	r3, #131	; 0x83
    16fa:	7533      	strb	r3, [r6, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    16fc:	7633      	strb	r3, [r6, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    16fe:	6833      	ldr	r3, [r6, #0]
    1700:	2202      	movs	r2, #2
    1702:	4393      	bics	r3, r2
    1704:	6033      	str	r3, [r6, #0]
    config_i2c_master.buffer_timeout = 10000;
    1706:	4e20      	ldr	r6, [pc, #128]	; (1788 <change_i2c_speed+0xdc>)
    1708:	4b20      	ldr	r3, [pc, #128]	; (178c <change_i2c_speed+0xe0>)
    170a:	82f3      	strh	r3, [r6, #22]
    config_i2c_master.baud_rate = speed / 1000;
    170c:	21fa      	movs	r1, #250	; 0xfa
    170e:	0089      	lsls	r1, r1, #2
    1710:	9803      	ldr	r0, [sp, #12]
    1712:	4b1f      	ldr	r3, [pc, #124]	; (1790 <change_i2c_speed+0xe4>)
    1714:	4798      	blx	r3
    1716:	6030      	str	r0, [r6, #0]
    i2c_master_init(&data->i2c_master_instance, data->i2c_sercom, &config_i2c_master);
    1718:	4641      	mov	r1, r8
    171a:	5869      	ldr	r1, [r5, r1]
    171c:	0032      	movs	r2, r6
    171e:	9e01      	ldr	r6, [sp, #4]
    1720:	0030      	movs	r0, r6
    1722:	4b1c      	ldr	r3, [pc, #112]	; (1794 <change_i2c_speed+0xe8>)
    1724:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1726:	687d      	ldr	r5, [r7, #4]
	_i2c_master_wait_for_sync(module);
    1728:	0030      	movs	r0, r6
    172a:	47d8      	blx	fp
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    172c:	682b      	ldr	r3, [r5, #0]
    172e:	2102      	movs	r1, #2
    1730:	430b      	orrs	r3, r1
    1732:	602b      	str	r3, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1734:	6878      	ldr	r0, [r7, #4]
    1736:	47d0      	blx	sl
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1738:	211f      	movs	r1, #31
    173a:	4008      	ands	r0, r1
    173c:	4084      	lsls	r4, r0
    173e:	4649      	mov	r1, r9
    1740:	600c      	str	r4, [r1, #0]
	uint32_t timeout_counter = 0;
    1742:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1744:	2010      	movs	r0, #16
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    1746:	2134      	movs	r1, #52	; 0x34
    1748:	9a02      	ldr	r2, [sp, #8]
    174a:	4351      	muls	r1, r2
    174c:	4a0a      	ldr	r2, [pc, #40]	; (1778 <change_i2c_speed+0xcc>)
    174e:	4694      	mov	ip, r2
    1750:	4461      	add	r1, ip
    1752:	310a      	adds	r1, #10
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    1754:	8b6a      	ldrh	r2, [r5, #26]
    1756:	4202      	tst	r2, r0
    1758:	d105      	bne.n	1766 <change_i2c_speed+0xba>
		timeout_counter++;
    175a:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    175c:	880a      	ldrh	r2, [r1, #0]
    175e:	4293      	cmp	r3, r2
    1760:	d3f8      	bcc.n	1754 <change_i2c_speed+0xa8>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    1762:	2310      	movs	r3, #16
    1764:	836b      	strh	r3, [r5, #26]
    i2c_master_enable(&data->i2c_master_instance);
}
    1766:	b005      	add	sp, #20
    1768:	bc3c      	pop	{r2, r3, r4, r5}
    176a:	4690      	mov	r8, r2
    176c:	4699      	mov	r9, r3
    176e:	46a2      	mov	sl, r4
    1770:	46ab      	mov	fp, r5
    1772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1774:	00000f19 	.word	0x00000f19
    1778:	20000a1c 	.word	0x20000a1c
    177c:	00005fb9 	.word	0x00005fb9
    1780:	e000e100 	.word	0xe000e100
    1784:	000013cd 	.word	0x000013cd
    1788:	200009e8 	.word	0x200009e8
    178c:	00002710 	.word	0x00002710
    1790:	000165b9 	.word	0x000165b9
    1794:	00005289 	.word	0x00005289

00001798 <hal_i2c_wake>:
 * \param[in] iface  interface to logical device to wakeup
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_wake(ATCAIface iface)
{
    1798:	b5f0      	push	{r4, r5, r6, r7, lr}
    179a:	46ce      	mov	lr, r9
    179c:	4647      	mov	r7, r8
    179e:	b580      	push	{r7, lr}
    17a0:	b087      	sub	sp, #28
    17a2:	0004      	movs	r4, r0
    17a4:	9001      	str	r0, [sp, #4]
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    17a6:	4b2d      	ldr	r3, [pc, #180]	; (185c <hal_i2c_wake+0xc4>)
    17a8:	4798      	blx	r3
    17aa:	0006      	movs	r6, r0
    int retries = cfg->rx_retries;
    17ac:	6a87      	ldr	r7, [r0, #40]	; 0x28
    uint32_t bdrt = cfg->atcai2c.baud;
    17ae:	6883      	ldr	r3, [r0, #8]
    17b0:	4699      	mov	r9, r3
    int status = !STATUS_OK;
    uint8_t data[4];

    if (bdrt != 100000)    // if not already at 100KHz, change it
    17b2:	4b2b      	ldr	r3, [pc, #172]	; (1860 <hal_i2c_wake+0xc8>)
    17b4:	4599      	cmp	r9, r3
    17b6:	d003      	beq.n	17c0 <hal_i2c_wake+0x28>
    {
        change_i2c_speed(iface, 100000);
    17b8:	0019      	movs	r1, r3
    17ba:	0020      	movs	r0, r4
    17bc:	4b29      	ldr	r3, [pc, #164]	; (1864 <hal_i2c_wake+0xcc>)
    17be:	4798      	blx	r3
    }

    // Send the wake by writing to an address of 0x00
    struct i2c_master_packet packet = {
    17c0:	2200      	movs	r2, #0
    17c2:	2300      	movs	r3, #0
    17c4:	a902      	add	r1, sp, #8
    17c6:	800a      	strh	r2, [r1, #0]
    17c8:	804a      	strh	r2, [r1, #2]
    17ca:	ac05      	add	r4, sp, #20
    17cc:	9403      	str	r4, [sp, #12]
    17ce:	720b      	strb	r3, [r1, #8]
    17d0:	724b      	strb	r3, [r1, #9]
    17d2:	728b      	strb	r3, [r1, #10]
        .hs_master_code     = 0x0,
    };

    // Send the 00 address as the wake pulse
    // part will NACK, so don't check for status
    i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    17d4:	7973      	ldrb	r3, [r6, #5]
    17d6:	2034      	movs	r0, #52	; 0x34
    17d8:	4358      	muls	r0, r3
    17da:	3004      	adds	r0, #4
    17dc:	4b22      	ldr	r3, [pc, #136]	; (1868 <hal_i2c_wake+0xd0>)
    17de:	1818      	adds	r0, r3, r0
    17e0:	4b22      	ldr	r3, [pc, #136]	; (186c <hal_i2c_wake+0xd4>)
    17e2:	4798      	blx	r3

    // wait tWHI + tWLO which is configured based on device type and configuration structure
    atca_delay_us(cfg->wake_delay);
    17e4:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
    17e6:	4b22      	ldr	r3, [pc, #136]	; (1870 <hal_i2c_wake+0xd8>)
    17e8:	4798      	blx	r3

    packet.address = cfg->atcai2c.slave_address >> 1;
    17ea:	7933      	ldrb	r3, [r6, #4]
    17ec:	085b      	lsrs	r3, r3, #1
    17ee:	aa02      	add	r2, sp, #8
    17f0:	8013      	strh	r3, [r2, #0]
    packet.data_length = 4;
    17f2:	2304      	movs	r3, #4
    17f4:	8053      	strh	r3, [r2, #2]
    packet.data = data;
    17f6:	9403      	str	r4, [sp, #12]

    while (retries-- > 0 && status != STATUS_OK)
    17f8:	1e7c      	subs	r4, r7, #1
    17fa:	2f00      	cmp	r7, #0
    17fc:	dd28      	ble.n	1850 <hal_i2c_wake+0xb8>
    {
        status = i2c_master_read_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet);
    17fe:	4b1a      	ldr	r3, [pc, #104]	; (1868 <hal_i2c_wake+0xd0>)
    1800:	4698      	mov	r8, r3
    1802:	4f1c      	ldr	r7, [pc, #112]	; (1874 <hal_i2c_wake+0xdc>)
    1804:	7973      	ldrb	r3, [r6, #5]
    1806:	2034      	movs	r0, #52	; 0x34
    1808:	4358      	muls	r0, r3
    180a:	3004      	adds	r0, #4
    180c:	4440      	add	r0, r8
    180e:	a902      	add	r1, sp, #8
    1810:	47b8      	blx	r7
    1812:	0005      	movs	r5, r0
    while (retries-- > 0 && status != STATUS_OK)
    1814:	3c01      	subs	r4, #1
    1816:	d310      	bcc.n	183a <hal_i2c_wake+0xa2>
    1818:	2800      	cmp	r0, #0
    181a:	d1f3      	bne.n	1804 <hal_i2c_wake+0x6c>
    }

    // if necessary, revert baud rate to what came in.
    if (bdrt != 100000)
    181c:	4b10      	ldr	r3, [pc, #64]	; (1860 <hal_i2c_wake+0xc8>)
    181e:	4599      	cmp	r9, r3
    1820:	d011      	beq.n	1846 <hal_i2c_wake+0xae>
    {
        change_i2c_speed(iface, bdrt);
    1822:	4649      	mov	r1, r9
    1824:	9801      	ldr	r0, [sp, #4]
    1826:	4b0f      	ldr	r3, [pc, #60]	; (1864 <hal_i2c_wake+0xcc>)
    1828:	4798      	blx	r3
    }

    if (status != STATUS_OK)
    {
        return ATCA_COMM_FAIL;
    182a:	20f0      	movs	r0, #240	; 0xf0
    if (status != STATUS_OK)
    182c:	2d00      	cmp	r5, #0
    182e:	d00a      	beq.n	1846 <hal_i2c_wake+0xae>
    }

    return hal_check_wake(data, 4);
}
    1830:	b007      	add	sp, #28
    1832:	bc0c      	pop	{r2, r3}
    1834:	4690      	mov	r8, r2
    1836:	4699      	mov	r9, r3
    1838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (bdrt != 100000)
    183a:	4b09      	ldr	r3, [pc, #36]	; (1860 <hal_i2c_wake+0xc8>)
    183c:	4599      	cmp	r9, r3
    183e:	d0f4      	beq.n	182a <hal_i2c_wake+0x92>
    1840:	e7ef      	b.n	1822 <hal_i2c_wake+0x8a>
    int status = !STATUS_OK;
    1842:	2501      	movs	r5, #1
    1844:	e7ed      	b.n	1822 <hal_i2c_wake+0x8a>
    return hal_check_wake(data, 4);
    1846:	2104      	movs	r1, #4
    1848:	a805      	add	r0, sp, #20
    184a:	4b0b      	ldr	r3, [pc, #44]	; (1878 <hal_i2c_wake+0xe0>)
    184c:	4798      	blx	r3
    184e:	e7ef      	b.n	1830 <hal_i2c_wake+0x98>
    if (bdrt != 100000)
    1850:	4b03      	ldr	r3, [pc, #12]	; (1860 <hal_i2c_wake+0xc8>)
    1852:	4599      	cmp	r9, r3
    1854:	d1f5      	bne.n	1842 <hal_i2c_wake+0xaa>
        return ATCA_COMM_FAIL;
    1856:	20f0      	movs	r0, #240	; 0xf0
    1858:	e7ea      	b.n	1830 <hal_i2c_wake+0x98>
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	00000f19 	.word	0x00000f19
    1860:	000186a0 	.word	0x000186a0
    1864:	000016ad 	.word	0x000016ad
    1868:	20000a1c 	.word	0x20000a1c
    186c:	00005941 	.word	0x00005941
    1870:	00001949 	.word	0x00001949
    1874:	0000591d 	.word	0x0000591d
    1878:	00001381 	.word	0x00001381

0000187c <hal_i2c_idle>:
 * \param[in] iface  interface to logical device to idle
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_idle(ATCAIface iface)
{
    187c:	b500      	push	{lr}
    187e:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    1880:	4b10      	ldr	r3, [pc, #64]	; (18c4 <hal_i2c_idle+0x48>)
    1882:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    1884:	7903      	ldrb	r3, [r0, #4]
    1886:	085b      	lsrs	r3, r3, #1
    1888:	466a      	mov	r2, sp
    188a:	8013      	strh	r3, [r2, #0]
    188c:	2301      	movs	r3, #1
    188e:	8053      	strh	r3, [r2, #2]
    1890:	aa03      	add	r2, sp, #12
    1892:	9201      	str	r2, [sp, #4]
    1894:	2300      	movs	r3, #0
    1896:	4669      	mov	r1, sp
    1898:	720b      	strb	r3, [r1, #8]
    189a:	724b      	strb	r3, [r1, #9]
    189c:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x02;  // idle word address value
    189e:	3302      	adds	r3, #2
    18a0:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    18a2:	7943      	ldrb	r3, [r0, #5]
    18a4:	2034      	movs	r0, #52	; 0x34
    18a6:	4358      	muls	r0, r3
    18a8:	3004      	adds	r0, #4
    18aa:	4b07      	ldr	r3, [pc, #28]	; (18c8 <hal_i2c_idle+0x4c>)
    18ac:	1818      	adds	r0, r3, r0
    18ae:	4b07      	ldr	r3, [pc, #28]	; (18cc <hal_i2c_idle+0x50>)
    18b0:	4798      	blx	r3
    18b2:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    18b4:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    18b6:	1e5a      	subs	r2, r3, #1
    18b8:	4193      	sbcs	r3, r2
    18ba:	425b      	negs	r3, r3
    18bc:	4018      	ands	r0, r3

}
    18be:	b005      	add	sp, #20
    18c0:	bd00      	pop	{pc}
    18c2:	46c0      	nop			; (mov r8, r8)
    18c4:	00000f19 	.word	0x00000f19
    18c8:	20000a1c 	.word	0x20000a1c
    18cc:	00005941 	.word	0x00005941

000018d0 <hal_i2c_sleep>:
 * \param[in] iface  interface to logical device to sleep
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */

ATCA_STATUS hal_i2c_sleep(ATCAIface iface)
{
    18d0:	b500      	push	{lr}
    18d2:	b085      	sub	sp, #20
    ATCAIfaceCfg *cfg = atgetifacecfg(iface);
    18d4:	4b10      	ldr	r3, [pc, #64]	; (1918 <hal_i2c_sleep+0x48>)
    18d6:	4798      	blx	r3
    uint8_t data[4];

    struct i2c_master_packet packet = {
    18d8:	7903      	ldrb	r3, [r0, #4]
    18da:	085b      	lsrs	r3, r3, #1
    18dc:	466a      	mov	r2, sp
    18de:	8013      	strh	r3, [r2, #0]
    18e0:	2301      	movs	r3, #1
    18e2:	8053      	strh	r3, [r2, #2]
    18e4:	aa03      	add	r2, sp, #12
    18e6:	9201      	str	r2, [sp, #4]
    18e8:	2300      	movs	r3, #0
    18ea:	4669      	mov	r1, sp
    18ec:	720b      	strb	r3, [r1, #8]
    18ee:	724b      	strb	r3, [r1, #9]
    18f0:	728b      	strb	r3, [r1, #10]
        .ten_bit_address    = false,
        .high_speed         = false,
        .hs_master_code     = 0x0,
    };

    data[0] = 0x01;  // sleep word address value
    18f2:	2301      	movs	r3, #1
    18f4:	7013      	strb	r3, [r2, #0]
    if (i2c_master_write_packet_wait(&i2c_hal_data[cfg->atcai2c.bus].i2c_master_instance, &packet) != STATUS_OK)
    18f6:	7943      	ldrb	r3, [r0, #5]
    18f8:	2034      	movs	r0, #52	; 0x34
    18fa:	4358      	muls	r0, r3
    18fc:	3004      	adds	r0, #4
    18fe:	4b07      	ldr	r3, [pc, #28]	; (191c <hal_i2c_sleep+0x4c>)
    1900:	1818      	adds	r0, r3, r0
    1902:	4b07      	ldr	r3, [pc, #28]	; (1920 <hal_i2c_sleep+0x50>)
    1904:	4798      	blx	r3
    1906:	0003      	movs	r3, r0
    {
        return ATCA_COMM_FAIL;
    1908:	20f0      	movs	r0, #240	; 0xf0
    }

    return ATCA_SUCCESS;
    190a:	1e5a      	subs	r2, r3, #1
    190c:	4193      	sbcs	r3, r2
    190e:	425b      	negs	r3, r3
    1910:	4018      	ands	r0, r3
}
    1912:	b005      	add	sp, #20
    1914:	bd00      	pop	{pc}
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	00000f19 	.word	0x00000f19
    191c:	20000a1c 	.word	0x20000a1c
    1920:	00005941 	.word	0x00005941

00001924 <hal_i2c_release>:
 * \param[in] hal_data - opaque pointer to hal data structure - known only to the HAL implementation
 * return ATCA_SUCCESS
 */

ATCA_STATUS hal_i2c_release(void *hal_data)
{
    1924:	b510      	push	{r4, lr}
    1926:	1e04      	subs	r4, r0, #0
    ATCAI2CMaster_t *hal = (ATCAI2CMaster_t*)hal_data;

    // if the use count for this bus has gone to 0 references, disable it.  protect against an unbracketed release
    if (hal && --(hal->ref_ct) <= 0)
    1928:	d004      	beq.n	1934 <hal_i2c_release+0x10>
    192a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    192c:	3b01      	subs	r3, #1
    192e:	62c3      	str	r3, [r0, #44]	; 0x2c
    1930:	2b00      	cmp	r3, #0
    1932:	dd01      	ble.n	1938 <hal_i2c_release+0x14>
        i2c_master_reset(&(hal->i2c_master_instance));
        hal->ref_ct = 0;
    }

    return ATCA_SUCCESS;
}
    1934:	2000      	movs	r0, #0
    1936:	bd10      	pop	{r4, pc}
        i2c_master_reset(&(hal->i2c_master_instance));
    1938:	3004      	adds	r0, #4
    193a:	4b02      	ldr	r3, [pc, #8]	; (1944 <hal_i2c_release+0x20>)
    193c:	4798      	blx	r3
        hal->ref_ct = 0;
    193e:	2300      	movs	r3, #0
    1940:	62e3      	str	r3, [r4, #44]	; 0x2c
    1942:	e7f7      	b.n	1934 <hal_i2c_release+0x10>
    1944:	00005595 	.word	0x00005595

00001948 <atca_delay_us>:
/** \brief This function delays for a number of microseconds.
 *
 * \param[in] delay number of 0.001 milliseconds to delay
 */
void atca_delay_us(uint32_t delay)
{
    1948:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_us(delay);
    194a:	2800      	cmp	r0, #0
    194c:	d103      	bne.n	1956 <atca_delay_us+0xe>
    194e:	2001      	movs	r0, #1
    1950:	4b02      	ldr	r3, [pc, #8]	; (195c <atca_delay_us+0x14>)
    1952:	4798      	blx	r3
}
    1954:	bd10      	pop	{r4, pc}
    delay_us(delay);
    1956:	4b01      	ldr	r3, [pc, #4]	; (195c <atca_delay_us+0x14>)
    1958:	4798      	blx	r3
    195a:	e7fb      	b.n	1954 <atca_delay_us+0xc>
    195c:	00004525 	.word	0x00004525

00001960 <atca_delay_ms>:
 * \param[in] delay number of milliseconds to delay
 */

/* ASF already has delay_ms - see delay.h */
void atca_delay_ms(uint32_t delay)
{
    1960:	b510      	push	{r4, lr}
    // use ASF supplied delay
    delay_ms(delay);
    1962:	2800      	cmp	r0, #0
    1964:	d103      	bne.n	196e <atca_delay_ms+0xe>
    1966:	2001      	movs	r0, #1
    1968:	4b02      	ldr	r3, [pc, #8]	; (1974 <atca_delay_ms+0x14>)
    196a:	4798      	blx	r3
}
    196c:	bd10      	pop	{r4, pc}
    delay_ms(delay);
    196e:	4b02      	ldr	r3, [pc, #8]	; (1978 <atca_delay_ms+0x18>)
    1970:	4798      	blx	r3
    1972:	e7fb      	b.n	196c <atca_delay_ms+0xc>
    1974:	00004525 	.word	0x00004525
    1978:	00004551 	.word	0x00004551

0000197c <atcah_nonce>:
/** \brief This function calculates host side nonce with the parameters passed.
 *    \param[in, out] param pointer to parameter structure
 *   \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_nonce(struct atca_nonce_in_out *param)
{
    197c:	b5f0      	push	{r4, r5, r6, r7, lr}
    197e:	46c6      	mov	lr, r8
    1980:	b500      	push	{lr}
    1982:	b08e      	sub	sp, #56	; 0x38
    1984:	0004      	movs	r4, r0
    uint8_t temporary[ATCA_MSG_SIZE_NONCE];
    uint8_t *p_temp;
    uint8_t calc_mode = param->mode & NONCE_MODE_MASK;

    // Check parameters
    if (param->temp_key == NULL || param->num_in == NULL)
    1986:	68c5      	ldr	r5, [r0, #12]
    1988:	2d00      	cmp	r5, #0
    198a:	d050      	beq.n	1a2e <atcah_nonce+0xb2>
    198c:	6846      	ldr	r6, [r0, #4]
    198e:	2e00      	cmp	r6, #0
    1990:	d04f      	beq.n	1a32 <atcah_nonce+0xb6>
    uint8_t calc_mode = param->mode & NONCE_MODE_MASK;
    1992:	7807      	ldrb	r7, [r0, #0]
    {
        return ATCA_BAD_PARAM;
    }

    // Calculate or pass-through the nonce to TempKey->Value
    if ((calc_mode == NONCE_MODE_SEED_UPDATE) || (calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    1994:	2303      	movs	r3, #3
    1996:	403b      	ands	r3, r7
        param->temp_key->gen_dig_data = 0;
        param->temp_key->no_mac_flag = 0;
        param->temp_key->valid = 1;
    }

    return ATCA_SUCCESS;
    1998:	2000      	movs	r0, #0
    if ((calc_mode == NONCE_MODE_SEED_UPDATE) || (calc_mode == NONCE_MODE_NO_SEED_UPDATE))
    199a:	2b01      	cmp	r3, #1
    199c:	d903      	bls.n	19a6 <atcah_nonce+0x2a>
}
    199e:	b00e      	add	sp, #56	; 0x38
    19a0:	bc04      	pop	{r2}
    19a2:	4690      	mov	r8, r2
    19a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (param->rand_out == NULL)
    19a6:	68a1      	ldr	r1, [r4, #8]
    19a8:	2900      	cmp	r1, #0
    19aa:	d044      	beq.n	1a36 <atcah_nonce+0xba>
        if ((param->zero & NONCE_ZERO_CALC_MASK) == NONCE_ZERO_CALC_TEMPKEY)
    19ac:	2202      	movs	r2, #2
    19ae:	5ea3      	ldrsh	r3, [r4, r2]
    19b0:	2b00      	cmp	r3, #0
    19b2:	db37      	blt.n	1a24 <atcah_nonce+0xa8>
            memcpy(p_temp, param->rand_out, RANDOM_NUM_SIZE);
    19b4:	2220      	movs	r2, #32
    19b6:	4668      	mov	r0, sp
    19b8:	4b20      	ldr	r3, [pc, #128]	; (1a3c <atcah_nonce+0xc0>)
    19ba:	4698      	mov	r8, r3
    19bc:	4798      	blx	r3
            memcpy(p_temp, param->num_in, NONCE_NUMIN_SIZE);
    19be:	2214      	movs	r2, #20
    19c0:	0031      	movs	r1, r6
    19c2:	a808      	add	r0, sp, #32
    19c4:	47c0      	blx	r8
            *p_temp++ = ATCA_NONCE;
    19c6:	2216      	movs	r2, #22
    19c8:	2334      	movs	r3, #52	; 0x34
    19ca:	4669      	mov	r1, sp
    19cc:	54ca      	strb	r2, [r1, r3]
            *p_temp++ = param->mode;
    19ce:	3301      	adds	r3, #1
    19d0:	54cf      	strb	r7, [r1, r3]
            *p_temp++ = 0x00;
    19d2:	2200      	movs	r2, #0
    19d4:	3301      	adds	r3, #1
    19d6:	54ca      	strb	r2, [r1, r3]
            atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_NONCE, param->temp_key->value);
    19d8:	002a      	movs	r2, r5
    19da:	2137      	movs	r1, #55	; 0x37
    19dc:	4668      	mov	r0, sp
    19de:	4b18      	ldr	r3, [pc, #96]	; (1a40 <atcah_nonce+0xc4>)
    19e0:	4798      	blx	r3
            param->temp_key->source_flag = 0; // Random
    19e2:	68e1      	ldr	r1, [r4, #12]
    19e4:	2340      	movs	r3, #64	; 0x40
    19e6:	5cca      	ldrb	r2, [r1, r3]
    19e8:	2010      	movs	r0, #16
    19ea:	4382      	bics	r2, r0
    19ec:	54ca      	strb	r2, [r1, r3]
            param->temp_key->key_id = 0;
    19ee:	68e1      	ldr	r1, [r4, #12]
    19f0:	5cca      	ldrb	r2, [r1, r3]
    19f2:	3801      	subs	r0, #1
    19f4:	4382      	bics	r2, r0
    19f6:	54ca      	strb	r2, [r1, r3]
            param->temp_key->gen_dig_data = 0;
    19f8:	68e1      	ldr	r1, [r4, #12]
    19fa:	5cca      	ldrb	r2, [r1, r3]
    19fc:	3011      	adds	r0, #17
    19fe:	4382      	bics	r2, r0
    1a00:	54ca      	strb	r2, [r1, r3]
            param->temp_key->no_mac_flag = 0;
    1a02:	68e1      	ldr	r1, [r4, #12]
    1a04:	5cc8      	ldrb	r0, [r1, r3]
    1a06:	227f      	movs	r2, #127	; 0x7f
    1a08:	4002      	ands	r2, r0
    1a0a:	54ca      	strb	r2, [r1, r3]
            param->temp_key->valid = 1;
    1a0c:	68e3      	ldr	r3, [r4, #12]
    1a0e:	3340      	adds	r3, #64	; 0x40
    1a10:	785a      	ldrb	r2, [r3, #1]
    1a12:	2101      	movs	r1, #1
    1a14:	430a      	orrs	r2, r1
    1a16:	705a      	strb	r2, [r3, #1]
        param->temp_key->is_64 = 0;
    1a18:	68e2      	ldr	r2, [r4, #12]
    1a1a:	2100      	movs	r1, #0
    1a1c:	2342      	movs	r3, #66	; 0x42
    1a1e:	54d1      	strb	r1, [r2, r3]
    return ATCA_SUCCESS;
    1a20:	2000      	movs	r0, #0
    1a22:	e7bc      	b.n	199e <atcah_nonce+0x22>
            memcpy(param->temp_key->value, param->rand_out, 32);
    1a24:	2220      	movs	r2, #32
    1a26:	0028      	movs	r0, r5
    1a28:	4b04      	ldr	r3, [pc, #16]	; (1a3c <atcah_nonce+0xc0>)
    1a2a:	4798      	blx	r3
    1a2c:	e7f4      	b.n	1a18 <atcah_nonce+0x9c>
        return ATCA_BAD_PARAM;
    1a2e:	20e2      	movs	r0, #226	; 0xe2
    1a30:	e7b5      	b.n	199e <atcah_nonce+0x22>
    1a32:	20e2      	movs	r0, #226	; 0xe2
    1a34:	e7b3      	b.n	199e <atcah_nonce+0x22>
            return ATCA_BAD_PARAM;
    1a36:	20e2      	movs	r0, #226	; 0xe2
    1a38:	e7b1      	b.n	199e <atcah_nonce+0x22>
    1a3a:	46c0      	nop			; (mov r8, r8)
    1a3c:	00019d1d 	.word	0x00019d1d
    1a40:	00000fc1 	.word	0x00000fc1

00001a44 <atcah_gen_dig>:

 * \param[in, out] param pointer to parameter structure
 * \return ATCA_SUCCESS on success, otherwise an error code.
 */
ATCA_STATUS atcah_gen_dig(struct atca_gen_dig_in_out *param)
{
    1a44:	b530      	push	{r4, r5, lr}
    1a46:	b099      	sub	sp, #100	; 0x64
    1a48:	0004      	movs	r4, r0
    uint8_t temporary[ATCA_MSG_SIZE_GEN_DIG];
    uint8_t *p_temp;

    // Check parameters
    if (param->sn == NULL || param->temp_key == NULL)
    1a4a:	6883      	ldr	r3, [r0, #8]
    1a4c:	2b00      	cmp	r3, #0
    1a4e:	d100      	bne.n	1a52 <atcah_gen_dig+0xe>
    1a50:	e093      	b.n	1b7a <atcah_gen_dig+0x136>
    1a52:	6943      	ldr	r3, [r0, #20]
    1a54:	2b00      	cmp	r3, #0
    1a56:	d100      	bne.n	1a5a <atcah_gen_dig+0x16>
    1a58:	e092      	b.n	1b80 <atcah_gen_dig+0x13c>
    {
        return ATCA_BAD_PARAM;
    }
    if (param->zone != GENDIG_ZONE_SHARED_NONCE && param->stored_value == NULL)
    1a5a:	7805      	ldrb	r5, [r0, #0]
    1a5c:	2d03      	cmp	r5, #3
    1a5e:	d01c      	beq.n	1a9a <atcah_gen_dig+0x56>
    1a60:	68c3      	ldr	r3, [r0, #12]
    1a62:	2b00      	cmp	r3, #0
    1a64:	d100      	bne.n	1a68 <atcah_gen_dig+0x24>
    1a66:	e08d      	b.n	1b84 <atcah_gen_dig+0x140>
    {
        return ATCA_BAD_PARAM;  // Stored value can only be null with the shared_nonce mode
    }
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a68:	2d02      	cmp	r5, #2
    1a6a:	d004      	beq.n	1a76 <atcah_gen_dig+0x32>
    {
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    }
    if (param->zone > 5)
    {
        return ATCA_BAD_PARAM;  // Unknown zone
    1a6c:	20e2      	movs	r0, #226	; 0xe2
    if (param->zone > 5)
    1a6e:	2d05      	cmp	r5, #5
    1a70:	d900      	bls.n	1a74 <atcah_gen_dig+0x30>
    1a72:	e083      	b.n	1b7c <atcah_gen_dig+0x138>
    1a74:	e019      	b.n	1aaa <atcah_gen_dig+0x66>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a76:	7903      	ldrb	r3, [r0, #4]
    1a78:	2b00      	cmp	r3, #0
    1a7a:	d000      	beq.n	1a7e <atcah_gen_dig+0x3a>
    1a7c:	e086      	b.n	1b8c <atcah_gen_dig+0x148>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);
    }
    else
    {
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);
    1a7e:	2220      	movs	r2, #32
    1a80:	68e1      	ldr	r1, [r4, #12]
    1a82:	4668      	mov	r0, sp
    1a84:	4b44      	ldr	r3, [pc, #272]	; (1b98 <atcah_gen_dig+0x154>)
    1a86:	4798      	blx	r3
    }
    p_temp += ATCA_KEY_SIZE;

    if (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)
    1a88:	7923      	ldrb	r3, [r4, #4]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	d012      	beq.n	1ab4 <atcah_gen_dig+0x70>
    {
        // If a key has the SlotConfig.NoMac bit set, then opcode and parameters come from OtherData
        memcpy(p_temp, param->other_data, 4);
    1a8e:	2204      	movs	r2, #4
    1a90:	6921      	ldr	r1, [r4, #16]
    1a92:	a808      	add	r0, sp, #32
    1a94:	4b40      	ldr	r3, [pc, #256]	; (1b98 <atcah_gen_dig+0x154>)
    1a96:	4798      	blx	r3
        p_temp += 4;
    1a98:	e018      	b.n	1acc <atcah_gen_dig+0x88>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1a9a:	6901      	ldr	r1, [r0, #16]
    1a9c:	2900      	cmp	r1, #0
    1a9e:	d100      	bne.n	1aa2 <atcah_gen_dig+0x5e>
    1aa0:	e072      	b.n	1b88 <atcah_gen_dig+0x144>
    if (param->zone == GENDIG_ZONE_SHARED_NONCE && param->key_id & 0x8000)
    1aa2:	2202      	movs	r2, #2
    1aa4:	5e83      	ldrsh	r3, [r0, r2]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	db44      	blt.n	1b34 <atcah_gen_dig+0xf0>
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);
    1aaa:	2220      	movs	r2, #32
    1aac:	68e1      	ldr	r1, [r4, #12]
    1aae:	4668      	mov	r0, sp
    1ab0:	4b39      	ldr	r3, [pc, #228]	; (1b98 <atcah_gen_dig+0x154>)
    1ab2:	4798      	blx	r3
    }
    else
    {
        // (2) 1 byte Opcode
        *p_temp++ = ATCA_GENDIG;
    1ab4:	2215      	movs	r2, #21
    1ab6:	2320      	movs	r3, #32
    1ab8:	4669      	mov	r1, sp
    1aba:	54ca      	strb	r2, [r1, r3]

        // (3) 1 byte Param1 (zone)
        *p_temp++ = param->zone;
    1abc:	3301      	adds	r3, #1
    1abe:	54cd      	strb	r5, [r1, r3]

        // (4) 2 bytes Param2 (keyID)
        *p_temp++ = (uint8_t)(param->key_id & 0xFF);
    1ac0:	8863      	ldrh	r3, [r4, #2]
    1ac2:	2222      	movs	r2, #34	; 0x22
    1ac4:	548b      	strb	r3, [r1, r2]
        *p_temp++ = (uint8_t)(param->key_id >> 8);
    1ac6:	0a1b      	lsrs	r3, r3, #8
    1ac8:	3201      	adds	r2, #1
    1aca:	548b      	strb	r3, [r1, r2]
    }

    // (5) 1 byte SN[8]
    *p_temp++ = param->sn[8];
    1acc:	68a3      	ldr	r3, [r4, #8]
    1ace:	7a19      	ldrb	r1, [r3, #8]
    1ad0:	2224      	movs	r2, #36	; 0x24
    1ad2:	4668      	mov	r0, sp
    1ad4:	5481      	strb	r1, [r0, r2]

    // (6) 2 bytes SN[0:1]
    *p_temp++ = param->sn[0];
    1ad6:	7819      	ldrb	r1, [r3, #0]
    1ad8:	3201      	adds	r2, #1
    1ada:	5481      	strb	r1, [r0, r2]
    *p_temp++ = param->sn[1];
    1adc:	785a      	ldrb	r2, [r3, #1]
    1ade:	2326      	movs	r3, #38	; 0x26
    1ae0:	54c2      	strb	r2, [r0, r3]

    // (7) 25 zeros
    memset(p_temp, 0, ATCA_GENDIG_ZEROS_SIZE);
    1ae2:	2219      	movs	r2, #25
    1ae4:	2100      	movs	r1, #0
    1ae6:	2027      	movs	r0, #39	; 0x27
    1ae8:	4468      	add	r0, sp
    1aea:	4b2c      	ldr	r3, [pc, #176]	; (1b9c <atcah_gen_dig+0x158>)
    1aec:	4798      	blx	r3
    p_temp += ATCA_GENDIG_ZEROS_SIZE;

    if (param->zone == GENDIG_ZONE_SHARED_NONCE && !(param->key_id & 0x8000))
    1aee:	7823      	ldrb	r3, [r4, #0]
    1af0:	2b03      	cmp	r3, #3
    1af2:	d024      	beq.n	1b3e <atcah_gen_dig+0xfa>
    {
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // (8) 32 bytes OtherData
    }
    else
    {
        memcpy(p_temp, param->temp_key->value, ATCA_KEY_SIZE);  // (8) 32 bytes TempKey
    1af4:	2220      	movs	r2, #32
    1af6:	6961      	ldr	r1, [r4, #20]
    1af8:	a810      	add	r0, sp, #64	; 0x40
    1afa:	4b27      	ldr	r3, [pc, #156]	; (1b98 <atcah_gen_dig+0x154>)
    1afc:	4798      	blx	r3

    }
    // Calculate SHA256 to get the new TempKey
    atcac_sw_sha2_256(temporary, ATCA_MSG_SIZE_GEN_DIG, param->temp_key->value);
    1afe:	6962      	ldr	r2, [r4, #20]
    1b00:	2160      	movs	r1, #96	; 0x60
    1b02:	4668      	mov	r0, sp
    1b04:	4b26      	ldr	r3, [pc, #152]	; (1ba0 <atcah_gen_dig+0x15c>)
    1b06:	4798      	blx	r3

    // Update TempKey fields
    param->temp_key->valid = 1;
    1b08:	6963      	ldr	r3, [r4, #20]
    1b0a:	3340      	adds	r3, #64	; 0x40
    1b0c:	785a      	ldrb	r2, [r3, #1]
    1b0e:	2101      	movs	r1, #1
    1b10:	430a      	orrs	r2, r1
    1b12:	705a      	strb	r2, [r3, #1]

    if ((param->zone == GENDIG_ZONE_DATA) && (param->key_id <= 15))
    1b14:	7823      	ldrb	r3, [r4, #0]
    1b16:	2b02      	cmp	r3, #2
    1b18:	d01b      	beq.n	1b52 <atcah_gen_dig+0x10e>
        param->temp_key->gen_dig_data = 1;
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    }
    else
    {
        param->temp_key->gen_dig_data = 0;
    1b1a:	6961      	ldr	r1, [r4, #20]
    1b1c:	2340      	movs	r3, #64	; 0x40
    1b1e:	5cca      	ldrb	r2, [r1, r3]
    1b20:	2020      	movs	r0, #32
    1b22:	4382      	bics	r2, r0
    1b24:	54ca      	strb	r2, [r1, r3]
        param->temp_key->key_id = 0;
    1b26:	6961      	ldr	r1, [r4, #20]
    1b28:	5cca      	ldrb	r2, [r1, r3]
    1b2a:	3811      	subs	r0, #17
    1b2c:	4382      	bics	r2, r0
    1b2e:	54ca      	strb	r2, [r1, r3]
    }

    return ATCA_SUCCESS;
    1b30:	2000      	movs	r0, #0
    1b32:	e023      	b.n	1b7c <atcah_gen_dig+0x138>
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);
    1b34:	2220      	movs	r2, #32
    1b36:	4668      	mov	r0, sp
    1b38:	4b17      	ldr	r3, [pc, #92]	; (1b98 <atcah_gen_dig+0x154>)
    1b3a:	4798      	blx	r3
    1b3c:	e7ba      	b.n	1ab4 <atcah_gen_dig+0x70>
    if (param->zone == GENDIG_ZONE_SHARED_NONCE && !(param->key_id & 0x8000))
    1b3e:	2202      	movs	r2, #2
    1b40:	5ea3      	ldrsh	r3, [r4, r2]
    1b42:	2b00      	cmp	r3, #0
    1b44:	dbd6      	blt.n	1af4 <atcah_gen_dig+0xb0>
        memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // (8) 32 bytes OtherData
    1b46:	2220      	movs	r2, #32
    1b48:	6921      	ldr	r1, [r4, #16]
    1b4a:	a810      	add	r0, sp, #64	; 0x40
    1b4c:	4b12      	ldr	r3, [pc, #72]	; (1b98 <atcah_gen_dig+0x154>)
    1b4e:	4798      	blx	r3
    1b50:	e7d5      	b.n	1afe <atcah_gen_dig+0xba>
    if ((param->zone == GENDIG_ZONE_DATA) && (param->key_id <= 15))
    1b52:	8863      	ldrh	r3, [r4, #2]
    1b54:	2b0f      	cmp	r3, #15
    1b56:	d8e0      	bhi.n	1b1a <atcah_gen_dig+0xd6>
        param->temp_key->gen_dig_data = 1;
    1b58:	6961      	ldr	r1, [r4, #20]
    1b5a:	2240      	movs	r2, #64	; 0x40
    1b5c:	5c8b      	ldrb	r3, [r1, r2]
    1b5e:	2020      	movs	r0, #32
    1b60:	4303      	orrs	r3, r0
    1b62:	548b      	strb	r3, [r1, r2]
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    1b64:	6960      	ldr	r0, [r4, #20]
    1b66:	8861      	ldrh	r1, [r4, #2]
    1b68:	230f      	movs	r3, #15
    1b6a:	4019      	ands	r1, r3
    1b6c:	5c83      	ldrb	r3, [r0, r2]
    1b6e:	240f      	movs	r4, #15
    1b70:	43a3      	bics	r3, r4
    1b72:	430b      	orrs	r3, r1
    1b74:	5483      	strb	r3, [r0, r2]
    return ATCA_SUCCESS;
    1b76:	2000      	movs	r0, #0
        param->temp_key->key_id = (param->key_id & 0xF);    // mask lower 4-bit only
    1b78:	e000      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;
    1b7a:	20e2      	movs	r0, #226	; 0xe2
}
    1b7c:	b019      	add	sp, #100	; 0x64
    1b7e:	bd30      	pop	{r4, r5, pc}
        return ATCA_BAD_PARAM;
    1b80:	20e2      	movs	r0, #226	; 0xe2
    1b82:	e7fb      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;  // Stored value can only be null with the shared_nonce mode
    1b84:	20e2      	movs	r0, #226	; 0xe2
    1b86:	e7f9      	b.n	1b7c <atcah_gen_dig+0x138>
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    1b88:	20e2      	movs	r0, #226	; 0xe2
    1b8a:	e7f7      	b.n	1b7c <atcah_gen_dig+0x138>
    if ((param->zone == GENDIG_ZONE_SHARED_NONCE || (param->zone == GENDIG_ZONE_DATA && param->is_key_nomac)) && param->other_data == NULL)
    1b8c:	6903      	ldr	r3, [r0, #16]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d000      	beq.n	1b94 <atcah_gen_dig+0x150>
    1b92:	e774      	b.n	1a7e <atcah_gen_dig+0x3a>
        return ATCA_BAD_PARAM;  // Other data is required in these cases
    1b94:	20e2      	movs	r0, #226	; 0xe2
    1b96:	e7f1      	b.n	1b7c <atcah_gen_dig+0x138>
    1b98:	00019d1d 	.word	0x00019d1d
    1b9c:	00019e41 	.word	0x00019e41
    1ba0:	00000fc1 	.word	0x00000fc1

00001ba4 <parser_serial_data_handler>:
};

char aParserData[PARSER_MAX_DATA_LEN];

void parser_serial_data_handler(void)
{
    1ba4:	b510      	push	{r4, lr}
    int rxChar;
   /* verify if there was any character received*/
    if((-1) != (rxChar = sio2host_getchar_nowait()))
    1ba6:	4b05      	ldr	r3, [pc, #20]	; (1bbc <parser_serial_data_handler+0x18>)
    1ba8:	4798      	blx	r3
    1baa:	1c43      	adds	r3, r0, #1
    1bac:	d005      	beq.n	1bba <parser_serial_data_handler+0x16>
    {
        Parser_RxAddChar( (uint8_t)rxChar );
    1bae:	b2c0      	uxtb	r0, r0
    1bb0:	4b03      	ldr	r3, [pc, #12]	; (1bc0 <parser_serial_data_handler+0x1c>)
    1bb2:	4798      	blx	r3
        SYSTEM_PostTask(APP_TASK_ID);
    1bb4:	2010      	movs	r0, #16
    1bb6:	4b03      	ldr	r3, [pc, #12]	; (1bc4 <parser_serial_data_handler+0x20>)
    1bb8:	4798      	blx	r3
    }
}
    1bba:	bd10      	pop	{r4, pc}
    1bbc:	00007d2d 	.word	0x00007d2d
    1bc0:	00003fb9 	.word	0x00003fb9
    1bc4:	0000f435 	.word	0x0000f435

00001bc8 <Parser_Init>:

void Parser_Init(void)
{
    1bc8:	b510      	push	{r4, lr}
    1bca:	b086      	sub	sp, #24
    Parser_RxClearBuffer();
    1bcc:	4b08      	ldr	r3, [pc, #32]	; (1bf0 <Parser_Init+0x28>)
    1bce:	4798      	blx	r3
    /* Initialize LoRaWAN stack */
    Parser_LorawanInit();
    1bd0:	4b08      	ldr	r3, [pc, #32]	; (1bf4 <Parser_Init+0x2c>)
    1bd2:	4798      	blx	r3
	
	{
		PdsFileMarks_t appFileMarks;
		appFileMarks.fileMarkListAddr = appPdsFileOps;
    1bd4:	ab02      	add	r3, sp, #8
		appFileMarks.numItems = (uint8_t)(PDS_APP_FILEID_MAX_VALUE & 0x00FF);
    1bd6:	2201      	movs	r2, #1
    1bd8:	711a      	strb	r2, [r3, #4]
		appFileMarks.itemListAddr = appPdsFileItemList;
		appFileMarks.fIDcb = NULL;
    1bda:	2200      	movs	r2, #0
		PDS_RegFile(PDS_FILE_APP_DATA1_13_IDX, appFileMarks);
    1bdc:	9200      	str	r2, [sp, #0]
    1bde:	4906      	ldr	r1, [pc, #24]	; (1bf8 <Parser_Init+0x30>)
    1be0:	9a03      	ldr	r2, [sp, #12]
    1be2:	4b06      	ldr	r3, [pc, #24]	; (1bfc <Parser_Init+0x34>)
    1be4:	200c      	movs	r0, #12
    1be6:	4c06      	ldr	r4, [pc, #24]	; (1c00 <Parser_Init+0x38>)
    1be8:	47a0      	blx	r4
	}
}
    1bea:	b006      	add	sp, #24
    1bec:	bd10      	pop	{r4, pc}
    1bee:	46c0      	nop			; (mov r8, r8)
    1bf0:	00003f31 	.word	0x00003f31
    1bf4:	00002241 	.word	0x00002241
    1bf8:	20001384 	.word	0x20001384
    1bfc:	20000000 	.word	0x20000000
    1c00:	0000e355 	.word	0x0000e355

00001c04 <Parser_Main>:

void Parser_Main (void)
{
    1c04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c06:	46de      	mov	lr, fp
    1c08:	4657      	mov	r7, sl
    1c0a:	464e      	mov	r6, r9
    1c0c:	4645      	mov	r5, r8
    1c0e:	b5e0      	push	{r5, r6, r7, lr}
    1c10:	b08b      	sub	sp, #44	; 0x2c
    uint8_t cmdTotalNb;
    uint8_t startCmdSize = gParserStartCmdSize;
    1c12:	4b83      	ldr	r3, [pc, #524]	; (1e20 <Parser_Main+0x21c>)
    1c14:	781b      	ldrb	r3, [r3, #0]
    1c16:	4698      	mov	r8, r3
    const parserCmdEntry_t* pStartCmd = gpParserStartCmd;
    1c18:	4b82      	ldr	r3, [pc, #520]	; (1e24 <Parser_Main+0x220>)
    1c1a:	681b      	ldr	r3, [r3, #0]
    1c1c:	9301      	str	r3, [sp, #4]
    uint8_t savedCmdIdx;
    parserCmdEntry_t tempCmd;

    /* verify if there was any character received */
    int rxChar;
    while((-1) != (rxChar = sio2host_getchar_nowait()))
    1c1e:	4c82      	ldr	r4, [pc, #520]	; (1e28 <Parser_Main+0x224>)
    {
        Parser_RxAddChar( (uint8_t)rxChar );
    1c20:	4d82      	ldr	r5, [pc, #520]	; (1e2c <Parser_Main+0x228>)
    while((-1) != (rxChar = sio2host_getchar_nowait()))
    1c22:	e001      	b.n	1c28 <Parser_Main+0x24>
        Parser_RxAddChar( (uint8_t)rxChar );
    1c24:	b2c0      	uxtb	r0, r0
    1c26:	47a8      	blx	r5
    while((-1) != (rxChar = sio2host_getchar_nowait()))
    1c28:	47a0      	blx	r4
    1c2a:	1c43      	adds	r3, r0, #1
    1c2c:	d1fa      	bne.n	1c24 <Parser_Main+0x20>
    }

    /* Verify if an entire command is received */
    if(mRxParserCmd.bCmdStatus)
    1c2e:	4b80      	ldr	r3, [pc, #512]	; (1e30 <Parser_Main+0x22c>)
    1c30:	4a80      	ldr	r2, [pc, #512]	; (1e34 <Parser_Main+0x230>)
    1c32:	5cd3      	ldrb	r3, [r2, r3]
    1c34:	2b00      	cmp	r3, #0
    1c36:	d100      	bne.n	1c3a <Parser_Main+0x36>
    1c38:	e0d7      	b.n	1dea <Parser_Main+0x1e6>
    {
        cmdTotalNb = mRxParserCmd.crtWordIdx + 1;
    1c3a:	4b7f      	ldr	r3, [pc, #508]	; (1e38 <Parser_Main+0x234>)
    1c3c:	5cd3      	ldrb	r3, [r2, r3]
    1c3e:	3301      	adds	r3, #1
    1c40:	b2db      	uxtb	r3, r3
    1c42:	469a      	mov	sl, r3
        crtWordIdx = 0;

        while(cmdTotalNb)
    1c44:	2b00      	cmp	r3, #0
    1c46:	d100      	bne.n	1c4a <Parser_Main+0x46>
    1c48:	e0cd      	b.n	1de6 <Parser_Main+0x1e2>
    1c4a:	2300      	movs	r3, #0
    1c4c:	469b      	mov	fp, r3

    /* Validate and find the group command */
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    {
        parserCmdEntry = *(pParserCmd + cmdCtr);
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
    1c4e:	4691      	mov	r9, r2
    1c50:	4f7a      	ldr	r7, [pc, #488]	; (1e3c <Parser_Main+0x238>)
    1c52:	4646      	mov	r6, r8
    1c54:	46d8      	mov	r8, fp
    1c56:	46d3      	mov	fp, sl
    1c58:	e01b      	b.n	1c92 <Parser_Main+0x8e>
    1c5a:	4656      	mov	r6, sl
            /* Command found */
            break;
        }
    }

    if(cmdCtr < nbParserCmd)
    1c5c:	42a6      	cmp	r6, r4
    1c5e:	d800      	bhi.n	1c62 <Parser_Main+0x5e>
    1c60:	e0c1      	b.n	1de6 <Parser_Main+0x1e2>
    {
        if(parserCmdEntry.pNextParserCmd == NULL)
    1c62:	9b00      	ldr	r3, [sp, #0]
    1c64:	685b      	ldr	r3, [r3, #4]
    1c66:	9303      	str	r3, [sp, #12]
    1c68:	2b00      	cmp	r3, #0
    1c6a:	d02f      	beq.n	1ccc <Parser_Main+0xc8>
                tempCmd = *(pStartCmd + savedCmdIdx);
    1c6c:	0124      	lsls	r4, r4, #4
    1c6e:	9b01      	ldr	r3, [sp, #4]
    1c70:	469c      	mov	ip, r3
    1c72:	4464      	add	r4, ip
                crtWordIdx ++;
    1c74:	4643      	mov	r3, r8
    1c76:	3301      	adds	r3, #1
    1c78:	b2db      	uxtb	r3, r3
    1c7a:	4698      	mov	r8, r3
                cmdTotalNb --;
    1c7c:	465b      	mov	r3, fp
    1c7e:	3b01      	subs	r3, #1
    1c80:	b2db      	uxtb	r3, r3
    1c82:	469b      	mov	fp, r3
                startCmdSize = tempCmd.nextParserCmdSize;
    1c84:	7b26      	ldrb	r6, [r4, #12]
                pStartCmd = tempCmd.pNextParserCmd;
    1c86:	6863      	ldr	r3, [r4, #4]
    1c88:	9301      	str	r3, [sp, #4]
        while(cmdTotalNb)
    1c8a:	465b      	mov	r3, fp
    1c8c:	2b00      	cmp	r3, #0
    1c8e:	d100      	bne.n	1c92 <Parser_Main+0x8e>
    1c90:	e0a9      	b.n	1de6 <Parser_Main+0x1e2>
    parserCmdInfo.pReplyCmd = NULL; // (char*)gapParserStatus[INVALID_PARAM_IDX]; /* Reply with error by default */;
    1c92:	2300      	movs	r3, #0
    1c94:	9309      	str	r3, [sp, #36]	; 0x24
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    1c96:	2e00      	cmp	r6, #0
    1c98:	d100      	bne.n	1c9c <Parser_Main+0x98>
    1c9a:	e0a4      	b.n	1de6 <Parser_Main+0x1e2>
    1c9c:	9d01      	ldr	r5, [sp, #4]
    1c9e:	2400      	movs	r4, #0
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
    1ca0:	4643      	mov	r3, r8
    1ca2:	9302      	str	r3, [sp, #8]
    1ca4:	331d      	adds	r3, #29
    1ca6:	33ff      	adds	r3, #255	; 0xff
    1ca8:	005b      	lsls	r3, r3, #1
    1caa:	444b      	add	r3, r9
    1cac:	3302      	adds	r3, #2
    1cae:	46b2      	mov	sl, r6
    1cb0:	001e      	movs	r6, r3
        parserCmdEntry = *(pParserCmd + cmdCtr);
    1cb2:	9500      	str	r5, [sp, #0]
        if(strcmp(parserCmdEntry.pCommand, (char*)&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx]]) == 0U)
    1cb4:	8831      	ldrh	r1, [r6, #0]
    1cb6:	4449      	add	r1, r9
    1cb8:	6828      	ldr	r0, [r5, #0]
    1cba:	47b8      	blx	r7
    1cbc:	2800      	cmp	r0, #0
    1cbe:	d0cc      	beq.n	1c5a <Parser_Main+0x56>
    for(cmdCtr = 0; cmdCtr < nbParserCmd; cmdCtr ++)
    1cc0:	3401      	adds	r4, #1
    1cc2:	b2e4      	uxtb	r4, r4
    1cc4:	3510      	adds	r5, #16
    1cc6:	4554      	cmp	r4, sl
    1cc8:	d1f3      	bne.n	1cb2 <Parser_Main+0xae>
    1cca:	e08c      	b.n	1de6 <Parser_Main+0x1e2>
    1ccc:	46c3      	mov	fp, r8
        parserCmdEntry = *(pParserCmd + cmdCtr);
    1cce:	9b00      	ldr	r3, [sp, #0]
    1cd0:	689c      	ldr	r4, [r3, #8]
        {
            /* No other commands, just execute the callback */
            if(parserCmdEntry.pActionCbFct)
    1cd2:	2c00      	cmp	r4, #0
    1cd4:	d100      	bne.n	1cd8 <Parser_Main+0xd4>
    1cd6:	e086      	b.n	1de6 <Parser_Main+0x1e2>
        parserCmdEntry = *(pParserCmd + cmdCtr);
    1cd8:	7b5a      	ldrb	r2, [r3, #13]
            {
                if((mRxParserCmd.crtWordIdx - rxCmdIdx) == parserCmdEntry.flags)
    1cda:	4b57      	ldr	r3, [pc, #348]	; (1e38 <Parser_Main+0x234>)
    1cdc:	4955      	ldr	r1, [pc, #340]	; (1e34 <Parser_Main+0x230>)
    1cde:	5ccb      	ldrb	r3, [r1, r3]
    1ce0:	9902      	ldr	r1, [sp, #8]
    1ce2:	1a5b      	subs	r3, r3, r1
    1ce4:	4293      	cmp	r3, r2
    1ce6:	d000      	beq.n	1cea <Parser_Main+0xe6>
    1ce8:	e07d      	b.n	1de6 <Parser_Main+0x1e2>
                {
                    uint8_t iCtr = rxCmdIdx + 1;
                    bool bInvalidParam = false;
                    if(parserCmdEntry.flags > 0)
    1cea:	2a00      	cmp	r2, #0
    1cec:	d014      	beq.n	1d18 <Parser_Main+0x114>
                    uint8_t iCtr = rxCmdIdx + 1;
    1cee:	4643      	mov	r3, r8
    1cf0:	3301      	adds	r3, #1
    1cf2:	b2db      	uxtb	r3, r3
                    {
                        do
                        {
                            //Make sure that the parameters are not empty
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
    1cf4:	4e4f      	ldr	r6, [pc, #316]	; (1e34 <Parser_Main+0x230>)
                            {
                                bInvalidParam = true;
                                break;
                            }
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
    1cf6:	0035      	movs	r5, r6
    1cf8:	484f      	ldr	r0, [pc, #316]	; (1e38 <Parser_Main+0x234>)
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
    1cfa:	1c59      	adds	r1, r3, #1
    1cfc:	b2c9      	uxtb	r1, r1
    1cfe:	3311      	adds	r3, #17
    1d00:	33ff      	adds	r3, #255	; 0xff
    1d02:	005b      	lsls	r3, r3, #1
    1d04:	18f3      	adds	r3, r6, r3
    1d06:	88db      	ldrh	r3, [r3, #6]
    1d08:	b29b      	uxth	r3, r3
    1d0a:	2b00      	cmp	r3, #0
    1d0c:	d06b      	beq.n	1de6 <Parser_Main+0x1e2>
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
    1d0e:	5c2a      	ldrb	r2, [r5, r0]
    1d10:	b2d2      	uxtb	r2, r2
                            if(mRxParserCmd.wordLen[iCtr ++] == 0)
    1d12:	000b      	movs	r3, r1
                        }while(iCtr <= mRxParserCmd.crtWordIdx);
    1d14:	4291      	cmp	r1, r2
    1d16:	d9f0      	bls.n	1cfa <Parser_Main+0xf6>
                    }

                    if(bInvalidParam == false)
                    {
                        memset(&parserCmdInfo, 0, sizeof(parserCmdInfo_t));
    1d18:	2218      	movs	r2, #24
    1d1a:	2100      	movs	r1, #0
    1d1c:	a804      	add	r0, sp, #16
    1d1e:	4b48      	ldr	r3, [pc, #288]	; (1e40 <Parser_Main+0x23c>)
    1d20:	4798      	blx	r3

                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
    1d22:	465a      	mov	r2, fp
    1d24:	465b      	mov	r3, fp
    1d26:	3301      	adds	r3, #1
    1d28:	2b09      	cmp	r3, #9
    1d2a:	d965      	bls.n	1df8 <Parser_Main+0x1f4>
                        {
                            parserCmdInfo.pParam1 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 1]]);
                        }

                        if((rxCmdIdx + 2U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 2U] > 0U))
    1d2c:	1c93      	adds	r3, r2, #2
    1d2e:	2b09      	cmp	r3, #9
    1d30:	d810      	bhi.n	1d54 <Parser_Main+0x150>
    1d32:	3311      	adds	r3, #17
    1d34:	33ff      	adds	r3, #255	; 0xff
    1d36:	005b      	lsls	r3, r3, #1
    1d38:	493e      	ldr	r1, [pc, #248]	; (1e34 <Parser_Main+0x230>)
    1d3a:	18cb      	adds	r3, r1, r3
    1d3c:	88db      	ldrh	r3, [r3, #6]
    1d3e:	b29b      	uxth	r3, r3
    1d40:	2b00      	cmp	r3, #0
    1d42:	d007      	beq.n	1d54 <Parser_Main+0x150>
                        {
                            parserCmdInfo.pParam2 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 2]]);
    1d44:	9b02      	ldr	r3, [sp, #8]
    1d46:	331f      	adds	r3, #31
    1d48:	33ff      	adds	r3, #255	; 0xff
    1d4a:	005b      	lsls	r3, r3, #1
    1d4c:	18cb      	adds	r3, r1, r3
    1d4e:	885b      	ldrh	r3, [r3, #2]
    1d50:	18c9      	adds	r1, r1, r3
    1d52:	9105      	str	r1, [sp, #20]
                        }

                        if((rxCmdIdx + 3U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 3U] > 0U))
    1d54:	1cd3      	adds	r3, r2, #3
    1d56:	2b09      	cmp	r3, #9
    1d58:	d810      	bhi.n	1d7c <Parser_Main+0x178>
    1d5a:	3311      	adds	r3, #17
    1d5c:	33ff      	adds	r3, #255	; 0xff
    1d5e:	005b      	lsls	r3, r3, #1
    1d60:	4934      	ldr	r1, [pc, #208]	; (1e34 <Parser_Main+0x230>)
    1d62:	18cb      	adds	r3, r1, r3
    1d64:	88db      	ldrh	r3, [r3, #6]
    1d66:	b29b      	uxth	r3, r3
    1d68:	2b00      	cmp	r3, #0
    1d6a:	d007      	beq.n	1d7c <Parser_Main+0x178>
                        {
                            parserCmdInfo.pParam3 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 3]]);
    1d6c:	9b02      	ldr	r3, [sp, #8]
    1d6e:	3320      	adds	r3, #32
    1d70:	33ff      	adds	r3, #255	; 0xff
    1d72:	005b      	lsls	r3, r3, #1
    1d74:	18cb      	adds	r3, r1, r3
    1d76:	885b      	ldrh	r3, [r3, #2]
    1d78:	18c9      	adds	r1, r1, r3
    1d7a:	9106      	str	r1, [sp, #24]
                        }

                        if((rxCmdIdx + 4U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 4U] > 0U))
    1d7c:	1d13      	adds	r3, r2, #4
    1d7e:	2b09      	cmp	r3, #9
    1d80:	d810      	bhi.n	1da4 <Parser_Main+0x1a0>
    1d82:	3311      	adds	r3, #17
    1d84:	33ff      	adds	r3, #255	; 0xff
    1d86:	005b      	lsls	r3, r3, #1
    1d88:	492a      	ldr	r1, [pc, #168]	; (1e34 <Parser_Main+0x230>)
    1d8a:	18cb      	adds	r3, r1, r3
    1d8c:	88db      	ldrh	r3, [r3, #6]
    1d8e:	b29b      	uxth	r3, r3
    1d90:	2b00      	cmp	r3, #0
    1d92:	d007      	beq.n	1da4 <Parser_Main+0x1a0>
                        {
                            parserCmdInfo.pParam4 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 4]]);
    1d94:	9b02      	ldr	r3, [sp, #8]
    1d96:	3321      	adds	r3, #33	; 0x21
    1d98:	33ff      	adds	r3, #255	; 0xff
    1d9a:	005b      	lsls	r3, r3, #1
    1d9c:	18cb      	adds	r3, r1, r3
    1d9e:	885b      	ldrh	r3, [r3, #2]
    1da0:	18c9      	adds	r1, r1, r3
    1da2:	9107      	str	r1, [sp, #28]
                        }

                        if((rxCmdIdx + 5U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 5U] > 0U))
    1da4:	3205      	adds	r2, #5
    1da6:	2a09      	cmp	r2, #9
    1da8:	d811      	bhi.n	1dce <Parser_Main+0x1ca>
    1daa:	3211      	adds	r2, #17
    1dac:	32ff      	adds	r2, #255	; 0xff
    1dae:	0052      	lsls	r2, r2, #1
    1db0:	4b20      	ldr	r3, [pc, #128]	; (1e34 <Parser_Main+0x230>)
    1db2:	189a      	adds	r2, r3, r2
    1db4:	88d3      	ldrh	r3, [r2, #6]
    1db6:	b29b      	uxth	r3, r3
    1db8:	2b00      	cmp	r3, #0
    1dba:	d008      	beq.n	1dce <Parser_Main+0x1ca>
                        {
                            parserCmdInfo.pParam5 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 5]]);
    1dbc:	4a1d      	ldr	r2, [pc, #116]	; (1e34 <Parser_Main+0x230>)
    1dbe:	9b02      	ldr	r3, [sp, #8]
    1dc0:	3322      	adds	r3, #34	; 0x22
    1dc2:	33ff      	adds	r3, #255	; 0xff
    1dc4:	005b      	lsls	r3, r3, #1
    1dc6:	18d3      	adds	r3, r2, r3
    1dc8:	885b      	ldrh	r3, [r3, #2]
    1dca:	18d2      	adds	r2, r2, r3
    1dcc:	9208      	str	r2, [sp, #32]
                        }

                        /* Execute callback */
                        parserCmdEntry.pActionCbFct(&parserCmdInfo);
    1dce:	a804      	add	r0, sp, #16
    1dd0:	47a0      	blx	r4
            /* DO not send a reply yet */
            parserCmdInfo.pReplyCmd = NULL;
        }
    }

    if(parserCmdInfo.pReplyCmd)
    1dd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    1dd4:	2c00      	cmp	r4, #0
    1dd6:	d006      	beq.n	1de6 <Parser_Main+0x1e2>
    {
        Parser_TxAddReply(parserCmdInfo.pReplyCmd, strlen(parserCmdInfo.pReplyCmd));
    1dd8:	0020      	movs	r0, r4
    1dda:	4b1a      	ldr	r3, [pc, #104]	; (1e44 <Parser_Main+0x240>)
    1ddc:	4798      	blx	r3
    1dde:	b281      	uxth	r1, r0
    1de0:	0020      	movs	r0, r4
    1de2:	4b19      	ldr	r3, [pc, #100]	; (1e48 <Parser_Main+0x244>)
    1de4:	4798      	blx	r3
        Parser_RxClearBuffer();
    1de6:	4b19      	ldr	r3, [pc, #100]	; (1e4c <Parser_Main+0x248>)
    1de8:	4798      	blx	r3
}
    1dea:	b00b      	add	sp, #44	; 0x2c
    1dec:	bc3c      	pop	{r2, r3, r4, r5}
    1dee:	4690      	mov	r8, r2
    1df0:	4699      	mov	r9, r3
    1df2:	46a2      	mov	sl, r4
    1df4:	46ab      	mov	fp, r5
    1df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if((rxCmdIdx + 1U < PARSER_DEF_CMD_MAX_IDX) && (mRxParserCmd.wordLen[rxCmdIdx + 1U] > 0U))
    1df8:	3311      	adds	r3, #17
    1dfa:	33ff      	adds	r3, #255	; 0xff
    1dfc:	005b      	lsls	r3, r3, #1
    1dfe:	490d      	ldr	r1, [pc, #52]	; (1e34 <Parser_Main+0x230>)
    1e00:	18cb      	adds	r3, r1, r3
    1e02:	88db      	ldrh	r3, [r3, #6]
    1e04:	b29b      	uxth	r3, r3
    1e06:	2b00      	cmp	r3, #0
    1e08:	d100      	bne.n	1e0c <Parser_Main+0x208>
    1e0a:	e78f      	b.n	1d2c <Parser_Main+0x128>
                            parserCmdInfo.pParam1 = (char*)(&mRxParserCmd.cmd[mRxParserCmd.wordStartPos[rxCmdIdx + 1]]);
    1e0c:	9b02      	ldr	r3, [sp, #8]
    1e0e:	331e      	adds	r3, #30
    1e10:	33ff      	adds	r3, #255	; 0xff
    1e12:	005b      	lsls	r3, r3, #1
    1e14:	18cb      	adds	r3, r1, r3
    1e16:	885b      	ldrh	r3, [r3, #2]
    1e18:	18c9      	adds	r1, r1, r3
    1e1a:	9104      	str	r1, [sp, #16]
    1e1c:	e786      	b.n	1d2c <Parser_Main+0x128>
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	0001eb69 	.word	0x0001eb69
    1e24:	20000008 	.word	0x20000008
    1e28:	00007d2d 	.word	0x00007d2d
    1e2c:	00003fb9 	.word	0x00003fb9
    1e30:	0000024e 	.word	0x0000024e
    1e34:	20001f98 	.word	0x20001f98
    1e38:	0000024f 	.word	0x0000024f
    1e3c:	0001a1ed 	.word	0x0001a1ed
    1e40:	00019e41 	.word	0x00019e41
    1e44:	0001a275 	.word	0x0001a275
    1e48:	00003f7d 	.word	0x00003f7d
    1e4c:	00003f31 	.word	0x00003f31

00001e50 <Parser_GetCustomID>:
{
    1e50:	b500      	push	{lr}
    1e52:	b083      	sub	sp, #12
    1e54:	0002      	movs	r2, r0
		const uint32_t mask)
{
	/* Sanity check arguments */
	Assert(port);

	return (port->IN.reg & mask);
    1e56:	4b08      	ldr	r3, [pc, #32]	; (1e78 <Parser_GetCustomID+0x28>)
    1e58:	6a1b      	ldr	r3, [r3, #32]
    1e5a:	4908      	ldr	r1, [pc, #32]	; (1e7c <Parser_GetCustomID+0x2c>)
    1e5c:	400b      	ands	r3, r1
	pinLevels[0] = pinLevels32 & 0xff;
    1e5e:	a901      	add	r1, sp, #4
    1e60:	700b      	strb	r3, [r1, #0]
	pinLevels[1] = (pinLevels32>>8) & 0xff;
    1e62:	0a18      	lsrs	r0, r3, #8
    1e64:	7048      	strb	r0, [r1, #1]
	pinLevels[2] = (pinLevels32>>16) & 0xff;
    1e66:	0c18      	lsrs	r0, r3, #16
    1e68:	7088      	strb	r0, [r1, #2]
	pinLevels[3] = (pinLevels32>>24) & 0xff;
    1e6a:	0e1b      	lsrs	r3, r3, #24
    1e6c:	70cb      	strb	r3, [r1, #3]
	Parser_IntArrayToHexAscii(4, pinLevels, pBuffData);
    1e6e:	2004      	movs	r0, #4
    1e70:	4b03      	ldr	r3, [pc, #12]	; (1e80 <Parser_GetCustomID+0x30>)
    1e72:	4798      	blx	r3
}
    1e74:	b003      	add	sp, #12
    1e76:	bd00      	pop	{pc}
    1e78:	40002800 	.word	0x40002800
    1e7c:	01833018 	.word	0x01833018
    1e80:	00004175 	.word	0x00004175

00001e84 <Parser_GetSwVersion>:
{
    1e84:	b570      	push	{r4, r5, r6, lr}
    1e86:	0004      	movs	r4, r0
    memcpy(pBuffData, HW_STR, sizeof(HW_STR));
    1e88:	220b      	movs	r2, #11
    1e8a:	490d      	ldr	r1, [pc, #52]	; (1ec0 <Parser_GetSwVersion+0x3c>)
    1e8c:	4d0d      	ldr	r5, [pc, #52]	; (1ec4 <Parser_GetSwVersion+0x40>)
    1e8e:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) - 1] = ' ';
    1e90:	2620      	movs	r6, #32
    1e92:	72a6      	strb	r6, [r4, #10]
    memcpy(&pBuffData[sizeof(HW_STR)], VER_STR, sizeof(VER_STR));
    1e94:	0020      	movs	r0, r4
    1e96:	300b      	adds	r0, #11
    1e98:	2210      	movs	r2, #16
    1e9a:	490b      	ldr	r1, [pc, #44]	; (1ec8 <Parser_GetSwVersion+0x44>)
    1e9c:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) - 1] = ' ';
    1e9e:	76a6      	strb	r6, [r4, #26]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR)], __DATE__, sizeof(__DATE__));
    1ea0:	0020      	movs	r0, r4
    1ea2:	301b      	adds	r0, #27
    1ea4:	220c      	movs	r2, #12
    1ea6:	4909      	ldr	r1, [pc, #36]	; (1ecc <Parser_GetSwVersion+0x48>)
    1ea8:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) - 1] = ' ';
    1eaa:	2326      	movs	r3, #38	; 0x26
    1eac:	54e6      	strb	r6, [r4, r3]
    memcpy(&pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__)], __TIME__, sizeof(__TIME__));
    1eae:	0020      	movs	r0, r4
    1eb0:	3027      	adds	r0, #39	; 0x27
    1eb2:	2209      	movs	r2, #9
    1eb4:	4906      	ldr	r1, [pc, #24]	; (1ed0 <Parser_GetSwVersion+0x4c>)
    1eb6:	47a8      	blx	r5
    pBuffData[sizeof(HW_STR) + sizeof(VER_STR) + sizeof(__DATE__) + sizeof(__TIME__)] = '\0';
    1eb8:	2200      	movs	r2, #0
    1eba:	2330      	movs	r3, #48	; 0x30
    1ebc:	54e2      	strb	r2, [r4, r3]
}
    1ebe:	bd70      	pop	{r4, r5, r6, pc}
    1ec0:	0001eb38 	.word	0x0001eb38
    1ec4:	00019d1d 	.word	0x00019d1d
    1ec8:	0001eb44 	.word	0x0001eb44
    1ecc:	0001eb54 	.word	0x0001eb54
    1ed0:	0001eb60 	.word	0x0001eb60

00001ed4 <ParserJoinData>:
	
	appHandle = NULL;
}

static void ParserJoinData(StackRetStatus_t status)
{
    1ed4:	b510      	push	{r4, lr}
    uint8_t statusIdx = JOIN_DENY_STR_IDX;

    //TODO: make sure this does not interfere with the receiving commands

    //This is called every time the join process is finished
    if(LORAWAN_SUCCESS == status)
    1ed6:	2808      	cmp	r0, #8
    1ed8:	d012      	beq.n	1f00 <ParserJoinData+0x2c>
    {
        //Sucessful join
        statusIdx = JOIN_ACCEPT_STR_IDX;
    }
	else if (LORAWAN_NO_CHANNELS_FOUND == status)
    1eda:	2810      	cmp	r0, #16
    1edc:	d012      	beq.n	1f04 <ParserJoinData+0x30>
	{
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
	}
	else if (LORAWAN_TX_TIMEOUT == status)
    1ede:	281b      	cmp	r0, #27
    1ee0:	d012      	beq.n	1f08 <ParserJoinData+0x34>
	{
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
	}
	else if (LORAWAN_MIC_ERROR == status)
	{
		statusIdx = JOIN_MIC_ERROR_STR_IDX;
    1ee2:	3818      	subs	r0, #24
    1ee4:	4243      	negs	r3, r0
    1ee6:	4158      	adcs	r0, r3
    1ee8:	0080      	lsls	r0, r0, #2
	}
				
    Parser_TxAddReply((char*)gapParseJoinStatus[statusIdx], strlen((char*)gapParseJoinStatus[statusIdx]));
    1eea:	0080      	lsls	r0, r0, #2
    1eec:	4b07      	ldr	r3, [pc, #28]	; (1f0c <ParserJoinData+0x38>)
    1eee:	58c4      	ldr	r4, [r0, r3]
    1ef0:	0020      	movs	r0, r4
    1ef2:	4b07      	ldr	r3, [pc, #28]	; (1f10 <ParserJoinData+0x3c>)
    1ef4:	4798      	blx	r3
    1ef6:	b281      	uxth	r1, r0
    1ef8:	0020      	movs	r0, r4
    1efa:	4b06      	ldr	r3, [pc, #24]	; (1f14 <ParserJoinData+0x40>)
    1efc:	4798      	blx	r3
}
    1efe:	bd10      	pop	{r4, pc}
        statusIdx = JOIN_ACCEPT_STR_IDX;
    1f00:	2001      	movs	r0, #1
    1f02:	e7f2      	b.n	1eea <ParserJoinData+0x16>
		statusIdx = JOIN_NO_FREE_CHANNEL_STR_IDX;
    1f04:	2002      	movs	r0, #2
    1f06:	e7f0      	b.n	1eea <ParserJoinData+0x16>
		statusIdx = JOIN_TX_TIMEOUT_STR_IDX;
    1f08:	2003      	movs	r0, #3
    1f0a:	e7ee      	b.n	1eea <ParserJoinData+0x16>
    1f0c:	0001f814 	.word	0x0001f814
    1f10:	0001a275 	.word	0x0001a275
    1f14:	00003f7d 	.word	0x00003f7d

00001f18 <ParserAppData>:
{
    1f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (data->evt == LORAWAN_EVT_RX_DATA_AVAILABLE)
    1f1a:	780b      	ldrb	r3, [r1, #0]
    1f1c:	2b02      	cmp	r3, #2
    1f1e:	d003      	beq.n	1f28 <ParserAppData+0x10>
    else if(data->evt == LORAWAN_EVT_TRANSACTION_COMPLETE)
    1f20:	2b04      	cmp	r3, #4
    1f22:	d100      	bne.n	1f26 <ParserAppData+0xe>
    1f24:	e09c      	b.n	2060 <STACK_SIZE+0x60>
}
    1f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        switch(status)
    1f28:	7b4b      	ldrb	r3, [r1, #13]
    1f2a:	3b08      	subs	r3, #8
    1f2c:	b2da      	uxtb	r2, r3
    1f2e:	2a16      	cmp	r2, #22
    1f30:	d8f9      	bhi.n	1f26 <ParserAppData+0xe>
    1f32:	0093      	lsls	r3, r2, #2
    1f34:	4a97      	ldr	r2, [pc, #604]	; (2194 <STACK_SIZE+0x194>)
    1f36:	58d3      	ldr	r3, [r2, r3]
    1f38:	469f      	mov	pc, r3
        uint8_t dataLength = data->param.rxData.dataLength;
    1f3a:	7b0d      	ldrb	r5, [r1, #12]
                if((dataLength > 0U) && (NULL != pData))
    1f3c:	2d00      	cmp	r5, #0
    1f3e:	d030      	beq.n	1fa2 <ParserAppData+0x8a>
        uint8_t *pData = data->param.rxData.pData;
    1f40:	688e      	ldr	r6, [r1, #8]
                if((dataLength > 0U) && (NULL != pData))
    1f42:	2e00      	cmp	r6, #0
    1f44:	d02d      	beq.n	1fa2 <ParserAppData+0x8a>
                    strcpy(aParserData, gapParserRxStatus[MAC_RX_DATA_STR_IDX]);
    1f46:	4c94      	ldr	r4, [pc, #592]	; (2198 <STACK_SIZE+0x198>)
    1f48:	2208      	movs	r2, #8
    1f4a:	4994      	ldr	r1, [pc, #592]	; (219c <STACK_SIZE+0x19c>)
    1f4c:	0020      	movs	r0, r4
    1f4e:	4b94      	ldr	r3, [pc, #592]	; (21a0 <STACK_SIZE+0x1a0>)
    1f50:	4798      	blx	r3
                    dataLen = strlen(aParserData);
    1f52:	0020      	movs	r0, r4
    1f54:	4f93      	ldr	r7, [pc, #588]	; (21a4 <STACK_SIZE+0x1a4>)
    1f56:	47b8      	blx	r7
                    itoa( *pData, &aParserData[dataLen],10);
    1f58:	0401      	lsls	r1, r0, #16
    1f5a:	0c09      	lsrs	r1, r1, #16
    1f5c:	1909      	adds	r1, r1, r4
    1f5e:	7830      	ldrb	r0, [r6, #0]
    1f60:	220a      	movs	r2, #10
    1f62:	4b91      	ldr	r3, [pc, #580]	; (21a8 <STACK_SIZE+0x1a8>)
    1f64:	4798      	blx	r3
                    dataLen = strlen(aParserData);
    1f66:	0020      	movs	r0, r4
    1f68:	47b8      	blx	r7
                    aParserData[dataLen] = ' ';
    1f6a:	0403      	lsls	r3, r0, #16
    1f6c:	0c1b      	lsrs	r3, r3, #16
    1f6e:	2220      	movs	r2, #32
    1f70:	54e2      	strb	r2, [r4, r3]
                    dataLen ++;
    1f72:	3001      	adds	r0, #1
    1f74:	b280      	uxth	r0, r0
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
    1f76:	1902      	adds	r2, r0, r4
    1f78:	1c71      	adds	r1, r6, #1
                    maxDataLenToTx = ((dataLength - 1) <= ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1))) ? (dataLength - 1) : ((uint16_t)((PARSER_MAX_DATA_LEN - dataLen) >> 1));
    1f7a:	4b8c      	ldr	r3, [pc, #560]	; (21ac <STACK_SIZE+0x1ac>)
    1f7c:	1a1b      	subs	r3, r3, r0
    1f7e:	03db      	lsls	r3, r3, #15
    1f80:	3d01      	subs	r5, #1
    1f82:	0c1b      	lsrs	r3, r3, #16
    1f84:	42ab      	cmp	r3, r5
    1f86:	dd00      	ble.n	1f8a <ParserAppData+0x72>
    1f88:	002b      	movs	r3, r5
                    Parser_IntArrayToHexAscii(maxDataLenToTx, &pData[1],  &aParserData[dataLen]);
    1f8a:	b2d8      	uxtb	r0, r3
    1f8c:	4b88      	ldr	r3, [pc, #544]	; (21b0 <STACK_SIZE+0x1b0>)
    1f8e:	4798      	blx	r3
                    Parser_TxAddReply(aParserData, strlen(aParserData));
    1f90:	4c81      	ldr	r4, [pc, #516]	; (2198 <STACK_SIZE+0x198>)
    1f92:	0020      	movs	r0, r4
    1f94:	4b83      	ldr	r3, [pc, #524]	; (21a4 <STACK_SIZE+0x1a4>)
    1f96:	4798      	blx	r3
    1f98:	b281      	uxth	r1, r0
    1f9a:	0020      	movs	r0, r4
    1f9c:	4b85      	ldr	r3, [pc, #532]	; (21b4 <STACK_SIZE+0x1b4>)
    1f9e:	4798      	blx	r3
    1fa0:	e7c1      	b.n	1f26 <ParserAppData+0xe>
                    Parser_TxAddReply((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX], strlen((char*)gapParserRxStatus[MAC_ACK_RXED_STR_IDX]));
    1fa2:	210c      	movs	r1, #12
    1fa4:	4884      	ldr	r0, [pc, #528]	; (21b8 <STACK_SIZE+0x1b8>)
    1fa6:	4b83      	ldr	r3, [pc, #524]	; (21b4 <STACK_SIZE+0x1b4>)
    1fa8:	4798      	blx	r3
    1faa:	e7bc      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
    1fac:	2109      	movs	r1, #9
    1fae:	4883      	ldr	r0, [pc, #524]	; (21bc <STACK_SIZE+0x1bc>)
    1fb0:	4b80      	ldr	r3, [pc, #512]	; (21b4 <STACK_SIZE+0x1b4>)
    1fb2:	4798      	blx	r3
				break;
    1fb4:	e7b7      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
    1fb6:	210d      	movs	r1, #13
    1fb8:	4881      	ldr	r0, [pc, #516]	; (21c0 <STACK_SIZE+0x1c0>)
    1fba:	4b7e      	ldr	r3, [pc, #504]	; (21b4 <STACK_SIZE+0x1b4>)
    1fbc:	4798      	blx	r3
				break;
    1fbe:	e7b2      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
    1fc0:	210d      	movs	r1, #13
    1fc2:	4880      	ldr	r0, [pc, #512]	; (21c4 <STACK_SIZE+0x1c4>)
    1fc4:	4b7b      	ldr	r3, [pc, #492]	; (21b4 <STACK_SIZE+0x1b4>)
    1fc6:	4798      	blx	r3
				break;
    1fc8:	e7ad      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
    1fca:	2106      	movs	r1, #6
    1fcc:	487e      	ldr	r0, [pc, #504]	; (21c8 <STACK_SIZE+0x1c8>)
    1fce:	4b79      	ldr	r3, [pc, #484]	; (21b4 <STACK_SIZE+0x1b4>)
    1fd0:	4798      	blx	r3
				break;
    1fd2:	e7a8      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
    1fd4:	211e      	movs	r1, #30
    1fd6:	487d      	ldr	r0, [pc, #500]	; (21cc <STACK_SIZE+0x1cc>)
    1fd8:	4b76      	ldr	r3, [pc, #472]	; (21b4 <STACK_SIZE+0x1b4>)
    1fda:	4798      	blx	r3
				break;
    1fdc:	e7a3      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
    1fde:	210d      	movs	r1, #13
    1fe0:	487b      	ldr	r0, [pc, #492]	; (21d0 <STACK_SIZE+0x1d0>)
    1fe2:	4b74      	ldr	r3, [pc, #464]	; (21b4 <STACK_SIZE+0x1b4>)
    1fe4:	4798      	blx	r3
				break;
    1fe6:	e79e      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
    1fe8:	2109      	movs	r1, #9
    1fea:	487a      	ldr	r0, [pc, #488]	; (21d4 <STACK_SIZE+0x1d4>)
    1fec:	4b71      	ldr	r3, [pc, #452]	; (21b4 <STACK_SIZE+0x1b4>)
    1fee:	4798      	blx	r3
				break;
    1ff0:	e799      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
    1ff2:	210d      	movs	r1, #13
    1ff4:	4878      	ldr	r0, [pc, #480]	; (21d8 <STACK_SIZE+0x1d8>)
    1ff6:	4b6f      	ldr	r3, [pc, #444]	; (21b4 <STACK_SIZE+0x1b4>)
    1ff8:	4798      	blx	r3
				break;
    1ffa:	e794      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
    1ffc:	2115      	movs	r1, #21
    1ffe:	4877      	ldr	r0, [pc, #476]	; (21dc <STACK_SIZE+0x1dc>)
    2000:	4b6c      	ldr	r3, [pc, #432]	; (21b4 <STACK_SIZE+0x1b4>)
    2002:	4798      	blx	r3
				break;
    2004:	e78f      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
    2006:	210a      	movs	r1, #10
    2008:	4875      	ldr	r0, [pc, #468]	; (21e0 <STACK_SIZE+0x1e0>)
    200a:	4b6a      	ldr	r3, [pc, #424]	; (21b4 <STACK_SIZE+0x1b4>)
    200c:	4798      	blx	r3
				break;
    200e:	e78a      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
    2010:	2111      	movs	r1, #17
    2012:	4874      	ldr	r0, [pc, #464]	; (21e4 <STACK_SIZE+0x1e4>)
    2014:	4b67      	ldr	r3, [pc, #412]	; (21b4 <STACK_SIZE+0x1b4>)
    2016:	4798      	blx	r3
				break;
    2018:	e785      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
    201a:	210a      	movs	r1, #10
    201c:	4872      	ldr	r0, [pc, #456]	; (21e8 <STACK_SIZE+0x1e8>)
    201e:	4b65      	ldr	r3, [pc, #404]	; (21b4 <STACK_SIZE+0x1b4>)
    2020:	4798      	blx	r3
				break;
    2022:	e780      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
    2024:	2104      	movs	r1, #4
    2026:	4871      	ldr	r0, [pc, #452]	; (21ec <STACK_SIZE+0x1ec>)
    2028:	4b62      	ldr	r3, [pc, #392]	; (21b4 <STACK_SIZE+0x1b4>)
    202a:	4798      	blx	r3
				break;
    202c:	e77b      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
    202e:	2107      	movs	r1, #7
    2030:	486f      	ldr	r0, [pc, #444]	; (21f0 <STACK_SIZE+0x1f0>)
    2032:	4b60      	ldr	r3, [pc, #384]	; (21b4 <STACK_SIZE+0x1b4>)
    2034:	4798      	blx	r3
				break;
    2036:	e776      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
    2038:	2110      	movs	r1, #16
    203a:	486e      	ldr	r0, [pc, #440]	; (21f4 <STACK_SIZE+0x1f4>)
    203c:	4b5d      	ldr	r3, [pc, #372]	; (21b4 <STACK_SIZE+0x1b4>)
    203e:	4798      	blx	r3
				break;
    2040:	e771      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
    2042:	2114      	movs	r1, #20
    2044:	486c      	ldr	r0, [pc, #432]	; (21f8 <STACK_SIZE+0x1f8>)
    2046:	4b5b      	ldr	r3, [pc, #364]	; (21b4 <STACK_SIZE+0x1b4>)
    2048:	4798      	blx	r3
				break;
    204a:	e76c      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
    204c:	210f      	movs	r1, #15
    204e:	486b      	ldr	r0, [pc, #428]	; (21fc <STACK_SIZE+0x1fc>)
    2050:	4b58      	ldr	r3, [pc, #352]	; (21b4 <STACK_SIZE+0x1b4>)
    2052:	4798      	blx	r3
				break;	
    2054:	e767      	b.n	1f26 <ParserAppData+0xe>
           		Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
    2056:	210e      	movs	r1, #14
    2058:	4869      	ldr	r0, [pc, #420]	; (2200 <STACK_SIZE+0x200>)
    205a:	4b56      	ldr	r3, [pc, #344]	; (21b4 <STACK_SIZE+0x1b4>)
    205c:	4798      	blx	r3
           		break;
    205e:	e762      	b.n	1f26 <ParserAppData+0xe>
        switch(data->param.transCmpl.status)
    2060:	790b      	ldrb	r3, [r1, #4]
    2062:	2b1e      	cmp	r3, #30
    2064:	d900      	bls.n	2068 <STACK_SIZE+0x68>
    2066:	e75e      	b.n	1f26 <ParserAppData+0xe>
    2068:	009b      	lsls	r3, r3, #2
    206a:	4a66      	ldr	r2, [pc, #408]	; (2204 <STACK_SIZE+0x204>)
    206c:	58d3      	ldr	r3, [r2, r3]
    206e:	469f      	mov	pc, r3
		        Parser_TxAddReply((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[MAC_TX_OK_STR_IDX]));
    2070:	2109      	movs	r1, #9
    2072:	4865      	ldr	r0, [pc, #404]	; (2208 <STACK_SIZE+0x208>)
    2074:	4b4f      	ldr	r3, [pc, #316]	; (21b4 <STACK_SIZE+0x1b4>)
    2076:	4798      	blx	r3
	        break;
    2078:	e755      	b.n	1f26 <ParserAppData+0xe>
		        Parser_TxAddReply((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX], strlen((char*)gapParserTxStatus[RADIO_TX_OK_STR_IDX]));
    207a:	210b      	movs	r1, #11
    207c:	4863      	ldr	r0, [pc, #396]	; (220c <STACK_SIZE+0x20c>)
    207e:	4b4d      	ldr	r3, [pc, #308]	; (21b4 <STACK_SIZE+0x1b4>)
    2080:	4798      	blx	r3
	        break;
    2082:	e750      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_NO_DATA_STR_IDX]));
    2084:	210d      	movs	r1, #13
    2086:	4862      	ldr	r0, [pc, #392]	; (2210 <STACK_SIZE+0x210>)
    2088:	4b4a      	ldr	r3, [pc, #296]	; (21b4 <STACK_SIZE+0x1b4>)
    208a:	4798      	blx	r3
			    break;
    208c:	e74b      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[RADIO_TX_TIMEOUT_IDX]));
    208e:	2110      	movs	r1, #16
    2090:	4860      	ldr	r0, [pc, #384]	; (2214 <STACK_SIZE+0x214>)
    2092:	4b48      	ldr	r3, [pc, #288]	; (21b4 <STACK_SIZE+0x1b4>)
    2094:	4798      	blx	r3
				break;
    2096:	e746      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX], strlen((char*)gapParserLorawanStatus[TX_TIMEOUT_IDX]));
    2098:	210a      	movs	r1, #10
    209a:	485f      	ldr	r0, [pc, #380]	; (2218 <STACK_SIZE+0x218>)
    209c:	4b45      	ldr	r3, [pc, #276]	; (21b4 <STACK_SIZE+0x1b4>)
    209e:	4798      	blx	r3
				break;				
    20a0:	e741      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_DATA_SIZE_STR_IDX]));
    20a2:	210f      	movs	r1, #15
    20a4:	485d      	ldr	r0, [pc, #372]	; (221c <STACK_SIZE+0x21c>)
    20a6:	4b43      	ldr	r3, [pc, #268]	; (21b4 <STACK_SIZE+0x1b4>)
    20a8:	4798      	blx	r3
				break;
    20aa:	e73c      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_INVALID_REQ_STR_IDX]));
    20ac:	2111      	movs	r1, #17
    20ae:	485c      	ldr	r0, [pc, #368]	; (2220 <STACK_SIZE+0x220>)
    20b0:	4b40      	ldr	r3, [pc, #256]	; (21b4 <STACK_SIZE+0x1b4>)
    20b2:	4798      	blx	r3
				break;
    20b4:	e737      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[LORAWAN_RADIO_BUSY_STR_IDX]));
    20b6:	210a      	movs	r1, #10
    20b8:	485a      	ldr	r0, [pc, #360]	; (2224 <STACK_SIZE+0x224>)
    20ba:	4b3e      	ldr	r3, [pc, #248]	; (21b4 <STACK_SIZE+0x1b4>)
    20bc:	4798      	blx	r3
				break;
    20be:	e732      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_OUT_OF_RANGE_STR_IDX]));
    20c0:	2112      	movs	r1, #18
    20c2:	4859      	ldr	r0, [pc, #356]	; (2228 <STACK_SIZE+0x228>)
    20c4:	4b3b      	ldr	r3, [pc, #236]	; (21b4 <STACK_SIZE+0x1b4>)
    20c6:	4798      	blx	r3
				break;
    20c8:	e72d      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_UNSUP_ATTR_STR_IDX]));
    20ca:	2110      	movs	r1, #16
    20cc:	4857      	ldr	r0, [pc, #348]	; (222c <STACK_SIZE+0x22c>)
    20ce:	4b39      	ldr	r3, [pc, #228]	; (21b4 <STACK_SIZE+0x1b4>)
    20d0:	4798      	blx	r3
				break;
    20d2:	e728      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[RADIO_CHANNEL_BUSY_STR_IDX]));
    20d4:	2112      	movs	r1, #18
    20d6:	4856      	ldr	r0, [pc, #344]	; (2230 <STACK_SIZE+0x230>)
    20d8:	4b36      	ldr	r3, [pc, #216]	; (21b4 <STACK_SIZE+0x1b4>)
    20da:	4798      	blx	r3
				break;
    20dc:	e723      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NOT_JOINED_STR_IDX], strlen((char*)gapParserRxStatus[RADIO_ERR_STR_IDX]));
    20de:	2109      	movs	r1, #9
    20e0:	4836      	ldr	r0, [pc, #216]	; (21bc <STACK_SIZE+0x1bc>)
    20e2:	4b34      	ldr	r3, [pc, #208]	; (21b4 <STACK_SIZE+0x1b4>)
    20e4:	4798      	blx	r3
				break;
    20e6:	e71e      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PARAM_STR_IDX]));
    20e8:	210d      	movs	r1, #13
    20ea:	4835      	ldr	r0, [pc, #212]	; (21c0 <STACK_SIZE+0x1c0>)
    20ec:	4b31      	ldr	r3, [pc, #196]	; (21b4 <STACK_SIZE+0x1b4>)
    20ee:	4798      	blx	r3
				break;
    20f0:	e719      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX], strlen((char*)gapParserLorawanStatus[KEYS_NOT_INIT_STR_IDX]));
    20f2:	210d      	movs	r1, #13
    20f4:	4833      	ldr	r0, [pc, #204]	; (21c4 <STACK_SIZE+0x1c4>)
    20f6:	4b2f      	ldr	r3, [pc, #188]	; (21b4 <STACK_SIZE+0x1b4>)
    20f8:	4798      	blx	r3
				break;
    20fa:	e714      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[SILENT_STR_IDX], strlen((char*)gapParserLorawanStatus[SILENT_STR_IDX]));
    20fc:	2106      	movs	r1, #6
    20fe:	4832      	ldr	r0, [pc, #200]	; (21c8 <STACK_SIZE+0x1c8>)
    2100:	4b2c      	ldr	r3, [pc, #176]	; (21b4 <STACK_SIZE+0x1b4>)
    2102:	4798      	blx	r3
				break;
    2104:	e70f      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX], strlen((char*)gapParserLorawanStatus[FRAME_CNTR_ERR_REJOIN_NEEDED_STR_IDX]));
    2106:	211e      	movs	r1, #30
    2108:	4830      	ldr	r0, [pc, #192]	; (21cc <STACK_SIZE+0x1cc>)
    210a:	4b2a      	ldr	r3, [pc, #168]	; (21b4 <STACK_SIZE+0x1b4>)
    210c:	4798      	blx	r3
				break;
    210e:	e70a      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_FCNTR_STR_IDX]));
    2110:	210d      	movs	r1, #13
    2112:	482f      	ldr	r0, [pc, #188]	; (21d0 <STACK_SIZE+0x1d0>)
    2114:	4b27      	ldr	r3, [pc, #156]	; (21b4 <STACK_SIZE+0x1b4>)
    2116:	4798      	blx	r3
				break;
    2118:	e705      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MIC_ERROR_STR_IDX], strlen((char*)gapParserRxStatus[MIC_ERROR_STR_IDX]));
    211a:	2109      	movs	r1, #9
    211c:	482d      	ldr	r0, [pc, #180]	; (21d4 <STACK_SIZE+0x1d4>)
    211e:	4b25      	ldr	r3, [pc, #148]	; (21b4 <STACK_SIZE+0x1b4>)
    2120:	4798      	blx	r3
				break;
    2122:	e700      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_MTYPE_STR_IDX]));
    2124:	210d      	movs	r1, #13
    2126:	482c      	ldr	r0, [pc, #176]	; (21d8 <STACK_SIZE+0x1d8>)
    2128:	4b22      	ldr	r3, [pc, #136]	; (21b4 <STACK_SIZE+0x1b4>)
    212a:	4798      	blx	r3
				break;
    212c:	e6fb      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX], strlen((char*)gapParserRxStatus[INVALID_BUFFER_LEN_STR_IDX]));
    212e:	2115      	movs	r1, #21
    2130:	482a      	ldr	r0, [pc, #168]	; (21dc <STACK_SIZE+0x1dc>)
    2132:	4b20      	ldr	r3, [pc, #128]	; (21b4 <STACK_SIZE+0x1b4>)
    2134:	4798      	blx	r3
				break;
    2136:	e6f6      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX], strlen((char*)gapParserLorawanStatus[MAC_PAUSED_STR_IDX]));
    2138:	210a      	movs	r1, #10
    213a:	4829      	ldr	r0, [pc, #164]	; (21e0 <STACK_SIZE+0x1e0>)
    213c:	4b1d      	ldr	r3, [pc, #116]	; (21b4 <STACK_SIZE+0x1b4>)
    213e:	4798      	blx	r3
				break;
    2140:	e6f1      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX], strlen((char*)gapParserRxStatus[MCAST_HDR_INVALID_STR_IDX]));
    2142:	2111      	movs	r1, #17
    2144:	4827      	ldr	r0, [pc, #156]	; (21e4 <STACK_SIZE+0x1e4>)
    2146:	4b1b      	ldr	r3, [pc, #108]	; (21b4 <STACK_SIZE+0x1b4>)
    2148:	4798      	blx	r3
				break;
    214a:	e6ec      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX], strlen((char*)gapParserLorawanStatus[NO_FREE_CHANNEL_STR_IDX]));
    214c:	210a      	movs	r1, #10
    214e:	4826      	ldr	r0, [pc, #152]	; (21e8 <STACK_SIZE+0x1e8>)
    2150:	4b18      	ldr	r3, [pc, #96]	; (21b4 <STACK_SIZE+0x1b4>)
    2152:	4798      	blx	r3
				break;
    2154:	e6e7      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[BUSY_STR_IDX], strlen((char*)gapParserLorawanStatus[BUSY_STR_IDX]));
    2156:	2104      	movs	r1, #4
    2158:	4824      	ldr	r0, [pc, #144]	; (21ec <STACK_SIZE+0x1ec>)
    215a:	4b16      	ldr	r3, [pc, #88]	; (21b4 <STACK_SIZE+0x1b4>)
    215c:	4798      	blx	r3
				break;
    215e:	e6e2      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserRxStatus[NO_ACK_STR_IDX], strlen((char*)gapParserRxStatus[NO_ACK_STR_IDX]));
    2160:	2107      	movs	r1, #7
    2162:	4823      	ldr	r0, [pc, #140]	; (21f0 <STACK_SIZE+0x1f0>)
    2164:	4b13      	ldr	r3, [pc, #76]	; (21b4 <STACK_SIZE+0x1b4>)
    2166:	4798      	blx	r3
				break;
    2168:	e6dd      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX], strlen((char*)gapParserLorawanStatus[JOIN_IN_PROGRESS_STR_IDX]));
    216a:	2110      	movs	r1, #16
    216c:	4821      	ldr	r0, [pc, #132]	; (21f4 <STACK_SIZE+0x1f4>)
    216e:	4b11      	ldr	r3, [pc, #68]	; (21b4 <STACK_SIZE+0x1b4>)
    2170:	4798      	blx	r3
				break;
    2172:	e6d8      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX], strlen((char*)gapParserLorawanStatus[RESOURCE_UNAVAILABLE_STR_IDX]));
    2174:	2114      	movs	r1, #20
    2176:	4820      	ldr	r0, [pc, #128]	; (21f8 <STACK_SIZE+0x1f8>)
    2178:	4b0e      	ldr	r3, [pc, #56]	; (21b4 <STACK_SIZE+0x1b4>)
    217a:	4798      	blx	r3
				break;
    217c:	e6d3      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_REQ_STR_IDX]));
    217e:	210f      	movs	r1, #15
    2180:	481e      	ldr	r0, [pc, #120]	; (21fc <STACK_SIZE+0x1fc>)
    2182:	4b0c      	ldr	r3, [pc, #48]	; (21b4 <STACK_SIZE+0x1b4>)
    2184:	4798      	blx	r3
				break;
    2186:	e6ce      	b.n	1f26 <ParserAppData+0xe>
				Parser_TxAddReply((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX], strlen((char*)gapParserLorawanStatus[INVALID_PACKET_STR_IDX]));
    2188:	210e      	movs	r1, #14
    218a:	481d      	ldr	r0, [pc, #116]	; (2200 <STACK_SIZE+0x200>)
    218c:	4b09      	ldr	r3, [pc, #36]	; (21b4 <STACK_SIZE+0x1b4>)
    218e:	4798      	blx	r3
}
    2190:	e6c9      	b.n	1f26 <ParserAppData+0xe>
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	0001f4dc 	.word	0x0001f4dc
    2198:	2000116c 	.word	0x2000116c
    219c:	0001f5b4 	.word	0x0001f5b4
    21a0:	00019d1d 	.word	0x00019d1d
    21a4:	0001a275 	.word	0x0001a275
    21a8:	000196c9 	.word	0x000196c9
    21ac:	00000212 	.word	0x00000212
    21b0:	00004175 	.word	0x00004175
    21b4:	00003f7d 	.word	0x00003f7d
    21b8:	0001f5bc 	.word	0x0001f5bc
    21bc:	0001f5cc 	.word	0x0001f5cc
    21c0:	0001f5d8 	.word	0x0001f5d8
    21c4:	0001f5e8 	.word	0x0001f5e8
    21c8:	0001f5f8 	.word	0x0001f5f8
    21cc:	0001f600 	.word	0x0001f600
    21d0:	0001f620 	.word	0x0001f620
    21d4:	0001f630 	.word	0x0001f630
    21d8:	0001f63c 	.word	0x0001f63c
    21dc:	0001f64c 	.word	0x0001f64c
    21e0:	0001f664 	.word	0x0001f664
    21e4:	0001f670 	.word	0x0001f670
    21e8:	0001f684 	.word	0x0001f684
    21ec:	0001f690 	.word	0x0001f690
    21f0:	0001f698 	.word	0x0001f698
    21f4:	0001f6a0 	.word	0x0001f6a0
    21f8:	0001f6b4 	.word	0x0001f6b4
    21fc:	0001f6cc 	.word	0x0001f6cc
    2200:	0001f6dc 	.word	0x0001f6dc
    2204:	0001f538 	.word	0x0001f538
    2208:	0001f6ec 	.word	0x0001f6ec
    220c:	0001f6f8 	.word	0x0001f6f8
    2210:	0001f704 	.word	0x0001f704
    2214:	0001f714 	.word	0x0001f714
    2218:	0001f728 	.word	0x0001f728
    221c:	0001f734 	.word	0x0001f734
    2220:	0001f744 	.word	0x0001f744
    2224:	0001f758 	.word	0x0001f758
    2228:	0001f764 	.word	0x0001f764
    222c:	0001f778 	.word	0x0001f778
    2230:	0001f78c 	.word	0x0001f78c

00002234 <Parser_SetConfiguredJoinParameters>:
    gParserConfiguredJoinParameters.value = val;
    2234:	4b01      	ldr	r3, [pc, #4]	; (223c <Parser_SetConfiguredJoinParameters+0x8>)
    2236:	8018      	strh	r0, [r3, #0]
}
    2238:	4770      	bx	lr
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	20001f88 	.word	0x20001f88

00002240 <Parser_LorawanInit>:
{
    2240:	b510      	push	{r4, lr}
    LORAWAN_Init(ParserAppData, ParserJoinData);
    2242:	4904      	ldr	r1, [pc, #16]	; (2254 <Parser_LorawanInit+0x14>)
    2244:	4804      	ldr	r0, [pc, #16]	; (2258 <Parser_LorawanInit+0x18>)
    2246:	4b05      	ldr	r3, [pc, #20]	; (225c <Parser_LorawanInit+0x1c>)
    2248:	4798      	blx	r3
    gParserConfiguredJoinParameters.value = 0x00;
    224a:	2200      	movs	r2, #0
    224c:	4b04      	ldr	r3, [pc, #16]	; (2260 <Parser_LorawanInit+0x20>)
    224e:	801a      	strh	r2, [r3, #0]
}
    2250:	bd10      	pop	{r4, pc}
    2252:	46c0      	nop			; (mov r8, r8)
    2254:	00001ed5 	.word	0x00001ed5
    2258:	00001f19 	.word	0x00001f19
    225c:	00010301 	.word	0x00010301
    2260:	20001f88 	.word	0x20001f88

00002264 <Parser_LoraReset>:
{
    2264:	b5f0      	push	{r4, r5, r6, r7, lr}
    2266:	46d6      	mov	lr, sl
    2268:	4647      	mov	r7, r8
    226a:	b580      	push	{r7, lr}
    226c:	b085      	sub	sp, #20
    226e:	0007      	movs	r7, r0
    2270:	4d2f      	ldr	r5, [pc, #188]	; (2330 <Parser_LoraReset+0xcc>)
    2272:	2400      	movs	r4, #0
	    if(0 == stricmp(pParserCmdInfo->pParam1, gapParseIsmBand[iCount]))
    2274:	4b2f      	ldr	r3, [pc, #188]	; (2334 <Parser_LoraReset+0xd0>)
    2276:	469a      	mov	sl, r3
    2278:	b2e3      	uxtb	r3, r4
    227a:	4698      	mov	r8, r3
    227c:	9401      	str	r4, [sp, #4]
    227e:	682e      	ldr	r6, [r5, #0]
    2280:	0031      	movs	r1, r6
    2282:	6838      	ldr	r0, [r7, #0]
    2284:	47d0      	blx	sl
    2286:	2800      	cmp	r0, #0
    2288:	d00d      	beq.n	22a6 <Parser_LoraReset+0x42>
    228a:	3401      	adds	r4, #1
    228c:	3504      	adds	r5, #4
    for(iCount = 0; iCount < sizeof(gapParseIsmBand)/sizeof(gapParseIsmBand[0]); iCount++)
    228e:	2c10      	cmp	r4, #16
    2290:	d1f2      	bne.n	2278 <Parser_LoraReset+0x14>
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2292:	3c06      	subs	r4, #6
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2294:	00a4      	lsls	r4, r4, #2
    2296:	4b28      	ldr	r3, [pc, #160]	; (2338 <Parser_LoraReset+0xd4>)
    2298:	58e3      	ldr	r3, [r4, r3]
    229a:	617b      	str	r3, [r7, #20]
}
    229c:	b005      	add	sp, #20
    229e:	bc0c      	pop	{r2, r3}
    22a0:	4690      	mov	r8, r2
    22a2:	469a      	mov	sl, r3
    22a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint16_t supportedBands = 0;
    22a6:	ab02      	add	r3, sp, #8
    22a8:	1d9c      	adds	r4, r3, #6
    22aa:	2300      	movs	r3, #0
    22ac:	8023      	strh	r3, [r4, #0]
			LORAWAN_GetAttr(SUPPORTED_BANDS,NULL,&supportedBands);
    22ae:	0022      	movs	r2, r4
    22b0:	2100      	movs	r1, #0
    22b2:	3034      	adds	r0, #52	; 0x34
    22b4:	4b21      	ldr	r3, [pc, #132]	; (233c <Parser_LoraReset+0xd8>)
    22b6:	4798      	blx	r3
			if(((1 << iCount) & supportedBands) == 0)
    22b8:	8823      	ldrh	r3, [r4, #0]
    22ba:	9a01      	ldr	r2, [sp, #4]
    22bc:	4113      	asrs	r3, r2
    22be:	07db      	lsls	r3, r3, #31
    22c0:	d405      	bmi.n	22ce <Parser_LoraReset+0x6a>
				printf("Band %s not supported\r\n",gapParseIsmBand[iCount]);
    22c2:	0031      	movs	r1, r6
    22c4:	481e      	ldr	r0, [pc, #120]	; (2340 <Parser_LoraReset+0xdc>)
    22c6:	4b1f      	ldr	r3, [pc, #124]	; (2344 <Parser_LoraReset+0xe0>)
    22c8:	4798      	blx	r3
				status = LORAWAN_UNSUPPORTED_BAND;
    22ca:	2416      	movs	r4, #22
				break;
    22cc:	e7e2      	b.n	2294 <Parser_LoraReset+0x30>
			if(PDS_IsRestorable())
    22ce:	4b1e      	ldr	r3, [pc, #120]	; (2348 <Parser_LoraReset+0xe4>)
    22d0:	4798      	blx	r3
    22d2:	2800      	cmp	r0, #0
    22d4:	d018      	beq.n	2308 <Parser_LoraReset+0xa4>
				uint8_t prevBand = 0xFF;
    22d6:	ab02      	add	r3, sp, #8
    22d8:	1d5c      	adds	r4, r3, #5
    22da:	23ff      	movs	r3, #255	; 0xff
    22dc:	7023      	strb	r3, [r4, #0]
				PDS_RestoreAll();
    22de:	4b1b      	ldr	r3, [pc, #108]	; (234c <Parser_LoraReset+0xe8>)
    22e0:	4798      	blx	r3
				LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    22e2:	0022      	movs	r2, r4
    22e4:	2100      	movs	r1, #0
    22e6:	2023      	movs	r0, #35	; 0x23
    22e8:	4b14      	ldr	r3, [pc, #80]	; (233c <Parser_LoraReset+0xd8>)
    22ea:	4798      	blx	r3
				if(prevBand != iCount)
    22ec:	7823      	ldrb	r3, [r4, #0]
    22ee:	4543      	cmp	r3, r8
    22f0:	d013      	beq.n	231a <Parser_LoraReset+0xb6>
					PDS_DeleteAll();
    22f2:	4b17      	ldr	r3, [pc, #92]	; (2350 <Parser_LoraReset+0xec>)
    22f4:	4798      	blx	r3
				status = LORAWAN_Reset(iCount);
    22f6:	4640      	mov	r0, r8
    22f8:	4b16      	ldr	r3, [pc, #88]	; (2354 <Parser_LoraReset+0xf0>)
    22fa:	4798      	blx	r3
    22fc:	0004      	movs	r4, r0
				if(isSwitchReq == true && status == LORAWAN_SUCCESS)
    22fe:	2808      	cmp	r0, #8
    2300:	d10f      	bne.n	2322 <Parser_LoraReset+0xbe>
					PDS_StoreAll();
    2302:	4b15      	ldr	r3, [pc, #84]	; (2358 <Parser_LoraReset+0xf4>)
    2304:	4798      	blx	r3
    2306:	e00e      	b.n	2326 <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
    2308:	4640      	mov	r0, r8
    230a:	4b12      	ldr	r3, [pc, #72]	; (2354 <Parser_LoraReset+0xf0>)
    230c:	4798      	blx	r3
    230e:	0004      	movs	r4, r0
				if(status == LORAWAN_SUCCESS)
    2310:	2808      	cmp	r0, #8
    2312:	d108      	bne.n	2326 <Parser_LoraReset+0xc2>
				    PDS_StoreAll();					
    2314:	4b10      	ldr	r3, [pc, #64]	; (2358 <Parser_LoraReset+0xf4>)
    2316:	4798      	blx	r3
    2318:	e005      	b.n	2326 <Parser_LoraReset+0xc2>
				status = LORAWAN_Reset(iCount);
    231a:	4640      	mov	r0, r8
    231c:	4b0d      	ldr	r3, [pc, #52]	; (2354 <Parser_LoraReset+0xf0>)
    231e:	4798      	blx	r3
    2320:	0004      	movs	r4, r0
					PDS_RestoreAll();
    2322:	4b0a      	ldr	r3, [pc, #40]	; (234c <Parser_LoraReset+0xe8>)
    2324:	4798      	blx	r3
		    gParserConfiguredJoinParameters.value = 0x00;		    
    2326:	2200      	movs	r2, #0
    2328:	4b0c      	ldr	r3, [pc, #48]	; (235c <Parser_LoraReset+0xf8>)
    232a:	801a      	strh	r2, [r3, #0]
		    break;
    232c:	e7b2      	b.n	2294 <Parser_LoraReset+0x30>
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	0001f7d4 	.word	0x0001f7d4
    2334:	000042ed 	.word	0x000042ed
    2338:	0001f848 	.word	0x0001f848
    233c:	00011935 	.word	0x00011935
    2340:	0001f7ac 	.word	0x0001f7ac
    2344:	00019ef5 	.word	0x00019ef5
    2348:	0000e1a1 	.word	0x0000e1a1
    234c:	0000e205 	.word	0x0000e205
    2350:	0000e1e9 	.word	0x0000e1e9
    2354:	00013eb1 	.word	0x00013eb1
    2358:	0000e2f1 	.word	0x0000e2f1
    235c:	20001f88 	.word	0x20001f88

00002360 <Parser_LoraJoin>:
{
    2360:	b510      	push	{r4, lr}
    2362:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParseJoinMode[OTAA_STR_IDX], gapParseJoinMode[ABP_STR_IDX]);
    2364:	4a08      	ldr	r2, [pc, #32]	; (2388 <Parser_LoraJoin+0x28>)
    2366:	4909      	ldr	r1, [pc, #36]	; (238c <Parser_LoraJoin+0x2c>)
    2368:	6800      	ldr	r0, [r0, #0]
    236a:	4b09      	ldr	r3, [pc, #36]	; (2390 <Parser_LoraJoin+0x30>)
    236c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    236e:	230a      	movs	r3, #10
    if(validationVal < 2U)
    2370:	2801      	cmp	r0, #1
    2372:	d904      	bls.n	237e <Parser_LoraJoin+0x1e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2374:	009b      	lsls	r3, r3, #2
    2376:	4a07      	ldr	r2, [pc, #28]	; (2394 <Parser_LoraJoin+0x34>)
    2378:	589b      	ldr	r3, [r3, r2]
    237a:	6163      	str	r3, [r4, #20]
}
    237c:	bd10      	pop	{r4, pc}
        status = LORAWAN_Join(validationVal);
    237e:	4b06      	ldr	r3, [pc, #24]	; (2398 <Parser_LoraJoin+0x38>)
    2380:	4798      	blx	r3
    2382:	0003      	movs	r3, r0
    2384:	e7f6      	b.n	2374 <Parser_LoraJoin+0x14>
    2386:	46c0      	nop			; (mov r8, r8)
    2388:	0001f7a0 	.word	0x0001f7a0
    238c:	0001f7a4 	.word	0x0001f7a4
    2390:	000043b1 	.word	0x000043b1
    2394:	0001f848 	.word	0x0001f848
    2398:	00011269 	.word	0x00011269

0000239c <Parser_LoraSend>:
{    
    239c:	b5f0      	push	{r4, r5, r6, r7, lr}
    239e:	b085      	sub	sp, #20
    23a0:	0007      	movs	r7, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
    23a2:	6880      	ldr	r0, [r0, #8]
    23a4:	4b1d      	ldr	r3, [pc, #116]	; (241c <Parser_LoraSend+0x80>)
    23a6:	4798      	blx	r3
    23a8:	0004      	movs	r4, r0
    validationVal = Validate_Str1Str2AsciiValue(pParserCmdInfo->pParam1, gapParserSendMode[UNCNF_STR_IDX], gapParserSendMode[CNF_STR_IDX]);
    23aa:	4a1d      	ldr	r2, [pc, #116]	; (2420 <Parser_LoraSend+0x84>)
    23ac:	491d      	ldr	r1, [pc, #116]	; (2424 <Parser_LoraSend+0x88>)
    23ae:	6838      	ldr	r0, [r7, #0]
    23b0:	4b1d      	ldr	r3, [pc, #116]	; (2428 <Parser_LoraSend+0x8c>)
    23b2:	4798      	blx	r3
    23b4:	9001      	str	r0, [sp, #4]
    23b6:	0006      	movs	r6, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
    23b8:	ab02      	add	r3, sp, #8
    23ba:	1dd9      	adds	r1, r3, #7
    23bc:	6878      	ldr	r0, [r7, #4]
    23be:	4b1b      	ldr	r3, [pc, #108]	; (242c <Parser_LoraSend+0x90>)
    23c0:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    23c2:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
    23c4:	2800      	cmp	r0, #0
    23c6:	d005      	beq.n	23d4 <Parser_LoraSend+0x38>
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam3);
    23c8:	b2a4      	uxth	r4, r4
    uint16_t  dataLen = asciiDataLen >> 1;
    23ca:	0865      	lsrs	r5, r4, #1
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &portValue) && (dataLen <= 255) &&
    23cc:	2dff      	cmp	r5, #255	; 0xff
    23ce:	d801      	bhi.n	23d4 <Parser_LoraSend+0x38>
    23d0:	2e01      	cmp	r6, #1
    23d2:	d905      	bls.n	23e0 <Parser_LoraSend+0x44>
        pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    23d4:	009b      	lsls	r3, r3, #2
    23d6:	4a16      	ldr	r2, [pc, #88]	; (2430 <Parser_LoraSend+0x94>)
    23d8:	589b      	ldr	r3, [r3, r2]
    23da:	617b      	str	r3, [r7, #20]
}
    23dc:	b005      	add	sp, #20
    23de:	bdf0      	pop	{r4, r5, r6, r7, pc}
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
    23e0:	68b8      	ldr	r0, [r7, #8]
    23e2:	4b14      	ldr	r3, [pc, #80]	; (2434 <Parser_LoraSend+0x98>)
    23e4:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    23e6:	230a      	movs	r3, #10
       (validationVal < 2U) && Validate_HexValue(pParserCmdInfo->pParam3))
    23e8:	2800      	cmp	r0, #0
    23ea:	d0f3      	beq.n	23d4 <Parser_LoraSend+0x38>
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam3, (uint8_t *)aParserData);
    23ec:	4a12      	ldr	r2, [pc, #72]	; (2438 <Parser_LoraSend+0x9c>)
    23ee:	68b9      	ldr	r1, [r7, #8]
    23f0:	0020      	movs	r0, r4
    23f2:	4b12      	ldr	r3, [pc, #72]	; (243c <Parser_LoraSend+0xa0>)
    23f4:	4798      	blx	r3
        if(asciiDataLen % 2 == 1)
    23f6:	07e3      	lsls	r3, r4, #31
    23f8:	d500      	bpl.n	23fc <Parser_LoraSend+0x60>
            dataLen += 1;
    23fa:	3501      	adds	r5, #1
        parser_data.confirmed = validationVal;
    23fc:	4810      	ldr	r0, [pc, #64]	; (2440 <Parser_LoraSend+0xa4>)
    23fe:	466b      	mov	r3, sp
    2400:	791b      	ldrb	r3, [r3, #4]
    2402:	7003      	strb	r3, [r0, #0]
        parser_data.port = portValue;
    2404:	ab02      	add	r3, sp, #8
    2406:	3307      	adds	r3, #7
    2408:	781b      	ldrb	r3, [r3, #0]
    240a:	7043      	strb	r3, [r0, #1]
        parser_data.buffer = aParserData;
    240c:	4b0a      	ldr	r3, [pc, #40]	; (2438 <Parser_LoraSend+0x9c>)
    240e:	6043      	str	r3, [r0, #4]
        parser_data.bufferLength = (uint8_t)dataLen;
    2410:	7205      	strb	r5, [r0, #8]
        status = LORAWAN_Send(&parser_data);
    2412:	4b0c      	ldr	r3, [pc, #48]	; (2444 <Parser_LoraSend+0xa8>)
    2414:	4798      	blx	r3
    2416:	0003      	movs	r3, r0
    2418:	e7dc      	b.n	23d4 <Parser_LoraSend+0x38>
    241a:	46c0      	nop			; (mov r8, r8)
    241c:	0001a275 	.word	0x0001a275
    2420:	0001f7c8 	.word	0x0001f7c8
    2424:	0001f7cc 	.word	0x0001f7cc
    2428:	000043b1 	.word	0x000043b1
    242c:	000041d5 	.word	0x000041d5
    2430:	0001f848 	.word	0x0001f848
    2434:	00004141 	.word	0x00004141
    2438:	2000116c 	.word	0x2000116c
    243c:	00004449 	.word	0x00004449
    2440:	20001f8c 	.word	0x20001f8c
    2444:	000104d9 	.word	0x000104d9

00002448 <Parser_LoraSetCrtDataRate>:
{
    2448:	b510      	push	{r4, lr}
    244a:	b082      	sub	sp, #8
    244c:	0004      	movs	r4, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
    244e:	466b      	mov	r3, sp
    2450:	1dd9      	adds	r1, r3, #7
    2452:	6800      	ldr	r0, [r0, #0]
    2454:	4b08      	ldr	r3, [pc, #32]	; (2478 <Parser_LoraSetCrtDataRate+0x30>)
    2456:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2458:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate))
    245a:	2800      	cmp	r0, #0
    245c:	d105      	bne.n	246a <Parser_LoraSetCrtDataRate+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    245e:	009b      	lsls	r3, r3, #2
    2460:	4a06      	ldr	r2, [pc, #24]	; (247c <Parser_LoraSetCrtDataRate+0x34>)
    2462:	589b      	ldr	r3, [r3, r2]
    2464:	6163      	str	r3, [r4, #20]
}
    2466:	b002      	add	sp, #8
    2468:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CURRENT_DATARATE,&datarate);
    246a:	466b      	mov	r3, sp
    246c:	1dd9      	adds	r1, r3, #7
    246e:	2007      	movs	r0, #7
    2470:	4b03      	ldr	r3, [pc, #12]	; (2480 <Parser_LoraSetCrtDataRate+0x38>)
    2472:	4798      	blx	r3
    2474:	0003      	movs	r3, r0
    2476:	e7f2      	b.n	245e <Parser_LoraSetCrtDataRate+0x16>
    2478:	000041d5 	.word	0x000041d5
    247c:	0001f848 	.word	0x0001f848
    2480:	00013979 	.word	0x00013979

00002484 <Parser_LoraGetCrtDataRate>:
{
    2484:	b570      	push	{r4, r5, r6, lr}
    2486:	b082      	sub	sp, #8
    2488:	0006      	movs	r6, r0
	LORAWAN_GetAttr(CURRENT_DATARATE,NULL,&crtDatarate);
    248a:	466b      	mov	r3, sp
    248c:	1ddd      	adds	r5, r3, #7
    248e:	002a      	movs	r2, r5
    2490:	2100      	movs	r1, #0
    2492:	2007      	movs	r0, #7
    2494:	4b05      	ldr	r3, [pc, #20]	; (24ac <Parser_LoraGetCrtDataRate+0x28>)
    2496:	4798      	blx	r3
 	itoa(crtDatarate, aParserData, 10U);
    2498:	4c05      	ldr	r4, [pc, #20]	; (24b0 <Parser_LoraGetCrtDataRate+0x2c>)
    249a:	7828      	ldrb	r0, [r5, #0]
    249c:	220a      	movs	r2, #10
    249e:	0021      	movs	r1, r4
    24a0:	4b04      	ldr	r3, [pc, #16]	; (24b4 <Parser_LoraGetCrtDataRate+0x30>)
    24a2:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    24a4:	6174      	str	r4, [r6, #20]
}
    24a6:	b002      	add	sp, #8
    24a8:	bd70      	pop	{r4, r5, r6, pc}
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	00011935 	.word	0x00011935
    24b0:	2000116c 	.word	0x2000116c
    24b4:	000196c9 	.word	0x000196c9

000024b8 <Parser_LoraSetAdr>:
{
    24b8:	b510      	push	{r4, lr}
    24ba:	b082      	sub	sp, #8
    24bc:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    24be:	6800      	ldr	r0, [r0, #0]
    24c0:	4b09      	ldr	r3, [pc, #36]	; (24e8 <Parser_LoraSetAdr+0x30>)
    24c2:	4798      	blx	r3
    24c4:	466b      	mov	r3, sp
    24c6:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    24c8:	230a      	movs	r3, #10
    if(validationVal < 2U)
    24ca:	2801      	cmp	r0, #1
    24cc:	d905      	bls.n	24da <Parser_LoraSetAdr+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    24ce:	009b      	lsls	r3, r3, #2
    24d0:	4a06      	ldr	r2, [pc, #24]	; (24ec <Parser_LoraSetAdr+0x34>)
    24d2:	589b      	ldr	r3, [r3, r2]
    24d4:	6163      	str	r3, [r4, #20]
}
    24d6:	b002      	add	sp, #8
    24d8:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(ADR,&validationVal);
    24da:	466b      	mov	r3, sp
    24dc:	1dd9      	adds	r1, r3, #7
    24de:	2006      	movs	r0, #6
    24e0:	4b03      	ldr	r3, [pc, #12]	; (24f0 <Parser_LoraSetAdr+0x38>)
    24e2:	4798      	blx	r3
    24e4:	0003      	movs	r3, r0
    24e6:	e7f2      	b.n	24ce <Parser_LoraSetAdr+0x16>
    24e8:	0000437d 	.word	0x0000437d
    24ec:	0001f848 	.word	0x0001f848
    24f0:	00013979 	.word	0x00013979

000024f4 <Parser_LoraGetAdr>:
{
    24f4:	b530      	push	{r4, r5, lr}
    24f6:	b083      	sub	sp, #12
    24f8:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ADR,NULL,&adrEnabled);
    24fa:	466b      	mov	r3, sp
    24fc:	1ddc      	adds	r4, r3, #7
    24fe:	0022      	movs	r2, r4
    2500:	2100      	movs	r1, #0
    2502:	2006      	movs	r0, #6
    2504:	4b04      	ldr	r3, [pc, #16]	; (2518 <Parser_LoraGetAdr+0x24>)
    2506:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[adrEnabled];
    2508:	7823      	ldrb	r3, [r4, #0]
    250a:	009b      	lsls	r3, r3, #2
    250c:	4a03      	ldr	r2, [pc, #12]	; (251c <Parser_LoraGetAdr+0x28>)
    250e:	589b      	ldr	r3, [r3, r2]
    2510:	616b      	str	r3, [r5, #20]
}
    2512:	b003      	add	sp, #12
    2514:	bd30      	pop	{r4, r5, pc}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	00011935 	.word	0x00011935
    251c:	0001f828 	.word	0x0001f828

00002520 <Parser_LoraSetDevAddr>:
{
    2520:	b510      	push	{r4, lr}
    2522:	b082      	sub	sp, #8
    2524:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2526:	6800      	ldr	r0, [r0, #0]
    2528:	4b14      	ldr	r3, [pc, #80]	; (257c <Parser_LoraSetDevAddr+0x5c>)
    252a:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    252c:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    252e:	2800      	cmp	r0, #0
    2530:	d105      	bne.n	253e <Parser_LoraSetDevAddr+0x1e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    2532:	009b      	lsls	r3, r3, #2
    2534:	4a12      	ldr	r2, [pc, #72]	; (2580 <Parser_LoraSetDevAddr+0x60>)
    2536:	589b      	ldr	r3, [r3, r2]
    2538:	6163      	str	r3, [r4, #20]
}
    253a:	b002      	add	sp, #8
    253c:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    253e:	aa01      	add	r2, sp, #4
    2540:	6821      	ldr	r1, [r4, #0]
    2542:	2008      	movs	r0, #8
    2544:	4b0f      	ldr	r3, [pc, #60]	; (2584 <Parser_LoraSetDevAddr+0x64>)
    2546:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2548:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(sizeof(devAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    254a:	2800      	cmp	r0, #0
    254c:	d0f1      	beq.n	2532 <Parser_LoraSetDevAddr+0x12>
            devAddr += ((uint32_t)tempBuff[2]) << 8;
    254e:	aa01      	add	r2, sp, #4
    2550:	7893      	ldrb	r3, [r2, #2]
    2552:	021b      	lsls	r3, r3, #8
            devAddr += ((uint32_t)tempBuff[1]) << 16;
    2554:	7851      	ldrb	r1, [r2, #1]
    2556:	0409      	lsls	r1, r1, #16
    2558:	185b      	adds	r3, r3, r1
            devAddr = (uint32_t)tempBuff[3];
    255a:	78d1      	ldrb	r1, [r2, #3]
            devAddr += ((uint32_t)tempBuff[1]) << 16;
    255c:	185b      	adds	r3, r3, r1
            devAddr += ((uint32_t)tempBuff[0]) << 24;
    255e:	7812      	ldrb	r2, [r2, #0]
    2560:	0612      	lsls	r2, r2, #24
    2562:	189b      	adds	r3, r3, r2
    2564:	9300      	str	r3, [sp, #0]
            statusIdx = LORAWAN_SetAttr (DEV_ADDR,&devAddr);
    2566:	4669      	mov	r1, sp
    2568:	2002      	movs	r0, #2
    256a:	4b07      	ldr	r3, [pc, #28]	; (2588 <Parser_LoraSetDevAddr+0x68>)
    256c:	4798      	blx	r3
    256e:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.devaddr = 1;
    2570:	4906      	ldr	r1, [pc, #24]	; (258c <Parser_LoraSetDevAddr+0x6c>)
    2572:	780a      	ldrb	r2, [r1, #0]
    2574:	2008      	movs	r0, #8
    2576:	4302      	orrs	r2, r0
    2578:	700a      	strb	r2, [r1, #0]
    257a:	e7da      	b.n	2532 <Parser_LoraSetDevAddr+0x12>
    257c:	00004141 	.word	0x00004141
    2580:	0001f848 	.word	0x0001f848
    2584:	00004449 	.word	0x00004449
    2588:	00013979 	.word	0x00013979
    258c:	20001f88 	.word	0x20001f88

00002590 <Parser_LoraGetDevAddr>:
{
    2590:	b530      	push	{r4, r5, lr}
    2592:	b083      	sub	sp, #12
    2594:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddr);
    2596:	aa01      	add	r2, sp, #4
    2598:	2100      	movs	r1, #0
    259a:	2002      	movs	r0, #2
    259c:	4b09      	ldr	r3, [pc, #36]	; (25c4 <Parser_LoraGetDevAddr+0x34>)
    259e:	4798      	blx	r3
    tempBuff[3] = (uint8_t)devAddr;
    25a0:	9b01      	ldr	r3, [sp, #4]
    25a2:	466a      	mov	r2, sp
    25a4:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(devAddr >> 8);
    25a6:	0a1a      	lsrs	r2, r3, #8
    25a8:	4669      	mov	r1, sp
    25aa:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(devAddr >> 16);
    25ac:	0c1a      	lsrs	r2, r3, #16
    25ae:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(devAddr >> 24);
    25b0:	0e1b      	lsrs	r3, r3, #24
    25b2:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    25b4:	4c04      	ldr	r4, [pc, #16]	; (25c8 <Parser_LoraGetDevAddr+0x38>)
    25b6:	0022      	movs	r2, r4
    25b8:	2004      	movs	r0, #4
    25ba:	4b04      	ldr	r3, [pc, #16]	; (25cc <Parser_LoraGetDevAddr+0x3c>)
    25bc:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    25be:	616c      	str	r4, [r5, #20]
}
    25c0:	b003      	add	sp, #12
    25c2:	bd30      	pop	{r4, r5, pc}
    25c4:	00011935 	.word	0x00011935
    25c8:	2000116c 	.word	0x2000116c
    25cc:	00004175 	.word	0x00004175

000025d0 <Parser_LoraSetDevEui>:
{
    25d0:	b510      	push	{r4, lr}
    25d2:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    25d4:	6800      	ldr	r0, [r0, #0]
    25d6:	4b0e      	ldr	r3, [pc, #56]	; (2610 <Parser_LoraSetDevEui+0x40>)
    25d8:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    25da:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    25dc:	2800      	cmp	r0, #0
    25de:	d104      	bne.n	25ea <Parser_LoraSetDevEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    25e0:	009b      	lsls	r3, r3, #2
    25e2:	4a0c      	ldr	r2, [pc, #48]	; (2614 <Parser_LoraSetDevEui+0x44>)
    25e4:	589b      	ldr	r3, [r3, r2]
    25e6:	6163      	str	r3, [r4, #20]
}
    25e8:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    25ea:	4a0b      	ldr	r2, [pc, #44]	; (2618 <Parser_LoraSetDevEui+0x48>)
    25ec:	6821      	ldr	r1, [r4, #0]
    25ee:	2010      	movs	r0, #16
    25f0:	4b0a      	ldr	r3, [pc, #40]	; (261c <Parser_LoraSetDevEui+0x4c>)
    25f2:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    25f4:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    25f6:	2800      	cmp	r0, #0
    25f8:	d0f2      	beq.n	25e0 <Parser_LoraSetDevEui+0x10>
            statusIdx = LORAWAN_SetAttr (DEV_EUI,aParserData);
    25fa:	4907      	ldr	r1, [pc, #28]	; (2618 <Parser_LoraSetDevEui+0x48>)
    25fc:	2000      	movs	r0, #0
    25fe:	4b08      	ldr	r3, [pc, #32]	; (2620 <Parser_LoraSetDevEui+0x50>)
    2600:	4798      	blx	r3
    2602:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.deveui = 1;
    2604:	4907      	ldr	r1, [pc, #28]	; (2624 <Parser_LoraSetDevEui+0x54>)
    2606:	780a      	ldrb	r2, [r1, #0]
    2608:	2001      	movs	r0, #1
    260a:	4302      	orrs	r2, r0
    260c:	700a      	strb	r2, [r1, #0]
    260e:	e7e7      	b.n	25e0 <Parser_LoraSetDevEui+0x10>
    2610:	00004141 	.word	0x00004141
    2614:	0001f848 	.word	0x0001f848
    2618:	2000116c 	.word	0x2000116c
    261c:	00004449 	.word	0x00004449
    2620:	00013979 	.word	0x00013979
    2624:	20001f88 	.word	0x20001f88

00002628 <Parser_LoraGetDevEui>:
{
    2628:	b530      	push	{r4, r5, lr}
    262a:	b083      	sub	sp, #12
    262c:	0005      	movs	r5, r0
    LORAWAN_GetAttr (DEV_EUI, NULL, aDevEui);
    262e:	466a      	mov	r2, sp
    2630:	2100      	movs	r1, #0
    2632:	2000      	movs	r0, #0
    2634:	4b05      	ldr	r3, [pc, #20]	; (264c <Parser_LoraGetDevEui+0x24>)
    2636:	4798      	blx	r3
	Parser_IntArrayToHexAscii(DEV_EUI_LEN, aDevEui, aParserData);
    2638:	4c05      	ldr	r4, [pc, #20]	; (2650 <Parser_LoraGetDevEui+0x28>)
    263a:	0022      	movs	r2, r4
    263c:	4669      	mov	r1, sp
    263e:	2008      	movs	r0, #8
    2640:	4b04      	ldr	r3, [pc, #16]	; (2654 <Parser_LoraGetDevEui+0x2c>)
    2642:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    2644:	616c      	str	r4, [r5, #20]
}
    2646:	b003      	add	sp, #12
    2648:	bd30      	pop	{r4, r5, pc}
    264a:	46c0      	nop			; (mov r8, r8)
    264c:	00011935 	.word	0x00011935
    2650:	2000116c 	.word	0x2000116c
    2654:	00004175 	.word	0x00004175

00002658 <Parser_LoraSetJoinEui>:
{
    2658:	b510      	push	{r4, lr}
    265a:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    265c:	6800      	ldr	r0, [r0, #0]
    265e:	4b0e      	ldr	r3, [pc, #56]	; (2698 <Parser_LoraSetJoinEui+0x40>)
    2660:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2662:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2664:	2800      	cmp	r0, #0
    2666:	d104      	bne.n	2672 <Parser_LoraSetJoinEui+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    2668:	009b      	lsls	r3, r3, #2
    266a:	4a0c      	ldr	r2, [pc, #48]	; (269c <Parser_LoraSetJoinEui+0x44>)
    266c:	589b      	ldr	r3, [r3, r2]
    266e:	6163      	str	r3, [r4, #20]
}
    2670:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2672:	4a0b      	ldr	r2, [pc, #44]	; (26a0 <Parser_LoraSetJoinEui+0x48>)
    2674:	6821      	ldr	r1, [r4, #0]
    2676:	2010      	movs	r0, #16
    2678:	4b0a      	ldr	r3, [pc, #40]	; (26a4 <Parser_LoraSetJoinEui+0x4c>)
    267a:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    267c:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(16, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    267e:	2800      	cmp	r0, #0
    2680:	d0f2      	beq.n	2668 <Parser_LoraSetJoinEui+0x10>
            statusIdx = LORAWAN_SetAttr(APP_EUI,aParserData);
    2682:	4907      	ldr	r1, [pc, #28]	; (26a0 <Parser_LoraSetJoinEui+0x48>)
    2684:	2001      	movs	r0, #1
    2686:	4b08      	ldr	r3, [pc, #32]	; (26a8 <Parser_LoraSetJoinEui+0x50>)
    2688:	4798      	blx	r3
    268a:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.joineui = 1;          
    268c:	4907      	ldr	r1, [pc, #28]	; (26ac <Parser_LoraSetJoinEui+0x54>)
    268e:	780a      	ldrb	r2, [r1, #0]
    2690:	2002      	movs	r0, #2
    2692:	4302      	orrs	r2, r0
    2694:	700a      	strb	r2, [r1, #0]
    2696:	e7e7      	b.n	2668 <Parser_LoraSetJoinEui+0x10>
    2698:	00004141 	.word	0x00004141
    269c:	0001f848 	.word	0x0001f848
    26a0:	2000116c 	.word	0x2000116c
    26a4:	00004449 	.word	0x00004449
    26a8:	00013979 	.word	0x00013979
    26ac:	20001f88 	.word	0x20001f88

000026b0 <Parser_LoraGetJoinEui>:
{
    26b0:	b530      	push	{r4, r5, lr}
    26b2:	b083      	sub	sp, #12
    26b4:	0005      	movs	r5, r0
    LORAWAN_GetAttr(APP_EUI, NULL, aJoinEui);
    26b6:	466a      	mov	r2, sp
    26b8:	2100      	movs	r1, #0
    26ba:	2001      	movs	r0, #1
    26bc:	4b05      	ldr	r3, [pc, #20]	; (26d4 <Parser_LoraGetJoinEui+0x24>)
    26be:	4798      	blx	r3
	Parser_IntArrayToHexAscii(JOIN_EUI_LEN, aJoinEui, aParserData);
    26c0:	4c05      	ldr	r4, [pc, #20]	; (26d8 <Parser_LoraGetJoinEui+0x28>)
    26c2:	0022      	movs	r2, r4
    26c4:	4669      	mov	r1, sp
    26c6:	2008      	movs	r0, #8
    26c8:	4b04      	ldr	r3, [pc, #16]	; (26dc <Parser_LoraGetJoinEui+0x2c>)
    26ca:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    26cc:	616c      	str	r4, [r5, #20]
}
    26ce:	b003      	add	sp, #12
    26d0:	bd30      	pop	{r4, r5, pc}
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	00011935 	.word	0x00011935
    26d8:	2000116c 	.word	0x2000116c
    26dc:	00004175 	.word	0x00004175

000026e0 <Parser_LoraSetNwkSKey>:
{
    26e0:	b510      	push	{r4, lr}
    26e2:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    26e4:	6800      	ldr	r0, [r0, #0]
    26e6:	4b0e      	ldr	r3, [pc, #56]	; (2720 <Parser_LoraSetNwkSKey+0x40>)
    26e8:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    26ea:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    26ec:	2800      	cmp	r0, #0
    26ee:	d104      	bne.n	26fa <Parser_LoraSetNwkSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    26f0:	009b      	lsls	r3, r3, #2
    26f2:	4a0c      	ldr	r2, [pc, #48]	; (2724 <Parser_LoraSetNwkSKey+0x44>)
    26f4:	589b      	ldr	r3, [r3, r2]
    26f6:	6163      	str	r3, [r4, #20]
}
    26f8:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    26fa:	4a0b      	ldr	r2, [pc, #44]	; (2728 <Parser_LoraSetNwkSKey+0x48>)
    26fc:	6821      	ldr	r1, [r4, #0]
    26fe:	2020      	movs	r0, #32
    2700:	4b0a      	ldr	r3, [pc, #40]	; (272c <Parser_LoraSetNwkSKey+0x4c>)
    2702:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2704:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2706:	2800      	cmp	r0, #0
    2708:	d0f2      	beq.n	26f0 <Parser_LoraSetNwkSKey+0x10>
            statusIdx = LORAWAN_SetAttr(NWKS_KEY,aParserData);
    270a:	4907      	ldr	r1, [pc, #28]	; (2728 <Parser_LoraSetNwkSKey+0x48>)
    270c:	2004      	movs	r0, #4
    270e:	4b08      	ldr	r3, [pc, #32]	; (2730 <Parser_LoraSetNwkSKey+0x50>)
    2710:	4798      	blx	r3
    2712:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.nwkskey = 1;
    2714:	4907      	ldr	r1, [pc, #28]	; (2734 <Parser_LoraSetNwkSKey+0x54>)
    2716:	780a      	ldrb	r2, [r1, #0]
    2718:	2010      	movs	r0, #16
    271a:	4302      	orrs	r2, r0
    271c:	700a      	strb	r2, [r1, #0]
    271e:	e7e7      	b.n	26f0 <Parser_LoraSetNwkSKey+0x10>
    2720:	00004141 	.word	0x00004141
    2724:	0001f848 	.word	0x0001f848
    2728:	2000116c 	.word	0x2000116c
    272c:	00004449 	.word	0x00004449
    2730:	00013979 	.word	0x00013979
    2734:	20001f88 	.word	0x20001f88

00002738 <Parser_LoraSetAppSKey>:
{
    2738:	b510      	push	{r4, lr}
    273a:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    273c:	6800      	ldr	r0, [r0, #0]
    273e:	4b0e      	ldr	r3, [pc, #56]	; (2778 <Parser_LoraSetAppSKey+0x40>)
    2740:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    2742:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2744:	2800      	cmp	r0, #0
    2746:	d104      	bne.n	2752 <Parser_LoraSetAppSKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    2748:	009b      	lsls	r3, r3, #2
    274a:	4a0c      	ldr	r2, [pc, #48]	; (277c <Parser_LoraSetAppSKey+0x44>)
    274c:	589b      	ldr	r3, [r3, r2]
    274e:	6163      	str	r3, [r4, #20]
}
    2750:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    2752:	4a0b      	ldr	r2, [pc, #44]	; (2780 <Parser_LoraSetAppSKey+0x48>)
    2754:	6821      	ldr	r1, [r4, #0]
    2756:	2020      	movs	r0, #32
    2758:	4b0a      	ldr	r3, [pc, #40]	; (2784 <Parser_LoraSetAppSKey+0x4c>)
    275a:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    275c:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    275e:	2800      	cmp	r0, #0
    2760:	d0f2      	beq.n	2748 <Parser_LoraSetAppSKey+0x10>
            statusIdx = LORAWAN_SetAttr(APPS_KEY, aParserData);
    2762:	4907      	ldr	r1, [pc, #28]	; (2780 <Parser_LoraSetAppSKey+0x48>)
    2764:	2005      	movs	r0, #5
    2766:	4b08      	ldr	r3, [pc, #32]	; (2788 <Parser_LoraSetAppSKey+0x50>)
    2768:	4798      	blx	r3
    276a:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appskey = 1;
    276c:	4907      	ldr	r1, [pc, #28]	; (278c <Parser_LoraSetAppSKey+0x54>)
    276e:	780a      	ldrb	r2, [r1, #0]
    2770:	2020      	movs	r0, #32
    2772:	4302      	orrs	r2, r0
    2774:	700a      	strb	r2, [r1, #0]
    2776:	e7e7      	b.n	2748 <Parser_LoraSetAppSKey+0x10>
    2778:	00004141 	.word	0x00004141
    277c:	0001f848 	.word	0x0001f848
    2780:	2000116c 	.word	0x2000116c
    2784:	00004449 	.word	0x00004449
    2788:	00013979 	.word	0x00013979
    278c:	20001f88 	.word	0x20001f88

00002790 <Parser_LoraSetAppKey>:
{
    2790:	b510      	push	{r4, lr}
    2792:	0004      	movs	r4, r0
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    2794:	6800      	ldr	r0, [r0, #0]
    2796:	4b0e      	ldr	r3, [pc, #56]	; (27d0 <Parser_LoraSetAppKey+0x40>)
    2798:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    279a:	230a      	movs	r3, #10
    if(Validate_HexValue(pParserCmdInfo->pParam1))
    279c:	2800      	cmp	r0, #0
    279e:	d104      	bne.n	27aa <Parser_LoraSetAppKey+0x1a>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    27a0:	009b      	lsls	r3, r3, #2
    27a2:	4a0c      	ldr	r2, [pc, #48]	; (27d4 <Parser_LoraSetAppKey+0x44>)
    27a4:	589b      	ldr	r3, [r3, r2]
    27a6:	6163      	str	r3, [r4, #20]
}
    27a8:	bd10      	pop	{r4, pc}
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    27aa:	4a0b      	ldr	r2, [pc, #44]	; (27d8 <Parser_LoraSetAppKey+0x48>)
    27ac:	6821      	ldr	r1, [r4, #0]
    27ae:	2020      	movs	r0, #32
    27b0:	4b0a      	ldr	r3, [pc, #40]	; (27dc <Parser_LoraSetAppKey+0x4c>)
    27b2:	4798      	blx	r3
    StackRetStatus_t statusIdx = LORAWAN_INVALID_PARAMETER;
    27b4:	230a      	movs	r3, #10
        if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)aParserData))
    27b6:	2800      	cmp	r0, #0
    27b8:	d0f2      	beq.n	27a0 <Parser_LoraSetAppKey+0x10>
             statusIdx = LORAWAN_SetAttr(APP_KEY,aParserData);
    27ba:	4907      	ldr	r1, [pc, #28]	; (27d8 <Parser_LoraSetAppKey+0x48>)
    27bc:	2003      	movs	r0, #3
    27be:	4b08      	ldr	r3, [pc, #32]	; (27e0 <Parser_LoraSetAppKey+0x50>)
    27c0:	4798      	blx	r3
    27c2:	0003      	movs	r3, r0
            gParserConfiguredJoinParameters.flags.appkey = 1;
    27c4:	4907      	ldr	r1, [pc, #28]	; (27e4 <Parser_LoraSetAppKey+0x54>)
    27c6:	780a      	ldrb	r2, [r1, #0]
    27c8:	2004      	movs	r0, #4
    27ca:	4302      	orrs	r2, r0
    27cc:	700a      	strb	r2, [r1, #0]
    27ce:	e7e7      	b.n	27a0 <Parser_LoraSetAppKey+0x10>
    27d0:	00004141 	.word	0x00004141
    27d4:	0001f848 	.word	0x0001f848
    27d8:	2000116c 	.word	0x2000116c
    27dc:	00004449 	.word	0x00004449
    27e0:	00013979 	.word	0x00013979
    27e4:	20001f88 	.word	0x20001f88

000027e8 <Parser_LoraSetChannelFreq>:
{
    27e8:	b530      	push	{r4, r5, lr}
    27ea:	b085      	sub	sp, #20
    27ec:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    27ee:	220a      	movs	r2, #10
    27f0:	2100      	movs	r1, #0
    27f2:	6840      	ldr	r0, [r0, #4]
    27f4:	4b14      	ldr	r3, [pc, #80]	; (2848 <Parser_LoraSetChannelFreq+0x60>)
    27f6:	4798      	blx	r3
    27f8:	0005      	movs	r5, r0
    ChannelParameters_t ch_params = {0};
    27fa:	2208      	movs	r2, #8
    27fc:	2100      	movs	r1, #0
    27fe:	a801      	add	r0, sp, #4
    2800:	4b12      	ldr	r3, [pc, #72]	; (284c <Parser_LoraSetChannelFreq+0x64>)
    2802:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2804:	210f      	movs	r1, #15
    2806:	4469      	add	r1, sp
    2808:	6820      	ldr	r0, [r4, #0]
    280a:	4b11      	ldr	r3, [pc, #68]	; (2850 <Parser_LoraSetChannelFreq+0x68>)
    280c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    280e:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2810:	2800      	cmp	r0, #0
    2812:	d105      	bne.n	2820 <Parser_LoraSetChannelFreq+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2814:	009b      	lsls	r3, r3, #2
    2816:	4a0f      	ldr	r2, [pc, #60]	; (2854 <Parser_LoraSetChannelFreq+0x6c>)
    2818:	589b      	ldr	r3, [r3, r2]
    281a:	6163      	str	r3, [r4, #20]
}
    281c:	b005      	add	sp, #20
    281e:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
    2820:	2201      	movs	r2, #1
    2822:	4252      	negs	r2, r2
    2824:	210a      	movs	r1, #10
    2826:	6860      	ldr	r0, [r4, #4]
    2828:	4b0b      	ldr	r3, [pc, #44]	; (2858 <Parser_LoraSetChannelFreq+0x70>)
    282a:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    282c:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    282e:	2800      	cmp	r0, #0
    2830:	d0f0      	beq.n	2814 <Parser_LoraSetChannelFreq+0x2c>
        ch_params.channelId = channelId;
    2832:	a901      	add	r1, sp, #4
    2834:	3305      	adds	r3, #5
    2836:	446b      	add	r3, sp
    2838:	781b      	ldrb	r3, [r3, #0]
    283a:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.frequency = (uint32_t)freq;
    283c:	604d      	str	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_FREQUENCY,&ch_params);
    283e:	201a      	movs	r0, #26
    2840:	4b06      	ldr	r3, [pc, #24]	; (285c <Parser_LoraSetChannelFreq+0x74>)
    2842:	4798      	blx	r3
    2844:	0003      	movs	r3, r0
    2846:	e7e5      	b.n	2814 <Parser_LoraSetChannelFreq+0x2c>
    2848:	0001a581 	.word	0x0001a581
    284c:	00019e41 	.word	0x00019e41
    2850:	000041d5 	.word	0x000041d5
    2854:	0001f848 	.word	0x0001f848
    2858:	000042a9 	.word	0x000042a9
    285c:	00013979 	.word	0x00013979

00002860 <Parser_LoraGetChannelFreq>:
{
    2860:	b530      	push	{r4, r5, lr}
    2862:	b083      	sub	sp, #12
    2864:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2866:	4b0d      	ldr	r3, [pc, #52]	; (289c <Parser_LoraGetChannelFreq+0x3c>)
    2868:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    286a:	466b      	mov	r3, sp
    286c:	1cd9      	adds	r1, r3, #3
    286e:	6800      	ldr	r0, [r0, #0]
    2870:	4b0b      	ldr	r3, [pc, #44]	; (28a0 <Parser_LoraGetChannelFreq+0x40>)
    2872:	4798      	blx	r3
    2874:	2800      	cmp	r0, #0
    2876:	d101      	bne.n	287c <Parser_LoraGetChannelFreq+0x1c>
}
    2878:	b003      	add	sp, #12
    287a:	bd30      	pop	{r4, r5, pc}
        status = LORAWAN_GetAttr(CH_PARAM_FREQUENCY,&channelId,&freq);
    287c:	aa01      	add	r2, sp, #4
    287e:	466b      	mov	r3, sp
    2880:	1cd9      	adds	r1, r3, #3
    2882:	201a      	movs	r0, #26
    2884:	4b07      	ldr	r3, [pc, #28]	; (28a4 <Parser_LoraGetChannelFreq+0x44>)
    2886:	4798      	blx	r3
		if(status == LORAWAN_SUCCESS)
    2888:	2808      	cmp	r0, #8
    288a:	d1f5      	bne.n	2878 <Parser_LoraGetChannelFreq+0x18>
			ultoa(aParserData, freq, 10U);
    288c:	4d06      	ldr	r5, [pc, #24]	; (28a8 <Parser_LoraGetChannelFreq+0x48>)
    288e:	220a      	movs	r2, #10
    2890:	9901      	ldr	r1, [sp, #4]
    2892:	0028      	movs	r0, r5
    2894:	4b05      	ldr	r3, [pc, #20]	; (28ac <Parser_LoraGetChannelFreq+0x4c>)
    2896:	4798      	blx	r3
			pParserCmdInfo->pReplyCmd = aParserData;	
    2898:	6165      	str	r5, [r4, #20]
}
    289a:	e7ed      	b.n	2878 <Parser_LoraGetChannelFreq+0x18>
    289c:	0001f5d8 	.word	0x0001f5d8
    28a0:	000041d5 	.word	0x000041d5
    28a4:	00011935 	.word	0x00011935
    28a8:	2000116c 	.word	0x2000116c
    28ac:	0000422d 	.word	0x0000422d

000028b0 <Parser_LoraSetSubBandStatus>:
{
    28b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b2:	46ce      	mov	lr, r9
    28b4:	b500      	push	{lr}
    28b6:	b086      	sub	sp, #24
    28b8:	0006      	movs	r6, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
    28ba:	6840      	ldr	r0, [r0, #4]
    28bc:	4b23      	ldr	r3, [pc, #140]	; (294c <Parser_LoraSetSubBandStatus+0x9c>)
    28be:	4798      	blx	r3
    28c0:	9001      	str	r0, [sp, #4]
    28c2:	0005      	movs	r5, r0
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    28c4:	210f      	movs	r1, #15
    28c6:	ab02      	add	r3, sp, #8
    28c8:	469c      	mov	ip, r3
    28ca:	4461      	add	r1, ip
    28cc:	6830      	ldr	r0, [r6, #0]
    28ce:	4b20      	ldr	r3, [pc, #128]	; (2950 <Parser_LoraSetSubBandStatus+0xa0>)
    28d0:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    28d2:	230a      	movs	r3, #10
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    28d4:	2800      	cmp	r0, #0
    28d6:	d001      	beq.n	28dc <Parser_LoraSetSubBandStatus+0x2c>
    28d8:	2d01      	cmp	r5, #1
    28da:	d907      	bls.n	28ec <Parser_LoraSetSubBandStatus+0x3c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    28dc:	009b      	lsls	r3, r3, #2
    28de:	4a1d      	ldr	r2, [pc, #116]	; (2954 <Parser_LoraSetSubBandStatus+0xa4>)
    28e0:	589b      	ldr	r3, [r3, r2]
    28e2:	6173      	str	r3, [r6, #20]
}
    28e4:	b006      	add	sp, #24
    28e6:	bc04      	pop	{r2}
    28e8:	4691      	mov	r9, r2
    28ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (subBandId >= 1) && 
    28ec:	3305      	adds	r3, #5
    28ee:	aa02      	add	r2, sp, #8
    28f0:	4694      	mov	ip, r2
    28f2:	4463      	add	r3, ip
    28f4:	781a      	ldrb	r2, [r3, #0]
            (validationVal < 2U) && 
    28f6:	1e51      	subs	r1, r2, #1
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    28f8:	230a      	movs	r3, #10
            (validationVal < 2U) && 
    28fa:	2907      	cmp	r1, #7
    28fc:	d8ee      	bhi.n	28dc <Parser_LoraSetSubBandStatus+0x2c>
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    28fe:	00cc      	lsls	r4, r1, #3
    2900:	b2e4      	uxtb	r4, r4
    2902:	00d3      	lsls	r3, r2, #3
    2904:	3b01      	subs	r3, #1
    2906:	429c      	cmp	r4, r3
    2908:	dc14      	bgt.n	2934 <Parser_LoraSetSubBandStatus+0x84>
			   ch_params.channelId = i;
    290a:	af03      	add	r7, sp, #12
			   ch_params.channelAttr.status = validationVal;
    290c:	1e6b      	subs	r3, r5, #1
    290e:	419d      	sbcs	r5, r3
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    2910:	4b11      	ldr	r3, [pc, #68]	; (2958 <Parser_LoraSetSubBandStatus+0xa8>)
    2912:	4699      	mov	r9, r3
			   ch_params.channelId = i;
    2914:	703c      	strb	r4, [r7, #0]
			   ch_params.channelAttr.status = validationVal;
    2916:	713d      	strb	r5, [r7, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    2918:	0039      	movs	r1, r7
    291a:	201c      	movs	r0, #28
    291c:	47c8      	blx	r9
           for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    291e:	3401      	adds	r4, #1
    2920:	b2e4      	uxtb	r4, r4
    2922:	230f      	movs	r3, #15
    2924:	aa02      	add	r2, sp, #8
    2926:	4694      	mov	ip, r2
    2928:	4463      	add	r3, ip
    292a:	781a      	ldrb	r2, [r3, #0]
    292c:	00d3      	lsls	r3, r2, #3
    292e:	3b01      	subs	r3, #1
    2930:	429c      	cmp	r4, r3
    2932:	ddef      	ble.n	2914 <Parser_LoraSetSubBandStatus+0x64>
               ch_params.channelId = (63 + subBandId);
    2934:	a903      	add	r1, sp, #12
    2936:	323f      	adds	r2, #63	; 0x3f
    2938:	700a      	strb	r2, [r1, #0]
               ch_params.channelAttr.status = validationVal;
    293a:	9a01      	ldr	r2, [sp, #4]
    293c:	1e53      	subs	r3, r2, #1
    293e:	419a      	sbcs	r2, r3
    2940:	710a      	strb	r2, [r1, #4]
               status = LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    2942:	201c      	movs	r0, #28
    2944:	4b04      	ldr	r3, [pc, #16]	; (2958 <Parser_LoraSetSubBandStatus+0xa8>)
    2946:	4798      	blx	r3
    2948:	0003      	movs	r3, r0
    294a:	e7c7      	b.n	28dc <Parser_LoraSetSubBandStatus+0x2c>
    294c:	0000437d 	.word	0x0000437d
    2950:	000041d5 	.word	0x000041d5
    2954:	0001f848 	.word	0x0001f848
    2958:	00013979 	.word	0x00013979

0000295c <Parser_LoraGetSubBandStatus>:
{
    295c:	b5f0      	push	{r4, r5, r6, r7, lr}
    295e:	46c6      	mov	lr, r8
    2960:	b500      	push	{lr}
    2962:	b082      	sub	sp, #8
    2964:	0006      	movs	r6, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2966:	4b23      	ldr	r3, [pc, #140]	; (29f4 <Parser_LoraGetSubBandStatus+0x98>)
    2968:	6143      	str	r3, [r0, #20]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    296a:	466b      	mov	r3, sp
    296c:	1dd9      	adds	r1, r3, #7
    296e:	6800      	ldr	r0, [r0, #0]
    2970:	4b21      	ldr	r3, [pc, #132]	; (29f8 <Parser_LoraGetSubBandStatus+0x9c>)
    2972:	4798      	blx	r3
    2974:	2800      	cmp	r0, #0
    2976:	d030      	beq.n	29da <Parser_LoraGetSubBandStatus+0x7e>
            (subBandId >= 1) && 
    2978:	466b      	mov	r3, sp
    297a:	79da      	ldrb	r2, [r3, #7]
    if (Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &subBandId) && 
    297c:	1e53      	subs	r3, r2, #1
    297e:	2b07      	cmp	r3, #7
    2980:	d82b      	bhi.n	29da <Parser_LoraGetSubBandStatus+0x7e>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    2982:	00dc      	lsls	r4, r3, #3
    2984:	b2e4      	uxtb	r4, r4
    2986:	00d3      	lsls	r3, r2, #3
    2988:	3b01      	subs	r3, #1
    298a:	429c      	cmp	r4, r3
    298c:	dc1b      	bgt.n	29c6 <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
    298e:	466b      	mov	r3, sp
    2990:	1ddd      	adds	r5, r3, #7
    2992:	4f1a      	ldr	r7, [pc, #104]	; (29fc <Parser_LoraGetSubBandStatus+0xa0>)
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2994:	4b1a      	ldr	r3, [pc, #104]	; (2a00 <Parser_LoraGetSubBandStatus+0xa4>)
    2996:	4698      	mov	r8, r3
    2998:	e006      	b.n	29a8 <Parser_LoraGetSubBandStatus+0x4c>
        for (i = ((subBandId - 1) * 8); i <= ((subBandId * 8) - 1); i++)
    299a:	3401      	adds	r4, #1
    299c:	b2e4      	uxtb	r4, r4
    299e:	782a      	ldrb	r2, [r5, #0]
    29a0:	00d3      	lsls	r3, r2, #3
    29a2:	3b01      	subs	r3, #1
    29a4:	429c      	cmp	r4, r3
    29a6:	dc0e      	bgt.n	29c6 <Parser_LoraGetSubBandStatus+0x6a>
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &subBandId, &chStatus) == LORAWAN_SUCCESS)
    29a8:	466b      	mov	r3, sp
    29aa:	1d9a      	adds	r2, r3, #6
    29ac:	0029      	movs	r1, r5
    29ae:	201c      	movs	r0, #28
    29b0:	47b8      	blx	r7
    29b2:	2808      	cmp	r0, #8
    29b4:	d1f1      	bne.n	299a <Parser_LoraGetSubBandStatus+0x3e>
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    29b6:	466b      	mov	r3, sp
    29b8:	3306      	adds	r3, #6
    29ba:	781b      	ldrb	r3, [r3, #0]
    29bc:	009b      	lsls	r3, r3, #2
    29be:	4642      	mov	r2, r8
    29c0:	589b      	ldr	r3, [r3, r2]
    29c2:	6173      	str	r3, [r6, #20]
    29c4:	e7e9      	b.n	299a <Parser_LoraGetSubBandStatus+0x3e>
             uint8_t chId = 63 + subBandId;
    29c6:	466b      	mov	r3, sp
    29c8:	1d59      	adds	r1, r3, #5
    29ca:	323f      	adds	r2, #63	; 0x3f
    29cc:	700a      	strb	r2, [r1, #0]
             if(LORAWAN_GetAttr(CH_PARAM_STATUS, &chId, &chStatus) == LORAWAN_SUCCESS)
    29ce:	1d9a      	adds	r2, r3, #6
    29d0:	201c      	movs	r0, #28
    29d2:	4b0a      	ldr	r3, [pc, #40]	; (29fc <Parser_LoraGetSubBandStatus+0xa0>)
    29d4:	4798      	blx	r3
    29d6:	2808      	cmp	r0, #8
    29d8:	d003      	beq.n	29e2 <Parser_LoraGetSubBandStatus+0x86>
}
    29da:	b002      	add	sp, #8
    29dc:	bc04      	pop	{r2}
    29de:	4690      	mov	r8, r2
    29e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    29e2:	466b      	mov	r3, sp
    29e4:	3306      	adds	r3, #6
    29e6:	781b      	ldrb	r3, [r3, #0]
    29e8:	009b      	lsls	r3, r3, #2
    29ea:	4a05      	ldr	r2, [pc, #20]	; (2a00 <Parser_LoraGetSubBandStatus+0xa4>)
    29ec:	589b      	ldr	r3, [r3, r2]
    29ee:	6173      	str	r3, [r6, #20]
}
    29f0:	e7f3      	b.n	29da <Parser_LoraGetSubBandStatus+0x7e>
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	0001f5d8 	.word	0x0001f5d8
    29f8:	000041d5 	.word	0x000041d5
    29fc:	00011935 	.word	0x00011935
    2a00:	0001f828 	.word	0x0001f828

00002a04 <Parser_LoraSetChannelStatus>:
{
    2a04:	b570      	push	{r4, r5, r6, lr}
    2a06:	b084      	sub	sp, #16
    2a08:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
    2a0a:	2208      	movs	r2, #8
    2a0c:	2100      	movs	r1, #0
    2a0e:	a801      	add	r0, sp, #4
    2a10:	4b11      	ldr	r3, [pc, #68]	; (2a58 <Parser_LoraSetChannelStatus+0x54>)
    2a12:	4798      	blx	r3
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam2);
    2a14:	6860      	ldr	r0, [r4, #4]
    2a16:	4b11      	ldr	r3, [pc, #68]	; (2a5c <Parser_LoraSetChannelStatus+0x58>)
    2a18:	4798      	blx	r3
    2a1a:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
    2a1c:	210f      	movs	r1, #15
    2a1e:	4469      	add	r1, sp
    2a20:	6820      	ldr	r0, [r4, #0]
    2a22:	4b0f      	ldr	r3, [pc, #60]	; (2a60 <Parser_LoraSetChannelStatus+0x5c>)
    2a24:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2a26:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&(validationVal < 2U))
    2a28:	2800      	cmp	r0, #0
    2a2a:	d001      	beq.n	2a30 <Parser_LoraSetChannelStatus+0x2c>
    2a2c:	2d01      	cmp	r5, #1
    2a2e:	d905      	bls.n	2a3c <Parser_LoraSetChannelStatus+0x38>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2a30:	009b      	lsls	r3, r3, #2
    2a32:	4a0c      	ldr	r2, [pc, #48]	; (2a64 <Parser_LoraSetChannelStatus+0x60>)
    2a34:	589b      	ldr	r3, [r3, r2]
    2a36:	6163      	str	r3, [r4, #20]
}
    2a38:	b004      	add	sp, #16
    2a3a:	bd70      	pop	{r4, r5, r6, pc}
        ch_params.channelId = channelId;
    2a3c:	a901      	add	r1, sp, #4
    2a3e:	3305      	adds	r3, #5
    2a40:	446b      	add	r3, sp
    2a42:	781b      	ldrb	r3, [r3, #0]
    2a44:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.status = validationVal;
    2a46:	1e6b      	subs	r3, r5, #1
    2a48:	419d      	sbcs	r5, r3
    2a4a:	710d      	strb	r5, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_STATUS,&ch_params);
    2a4c:	201c      	movs	r0, #28
    2a4e:	4b06      	ldr	r3, [pc, #24]	; (2a68 <Parser_LoraSetChannelStatus+0x64>)
    2a50:	4798      	blx	r3
    2a52:	0003      	movs	r3, r0
    2a54:	e7ec      	b.n	2a30 <Parser_LoraSetChannelStatus+0x2c>
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	00019e41 	.word	0x00019e41
    2a5c:	0000437d 	.word	0x0000437d
    2a60:	000041d5 	.word	0x000041d5
    2a64:	0001f848 	.word	0x0001f848
    2a68:	00013979 	.word	0x00013979

00002a6c <Parser_LoraGetChannelStatus>:
{
    2a6c:	b510      	push	{r4, lr}
    2a6e:	b082      	sub	sp, #8
    2a70:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2a72:	4b0d      	ldr	r3, [pc, #52]	; (2aa8 <Parser_LoraGetChannelStatus+0x3c>)
    2a74:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    2a76:	466b      	mov	r3, sp
    2a78:	1d99      	adds	r1, r3, #6
    2a7a:	6800      	ldr	r0, [r0, #0]
    2a7c:	4b0b      	ldr	r3, [pc, #44]	; (2aac <Parser_LoraGetChannelStatus+0x40>)
    2a7e:	4798      	blx	r3
    2a80:	2800      	cmp	r0, #0
    2a82:	d101      	bne.n	2a88 <Parser_LoraGetChannelStatus+0x1c>
}
    2a84:	b002      	add	sp, #8
    2a86:	bd10      	pop	{r4, pc}
        if(LORAWAN_GetAttr(CH_PARAM_STATUS,&channelId,&chStatus) == LORAWAN_SUCCESS)
    2a88:	466b      	mov	r3, sp
    2a8a:	1dda      	adds	r2, r3, #7
    2a8c:	1d99      	adds	r1, r3, #6
    2a8e:	201c      	movs	r0, #28
    2a90:	4b07      	ldr	r3, [pc, #28]	; (2ab0 <Parser_LoraGetChannelStatus+0x44>)
    2a92:	4798      	blx	r3
    2a94:	2808      	cmp	r0, #8
    2a96:	d1f5      	bne.n	2a84 <Parser_LoraGetChannelStatus+0x18>
			pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[chStatus];
    2a98:	466b      	mov	r3, sp
    2a9a:	3307      	adds	r3, #7
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	009b      	lsls	r3, r3, #2
    2aa0:	4a04      	ldr	r2, [pc, #16]	; (2ab4 <Parser_LoraGetChannelStatus+0x48>)
    2aa2:	589b      	ldr	r3, [r3, r2]
    2aa4:	6163      	str	r3, [r4, #20]
}
    2aa6:	e7ed      	b.n	2a84 <Parser_LoraGetChannelStatus+0x18>
    2aa8:	0001f5d8 	.word	0x0001f5d8
    2aac:	000041d5 	.word	0x000041d5
    2ab0:	00011935 	.word	0x00011935
    2ab4:	0001f828 	.word	0x0001f828

00002ab8 <Parser_LoraSetDatarateRange>:
{
    2ab8:	b510      	push	{r4, lr}
    2aba:	b084      	sub	sp, #16
    2abc:	0004      	movs	r4, r0
    ChannelParameters_t ch_params = {0};
    2abe:	2208      	movs	r2, #8
    2ac0:	2100      	movs	r1, #0
    2ac2:	a801      	add	r0, sp, #4
    2ac4:	4b1c      	ldr	r3, [pc, #112]	; (2b38 <Parser_LoraSetDatarateRange+0x80>)
    2ac6:	4798      	blx	r3
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2ac8:	210f      	movs	r1, #15
    2aca:	4469      	add	r1, sp
    2acc:	6820      	ldr	r0, [r4, #0]
    2ace:	4b1b      	ldr	r3, [pc, #108]	; (2b3c <Parser_LoraSetDatarateRange+0x84>)
    2ad0:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2ad2:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2ad4:	2800      	cmp	r0, #0
    2ad6:	d105      	bne.n	2ae4 <Parser_LoraSetDatarateRange+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2ad8:	009b      	lsls	r3, r3, #2
    2ada:	4a19      	ldr	r2, [pc, #100]	; (2b40 <Parser_LoraSetDatarateRange+0x88>)
    2adc:	589b      	ldr	r3, [r3, r2]
    2ade:	6163      	str	r3, [r4, #20]
}
    2ae0:	b004      	add	sp, #16
    2ae2:	bd10      	pop	{r4, pc}
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    2ae4:	210e      	movs	r1, #14
    2ae6:	4469      	add	r1, sp
    2ae8:	6860      	ldr	r0, [r4, #4]
    2aea:	4b14      	ldr	r3, [pc, #80]	; (2b3c <Parser_LoraSetDatarateRange+0x84>)
    2aec:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2aee:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId) &&
    2af0:	2800      	cmp	r0, #0
    2af2:	d0f1      	beq.n	2ad8 <Parser_LoraSetDatarateRange+0x20>
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    2af4:	210d      	movs	r1, #13
    2af6:	4469      	add	r1, sp
    2af8:	68a0      	ldr	r0, [r4, #8]
    2afa:	4b10      	ldr	r3, [pc, #64]	; (2b3c <Parser_LoraSetDatarateRange+0x84>)
    2afc:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2afe:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam2, &minDr) &&
    2b00:	2800      	cmp	r0, #0
    2b02:	d0e9      	beq.n	2ad8 <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    2b04:	3304      	adds	r3, #4
    2b06:	446b      	add	r3, sp
    2b08:	7818      	ldrb	r0, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b0a:	230a      	movs	r3, #10
       Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam3, &maxDr) &&
    2b0c:	280f      	cmp	r0, #15
    2b0e:	d8e3      	bhi.n	2ad8 <Parser_LoraSetDatarateRange+0x20>
       minDr < 16 && maxDr < 16)
    2b10:	3303      	adds	r3, #3
    2b12:	446b      	add	r3, sp
    2b14:	781a      	ldrb	r2, [r3, #0]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2b16:	230a      	movs	r3, #10
       minDr < 16 && maxDr < 16)
    2b18:	2a0f      	cmp	r2, #15
    2b1a:	d8dd      	bhi.n	2ad8 <Parser_LoraSetDatarateRange+0x20>
        ch_params.channelId = channelId;
    2b1c:	a901      	add	r1, sp, #4
    2b1e:	3305      	adds	r3, #5
    2b20:	446b      	add	r3, sp
    2b22:	781b      	ldrb	r3, [r3, #0]
    2b24:	700b      	strb	r3, [r1, #0]
        ch_params.channelAttr.dataRange = ((maxDr << 4) | minDr);
    2b26:	0112      	lsls	r2, r2, #4
    2b28:	4302      	orrs	r2, r0
    2b2a:	710a      	strb	r2, [r1, #4]
        status = LORAWAN_SetAttr(CH_PARAM_DR_RANGE, &ch_params);
    2b2c:	201b      	movs	r0, #27
    2b2e:	4b05      	ldr	r3, [pc, #20]	; (2b44 <Parser_LoraSetDatarateRange+0x8c>)
    2b30:	4798      	blx	r3
    2b32:	0003      	movs	r3, r0
    2b34:	e7d0      	b.n	2ad8 <Parser_LoraSetDatarateRange+0x20>
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	00019e41 	.word	0x00019e41
    2b3c:	000041d5 	.word	0x000041d5
    2b40:	0001f848 	.word	0x0001f848
    2b44:	00013979 	.word	0x00013979

00002b48 <Parser_LoraGetDatarateRange>:
{
    2b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b4a:	b083      	sub	sp, #12
    2b4c:	0004      	movs	r4, r0
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2b4e:	4b15      	ldr	r3, [pc, #84]	; (2ba4 <Parser_LoraGetDatarateRange+0x5c>)
    2b50:	6143      	str	r3, [r0, #20]
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &channelId))
    2b52:	466b      	mov	r3, sp
    2b54:	1dd9      	adds	r1, r3, #7
    2b56:	6800      	ldr	r0, [r0, #0]
    2b58:	4b13      	ldr	r3, [pc, #76]	; (2ba8 <Parser_LoraGetDatarateRange+0x60>)
    2b5a:	4798      	blx	r3
    2b5c:	2800      	cmp	r0, #0
    2b5e:	d101      	bne.n	2b64 <Parser_LoraGetDatarateRange+0x1c>
}
    2b60:	b003      	add	sp, #12
    2b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(LORAWAN_GetAttr(CH_PARAM_DR_RANGE,&channelId,&drRange) == LORAWAN_SUCCESS)
    2b64:	466b      	mov	r3, sp
    2b66:	1d9a      	adds	r2, r3, #6
    2b68:	1dd9      	adds	r1, r3, #7
    2b6a:	201b      	movs	r0, #27
    2b6c:	4b0f      	ldr	r3, [pc, #60]	; (2bac <Parser_LoraGetDatarateRange+0x64>)
    2b6e:	4798      	blx	r3
    2b70:	2808      	cmp	r0, #8
    2b72:	d1f5      	bne.n	2b60 <Parser_LoraGetDatarateRange+0x18>
			minDr = drRange & 0x0F;
    2b74:	466b      	mov	r3, sp
    2b76:	799e      	ldrb	r6, [r3, #6]
			itoa(minDr, aParserData, 10U);
    2b78:	4d0d      	ldr	r5, [pc, #52]	; (2bb0 <Parser_LoraGetDatarateRange+0x68>)
    2b7a:	3007      	adds	r0, #7
    2b7c:	4030      	ands	r0, r6
    2b7e:	220a      	movs	r2, #10
    2b80:	0029      	movs	r1, r5
    2b82:	4f0c      	ldr	r7, [pc, #48]	; (2bb4 <Parser_LoraGetDatarateRange+0x6c>)
    2b84:	47b8      	blx	r7
			crtIdx = strlen(aParserData);
    2b86:	0028      	movs	r0, r5
    2b88:	4b0b      	ldr	r3, [pc, #44]	; (2bb8 <Parser_LoraGetDatarateRange+0x70>)
    2b8a:	4798      	blx	r3
			aParserData[crtIdx] = ' ';
    2b8c:	0403      	lsls	r3, r0, #16
    2b8e:	0c1b      	lsrs	r3, r3, #16
    2b90:	2220      	movs	r2, #32
    2b92:	54ea      	strb	r2, [r5, r3]
			crtIdx ++;
    2b94:	3001      	adds	r0, #1
			itoa(maxDr, &aParserData[crtIdx], 10U);
    2b96:	b281      	uxth	r1, r0
    2b98:	1949      	adds	r1, r1, r5
    2b9a:	0930      	lsrs	r0, r6, #4
    2b9c:	3a16      	subs	r2, #22
    2b9e:	47b8      	blx	r7
			pParserCmdInfo->pReplyCmd = aParserData;
    2ba0:	6165      	str	r5, [r4, #20]
}
    2ba2:	e7dd      	b.n	2b60 <Parser_LoraGetDatarateRange+0x18>
    2ba4:	0001f5d8 	.word	0x0001f5d8
    2ba8:	000041d5 	.word	0x000041d5
    2bac:	00011935 	.word	0x00011935
    2bb0:	2000116c 	.word	0x2000116c
    2bb4:	000196c9 	.word	0x000196c9
    2bb8:	0001a275 	.word	0x0001a275

00002bbc <Parser_LoraSetTxPower>:
{
    2bbc:	b510      	push	{r4, lr}
    2bbe:	b082      	sub	sp, #8
    2bc0:	0004      	movs	r4, r0
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPower)))
    2bc2:	466b      	mov	r3, sp
    2bc4:	1dd9      	adds	r1, r3, #7
    2bc6:	6800      	ldr	r0, [r0, #0]
    2bc8:	4b08      	ldr	r3, [pc, #32]	; (2bec <Parser_LoraSetTxPower+0x30>)
    2bca:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2bcc:	230a      	movs	r3, #10
    if((Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &txPower)))
    2bce:	2800      	cmp	r0, #0
    2bd0:	d105      	bne.n	2bde <Parser_LoraSetTxPower+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2bd2:	009b      	lsls	r3, r3, #2
    2bd4:	4a06      	ldr	r2, [pc, #24]	; (2bf0 <Parser_LoraSetTxPower+0x34>)
    2bd6:	589b      	ldr	r3, [r3, r2]
    2bd8:	6163      	str	r3, [r4, #20]
}
    2bda:	b002      	add	sp, #8
    2bdc:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(TX_POWER, &txPower);
    2bde:	466b      	mov	r3, sp
    2be0:	1dd9      	adds	r1, r3, #7
    2be2:	2008      	movs	r0, #8
    2be4:	4b03      	ldr	r3, [pc, #12]	; (2bf4 <Parser_LoraSetTxPower+0x38>)
    2be6:	4798      	blx	r3
    2be8:	0003      	movs	r3, r0
    2bea:	e7f2      	b.n	2bd2 <Parser_LoraSetTxPower+0x16>
    2bec:	000041d5 	.word	0x000041d5
    2bf0:	0001f848 	.word	0x0001f848
    2bf4:	00013979 	.word	0x00013979

00002bf8 <Parser_LoraGetTxPower>:
{
    2bf8:	b570      	push	{r4, r5, r6, lr}
    2bfa:	b082      	sub	sp, #8
    2bfc:	0006      	movs	r6, r0
    LORAWAN_GetAttr(TX_POWER,NULL,&txPowerIdx);
    2bfe:	466b      	mov	r3, sp
    2c00:	1ddd      	adds	r5, r3, #7
    2c02:	002a      	movs	r2, r5
    2c04:	2100      	movs	r1, #0
    2c06:	2008      	movs	r0, #8
    2c08:	4b05      	ldr	r3, [pc, #20]	; (2c20 <Parser_LoraGetTxPower+0x28>)
    2c0a:	4798      	blx	r3
    itoa( txPowerIdx, aParserData, 10);
    2c0c:	4c05      	ldr	r4, [pc, #20]	; (2c24 <Parser_LoraGetTxPower+0x2c>)
    2c0e:	7828      	ldrb	r0, [r5, #0]
    2c10:	220a      	movs	r2, #10
    2c12:	0021      	movs	r1, r4
    2c14:	4b04      	ldr	r3, [pc, #16]	; (2c28 <Parser_LoraGetTxPower+0x30>)
    2c16:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2c18:	6174      	str	r4, [r6, #20]
}
    2c1a:	b002      	add	sp, #8
    2c1c:	bd70      	pop	{r4, r5, r6, pc}
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	00011935 	.word	0x00011935
    2c24:	2000116c 	.word	0x2000116c
    2c28:	000196c9 	.word	0x000196c9

00002c2c <Parser_LoraPause>:
{
    2c2c:	b570      	push	{r4, r5, r6, lr}
    2c2e:	0005      	movs	r5, r0
    resumeInterval = LORAWAN_Pause();
    2c30:	4b04      	ldr	r3, [pc, #16]	; (2c44 <Parser_LoraPause+0x18>)
    2c32:	4798      	blx	r3
    2c34:	0001      	movs	r1, r0
    ultoa(aParserData, resumeInterval, 10);
    2c36:	4c04      	ldr	r4, [pc, #16]	; (2c48 <Parser_LoraPause+0x1c>)
    2c38:	220a      	movs	r2, #10
    2c3a:	0020      	movs	r0, r4
    2c3c:	4b03      	ldr	r3, [pc, #12]	; (2c4c <Parser_LoraPause+0x20>)
    2c3e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2c40:	616c      	str	r4, [r5, #20]
}
    2c42:	bd70      	pop	{r4, r5, r6, pc}
    2c44:	00010615 	.word	0x00010615
    2c48:	2000116c 	.word	0x2000116c
    2c4c:	0000422d 	.word	0x0000422d

00002c50 <Parser_LoraResume>:
{
    2c50:	b510      	push	{r4, lr}
    2c52:	0004      	movs	r4, r0
    LORAWAN_Resume();
    2c54:	4b02      	ldr	r3, [pc, #8]	; (2c60 <Parser_LoraResume+0x10>)
    2c56:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    2c58:	4b02      	ldr	r3, [pc, #8]	; (2c64 <Parser_LoraResume+0x14>)
    2c5a:	6163      	str	r3, [r4, #20]
}
    2c5c:	bd10      	pop	{r4, pc}
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	000106d9 	.word	0x000106d9
    2c64:	0001f7c4 	.word	0x0001f7c4

00002c68 <Parser_LoraSave>:
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    2c68:	4b01      	ldr	r3, [pc, #4]	; (2c70 <Parser_LoraSave+0x8>)
    2c6a:	6143      	str	r3, [r0, #20]
}
    2c6c:	4770      	bx	lr
    2c6e:	46c0      	nop			; (mov r8, r8)
    2c70:	0001f7c4 	.word	0x0001f7c4

00002c74 <Parser_LoraSetRx2WindowParams>:
{
    2c74:	b530      	push	{r4, r5, lr}
    2c76:	b085      	sub	sp, #20
    2c78:	0004      	movs	r4, r0
    unsigned long freq = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    2c7a:	220a      	movs	r2, #10
    2c7c:	2100      	movs	r1, #0
    2c7e:	6840      	ldr	r0, [r0, #4]
    2c80:	4b12      	ldr	r3, [pc, #72]	; (2ccc <Parser_LoraSetRx2WindowParams+0x58>)
    2c82:	4798      	blx	r3
    2c84:	0005      	movs	r5, r0
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    2c86:	210f      	movs	r1, #15
    2c88:	4469      	add	r1, sp
    2c8a:	6820      	ldr	r0, [r4, #0]
    2c8c:	4b10      	ldr	r3, [pc, #64]	; (2cd0 <Parser_LoraSetRx2WindowParams+0x5c>)
    2c8e:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2c90:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    2c92:	2800      	cmp	r0, #0
    2c94:	d105      	bne.n	2ca2 <Parser_LoraSetRx2WindowParams+0x2e>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2c96:	009b      	lsls	r3, r3, #2
    2c98:	4a0e      	ldr	r2, [pc, #56]	; (2cd4 <Parser_LoraSetRx2WindowParams+0x60>)
    2c9a:	589b      	ldr	r3, [r3, r2]
    2c9c:	6163      	str	r3, [r4, #20]
}
    2c9e:	b005      	add	sp, #20
    2ca0:	bd30      	pop	{r4, r5, pc}
       Validate_UintDecAsciiValue(pParserCmdInfo->pParam2, 10, UINT32_MAX))
    2ca2:	2201      	movs	r2, #1
    2ca4:	4252      	negs	r2, r2
    2ca6:	210a      	movs	r1, #10
    2ca8:	6860      	ldr	r0, [r4, #4]
    2caa:	4b0b      	ldr	r3, [pc, #44]	; (2cd8 <Parser_LoraSetRx2WindowParams+0x64>)
    2cac:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2cae:	230a      	movs	r3, #10
    if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &datarate) &&
    2cb0:	2800      	cmp	r0, #0
    2cb2:	d0f0      	beq.n	2c96 <Parser_LoraSetRx2WindowParams+0x22>
        rx2Params.dataRate = datarate;
    2cb4:	a901      	add	r1, sp, #4
    2cb6:	3305      	adds	r3, #5
    2cb8:	446b      	add	r3, sp
    2cba:	781b      	ldrb	r3, [r3, #0]
    2cbc:	710b      	strb	r3, [r1, #4]
        rx2Params.frequency = freq;
    2cbe:	9501      	str	r5, [sp, #4]
        status = LORAWAN_SetAttr(RX2_WINDOW_PARAMS,&rx2Params);
    2cc0:	2015      	movs	r0, #21
    2cc2:	4b06      	ldr	r3, [pc, #24]	; (2cdc <Parser_LoraSetRx2WindowParams+0x68>)
    2cc4:	4798      	blx	r3
    2cc6:	0003      	movs	r3, r0
    2cc8:	e7e5      	b.n	2c96 <Parser_LoraSetRx2WindowParams+0x22>
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	0001a581 	.word	0x0001a581
    2cd0:	000041d5 	.word	0x000041d5
    2cd4:	0001f848 	.word	0x0001f848
    2cd8:	000042a9 	.word	0x000042a9
    2cdc:	00013979 	.word	0x00013979

00002ce0 <Parser_LoraGetRx2WindowParams>:
{
    2ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ce2:	b083      	sub	sp, #12
    2ce4:	0004      	movs	r4, r0
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_INVALID_PARAMETER];
    2ce6:	4b11      	ldr	r3, [pc, #68]	; (2d2c <Parser_LoraGetRx2WindowParams+0x4c>)
    2ce8:	6143      	str	r3, [r0, #20]
    if(LORAWAN_GetAttr(RX2_WINDOW_PARAMS, NULL, &rx2Params) == LORAWAN_SUCCESS)
    2cea:	466a      	mov	r2, sp
    2cec:	2100      	movs	r1, #0
    2cee:	2015      	movs	r0, #21
    2cf0:	4b0f      	ldr	r3, [pc, #60]	; (2d30 <Parser_LoraGetRx2WindowParams+0x50>)
    2cf2:	4798      	blx	r3
    2cf4:	2808      	cmp	r0, #8
    2cf6:	d001      	beq.n	2cfc <Parser_LoraGetRx2WindowParams+0x1c>
}
    2cf8:	b003      	add	sp, #12
    2cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		freq = rx2Params.frequency;
    2cfc:	9f00      	ldr	r7, [sp, #0]
		ultoa(aParserData, datarate, 10U);
    2cfe:	466b      	mov	r3, sp
    2d00:	7919      	ldrb	r1, [r3, #4]
    2d02:	4d0c      	ldr	r5, [pc, #48]	; (2d34 <Parser_LoraGetRx2WindowParams+0x54>)
    2d04:	220a      	movs	r2, #10
    2d06:	0028      	movs	r0, r5
    2d08:	4e0b      	ldr	r6, [pc, #44]	; (2d38 <Parser_LoraGetRx2WindowParams+0x58>)
    2d0a:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    2d0c:	0028      	movs	r0, r5
    2d0e:	4b0b      	ldr	r3, [pc, #44]	; (2d3c <Parser_LoraGetRx2WindowParams+0x5c>)
    2d10:	4798      	blx	r3
		aParserData[dataLen ++] = ' ';
    2d12:	23ff      	movs	r3, #255	; 0xff
    2d14:	4003      	ands	r3, r0
    2d16:	2220      	movs	r2, #32
    2d18:	54ea      	strb	r2, [r5, r3]
    2d1a:	3001      	adds	r0, #1
		ultoa(&aParserData[dataLen], freq, 10U);
    2d1c:	b2c0      	uxtb	r0, r0
    2d1e:	1940      	adds	r0, r0, r5
    2d20:	3a16      	subs	r2, #22
    2d22:	0039      	movs	r1, r7
    2d24:	47b0      	blx	r6
		pParserCmdInfo->pReplyCmd = aParserData;
    2d26:	6165      	str	r5, [r4, #20]
}
    2d28:	e7e6      	b.n	2cf8 <Parser_LoraGetRx2WindowParams+0x18>
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	0001f5d8 	.word	0x0001f5d8
    2d30:	00011935 	.word	0x00011935
    2d34:	2000116c 	.word	0x2000116c
    2d38:	0000422d 	.word	0x0000422d
    2d3c:	0001a275 	.word	0x0001a275

00002d40 <Parser_LoraSetLbt>:
{
    2d40:	b570      	push	{r4, r5, r6, lr}
    2d42:	b084      	sub	sp, #16
    2d44:	0004      	movs	r4, r0
	lorawanLBTParams.lbtScanPeriod = atoi(pParserCmdInfo->pParam1);
    2d46:	6800      	ldr	r0, [r0, #0]
    2d48:	4e0f      	ldr	r6, [pc, #60]	; (2d88 <Parser_LoraSetLbt+0x48>)
    2d4a:	47b0      	blx	r6
    2d4c:	ad02      	add	r5, sp, #8
    2d4e:	8028      	strh	r0, [r5, #0]
	lorawanLBTParams.lbtThreshold = strtoul(pParserCmdInfo->pParam2, &pEnd, 10) ;
    2d50:	220a      	movs	r2, #10
    2d52:	a901      	add	r1, sp, #4
    2d54:	6860      	ldr	r0, [r4, #4]
    2d56:	4b0d      	ldr	r3, [pc, #52]	; (2d8c <Parser_LoraSetLbt+0x4c>)
    2d58:	4798      	blx	r3
    2d5a:	8068      	strh	r0, [r5, #2]
	lorawanLBTParams.maxRetryChannels = atoi(pParserCmdInfo->pParam3);
    2d5c:	68a0      	ldr	r0, [r4, #8]
    2d5e:	47b0      	blx	r6
    2d60:	80a8      	strh	r0, [r5, #4]
	lorawanLBTParams.lbtNumOfSamples = atoi(pParserCmdInfo->pParam4);
    2d62:	68e0      	ldr	r0, [r4, #12]
    2d64:	47b0      	blx	r6
    2d66:	71a8      	strb	r0, [r5, #6]
	lorawanLBTParams.lbtTransmitOn = atoi(pParserCmdInfo->pParam5);
    2d68:	6920      	ldr	r0, [r4, #16]
    2d6a:	47b0      	blx	r6
    2d6c:	1e43      	subs	r3, r0, #1
    2d6e:	4198      	sbcs	r0, r3
    2d70:	71e8      	strb	r0, [r5, #7]
	status = LORAWAN_SetAttr(LORAWAN_LBT_PARAMS, &lorawanLBTParams);
    2d72:	0029      	movs	r1, r5
    2d74:	2027      	movs	r0, #39	; 0x27
    2d76:	4b06      	ldr	r3, [pc, #24]	; (2d90 <Parser_LoraSetLbt+0x50>)
    2d78:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2d7a:	0080      	lsls	r0, r0, #2
    2d7c:	4b05      	ldr	r3, [pc, #20]	; (2d94 <Parser_LoraSetLbt+0x54>)
    2d7e:	58c3      	ldr	r3, [r0, r3]
    2d80:	6163      	str	r3, [r4, #20]
}
    2d82:	b004      	add	sp, #16
    2d84:	bd70      	pop	{r4, r5, r6, pc}
    2d86:	46c0      	nop			; (mov r8, r8)
    2d88:	00019645 	.word	0x00019645
    2d8c:	0001a581 	.word	0x0001a581
    2d90:	00013979 	.word	0x00013979
    2d94:	0001f848 	.word	0x0001f848

00002d98 <Parser_LoraGetLbt>:
{
    2d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d9a:	46ce      	mov	lr, r9
    2d9c:	4647      	mov	r7, r8
    2d9e:	b580      	push	{r7, lr}
    2da0:	b083      	sub	sp, #12
    2da2:	0005      	movs	r5, r0
	status = LORAWAN_GetAttr(LORAWAN_LBT_PARAMS, NULL, &lorawanLBTParams);
    2da4:	466a      	mov	r2, sp
    2da6:	2100      	movs	r1, #0
    2da8:	2027      	movs	r0, #39	; 0x27
    2daa:	4b27      	ldr	r3, [pc, #156]	; (2e48 <Parser_LoraGetLbt+0xb0>)
    2dac:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2dae:	0082      	lsls	r2, r0, #2
    2db0:	4b26      	ldr	r3, [pc, #152]	; (2e4c <Parser_LoraGetLbt+0xb4>)
    2db2:	58d3      	ldr	r3, [r2, r3]
    2db4:	616b      	str	r3, [r5, #20]
	if (LORAWAN_SUCCESS == status)
    2db6:	2808      	cmp	r0, #8
    2db8:	d004      	beq.n	2dc4 <Parser_LoraGetLbt+0x2c>
}
    2dba:	b003      	add	sp, #12
    2dbc:	bc0c      	pop	{r2, r3}
    2dbe:	4690      	mov	r8, r2
    2dc0:	4699      	mov	r9, r3
    2dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ultoa(aParserData, lorawanLBTParams.lbtScanPeriod, 10U);
    2dc4:	466b      	mov	r3, sp
    2dc6:	8819      	ldrh	r1, [r3, #0]
    2dc8:	4c21      	ldr	r4, [pc, #132]	; (2e50 <Parser_LoraGetLbt+0xb8>)
    2dca:	220a      	movs	r2, #10
    2dcc:	0020      	movs	r0, r4
    2dce:	4e21      	ldr	r6, [pc, #132]	; (2e54 <Parser_LoraGetLbt+0xbc>)
    2dd0:	47b0      	blx	r6
        dataLen = strlen(aParserData);
    2dd2:	0020      	movs	r0, r4
    2dd4:	4b20      	ldr	r3, [pc, #128]	; (2e58 <Parser_LoraGetLbt+0xc0>)
    2dd6:	4699      	mov	r9, r3
    2dd8:	4798      	blx	r3
        aParserData[dataLen ++] = ' ';
    2dda:	27ff      	movs	r7, #255	; 0xff
    2ddc:	003b      	movs	r3, r7
    2dde:	4003      	ands	r3, r0
    2de0:	2220      	movs	r2, #32
    2de2:	4690      	mov	r8, r2
    2de4:	54e2      	strb	r2, [r4, r3]
    2de6:	3001      	adds	r0, #1
		itoa(lorawanLBTParams.lbtThreshold, &aParserData[dataLen], 10U);
    2de8:	b2c1      	uxtb	r1, r0
    2dea:	1909      	adds	r1, r1, r4
    2dec:	466b      	mov	r3, sp
    2dee:	2002      	movs	r0, #2
    2df0:	5e18      	ldrsh	r0, [r3, r0]
    2df2:	220a      	movs	r2, #10
    2df4:	4b19      	ldr	r3, [pc, #100]	; (2e5c <Parser_LoraGetLbt+0xc4>)
    2df6:	4798      	blx	r3
		dataLen = strlen(aParserData);
    2df8:	0020      	movs	r0, r4
    2dfa:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    2dfc:	003b      	movs	r3, r7
    2dfe:	4003      	ands	r3, r0
    2e00:	4642      	mov	r2, r8
    2e02:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    2e04:	466b      	mov	r3, sp
    2e06:	8899      	ldrh	r1, [r3, #4]
        aParserData[dataLen ++] = ' ';
    2e08:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.maxRetryChannels, 10U);
    2e0a:	b2c0      	uxtb	r0, r0
    2e0c:	1900      	adds	r0, r0, r4
    2e0e:	220a      	movs	r2, #10
    2e10:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    2e12:	0020      	movs	r0, r4
    2e14:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    2e16:	003b      	movs	r3, r7
    2e18:	4003      	ands	r3, r0
    2e1a:	4642      	mov	r2, r8
    2e1c:	54e2      	strb	r2, [r4, r3]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    2e1e:	466b      	mov	r3, sp
    2e20:	7999      	ldrb	r1, [r3, #6]
        aParserData[dataLen ++] = ' ';
    2e22:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtNumOfSamples, 10U);
    2e24:	b2c0      	uxtb	r0, r0
    2e26:	1900      	adds	r0, r0, r4
    2e28:	220a      	movs	r2, #10
    2e2a:	47b0      	blx	r6
		dataLen = strlen(aParserData);
    2e2c:	0020      	movs	r0, r4
    2e2e:	47c8      	blx	r9
        aParserData[dataLen ++] = ' ';
    2e30:	4007      	ands	r7, r0
    2e32:	4643      	mov	r3, r8
    2e34:	55e3      	strb	r3, [r4, r7]
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    2e36:	466b      	mov	r3, sp
    2e38:	79d9      	ldrb	r1, [r3, #7]
        aParserData[dataLen ++] = ' ';
    2e3a:	3001      	adds	r0, #1
        ultoa(&aParserData[dataLen], lorawanLBTParams.lbtTransmitOn, 10U);
    2e3c:	b2c0      	uxtb	r0, r0
    2e3e:	1900      	adds	r0, r0, r4
    2e40:	220a      	movs	r2, #10
    2e42:	47b0      	blx	r6
        pParserCmdInfo->pReplyCmd = aParserData;
    2e44:	616c      	str	r4, [r5, #20]
}
    2e46:	e7b8      	b.n	2dba <Parser_LoraGetLbt+0x22>
    2e48:	00011935 	.word	0x00011935
    2e4c:	0001f848 	.word	0x0001f848
    2e50:	2000116c 	.word	0x2000116c
    2e54:	0000422d 	.word	0x0000422d
    2e58:	0001a275 	.word	0x0001a275
    2e5c:	000196c9 	.word	0x000196c9

00002e60 <Parser_LoraForceEnable>:
{
    2e60:	b510      	push	{r4, lr}
    2e62:	0004      	movs	r4, r0
    LORAWAN_ForceEnable();
    2e64:	4b02      	ldr	r3, [pc, #8]	; (2e70 <Parser_LoraForceEnable+0x10>)
    2e66:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[LORAWAN_SUCCESS];
    2e68:	4b02      	ldr	r3, [pc, #8]	; (2e74 <Parser_LoraForceEnable+0x14>)
    2e6a:	6163      	str	r3, [r4, #20]
}
    2e6c:	bd10      	pop	{r4, pc}
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	000107b1 	.word	0x000107b1
    2e74:	0001f7c4 	.word	0x0001f7c4

00002e78 <Parser_LoraSetUplinkCounter>:
{
    2e78:	b510      	push	{r4, lr}
    2e7a:	b082      	sub	sp, #8
    2e7c:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    2e7e:	220a      	movs	r2, #10
    2e80:	2100      	movs	r1, #0
    2e82:	6800      	ldr	r0, [r0, #0]
    2e84:	4b0b      	ldr	r3, [pc, #44]	; (2eb4 <Parser_LoraSetUplinkCounter+0x3c>)
    2e86:	4798      	blx	r3
    2e88:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2e8a:	2201      	movs	r2, #1
    2e8c:	4252      	negs	r2, r2
    2e8e:	210a      	movs	r1, #10
    2e90:	6820      	ldr	r0, [r4, #0]
    2e92:	4b09      	ldr	r3, [pc, #36]	; (2eb8 <Parser_LoraSetUplinkCounter+0x40>)
    2e94:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2e96:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2e98:	2800      	cmp	r0, #0
    2e9a:	d105      	bne.n	2ea8 <Parser_LoraSetUplinkCounter+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2e9c:	009b      	lsls	r3, r3, #2
    2e9e:	4a07      	ldr	r2, [pc, #28]	; (2ebc <Parser_LoraSetUplinkCounter+0x44>)
    2ea0:	589b      	ldr	r3, [r3, r2]
    2ea2:	6163      	str	r3, [r4, #20]
}
    2ea4:	b002      	add	sp, #8
    2ea6:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(UPLINK_COUNTER, &param1Value);       
    2ea8:	a901      	add	r1, sp, #4
    2eaa:	200a      	movs	r0, #10
    2eac:	4b04      	ldr	r3, [pc, #16]	; (2ec0 <Parser_LoraSetUplinkCounter+0x48>)
    2eae:	4798      	blx	r3
    2eb0:	0003      	movs	r3, r0
    2eb2:	e7f3      	b.n	2e9c <Parser_LoraSetUplinkCounter+0x24>
    2eb4:	0001a581 	.word	0x0001a581
    2eb8:	000042a9 	.word	0x000042a9
    2ebc:	0001f848 	.word	0x0001f848
    2ec0:	00013979 	.word	0x00013979

00002ec4 <Parser_LoraSetDownlinkCounter>:
{
    2ec4:	b510      	push	{r4, lr}
    2ec6:	b082      	sub	sp, #8
    2ec8:	0004      	movs	r4, r0
    uint32_t param1Value = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10U);
    2eca:	220a      	movs	r2, #10
    2ecc:	2100      	movs	r1, #0
    2ece:	6800      	ldr	r0, [r0, #0]
    2ed0:	4b0b      	ldr	r3, [pc, #44]	; (2f00 <Parser_LoraSetDownlinkCounter+0x3c>)
    2ed2:	4798      	blx	r3
    2ed4:	9001      	str	r0, [sp, #4]
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2ed6:	2201      	movs	r2, #1
    2ed8:	4252      	negs	r2, r2
    2eda:	210a      	movs	r1, #10
    2edc:	6820      	ldr	r0, [r4, #0]
    2ede:	4b09      	ldr	r3, [pc, #36]	; (2f04 <Parser_LoraSetDownlinkCounter+0x40>)
    2ee0:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2ee2:	230a      	movs	r3, #10
    if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    2ee4:	2800      	cmp	r0, #0
    2ee6:	d105      	bne.n	2ef4 <Parser_LoraSetDownlinkCounter+0x30>
     pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2ee8:	009b      	lsls	r3, r3, #2
    2eea:	4a07      	ldr	r2, [pc, #28]	; (2f08 <Parser_LoraSetDownlinkCounter+0x44>)
    2eec:	589b      	ldr	r3, [r3, r2]
    2eee:	6163      	str	r3, [r4, #20]
}
    2ef0:	b002      	add	sp, #8
    2ef2:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(DOWNLINK_COUNTER, &param1Value);   
    2ef4:	a901      	add	r1, sp, #4
    2ef6:	200b      	movs	r0, #11
    2ef8:	4b04      	ldr	r3, [pc, #16]	; (2f0c <Parser_LoraSetDownlinkCounter+0x48>)
    2efa:	4798      	blx	r3
    2efc:	0003      	movs	r3, r0
    2efe:	e7f3      	b.n	2ee8 <Parser_LoraSetDownlinkCounter+0x24>
    2f00:	0001a581 	.word	0x0001a581
    2f04:	000042a9 	.word	0x000042a9
    2f08:	0001f848 	.word	0x0001f848
    2f0c:	00013979 	.word	0x00013979

00002f10 <Parser_LoraSetSyncWord>:
{
    2f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f12:	0004      	movs	r4, r0
    uint16_t asciiDataLen = strlen(pParserCmdInfo->pParam1);
    2f14:	6805      	ldr	r5, [r0, #0]
    2f16:	0028      	movs	r0, r5
    2f18:	4b10      	ldr	r3, [pc, #64]	; (2f5c <Parser_LoraSetSyncWord+0x4c>)
    2f1a:	4798      	blx	r3
    2f1c:	0006      	movs	r6, r0
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    2f1e:	0028      	movs	r0, r5
    2f20:	4b0f      	ldr	r3, [pc, #60]	; (2f60 <Parser_LoraSetSyncWord+0x50>)
    2f22:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2f24:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    2f26:	2800      	cmp	r0, #0
    2f28:	d006      	beq.n	2f38 <Parser_LoraSetSyncWord+0x28>
    2f2a:	6827      	ldr	r7, [r4, #0]
    2f2c:	0038      	movs	r0, r7
    2f2e:	4b0b      	ldr	r3, [pc, #44]	; (2f5c <Parser_LoraSetSyncWord+0x4c>)
    2f30:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    2f32:	230a      	movs	r3, #10
    if (Validate_HexValue(pParserCmdInfo->pParam1) && (2 == strlen(pParserCmdInfo->pParam1)))
    2f34:	2802      	cmp	r0, #2
    2f36:	d004      	beq.n	2f42 <Parser_LoraSetSyncWord+0x32>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    2f38:	009b      	lsls	r3, r3, #2
    2f3a:	4a0a      	ldr	r2, [pc, #40]	; (2f64 <Parser_LoraSetSyncWord+0x54>)
    2f3c:	589b      	ldr	r3, [r3, r2]
    2f3e:	6163      	str	r3, [r4, #20]
}
    2f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        Parser_HexAsciiToInt(asciiDataLen, pParserCmdInfo->pParam1, (uint8_t *)aParserData);
    2f42:	4d09      	ldr	r5, [pc, #36]	; (2f68 <Parser_LoraSetSyncWord+0x58>)
    2f44:	b2b0      	uxth	r0, r6
    2f46:	002a      	movs	r2, r5
    2f48:	0039      	movs	r1, r7
    2f4a:	4b08      	ldr	r3, [pc, #32]	; (2f6c <Parser_LoraSetSyncWord+0x5c>)
    2f4c:	4798      	blx	r3
        status = LORAWAN_SetAttr(SYNC_WORD,aParserData);    
    2f4e:	0029      	movs	r1, r5
    2f50:	2009      	movs	r0, #9
    2f52:	4b07      	ldr	r3, [pc, #28]	; (2f70 <Parser_LoraSetSyncWord+0x60>)
    2f54:	4798      	blx	r3
    2f56:	0003      	movs	r3, r0
    2f58:	e7ee      	b.n	2f38 <Parser_LoraSetSyncWord+0x28>
    2f5a:	46c0      	nop			; (mov r8, r8)
    2f5c:	0001a275 	.word	0x0001a275
    2f60:	00004141 	.word	0x00004141
    2f64:	0001f848 	.word	0x0001f848
    2f68:	2000116c 	.word	0x2000116c
    2f6c:	00004449 	.word	0x00004449
    2f70:	00013979 	.word	0x00013979

00002f74 <Parser_LoraGetSyncWord>:
{
    2f74:	b530      	push	{r4, r5, lr}
    2f76:	b083      	sub	sp, #12
    2f78:	0005      	movs	r5, r0
    LORAWAN_GetAttr(SYNC_WORD, NULL, &syncWord);
    2f7a:	466b      	mov	r3, sp
    2f7c:	1dda      	adds	r2, r3, #7
    2f7e:	2100      	movs	r1, #0
    2f80:	2009      	movs	r0, #9
    2f82:	4b06      	ldr	r3, [pc, #24]	; (2f9c <Parser_LoraGetSyncWord+0x28>)
    2f84:	4798      	blx	r3
    Parser_IntArrayToHexAscii(1, &syncWord, aParserData);
    2f86:	4c06      	ldr	r4, [pc, #24]	; (2fa0 <Parser_LoraGetSyncWord+0x2c>)
    2f88:	0022      	movs	r2, r4
    2f8a:	466b      	mov	r3, sp
    2f8c:	1dd9      	adds	r1, r3, #7
    2f8e:	2001      	movs	r0, #1
    2f90:	4b04      	ldr	r3, [pc, #16]	; (2fa4 <Parser_LoraGetSyncWord+0x30>)
    2f92:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2f94:	616c      	str	r4, [r5, #20]
}
    2f96:	b003      	add	sp, #12
    2f98:	bd30      	pop	{r4, r5, pc}
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	00011935 	.word	0x00011935
    2fa0:	2000116c 	.word	0x2000116c
    2fa4:	00004175 	.word	0x00004175

00002fa8 <Parser_LoraGetUplinkCounter>:
{
    2fa8:	b530      	push	{r4, r5, lr}
    2faa:	b083      	sub	sp, #12
    2fac:	0005      	movs	r5, r0
    LORAWAN_GetAttr(UPLINK_COUNTER, NULL, &ctr);
    2fae:	aa01      	add	r2, sp, #4
    2fb0:	2100      	movs	r1, #0
    2fb2:	200a      	movs	r0, #10
    2fb4:	4b05      	ldr	r3, [pc, #20]	; (2fcc <Parser_LoraGetUplinkCounter+0x24>)
    2fb6:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    2fb8:	4c05      	ldr	r4, [pc, #20]	; (2fd0 <Parser_LoraGetUplinkCounter+0x28>)
    2fba:	220a      	movs	r2, #10
    2fbc:	9901      	ldr	r1, [sp, #4]
    2fbe:	0020      	movs	r0, r4
    2fc0:	4b04      	ldr	r3, [pc, #16]	; (2fd4 <Parser_LoraGetUplinkCounter+0x2c>)
    2fc2:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2fc4:	616c      	str	r4, [r5, #20]
}
    2fc6:	b003      	add	sp, #12
    2fc8:	bd30      	pop	{r4, r5, pc}
    2fca:	46c0      	nop			; (mov r8, r8)
    2fcc:	00011935 	.word	0x00011935
    2fd0:	2000116c 	.word	0x2000116c
    2fd4:	0000422d 	.word	0x0000422d

00002fd8 <Parser_LoraGetDownlinkCounter>:
{
    2fd8:	b530      	push	{r4, r5, lr}
    2fda:	b083      	sub	sp, #12
    2fdc:	0005      	movs	r5, r0
    LORAWAN_GetAttr(DOWNLINK_COUNTER, NULL, &ctr);
    2fde:	aa01      	add	r2, sp, #4
    2fe0:	2100      	movs	r1, #0
    2fe2:	200b      	movs	r0, #11
    2fe4:	4b05      	ldr	r3, [pc, #20]	; (2ffc <Parser_LoraGetDownlinkCounter+0x24>)
    2fe6:	4798      	blx	r3
    ultoa(aParserData, ctr, 10U);
    2fe8:	4c05      	ldr	r4, [pc, #20]	; (3000 <Parser_LoraGetDownlinkCounter+0x28>)
    2fea:	220a      	movs	r2, #10
    2fec:	9901      	ldr	r1, [sp, #4]
    2fee:	0020      	movs	r0, r4
    2ff0:	4b04      	ldr	r3, [pc, #16]	; (3004 <Parser_LoraGetDownlinkCounter+0x2c>)
    2ff2:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    2ff4:	616c      	str	r4, [r5, #20]
}
    2ff6:	b003      	add	sp, #12
    2ff8:	bd30      	pop	{r4, r5, pc}
    2ffa:	46c0      	nop			; (mov r8, r8)
    2ffc:	00011935 	.word	0x00011935
    3000:	2000116c 	.word	0x2000116c
    3004:	0000422d 	.word	0x0000422d

00003008 <Parser_LoraLinkCheck>:
{
    3008:	b510      	push	{r4, lr}
    300a:	b082      	sub	sp, #8
    300c:	0004      	movs	r4, r0
    uint16_t period = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    300e:	220a      	movs	r2, #10
    3010:	2100      	movs	r1, #0
    3012:	6800      	ldr	r0, [r0, #0]
    3014:	4b0c      	ldr	r3, [pc, #48]	; (3048 <Parser_LoraLinkCheck+0x40>)
    3016:	4798      	blx	r3
    3018:	466b      	mov	r3, sp
    301a:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    301c:	4a0b      	ldr	r2, [pc, #44]	; (304c <Parser_LoraLinkCheck+0x44>)
    301e:	2105      	movs	r1, #5
    3020:	6820      	ldr	r0, [r4, #0]
    3022:	4b0b      	ldr	r3, [pc, #44]	; (3050 <Parser_LoraLinkCheck+0x48>)
    3024:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    3026:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    3028:	2800      	cmp	r0, #0
    302a:	d105      	bne.n	3038 <Parser_LoraLinkCheck+0x30>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    302c:	009b      	lsls	r3, r3, #2
    302e:	4a09      	ldr	r2, [pc, #36]	; (3054 <Parser_LoraLinkCheck+0x4c>)
    3030:	589b      	ldr	r3, [r3, r2]
    3032:	6163      	str	r3, [r4, #20]
}
    3034:	b002      	add	sp, #8
    3036:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(LINK_CHECK_PERIOD,&period);      
    3038:	466b      	mov	r3, sp
    303a:	1d99      	adds	r1, r3, #6
    303c:	2018      	movs	r0, #24
    303e:	4b06      	ldr	r3, [pc, #24]	; (3058 <Parser_LoraLinkCheck+0x50>)
    3040:	4798      	blx	r3
    3042:	0003      	movs	r3, r0
    3044:	e7f2      	b.n	302c <Parser_LoraLinkCheck+0x24>
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	0001a581 	.word	0x0001a581
    304c:	0000ffff 	.word	0x0000ffff
    3050:	000042a9 	.word	0x000042a9
    3054:	0001f848 	.word	0x0001f848
    3058:	00013979 	.word	0x00013979

0000305c <Parser_LoraGetAggregatedDutyCycle>:
{
    305c:	b570      	push	{r4, r5, r6, lr}
    305e:	b082      	sub	sp, #8
    3060:	0006      	movs	r6, r0
    LORAWAN_GetAttr(AGGREGATED_DUTYCYCLE, NULL, &aggregatedDutyCycle);
    3062:	466b      	mov	r3, sp
    3064:	1d9d      	adds	r5, r3, #6
    3066:	002a      	movs	r2, r5
    3068:	2100      	movs	r1, #0
    306a:	201f      	movs	r0, #31
    306c:	4b05      	ldr	r3, [pc, #20]	; (3084 <Parser_LoraGetAggregatedDutyCycle+0x28>)
    306e:	4798      	blx	r3
    utoa(aggregatedDutyCycle, aParserData,  10);
    3070:	4c05      	ldr	r4, [pc, #20]	; (3088 <Parser_LoraGetAggregatedDutyCycle+0x2c>)
    3072:	8828      	ldrh	r0, [r5, #0]
    3074:	220a      	movs	r2, #10
    3076:	0021      	movs	r1, r4
    3078:	4b04      	ldr	r3, [pc, #16]	; (308c <Parser_LoraGetAggregatedDutyCycle+0x30>)
    307a:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    307c:	6174      	str	r4, [r6, #20]
}
    307e:	b002      	add	sp, #8
    3080:	bd70      	pop	{r4, r5, r6, pc}
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	00011935 	.word	0x00011935
    3088:	2000116c 	.word	0x2000116c
    308c:	0001a639 	.word	0x0001a639

00003090 <Parser_LoraSetAggregatedDutyCycle>:
{
    3090:	b510      	push	{r4, lr}
    3092:	b082      	sub	sp, #8
    3094:	0004      	movs	r4, r0
    uint16_t aggregatedDutyCycle = atoi(pParserCmdInfo->pParam1);
    3096:	6800      	ldr	r0, [r0, #0]
    3098:	4b0c      	ldr	r3, [pc, #48]	; (30cc <Parser_LoraSetAggregatedDutyCycle+0x3c>)
    309a:	4798      	blx	r3
    309c:	466b      	mov	r3, sp
    309e:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    30a0:	22ff      	movs	r2, #255	; 0xff
    30a2:	2102      	movs	r1, #2
    30a4:	6820      	ldr	r0, [r4, #0]
    30a6:	4b0a      	ldr	r3, [pc, #40]	; (30d0 <Parser_LoraSetAggregatedDutyCycle+0x40>)
    30a8:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    30aa:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 2, UINT8_MAX))
    30ac:	2800      	cmp	r0, #0
    30ae:	d105      	bne.n	30bc <Parser_LoraSetAggregatedDutyCycle+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    30b0:	009b      	lsls	r3, r3, #2
    30b2:	4a08      	ldr	r2, [pc, #32]	; (30d4 <Parser_LoraSetAggregatedDutyCycle+0x44>)
    30b4:	589b      	ldr	r3, [r3, r2]
    30b6:	6163      	str	r3, [r4, #20]
}
    30b8:	b002      	add	sp, #8
    30ba:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(AGGREGATED_DUTYCYCLE,&aggregatedDutyCycle);
    30bc:	466b      	mov	r3, sp
    30be:	1d99      	adds	r1, r3, #6
    30c0:	201f      	movs	r0, #31
    30c2:	4b05      	ldr	r3, [pc, #20]	; (30d8 <Parser_LoraSetAggregatedDutyCycle+0x48>)
    30c4:	4798      	blx	r3
    30c6:	0003      	movs	r3, r0
    30c8:	e7f2      	b.n	30b0 <Parser_LoraSetAggregatedDutyCycle+0x20>
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	00019645 	.word	0x00019645
    30d0:	000042a9 	.word	0x000042a9
    30d4:	0001f848 	.word	0x0001f848
    30d8:	00013979 	.word	0x00013979

000030dc <Parser_LoraSetCryptoDevEnabled>:
{
    30dc:	b570      	push	{r4, r5, r6, lr}
    30de:	b082      	sub	sp, #8
    30e0:	0005      	movs	r5, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    30e2:	6800      	ldr	r0, [r0, #0]
    30e4:	4b0d      	ldr	r3, [pc, #52]	; (311c <Parser_LoraSetCryptoDevEnabled+0x40>)
    30e6:	4798      	blx	r3
    30e8:	466b      	mov	r3, sp
    30ea:	71d8      	strb	r0, [r3, #7]
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    30ec:	240a      	movs	r4, #10
	if (validationVal < 2U)
    30ee:	2801      	cmp	r0, #1
    30f0:	d905      	bls.n	30fe <Parser_LoraSetCryptoDevEnabled+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    30f2:	00a4      	lsls	r4, r4, #2
    30f4:	4b0a      	ldr	r3, [pc, #40]	; (3120 <Parser_LoraSetCryptoDevEnabled+0x44>)
    30f6:	58e3      	ldr	r3, [r4, r3]
    30f8:	616b      	str	r3, [r5, #20]
}
    30fa:	b002      	add	sp, #8
    30fc:	bd70      	pop	{r4, r5, r6, pc}
		returnVal = LORAWAN_SetAttr(CRYPTODEVICE_ENABLED, &validationVal);
    30fe:	466b      	mov	r3, sp
    3100:	1dde      	adds	r6, r3, #7
    3102:	0031      	movs	r1, r6
    3104:	203e      	movs	r0, #62	; 0x3e
    3106:	4b07      	ldr	r3, [pc, #28]	; (3124 <Parser_LoraSetCryptoDevEnabled+0x48>)
    3108:	4798      	blx	r3
    310a:	0004      	movs	r4, r0
		SAL_Init(validationVal) ;
    310c:	7830      	ldrb	r0, [r6, #0]
    310e:	1e43      	subs	r3, r0, #1
    3110:	4198      	sbcs	r0, r3
    3112:	b2c0      	uxtb	r0, r0
    3114:	4b04      	ldr	r3, [pc, #16]	; (3128 <Parser_LoraSetCryptoDevEnabled+0x4c>)
    3116:	4798      	blx	r3
    3118:	e7eb      	b.n	30f2 <Parser_LoraSetCryptoDevEnabled+0x16>
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	0000437d 	.word	0x0000437d
    3120:	0001f848 	.word	0x0001f848
    3124:	00013979 	.word	0x00013979
    3128:	0000db81 	.word	0x0000db81

0000312c <Parser_LoraSetTestModeEnabled>:
{
    312c:	b510      	push	{r4, lr}
    312e:	b082      	sub	sp, #8
    3130:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    3132:	6800      	ldr	r0, [r0, #0]
    3134:	4b09      	ldr	r3, [pc, #36]	; (315c <Parser_LoraSetTestModeEnabled+0x30>)
    3136:	4798      	blx	r3
    3138:	466b      	mov	r3, sp
    313a:	71d8      	strb	r0, [r3, #7]
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    313c:	230a      	movs	r3, #10
	if (validationVal < 2U)
    313e:	2801      	cmp	r0, #1
    3140:	d905      	bls.n	314e <Parser_LoraSetTestModeEnabled+0x22>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    3142:	009b      	lsls	r3, r3, #2
    3144:	4a06      	ldr	r2, [pc, #24]	; (3160 <Parser_LoraSetTestModeEnabled+0x34>)
    3146:	589b      	ldr	r3, [r3, r2]
    3148:	6163      	str	r3, [r4, #20]
}
    314a:	b002      	add	sp, #8
    314c:	bd10      	pop	{r4, pc}
		returnVal = LORAWAN_SetAttr(TEST_MODE_ENABLE, &validationVal);
    314e:	466b      	mov	r3, sp
    3150:	1dd9      	adds	r1, r3, #7
    3152:	2032      	movs	r0, #50	; 0x32
    3154:	4b03      	ldr	r3, [pc, #12]	; (3164 <Parser_LoraSetTestModeEnabled+0x38>)
    3156:	4798      	blx	r3
    3158:	0003      	movs	r3, r0
    315a:	e7f2      	b.n	3142 <Parser_LoraSetTestModeEnabled+0x16>
    315c:	0000437d 	.word	0x0000437d
    3160:	0001f848 	.word	0x0001f848
    3164:	00013979 	.word	0x00013979

00003168 <Parser_LoraGetMacStatus>:
{
    3168:	b530      	push	{r4, r5, lr}
    316a:	b083      	sub	sp, #12
    316c:	0005      	movs	r5, r0
    LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &macStatusMask);
    316e:	aa01      	add	r2, sp, #4
    3170:	2100      	movs	r1, #0
    3172:	2020      	movs	r0, #32
    3174:	4b09      	ldr	r3, [pc, #36]	; (319c <Parser_LoraGetMacStatus+0x34>)
    3176:	4798      	blx	r3
    tempBuff[3] = (uint8_t)macStatusMask;
    3178:	9b01      	ldr	r3, [sp, #4]
    317a:	466a      	mov	r2, sp
    317c:	70d3      	strb	r3, [r2, #3]
    tempBuff[2] = (uint8_t)(macStatusMask >> 8);
    317e:	0a1a      	lsrs	r2, r3, #8
    3180:	4669      	mov	r1, sp
    3182:	708a      	strb	r2, [r1, #2]
    tempBuff[1] = (uint8_t)(macStatusMask >> 16);
    3184:	0c1a      	lsrs	r2, r3, #16
    3186:	704a      	strb	r2, [r1, #1]
    tempBuff[0] = (uint8_t)(macStatusMask >> 24);    
    3188:	0e1b      	lsrs	r3, r3, #24
    318a:	700b      	strb	r3, [r1, #0]
    Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    318c:	4c04      	ldr	r4, [pc, #16]	; (31a0 <Parser_LoraGetMacStatus+0x38>)
    318e:	0022      	movs	r2, r4
    3190:	2004      	movs	r0, #4
    3192:	4b04      	ldr	r3, [pc, #16]	; (31a4 <Parser_LoraGetMacStatus+0x3c>)
    3194:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3196:	616c      	str	r4, [r5, #20]
}
    3198:	b003      	add	sp, #12
    319a:	bd30      	pop	{r4, r5, pc}
    319c:	00011935 	.word	0x00011935
    31a0:	2000116c 	.word	0x2000116c
    31a4:	00004175 	.word	0x00004175

000031a8 <Parser_LoraSetBatLevel>:
{
    31a8:	b510      	push	{r4, lr}
    31aa:	b082      	sub	sp, #8
    31ac:	0004      	movs	r4, r0
    uint8_t batLevel = atoi(pParserCmdInfo->pParam1);
    31ae:	6800      	ldr	r0, [r0, #0]
    31b0:	4b0c      	ldr	r3, [pc, #48]	; (31e4 <Parser_LoraSetBatLevel+0x3c>)
    31b2:	4798      	blx	r3
    31b4:	466b      	mov	r3, sp
    31b6:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    31b8:	22ff      	movs	r2, #255	; 0xff
    31ba:	2103      	movs	r1, #3
    31bc:	6820      	ldr	r0, [r4, #0]
    31be:	4b0a      	ldr	r3, [pc, #40]	; (31e8 <Parser_LoraSetBatLevel+0x40>)
    31c0:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    31c2:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    31c4:	2800      	cmp	r0, #0
    31c6:	d105      	bne.n	31d4 <Parser_LoraSetBatLevel+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    31c8:	009b      	lsls	r3, r3, #2
    31ca:	4a08      	ldr	r2, [pc, #32]	; (31ec <Parser_LoraSetBatLevel+0x44>)
    31cc:	589b      	ldr	r3, [r3, r2]
    31ce:	6163      	str	r3, [r4, #20]
}
    31d0:	b002      	add	sp, #8
    31d2:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(BATTERY, &batLevel);
    31d4:	466b      	mov	r3, sp
    31d6:	1dd9      	adds	r1, r3, #7
    31d8:	2017      	movs	r0, #23
    31da:	4b05      	ldr	r3, [pc, #20]	; (31f0 <Parser_LoraSetBatLevel+0x48>)
    31dc:	4798      	blx	r3
    31de:	0003      	movs	r3, r0
    31e0:	e7f2      	b.n	31c8 <Parser_LoraSetBatLevel+0x20>
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	00019645 	.word	0x00019645
    31e8:	000042a9 	.word	0x000042a9
    31ec:	0001f848 	.word	0x0001f848
    31f0:	00013979 	.word	0x00013979

000031f4 <Parser_LoraSetReTxNb>:
{
    31f4:	b510      	push	{r4, lr}
    31f6:	b082      	sub	sp, #8
    31f8:	0004      	movs	r4, r0
    uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    31fa:	6800      	ldr	r0, [r0, #0]
    31fc:	4b0c      	ldr	r3, [pc, #48]	; (3230 <Parser_LoraSetReTxNb+0x3c>)
    31fe:	4798      	blx	r3
    3200:	466b      	mov	r3, sp
    3202:	71d8      	strb	r0, [r3, #7]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    3204:	22ff      	movs	r2, #255	; 0xff
    3206:	2103      	movs	r1, #3
    3208:	6820      	ldr	r0, [r4, #0]
    320a:	4b0a      	ldr	r3, [pc, #40]	; (3234 <Parser_LoraSetReTxNb+0x40>)
    320c:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    320e:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    3210:	2800      	cmp	r0, #0
    3212:	d105      	bne.n	3220 <Parser_LoraSetReTxNb+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3214:	009b      	lsls	r3, r3, #2
    3216:	4a08      	ldr	r2, [pc, #32]	; (3238 <Parser_LoraSetReTxNb+0x44>)
    3218:	589b      	ldr	r3, [r3, r2]
    321a:	6163      	str	r3, [r4, #20]
}
    321c:	b002      	add	sp, #8
    321e:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(CNF_RETRANSMISSION_NUM,&reTxNb);
    3220:	466b      	mov	r3, sp
    3222:	1dd9      	adds	r1, r3, #7
    3224:	2013      	movs	r0, #19
    3226:	4b05      	ldr	r3, [pc, #20]	; (323c <Parser_LoraSetReTxNb+0x48>)
    3228:	4798      	blx	r3
    322a:	0003      	movs	r3, r0
    322c:	e7f2      	b.n	3214 <Parser_LoraSetReTxNb+0x20>
    322e:	46c0      	nop			; (mov r8, r8)
    3230:	00019645 	.word	0x00019645
    3234:	000042a9 	.word	0x000042a9
    3238:	0001f848 	.word	0x0001f848
    323c:	00013979 	.word	0x00013979

00003240 <Parser_LoraSetRepsNb>:
{
    3240:	b510      	push	{r4, lr}
    3242:	b082      	sub	sp, #8
    3244:	0004      	movs	r4, r0
	uint8_t reTxNb = atoi(pParserCmdInfo->pParam1);
    3246:	6800      	ldr	r0, [r0, #0]
    3248:	4b0c      	ldr	r3, [pc, #48]	; (327c <Parser_LoraSetRepsNb+0x3c>)
    324a:	4798      	blx	r3
    324c:	466b      	mov	r3, sp
    324e:	71d8      	strb	r0, [r3, #7]
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    3250:	22ff      	movs	r2, #255	; 0xff
    3252:	2103      	movs	r1, #3
    3254:	6820      	ldr	r0, [r4, #0]
    3256:	4b0a      	ldr	r3, [pc, #40]	; (3280 <Parser_LoraSetRepsNb+0x40>)
    3258:	4798      	blx	r3
	StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    325a:	230a      	movs	r3, #10
	if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 3, UINT8_MAX))
    325c:	2800      	cmp	r0, #0
    325e:	d105      	bne.n	326c <Parser_LoraSetRepsNb+0x2c>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3260:	009b      	lsls	r3, r3, #2
    3262:	4a08      	ldr	r2, [pc, #32]	; (3284 <Parser_LoraSetRepsNb+0x44>)
    3264:	589b      	ldr	r3, [r3, r2]
    3266:	6163      	str	r3, [r4, #20]
}
    3268:	b002      	add	sp, #8
    326a:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(UNCNF_REPETITION_NUM,&reTxNb);
    326c:	466b      	mov	r3, sp
    326e:	1dd9      	adds	r1, r3, #7
    3270:	2014      	movs	r0, #20
    3272:	4b05      	ldr	r3, [pc, #20]	; (3288 <Parser_LoraSetRepsNb+0x48>)
    3274:	4798      	blx	r3
    3276:	0003      	movs	r3, r0
    3278:	e7f2      	b.n	3260 <Parser_LoraSetRepsNb+0x20>
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	00019645 	.word	0x00019645
    3280:	000042a9 	.word	0x000042a9
    3284:	0001f848 	.word	0x0001f848
    3288:	00013979 	.word	0x00013979

0000328c <Parser_LoraGetReTxNb>:
{
    328c:	b570      	push	{r4, r5, r6, lr}
    328e:	b082      	sub	sp, #8
    3290:	0006      	movs	r6, r0
    LORAWAN_GetAttr(CNF_RETRANSMISSION_NUM, NULL, &reTxNb);
    3292:	466b      	mov	r3, sp
    3294:	1ddd      	adds	r5, r3, #7
    3296:	002a      	movs	r2, r5
    3298:	2100      	movs	r1, #0
    329a:	2013      	movs	r0, #19
    329c:	4b05      	ldr	r3, [pc, #20]	; (32b4 <Parser_LoraGetReTxNb+0x28>)
    329e:	4798      	blx	r3
    utoa(reTxNb, aParserData, 10);
    32a0:	4c05      	ldr	r4, [pc, #20]	; (32b8 <Parser_LoraGetReTxNb+0x2c>)
    32a2:	7828      	ldrb	r0, [r5, #0]
    32a4:	220a      	movs	r2, #10
    32a6:	0021      	movs	r1, r4
    32a8:	4b04      	ldr	r3, [pc, #16]	; (32bc <Parser_LoraGetReTxNb+0x30>)
    32aa:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    32ac:	6174      	str	r4, [r6, #20]
}
    32ae:	b002      	add	sp, #8
    32b0:	bd70      	pop	{r4, r5, r6, pc}
    32b2:	46c0      	nop			; (mov r8, r8)
    32b4:	00011935 	.word	0x00011935
    32b8:	2000116c 	.word	0x2000116c
    32bc:	0001a639 	.word	0x0001a639

000032c0 <Parser_LoraGetRepsNb>:
{
    32c0:	b570      	push	{r4, r5, r6, lr}
    32c2:	b082      	sub	sp, #8
    32c4:	0006      	movs	r6, r0
	LORAWAN_GetAttr(UNCNF_REPETITION_NUM, NULL, &reTxNb);
    32c6:	466b      	mov	r3, sp
    32c8:	1ddd      	adds	r5, r3, #7
    32ca:	002a      	movs	r2, r5
    32cc:	2100      	movs	r1, #0
    32ce:	2014      	movs	r0, #20
    32d0:	4b05      	ldr	r3, [pc, #20]	; (32e8 <Parser_LoraGetRepsNb+0x28>)
    32d2:	4798      	blx	r3
	utoa(reTxNb, aParserData, 10);
    32d4:	4c05      	ldr	r4, [pc, #20]	; (32ec <Parser_LoraGetRepsNb+0x2c>)
    32d6:	7828      	ldrb	r0, [r5, #0]
    32d8:	220a      	movs	r2, #10
    32da:	0021      	movs	r1, r4
    32dc:	4b04      	ldr	r3, [pc, #16]	; (32f0 <Parser_LoraGetRepsNb+0x30>)
    32de:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    32e0:	6174      	str	r4, [r6, #20]
}
    32e2:	b002      	add	sp, #8
    32e4:	bd70      	pop	{r4, r5, r6, pc}
    32e6:	46c0      	nop			; (mov r8, r8)
    32e8:	00011935 	.word	0x00011935
    32ec:	2000116c 	.word	0x2000116c
    32f0:	0001a639 	.word	0x0001a639

000032f4 <Parser_LoraGetLinkCheckMargin>:
{
    32f4:	b570      	push	{r4, r5, r6, lr}
    32f6:	b082      	sub	sp, #8
    32f8:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_MARGIN, NULL, &mrgn);
    32fa:	466b      	mov	r3, sp
    32fc:	1ddd      	adds	r5, r3, #7
    32fe:	002a      	movs	r2, r5
    3300:	2100      	movs	r1, #0
    3302:	2021      	movs	r0, #33	; 0x21
    3304:	4b05      	ldr	r3, [pc, #20]	; (331c <Parser_LoraGetLinkCheckMargin+0x28>)
    3306:	4798      	blx	r3
    utoa(mrgn, aParserData,  10);
    3308:	4c05      	ldr	r4, [pc, #20]	; (3320 <Parser_LoraGetLinkCheckMargin+0x2c>)
    330a:	7828      	ldrb	r0, [r5, #0]
    330c:	220a      	movs	r2, #10
    330e:	0021      	movs	r1, r4
    3310:	4b04      	ldr	r3, [pc, #16]	; (3324 <Parser_LoraGetLinkCheckMargin+0x30>)
    3312:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3314:	6174      	str	r4, [r6, #20]
}
    3316:	b002      	add	sp, #8
    3318:	bd70      	pop	{r4, r5, r6, pc}
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	00011935 	.word	0x00011935
    3320:	2000116c 	.word	0x2000116c
    3324:	0001a639 	.word	0x0001a639

00003328 <Parser_LoraGetLinkCheckGwCnt>:
{
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	b082      	sub	sp, #8
    332c:	0006      	movs	r6, r0
    LORAWAN_GetAttr(LINK_CHECK_GWCNT, NULL, &gwCnt);
    332e:	466b      	mov	r3, sp
    3330:	1ddd      	adds	r5, r3, #7
    3332:	002a      	movs	r2, r5
    3334:	2100      	movs	r1, #0
    3336:	2022      	movs	r0, #34	; 0x22
    3338:	4b05      	ldr	r3, [pc, #20]	; (3350 <Parser_LoraGetLinkCheckGwCnt+0x28>)
    333a:	4798      	blx	r3
    utoa(gwCnt, aParserData, 10);
    333c:	4c05      	ldr	r4, [pc, #20]	; (3354 <Parser_LoraGetLinkCheckGwCnt+0x2c>)
    333e:	7828      	ldrb	r0, [r5, #0]
    3340:	220a      	movs	r2, #10
    3342:	0021      	movs	r1, r4
    3344:	4b04      	ldr	r3, [pc, #16]	; (3358 <Parser_LoraGetLinkCheckGwCnt+0x30>)
    3346:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3348:	6174      	str	r4, [r6, #20]
}
    334a:	b002      	add	sp, #8
    334c:	bd70      	pop	{r4, r5, r6, pc}
    334e:	46c0      	nop			; (mov r8, r8)
    3350:	00011935 	.word	0x00011935
    3354:	2000116c 	.word	0x2000116c
    3358:	0001a639 	.word	0x0001a639

0000335c <Parser_LoraSetAutoReply>:
{
    335c:	b510      	push	{r4, lr}
    335e:	b082      	sub	sp, #8
    3360:	0004      	movs	r4, r0
    validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    3362:	6800      	ldr	r0, [r0, #0]
    3364:	4b09      	ldr	r3, [pc, #36]	; (338c <Parser_LoraSetAutoReply+0x30>)
    3366:	4798      	blx	r3
    3368:	466b      	mov	r3, sp
    336a:	71d8      	strb	r0, [r3, #7]
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    336c:	230a      	movs	r3, #10
    if(validationVal < 2U)
    336e:	2801      	cmp	r0, #1
    3370:	d905      	bls.n	337e <Parser_LoraSetAutoReply+0x22>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3372:	009b      	lsls	r3, r3, #2
    3374:	4a06      	ldr	r2, [pc, #24]	; (3390 <Parser_LoraSetAutoReply+0x34>)
    3376:	589b      	ldr	r3, [r3, r2]
    3378:	6163      	str	r3, [r4, #20]
}
    337a:	b002      	add	sp, #8
    337c:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(AUTOREPLY, &validationVal);      
    337e:	466b      	mov	r3, sp
    3380:	1dd9      	adds	r1, r3, #7
    3382:	2016      	movs	r0, #22
    3384:	4b03      	ldr	r3, [pc, #12]	; (3394 <Parser_LoraSetAutoReply+0x38>)
    3386:	4798      	blx	r3
    3388:	0003      	movs	r3, r0
    338a:	e7f2      	b.n	3372 <Parser_LoraSetAutoReply+0x16>
    338c:	0000437d 	.word	0x0000437d
    3390:	0001f848 	.word	0x0001f848
    3394:	00013979 	.word	0x00013979

00003398 <Parser_LoraGetAutoReply>:
{
    3398:	b530      	push	{r4, r5, lr}
    339a:	b083      	sub	sp, #12
    339c:	0005      	movs	r5, r0
    LORAWAN_GetAttr(AUTOREPLY, NULL, &arEnabled);
    339e:	466b      	mov	r3, sp
    33a0:	1ddc      	adds	r4, r3, #7
    33a2:	0022      	movs	r2, r4
    33a4:	2100      	movs	r1, #0
    33a6:	2016      	movs	r0, #22
    33a8:	4b04      	ldr	r3, [pc, #16]	; (33bc <Parser_LoraGetAutoReply+0x24>)
    33aa:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[arEnabled];
    33ac:	7823      	ldrb	r3, [r4, #0]
    33ae:	009b      	lsls	r3, r3, #2
    33b0:	4a03      	ldr	r2, [pc, #12]	; (33c0 <Parser_LoraGetAutoReply+0x28>)
    33b2:	589b      	ldr	r3, [r3, r2]
    33b4:	616b      	str	r3, [r5, #20]
}
    33b6:	b003      	add	sp, #12
    33b8:	bd30      	pop	{r4, r5, pc}
    33ba:	46c0      	nop			; (mov r8, r8)
    33bc:	00011935 	.word	0x00011935
    33c0:	0001f828 	.word	0x0001f828

000033c4 <Parser_LoraSetRxDelay1>:
{
    33c4:	b510      	push	{r4, lr}
    33c6:	b082      	sub	sp, #8
    33c8:	0004      	movs	r4, r0
    uint16_t rxDelay1 = atoi(pParserCmdInfo->pParam1);
    33ca:	6800      	ldr	r0, [r0, #0]
    33cc:	4b0c      	ldr	r3, [pc, #48]	; (3400 <Parser_LoraSetRxDelay1+0x3c>)
    33ce:	4798      	blx	r3
    33d0:	466b      	mov	r3, sp
    33d2:	80d8      	strh	r0, [r3, #6]
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    33d4:	4a0b      	ldr	r2, [pc, #44]	; (3404 <Parser_LoraSetRxDelay1+0x40>)
    33d6:	2105      	movs	r1, #5
    33d8:	6820      	ldr	r0, [r4, #0]
    33da:	4b0b      	ldr	r3, [pc, #44]	; (3408 <Parser_LoraSetRxDelay1+0x44>)
    33dc:	4798      	blx	r3
    StackRetStatus_t status = LORAWAN_INVALID_PARAMETER;
    33de:	230a      	movs	r3, #10
    if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 5, UINT16_MAX))
    33e0:	2800      	cmp	r0, #0
    33e2:	d105      	bne.n	33f0 <Parser_LoraSetRxDelay1+0x2c>
    pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    33e4:	009b      	lsls	r3, r3, #2
    33e6:	4a09      	ldr	r2, [pc, #36]	; (340c <Parser_LoraSetRxDelay1+0x48>)
    33e8:	589b      	ldr	r3, [r3, r2]
    33ea:	6163      	str	r3, [r4, #20]
}
    33ec:	b002      	add	sp, #8
    33ee:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr(RX_DELAY1,&rxDelay1);        
    33f0:	466b      	mov	r3, sp
    33f2:	1d99      	adds	r1, r3, #6
    33f4:	200c      	movs	r0, #12
    33f6:	4b06      	ldr	r3, [pc, #24]	; (3410 <Parser_LoraSetRxDelay1+0x4c>)
    33f8:	4798      	blx	r3
    33fa:	0003      	movs	r3, r0
    33fc:	e7f2      	b.n	33e4 <Parser_LoraSetRxDelay1+0x20>
    33fe:	46c0      	nop			; (mov r8, r8)
    3400:	00019645 	.word	0x00019645
    3404:	0000ffff 	.word	0x0000ffff
    3408:	000042a9 	.word	0x000042a9
    340c:	0001f848 	.word	0x0001f848
    3410:	00013979 	.word	0x00013979

00003414 <Parser_LoraGetRxDelay1>:
{
    3414:	b570      	push	{r4, r5, r6, lr}
    3416:	b082      	sub	sp, #8
    3418:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY1,NULL,&rxDelay1);
    341a:	466b      	mov	r3, sp
    341c:	1d9d      	adds	r5, r3, #6
    341e:	002a      	movs	r2, r5
    3420:	2100      	movs	r1, #0
    3422:	200c      	movs	r0, #12
    3424:	4b05      	ldr	r3, [pc, #20]	; (343c <Parser_LoraGetRxDelay1+0x28>)
    3426:	4798      	blx	r3
    utoa(rxDelay1, aParserData, 10);
    3428:	4c05      	ldr	r4, [pc, #20]	; (3440 <Parser_LoraGetRxDelay1+0x2c>)
    342a:	8828      	ldrh	r0, [r5, #0]
    342c:	220a      	movs	r2, #10
    342e:	0021      	movs	r1, r4
    3430:	4b04      	ldr	r3, [pc, #16]	; (3444 <Parser_LoraGetRxDelay1+0x30>)
    3432:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3434:	6174      	str	r4, [r6, #20]
}
    3436:	b002      	add	sp, #8
    3438:	bd70      	pop	{r4, r5, r6, pc}
    343a:	46c0      	nop			; (mov r8, r8)
    343c:	00011935 	.word	0x00011935
    3440:	2000116c 	.word	0x2000116c
    3444:	0001a639 	.word	0x0001a639

00003448 <Parser_LoraGetRxDelay2>:
{
    3448:	b570      	push	{r4, r5, r6, lr}
    344a:	b082      	sub	sp, #8
    344c:	0006      	movs	r6, r0
    LORAWAN_GetAttr(RX_DELAY2, NULL, &rxDelay2);
    344e:	466b      	mov	r3, sp
    3450:	1d9d      	adds	r5, r3, #6
    3452:	002a      	movs	r2, r5
    3454:	2100      	movs	r1, #0
    3456:	201e      	movs	r0, #30
    3458:	4b05      	ldr	r3, [pc, #20]	; (3470 <Parser_LoraGetRxDelay2+0x28>)
    345a:	4798      	blx	r3
    utoa(rxDelay2, aParserData, 10);
    345c:	4c05      	ldr	r4, [pc, #20]	; (3474 <Parser_LoraGetRxDelay2+0x2c>)
    345e:	8828      	ldrh	r0, [r5, #0]
    3460:	220a      	movs	r2, #10
    3462:	0021      	movs	r1, r4
    3464:	4b04      	ldr	r3, [pc, #16]	; (3478 <Parser_LoraGetRxDelay2+0x30>)
    3466:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3468:	6174      	str	r4, [r6, #20]
}
    346a:	b002      	add	sp, #8
    346c:	bd70      	pop	{r4, r5, r6, pc}
    346e:	46c0      	nop			; (mov r8, r8)
    3470:	00011935 	.word	0x00011935
    3474:	2000116c 	.word	0x2000116c
    3478:	0001a639 	.word	0x0001a639

0000347c <Parser_LoraGetIsm>:
{
    347c:	b530      	push	{r4, r5, lr}
    347e:	b083      	sub	sp, #12
    3480:	0005      	movs	r5, r0
    LORAWAN_GetAttr(ISMBAND, NULL, &ismBand);
    3482:	466b      	mov	r3, sp
    3484:	1ddc      	adds	r4, r3, #7
    3486:	0022      	movs	r2, r4
    3488:	2100      	movs	r1, #0
    348a:	2023      	movs	r0, #35	; 0x23
    348c:	4b04      	ldr	r3, [pc, #16]	; (34a0 <Parser_LoraGetIsm+0x24>)
    348e:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = (char*)gapParseIsmBand[ismBand];
    3490:	7823      	ldrb	r3, [r4, #0]
    3492:	009b      	lsls	r3, r3, #2
    3494:	4a03      	ldr	r2, [pc, #12]	; (34a4 <Parser_LoraGetIsm+0x28>)
    3496:	589b      	ldr	r3, [r3, r2]
    3498:	616b      	str	r3, [r5, #20]
}
    349a:	b003      	add	sp, #12
    349c:	bd30      	pop	{r4, r5, pc}
    349e:	46c0      	nop			; (mov r8, r8)
    34a0:	00011935 	.word	0x00011935
    34a4:	0001f7d4 	.word	0x0001f7d4

000034a8 <Parser_LoraSetClass>:
{
    34a8:	b510      	push	{r4, lr}
    34aa:	b082      	sub	sp, #8
    34ac:	0004      	movs	r4, r0
	if ((pParserCmdInfo->pParam1[0] == 'A') || (pParserCmdInfo->pParam1[0] == 'a'))
    34ae:	6803      	ldr	r3, [r0, #0]
    34b0:	781b      	ldrb	r3, [r3, #0]
    34b2:	2220      	movs	r2, #32
    34b4:	4393      	bics	r3, r2
    34b6:	2b41      	cmp	r3, #65	; 0x41
    34b8:	d008      	beq.n	34cc <Parser_LoraSetClass+0x24>
	uint8_t statusIdx = LORAWAN_INVALID_PARAMETER;
    34ba:	200a      	movs	r0, #10
	else if ((pParserCmdInfo->pParam1[0] == 'C') || (pParserCmdInfo->pParam1[0] == 'c'))
    34bc:	2b43      	cmp	r3, #67	; 0x43
    34be:	d00d      	beq.n	34dc <Parser_LoraSetClass+0x34>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    34c0:	0080      	lsls	r0, r0, #2
    34c2:	4b0a      	ldr	r3, [pc, #40]	; (34ec <Parser_LoraSetClass+0x44>)
    34c4:	58c3      	ldr	r3, [r0, r3]
    34c6:	6163      	str	r3, [r4, #20]
}
    34c8:	b002      	add	sp, #8
    34ca:	bd10      	pop	{r4, pc}
		edClass = CLASS_A;
    34cc:	466b      	mov	r3, sp
    34ce:	1dd9      	adds	r1, r3, #7
    34d0:	2301      	movs	r3, #1
    34d2:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    34d4:	2019      	movs	r0, #25
    34d6:	4b06      	ldr	r3, [pc, #24]	; (34f0 <Parser_LoraSetClass+0x48>)
    34d8:	4798      	blx	r3
    34da:	e7f1      	b.n	34c0 <Parser_LoraSetClass+0x18>
		edClass = CLASS_C;
    34dc:	466b      	mov	r3, sp
    34de:	1dd9      	adds	r1, r3, #7
    34e0:	2304      	movs	r3, #4
    34e2:	700b      	strb	r3, [r1, #0]
		statusIdx = LORAWAN_SetAttr(EDCLASS, &edClass);
    34e4:	300f      	adds	r0, #15
    34e6:	4b02      	ldr	r3, [pc, #8]	; (34f0 <Parser_LoraSetClass+0x48>)
    34e8:	4798      	blx	r3
    34ea:	e7e9      	b.n	34c0 <Parser_LoraSetClass+0x18>
    34ec:	0001f848 	.word	0x0001f848
    34f0:	00013979 	.word	0x00013979

000034f4 <Parser_LoraGetClass>:
{
    34f4:	b530      	push	{r4, r5, lr}
    34f6:	b083      	sub	sp, #12
    34f8:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    34fa:	466b      	mov	r3, sp
    34fc:	1ddc      	adds	r4, r3, #7
    34fe:	0022      	movs	r2, r4
    3500:	2100      	movs	r1, #0
    3502:	2019      	movs	r0, #25
    3504:	4b0a      	ldr	r3, [pc, #40]	; (3530 <Parser_LoraGetClass+0x3c>)
    3506:	4798      	blx	r3
	switch (edClass)
    3508:	7823      	ldrb	r3, [r4, #0]
    350a:	2b02      	cmp	r3, #2
    350c:	d005      	beq.n	351a <Parser_LoraGetClass+0x26>
    350e:	2b04      	cmp	r3, #4
    3510:	d00a      	beq.n	3528 <Parser_LoraGetClass+0x34>
    3512:	2b01      	cmp	r3, #1
    3514:	d00a      	beq.n	352c <Parser_LoraGetClass+0x38>
			index = 3;
    3516:	2303      	movs	r3, #3
		break;
    3518:	e000      	b.n	351c <Parser_LoraGetClass+0x28>
			index = 1;
    351a:	2301      	movs	r3, #1
	pParserCmdInfo->pReplyCmd = (char *)gapParserEdClass[index];
    351c:	009b      	lsls	r3, r3, #2
    351e:	4a05      	ldr	r2, [pc, #20]	; (3534 <Parser_LoraGetClass+0x40>)
    3520:	589b      	ldr	r3, [r3, r2]
    3522:	616b      	str	r3, [r5, #20]
}
    3524:	b003      	add	sp, #12
    3526:	bd30      	pop	{r4, r5, pc}
			index = 2;
    3528:	2302      	movs	r3, #2
		break;
    352a:	e7f7      	b.n	351c <Parser_LoraGetClass+0x28>
			index = 0;
    352c:	2300      	movs	r3, #0
    352e:	e7f5      	b.n	351c <Parser_LoraGetClass+0x28>
    3530:	00011935 	.word	0x00011935
    3534:	0001f838 	.word	0x0001f838

00003538 <Parser_LoraGetSupportedEdClass>:
{
    3538:	b530      	push	{r4, r5, lr}
    353a:	b083      	sub	sp, #12
    353c:	0005      	movs	r5, r0
	LORAWAN_GetAttr(EDCLASS_SUPPORTED, NULL, &edClassSupported);
    353e:	466b      	mov	r3, sp
    3540:	1ddc      	adds	r4, r3, #7
    3542:	0022      	movs	r2, r4
    3544:	2100      	movs	r1, #0
    3546:	2024      	movs	r0, #36	; 0x24
    3548:	4b11      	ldr	r3, [pc, #68]	; (3590 <Parser_LoraGetSupportedEdClass+0x58>)
    354a:	4798      	blx	r3
	if ((CLASS_A | CLASS_B) == edClassSupported)
    354c:	7823      	ldrb	r3, [r4, #0]
    354e:	2b03      	cmp	r3, #3
    3550:	d00a      	beq.n	3568 <Parser_LoraGetSupportedEdClass+0x30>
	else if  ((CLASS_A | CLASS_C) == edClassSupported)
    3552:	2b05      	cmp	r3, #5
    3554:	d012      	beq.n	357c <Parser_LoraGetSupportedEdClass+0x44>
		aParserData[0] = 'A';
    3556:	4b0f      	ldr	r3, [pc, #60]	; (3594 <Parser_LoraGetSupportedEdClass+0x5c>)
    3558:	2241      	movs	r2, #65	; 0x41
    355a:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '\0';
    355c:	2200      	movs	r2, #0
    355e:	705a      	strb	r2, [r3, #1]
 	pParserCmdInfo->pReplyCmd = aParserData;
    3560:	4b0c      	ldr	r3, [pc, #48]	; (3594 <Parser_LoraGetSupportedEdClass+0x5c>)
    3562:	616b      	str	r3, [r5, #20]
}
    3564:	b003      	add	sp, #12
    3566:	bd30      	pop	{r4, r5, pc}
		aParserData[0] = 'A';
    3568:	4b0a      	ldr	r3, [pc, #40]	; (3594 <Parser_LoraGetSupportedEdClass+0x5c>)
    356a:	2241      	movs	r2, #65	; 0x41
    356c:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    356e:	3a1b      	subs	r2, #27
    3570:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'B';
    3572:	321c      	adds	r2, #28
    3574:	709a      	strb	r2, [r3, #2]
		aParserData[3] = '\0';
    3576:	2200      	movs	r2, #0
    3578:	70da      	strb	r2, [r3, #3]
    357a:	e7f1      	b.n	3560 <Parser_LoraGetSupportedEdClass+0x28>
		aParserData[0] = 'A';
    357c:	4b05      	ldr	r3, [pc, #20]	; (3594 <Parser_LoraGetSupportedEdClass+0x5c>)
    357e:	2241      	movs	r2, #65	; 0x41
    3580:	701a      	strb	r2, [r3, #0]
		aParserData[1] = '&';
    3582:	3a1b      	subs	r2, #27
    3584:	705a      	strb	r2, [r3, #1]
		aParserData[2] = 'C';
    3586:	321d      	adds	r2, #29
    3588:	709a      	strb	r2, [r3, #2]
	    aParserData[3] = '\0';
    358a:	2200      	movs	r2, #0
    358c:	70da      	strb	r2, [r3, #3]
    358e:	e7e7      	b.n	3560 <Parser_LoraGetSupportedEdClass+0x28>
    3590:	00011935 	.word	0x00011935
    3594:	2000116c 	.word	0x2000116c

00003598 <Parser_LoraSetMcast>:
{
    3598:	b510      	push	{r4, lr}
    359a:	0004      	movs	r4, r0
	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    359c:	6800      	ldr	r0, [r0, #0]
    359e:	4b05      	ldr	r3, [pc, #20]	; (35b4 <Parser_LoraSetMcast+0x1c>)
    35a0:	4798      	blx	r3
	if (validationVal < 2U)
    35a2:	2801      	cmp	r0, #1
    35a4:	d902      	bls.n	35ac <Parser_LoraSetMcast+0x14>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    35a6:	4b04      	ldr	r3, [pc, #16]	; (35b8 <Parser_LoraSetMcast+0x20>)
    35a8:	6163      	str	r3, [r4, #20]
}
    35aa:	bd10      	pop	{r4, pc}
		mcastStatus.groupId = atoi(pParserCmdInfo->pParam2);
    35ac:	6860      	ldr	r0, [r4, #4]
    35ae:	4b03      	ldr	r3, [pc, #12]	; (35bc <Parser_LoraSetMcast+0x24>)
    35b0:	4798      	blx	r3
    35b2:	e7f8      	b.n	35a6 <Parser_LoraSetMcast+0xe>
    35b4:	0000437d 	.word	0x0000437d
    35b8:	0001f5d8 	.word	0x0001f5d8
    35bc:	00019645 	.word	0x00019645

000035c0 <Parser_LoraGetMcast>:
{
    35c0:	b510      	push	{r4, lr}
    35c2:	b082      	sub	sp, #8
    35c4:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    35c6:	6800      	ldr	r0, [r0, #0]
    35c8:	4b0c      	ldr	r3, [pc, #48]	; (35fc <Parser_LoraGetMcast+0x3c>)
    35ca:	4798      	blx	r3
    35cc:	466b      	mov	r3, sp
    35ce:	1d99      	adds	r1, r3, #6
    35d0:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_ENABLE, &groupId, &mcastStatus);
    35d2:	1dda      	adds	r2, r3, #7
    35d4:	2028      	movs	r0, #40	; 0x28
    35d6:	4b0a      	ldr	r3, [pc, #40]	; (3600 <Parser_LoraGetMcast+0x40>)
    35d8:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    35da:	2808      	cmp	r0, #8
    35dc:	d005      	beq.n	35ea <Parser_LoraGetMcast+0x2a>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    35de:	0080      	lsls	r0, r0, #2
    35e0:	4b08      	ldr	r3, [pc, #32]	; (3604 <Parser_LoraGetMcast+0x44>)
    35e2:	58c3      	ldr	r3, [r0, r3]
    35e4:	6163      	str	r3, [r4, #20]
}
    35e6:	b002      	add	sp, #8
    35e8:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[mcastStatus];
    35ea:	466b      	mov	r3, sp
    35ec:	3307      	adds	r3, #7
    35ee:	781b      	ldrb	r3, [r3, #0]
    35f0:	009b      	lsls	r3, r3, #2
    35f2:	4a05      	ldr	r2, [pc, #20]	; (3608 <Parser_LoraGetMcast+0x48>)
    35f4:	589b      	ldr	r3, [r3, r2]
    35f6:	6163      	str	r3, [r4, #20]
    35f8:	e7f5      	b.n	35e6 <Parser_LoraGetMcast+0x26>
    35fa:	46c0      	nop			; (mov r8, r8)
    35fc:	00019645 	.word	0x00019645
    3600:	00011935 	.word	0x00011935
    3604:	0001f848 	.word	0x0001f848
    3608:	0001f828 	.word	0x0001f828

0000360c <Parser_LoraGetMcastDownCounter>:
{
    360c:	b570      	push	{r4, r5, r6, lr}
    360e:	b082      	sub	sp, #8
    3610:	0005      	movs	r5, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    3612:	6800      	ldr	r0, [r0, #0]
    3614:	4b0c      	ldr	r3, [pc, #48]	; (3648 <Parser_LoraGetMcastDownCounter+0x3c>)
    3616:	4798      	blx	r3
    3618:	466b      	mov	r3, sp
    361a:	1cd9      	adds	r1, r3, #3
    361c:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_FCNT_DOWN, &groupId, &ctr);
    361e:	aa01      	add	r2, sp, #4
    3620:	202c      	movs	r0, #44	; 0x2c
    3622:	4b0a      	ldr	r3, [pc, #40]	; (364c <Parser_LoraGetMcastDownCounter+0x40>)
    3624:	4798      	blx	r3
    3626:	0004      	movs	r4, r0
	ultoa(aParserData, ctr, 10U);
    3628:	220a      	movs	r2, #10
    362a:	9901      	ldr	r1, [sp, #4]
    362c:	4808      	ldr	r0, [pc, #32]	; (3650 <Parser_LoraGetMcastDownCounter+0x44>)
    362e:	4b09      	ldr	r3, [pc, #36]	; (3654 <Parser_LoraGetMcastDownCounter+0x48>)
    3630:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    3632:	2c08      	cmp	r4, #8
    3634:	d005      	beq.n	3642 <Parser_LoraGetMcastDownCounter+0x36>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3636:	00a4      	lsls	r4, r4, #2
    3638:	4b07      	ldr	r3, [pc, #28]	; (3658 <Parser_LoraGetMcastDownCounter+0x4c>)
    363a:	58e3      	ldr	r3, [r4, r3]
    363c:	616b      	str	r3, [r5, #20]
}
    363e:	b002      	add	sp, #8
    3640:	bd70      	pop	{r4, r5, r6, pc}
		pParserCmdInfo->pReplyCmd = aParserData;
    3642:	4b03      	ldr	r3, [pc, #12]	; (3650 <Parser_LoraGetMcastDownCounter+0x44>)
    3644:	616b      	str	r3, [r5, #20]
    3646:	e7fa      	b.n	363e <Parser_LoraGetMcastDownCounter+0x32>
    3648:	00019645 	.word	0x00019645
    364c:	00011935 	.word	0x00011935
    3650:	2000116c 	.word	0x2000116c
    3654:	0000422d 	.word	0x0000422d
    3658:	0001f848 	.word	0x0001f848

0000365c <Parser_LoraSetMcastDevAddr>:
{
    365c:	b510      	push	{r4, lr}
    365e:	b082      	sub	sp, #8
    3660:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    3662:	6800      	ldr	r0, [r0, #0]
    3664:	4b0b      	ldr	r3, [pc, #44]	; (3694 <Parser_LoraSetMcastDevAddr+0x38>)
    3666:	4798      	blx	r3
    3668:	2800      	cmp	r0, #0
    366a:	d103      	bne.n	3674 <Parser_LoraSetMcastDevAddr+0x18>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    366c:	4b0a      	ldr	r3, [pc, #40]	; (3698 <Parser_LoraSetMcastDevAddr+0x3c>)
    366e:	6163      	str	r3, [r4, #20]
}
    3670:	b002      	add	sp, #8
    3672:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(sizeof(devMultiAddr) << 1, pParserCmdInfo->pParam1, tempBuff))
    3674:	aa01      	add	r2, sp, #4
    3676:	6821      	ldr	r1, [r4, #0]
    3678:	2008      	movs	r0, #8
    367a:	4b08      	ldr	r3, [pc, #32]	; (369c <Parser_LoraSetMcastDevAddr+0x40>)
    367c:	4798      	blx	r3
    367e:	2800      	cmp	r0, #0
    3680:	d0f4      	beq.n	366c <Parser_LoraSetMcastDevAddr+0x10>
			addr.groupId = atoi(pParserCmdInfo->pParam2);
    3682:	6860      	ldr	r0, [r4, #4]
    3684:	4b06      	ldr	r3, [pc, #24]	; (36a0 <Parser_LoraSetMcastDevAddr+0x44>)
    3686:	4798      	blx	r3
			gParserConfiguredJoinParameters.flags.mcastdevaddr = 1;
    3688:	4a06      	ldr	r2, [pc, #24]	; (36a4 <Parser_LoraSetMcastDevAddr+0x48>)
    368a:	7813      	ldrb	r3, [r2, #0]
    368c:	2140      	movs	r1, #64	; 0x40
    368e:	430b      	orrs	r3, r1
    3690:	7013      	strb	r3, [r2, #0]
    3692:	e7eb      	b.n	366c <Parser_LoraSetMcastDevAddr+0x10>
    3694:	00004141 	.word	0x00004141
    3698:	0001f5d8 	.word	0x0001f5d8
    369c:	00004449 	.word	0x00004449
    36a0:	00019645 	.word	0x00019645
    36a4:	20001f88 	.word	0x20001f88

000036a8 <Parser_LoraGetMcastDevAddr>:
{
    36a8:	b530      	push	{r4, r5, lr}
    36aa:	b085      	sub	sp, #20
    36ac:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    36ae:	6800      	ldr	r0, [r0, #0]
    36b0:	4b10      	ldr	r3, [pc, #64]	; (36f4 <Parser_LoraGetMcastDevAddr+0x4c>)
    36b2:	4798      	blx	r3
    36b4:	466b      	mov	r3, sp
    36b6:	1dd9      	adds	r1, r3, #7
    36b8:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_GROUP_ADDR, &groupId, &devMultiAddr);
    36ba:	aa03      	add	r2, sp, #12
    36bc:	2029      	movs	r0, #41	; 0x29
    36be:	4b0e      	ldr	r3, [pc, #56]	; (36f8 <Parser_LoraGetMcastDevAddr+0x50>)
    36c0:	4798      	blx	r3
	tempBuff[3] = (uint8_t)devMultiAddr;
    36c2:	9b03      	ldr	r3, [sp, #12]
    36c4:	aa02      	add	r2, sp, #8
    36c6:	70d3      	strb	r3, [r2, #3]
	tempBuff[2] = (uint8_t)(devMultiAddr >> 8);
    36c8:	0a19      	lsrs	r1, r3, #8
    36ca:	7091      	strb	r1, [r2, #2]
	tempBuff[1] = (uint8_t)(devMultiAddr >> 16);
    36cc:	0c19      	lsrs	r1, r3, #16
    36ce:	7051      	strb	r1, [r2, #1]
	tempBuff[0] = (uint8_t)(devMultiAddr >> 24);
    36d0:	0e1b      	lsrs	r3, r3, #24
    36d2:	7013      	strb	r3, [r2, #0]
	if (status == LORAWAN_SUCCESS)
    36d4:	2808      	cmp	r0, #8
    36d6:	d005      	beq.n	36e4 <Parser_LoraGetMcastDevAddr+0x3c>
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    36d8:	0080      	lsls	r0, r0, #2
    36da:	4b08      	ldr	r3, [pc, #32]	; (36fc <Parser_LoraGetMcastDevAddr+0x54>)
    36dc:	58c3      	ldr	r3, [r0, r3]
    36de:	6163      	str	r3, [r4, #20]
}
    36e0:	b005      	add	sp, #20
    36e2:	bd30      	pop	{r4, r5, pc}
		Parser_IntArrayToHexAscii(4, tempBuff, aParserData);
    36e4:	4d06      	ldr	r5, [pc, #24]	; (3700 <Parser_LoraGetMcastDevAddr+0x58>)
    36e6:	002a      	movs	r2, r5
    36e8:	a902      	add	r1, sp, #8
    36ea:	3804      	subs	r0, #4
    36ec:	4b05      	ldr	r3, [pc, #20]	; (3704 <Parser_LoraGetMcastDevAddr+0x5c>)
    36ee:	4798      	blx	r3
		pParserCmdInfo->pReplyCmd = aParserData;
    36f0:	6165      	str	r5, [r4, #20]
    36f2:	e7f5      	b.n	36e0 <Parser_LoraGetMcastDevAddr+0x38>
    36f4:	00019645 	.word	0x00019645
    36f8:	00011935 	.word	0x00011935
    36fc:	0001f848 	.word	0x0001f848
    3700:	2000116c 	.word	0x2000116c
    3704:	00004175 	.word	0x00004175

00003708 <Parser_LoraSetMcastNwksKey>:
{
    3708:	b510      	push	{r4, lr}
    370a:	b086      	sub	sp, #24
    370c:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    370e:	6800      	ldr	r0, [r0, #0]
    3710:	4b0c      	ldr	r3, [pc, #48]	; (3744 <Parser_LoraSetMcastNwksKey+0x3c>)
    3712:	4798      	blx	r3
    3714:	2800      	cmp	r0, #0
    3716:	d103      	bne.n	3720 <Parser_LoraSetMcastNwksKey+0x18>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    3718:	4b0b      	ldr	r3, [pc, #44]	; (3748 <Parser_LoraSetMcastNwksKey+0x40>)
    371a:	6163      	str	r3, [r4, #20]
}
    371c:	b006      	add	sp, #24
    371e:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1, (uint8_t *)(key.mcastNwkSKey)))
    3720:	466b      	mov	r3, sp
    3722:	1d5a      	adds	r2, r3, #5
    3724:	6821      	ldr	r1, [r4, #0]
    3726:	2020      	movs	r0, #32
    3728:	4b08      	ldr	r3, [pc, #32]	; (374c <Parser_LoraSetMcastNwksKey+0x44>)
    372a:	4798      	blx	r3
    372c:	2800      	cmp	r0, #0
    372e:	d0f3      	beq.n	3718 <Parser_LoraSetMcastNwksKey+0x10>
			key.groupId = atoi(pParserCmdInfo->pParam2);
    3730:	6860      	ldr	r0, [r4, #4]
    3732:	4b07      	ldr	r3, [pc, #28]	; (3750 <Parser_LoraSetMcastNwksKey+0x48>)
    3734:	4798      	blx	r3
			gParserConfiguredJoinParameters.flags.mcastnwkskey = 1;
    3736:	4a07      	ldr	r2, [pc, #28]	; (3754 <Parser_LoraSetMcastNwksKey+0x4c>)
    3738:	7811      	ldrb	r1, [r2, #0]
    373a:	2380      	movs	r3, #128	; 0x80
    373c:	425b      	negs	r3, r3
    373e:	430b      	orrs	r3, r1
    3740:	7013      	strb	r3, [r2, #0]
    3742:	e7e9      	b.n	3718 <Parser_LoraSetMcastNwksKey+0x10>
    3744:	00004141 	.word	0x00004141
    3748:	0001f5d8 	.word	0x0001f5d8
    374c:	00004449 	.word	0x00004449
    3750:	00019645 	.word	0x00019645
    3754:	20001f88 	.word	0x20001f88

00003758 <Parser_LoraSetMcastAppsKey>:
{
    3758:	b510      	push	{r4, lr}
    375a:	b086      	sub	sp, #24
    375c:	0004      	movs	r4, r0
	if(Validate_HexValue(pParserCmdInfo->pParam1))
    375e:	6800      	ldr	r0, [r0, #0]
    3760:	4b0c      	ldr	r3, [pc, #48]	; (3794 <Parser_LoraSetMcastAppsKey+0x3c>)
    3762:	4798      	blx	r3
    3764:	2800      	cmp	r0, #0
    3766:	d103      	bne.n	3770 <Parser_LoraSetMcastAppsKey+0x18>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    3768:	4b0b      	ldr	r3, [pc, #44]	; (3798 <Parser_LoraSetMcastAppsKey+0x40>)
    376a:	6163      	str	r3, [r4, #20]
}
    376c:	b006      	add	sp, #24
    376e:	bd10      	pop	{r4, pc}
		if(Parser_HexAsciiToInt(32U, pParserCmdInfo->pParam1,(uint8_t *)(key.mcastNwkSKey)))
    3770:	466b      	mov	r3, sp
    3772:	1d5a      	adds	r2, r3, #5
    3774:	6821      	ldr	r1, [r4, #0]
    3776:	2020      	movs	r0, #32
    3778:	4b08      	ldr	r3, [pc, #32]	; (379c <Parser_LoraSetMcastAppsKey+0x44>)
    377a:	4798      	blx	r3
    377c:	2800      	cmp	r0, #0
    377e:	d0f3      	beq.n	3768 <Parser_LoraSetMcastAppsKey+0x10>
			key.groupId = atoi(pParserCmdInfo->pParam2);			
    3780:	6860      	ldr	r0, [r4, #4]
    3782:	4b07      	ldr	r3, [pc, #28]	; (37a0 <Parser_LoraSetMcastAppsKey+0x48>)
    3784:	4798      	blx	r3
			gParserConfiguredJoinParameters.flags.mcastappskey = 1;
    3786:	4a07      	ldr	r2, [pc, #28]	; (37a4 <Parser_LoraSetMcastAppsKey+0x4c>)
    3788:	7853      	ldrb	r3, [r2, #1]
    378a:	2101      	movs	r1, #1
    378c:	430b      	orrs	r3, r1
    378e:	7053      	strb	r3, [r2, #1]
    3790:	e7ea      	b.n	3768 <Parser_LoraSetMcastAppsKey+0x10>
    3792:	46c0      	nop			; (mov r8, r8)
    3794:	00004141 	.word	0x00004141
    3798:	0001f5d8 	.word	0x0001f5d8
    379c:	00004449 	.word	0x00004449
    37a0:	00019645 	.word	0x00019645
    37a4:	20001f88 	.word	0x20001f88

000037a8 <Parser_LoraSetMcastFreq>:
{
    37a8:	b510      	push	{r4, lr}
    37aa:	0004      	movs	r4, r0
	key.dlFrequency = strtoul(pParserCmdInfo->pParam1, NULL, 10);
    37ac:	220a      	movs	r2, #10
    37ae:	2100      	movs	r1, #0
    37b0:	6800      	ldr	r0, [r0, #0]
    37b2:	4b0b      	ldr	r3, [pc, #44]	; (37e0 <Parser_LoraSetMcastFreq+0x38>)
    37b4:	4798      	blx	r3
	  if(Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    37b6:	2201      	movs	r2, #1
    37b8:	4252      	negs	r2, r2
    37ba:	210a      	movs	r1, #10
    37bc:	6820      	ldr	r0, [r4, #0]
    37be:	4b09      	ldr	r3, [pc, #36]	; (37e4 <Parser_LoraSetMcastFreq+0x3c>)
    37c0:	4798      	blx	r3
    37c2:	2800      	cmp	r0, #0
    37c4:	d102      	bne.n	37cc <Parser_LoraSetMcastFreq+0x24>
	 pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    37c6:	4b08      	ldr	r3, [pc, #32]	; (37e8 <Parser_LoraSetMcastFreq+0x40>)
    37c8:	6163      	str	r3, [r4, #20]
}
    37ca:	bd10      	pop	{r4, pc}
		  key.groupId = atoi(pParserCmdInfo->pParam2);
    37cc:	6860      	ldr	r0, [r4, #4]
    37ce:	4b07      	ldr	r3, [pc, #28]	; (37ec <Parser_LoraSetMcastFreq+0x44>)
    37d0:	4798      	blx	r3
		  gParserConfiguredJoinParameters.flags.mcastfreq = 1;
    37d2:	4a07      	ldr	r2, [pc, #28]	; (37f0 <Parser_LoraSetMcastFreq+0x48>)
    37d4:	7853      	ldrb	r3, [r2, #1]
    37d6:	2102      	movs	r1, #2
    37d8:	430b      	orrs	r3, r1
    37da:	7053      	strb	r3, [r2, #1]
    37dc:	e7f3      	b.n	37c6 <Parser_LoraSetMcastFreq+0x1e>
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	0001a581 	.word	0x0001a581
    37e4:	000042a9 	.word	0x000042a9
    37e8:	0001f5d8 	.word	0x0001f5d8
    37ec:	00019645 	.word	0x00019645
    37f0:	20001f88 	.word	0x20001f88

000037f4 <Parser_LoraGetMcastFreq>:
{
    37f4:	b570      	push	{r4, r5, r6, lr}
    37f6:	b082      	sub	sp, #8
    37f8:	0005      	movs	r5, r0
  uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    37fa:	6800      	ldr	r0, [r0, #0]
    37fc:	4b0c      	ldr	r3, [pc, #48]	; (3830 <Parser_LoraGetMcastFreq+0x3c>)
    37fe:	4798      	blx	r3
    3800:	466b      	mov	r3, sp
    3802:	1cd9      	adds	r1, r3, #3
    3804:	7008      	strb	r0, [r1, #0]
  status = LORAWAN_GetAttr(MCAST_FREQUENCY,&groupId,&freq);
    3806:	aa01      	add	r2, sp, #4
    3808:	202f      	movs	r0, #47	; 0x2f
    380a:	4b0a      	ldr	r3, [pc, #40]	; (3834 <Parser_LoraGetMcastFreq+0x40>)
    380c:	4798      	blx	r3
    380e:	0004      	movs	r4, r0
  ultoa(aParserData, freq, 10U);
    3810:	220a      	movs	r2, #10
    3812:	9901      	ldr	r1, [sp, #4]
    3814:	4808      	ldr	r0, [pc, #32]	; (3838 <Parser_LoraGetMcastFreq+0x44>)
    3816:	4b09      	ldr	r3, [pc, #36]	; (383c <Parser_LoraGetMcastFreq+0x48>)
    3818:	4798      	blx	r3
  if(status == LORAWAN_SUCCESS)
    381a:	2c08      	cmp	r4, #8
    381c:	d005      	beq.n	382a <Parser_LoraGetMcastFreq+0x36>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    381e:	00a4      	lsls	r4, r4, #2
    3820:	4b07      	ldr	r3, [pc, #28]	; (3840 <Parser_LoraGetMcastFreq+0x4c>)
    3822:	58e3      	ldr	r3, [r4, r3]
    3824:	616b      	str	r3, [r5, #20]
}
    3826:	b002      	add	sp, #8
    3828:	bd70      	pop	{r4, r5, r6, pc}
	  pParserCmdInfo->pReplyCmd = aParserData;
    382a:	4b03      	ldr	r3, [pc, #12]	; (3838 <Parser_LoraGetMcastFreq+0x44>)
    382c:	616b      	str	r3, [r5, #20]
    382e:	e7fa      	b.n	3826 <Parser_LoraGetMcastFreq+0x32>
    3830:	00019645 	.word	0x00019645
    3834:	00011935 	.word	0x00011935
    3838:	2000116c 	.word	0x2000116c
    383c:	0000422d 	.word	0x0000422d
    3840:	0001f848 	.word	0x0001f848

00003844 <Parser_LoraSetMcastDr>:
{
    3844:	b510      	push	{r4, lr}
    3846:	b082      	sub	sp, #8
    3848:	0004      	movs	r4, r0
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &(key.datarate)))
    384a:	466b      	mov	r3, sp
    384c:	1d59      	adds	r1, r3, #5
    384e:	6800      	ldr	r0, [r0, #0]
    3850:	4b05      	ldr	r3, [pc, #20]	; (3868 <Parser_LoraSetMcastDr+0x24>)
    3852:	4798      	blx	r3
    3854:	2800      	cmp	r0, #0
    3856:	d103      	bne.n	3860 <Parser_LoraSetMcastDr+0x1c>
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[statusIdx];
    3858:	4b04      	ldr	r3, [pc, #16]	; (386c <Parser_LoraSetMcastDr+0x28>)
    385a:	6163      	str	r3, [r4, #20]
}
    385c:	b002      	add	sp, #8
    385e:	bd10      	pop	{r4, pc}
		key.groupId = atoi(pParserCmdInfo->pParam2);
    3860:	6860      	ldr	r0, [r4, #4]
    3862:	4b03      	ldr	r3, [pc, #12]	; (3870 <Parser_LoraSetMcastDr+0x2c>)
    3864:	4798      	blx	r3
    3866:	e7f7      	b.n	3858 <Parser_LoraSetMcastDr+0x14>
    3868:	000041d5 	.word	0x000041d5
    386c:	0001f5d8 	.word	0x0001f5d8
    3870:	00019645 	.word	0x00019645

00003874 <Parser_LoraGetMcastDr>:
{
    3874:	b530      	push	{r4, r5, lr}
    3876:	b083      	sub	sp, #12
    3878:	0004      	movs	r4, r0
	uint8_t groupId = atoi(pParserCmdInfo->pParam1);
    387a:	6800      	ldr	r0, [r0, #0]
    387c:	4b0c      	ldr	r3, [pc, #48]	; (38b0 <Parser_LoraGetMcastDr+0x3c>)
    387e:	4798      	blx	r3
    3880:	466b      	mov	r3, sp
    3882:	1d99      	adds	r1, r3, #6
    3884:	7008      	strb	r0, [r1, #0]
	status = LORAWAN_GetAttr(MCAST_DATARATE,&groupId,&dr);
    3886:	1dda      	adds	r2, r3, #7
    3888:	2030      	movs	r0, #48	; 0x30
    388a:	4b0a      	ldr	r3, [pc, #40]	; (38b4 <Parser_LoraGetMcastDr+0x40>)
    388c:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    388e:	2808      	cmp	r0, #8
    3890:	d005      	beq.n	389e <Parser_LoraGetMcastDr+0x2a>
	  pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];	
    3892:	0080      	lsls	r0, r0, #2
    3894:	4b08      	ldr	r3, [pc, #32]	; (38b8 <Parser_LoraGetMcastDr+0x44>)
    3896:	58c3      	ldr	r3, [r0, r3]
    3898:	6163      	str	r3, [r4, #20]
}
    389a:	b003      	add	sp, #12
    389c:	bd30      	pop	{r4, r5, pc}
	   itoa(dr, aParserData, 10U);
    389e:	4d07      	ldr	r5, [pc, #28]	; (38bc <Parser_LoraGetMcastDr+0x48>)
    38a0:	466b      	mov	r3, sp
    38a2:	79d8      	ldrb	r0, [r3, #7]
    38a4:	220a      	movs	r2, #10
    38a6:	0029      	movs	r1, r5
    38a8:	4b05      	ldr	r3, [pc, #20]	; (38c0 <Parser_LoraGetMcastDr+0x4c>)
    38aa:	4798      	blx	r3
	   pParserCmdInfo->pReplyCmd = aParserData;
    38ac:	6165      	str	r5, [r4, #20]
    38ae:	e7f4      	b.n	389a <Parser_LoraGetMcastDr+0x26>
    38b0:	00019645 	.word	0x00019645
    38b4:	00011935 	.word	0x00011935
    38b8:	0001f848 	.word	0x0001f848
    38bc:	2000116c 	.word	0x2000116c
    38c0:	000196c9 	.word	0x000196c9

000038c4 <Parser_LoraGetMacLastPacketRssi>:

void Parser_LoraGetMacLastPacketRssi(parserCmdInfo_t* pParserCmdInfo)
{
    38c4:	b570      	push	{r4, r5, r6, lr}
    38c6:	b082      	sub	sp, #8
    38c8:	0006      	movs	r6, r0
	int16_t rssi;

	LORAWAN_GetAttr(LAST_PACKET_RSSI, NULL, &rssi);
    38ca:	466b      	mov	r3, sp
    38cc:	1d9d      	adds	r5, r3, #6
    38ce:	002a      	movs	r2, r5
    38d0:	2100      	movs	r1, #0
    38d2:	2035      	movs	r0, #53	; 0x35
    38d4:	4b05      	ldr	r3, [pc, #20]	; (38ec <Parser_LoraGetMacLastPacketRssi+0x28>)
    38d6:	4798      	blx	r3
	itoa(rssi,aParserData, 10U);
    38d8:	4c05      	ldr	r4, [pc, #20]	; (38f0 <Parser_LoraGetMacLastPacketRssi+0x2c>)
    38da:	2300      	movs	r3, #0
    38dc:	5ee8      	ldrsh	r0, [r5, r3]
    38de:	220a      	movs	r2, #10
    38e0:	0021      	movs	r1, r4
    38e2:	4b04      	ldr	r3, [pc, #16]	; (38f4 <Parser_LoraGetMacLastPacketRssi+0x30>)
    38e4:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;
    38e6:	6174      	str	r4, [r6, #20]
}
    38e8:	b002      	add	sp, #8
    38ea:	bd70      	pop	{r4, r5, r6, pc}
    38ec:	00011935 	.word	0x00011935
    38f0:	2000116c 	.word	0x2000116c
    38f4:	000196c9 	.word	0x000196c9

000038f8 <Parser_LoraGetIsFpending>:
void Parser_LoraGetIsFpending(parserCmdInfo_t* pParserCmdInfo)
{
    38f8:	b530      	push	{r4, r5, lr}
    38fa:	b083      	sub	sp, #12
    38fc:	0005      	movs	r5, r0
	bool isFpending;

	LORAWAN_GetAttr(IS_FPENDING, NULL, &isFpending);
    38fe:	466b      	mov	r3, sp
    3900:	1ddc      	adds	r4, r3, #7
    3902:	0022      	movs	r2, r4
    3904:	2100      	movs	r1, #0
    3906:	2036      	movs	r0, #54	; 0x36
    3908:	4b04      	ldr	r3, [pc, #16]	; (391c <Parser_LoraGetIsFpending+0x24>)
    390a:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[isFpending];
    390c:	7823      	ldrb	r3, [r4, #0]
    390e:	009b      	lsls	r3, r3, #2
    3910:	4a03      	ldr	r2, [pc, #12]	; (3920 <Parser_LoraGetIsFpending+0x28>)
    3912:	589b      	ldr	r3, [r3, r2]
    3914:	616b      	str	r3, [r5, #20]
}
    3916:	b003      	add	sp, #12
    3918:	bd30      	pop	{r4, r5, pc}
    391a:	46c0      	nop			; (mov r8, r8)
    391c:	00011935 	.word	0x00011935
    3920:	0001f830 	.word	0x0001f830

00003924 <Parser_LoraGetMacDlAckReqd>:
void Parser_LoraGetMacDlAckReqd(parserCmdInfo_t* pParserCmdInfo)
{
    3924:	b530      	push	{r4, r5, lr}
    3926:	b083      	sub	sp, #12
    3928:	0005      	movs	r5, r0
	uint8_t req;

	LORAWAN_GetAttr(DL_ACK_REQD, NULL, &req);
    392a:	466b      	mov	r3, sp
    392c:	1ddc      	adds	r4, r3, #7
    392e:	0022      	movs	r2, r4
    3930:	2100      	movs	r1, #0
    3932:	2037      	movs	r0, #55	; 0x37
    3934:	4b04      	ldr	r3, [pc, #16]	; (3948 <Parser_LoraGetMacDlAckReqd+0x24>)
    3936:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = (char*)gapParserBool[req];
    3938:	7823      	ldrb	r3, [r4, #0]
    393a:	009b      	lsls	r3, r3, #2
    393c:	4a03      	ldr	r2, [pc, #12]	; (394c <Parser_LoraGetMacDlAckReqd+0x28>)
    393e:	589b      	ldr	r3, [r3, r2]
    3940:	616b      	str	r3, [r5, #20]
	
}
    3942:	b003      	add	sp, #12
    3944:	bd30      	pop	{r4, r5, pc}
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	00011935 	.word	0x00011935
    394c:	0001f830 	.word	0x0001f830

00003950 <Parser_LoraGetMacLastChId>:
void Parser_LoraGetMacLastChId(parserCmdInfo_t* pParserCmdInfo)
{
    3950:	b570      	push	{r4, r5, r6, lr}
    3952:	b082      	sub	sp, #8
    3954:	0006      	movs	r6, r0
	uint8_t id;

	LORAWAN_GetAttr(LAST_CH_ID, NULL, &id);
    3956:	466b      	mov	r3, sp
    3958:	1ddd      	adds	r5, r3, #7
    395a:	002a      	movs	r2, r5
    395c:	2100      	movs	r1, #0
    395e:	2038      	movs	r0, #56	; 0x38
    3960:	4b05      	ldr	r3, [pc, #20]	; (3978 <Parser_LoraGetMacLastChId+0x28>)
    3962:	4798      	blx	r3
	utoa(id, aParserData,  10U);
    3964:	4c05      	ldr	r4, [pc, #20]	; (397c <Parser_LoraGetMacLastChId+0x2c>)
    3966:	7828      	ldrb	r0, [r5, #0]
    3968:	220a      	movs	r2, #10
    396a:	0021      	movs	r1, r4
    396c:	4b04      	ldr	r3, [pc, #16]	; (3980 <Parser_LoraGetMacLastChId+0x30>)
    396e:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    3970:	6174      	str	r4, [r6, #20]
}
    3972:	b002      	add	sp, #8
    3974:	bd70      	pop	{r4, r5, r6, pc}
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	00011935 	.word	0x00011935
    397c:	2000116c 	.word	0x2000116c
    3980:	0001a639 	.word	0x0001a639

00003984 <Parser_LoraGetMacPendingDutyCycle>:
void Parser_LoraGetMacPendingDutyCycle(parserCmdInfo_t* pParserCmdInfo)
{
    3984:	b530      	push	{r4, r5, lr}
    3986:	b083      	sub	sp, #12
    3988:	0005      	movs	r5, r0
	uint32_t value;

	LORAWAN_GetAttr(PENDING_DUTY_CYCLE_TIME, NULL, &value);
    398a:	aa01      	add	r2, sp, #4
    398c:	2100      	movs	r1, #0
    398e:	2039      	movs	r0, #57	; 0x39
    3990:	4b05      	ldr	r3, [pc, #20]	; (39a8 <Parser_LoraGetMacPendingDutyCycle+0x24>)
    3992:	4798      	blx	r3
	utoa(value, aParserData,  10U);
    3994:	4c05      	ldr	r4, [pc, #20]	; (39ac <Parser_LoraGetMacPendingDutyCycle+0x28>)
    3996:	220a      	movs	r2, #10
    3998:	0021      	movs	r1, r4
    399a:	9801      	ldr	r0, [sp, #4]
    399c:	4b04      	ldr	r3, [pc, #16]	; (39b0 <Parser_LoraGetMacPendingDutyCycle+0x2c>)
    399e:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    39a0:	616c      	str	r4, [r5, #20]
}
    39a2:	b003      	add	sp, #12
    39a4:	bd30      	pop	{r4, r5, pc}
    39a6:	46c0      	nop			; (mov r8, r8)
    39a8:	00011935 	.word	0x00011935
    39ac:	2000116c 	.word	0x2000116c
    39b0:	0001a639 	.word	0x0001a639

000039b4 <Parser_LoraGetMacCnfRetryCnt>:
	uint8_t ctr;

	//LORAWAN_GetAttr(RETRY_COUNTER_CNF, NULL, &ctr);
	//utoa(ctr, aParserData,  10U);

	pParserCmdInfo->pReplyCmd = aParserData;	
    39b4:	4b01      	ldr	r3, [pc, #4]	; (39bc <Parser_LoraGetMacCnfRetryCnt+0x8>)
    39b6:	6143      	str	r3, [r0, #20]
}
    39b8:	4770      	bx	lr
    39ba:	46c0      	nop			; (mov r8, r8)
    39bc:	2000116c 	.word	0x2000116c

000039c0 <Parser_LoraGetMacUncnfRetryCnt>:
	uint8_t ctr;

	//LORAWAN_GetAttr(RETRY_COUNTER_UNCNF, NULL, &ctr);
	//utoa(ctr, aParserData,  10U);

	pParserCmdInfo->pReplyCmd = aParserData;	
    39c0:	4b01      	ldr	r3, [pc, #4]	; (39c8 <Parser_LoraGetMacUncnfRetryCnt+0x8>)
    39c2:	6143      	str	r3, [r0, #20]
}
    39c4:	4770      	bx	lr
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	2000116c 	.word	0x2000116c

000039cc <Parser_LoraGetMacNextPayloadSize>:
void Parser_LoraGetMacNextPayloadSize(parserCmdInfo_t* pParserCmdInfo)
{
    39cc:	b570      	push	{r4, r5, r6, lr}
    39ce:	b082      	sub	sp, #8
    39d0:	0006      	movs	r6, r0
	uint16_t size;

	LORAWAN_GetAttr(NEXT_PAYLOAD_SIZE, NULL, &size);
    39d2:	466b      	mov	r3, sp
    39d4:	1d9d      	adds	r5, r3, #6
    39d6:	002a      	movs	r2, r5
    39d8:	2100      	movs	r1, #0
    39da:	203b      	movs	r0, #59	; 0x3b
    39dc:	4b05      	ldr	r3, [pc, #20]	; (39f4 <Parser_LoraGetMacNextPayloadSize+0x28>)
    39de:	4798      	blx	r3
	utoa(size, aParserData,  10U);
    39e0:	4c05      	ldr	r4, [pc, #20]	; (39f8 <Parser_LoraGetMacNextPayloadSize+0x2c>)
    39e2:	8828      	ldrh	r0, [r5, #0]
    39e4:	220a      	movs	r2, #10
    39e6:	0021      	movs	r1, r4
    39e8:	4b04      	ldr	r3, [pc, #16]	; (39fc <Parser_LoraGetMacNextPayloadSize+0x30>)
    39ea:	4798      	blx	r3

	pParserCmdInfo->pReplyCmd = aParserData;	
    39ec:	6174      	str	r4, [r6, #20]
}
    39ee:	b002      	add	sp, #8
    39f0:	bd70      	pop	{r4, r5, r6, pc}
    39f2:	46c0      	nop			; (mov r8, r8)
    39f4:	00011935 	.word	0x00011935
    39f8:	2000116c 	.word	0x2000116c
    39fc:	0001a639 	.word	0x0001a639

00003a00 <Parser_LoraGetJoindutycycleremaining>:

void Parser_LoraGetJoindutycycleremaining(parserCmdInfo_t* pParserCmdInfo)
{
    3a00:	b530      	push	{r4, r5, lr}
    3a02:	b083      	sub	sp, #12
    3a04:	0005      	movs	r5, r0
	uint32_t remainingtime;
	LORAWAN_GetAttr(PENDING_JOIN_DUTY_CYCLE_TIME,NULL, &remainingtime);
    3a06:	aa01      	add	r2, sp, #4
    3a08:	2100      	movs	r1, #0
    3a0a:	203c      	movs	r0, #60	; 0x3c
    3a0c:	4b05      	ldr	r3, [pc, #20]	; (3a24 <Parser_LoraGetJoindutycycleremaining+0x24>)
    3a0e:	4798      	blx	r3
	utoa(remainingtime, aParserData, 10U);
    3a10:	4c05      	ldr	r4, [pc, #20]	; (3a28 <Parser_LoraGetJoindutycycleremaining+0x28>)
    3a12:	220a      	movs	r2, #10
    3a14:	0021      	movs	r1, r4
    3a16:	9801      	ldr	r0, [sp, #4]
    3a18:	4b04      	ldr	r3, [pc, #16]	; (3a2c <Parser_LoraGetJoindutycycleremaining+0x2c>)
    3a1a:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3a1c:	616c      	str	r4, [r5, #20]
}
    3a1e:	b003      	add	sp, #12
    3a20:	bd30      	pop	{r4, r5, pc}
    3a22:	46c0      	nop			; (mov r8, r8)
    3a24:	00011935 	.word	0x00011935
    3a28:	2000116c 	.word	0x2000116c
    3a2c:	0001a639 	.word	0x0001a639

00003a30 <Parser_LoraSetJoinBackoff>:

void Parser_LoraSetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    3a30:	b510      	push	{r4, lr}
    3a32:	b082      	sub	sp, #8
    3a34:	0004      	movs	r4, r0
	uint8_t validationVal;
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
	bool joinBackoffEnable;

	validationVal = Validate_OnOffAsciiValue(pParserCmdInfo->pParam1);
    3a36:	6800      	ldr	r0, [r0, #0]
    3a38:	4b0a      	ldr	r3, [pc, #40]	; (3a64 <Parser_LoraSetJoinBackoff+0x34>)
    3a3a:	4798      	blx	r3
	uint8_t returnVal = LORAWAN_INVALID_PARAMETER;
    3a3c:	230a      	movs	r3, #10
	if (validationVal < 2U)
    3a3e:	2801      	cmp	r0, #1
    3a40:	d905      	bls.n	3a4e <Parser_LoraSetJoinBackoff+0x1e>
	{
		joinBackoffEnable = validationVal;
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
	}
	
	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[returnVal];
    3a42:	009b      	lsls	r3, r3, #2
    3a44:	4a08      	ldr	r2, [pc, #32]	; (3a68 <Parser_LoraSetJoinBackoff+0x38>)
    3a46:	589b      	ldr	r3, [r3, r2]
    3a48:	6163      	str	r3, [r4, #20]
}
    3a4a:	b002      	add	sp, #8
    3a4c:	bd10      	pop	{r4, pc}
		joinBackoffEnable = validationVal;
    3a4e:	466b      	mov	r3, sp
    3a50:	1dd9      	adds	r1, r3, #7
    3a52:	1e43      	subs	r3, r0, #1
    3a54:	4198      	sbcs	r0, r3
    3a56:	7008      	strb	r0, [r1, #0]
		returnVal = LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE, &joinBackoffEnable);
    3a58:	2033      	movs	r0, #51	; 0x33
    3a5a:	4b04      	ldr	r3, [pc, #16]	; (3a6c <Parser_LoraSetJoinBackoff+0x3c>)
    3a5c:	4798      	blx	r3
    3a5e:	0003      	movs	r3, r0
    3a60:	e7ef      	b.n	3a42 <Parser_LoraSetJoinBackoff+0x12>
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	0000437d 	.word	0x0000437d
    3a68:	0001f848 	.word	0x0001f848
    3a6c:	00013979 	.word	0x00013979

00003a70 <Parser_LoraSetMaxFcntPdsUpdtVal>:

void Parser_LoraSetMaxFcntPdsUpdtVal(parserCmdInfo_t* pParserCmdInfo)
{
    3a70:	b510      	push	{r4, lr}
    3a72:	b082      	sub	sp, #8
    3a74:	0004      	movs	r4, r0
	uint8_t status = LORAWAN_INVALID_PARAMETER;
	uint8_t fcnt;

	// Parameter validation
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    3a76:	466b      	mov	r3, sp
    3a78:	1dd9      	adds	r1, r3, #7
    3a7a:	6800      	ldr	r0, [r0, #0]
    3a7c:	4b08      	ldr	r3, [pc, #32]	; (3aa0 <Parser_LoraSetMaxFcntPdsUpdtVal+0x30>)
    3a7e:	4798      	blx	r3
	uint8_t status = LORAWAN_INVALID_PARAMETER;
    3a80:	230a      	movs	r3, #10
	if(Validate_Uint8DecAsciiValue(pParserCmdInfo->pParam1, &fcnt))
    3a82:	2800      	cmp	r0, #0
    3a84:	d105      	bne.n	3a92 <Parser_LoraSetMaxFcntPdsUpdtVal+0x22>
	{
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
	}

	pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3a86:	009b      	lsls	r3, r3, #2
    3a88:	4a06      	ldr	r2, [pc, #24]	; (3aa4 <Parser_LoraSetMaxFcntPdsUpdtVal+0x34>)
    3a8a:	589b      	ldr	r3, [r3, r2]
    3a8c:	6163      	str	r3, [r4, #20]
}
    3a8e:	b002      	add	sp, #8
    3a90:	bd10      	pop	{r4, pc}
		status = LORAWAN_SetAttr(MAX_FCNT_PDS_UPDATE_VAL,&fcnt);
    3a92:	466b      	mov	r3, sp
    3a94:	1dd9      	adds	r1, r3, #7
    3a96:	203d      	movs	r0, #61	; 0x3d
    3a98:	4b03      	ldr	r3, [pc, #12]	; (3aa8 <Parser_LoraSetMaxFcntPdsUpdtVal+0x38>)
    3a9a:	4798      	blx	r3
    3a9c:	0003      	movs	r3, r0
    3a9e:	e7f2      	b.n	3a86 <Parser_LoraSetMaxFcntPdsUpdtVal+0x16>
    3aa0:	000041d5 	.word	0x000041d5
    3aa4:	0001f848 	.word	0x0001f848
    3aa8:	00013979 	.word	0x00013979

00003aac <Parser_LoraGetJoinBackoff>:

void Parser_LoraGetJoinBackoff(parserCmdInfo_t* pParserCmdInfo)
{
    3aac:	b510      	push	{r4, lr}
    3aae:	b082      	sub	sp, #8
    3ab0:	0004      	movs	r4, r0
	bool joinBackoffEnable ;
	StackRetStatus_t status;

	status = LORAWAN_GetAttr(JOIN_BACKOFF_ENABLE, NULL, &joinBackoffEnable);
    3ab2:	466b      	mov	r3, sp
    3ab4:	1dda      	adds	r2, r3, #7
    3ab6:	2100      	movs	r1, #0
    3ab8:	2033      	movs	r0, #51	; 0x33
    3aba:	4b09      	ldr	r3, [pc, #36]	; (3ae0 <Parser_LoraGetJoinBackoff+0x34>)
    3abc:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS)
    3abe:	2808      	cmp	r0, #8
    3ac0:	d005      	beq.n	3ace <Parser_LoraGetJoinBackoff+0x22>
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
	}
	else
	{
		pParserCmdInfo->pReplyCmd = (char*)gapParserLorawanStatus[status];
    3ac2:	0080      	lsls	r0, r0, #2
    3ac4:	4b07      	ldr	r3, [pc, #28]	; (3ae4 <Parser_LoraGetJoinBackoff+0x38>)
    3ac6:	58c3      	ldr	r3, [r0, r3]
    3ac8:	6163      	str	r3, [r4, #20]
	}
    3aca:	b002      	add	sp, #8
    3acc:	bd10      	pop	{r4, pc}
		pParserCmdInfo->pReplyCmd = (char*)gapParseOnOff[joinBackoffEnable];
    3ace:	466b      	mov	r3, sp
    3ad0:	3307      	adds	r3, #7
    3ad2:	781b      	ldrb	r3, [r3, #0]
    3ad4:	009b      	lsls	r3, r3, #2
    3ad6:	4a04      	ldr	r2, [pc, #16]	; (3ae8 <Parser_LoraGetJoinBackoff+0x3c>)
    3ad8:	589b      	ldr	r3, [r3, r2]
    3ada:	6163      	str	r3, [r4, #20]
    3adc:	e7f5      	b.n	3aca <Parser_LoraGetJoinBackoff+0x1e>
    3ade:	46c0      	nop			; (mov r8, r8)
    3ae0:	00011935 	.word	0x00011935
    3ae4:	0001f848 	.word	0x0001f848
    3ae8:	0001f828 	.word	0x0001f828

00003aec <parserSleepCallback>:
/*********************************************************************//**
\brief	Callback function of parser to power manager.
\param[in]	sleptDuration - duration for which sleep is done
*************************************************************************/
static void parserSleepCallback(uint32_t sleptDuration)
{
    3aec:	b510      	push	{r4, lr}
    3aee:	0004      	movs	r4, r0
	HAL_Radio_resources_init();
    3af0:	4b04      	ldr	r3, [pc, #16]	; (3b04 <parserSleepCallback+0x18>)
    3af2:	4798      	blx	r3
	sio2host_init();
    3af4:	4b04      	ldr	r3, [pc, #16]	; (3b08 <parserSleepCallback+0x1c>)
    3af6:	4798      	blx	r3
	printf("\nsleep_ok %ld ms\n\r", sleptDuration);
    3af8:	0021      	movs	r1, r4
    3afa:	4804      	ldr	r0, [pc, #16]	; (3b0c <parserSleepCallback+0x20>)
    3afc:	4b04      	ldr	r3, [pc, #16]	; (3b10 <parserSleepCallback+0x24>)
    3afe:	4798      	blx	r3
}
    3b00:	bd10      	pop	{r4, pc}
    3b02:	46c0      	nop			; (mov r8, r8)
    3b04:	00008015 	.word	0x00008015
    3b08:	00007ab5 	.word	0x00007ab5
    3b0c:	0001f9f4 	.word	0x0001f9f4
    3b10:	00019ef5 	.word	0x00019ef5

00003b14 <extint_callback>:
{
    3b14:	b510      	push	{r4, lr}
	PMM_Wakeup();
    3b16:	4b09      	ldr	r3, [pc, #36]	; (3b3c <extint_callback+0x28>)
    3b18:	4798      	blx	r3
	if(SleepEnabled)
    3b1a:	4b09      	ldr	r3, [pc, #36]	; (3b40 <extint_callback+0x2c>)
    3b1c:	781b      	ldrb	r3, [r3, #0]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d100      	bne.n	3b24 <extint_callback+0x10>
}
    3b22:	bd10      	pop	{r4, pc}
	    HAL_Radio_resources_init();
    3b24:	4b07      	ldr	r3, [pc, #28]	; (3b44 <extint_callback+0x30>)
    3b26:	4798      	blx	r3
		sio2host_init();
    3b28:	4b07      	ldr	r3, [pc, #28]	; (3b48 <extint_callback+0x34>)
    3b2a:	4798      	blx	r3
		printf("\nExiting Sleep\n\r");
    3b2c:	4807      	ldr	r0, [pc, #28]	; (3b4c <extint_callback+0x38>)
    3b2e:	4b08      	ldr	r3, [pc, #32]	; (3b50 <extint_callback+0x3c>)
    3b30:	4798      	blx	r3
		SleepEnabled = false;
    3b32:	2200      	movs	r2, #0
    3b34:	4b02      	ldr	r3, [pc, #8]	; (3b40 <extint_callback+0x2c>)
    3b36:	701a      	strb	r2, [r3, #0]
}
    3b38:	e7f3      	b.n	3b22 <extint_callback+0xe>
    3b3a:	46c0      	nop			; (mov r8, r8)
    3b3c:	00008361 	.word	0x00008361
    3b40:	20000b54 	.word	0x20000b54
    3b44:	00008015 	.word	0x00008015
    3b48:	00007ab5 	.word	0x00007ab5
    3b4c:	0001f9d4 	.word	0x0001f9d4
    3b50:	00019ef5 	.word	0x00019ef5

00003b54 <Parser_SystemGetHwEui>:
{
    3b54:	b530      	push	{r4, r5, lr}
    3b56:	b083      	sub	sp, #12
    3b58:	0005      	movs	r5, r0
    System_GetExternalEui(aDevEui);
    3b5a:	4668      	mov	r0, sp
    3b5c:	4b05      	ldr	r3, [pc, #20]	; (3b74 <Parser_SystemGetHwEui+0x20>)
    3b5e:	4798      	blx	r3
    Parser_IntArrayToHexAscii(8, aDevEui, aParserData);
    3b60:	4c05      	ldr	r4, [pc, #20]	; (3b78 <Parser_SystemGetHwEui+0x24>)
    3b62:	0022      	movs	r2, r4
    3b64:	4669      	mov	r1, sp
    3b66:	2008      	movs	r0, #8
    3b68:	4b04      	ldr	r3, [pc, #16]	; (3b7c <Parser_SystemGetHwEui+0x28>)
    3b6a:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3b6c:	616c      	str	r4, [r5, #20]
}
    3b6e:	b003      	add	sp, #12
    3b70:	bd30      	pop	{r4, r5, pc}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	00008311 	.word	0x00008311
    3b78:	2000116c 	.word	0x2000116c
    3b7c:	00004175 	.word	0x00004175

00003b80 <Parser_SystemGetVer>:
{
    3b80:	b570      	push	{r4, r5, r6, lr}
    3b82:	0005      	movs	r5, r0
	Parser_GetSwVersion(aParserData);
    3b84:	4c02      	ldr	r4, [pc, #8]	; (3b90 <Parser_SystemGetVer+0x10>)
    3b86:	0020      	movs	r0, r4
    3b88:	4b02      	ldr	r3, [pc, #8]	; (3b94 <Parser_SystemGetVer+0x14>)
    3b8a:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3b8c:	616c      	str	r4, [r5, #20]
}
    3b8e:	bd70      	pop	{r4, r5, r6, pc}
    3b90:	2000116c 	.word	0x2000116c
    3b94:	00001e85 	.word	0x00001e85

00003b98 <Parser_SystemGetCustomParam>:
{
    3b98:	b570      	push	{r4, r5, r6, lr}
    3b9a:	0005      	movs	r5, r0
	PDS_RESTORE(PDS_APP_CUSTOMPARAMETER) ;
    3b9c:	2100      	movs	r1, #0
    3b9e:	200c      	movs	r0, #12
    3ba0:	4b05      	ldr	r3, [pc, #20]	; (3bb8 <Parser_SystemGetCustomParam+0x20>)
    3ba2:	4798      	blx	r3
	utoa(pdsAppCustomParameter, aParserData,  10U);
    3ba4:	4c05      	ldr	r4, [pc, #20]	; (3bbc <Parser_SystemGetCustomParam+0x24>)
    3ba6:	4b06      	ldr	r3, [pc, #24]	; (3bc0 <Parser_SystemGetCustomParam+0x28>)
    3ba8:	6818      	ldr	r0, [r3, #0]
    3baa:	220a      	movs	r2, #10
    3bac:	0021      	movs	r1, r4
    3bae:	4b05      	ldr	r3, [pc, #20]	; (3bc4 <Parser_SystemGetCustomParam+0x2c>)
    3bb0:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3bb2:	616c      	str	r4, [r5, #20]
}
    3bb4:	bd70      	pop	{r4, r5, r6, pc}
    3bb6:	46c0      	nop			; (mov r8, r8)
    3bb8:	0000e0d5 	.word	0x0000e0d5
    3bbc:	2000116c 	.word	0x2000116c
    3bc0:	20001380 	.word	0x20001380
    3bc4:	0001a639 	.word	0x0001a639

00003bc8 <Parser_SystemSetCustomParam>:
{
    3bc8:	b510      	push	{r4, lr}
    3bca:	0004      	movs	r4, r0
	pdsAppCustomParameter = (uint32_t)strtoul(pParserCmdInfo->pParam1, NULL, 10);
    3bcc:	220a      	movs	r2, #10
    3bce:	2100      	movs	r1, #0
    3bd0:	6800      	ldr	r0, [r0, #0]
    3bd2:	4b0e      	ldr	r3, [pc, #56]	; (3c0c <Parser_SystemSetCustomParam+0x44>)
    3bd4:	4798      	blx	r3
    3bd6:	4b0e      	ldr	r3, [pc, #56]	; (3c10 <Parser_SystemSetCustomParam+0x48>)
    3bd8:	6018      	str	r0, [r3, #0]
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    3bda:	2201      	movs	r2, #1
    3bdc:	4252      	negs	r2, r2
    3bde:	210a      	movs	r1, #10
    3be0:	6820      	ldr	r0, [r4, #0]
    3be2:	4b0c      	ldr	r3, [pc, #48]	; (3c14 <Parser_SystemSetCustomParam+0x4c>)
    3be4:	4798      	blx	r3
	StackRetStatus_t status = INVALID_PARAM_IDX ;
    3be6:	2301      	movs	r3, #1
	if (Validate_UintDecAsciiValue(pParserCmdInfo->pParam1, 10, UINT32_MAX))
    3be8:	2800      	cmp	r0, #0
    3bea:	d104      	bne.n	3bf6 <Parser_SystemSetCustomParam+0x2e>
	pParserCmdInfo->pReplyCmd = (char*)gapParserSysStatus[status] ;
    3bec:	009b      	lsls	r3, r3, #2
    3bee:	4a0a      	ldr	r2, [pc, #40]	; (3c18 <Parser_SystemSetCustomParam+0x50>)
    3bf0:	589b      	ldr	r3, [r3, r2]
    3bf2:	6163      	str	r3, [r4, #20]
}
    3bf4:	bd10      	pop	{r4, pc}
		printf("\r\n%ld\r\n", pdsAppCustomParameter) ;
    3bf6:	4b06      	ldr	r3, [pc, #24]	; (3c10 <Parser_SystemSetCustomParam+0x48>)
    3bf8:	6819      	ldr	r1, [r3, #0]
    3bfa:	4808      	ldr	r0, [pc, #32]	; (3c1c <Parser_SystemSetCustomParam+0x54>)
    3bfc:	4b08      	ldr	r3, [pc, #32]	; (3c20 <Parser_SystemSetCustomParam+0x58>)
    3bfe:	4798      	blx	r3
		PDS_STORE(PDS_APP_CUSTOMPARAMETER) ;
    3c00:	2100      	movs	r1, #0
    3c02:	200c      	movs	r0, #12
    3c04:	4b07      	ldr	r3, [pc, #28]	; (3c24 <Parser_SystemSetCustomParam+0x5c>)
    3c06:	4798      	blx	r3
		status = OK_STATUS_IDX ;
    3c08:	2300      	movs	r3, #0
    3c0a:	e7ef      	b.n	3bec <Parser_SystemSetCustomParam+0x24>
    3c0c:	0001a581 	.word	0x0001a581
    3c10:	20001380 	.word	0x20001380
    3c14:	000042a9 	.word	0x000042a9
    3c18:	0001f9e8 	.word	0x0001f9e8
    3c1c:	0001f9b8 	.word	0x0001f9b8
    3c20:	00019ef5 	.word	0x00019ef5
    3c24:	0000e071 	.word	0x0000e071

00003c28 <Parser_SystemGetCryptoSn>:
{
    3c28:	b530      	push	{r4, r5, lr}
    3c2a:	b085      	sub	sp, #20
    3c2c:	0005      	movs	r5, r0
    uint8_t aCryptoSn[9] = {0} ;
    3c2e:	2209      	movs	r2, #9
    3c30:	2100      	movs	r1, #0
    3c32:	a801      	add	r0, sp, #4
    3c34:	4b09      	ldr	r3, [pc, #36]	; (3c5c <Parser_SystemGetCryptoSn+0x34>)
    3c36:	4798      	blx	r3
	if (useCryptoDev)
    3c38:	4b09      	ldr	r3, [pc, #36]	; (3c60 <Parser_SystemGetCryptoSn+0x38>)
    3c3a:	781b      	ldrb	r3, [r3, #0]
    3c3c:	2b00      	cmp	r3, #0
    3c3e:	d108      	bne.n	3c52 <Parser_SystemGetCryptoSn+0x2a>
    Parser_IntArrayToHexAscii(9, aCryptoSn, aParserData);
    3c40:	4c08      	ldr	r4, [pc, #32]	; (3c64 <Parser_SystemGetCryptoSn+0x3c>)
    3c42:	0022      	movs	r2, r4
    3c44:	a901      	add	r1, sp, #4
    3c46:	2009      	movs	r0, #9
    3c48:	4b07      	ldr	r3, [pc, #28]	; (3c68 <Parser_SystemGetCryptoSn+0x40>)
    3c4a:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData;
    3c4c:	616c      	str	r4, [r5, #20]
}
    3c4e:	b005      	add	sp, #20
    3c50:	bd30      	pop	{r4, r5, pc}
		atcab_read_serial_number(aCryptoSn) ;
    3c52:	a801      	add	r0, sp, #4
    3c54:	4b05      	ldr	r3, [pc, #20]	; (3c6c <Parser_SystemGetCryptoSn+0x44>)
    3c56:	4798      	blx	r3
    3c58:	e7f2      	b.n	3c40 <Parser_SystemGetCryptoSn+0x18>
    3c5a:	46c0      	nop			; (mov r8, r8)
    3c5c:	00019e41 	.word	0x00019e41
    3c60:	20000fa8 	.word	0x20000fa8
    3c64:	2000116c 	.word	0x2000116c
    3c68:	00004175 	.word	0x00004175
    3c6c:	00000611 	.word	0x00000611

00003c70 <Parser_SystemGetCryptoDevEui>:
{
    3c70:	b570      	push	{r4, r5, r6, lr}
    3c72:	b088      	sub	sp, #32
    3c74:	0005      	movs	r5, r0
	char aCryptoDevEui[17] = {'0'} ;
    3c76:	ac03      	add	r4, sp, #12
    3c78:	2211      	movs	r2, #17
    3c7a:	2100      	movs	r1, #0
    3c7c:	0020      	movs	r0, r4
    3c7e:	4b0e      	ldr	r3, [pc, #56]	; (3cb8 <Parser_SystemGetCryptoDevEui+0x48>)
    3c80:	4798      	blx	r3
    3c82:	2330      	movs	r3, #48	; 0x30
    3c84:	7023      	strb	r3, [r4, #0]
	if (useCryptoDev)
    3c86:	4b0d      	ldr	r3, [pc, #52]	; (3cbc <Parser_SystemGetCryptoDevEui+0x4c>)
    3c88:	781b      	ldrb	r3, [r3, #0]
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	d108      	bne.n	3ca0 <Parser_SystemGetCryptoDevEui+0x30>
	memcpy(aParserData, aCryptoDevEui, sizeof(aCryptoDevEui)) ;
    3c8e:	4c0c      	ldr	r4, [pc, #48]	; (3cc0 <Parser_SystemGetCryptoDevEui+0x50>)
    3c90:	2211      	movs	r2, #17
    3c92:	a903      	add	r1, sp, #12
    3c94:	0020      	movs	r0, r4
    3c96:	4b0b      	ldr	r3, [pc, #44]	; (3cc4 <Parser_SystemGetCryptoDevEui+0x54>)
    3c98:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData ;
    3c9a:	616c      	str	r4, [r5, #20]
}
    3c9c:	b008      	add	sp, #32
    3c9e:	bd70      	pop	{r4, r5, r6, pc}
		atcab_read_bytes_zone(ATCA_ZONE_DATA, DEV_EUI_SLOT, 0, (uint8_t*)aCryptoDevEui, 16) ;
    3ca0:	ac03      	add	r4, sp, #12
    3ca2:	2310      	movs	r3, #16
    3ca4:	9300      	str	r3, [sp, #0]
    3ca6:	0023      	movs	r3, r4
    3ca8:	2200      	movs	r2, #0
    3caa:	210a      	movs	r1, #10
    3cac:	2002      	movs	r0, #2
    3cae:	4e06      	ldr	r6, [pc, #24]	; (3cc8 <Parser_SystemGetCryptoDevEui+0x58>)
    3cb0:	47b0      	blx	r6
		aCryptoDevEui[16] = '\0' ;
    3cb2:	2300      	movs	r3, #0
    3cb4:	7423      	strb	r3, [r4, #16]
    3cb6:	e7ea      	b.n	3c8e <Parser_SystemGetCryptoDevEui+0x1e>
    3cb8:	00019e41 	.word	0x00019e41
    3cbc:	20000fa8 	.word	0x20000fa8
    3cc0:	2000116c 	.word	0x2000116c
    3cc4:	00019d1d 	.word	0x00019d1d
    3cc8:	0000077d 	.word	0x0000077d

00003ccc <Parser_SystemGetCryptoJoinEui>:
{
    3ccc:	b530      	push	{r4, r5, lr}
    3cce:	b085      	sub	sp, #20
    3cd0:	0005      	movs	r5, r0
	uint8_t aCryptoJoinEui[8] = {0} ;
    3cd2:	2208      	movs	r2, #8
    3cd4:	2100      	movs	r1, #0
    3cd6:	a802      	add	r0, sp, #8
    3cd8:	4b0b      	ldr	r3, [pc, #44]	; (3d08 <Parser_SystemGetCryptoJoinEui+0x3c>)
    3cda:	4798      	blx	r3
	if (useCryptoDev)
    3cdc:	4b0b      	ldr	r3, [pc, #44]	; (3d0c <Parser_SystemGetCryptoJoinEui+0x40>)
    3cde:	781b      	ldrb	r3, [r3, #0]
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	d108      	bne.n	3cf6 <Parser_SystemGetCryptoJoinEui+0x2a>
    Parser_IntArrayToHexAscii(8, aCryptoJoinEui, aParserData) ;
    3ce4:	4c0a      	ldr	r4, [pc, #40]	; (3d10 <Parser_SystemGetCryptoJoinEui+0x44>)
    3ce6:	0022      	movs	r2, r4
    3ce8:	a902      	add	r1, sp, #8
    3cea:	2008      	movs	r0, #8
    3cec:	4b09      	ldr	r3, [pc, #36]	; (3d14 <Parser_SystemGetCryptoJoinEui+0x48>)
    3cee:	4798      	blx	r3
    pParserCmdInfo->pReplyCmd = aParserData ;
    3cf0:	616c      	str	r4, [r5, #20]
}
    3cf2:	b005      	add	sp, #20
    3cf4:	bd30      	pop	{r4, r5, pc}
		atcab_read_bytes_zone(ATCA_ZONE_DATA, APP_EUI_SLOT, 0, (uint8_t*)aCryptoJoinEui, 8) ;
    3cf6:	2308      	movs	r3, #8
    3cf8:	9300      	str	r3, [sp, #0]
    3cfa:	ab02      	add	r3, sp, #8
    3cfc:	2200      	movs	r2, #0
    3cfe:	2109      	movs	r1, #9
    3d00:	2002      	movs	r0, #2
    3d02:	4c05      	ldr	r4, [pc, #20]	; (3d18 <Parser_SystemGetCryptoJoinEui+0x4c>)
    3d04:	47a0      	blx	r4
    3d06:	e7ed      	b.n	3ce4 <Parser_SystemGetCryptoJoinEui+0x18>
    3d08:	00019e41 	.word	0x00019e41
    3d0c:	20000fa8 	.word	0x20000fa8
    3d10:	2000116c 	.word	0x2000116c
    3d14:	00004175 	.word	0x00004175
    3d18:	0000077d 	.word	0x0000077d

00003d1c <Parser_SystemGetCryptoTkmInfo>:
{
    3d1c:	b570      	push	{r4, r5, r6, lr}
    3d1e:	b08a      	sub	sp, #40	; 0x28
    3d20:	0005      	movs	r5, r0
	uint8_t aCryptoTkmInfo[10] = {0} ;
    3d22:	220a      	movs	r2, #10
    3d24:	2100      	movs	r1, #0
    3d26:	a803      	add	r0, sp, #12
    3d28:	4b12      	ldr	r3, [pc, #72]	; (3d74 <Parser_SystemGetCryptoTkmInfo+0x58>)
    3d2a:	4798      	blx	r3
	if (useCryptoDev)
    3d2c:	4b12      	ldr	r3, [pc, #72]	; (3d78 <Parser_SystemGetCryptoTkmInfo+0x5c>)
    3d2e:	781b      	ldrb	r3, [r3, #0]
    3d30:	2b00      	cmp	r3, #0
    3d32:	d108      	bne.n	3d46 <Parser_SystemGetCryptoTkmInfo+0x2a>
	Parser_IntArrayToHexAscii(10, aCryptoTkmInfo, aParserData) ;
    3d34:	4c11      	ldr	r4, [pc, #68]	; (3d7c <Parser_SystemGetCryptoTkmInfo+0x60>)
    3d36:	0022      	movs	r2, r4
    3d38:	a903      	add	r1, sp, #12
    3d3a:	200a      	movs	r0, #10
    3d3c:	4b10      	ldr	r3, [pc, #64]	; (3d80 <Parser_SystemGetCryptoTkmInfo+0x64>)
    3d3e:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData ;
    3d40:	616c      	str	r4, [r5, #20]
}
    3d42:	b00a      	add	sp, #40	; 0x28
    3d44:	bd70      	pop	{r4, r5, r6, pc}
		atcab_read_serial_number(aCryptoSn) ;
    3d46:	a807      	add	r0, sp, #28
    3d48:	4b0e      	ldr	r3, [pc, #56]	; (3d84 <Parser_SystemGetCryptoTkmInfo+0x68>)
    3d4a:	4798      	blx	r3
		atcab_read_bytes_zone(ATCA_ZONE_DATA, 10, 70, aInfo, sizeof(aInfo)) ;
    3d4c:	ac06      	add	r4, sp, #24
    3d4e:	2302      	movs	r3, #2
    3d50:	9300      	str	r3, [sp, #0]
    3d52:	0023      	movs	r3, r4
    3d54:	2246      	movs	r2, #70	; 0x46
    3d56:	210a      	movs	r1, #10
    3d58:	2002      	movs	r0, #2
    3d5a:	4e0b      	ldr	r6, [pc, #44]	; (3d88 <Parser_SystemGetCryptoTkmInfo+0x6c>)
    3d5c:	47b0      	blx	r6
		memcpy(aCryptoTkmInfo, aInfo, 2) ;
    3d5e:	8822      	ldrh	r2, [r4, #0]
    3d60:	ab03      	add	r3, sp, #12
    3d62:	801a      	strh	r2, [r3, #0]
		memcpy(&aCryptoTkmInfo[2], aCryptoSn, 8) ;
    3d64:	2208      	movs	r2, #8
    3d66:	a907      	add	r1, sp, #28
    3d68:	200e      	movs	r0, #14
    3d6a:	4468      	add	r0, sp
    3d6c:	4b07      	ldr	r3, [pc, #28]	; (3d8c <Parser_SystemGetCryptoTkmInfo+0x70>)
    3d6e:	4798      	blx	r3
    3d70:	e7e0      	b.n	3d34 <Parser_SystemGetCryptoTkmInfo+0x18>
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	00019e41 	.word	0x00019e41
    3d78:	20000fa8 	.word	0x20000fa8
    3d7c:	2000116c 	.word	0x2000116c
    3d80:	00004175 	.word	0x00004175
    3d84:	00000611 	.word	0x00000611
    3d88:	0000077d 	.word	0x0000077d
    3d8c:	00019d1d 	.word	0x00019d1d

00003d90 <Parser_SystemGetCustomID>:
{
    3d90:	b570      	push	{r4, r5, r6, lr}
    3d92:	0005      	movs	r5, r0
	Parser_GetCustomID(aParserData);
    3d94:	4c02      	ldr	r4, [pc, #8]	; (3da0 <Parser_SystemGetCustomID+0x10>)
    3d96:	0020      	movs	r0, r4
    3d98:	4b02      	ldr	r3, [pc, #8]	; (3da4 <Parser_SystemGetCustomID+0x14>)
    3d9a:	4798      	blx	r3
	pParserCmdInfo->pReplyCmd = aParserData;
    3d9c:	616c      	str	r4, [r5, #20]
}
    3d9e:	bd70      	pop	{r4, r5, r6, pc}
    3da0:	2000116c 	.word	0x2000116c
    3da4:	00001e51 	.word	0x00001e51

00003da8 <Parser_SystemReboot>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3da8:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3dac:	4a03      	ldr	r2, [pc, #12]	; (3dbc <Parser_SystemReboot+0x14>)
    3dae:	4b04      	ldr	r3, [pc, #16]	; (3dc0 <Parser_SystemReboot+0x18>)
    3db0:	60da      	str	r2, [r3, #12]
    3db2:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3db6:	46c0      	nop			; (mov r8, r8)
    3db8:	e7fd      	b.n	3db6 <Parser_SystemReboot+0xe>
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	05fa0004 	.word	0x05fa0004
    3dc0:	e000ed00 	.word	0xe000ed00

00003dc4 <Parser_SystemFactReset>:
{
    3dc4:	b510      	push	{r4, lr}
	PDS_DeleteAll();
    3dc6:	4b05      	ldr	r3, [pc, #20]	; (3ddc <Parser_SystemFactReset+0x18>)
    3dc8:	4798      	blx	r3
    3dca:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    3dce:	4a04      	ldr	r2, [pc, #16]	; (3de0 <Parser_SystemFactReset+0x1c>)
    3dd0:	4b04      	ldr	r3, [pc, #16]	; (3de4 <Parser_SystemFactReset+0x20>)
    3dd2:	60da      	str	r2, [r3, #12]
    3dd4:	f3bf 8f4f 	dsb	sy
    __NOP();
    3dd8:	46c0      	nop			; (mov r8, r8)
    3dda:	e7fd      	b.n	3dd8 <Parser_SystemFactReset+0x14>
    3ddc:	0000e1e9 	.word	0x0000e1e9
    3de0:	05fa0004 	.word	0x05fa0004
    3de4:	e000ed00 	.word	0xe000ed00

00003de8 <Parser_SystemSleep>:
{
    3de8:	b530      	push	{r4, r5, lr}
    3dea:	b085      	sub	sp, #20
    3dec:	0004      	movs	r4, r0
    PMM_SleepReq_t sleepRequest = {
    3dee:	ab01      	add	r3, sp, #4
    3df0:	2200      	movs	r2, #0
    3df2:	9201      	str	r2, [sp, #4]
    3df4:	21ff      	movs	r1, #255	; 0xff
    3df6:	7119      	strb	r1, [r3, #4]
    3df8:	9203      	str	r2, [sp, #12]
    uint32_t sleepDuration = strtoul(pParserCmdInfo->pParam2, NULL, 10);
    3dfa:	320a      	adds	r2, #10
    3dfc:	2100      	movs	r1, #0
    3dfe:	6840      	ldr	r0, [r0, #4]
    3e00:	4b24      	ldr	r3, [pc, #144]	; (3e94 <Parser_SystemSleep+0xac>)
    3e02:	4798      	blx	r3
    3e04:	0005      	movs	r5, r0
		if(0 == stricmp(pParserCmdInfo->pParam1, gapParseSleepMode[iCount]))
    3e06:	4924      	ldr	r1, [pc, #144]	; (3e98 <Parser_SystemSleep+0xb0>)
    3e08:	6820      	ldr	r0, [r4, #0]
    3e0a:	4b24      	ldr	r3, [pc, #144]	; (3e9c <Parser_SystemSleep+0xb4>)
    3e0c:	4798      	blx	r3
    3e0e:	2800      	cmp	r0, #0
    3e10:	d009      	beq.n	3e26 <Parser_SystemSleep+0x3e>
    3e12:	4923      	ldr	r1, [pc, #140]	; (3ea0 <Parser_SystemSleep+0xb8>)
    3e14:	6820      	ldr	r0, [r4, #0]
    3e16:	4b21      	ldr	r3, [pc, #132]	; (3e9c <Parser_SystemSleep+0xb4>)
    3e18:	4798      	blx	r3
    3e1a:	2800      	cmp	r0, #0
    3e1c:	d038      	beq.n	3e90 <Parser_SystemSleep+0xa8>
        pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[INVALID_PARAM_IDX];
    3e1e:	4b21      	ldr	r3, [pc, #132]	; (3ea4 <Parser_SystemSleep+0xbc>)
    3e20:	6163      	str	r3, [r4, #20]
}
    3e22:	b005      	add	sp, #20
    3e24:	bd30      	pop	{r4, r5, pc}
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    3e26:	2200      	movs	r2, #0
    if ( (1 /* invalid range */ < sleepModeValue) || \
    3e28:	491f      	ldr	r1, [pc, #124]	; (3ea8 <Parser_SystemSleep+0xc0>)
    3e2a:	4b20      	ldr	r3, [pc, #128]	; (3eac <Parser_SystemSleep+0xc4>)
    3e2c:	18eb      	adds	r3, r5, r3
    3e2e:	428b      	cmp	r3, r1
    3e30:	d8f5      	bhi.n	3e1e <Parser_SystemSleep+0x36>
        sleepRequest.sleepTimeMs = sleepDuration;
    3e32:	9501      	str	r5, [sp, #4]
        sleepRequest.pmmWakeupCallback = parserSleepCallback;
    3e34:	4b1e      	ldr	r3, [pc, #120]	; (3eb0 <Parser_SystemSleep+0xc8>)
    3e36:	9303      	str	r3, [sp, #12]
        sleepRequest.sleep_mode = ( 0 /* standby */ == sleepModeValue ) ? SLEEP_MODE_STANDBY : SLEEP_MODE_BACKUP;
    3e38:	0013      	movs	r3, r2
    3e3a:	1e5a      	subs	r2, r3, #1
    3e3c:	4193      	sbcs	r3, r2
    3e3e:	3301      	adds	r3, #1
    3e40:	aa01      	add	r2, sp, #4
    3e42:	7113      	strb	r3, [r2, #4]
    SleepEnabled = true;
    3e44:	2201      	movs	r2, #1
    3e46:	4b1b      	ldr	r3, [pc, #108]	; (3eb4 <Parser_SystemSleep+0xcc>)
    3e48:	701a      	strb	r2, [r3, #0]
    if ( LORAWAN_ReadyToSleep( deviceResetsForWakeup ) )
    3e4a:	4b1b      	ldr	r3, [pc, #108]	; (3eb8 <Parser_SystemSleep+0xd0>)
    3e4c:	7818      	ldrb	r0, [r3, #0]
    3e4e:	4b1b      	ldr	r3, [pc, #108]	; (3ebc <Parser_SystemSleep+0xd4>)
    3e50:	4798      	blx	r3
    3e52:	2800      	cmp	r0, #0
    3e54:	d0e5      	beq.n	3e22 <Parser_SystemSleep+0x3a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3e56:	2300      	movs	r3, #0
    3e58:	466a      	mov	r2, sp
    3e5a:	7013      	strb	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3e5c:	3301      	adds	r3, #1
    3e5e:	7053      	strb	r3, [r2, #1]
static void app_resources_uninit(void)
{
	/* Disable USART TX and RX Pins */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
	pin_conf.powersave  = true;
    3e60:	7093      	strb	r3, [r2, #2]
#ifdef HOST_SERCOM_PAD0_PIN
	port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    3e62:	4669      	mov	r1, sp
    3e64:	2004      	movs	r0, #4
    3e66:	4d16      	ldr	r5, [pc, #88]	; (3ec0 <Parser_SystemSleep+0xd8>)
    3e68:	47a8      	blx	r5
#endif
#ifdef HOST_SERCOM_PAD1_PIN
	port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    3e6a:	4669      	mov	r1, sp
    3e6c:	2005      	movs	r0, #5
    3e6e:	47a8      	blx	r5
#endif
	/* Disable UART module */
	sio2host_deinit();
    3e70:	4b14      	ldr	r3, [pc, #80]	; (3ec4 <Parser_SystemSleep+0xdc>)
    3e72:	4798      	blx	r3
	/* Disable Transceiver SPI Module */
	HAL_RadioDeInit();
    3e74:	4b14      	ldr	r3, [pc, #80]	; (3ec8 <Parser_SystemSleep+0xe0>)
    3e76:	4798      	blx	r3
        if ( PMM_SLEEP_REQ_DENIED == PMM_Sleep( &sleepRequest ) )
    3e78:	a801      	add	r0, sp, #4
    3e7a:	4b14      	ldr	r3, [pc, #80]	; (3ecc <Parser_SystemSleep+0xe4>)
    3e7c:	4798      	blx	r3
    3e7e:	2800      	cmp	r0, #0
    3e80:	d1cf      	bne.n	3e22 <Parser_SystemSleep+0x3a>
            HAL_Radio_resources_init();
    3e82:	4b13      	ldr	r3, [pc, #76]	; (3ed0 <Parser_SystemSleep+0xe8>)
    3e84:	4798      	blx	r3
            sio2host_init();
    3e86:	4b13      	ldr	r3, [pc, #76]	; (3ed4 <Parser_SystemSleep+0xec>)
    3e88:	4798      	blx	r3
            pParserCmdInfo->pReplyCmd = (char *) gapParserSysStatus[ERR_STATUS_IDX];
    3e8a:	4b13      	ldr	r3, [pc, #76]	; (3ed8 <Parser_SystemSleep+0xf0>)
    3e8c:	6163      	str	r3, [r4, #20]
    3e8e:	e7c8      	b.n	3e22 <Parser_SystemSleep+0x3a>
	for(uint8_t iCount = 0; iCount < sizeof(gapParseSleepMode)/sizeof(gapParseSleepMode[0]); iCount++)
    3e90:	2201      	movs	r2, #1
    3e92:	e7c9      	b.n	3e28 <Parser_SystemSleep+0x40>
    3e94:	0001a581 	.word	0x0001a581
    3e98:	0001f9c0 	.word	0x0001f9c0
    3e9c:	000042ed 	.word	0x000042ed
    3ea0:	0001f9c8 	.word	0x0001f9c8
    3ea4:	0001f5d8 	.word	0x0001f5d8
    3ea8:	07cebbc8 	.word	0x07cebbc8
    3eac:	fffffc18 	.word	0xfffffc18
    3eb0:	00003aed 	.word	0x00003aed
    3eb4:	20000b54 	.word	0x20000b54
    3eb8:	20000b55 	.word	0x20000b55
    3ebc:	00014135 	.word	0x00014135
    3ec0:	00004ead 	.word	0x00004ead
    3ec4:	00007c01 	.word	0x00007c01
    3ec8:	00008039 	.word	0x00008039
    3ecc:	000083e5 	.word	0x000083e5
    3ed0:	00008015 	.word	0x00008015
    3ed4:	00007ab5 	.word	0x00007ab5
    3ed8:	0001f9d0 	.word	0x0001f9d0

00003edc <configure_extint>:
{
    3edc:	b510      	push	{r4, lr}
    3ede:	b084      	sub	sp, #16
	extint_chan_get_config_defaults(&eint_chan_conf);
    3ee0:	ac01      	add	r4, sp, #4
    3ee2:	0020      	movs	r0, r4
    3ee4:	4b07      	ldr	r3, [pc, #28]	; (3f04 <configure_extint+0x28>)
    3ee6:	4798      	blx	r3
	eint_chan_conf.gpio_pin           = BUTTON_0_EIC_PIN;
    3ee8:	231c      	movs	r3, #28
    3eea:	9301      	str	r3, [sp, #4]
	eint_chan_conf.gpio_pin_mux       = BUTTON_0_EIC_MUX;
    3eec:	2300      	movs	r3, #0
    3eee:	6063      	str	r3, [r4, #4]
	eint_chan_conf.detection_criteria = EXTINT_DETECT_FALLING;
    3ef0:	3302      	adds	r3, #2
    3ef2:	72e3      	strb	r3, [r4, #11]
	eint_chan_conf.filter_input_signal = true;
    3ef4:	3b01      	subs	r3, #1
    3ef6:	72a3      	strb	r3, [r4, #10]
	extint_chan_set_config(BUTTON_0_EIC_LINE, &eint_chan_conf);
    3ef8:	0021      	movs	r1, r4
    3efa:	2008      	movs	r0, #8
    3efc:	4b02      	ldr	r3, [pc, #8]	; (3f08 <configure_extint+0x2c>)
    3efe:	4798      	blx	r3
}
    3f00:	b004      	add	sp, #16
    3f02:	bd10      	pop	{r4, pc}
    3f04:	00004a45 	.word	0x00004a45
    3f08:	00004a59 	.word	0x00004a59

00003f0c <configure_eic_callback>:
{
    3f0c:	b510      	push	{r4, lr}
	extint_register_callback(
    3f0e:	2200      	movs	r2, #0
    3f10:	2108      	movs	r1, #8
    3f12:	4804      	ldr	r0, [pc, #16]	; (3f24 <configure_eic_callback+0x18>)
    3f14:	4b04      	ldr	r3, [pc, #16]	; (3f28 <configure_eic_callback+0x1c>)
    3f16:	4798      	blx	r3
	extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
    3f18:	2100      	movs	r1, #0
    3f1a:	2008      	movs	r0, #8
    3f1c:	4b03      	ldr	r3, [pc, #12]	; (3f2c <configure_eic_callback+0x20>)
    3f1e:	4798      	blx	r3
}
    3f20:	bd10      	pop	{r4, pc}
    3f22:	46c0      	nop			; (mov r8, r8)
    3f24:	00003b15 	.word	0x00003b15
    3f28:	00004905 	.word	0x00004905
    3f2c:	00004931 	.word	0x00004931

00003f30 <Parser_RxClearBuffer>:
    "invalid_param",
    "err"
};

void Parser_RxClearBuffer(void)
{
    3f30:	b570      	push	{r4, r5, r6, lr}
    mRxParserCmd.bCmdStatus = 0;
    3f32:	4c0b      	ldr	r4, [pc, #44]	; (3f60 <Parser_RxClearBuffer+0x30>)
    3f34:	2300      	movs	r3, #0
    3f36:	4a0b      	ldr	r2, [pc, #44]	; (3f64 <Parser_RxClearBuffer+0x34>)
    3f38:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtWordIdx = 0;
    3f3a:	4a0b      	ldr	r2, [pc, #44]	; (3f68 <Parser_RxClearBuffer+0x38>)
    3f3c:	54a3      	strb	r3, [r4, r2]
    mRxParserCmd.crtCmdPos = 0;
    3f3e:	3201      	adds	r2, #1
    3f40:	52a3      	strh	r3, [r4, r2]
    mRxParserCmd.crtWordPos = 0;
    3f42:	4a0a      	ldr	r2, [pc, #40]	; (3f6c <Parser_RxClearBuffer+0x3c>)
    3f44:	52a3      	strh	r3, [r4, r2]
    
    memset((_PTR)mRxParserCmd.wordLen, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    3f46:	4b0a      	ldr	r3, [pc, #40]	; (3f70 <Parser_RxClearBuffer+0x40>)
    3f48:	18e0      	adds	r0, r4, r3
    3f4a:	2214      	movs	r2, #20
    3f4c:	2100      	movs	r1, #0
    3f4e:	4d09      	ldr	r5, [pc, #36]	; (3f74 <Parser_RxClearBuffer+0x44>)
    3f50:	47a8      	blx	r5
    memset((_PTR)mRxParserCmd.wordStartPos, 0, PARSER_DEF_CMD_MAX_IDX << 1);
    3f52:	4b09      	ldr	r3, [pc, #36]	; (3f78 <Parser_RxClearBuffer+0x48>)
    3f54:	18e0      	adds	r0, r4, r3
    3f56:	2214      	movs	r2, #20
    3f58:	2100      	movs	r1, #0
    3f5a:	47a8      	blx	r5
}
    3f5c:	bd70      	pop	{r4, r5, r6, pc}
    3f5e:	46c0      	nop			; (mov r8, r8)
    3f60:	20001f98 	.word	0x20001f98
    3f64:	0000024e 	.word	0x0000024e
    3f68:	0000024f 	.word	0x0000024f
    3f6c:	00000252 	.word	0x00000252
    3f70:	00000226 	.word	0x00000226
    3f74:	00019e41 	.word	0x00019e41
    3f78:	0000023a 	.word	0x0000023a

00003f7c <Parser_TxAddReply>:
    }

}

void Parser_TxAddReply(char* pReplyStr, uint16_t replyStrLen)
{
    3f7c:	b570      	push	{r4, r5, r6, lr}
    3f7e:	0005      	movs	r5, r0
    3f80:	1e0c      	subs	r4, r1, #0
    uint16_t iCtr = replyStrLen;
	
	/* Check if the length of UART String is can be fit in SIO2HOST TX Buffer */
	while(0 != iCtr)
    3f82:	d00f      	beq.n	3fa4 <Parser_TxAddReply+0x28>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
			iCtr = 0;
		}
		else
		{
			sio2host_tx((uint8_t *)pReplyStr, BYTE_VALUE_LEN);
    3f84:	4e0a      	ldr	r6, [pc, #40]	; (3fb0 <Parser_TxAddReply+0x34>)
    3f86:	e007      	b.n	3f98 <Parser_TxAddReply+0x1c>
    3f88:	21ff      	movs	r1, #255	; 0xff
    3f8a:	0028      	movs	r0, r5
    3f8c:	47b0      	blx	r6
			iCtr -= BYTE_VALUE_LEN;
    3f8e:	3cff      	subs	r4, #255	; 0xff
    3f90:	b2a4      	uxth	r4, r4
			pReplyStr = pReplyStr + BYTE_VALUE_LEN;
    3f92:	35ff      	adds	r5, #255	; 0xff
	while(0 != iCtr)
    3f94:	2c00      	cmp	r4, #0
    3f96:	d005      	beq.n	3fa4 <Parser_TxAddReply+0x28>
		if(BYTE_VALUE_LEN >= iCtr)
    3f98:	2cff      	cmp	r4, #255	; 0xff
    3f9a:	d8f5      	bhi.n	3f88 <Parser_TxAddReply+0xc>
			sio2host_tx((uint8_t *)pReplyStr,(uint8_t)iCtr);
    3f9c:	b2e1      	uxtb	r1, r4
    3f9e:	0028      	movs	r0, r5
    3fa0:	4b03      	ldr	r3, [pc, #12]	; (3fb0 <Parser_TxAddReply+0x34>)
    3fa2:	4798      	blx	r3
		}
	}
	
    /* Put the delimiter string in UART */
	sio2host_tx((uint8_t *)gpParserLineDelim,strlen(gpParserLineDelim));
    3fa4:	2102      	movs	r1, #2
    3fa6:	4803      	ldr	r0, [pc, #12]	; (3fb4 <Parser_TxAddReply+0x38>)
    3fa8:	4b01      	ldr	r3, [pc, #4]	; (3fb0 <Parser_TxAddReply+0x34>)
    3faa:	4798      	blx	r3
	
}
    3fac:	bd70      	pop	{r4, r5, r6, pc}
    3fae:	46c0      	nop			; (mov r8, r8)
    3fb0:	00007c6d 	.word	0x00007c6d
    3fb4:	0001fa08 	.word	0x0001fa08

00003fb8 <Parser_RxAddChar>:
{
    3fb8:	b570      	push	{r4, r5, r6, lr}
    if(rxChar == '\b')
    3fba:	2808      	cmp	r0, #8
    3fbc:	d047      	beq.n	404e <Parser_RxAddChar+0x96>
    if(mRxParserCmd.crtCmdPos < PARSER_DEF_CMD_MAX_LEN - 1)
    3fbe:	2394      	movs	r3, #148	; 0x94
    3fc0:	009b      	lsls	r3, r3, #2
    3fc2:	4a58      	ldr	r2, [pc, #352]	; (4124 <Parser_RxAddChar+0x16c>)
    3fc4:	5ad3      	ldrh	r3, [r2, r3]
    3fc6:	b29b      	uxth	r3, r3
    3fc8:	2289      	movs	r2, #137	; 0x89
    3fca:	0092      	lsls	r2, r2, #2
    3fcc:	4293      	cmp	r3, r2
    3fce:	d900      	bls.n	3fd2 <Parser_RxAddChar+0x1a>
    3fd0:	e0a1      	b.n	4116 <Parser_RxAddChar+0x15e>
        if(rxChar == ' ')
    3fd2:	2820      	cmp	r0, #32
    3fd4:	d100      	bne.n	3fd8 <Parser_RxAddChar+0x20>
    3fd6:	e073      	b.n	40c0 <Parser_RxAddChar+0x108>
            mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = rxChar;
    3fd8:	4b52      	ldr	r3, [pc, #328]	; (4124 <Parser_RxAddChar+0x16c>)
    3fda:	2194      	movs	r1, #148	; 0x94
    3fdc:	0089      	lsls	r1, r1, #2
    3fde:	5a5a      	ldrh	r2, [r3, r1]
    3fe0:	b292      	uxth	r2, r2
    3fe2:	1c54      	adds	r4, r2, #1
    3fe4:	b2a4      	uxth	r4, r4
    3fe6:	525c      	strh	r4, [r3, r1]
    3fe8:	5498      	strb	r0, [r3, r2]
            mRxParserCmd.crtWordPos ++;
    3fea:	484f      	ldr	r0, [pc, #316]	; (4128 <Parser_RxAddChar+0x170>)
    3fec:	5a1a      	ldrh	r2, [r3, r0]
    3fee:	3201      	adds	r2, #1
    3ff0:	b292      	uxth	r2, r2
    3ff2:	521a      	strh	r2, [r3, r0]
            if(mRxParserCmd.crtCmdPos >= strlen(gpParserLineDelim))
    3ff4:	5a5b      	ldrh	r3, [r3, r1]
    3ff6:	b29b      	uxth	r3, r3
    3ff8:	2b01      	cmp	r3, #1
    3ffa:	d959      	bls.n	40b0 <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    3ffc:	4a49      	ldr	r2, [pc, #292]	; (4124 <Parser_RxAddChar+0x16c>)
    3ffe:	5a53      	ldrh	r3, [r2, r1]
    4000:	3b02      	subs	r3, #2
    4002:	5cd3      	ldrb	r3, [r2, r3]
                for(iCount = strlen(gpParserLineDelim); (iCount > 0U) && bIsEndLine; iCount --)
    4004:	2b0d      	cmp	r3, #13
    4006:	d153      	bne.n	40b0 <Parser_RxAddChar+0xf8>
                    if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - iCount] != gpParserLineDelim[strlen(gpParserLineDelim) - iCount])
    4008:	5a53      	ldrh	r3, [r2, r1]
    400a:	3b01      	subs	r3, #1
    400c:	5cd3      	ldrb	r3, [r2, r3]
            if(bIsEndLine)
    400e:	2b0a      	cmp	r3, #10
    4010:	d14e      	bne.n	40b0 <Parser_RxAddChar+0xf8>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - strlen(gpParserLineDelim)] = '\0';
    4012:	0013      	movs	r3, r2
    4014:	000c      	movs	r4, r1
    4016:	5a52      	ldrh	r2, [r2, r1]
    4018:	3a02      	subs	r2, #2
    401a:	2100      	movs	r1, #0
    401c:	5499      	strb	r1, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos - strlen(gpParserLineDelim);
    401e:	4d43      	ldr	r5, [pc, #268]	; (412c <Parser_RxAddChar+0x174>)
    4020:	5d5a      	ldrb	r2, [r3, r5]
    4022:	5a19      	ldrh	r1, [r3, r0]
    4024:	3902      	subs	r1, #2
    4026:	b289      	uxth	r1, r1
    4028:	3211      	adds	r2, #17
    402a:	32ff      	adds	r2, #255	; 0xff
    402c:	0052      	lsls	r2, r2, #1
    402e:	189a      	adds	r2, r3, r2
    4030:	80d1      	strh	r1, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos;
    4032:	5d5a      	ldrb	r2, [r3, r5]
    4034:	5b19      	ldrh	r1, [r3, r4]
    4036:	5a18      	ldrh	r0, [r3, r0]
    4038:	1a09      	subs	r1, r1, r0
    403a:	b289      	uxth	r1, r1
    403c:	321d      	adds	r2, #29
    403e:	32ff      	adds	r2, #255	; 0xff
    4040:	0052      	lsls	r2, r2, #1
    4042:	189a      	adds	r2, r3, r2
    4044:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.bCmdStatus = 1;
    4046:	2101      	movs	r1, #1
    4048:	4a39      	ldr	r2, [pc, #228]	; (4130 <Parser_RxAddChar+0x178>)
    404a:	5499      	strb	r1, [r3, r2]
    404c:	e030      	b.n	40b0 <Parser_RxAddChar+0xf8>
        if(mRxParserCmd.crtCmdPos > 0U)
    404e:	2394      	movs	r3, #148	; 0x94
    4050:	009b      	lsls	r3, r3, #2
    4052:	4a34      	ldr	r2, [pc, #208]	; (4124 <Parser_RxAddChar+0x16c>)
    4054:	5ad3      	ldrh	r3, [r2, r3]
    4056:	b29b      	uxth	r3, r3
    4058:	2b00      	cmp	r3, #0
    405a:	d029      	beq.n	40b0 <Parser_RxAddChar+0xf8>
            if(mRxParserCmd.cmd[mRxParserCmd.crtCmdPos - 1] == '\0')
    405c:	2394      	movs	r3, #148	; 0x94
    405e:	009b      	lsls	r3, r3, #2
    4060:	5ad3      	ldrh	r3, [r2, r3]
    4062:	3b01      	subs	r3, #1
    4064:	5cd3      	ldrb	r3, [r2, r3]
    4066:	2b00      	cmp	r3, #0
    4068:	d123      	bne.n	40b2 <Parser_RxAddChar+0xfa>
                mRxParserCmd.crtWordIdx --;
    406a:	0013      	movs	r3, r2
    406c:	492f      	ldr	r1, [pc, #188]	; (412c <Parser_RxAddChar+0x174>)
    406e:	5c52      	ldrb	r2, [r2, r1]
    4070:	3a01      	subs	r2, #1
    4072:	b2d2      	uxtb	r2, r2
    4074:	545a      	strb	r2, [r3, r1]
                mRxParserCmd.crtWordPos = mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx];
    4076:	5c5a      	ldrb	r2, [r3, r1]
    4078:	3211      	adds	r2, #17
    407a:	32ff      	adds	r2, #255	; 0xff
    407c:	0052      	lsls	r2, r2, #1
    407e:	189a      	adds	r2, r3, r2
    4080:	88d2      	ldrh	r2, [r2, #6]
    4082:	b292      	uxth	r2, r2
    4084:	4828      	ldr	r0, [pc, #160]	; (4128 <Parser_RxAddChar+0x170>)
    4086:	521a      	strh	r2, [r3, r0]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = 0U;
    4088:	5c5a      	ldrb	r2, [r3, r1]
    408a:	3211      	adds	r2, #17
    408c:	32ff      	adds	r2, #255	; 0xff
    408e:	0052      	lsls	r2, r2, #1
    4090:	189a      	adds	r2, r3, r2
    4092:	2000      	movs	r0, #0
    4094:	80d0      	strh	r0, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = 0U;
    4096:	5c5a      	ldrb	r2, [r3, r1]
    4098:	321d      	adds	r2, #29
    409a:	32ff      	adds	r2, #255	; 0xff
    409c:	0052      	lsls	r2, r2, #1
    409e:	189b      	adds	r3, r3, r2
    40a0:	8058      	strh	r0, [r3, #2]
            mRxParserCmd.crtCmdPos --;
    40a2:	4920      	ldr	r1, [pc, #128]	; (4124 <Parser_RxAddChar+0x16c>)
    40a4:	2294      	movs	r2, #148	; 0x94
    40a6:	0092      	lsls	r2, r2, #2
    40a8:	5a8b      	ldrh	r3, [r1, r2]
    40aa:	3b01      	subs	r3, #1
    40ac:	b29b      	uxth	r3, r3
    40ae:	528b      	strh	r3, [r1, r2]
}
    40b0:	bd70      	pop	{r4, r5, r6, pc}
                mRxParserCmd.crtWordPos --;
    40b2:	491c      	ldr	r1, [pc, #112]	; (4124 <Parser_RxAddChar+0x16c>)
    40b4:	4a1c      	ldr	r2, [pc, #112]	; (4128 <Parser_RxAddChar+0x170>)
    40b6:	5a8b      	ldrh	r3, [r1, r2]
    40b8:	3b01      	subs	r3, #1
    40ba:	b29b      	uxth	r3, r3
    40bc:	528b      	strh	r3, [r1, r2]
    40be:	e7f0      	b.n	40a2 <Parser_RxAddChar+0xea>
            if(mRxParserCmd.crtWordIdx < PARSER_DEF_CMD_MAX_IDX - 1)
    40c0:	4b1a      	ldr	r3, [pc, #104]	; (412c <Parser_RxAddChar+0x174>)
    40c2:	4a18      	ldr	r2, [pc, #96]	; (4124 <Parser_RxAddChar+0x16c>)
    40c4:	5cd3      	ldrb	r3, [r2, r3]
    40c6:	b2db      	uxtb	r3, r3
    40c8:	2b08      	cmp	r3, #8
    40ca:	d824      	bhi.n	4116 <Parser_RxAddChar+0x15e>
                mRxParserCmd.cmd[mRxParserCmd.crtCmdPos ++] = '\0';
    40cc:	0013      	movs	r3, r2
    40ce:	2194      	movs	r1, #148	; 0x94
    40d0:	0089      	lsls	r1, r1, #2
    40d2:	5a52      	ldrh	r2, [r2, r1]
    40d4:	b292      	uxth	r2, r2
    40d6:	1c50      	adds	r0, r2, #1
    40d8:	b280      	uxth	r0, r0
    40da:	5258      	strh	r0, [r3, r1]
    40dc:	2500      	movs	r5, #0
    40de:	549d      	strb	r5, [r3, r2]
                mRxParserCmd.wordLen[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtWordPos;
    40e0:	4812      	ldr	r0, [pc, #72]	; (412c <Parser_RxAddChar+0x174>)
    40e2:	5c1a      	ldrb	r2, [r3, r0]
    40e4:	4c10      	ldr	r4, [pc, #64]	; (4128 <Parser_RxAddChar+0x170>)
    40e6:	5b1e      	ldrh	r6, [r3, r4]
    40e8:	b2b6      	uxth	r6, r6
    40ea:	3211      	adds	r2, #17
    40ec:	32ff      	adds	r2, #255	; 0xff
    40ee:	0052      	lsls	r2, r2, #1
    40f0:	189a      	adds	r2, r3, r2
    40f2:	80d6      	strh	r6, [r2, #6]
                mRxParserCmd.wordStartPos[mRxParserCmd.crtWordIdx] = mRxParserCmd.crtCmdPos - mRxParserCmd.crtWordPos - 1;
    40f4:	5c1a      	ldrb	r2, [r3, r0]
    40f6:	5a59      	ldrh	r1, [r3, r1]
    40f8:	5b1e      	ldrh	r6, [r3, r4]
    40fa:	3901      	subs	r1, #1
    40fc:	1b89      	subs	r1, r1, r6
    40fe:	b289      	uxth	r1, r1
    4100:	321d      	adds	r2, #29
    4102:	32ff      	adds	r2, #255	; 0xff
    4104:	0052      	lsls	r2, r2, #1
    4106:	189a      	adds	r2, r3, r2
    4108:	8051      	strh	r1, [r2, #2]
                mRxParserCmd.crtWordIdx ++;
    410a:	5c1a      	ldrb	r2, [r3, r0]
    410c:	3201      	adds	r2, #1
    410e:	b2d2      	uxtb	r2, r2
    4110:	541a      	strb	r2, [r3, r0]
                mRxParserCmd.crtWordPos = 0;
    4112:	531d      	strh	r5, [r3, r4]
    4114:	e7cc      	b.n	40b0 <Parser_RxAddChar+0xf8>
        Parser_RxClearBuffer();
    4116:	4b07      	ldr	r3, [pc, #28]	; (4134 <Parser_RxAddChar+0x17c>)
    4118:	4798      	blx	r3
        Parser_TxAddReply((char*)gapParserTspStatus[ERR_STATUS_IDX], strlen(gapParserTspStatus[ERR_STATUS_IDX]));
    411a:	2103      	movs	r1, #3
    411c:	4806      	ldr	r0, [pc, #24]	; (4138 <Parser_RxAddChar+0x180>)
    411e:	4b07      	ldr	r3, [pc, #28]	; (413c <Parser_RxAddChar+0x184>)
    4120:	4798      	blx	r3
    4122:	e7c5      	b.n	40b0 <Parser_RxAddChar+0xf8>
    4124:	20001f98 	.word	0x20001f98
    4128:	00000252 	.word	0x00000252
    412c:	0000024f 	.word	0x0000024f
    4130:	0000024e 	.word	0x0000024e
    4134:	00003f31 	.word	0x00003f31
    4138:	0001f9d0 	.word	0x0001f9d0
    413c:	00003f7d 	.word	0x00003f7d

00004140 <Validate_HexValue>:
    "off",
    "on"
};

bool Validate_HexValue(void* pValue)
 {
    4140:	b570      	push	{r4, r5, r6, lr}
    bool flag = true;
    char* character;

    for(character = pValue; *character; character++)
    4142:	7803      	ldrb	r3, [r0, #0]
    4144:	2b00      	cmp	r3, #0
    4146:	d00e      	beq.n	4166 <Validate_HexValue+0x26>
    4148:	0004      	movs	r4, r0
    {
        if(isxdigit(*character) == 0)
    414a:	4e09      	ldr	r6, [pc, #36]	; (4170 <Validate_HexValue+0x30>)
    414c:	2544      	movs	r5, #68	; 0x44
    414e:	47b0      	blx	r6
    4150:	7823      	ldrb	r3, [r4, #0]
    4152:	18c0      	adds	r0, r0, r3
    4154:	7843      	ldrb	r3, [r0, #1]
    4156:	421d      	tst	r5, r3
    4158:	d007      	beq.n	416a <Validate_HexValue+0x2a>
    for(character = pValue; *character; character++)
    415a:	3401      	adds	r4, #1
    415c:	7823      	ldrb	r3, [r4, #0]
    415e:	2b00      	cmp	r3, #0
    4160:	d1f5      	bne.n	414e <Validate_HexValue+0xe>
    bool flag = true;
    4162:	2001      	movs	r0, #1
    4164:	e002      	b.n	416c <Validate_HexValue+0x2c>
    4166:	2001      	movs	r0, #1
    4168:	e000      	b.n	416c <Validate_HexValue+0x2c>
        {
            flag = false;
    416a:	2000      	movs	r0, #0
            break;
        }
    }

    return flag;
}
    416c:	bd70      	pop	{r4, r5, r6, pc}
    416e:	46c0      	nop			; (mov r8, r8)
    4170:	000196f9 	.word	0x000196f9

00004174 <Parser_IntArrayToHexAscii>:

    return retValue;
}

void Parser_IntArrayToHexAscii(uint8_t arrayLen, uint8_t* pInArray, char* pOutHexAscii)
{
    4174:	b5f0      	push	{r4, r5, r6, r7, lr}
    4176:	46ce      	mov	lr, r9
    4178:	4647      	mov	r7, r8
    417a:	b580      	push	{r7, lr}
    417c:	b083      	sub	sp, #12
    417e:	4680      	mov	r8, r0
    4180:	9201      	str	r2, [sp, #4]
    uint8_t iCtr = 0U;

    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    4182:	2800      	cmp	r0, #0
    4184:	d019      	beq.n	41ba <Parser_IntArrayToHexAscii+0x46>
    4186:	000c      	movs	r4, r1
    4188:	0015      	movs	r5, r2
    418a:	1e47      	subs	r7, r0, #1
    418c:	b2ff      	uxtb	r7, r7
    418e:	3701      	adds	r7, #1
    4190:	19cf      	adds	r7, r1, r7
    {
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    4192:	4e0f      	ldr	r6, [pc, #60]	; (41d0 <Parser_IntArrayToHexAscii+0x5c>)

        if(pInArray[iCtr] <= 15)
        {
            /* Special treatment for figures [0..9]  */
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
            pOutHexAscii[iCtr << 1] = '0';
    4194:	2330      	movs	r3, #48	; 0x30
    4196:	4699      	mov	r9, r3
    4198:	e003      	b.n	41a2 <Parser_IntArrayToHexAscii+0x2e>
    419a:	3401      	adds	r4, #1
    419c:	3502      	adds	r5, #2
    for(iCtr = 0; iCtr < arrayLen; iCtr ++)
    419e:	42bc      	cmp	r4, r7
    41a0:	d00b      	beq.n	41ba <Parser_IntArrayToHexAscii+0x46>
        itoa(pInArray[iCtr], (char *)&pOutHexAscii[iCtr << 1], 16);
    41a2:	7820      	ldrb	r0, [r4, #0]
    41a4:	2210      	movs	r2, #16
    41a6:	0029      	movs	r1, r5
    41a8:	47b0      	blx	r6
        if(pInArray[iCtr] <= 15)
    41aa:	7823      	ldrb	r3, [r4, #0]
    41ac:	2b0f      	cmp	r3, #15
    41ae:	d8f4      	bhi.n	419a <Parser_IntArrayToHexAscii+0x26>
            pOutHexAscii[(iCtr << 1) + 1] = pOutHexAscii[iCtr << 1];
    41b0:	782b      	ldrb	r3, [r5, #0]
    41b2:	706b      	strb	r3, [r5, #1]
            pOutHexAscii[iCtr << 1] = '0';
    41b4:	464b      	mov	r3, r9
    41b6:	702b      	strb	r3, [r5, #0]
    41b8:	e7ef      	b.n	419a <Parser_IntArrayToHexAscii+0x26>
        }
    }

    pOutHexAscii[(iCtr << 1)] = '\0';
    41ba:	4643      	mov	r3, r8
    41bc:	005b      	lsls	r3, r3, #1
    41be:	2200      	movs	r2, #0
    41c0:	9901      	ldr	r1, [sp, #4]
    41c2:	54ca      	strb	r2, [r1, r3]
}
    41c4:	b003      	add	sp, #12
    41c6:	bc0c      	pop	{r2, r3}
    41c8:	4690      	mov	r8, r2
    41ca:	4699      	mov	r9, r3
    41cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	000196c9 	.word	0x000196c9

000041d4 <Validate_Uint8DecAsciiValue>:

bool Validate_Uint8DecAsciiValue(void* pValue, uint8_t* pDecValue)
{
    41d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41d6:	b083      	sub	sp, #12
    41d8:	0004      	movs	r4, r0
    41da:	9101      	str	r1, [sp, #4]
    bool flag = false;
    char* character;
    uint16_t valueLen = strlen(pValue);
    41dc:	4b10      	ldr	r3, [pc, #64]	; (4220 <Validate_Uint8DecAsciiValue+0x4c>)
    41de:	4798      	blx	r3
    41e0:	0006      	movs	r6, r0
    int32_t value = atoi(pValue);
    41e2:	0020      	movs	r0, r4
    41e4:	4b0f      	ldr	r3, [pc, #60]	; (4224 <Validate_Uint8DecAsciiValue+0x50>)
    41e6:	4798      	blx	r3
    41e8:	0007      	movs	r7, r0

    // Maximum 3 ascii characters 0-> 255
    if((valueLen <= 3U) && (value >= 0) && (value <= 255))
    41ea:	b2b6      	uxth	r6, r6
    41ec:	2e03      	cmp	r6, #3
    41ee:	d814      	bhi.n	421a <Validate_Uint8DecAsciiValue+0x46>
    41f0:	28ff      	cmp	r0, #255	; 0xff
    41f2:	d812      	bhi.n	421a <Validate_Uint8DecAsciiValue+0x46>
    {
        flag = true;

        for(character = pValue; *character; character++)
    41f4:	7823      	ldrb	r3, [r4, #0]
    41f6:	2b00      	cmp	r3, #0
    41f8:	d00b      	beq.n	4212 <Validate_Uint8DecAsciiValue+0x3e>
        {
            if(isdigit(*character) == 0)
    41fa:	4d0b      	ldr	r5, [pc, #44]	; (4228 <Validate_Uint8DecAsciiValue+0x54>)
    41fc:	2604      	movs	r6, #4
    41fe:	47a8      	blx	r5
    4200:	7823      	ldrb	r3, [r4, #0]
    4202:	18c0      	adds	r0, r0, r3
    4204:	7843      	ldrb	r3, [r0, #1]
    4206:	421e      	tst	r6, r3
    4208:	d007      	beq.n	421a <Validate_Uint8DecAsciiValue+0x46>
        for(character = pValue; *character; character++)
    420a:	3401      	adds	r4, #1
    420c:	7823      	ldrb	r3, [r4, #0]
    420e:	2b00      	cmp	r3, #0
    4210:	d1f5      	bne.n	41fe <Validate_Uint8DecAsciiValue+0x2a>
        }
    }

    if(flag)
    {
        *pDecValue = (uint8_t)value;
    4212:	9b01      	ldr	r3, [sp, #4]
    4214:	701f      	strb	r7, [r3, #0]
    4216:	2001      	movs	r0, #1
    4218:	e000      	b.n	421c <Validate_Uint8DecAsciiValue+0x48>
        for(character = pValue; *character; character++)
    421a:	2000      	movs	r0, #0
    }

    return flag;
}
    421c:	b003      	add	sp, #12
    421e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4220:	0001a275 	.word	0x0001a275
    4224:	00019645 	.word	0x00019645
    4228:	000196f9 	.word	0x000196f9

0000422c <ultoa>:

/*
 * \brief Converts String to Un-singed Long Integer
 */ 
char * ultoa(char * str, unsigned long num,  int radix)
{
    422c:	b5f0      	push	{r4, r5, r6, r7, lr}
    422e:	46d6      	mov	lr, sl
    4230:	b500      	push	{lr}
    4232:	b08e      	sub	sp, #56	; 0x38
    4234:	9003      	str	r0, [sp, #12]
    4236:	000c      	movs	r4, r1
    4238:	9201      	str	r2, [sp, #4]
    423a:	2500      	movs	r5, #0
   int digit;
   int str_loc = 0;

   /*construct a backward string of the number. */
   do {
	   digit = (unsigned long)num % radix;
    423c:	4b18      	ldr	r3, [pc, #96]	; (42a0 <ultoa+0x74>)
    423e:	469a      	mov	sl, r3
	   if (digit < 10)
	   temp[temp_loc++] = digit + '0';
	   else
	   temp[temp_loc++] = digit - 10 + 'A';
    4240:	af05      	add	r7, sp, #20
	   num = ((unsigned long)num) / radix;
    4242:	4e18      	ldr	r6, [pc, #96]	; (42a4 <ultoa+0x78>)
    4244:	e009      	b.n	425a <ultoa+0x2e>
	   temp[temp_loc++] = digit - 10 + 'A';
    4246:	3137      	adds	r1, #55	; 0x37
    4248:	55e9      	strb	r1, [r5, r7]
	   num = ((unsigned long)num) / radix;
    424a:	9901      	ldr	r1, [sp, #4]
    424c:	0020      	movs	r0, r4
    424e:	47b0      	blx	r6
    4250:	0004      	movs	r4, r0
    4252:	1c6b      	adds	r3, r5, #1
   } while ((unsigned long)num > 0);
    4254:	2800      	cmp	r0, #0
    4256:	d009      	beq.n	426c <ultoa+0x40>
    4258:	001d      	movs	r5, r3
    425a:	9502      	str	r5, [sp, #8]
	   digit = (unsigned long)num % radix;
    425c:	9901      	ldr	r1, [sp, #4]
    425e:	0020      	movs	r0, r4
    4260:	47d0      	blx	sl
	   if (digit < 10)
    4262:	2909      	cmp	r1, #9
    4264:	dcef      	bgt.n	4246 <ultoa+0x1a>
	   temp[temp_loc++] = digit + '0';
    4266:	3130      	adds	r1, #48	; 0x30
    4268:	55e9      	strb	r1, [r5, r7]
    426a:	e7ee      	b.n	424a <ultoa+0x1e>

   temp_loc--;


   /* now reverse the string. */
   while ( temp_loc >=0 ) {
    426c:	9b02      	ldr	r3, [sp, #8]
    426e:	2b00      	cmp	r3, #0
    4270:	db14      	blt.n	429c <ultoa+0x70>
    4272:	ab05      	add	r3, sp, #20
    4274:	195b      	adds	r3, r3, r5
    4276:	9a03      	ldr	r2, [sp, #12]
    4278:	a904      	add	r1, sp, #16
    427a:	1cc8      	adds	r0, r1, #3
	   /* while there are still chars */
	   str[str_loc++] = temp[temp_loc--];
    427c:	7819      	ldrb	r1, [r3, #0]
    427e:	7011      	strb	r1, [r2, #0]
    4280:	3b01      	subs	r3, #1
    4282:	3201      	adds	r2, #1
   while ( temp_loc >=0 ) {
    4284:	4283      	cmp	r3, r0
    4286:	d1f9      	bne.n	427c <ultoa+0x50>
    4288:	9e02      	ldr	r6, [sp, #8]
    428a:	3601      	adds	r6, #1
   }
   /* add null termination. */
   str[str_loc] = 0; 
    428c:	2300      	movs	r3, #0
    428e:	9a03      	ldr	r2, [sp, #12]
    4290:	5593      	strb	r3, [r2, r6]

   return str;
}
    4292:	0010      	movs	r0, r2
    4294:	b00e      	add	sp, #56	; 0x38
    4296:	bc04      	pop	{r2}
    4298:	4692      	mov	sl, r2
    429a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   while ( temp_loc >=0 ) {
    429c:	2600      	movs	r6, #0
    429e:	e7f5      	b.n	428c <ultoa+0x60>
    42a0:	000166c5 	.word	0x000166c5
    42a4:	000165b9 	.word	0x000165b9

000042a8 <Validate_UintDecAsciiValue>:
{
    42a8:	b570      	push	{r4, r5, r6, lr}
    42aa:	b084      	sub	sp, #16
    42ac:	0005      	movs	r5, r0
    42ae:	0016      	movs	r6, r2
    unsigned long value = strtoul(pValue, NULL, 10);
    42b0:	220a      	movs	r2, #10
    42b2:	2100      	movs	r1, #0
    42b4:	4b0a      	ldr	r3, [pc, #40]	; (42e0 <Validate_UintDecAsciiValue+0x38>)
    42b6:	4798      	blx	r3
    42b8:	0004      	movs	r4, r0
    ultoa(buf, value, 10U);
    42ba:	220a      	movs	r2, #10
    42bc:	0001      	movs	r1, r0
    42be:	a801      	add	r0, sp, #4
    42c0:	4b08      	ldr	r3, [pc, #32]	; (42e4 <Validate_UintDecAsciiValue+0x3c>)
    42c2:	4798      	blx	r3
    if (0 != strcmp((char*)pValue, buf))
    42c4:	a901      	add	r1, sp, #4
    42c6:	0028      	movs	r0, r5
    42c8:	4b07      	ldr	r3, [pc, #28]	; (42e8 <Validate_UintDecAsciiValue+0x40>)
    42ca:	4798      	blx	r3
    42cc:	0003      	movs	r3, r0
        flag = false;
    42ce:	2000      	movs	r0, #0
    if (value > maxValue)
    42d0:	42b4      	cmp	r4, r6
    42d2:	d901      	bls.n	42d8 <Validate_UintDecAsciiValue+0x30>
}
    42d4:	b004      	add	sp, #16
    42d6:	bd70      	pop	{r4, r5, r6, pc}
    if (0 != strcmp((char*)pValue, buf))
    42d8:	4258      	negs	r0, r3
    42da:	4158      	adcs	r0, r3
    42dc:	b2c0      	uxtb	r0, r0
    42de:	e7f9      	b.n	42d4 <Validate_UintDecAsciiValue+0x2c>
    42e0:	0001a581 	.word	0x0001a581
    42e4:	0000422d 	.word	0x0000422d
    42e8:	0001a1ed 	.word	0x0001a1ed

000042ec <stricmp>:

/*
 * \brief Compare Strings without Case Sensitivity
 */ 
int stricmp( char *s1, const char *s2 )
{
    42ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    42ee:	46de      	mov	lr, fp
    42f0:	4657      	mov	r7, sl
    42f2:	464e      	mov	r6, r9
    42f4:	b5c0      	push	{r6, r7, lr}
    42f6:	b082      	sub	sp, #8
    42f8:	0004      	movs	r4, r0
    42fa:	000e      	movs	r6, r1
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    42fc:	2800      	cmp	r0, #0
    42fe:	d006      	beq.n	430e <stricmp+0x22>
	if (s2 == NULL) return *s1;
    4300:	2900      	cmp	r1, #0
    4302:	d009      	beq.n	4318 <stricmp+0x2c>

	char c1, c2;
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    4304:	4b1c      	ldr	r3, [pc, #112]	; (4378 <stricmp+0x8c>)
    4306:	469b      	mov	fp, r3
    4308:	2703      	movs	r7, #3
    430a:	469a      	mov	sl, r3
    430c:	e011      	b.n	4332 <stricmp+0x46>
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    430e:	2900      	cmp	r1, #0
    4310:	d02f      	beq.n	4372 <stricmp+0x86>
    4312:	7808      	ldrb	r0, [r1, #0]
    4314:	4240      	negs	r0, r0
    4316:	e026      	b.n	4366 <stricmp+0x7a>
	if (s2 == NULL) return *s1;
    4318:	7800      	ldrb	r0, [r0, #0]
    431a:	e024      	b.n	4366 <stricmp+0x7a>
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    431c:	3520      	adds	r5, #32
    431e:	9501      	str	r5, [sp, #4]
    4320:	e00f      	b.n	4342 <stricmp+0x56>
    4322:	b2d3      	uxtb	r3, r2
    4324:	4599      	cmp	r9, r3
    4326:	d119      	bne.n	435c <stricmp+0x70>
	{
		if (*s1 == '\0') break;
    4328:	7823      	ldrb	r3, [r4, #0]
    432a:	2b00      	cmp	r3, #0
    432c:	d016      	beq.n	435c <stricmp+0x70>
		++s1; ++s2;
    432e:	3401      	adds	r4, #1
    4330:	3601      	adds	r6, #1
	while ((c1 = tolower (*s1)) == (c2 = tolower (*s2)))
    4332:	7825      	ldrb	r5, [r4, #0]
    4334:	47d8      	blx	fp
    4336:	1940      	adds	r0, r0, r5
    4338:	7843      	ldrb	r3, [r0, #1]
    433a:	403b      	ands	r3, r7
    433c:	9501      	str	r5, [sp, #4]
    433e:	2b01      	cmp	r3, #1
    4340:	d0ec      	beq.n	431c <stricmp+0x30>
    4342:	466b      	mov	r3, sp
    4344:	791b      	ldrb	r3, [r3, #4]
    4346:	4699      	mov	r9, r3
    4348:	7835      	ldrb	r5, [r6, #0]
    434a:	47d0      	blx	sl
    434c:	1940      	adds	r0, r0, r5
    434e:	7843      	ldrb	r3, [r0, #1]
    4350:	403b      	ands	r3, r7
    4352:	002a      	movs	r2, r5
    4354:	2b01      	cmp	r3, #1
    4356:	d1e4      	bne.n	4322 <stricmp+0x36>
    4358:	3220      	adds	r2, #32
    435a:	e7e2      	b.n	4322 <stricmp+0x36>
	}

	return c1 - c2;
    435c:	20ff      	movs	r0, #255	; 0xff
    435e:	9f01      	ldr	r7, [sp, #4]
    4360:	4007      	ands	r7, r0
    4362:	4010      	ands	r0, r2
    4364:	1a38      	subs	r0, r7, r0
}
    4366:	b002      	add	sp, #8
    4368:	bc1c      	pop	{r2, r3, r4}
    436a:	4691      	mov	r9, r2
    436c:	469a      	mov	sl, r3
    436e:	46a3      	mov	fp, r4
    4370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (s1 == NULL) return s2 == NULL ? 0 : -(*s2);
    4372:	2000      	movs	r0, #0
    4374:	e7f7      	b.n	4366 <stricmp+0x7a>
    4376:	46c0      	nop			; (mov r8, r8)
    4378:	000196f9 	.word	0x000196f9

0000437c <Validate_OnOffAsciiValue>:
{
    437c:	b510      	push	{r4, lr}
    437e:	0004      	movs	r4, r0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    4380:	4908      	ldr	r1, [pc, #32]	; (43a4 <Validate_OnOffAsciiValue+0x28>)
    4382:	4b09      	ldr	r3, [pc, #36]	; (43a8 <Validate_OnOffAsciiValue+0x2c>)
    4384:	4798      	blx	r3
        result = OFF_STR_IDX;
    4386:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, gapParseOnOff[OFF_STR_IDX]))
    4388:	2800      	cmp	r0, #0
    438a:	d101      	bne.n	4390 <Validate_OnOffAsciiValue+0x14>
}
    438c:	0018      	movs	r0, r3
    438e:	bd10      	pop	{r4, pc}
    else if (0U == stricmp(pValue, gapParseOnOff[ON_STR_IDX]))
    4390:	4906      	ldr	r1, [pc, #24]	; (43ac <Validate_OnOffAsciiValue+0x30>)
    4392:	0020      	movs	r0, r4
    4394:	4b04      	ldr	r3, [pc, #16]	; (43a8 <Validate_OnOffAsciiValue+0x2c>)
    4396:	4798      	blx	r3
        result = ON_STR_IDX;
    4398:	0003      	movs	r3, r0
    439a:	1e58      	subs	r0, r3, #1
    439c:	4183      	sbcs	r3, r0
    439e:	3301      	adds	r3, #1
    43a0:	e7f4      	b.n	438c <Validate_OnOffAsciiValue+0x10>
    43a2:	46c0      	nop			; (mov r8, r8)
    43a4:	0001f99c 	.word	0x0001f99c
    43a8:	000042ed 	.word	0x000042ed
    43ac:	0001f9a0 	.word	0x0001f9a0

000043b0 <Validate_Str1Str2AsciiValue>:
{
    43b0:	b570      	push	{r4, r5, r6, lr}
    43b2:	0004      	movs	r4, r0
    43b4:	0015      	movs	r5, r2
    if(0U == stricmp(pValue, pStr1))
    43b6:	4b08      	ldr	r3, [pc, #32]	; (43d8 <Validate_Str1Str2AsciiValue+0x28>)
    43b8:	4798      	blx	r3
        result = FIRST_STR_IDX;
    43ba:	2300      	movs	r3, #0
    if(0U == stricmp(pValue, pStr1))
    43bc:	2800      	cmp	r0, #0
    43be:	d101      	bne.n	43c4 <Validate_Str1Str2AsciiValue+0x14>
}
    43c0:	0018      	movs	r0, r3
    43c2:	bd70      	pop	{r4, r5, r6, pc}
    else if (0U == stricmp(pValue, pStr2))
    43c4:	0029      	movs	r1, r5
    43c6:	0020      	movs	r0, r4
    43c8:	4b03      	ldr	r3, [pc, #12]	; (43d8 <Validate_Str1Str2AsciiValue+0x28>)
    43ca:	4798      	blx	r3
        result = SECOND_STR_IDX;
    43cc:	0003      	movs	r3, r0
    43ce:	1e58      	subs	r0, r3, #1
    43d0:	4183      	sbcs	r3, r0
    43d2:	3301      	adds	r3, #1
    43d4:	e7f4      	b.n	43c0 <Validate_Str1Str2AsciiValue+0x10>
    43d6:	46c0      	nop			; (mov r8, r8)
    43d8:	000042ed 	.word	0x000042ed

000043dc <xtoi>:

/*
 * \brief Converts the input string consisting of hexadecimal digits into an integer value
 */ 
int xtoi(char *c)
{
    43dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43de:	46ce      	mov	lr, r9
    43e0:	4647      	mov	r7, r8
    43e2:	b580      	push	{r7, lr}
    43e4:	0007      	movs	r7, r0
  size_t szlen = strlen(c);
    43e6:	4b16      	ldr	r3, [pc, #88]	; (4440 <xtoi+0x64>)
    43e8:	4798      	blx	r3
  int idx, ptr, factor,result =0;

  if(szlen > 0){
    43ea:	3801      	subs	r0, #1
  int idx, ptr, factor,result =0;
    43ec:	2600      	movs	r6, #0
  if(szlen > 0){
    43ee:	2807      	cmp	r0, #7
    43f0:	d821      	bhi.n	4436 <xtoi+0x5a>
    if(szlen > 8) return 0;
    result = 0;
    factor = 1;

    for(idx = szlen-1; idx >= 0; --idx){
    43f2:	1e04      	subs	r4, r0, #0
    43f4:	db1c      	blt.n	4430 <xtoi+0x54>
    43f6:	2501      	movs	r5, #1
    if(isxdigit( *(c+idx))){
    43f8:	4b12      	ldr	r3, [pc, #72]	; (4444 <xtoi+0x68>)
    43fa:	4699      	mov	r9, r3
    43fc:	2344      	movs	r3, #68	; 0x44
    43fe:	4698      	mov	r8, r3
    4400:	e00a      	b.n	4418 <xtoi+0x3c>
	if( *(c + idx) >= 97){
	  ptr = ( *(c + idx) - 97) + 10;
	}else if( *(c + idx) >= 65){
	  ptr = ( *(c + idx) - 65) + 10;
	}else{
	  ptr = *(c + idx) - 48;
    4402:	001a      	movs	r2, r3
    4404:	3a30      	subs	r2, #48	; 0x30
	}else if( *(c + idx) >= 65){
    4406:	2b40      	cmp	r3, #64	; 0x40
    4408:	d901      	bls.n	440e <xtoi+0x32>
	  ptr = ( *(c + idx) - 65) + 10;
    440a:	3b37      	subs	r3, #55	; 0x37
    440c:	001a      	movs	r2, r3
	}
	result += (ptr * factor);
    440e:	436a      	muls	r2, r5
    4410:	18b6      	adds	r6, r6, r2
	factor *= 16;
    4412:	012d      	lsls	r5, r5, #4
    for(idx = szlen-1; idx >= 0; --idx){
    4414:	3c01      	subs	r4, #1
    4416:	d40e      	bmi.n	4436 <xtoi+0x5a>
    if(isxdigit( *(c+idx))){
    4418:	47c8      	blx	r9
    441a:	5d3b      	ldrb	r3, [r7, r4]
    441c:	18c0      	adds	r0, r0, r3
    441e:	7842      	ldrb	r2, [r0, #1]
    4420:	4641      	mov	r1, r8
    4422:	4211      	tst	r1, r2
    4424:	d006      	beq.n	4434 <xtoi+0x58>
	if( *(c + idx) >= 97){
    4426:	2b60      	cmp	r3, #96	; 0x60
    4428:	d9eb      	bls.n	4402 <xtoi+0x26>
	  ptr = ( *(c + idx) - 97) + 10;
    442a:	3b57      	subs	r3, #87	; 0x57
    442c:	001a      	movs	r2, r3
    442e:	e7ee      	b.n	440e <xtoi+0x32>
    result = 0;
    4430:	2600      	movs	r6, #0
    4432:	e000      	b.n	4436 <xtoi+0x5a>
    }else{
		return 4;
    4434:	2604      	movs	r6, #4
    }
    }
  }

  return result;
    4436:	0030      	movs	r0, r6
    4438:	bc0c      	pop	{r2, r3}
    443a:	4690      	mov	r8, r2
    443c:	4699      	mov	r9, r3
    443e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4440:	0001a275 	.word	0x0001a275
    4444:	000196f9 	.word	0x000196f9

00004448 <Parser_HexAsciiToInt>:
{
    4448:	b5f0      	push	{r4, r5, r6, r7, lr}
    444a:	46de      	mov	lr, fp
    444c:	4657      	mov	r7, sl
    444e:	464e      	mov	r6, r9
    4450:	4645      	mov	r5, r8
    4452:	b5e0      	push	{r5, r6, r7, lr}
    4454:	b083      	sub	sp, #12
    4456:	0004      	movs	r4, r0
    4458:	000f      	movs	r7, r1
    445a:	4690      	mov	r8, r2
    uint16_t rxHexAsciiLen = strlen(pInHexAscii);
    445c:	0008      	movs	r0, r1
    445e:	4b1f      	ldr	r3, [pc, #124]	; (44dc <Parser_HexAsciiToInt+0x94>)
    4460:	4798      	blx	r3
    4462:	b283      	uxth	r3, r0
    uint16_t jCtr = rxHexAsciiLen >> 1;
    4464:	085d      	lsrs	r5, r3, #1
    if(rxHexAsciiLen % 2 == 0)
    4466:	07da      	lsls	r2, r3, #31
    4468:	d401      	bmi.n	446e <Parser_HexAsciiToInt+0x26>
        jCtr --;
    446a:	3d01      	subs	r5, #1
    446c:	b2ad      	uxth	r5, r5
    uint8_t retValue = 0;
    446e:	2000      	movs	r0, #0
    if(hexAsciiLen == rxHexAsciiLen)
    4470:	42a3      	cmp	r3, r4
    4472:	d006      	beq.n	4482 <Parser_HexAsciiToInt+0x3a>
}
    4474:	b003      	add	sp, #12
    4476:	bc3c      	pop	{r2, r3, r4, r5}
    4478:	4690      	mov	r8, r2
    447a:	4699      	mov	r9, r3
    447c:	46a2      	mov	sl, r4
    447e:	46ab      	mov	fp, r5
    4480:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(rxHexAsciiLen > 0)
    4482:	2c00      	cmp	r4, #0
    4484:	d027      	beq.n	44d6 <Parser_HexAsciiToInt+0x8e>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    4486:	ae01      	add	r6, sp, #4
            tempBuff[iCtr] = '\0';
    4488:	2300      	movs	r3, #0
    448a:	469a      	mov	sl, r3
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    448c:	4b14      	ldr	r3, [pc, #80]	; (44e0 <Parser_HexAsciiToInt+0x98>)
    448e:	4699      	mov	r9, r3
    4490:	e013      	b.n	44ba <Parser_HexAsciiToInt+0x72>
                tempBuff[iCtr] = '0';
    4492:	2330      	movs	r3, #48	; 0x30
    4494:	7033      	strb	r3, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    4496:	193b      	adds	r3, r7, r4
    4498:	3b01      	subs	r3, #1
    449a:	781b      	ldrb	r3, [r3, #0]
    449c:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen --;
    449e:	3c01      	subs	r4, #1
    44a0:	b2a4      	uxth	r4, r4
            tempBuff[iCtr] = '\0';
    44a2:	4653      	mov	r3, sl
    44a4:	70b3      	strb	r3, [r6, #2]
            *(pOutInt + jCtr) = xtoi(tempBuff); 
    44a6:	46ab      	mov	fp, r5
    44a8:	44c3      	add	fp, r8
    44aa:	0030      	movs	r0, r6
    44ac:	47c8      	blx	r9
    44ae:	465b      	mov	r3, fp
    44b0:	7018      	strb	r0, [r3, #0]
            jCtr --;
    44b2:	3d01      	subs	r5, #1
    44b4:	b2ad      	uxth	r5, r5
        while(rxHexAsciiLen > 0)
    44b6:	2c00      	cmp	r4, #0
    44b8:	d00b      	beq.n	44d2 <Parser_HexAsciiToInt+0x8a>
            if(rxHexAsciiLen >= 2U)
    44ba:	2c01      	cmp	r4, #1
    44bc:	d9e9      	bls.n	4492 <Parser_HexAsciiToInt+0x4a>
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 2));
    44be:	193b      	adds	r3, r7, r4
    44c0:	1e9a      	subs	r2, r3, #2
    44c2:	7812      	ldrb	r2, [r2, #0]
    44c4:	7032      	strb	r2, [r6, #0]
                tempBuff[iCtr] = *(((char*)pInHexAscii) + (rxHexAsciiLen - 1));
    44c6:	3b01      	subs	r3, #1
    44c8:	781b      	ldrb	r3, [r3, #0]
    44ca:	7073      	strb	r3, [r6, #1]
                rxHexAsciiLen -= 2U;
    44cc:	3c02      	subs	r4, #2
    44ce:	b2a4      	uxth	r4, r4
    44d0:	e7e7      	b.n	44a2 <Parser_HexAsciiToInt+0x5a>
        retValue = 1;
    44d2:	2001      	movs	r0, #1
    44d4:	e7ce      	b.n	4474 <Parser_HexAsciiToInt+0x2c>
    44d6:	2001      	movs	r0, #1
    44d8:	e7cc      	b.n	4474 <Parser_HexAsciiToInt+0x2c>
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	0001a275 	.word	0x0001a275
    44e0:	000043dd 	.word	0x000043dd

000044e4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    44e4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    44e6:	2000      	movs	r0, #0
    44e8:	4b08      	ldr	r3, [pc, #32]	; (450c <delay_init+0x28>)
    44ea:	4798      	blx	r3
    44ec:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    44ee:	4c08      	ldr	r4, [pc, #32]	; (4510 <delay_init+0x2c>)
    44f0:	21fa      	movs	r1, #250	; 0xfa
    44f2:	0089      	lsls	r1, r1, #2
    44f4:	47a0      	blx	r4
    44f6:	4b07      	ldr	r3, [pc, #28]	; (4514 <delay_init+0x30>)
    44f8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    44fa:	4907      	ldr	r1, [pc, #28]	; (4518 <delay_init+0x34>)
    44fc:	0028      	movs	r0, r5
    44fe:	47a0      	blx	r4
    4500:	4b06      	ldr	r3, [pc, #24]	; (451c <delay_init+0x38>)
    4502:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    4504:	2205      	movs	r2, #5
    4506:	4b06      	ldr	r3, [pc, #24]	; (4520 <delay_init+0x3c>)
    4508:	601a      	str	r2, [r3, #0]
}
    450a:	bd70      	pop	{r4, r5, r6, pc}
    450c:	00007161 	.word	0x00007161
    4510:	000165b9 	.word	0x000165b9
    4514:	2000000c 	.word	0x2000000c
    4518:	000f4240 	.word	0x000f4240
    451c:	20000010 	.word	0x20000010
    4520:	e000e010 	.word	0xe000e010

00004524 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    4524:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    4526:	4b08      	ldr	r3, [pc, #32]	; (4548 <delay_cycles_us+0x24>)
    4528:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    452a:	4a08      	ldr	r2, [pc, #32]	; (454c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    452c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    452e:	2180      	movs	r1, #128	; 0x80
    4530:	0249      	lsls	r1, r1, #9
	while (n--) {
    4532:	3801      	subs	r0, #1
    4534:	d307      	bcc.n	4546 <delay_cycles_us+0x22>
	if (n > 0) {
    4536:	2c00      	cmp	r4, #0
    4538:	d0fb      	beq.n	4532 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    453a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    453c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    453e:	6813      	ldr	r3, [r2, #0]
    4540:	420b      	tst	r3, r1
    4542:	d0fc      	beq.n	453e <delay_cycles_us+0x1a>
    4544:	e7f5      	b.n	4532 <delay_cycles_us+0xe>
	}
}
    4546:	bd30      	pop	{r4, r5, pc}
    4548:	20000010 	.word	0x20000010
    454c:	e000e010 	.word	0xe000e010

00004550 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    4550:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    4552:	4b08      	ldr	r3, [pc, #32]	; (4574 <delay_cycles_ms+0x24>)
    4554:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    4556:	4a08      	ldr	r2, [pc, #32]	; (4578 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    4558:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    455a:	2180      	movs	r1, #128	; 0x80
    455c:	0249      	lsls	r1, r1, #9
	while (n--) {
    455e:	3801      	subs	r0, #1
    4560:	d307      	bcc.n	4572 <delay_cycles_ms+0x22>
	if (n > 0) {
    4562:	2c00      	cmp	r4, #0
    4564:	d0fb      	beq.n	455e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    4566:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    4568:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    456a:	6813      	ldr	r3, [r2, #0]
    456c:	420b      	tst	r3, r1
    456e:	d0fc      	beq.n	456a <delay_cycles_ms+0x1a>
    4570:	e7f5      	b.n	455e <delay_cycles_ms+0xe>
	}
}
    4572:	bd30      	pop	{r4, r5, pc}
    4574:	2000000c 	.word	0x2000000c
    4578:	e000e010 	.word	0xe000e010

0000457c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    457c:	4b0c      	ldr	r3, [pc, #48]	; (45b0 <cpu_irq_enter_critical+0x34>)
    457e:	681b      	ldr	r3, [r3, #0]
    4580:	2b00      	cmp	r3, #0
    4582:	d106      	bne.n	4592 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    4584:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    4588:	2b00      	cmp	r3, #0
    458a:	d007      	beq.n	459c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    458c:	2200      	movs	r2, #0
    458e:	4b09      	ldr	r3, [pc, #36]	; (45b4 <cpu_irq_enter_critical+0x38>)
    4590:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    4592:	4a07      	ldr	r2, [pc, #28]	; (45b0 <cpu_irq_enter_critical+0x34>)
    4594:	6813      	ldr	r3, [r2, #0]
    4596:	3301      	adds	r3, #1
    4598:	6013      	str	r3, [r2, #0]
}
    459a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    459c:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    459e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    45a2:	2200      	movs	r2, #0
    45a4:	4b04      	ldr	r3, [pc, #16]	; (45b8 <cpu_irq_enter_critical+0x3c>)
    45a6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    45a8:	3201      	adds	r2, #1
    45aa:	4b02      	ldr	r3, [pc, #8]	; (45b4 <cpu_irq_enter_critical+0x38>)
    45ac:	701a      	strb	r2, [r3, #0]
    45ae:	e7f0      	b.n	4592 <cpu_irq_enter_critical+0x16>
    45b0:	20000b58 	.word	0x20000b58
    45b4:	20000b5c 	.word	0x20000b5c
    45b8:	20000014 	.word	0x20000014

000045bc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    45bc:	4b08      	ldr	r3, [pc, #32]	; (45e0 <cpu_irq_leave_critical+0x24>)
    45be:	681a      	ldr	r2, [r3, #0]
    45c0:	3a01      	subs	r2, #1
    45c2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    45c4:	681b      	ldr	r3, [r3, #0]
    45c6:	2b00      	cmp	r3, #0
    45c8:	d109      	bne.n	45de <cpu_irq_leave_critical+0x22>
    45ca:	4b06      	ldr	r3, [pc, #24]	; (45e4 <cpu_irq_leave_critical+0x28>)
    45cc:	781b      	ldrb	r3, [r3, #0]
    45ce:	2b00      	cmp	r3, #0
    45d0:	d005      	beq.n	45de <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    45d2:	2201      	movs	r2, #1
    45d4:	4b04      	ldr	r3, [pc, #16]	; (45e8 <cpu_irq_leave_critical+0x2c>)
    45d6:	701a      	strb	r2, [r3, #0]
    45d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    45dc:	b662      	cpsie	i
	}
}
    45de:	4770      	bx	lr
    45e0:	20000b58 	.word	0x20000b58
    45e4:	20000b5c 	.word	0x20000b5c
    45e8:	20000014 	.word	0x20000014

000045ec <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    45ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ee:	46c6      	mov	lr, r8
    45f0:	b500      	push	{lr}
    45f2:	b082      	sub	sp, #8
    45f4:	ac01      	add	r4, sp, #4
    45f6:	2601      	movs	r6, #1
    45f8:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    45fa:	2700      	movs	r7, #0
    45fc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    45fe:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    4600:	0021      	movs	r1, r4
    4602:	2013      	movs	r0, #19
    4604:	4d23      	ldr	r5, [pc, #140]	; (4694 <system_board_init+0xa8>)
    4606:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4608:	4b23      	ldr	r3, [pc, #140]	; (4698 <system_board_init+0xac>)
    460a:	4698      	mov	r8, r3
    460c:	2380      	movs	r3, #128	; 0x80
    460e:	031b      	lsls	r3, r3, #12
    4610:	4642      	mov	r2, r8
    4612:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4614:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    4616:	0021      	movs	r1, r4
    4618:	2012      	movs	r0, #18
    461a:	47a8      	blx	r5
    461c:	2380      	movs	r3, #128	; 0x80
    461e:	02db      	lsls	r3, r3, #11
    4620:	4642      	mov	r2, r8
    4622:	6193      	str	r3, [r2, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4624:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    4626:	0021      	movs	r1, r4
    4628:	200d      	movs	r0, #13
    462a:	47a8      	blx	r5
	} else {
		port_base->OUTCLR.reg = pin_mask;
    462c:	2380      	movs	r3, #128	; 0x80
    462e:	019b      	lsls	r3, r3, #6
    4630:	4642      	mov	r2, r8
    4632:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    4634:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    4636:	0021      	movs	r1, r4
    4638:	2009      	movs	r0, #9
    463a:	47a8      	blx	r5
    463c:	2380      	movs	r3, #128	; 0x80
    463e:	009b      	lsls	r3, r3, #2
    4640:	4642      	mov	r2, r8
    4642:	6153      	str	r3, [r2, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4644:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4646:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    4648:	0021      	movs	r1, r4
    464a:	201c      	movs	r0, #28
    464c:	47a8      	blx	r5
	#define AD6_PIN PIN_PA27
	#define AD7_PIN PIN_PA08
	#define AD8_PIN PIN_PA07

	//This pin is uset for uart logging to nRF52840 from nRF9160. If USB is set up this can be received here and sent over USB
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    464e:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    4650:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(PIN_PA06, &pin_conf);
    4652:	0021      	movs	r1, r4
    4654:	2006      	movs	r0, #6
    4656:	47a8      	blx	r5
	

#ifdef ADDRESS_SWITCH_ENABLE 

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    4658:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    465a:	7066      	strb	r6, [r4, #1]
	
	port_pin_set_config(AD1_PIN, &pin_conf);
    465c:	0021      	movs	r1, r4
    465e:	200e      	movs	r0, #14
    4660:	47a8      	blx	r5
	port_pin_set_config(AD2_PIN, &pin_conf);
    4662:	0021      	movs	r1, r4
    4664:	201c      	movs	r0, #28
    4666:	47a8      	blx	r5
	port_pin_set_config(AD3_PIN, &pin_conf);
    4668:	0021      	movs	r1, r4
    466a:	200f      	movs	r0, #15
    466c:	47a8      	blx	r5
	port_pin_set_config(AD4_PIN, &pin_conf);
    466e:	0021      	movs	r1, r4
    4670:	2013      	movs	r0, #19
    4672:	47a8      	blx	r5
	port_pin_set_config(AD5_PIN, &pin_conf);
    4674:	0021      	movs	r1, r4
    4676:	2012      	movs	r0, #18
    4678:	47a8      	blx	r5
	port_pin_set_config(AD6_PIN, &pin_conf);
    467a:	0021      	movs	r1, r4
    467c:	201b      	movs	r0, #27
    467e:	47a8      	blx	r5
	port_pin_set_config(AD7_PIN, &pin_conf);
    4680:	0021      	movs	r1, r4
    4682:	2008      	movs	r0, #8
    4684:	47a8      	blx	r5
	port_pin_set_config(AD8_PIN, &pin_conf);
    4686:	0021      	movs	r1, r4
    4688:	2007      	movs	r0, #7
    468a:	47a8      	blx	r5
	
#endif
}
    468c:	b002      	add	sp, #8
    468e:	bc04      	pop	{r2}
    4690:	4690      	mov	r8, r2
    4692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4694:	00004ead 	.word	0x00004ead
    4698:	40002800 	.word	0x40002800

0000469c <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    469c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    469e:	4b2f      	ldr	r3, [pc, #188]	; (475c <ADC_Handler+0xc0>)
    46a0:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    46a2:	6823      	ldr	r3, [r4, #0]
    46a4:	799a      	ldrb	r2, [r3, #6]
    46a6:	795d      	ldrb	r5, [r3, #5]
    46a8:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    46aa:	07ea      	lsls	r2, r5, #31
    46ac:	d52a      	bpl.n	4704 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    46ae:	2201      	movs	r2, #1
    46b0:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
    46b2:	6962      	ldr	r2, [r4, #20]
    46b4:	1c93      	adds	r3, r2, #2
    46b6:	6163      	str	r3, [r4, #20]
    46b8:	6823      	ldr	r3, [r4, #0]
    46ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    46bc:	b29b      	uxth	r3, r3
    46be:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    46c0:	8b23      	ldrh	r3, [r4, #24]
    46c2:	3b01      	subs	r3, #1
    46c4:	b29b      	uxth	r3, r3
    46c6:	8323      	strh	r3, [r4, #24]
    46c8:	2b00      	cmp	r3, #0
    46ca:	d015      	beq.n	46f8 <ADC_Handler+0x5c>
			if (module->software_trigger == true
    46cc:	7f63      	ldrb	r3, [r4, #29]
    46ce:	2b00      	cmp	r3, #0
    46d0:	d018      	beq.n	4704 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    46d2:	6822      	ldr	r2, [r4, #0]
    46d4:	79d3      	ldrb	r3, [r2, #7]
    46d6:	b25b      	sxtb	r3, r3
    46d8:	2b00      	cmp	r3, #0
    46da:	db13      	blt.n	4704 <ADC_Handler+0x68>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
    46dc:	8c13      	ldrh	r3, [r2, #32]
    46de:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    46e0:	2b00      	cmp	r3, #0
    46e2:	d1fb      	bne.n	46dc <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    46e4:	7e13      	ldrb	r3, [r2, #24]
    46e6:	2102      	movs	r1, #2
    46e8:	430b      	orrs	r3, r1
    46ea:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    46ec:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    46ee:	8c13      	ldrh	r3, [r2, #32]
    46f0:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    46f2:	2b00      	cmp	r3, #0
    46f4:	d1fb      	bne.n	46ee <ADC_Handler+0x52>
    46f6:	e005      	b.n	4704 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    46f8:	2301      	movs	r3, #1
    46fa:	6822      	ldr	r2, [r4, #0]
    46fc:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
    46fe:	7f23      	ldrb	r3, [r4, #28]
    4700:	2b05      	cmp	r3, #5
    4702:	d016      	beq.n	4732 <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
    4704:	076b      	lsls	r3, r5, #29
    4706:	d508      	bpl.n	471a <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    4708:	2304      	movs	r3, #4
    470a:	6822      	ldr	r2, [r4, #0]
    470c:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    470e:	7ee3      	ldrb	r3, [r4, #27]
    4710:	079b      	lsls	r3, r3, #30
    4712:	d502      	bpl.n	471a <ADC_Handler+0x7e>
    4714:	7ea3      	ldrb	r3, [r4, #26]
    4716:	079b      	lsls	r3, r3, #30
    4718:	d417      	bmi.n	474a <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    471a:	07ab      	lsls	r3, r5, #30
    471c:	d508      	bpl.n	4730 <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    471e:	2302      	movs	r3, #2
    4720:	6822      	ldr	r2, [r4, #0]
    4722:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    4724:	7ee3      	ldrb	r3, [r4, #27]
    4726:	075b      	lsls	r3, r3, #29
    4728:	d502      	bpl.n	4730 <ADC_Handler+0x94>
    472a:	7ea3      	ldrb	r3, [r4, #26]
    472c:	075b      	lsls	r3, r3, #29
    472e:	d410      	bmi.n	4752 <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    4730:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    4732:	2300      	movs	r3, #0
    4734:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    4736:	7ee3      	ldrb	r3, [r4, #27]
    4738:	07db      	lsls	r3, r3, #31
    473a:	d5e3      	bpl.n	4704 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    473c:	7ea3      	ldrb	r3, [r4, #26]
    473e:	07db      	lsls	r3, r3, #31
    4740:	d5e0      	bpl.n	4704 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    4742:	0020      	movs	r0, r4
    4744:	68a3      	ldr	r3, [r4, #8]
    4746:	4798      	blx	r3
    4748:	e7dc      	b.n	4704 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    474a:	0020      	movs	r0, r4
    474c:	68e3      	ldr	r3, [r4, #12]
    474e:	4798      	blx	r3
    4750:	e7e3      	b.n	471a <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    4752:	6923      	ldr	r3, [r4, #16]
    4754:	0020      	movs	r0, r4
    4756:	4798      	blx	r3
}
    4758:	e7ea      	b.n	4730 <ADC_Handler+0x94>
    475a:	46c0      	nop			; (mov r8, r8)
    475c:	200021ec 	.word	0x200021ec

00004760 <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    4760:	2301      	movs	r3, #1
    4762:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    4764:	2300      	movs	r3, #0
    4766:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    4768:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    476a:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    476c:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    476e:	220f      	movs	r2, #15
    4770:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    4772:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    4774:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    4776:	7203      	strb	r3, [r0, #8]
}
    4778:	4770      	bx	lr

0000477a <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    477a:	6802      	ldr	r2, [r0, #0]
    477c:	6813      	ldr	r3, [r2, #0]
    477e:	2102      	movs	r1, #2
    4780:	430b      	orrs	r3, r1
    4782:	6013      	str	r3, [r2, #0]

}
    4784:	4770      	bx	lr

00004786 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    4786:	2303      	movs	r3, #3
    4788:	6802      	ldr	r2, [r0, #0]
    478a:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    478c:	6802      	ldr	r2, [r0, #0]
    478e:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    4790:	6802      	ldr	r2, [r0, #0]
    4792:	6813      	ldr	r3, [r2, #0]
    4794:	2102      	movs	r1, #2
    4796:	438b      	bics	r3, r1
    4798:	6013      	str	r3, [r2, #0]
}
    479a:	4770      	bx	lr

0000479c <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    479c:	b570      	push	{r4, r5, r6, lr}
    479e:	0004      	movs	r4, r0
    47a0:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    47a2:	78d3      	ldrb	r3, [r2, #3]
    47a4:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    47a6:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    47a8:	7853      	ldrb	r3, [r2, #1]
    47aa:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    47ac:	7913      	ldrb	r3, [r2, #4]
    47ae:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    47b0:	7813      	ldrb	r3, [r2, #0]
    47b2:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    47b4:	7891      	ldrb	r1, [r2, #2]
    47b6:	02c9      	lsls	r1, r1, #11
    47b8:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    47ba:	7851      	ldrb	r1, [r2, #1]
    47bc:	0209      	lsls	r1, r1, #8
    47be:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    47c0:	78d1      	ldrb	r1, [r2, #3]
    47c2:	0089      	lsls	r1, r1, #2
    47c4:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    47c6:	7911      	ldrb	r1, [r2, #4]
    47c8:	0149      	lsls	r1, r1, #5
    47ca:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    47cc:	7991      	ldrb	r1, [r2, #6]
    47ce:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    47d0:	79d0      	ldrb	r0, [r2, #7]
    47d2:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    47d4:	4301      	orrs	r1, r0
    47d6:	7a10      	ldrb	r0, [r2, #8]
    47d8:	0300      	lsls	r0, r0, #12
    47da:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    47dc:	7952      	ldrb	r2, [r2, #5]
    47de:	0412      	lsls	r2, r2, #16
    47e0:	20f0      	movs	r0, #240	; 0xf0
    47e2:	0300      	lsls	r0, r0, #12
    47e4:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    47e6:	430a      	orrs	r2, r1
    47e8:	4313      	orrs	r3, r2
    47ea:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    47ec:	682b      	ldr	r3, [r5, #0]
    47ee:	079b      	lsls	r3, r3, #30
    47f0:	d401      	bmi.n	47f6 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    47f2:	602e      	str	r6, [r5, #0]
	}
}
    47f4:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    47f6:	0020      	movs	r0, r4
    47f8:	4b03      	ldr	r3, [pc, #12]	; (4808 <aes_set_config+0x6c>)
    47fa:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    47fc:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    47fe:	0020      	movs	r0, r4
    4800:	4b02      	ldr	r3, [pc, #8]	; (480c <aes_set_config+0x70>)
    4802:	4798      	blx	r3
    4804:	e7f6      	b.n	47f4 <aes_set_config+0x58>
    4806:	46c0      	nop			; (mov r8, r8)
    4808:	00004787 	.word	0x00004787
    480c:	0000477b 	.word	0x0000477b

00004810 <aes_init>:
{
    4810:	b570      	push	{r4, r5, r6, lr}
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
    4812:	4c05      	ldr	r4, [pc, #20]	; (4828 <aes_init+0x18>)
    4814:	69e5      	ldr	r5, [r4, #28]
    4816:	2380      	movs	r3, #128	; 0x80
    4818:	019b      	lsls	r3, r3, #6
    481a:	432b      	orrs	r3, r5
    481c:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    481e:	2301      	movs	r3, #1
    4820:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    4822:	4b02      	ldr	r3, [pc, #8]	; (482c <aes_init+0x1c>)
    4824:	4798      	blx	r3
}
    4826:	bd70      	pop	{r4, r5, r6, pc}
    4828:	40000400 	.word	0x40000400
    482c:	0000479d 	.word	0x0000479d

00004830 <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    4830:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    4832:	7943      	ldrb	r3, [r0, #5]
    4834:	2b01      	cmp	r3, #1
    4836:	d005      	beq.n	4844 <aes_write_key+0x14>
    4838:	2b00      	cmp	r3, #0
    483a:	d010      	beq.n	485e <aes_write_key+0x2e>
    483c:	2b02      	cmp	r3, #2
    483e:	d10d      	bne.n	485c <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    4840:	2508      	movs	r5, #8
    4842:	e000      	b.n	4846 <aes_write_key+0x16>
		key_length = 6;
    4844:	2506      	movs	r5, #6
{
    4846:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    4848:	c910      	ldmia	r1!, {r4}
    484a:	1c9a      	adds	r2, r3, #2
    484c:	0092      	lsls	r2, r2, #2
    484e:	6806      	ldr	r6, [r0, #0]
    4850:	46b4      	mov	ip, r6
    4852:	4462      	add	r2, ip
    4854:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    4856:	3301      	adds	r3, #1
    4858:	42ab      	cmp	r3, r5
    485a:	d3f5      	bcc.n	4848 <aes_write_key+0x18>
		key++;
	}
}
    485c:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    485e:	2504      	movs	r5, #4
    4860:	e7f1      	b.n	4846 <aes_write_key+0x16>
	...

00004864 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    4864:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    4866:	2300      	movs	r3, #0
    4868:	6802      	ldr	r2, [r0, #0]
    486a:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    486c:	4b0f      	ldr	r3, [pc, #60]	; (48ac <aes_write_input_data+0x48>)
    486e:	6842      	ldr	r2, [r0, #4]
    4870:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    4872:	4a0f      	ldr	r2, [pc, #60]	; (48b0 <aes_write_input_data+0x4c>)
    4874:	4293      	cmp	r3, r2
    4876:	d00a      	beq.n	488e <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    4878:	7903      	ldrb	r3, [r0, #4]
    487a:	2b03      	cmp	r3, #3
    487c:	d00e      	beq.n	489c <aes_write_input_data+0x38>
    487e:	000c      	movs	r4, r1
    4880:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    4882:	6803      	ldr	r3, [r0, #0]
    4884:	c904      	ldmia	r1!, {r2}
    4886:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    4888:	428c      	cmp	r4, r1
    488a:	d1fa      	bne.n	4882 <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    488c:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    488e:	6803      	ldr	r3, [r0, #0]
    4890:	680a      	ldr	r2, [r1, #0]
    4892:	639a      	str	r2, [r3, #56]	; 0x38
    4894:	6803      	ldr	r3, [r0, #0]
    4896:	684a      	ldr	r2, [r1, #4]
    4898:	639a      	str	r2, [r3, #56]	; 0x38
    489a:	e7f7      	b.n	488c <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    489c:	7983      	ldrb	r3, [r0, #6]
    489e:	3b02      	subs	r3, #2
    48a0:	2b01      	cmp	r3, #1
    48a2:	d8ec      	bhi.n	487e <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    48a4:	6803      	ldr	r3, [r0, #0]
    48a6:	680a      	ldr	r2, [r1, #0]
    48a8:	639a      	str	r2, [r3, #56]	; 0x38
    48aa:	e7ef      	b.n	488c <aes_write_input_data+0x28>
    48ac:	00ff00ff 	.word	0x00ff00ff
    48b0:	00010003 	.word	0x00010003

000048b4 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    48b4:	2300      	movs	r3, #0
    48b6:	6802      	ldr	r2, [r0, #0]
    48b8:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    48ba:	4b10      	ldr	r3, [pc, #64]	; (48fc <aes_read_output_data+0x48>)
    48bc:	6842      	ldr	r2, [r0, #4]
    48be:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    48c0:	4a0f      	ldr	r2, [pc, #60]	; (4900 <aes_read_output_data+0x4c>)
    48c2:	4293      	cmp	r3, r2
    48c4:	d00a      	beq.n	48dc <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    48c6:	7903      	ldrb	r3, [r0, #4]
    48c8:	2b03      	cmp	r3, #3
    48ca:	d00e      	beq.n	48ea <aes_read_output_data+0x36>
    48cc:	000a      	movs	r2, r1
    48ce:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    48d0:	6803      	ldr	r3, [r0, #0]
    48d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    48d4:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    48d6:	428a      	cmp	r2, r1
    48d8:	d1fa      	bne.n	48d0 <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    48da:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    48dc:	6803      	ldr	r3, [r0, #0]
    48de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    48e0:	600b      	str	r3, [r1, #0]
    48e2:	6803      	ldr	r3, [r0, #0]
    48e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    48e6:	604b      	str	r3, [r1, #4]
    48e8:	e7f7      	b.n	48da <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    48ea:	7983      	ldrb	r3, [r0, #6]
    48ec:	3b02      	subs	r3, #2
    48ee:	2b01      	cmp	r3, #1
    48f0:	d8ec      	bhi.n	48cc <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    48f2:	6803      	ldr	r3, [r0, #0]
    48f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    48f6:	600b      	str	r3, [r1, #0]
    48f8:	e7ef      	b.n	48da <aes_read_output_data+0x26>
    48fa:	46c0      	nop			; (mov r8, r8)
    48fc:	00ff00ff 	.word	0x00ff00ff
    4900:	00010003 	.word	0x00010003

00004904 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4904:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    4906:	2a00      	cmp	r2, #0
    4908:	d001      	beq.n	490e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    490a:	0018      	movs	r0, r3
    490c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    490e:	008b      	lsls	r3, r1, #2
    4910:	4a06      	ldr	r2, [pc, #24]	; (492c <extint_register_callback+0x28>)
    4912:	589b      	ldr	r3, [r3, r2]
    4914:	2b00      	cmp	r3, #0
    4916:	d003      	beq.n	4920 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    4918:	4283      	cmp	r3, r0
    491a:	d005      	beq.n	4928 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    491c:	231d      	movs	r3, #29
    491e:	e7f4      	b.n	490a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    4920:	0089      	lsls	r1, r1, #2
    4922:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    4924:	2300      	movs	r3, #0
    4926:	e7f0      	b.n	490a <extint_register_callback+0x6>
		return STATUS_OK;
    4928:	2300      	movs	r3, #0
    492a:	e7ee      	b.n	490a <extint_register_callback+0x6>
    492c:	200021f4 	.word	0x200021f4

00004930 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4930:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    4932:	2900      	cmp	r1, #0
    4934:	d001      	beq.n	493a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    4936:	0018      	movs	r0, r3
    4938:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    493a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    493c:	281f      	cmp	r0, #31
    493e:	d800      	bhi.n	4942 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    4940:	4a02      	ldr	r2, [pc, #8]	; (494c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    4942:	2301      	movs	r3, #1
    4944:	4083      	lsls	r3, r0
    4946:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    4948:	2300      	movs	r3, #0
    494a:	e7f4      	b.n	4936 <extint_chan_enable_callback+0x6>
    494c:	40002400 	.word	0x40002400

00004950 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    4950:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4952:	2200      	movs	r2, #0
    4954:	4b10      	ldr	r3, [pc, #64]	; (4998 <EIC_Handler+0x48>)
    4956:	701a      	strb	r2, [r3, #0]
    4958:	2300      	movs	r3, #0
    495a:	4910      	ldr	r1, [pc, #64]	; (499c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    495c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    495e:	4e10      	ldr	r6, [pc, #64]	; (49a0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    4960:	4c0d      	ldr	r4, [pc, #52]	; (4998 <EIC_Handler+0x48>)
    4962:	e00a      	b.n	497a <EIC_Handler+0x2a>
		return eics[eic_index];
    4964:	490d      	ldr	r1, [pc, #52]	; (499c <EIC_Handler+0x4c>)
    4966:	e008      	b.n	497a <EIC_Handler+0x2a>
    4968:	7823      	ldrb	r3, [r4, #0]
    496a:	3301      	adds	r3, #1
    496c:	b2db      	uxtb	r3, r3
    496e:	7023      	strb	r3, [r4, #0]
    4970:	2b0f      	cmp	r3, #15
    4972:	d810      	bhi.n	4996 <EIC_Handler+0x46>
		return NULL;
    4974:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4976:	2b1f      	cmp	r3, #31
    4978:	d9f4      	bls.n	4964 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    497a:	0028      	movs	r0, r5
    497c:	4018      	ands	r0, r3
    497e:	2201      	movs	r2, #1
    4980:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    4982:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    4984:	4210      	tst	r0, r2
    4986:	d0ef      	beq.n	4968 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    4988:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    498a:	009b      	lsls	r3, r3, #2
    498c:	599b      	ldr	r3, [r3, r6]
    498e:	2b00      	cmp	r3, #0
    4990:	d0ea      	beq.n	4968 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    4992:	4798      	blx	r3
    4994:	e7e8      	b.n	4968 <EIC_Handler+0x18>
			}
		}
	}
}
    4996:	bd70      	pop	{r4, r5, r6, pc}
    4998:	200021f0 	.word	0x200021f0
    499c:	40002400 	.word	0x40002400
    49a0:	200021f4 	.word	0x200021f4

000049a4 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    49a4:	4a06      	ldr	r2, [pc, #24]	; (49c0 <_extint_enable+0x1c>)
    49a6:	7813      	ldrb	r3, [r2, #0]
    49a8:	2102      	movs	r1, #2
    49aa:	430b      	orrs	r3, r1
    49ac:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    49ae:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    49b0:	6853      	ldr	r3, [r2, #4]
    49b2:	4219      	tst	r1, r3
    49b4:	d1fc      	bne.n	49b0 <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    49b6:	6853      	ldr	r3, [r2, #4]
    49b8:	4218      	tst	r0, r3
    49ba:	d1f9      	bne.n	49b0 <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    49bc:	4770      	bx	lr
    49be:	46c0      	nop			; (mov r8, r8)
    49c0:	40002400 	.word	0x40002400

000049c4 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    49c4:	4a06      	ldr	r2, [pc, #24]	; (49e0 <_extint_disable+0x1c>)
    49c6:	7813      	ldrb	r3, [r2, #0]
    49c8:	2102      	movs	r1, #2
    49ca:	438b      	bics	r3, r1
    49cc:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    49ce:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    49d0:	6853      	ldr	r3, [r2, #4]
    49d2:	4219      	tst	r1, r3
    49d4:	d1fc      	bne.n	49d0 <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    49d6:	6853      	ldr	r3, [r2, #4]
    49d8:	4218      	tst	r0, r3
    49da:	d1f9      	bne.n	49d0 <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    49dc:	4770      	bx	lr
    49de:	46c0      	nop			; (mov r8, r8)
    49e0:	40002400 	.word	0x40002400

000049e4 <_system_extint_init>:
{
    49e4:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    49e6:	4a12      	ldr	r2, [pc, #72]	; (4a30 <_system_extint_init+0x4c>)
    49e8:	6951      	ldr	r1, [r2, #20]
    49ea:	2380      	movs	r3, #128	; 0x80
    49ec:	009b      	lsls	r3, r3, #2
    49ee:	430b      	orrs	r3, r1
    49f0:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    49f2:	4a10      	ldr	r2, [pc, #64]	; (4a34 <_system_extint_init+0x50>)
    49f4:	7813      	ldrb	r3, [r2, #0]
    49f6:	2101      	movs	r1, #1
    49f8:	430b      	orrs	r3, r1
    49fa:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    49fc:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    49fe:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    4a00:	6853      	ldr	r3, [r2, #4]
    4a02:	4219      	tst	r1, r3
    4a04:	d1fc      	bne.n	4a00 <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    4a06:	6853      	ldr	r3, [r2, #4]
    4a08:	4218      	tst	r0, r3
    4a0a:	d1f9      	bne.n	4a00 <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    4a0c:	4a09      	ldr	r2, [pc, #36]	; (4a34 <_system_extint_init+0x50>)
    4a0e:	7813      	ldrb	r3, [r2, #0]
    4a10:	2110      	movs	r1, #16
    4a12:	430b      	orrs	r3, r1
    4a14:	7013      	strb	r3, [r2, #0]
    4a16:	4b08      	ldr	r3, [pc, #32]	; (4a38 <_system_extint_init+0x54>)
    4a18:	0019      	movs	r1, r3
    4a1a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    4a1c:	2200      	movs	r2, #0
    4a1e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4a20:	428b      	cmp	r3, r1
    4a22:	d1fc      	bne.n	4a1e <_system_extint_init+0x3a>
    4a24:	2208      	movs	r2, #8
    4a26:	4b05      	ldr	r3, [pc, #20]	; (4a3c <_system_extint_init+0x58>)
    4a28:	601a      	str	r2, [r3, #0]
	_extint_enable();
    4a2a:	4b05      	ldr	r3, [pc, #20]	; (4a40 <_system_extint_init+0x5c>)
    4a2c:	4798      	blx	r3
}
    4a2e:	bd10      	pop	{r4, pc}
    4a30:	40000400 	.word	0x40000400
    4a34:	40002400 	.word	0x40002400
    4a38:	200021f4 	.word	0x200021f4
    4a3c:	e000e100 	.word	0xe000e100
    4a40:	000049a5 	.word	0x000049a5

00004a44 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    4a44:	2300      	movs	r3, #0
    4a46:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    4a48:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    4a4a:	2201      	movs	r2, #1
    4a4c:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    4a4e:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    4a50:	3201      	adds	r2, #1
    4a52:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    4a54:	7243      	strb	r3, [r0, #9]
}
    4a56:	4770      	bx	lr

00004a58 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    4a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a5a:	b083      	sub	sp, #12
    4a5c:	0005      	movs	r5, r0
    4a5e:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    4a60:	4b1c      	ldr	r3, [pc, #112]	; (4ad4 <extint_chan_set_config+0x7c>)
    4a62:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4a64:	a901      	add	r1, sp, #4
    4a66:	2300      	movs	r3, #0
    4a68:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    4a6a:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    4a6c:	7923      	ldrb	r3, [r4, #4]
    4a6e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    4a70:	7a23      	ldrb	r3, [r4, #8]
    4a72:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    4a74:	7820      	ldrb	r0, [r4, #0]
    4a76:	4b18      	ldr	r3, [pc, #96]	; (4ad8 <extint_chan_set_config+0x80>)
    4a78:	4798      	blx	r3
		return NULL;
    4a7a:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    4a7c:	2d1f      	cmp	r5, #31
    4a7e:	d800      	bhi.n	4a82 <extint_chan_set_config+0x2a>
		return eics[eic_index];
    4a80:	4916      	ldr	r1, [pc, #88]	; (4adc <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    4a82:	2207      	movs	r2, #7
    4a84:	402a      	ands	r2, r5
    4a86:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    4a88:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    4a8a:	7aa3      	ldrb	r3, [r4, #10]
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d001      	beq.n	4a94 <extint_chan_set_config+0x3c>
    4a90:	2308      	movs	r3, #8
    4a92:	431f      	orrs	r7, r3
    4a94:	08eb      	lsrs	r3, r5, #3
    4a96:	009b      	lsls	r3, r3, #2
    4a98:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    4a9a:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4a9c:	260f      	movs	r6, #15
    4a9e:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    4aa0:	43b0      	bics	r0, r6
			(new_config << config_pos);
    4aa2:	4097      	lsls	r7, r2
    4aa4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    4aa6:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    4aa8:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    4aaa:	7a63      	ldrb	r3, [r4, #9]
    4aac:	2b00      	cmp	r3, #0
    4aae:	d10b      	bne.n	4ac8 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    4ab0:	698a      	ldr	r2, [r1, #24]
    4ab2:	2301      	movs	r3, #1
    4ab4:	40ab      	lsls	r3, r5
    4ab6:	43db      	mvns	r3, r3
    4ab8:	041b      	lsls	r3, r3, #16
    4aba:	0c1b      	lsrs	r3, r3, #16
    4abc:	4013      	ands	r3, r2
    4abe:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    4ac0:	4b07      	ldr	r3, [pc, #28]	; (4ae0 <extint_chan_set_config+0x88>)
    4ac2:	4798      	blx	r3
}
    4ac4:	b003      	add	sp, #12
    4ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    4ac8:	698a      	ldr	r2, [r1, #24]
    4aca:	2301      	movs	r3, #1
    4acc:	40ab      	lsls	r3, r5
    4ace:	4313      	orrs	r3, r2
    4ad0:	618b      	str	r3, [r1, #24]
    4ad2:	e7f5      	b.n	4ac0 <extint_chan_set_config+0x68>
    4ad4:	000049c5 	.word	0x000049c5
    4ad8:	00007369 	.word	0x00007369
    4adc:	40002400 	.word	0x40002400
    4ae0:	000049a5 	.word	0x000049a5

00004ae4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    4ae4:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    4ae6:	4a1e      	ldr	r2, [pc, #120]	; (4b60 <nvm_set_config+0x7c>)
    4ae8:	6993      	ldr	r3, [r2, #24]
    4aea:	2104      	movs	r1, #4
    4aec:	430b      	orrs	r3, r1
    4aee:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4af0:	4b1c      	ldr	r3, [pc, #112]	; (4b64 <nvm_set_config+0x80>)
    4af2:	2220      	movs	r2, #32
    4af4:	32ff      	adds	r2, #255	; 0xff
    4af6:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    4af8:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    4afa:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    4afc:	07d2      	lsls	r2, r2, #31
    4afe:	d401      	bmi.n	4b04 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    4b00:	0018      	movs	r0, r3
    4b02:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4b04:	7803      	ldrb	r3, [r0, #0]
    4b06:	021b      	lsls	r3, r3, #8
    4b08:	22c0      	movs	r2, #192	; 0xc0
    4b0a:	0092      	lsls	r2, r2, #2
    4b0c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4b0e:	7841      	ldrb	r1, [r0, #1]
    4b10:	01c9      	lsls	r1, r1, #7
    4b12:	22ff      	movs	r2, #255	; 0xff
    4b14:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    4b16:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4b18:	7881      	ldrb	r1, [r0, #2]
    4b1a:	0049      	lsls	r1, r1, #1
    4b1c:	221e      	movs	r2, #30
    4b1e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    4b20:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4b22:	78c2      	ldrb	r2, [r0, #3]
    4b24:	0492      	lsls	r2, r2, #18
    4b26:	2180      	movs	r1, #128	; 0x80
    4b28:	02c9      	lsls	r1, r1, #11
    4b2a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    4b2c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    4b2e:	7902      	ldrb	r2, [r0, #4]
    4b30:	0412      	lsls	r2, r2, #16
    4b32:	21c0      	movs	r1, #192	; 0xc0
    4b34:	0289      	lsls	r1, r1, #10
    4b36:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    4b38:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    4b3a:	4a0a      	ldr	r2, [pc, #40]	; (4b64 <nvm_set_config+0x80>)
    4b3c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    4b3e:	6893      	ldr	r3, [r2, #8]
    4b40:	035b      	lsls	r3, r3, #13
    4b42:	0f5b      	lsrs	r3, r3, #29
    4b44:	4908      	ldr	r1, [pc, #32]	; (4b68 <nvm_set_config+0x84>)
    4b46:	2408      	movs	r4, #8
    4b48:	409c      	lsls	r4, r3
    4b4a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    4b4c:	6893      	ldr	r3, [r2, #8]
    4b4e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    4b50:	7843      	ldrb	r3, [r0, #1]
    4b52:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4b54:	8b13      	ldrh	r3, [r2, #24]
    4b56:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    4b58:	0fdb      	lsrs	r3, r3, #31
    4b5a:	011b      	lsls	r3, r3, #4
    4b5c:	e7d0      	b.n	4b00 <nvm_set_config+0x1c>
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	40000400 	.word	0x40000400
    4b64:	41004000 	.word	0x41004000
    4b68:	20000b60 	.word	0x20000b60

00004b6c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    4b6c:	b530      	push	{r4, r5, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    4b6e:	4a30      	ldr	r2, [pc, #192]	; (4c30 <nvm_execute_command+0xc4>)
    4b70:	8814      	ldrh	r4, [r2, #0]
    4b72:	8853      	ldrh	r3, [r2, #2]
    4b74:	4363      	muls	r3, r4
    4b76:	428b      	cmp	r3, r1
    4b78:	d20b      	bcs.n	4b92 <nvm_execute_command+0x26>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    4b7a:	2280      	movs	r2, #128	; 0x80
    4b7c:	0192      	lsls	r2, r2, #6
    4b7e:	4b2d      	ldr	r3, [pc, #180]	; (4c34 <nvm_execute_command+0xc8>)
    4b80:	18cb      	adds	r3, r1, r3
    4b82:	4293      	cmp	r3, r2
    4b84:	d905      	bls.n	4b92 <nvm_execute_command+0x26>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b86:	4c2c      	ldr	r4, [pc, #176]	; (4c38 <nvm_execute_command+0xcc>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4b88:	2318      	movs	r3, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4b8a:	4a2c      	ldr	r2, [pc, #176]	; (4c3c <nvm_execute_command+0xd0>)
    4b8c:	188a      	adds	r2, r1, r2
    4b8e:	42a2      	cmp	r2, r4
    4b90:	d80e      	bhi.n	4bb0 <nvm_execute_command+0x44>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    4b92:	4b2b      	ldr	r3, [pc, #172]	; (4c40 <nvm_execute_command+0xd4>)
    4b94:	685c      	ldr	r4, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    4b96:	2280      	movs	r2, #128	; 0x80
    4b98:	02d2      	lsls	r2, r2, #11
    4b9a:	4322      	orrs	r2, r4
    4b9c:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4b9e:	2220      	movs	r2, #32
    4ba0:	32ff      	adds	r2, #255	; 0xff
    4ba2:	831a      	strh	r2, [r3, #24]
    4ba4:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    4ba6:	07db      	lsls	r3, r3, #31
    4ba8:	d404      	bmi.n	4bb4 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    4baa:	4b25      	ldr	r3, [pc, #148]	; (4c40 <nvm_execute_command+0xd4>)
    4bac:	605c      	str	r4, [r3, #4]
		return STATUS_BUSY;
    4bae:	2305      	movs	r3, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    4bb0:	0018      	movs	r0, r3
    4bb2:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    4bb4:	2845      	cmp	r0, #69	; 0x45
    4bb6:	d829      	bhi.n	4c0c <nvm_execute_command+0xa0>
    4bb8:	0083      	lsls	r3, r0, #2
    4bba:	4a22      	ldr	r2, [pc, #136]	; (4c44 <nvm_execute_command+0xd8>)
    4bbc:	58d3      	ldr	r3, [r2, r3]
    4bbe:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    4bc0:	4b1f      	ldr	r3, [pc, #124]	; (4c40 <nvm_execute_command+0xd4>)
    4bc2:	8b1b      	ldrh	r3, [r3, #24]
    4bc4:	05db      	lsls	r3, r3, #23
    4bc6:	d503      	bpl.n	4bd0 <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    4bc8:	4b1d      	ldr	r3, [pc, #116]	; (4c40 <nvm_execute_command+0xd4>)
    4bca:	605c      	str	r4, [r3, #4]
				return STATUS_ERR_IO;
    4bcc:	2310      	movs	r3, #16
    4bce:	e7ef      	b.n	4bb0 <nvm_execute_command+0x44>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4bd0:	0889      	lsrs	r1, r1, #2
    4bd2:	0049      	lsls	r1, r1, #1
    4bd4:	4b1a      	ldr	r3, [pc, #104]	; (4c40 <nvm_execute_command+0xd4>)
    4bd6:	61d9      	str	r1, [r3, #28]
			break;
    4bd8:	e003      	b.n	4be2 <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    4bda:	0889      	lsrs	r1, r1, #2
    4bdc:	0049      	lsls	r1, r1, #1
    4bde:	4b18      	ldr	r3, [pc, #96]	; (4c40 <nvm_execute_command+0xd4>)
    4be0:	61d9      	str	r1, [r3, #28]
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    4be2:	23fd      	movs	r3, #253	; 0xfd
    4be4:	0005      	movs	r5, r0
    4be6:	3d1a      	subs	r5, #26
    4be8:	401d      	ands	r5, r3
    4bea:	d013      	beq.n	4c14 <nvm_execute_command+0xa8>
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    4bec:	23a5      	movs	r3, #165	; 0xa5
    4bee:	021b      	lsls	r3, r3, #8
    4bf0:	4318      	orrs	r0, r3
    4bf2:	4b13      	ldr	r3, [pc, #76]	; (4c40 <nvm_execute_command+0xd4>)
    4bf4:	8018      	strh	r0, [r3, #0]
    4bf6:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    4bf8:	2201      	movs	r2, #1
    4bfa:	7d0b      	ldrb	r3, [r1, #20]
    4bfc:	4213      	tst	r3, r2
    4bfe:	d0fc      	beq.n	4bfa <nvm_execute_command+0x8e>
	if( command == NVM_COMMAND_RWWEE_ERASE_ROW || command == NVM_COMMAND_RWWEE_WRITE_PAGE)
    4c00:	2d00      	cmp	r5, #0
    4c02:	d00f      	beq.n	4c24 <nvm_execute_command+0xb8>
	nvm_module->CTRLB.reg = ctrlb_bak;
    4c04:	4b0e      	ldr	r3, [pc, #56]	; (4c40 <nvm_execute_command+0xd4>)
    4c06:	605c      	str	r4, [r3, #4]
	return STATUS_OK;
    4c08:	2300      	movs	r3, #0
    4c0a:	e7d1      	b.n	4bb0 <nvm_execute_command+0x44>
			nvm_module->CTRLB.reg = ctrlb_bak;
    4c0c:	4b0c      	ldr	r3, [pc, #48]	; (4c40 <nvm_execute_command+0xd4>)
    4c0e:	605c      	str	r4, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    4c10:	2317      	movs	r3, #23
    4c12:	e7cd      	b.n	4bb0 <nvm_execute_command+0x44>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    4c14:	4b0a      	ldr	r3, [pc, #40]	; (4c40 <nvm_execute_command+0xd4>)
    4c16:	6859      	ldr	r1, [r3, #4]
    4c18:	2280      	movs	r2, #128	; 0x80
    4c1a:	02d2      	lsls	r2, r2, #11
    4c1c:	430a      	orrs	r2, r1
    4c1e:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    4c20:	685b      	ldr	r3, [r3, #4]
    4c22:	e7e3      	b.n	4bec <nvm_execute_command+0x80>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    4c24:	4a06      	ldr	r2, [pc, #24]	; (4c40 <nvm_execute_command+0xd4>)
    4c26:	6853      	ldr	r3, [r2, #4]
    4c28:	4907      	ldr	r1, [pc, #28]	; (4c48 <nvm_execute_command+0xdc>)
    4c2a:	400b      	ands	r3, r1
    4c2c:	6053      	str	r3, [r2, #4]
    4c2e:	e7e9      	b.n	4c04 <nvm_execute_command+0x98>
    4c30:	20000b60 	.word	0x20000b60
    4c34:	ff7fc000 	.word	0xff7fc000
    4c38:	00001fff 	.word	0x00001fff
    4c3c:	ffc00000 	.word	0xffc00000
    4c40:	41004000 	.word	0x41004000
    4c44:	0001fa0c 	.word	0x0001fa0c
    4c48:	fffbffff 	.word	0xfffbffff

00004c4c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    4c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4c4e:	4b2f      	ldr	r3, [pc, #188]	; (4d0c <nvm_write_buffer+0xc0>)
    4c50:	881c      	ldrh	r4, [r3, #0]
    4c52:	885b      	ldrh	r3, [r3, #2]
    4c54:	4363      	muls	r3, r4
	if (destination_address >
    4c56:	4283      	cmp	r3, r0
    4c58:	d207      	bcs.n	4c6a <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c5a:	4e2d      	ldr	r6, [pc, #180]	; (4d10 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4c5c:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4c5e:	4b2d      	ldr	r3, [pc, #180]	; (4d14 <nvm_write_buffer+0xc8>)
    4c60:	18c3      	adds	r3, r0, r3
    4c62:	42b3      	cmp	r3, r6
    4c64:	d806      	bhi.n	4c74 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    4c66:	2601      	movs	r6, #1
    4c68:	e000      	b.n	4c6c <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    4c6a:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4c6c:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4c6e:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    4c70:	4218      	tst	r0, r3
    4c72:	d001      	beq.n	4c78 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    4c74:	0028      	movs	r0, r5
    4c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    4c78:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4c7a:	4294      	cmp	r4, r2
    4c7c:	d3fa      	bcc.n	4c74 <nvm_write_buffer+0x28>
    4c7e:	4b26      	ldr	r3, [pc, #152]	; (4d18 <nvm_write_buffer+0xcc>)
    4c80:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4c82:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4c84:	07db      	lsls	r3, r3, #31
    4c86:	d5f5      	bpl.n	4c74 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    4c88:	4c24      	ldr	r4, [pc, #144]	; (4d1c <nvm_write_buffer+0xd0>)
    4c8a:	4b23      	ldr	r3, [pc, #140]	; (4d18 <nvm_write_buffer+0xcc>)
    4c8c:	801c      	strh	r4, [r3, #0]
    4c8e:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    4c90:	2401      	movs	r4, #1
    4c92:	7d2b      	ldrb	r3, [r5, #20]
    4c94:	4223      	tst	r3, r4
    4c96:	d0fc      	beq.n	4c92 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4c98:	2420      	movs	r4, #32
    4c9a:	34ff      	adds	r4, #255	; 0xff
    4c9c:	4b1e      	ldr	r3, [pc, #120]	; (4d18 <nvm_write_buffer+0xcc>)
    4c9e:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4ca0:	2a00      	cmp	r2, #0
    4ca2:	d02c      	beq.n	4cfe <nvm_write_buffer+0xb2>
    4ca4:	2301      	movs	r3, #1
    4ca6:	0005      	movs	r5, r0
    4ca8:	439d      	bics	r5, r3
    4caa:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4cac:	1e54      	subs	r4, r2, #1
    4cae:	46a4      	mov	ip, r4
    4cb0:	e009      	b.n	4cc6 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    4cb2:	18cf      	adds	r7, r1, r3
    4cb4:	787f      	ldrb	r7, [r7, #1]
    4cb6:	023f      	lsls	r7, r7, #8
    4cb8:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    4cba:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    4cbc:	3302      	adds	r3, #2
    4cbe:	b29b      	uxth	r3, r3
    4cc0:	3502      	adds	r5, #2
    4cc2:	429a      	cmp	r2, r3
    4cc4:	d904      	bls.n	4cd0 <nvm_write_buffer+0x84>
		data = buffer[i];
    4cc6:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    4cc8:	4563      	cmp	r3, ip
    4cca:	dbf2      	blt.n	4cb2 <nvm_write_buffer+0x66>
		data = buffer[i];
    4ccc:	b2a4      	uxth	r4, r4
    4cce:	e7f4      	b.n	4cba <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4cd0:	4b0e      	ldr	r3, [pc, #56]	; (4d0c <nvm_write_buffer+0xc0>)
    4cd2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4cd4:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d1cc      	bne.n	4c74 <nvm_write_buffer+0x28>
    4cda:	2a3f      	cmp	r2, #63	; 0x3f
    4cdc:	d8ca      	bhi.n	4c74 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    4cde:	2e00      	cmp	r6, #0
    4ce0:	d106      	bne.n	4cf0 <nvm_write_buffer+0xa4>
    4ce2:	2200      	movs	r2, #0
    4ce4:	0001      	movs	r1, r0
    4ce6:	2004      	movs	r0, #4
    4ce8:	4b0d      	ldr	r3, [pc, #52]	; (4d20 <nvm_write_buffer+0xd4>)
    4cea:	4798      	blx	r3
    4cec:	0005      	movs	r5, r0
    4cee:	e7c1      	b.n	4c74 <nvm_write_buffer+0x28>
    4cf0:	2200      	movs	r2, #0
    4cf2:	0001      	movs	r1, r0
    4cf4:	201c      	movs	r0, #28
    4cf6:	4b0a      	ldr	r3, [pc, #40]	; (4d20 <nvm_write_buffer+0xd4>)
    4cf8:	4798      	blx	r3
    4cfa:	0005      	movs	r5, r0
    4cfc:	e7ba      	b.n	4c74 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4cfe:	4b03      	ldr	r3, [pc, #12]	; (4d0c <nvm_write_buffer+0xc0>)
    4d00:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    4d02:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    4d04:	2b00      	cmp	r3, #0
    4d06:	d0ea      	beq.n	4cde <nvm_write_buffer+0x92>
    4d08:	e7b4      	b.n	4c74 <nvm_write_buffer+0x28>
    4d0a:	46c0      	nop			; (mov r8, r8)
    4d0c:	20000b60 	.word	0x20000b60
    4d10:	00001fff 	.word	0x00001fff
    4d14:	ffc00000 	.word	0xffc00000
    4d18:	41004000 	.word	0x41004000
    4d1c:	ffffa544 	.word	0xffffa544
    4d20:	00004b6d 	.word	0x00004b6d

00004d24 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    4d24:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4d26:	4b1b      	ldr	r3, [pc, #108]	; (4d94 <nvm_read_buffer+0x70>)
    4d28:	881c      	ldrh	r4, [r3, #0]
    4d2a:	885b      	ldrh	r3, [r3, #2]
    4d2c:	4363      	muls	r3, r4
	if (source_address >
    4d2e:	4283      	cmp	r3, r0
    4d30:	d205      	bcs.n	4d3e <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4d32:	4e19      	ldr	r6, [pc, #100]	; (4d98 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4d34:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4d36:	4b19      	ldr	r3, [pc, #100]	; (4d9c <nvm_read_buffer+0x78>)
    4d38:	18c3      	adds	r3, r0, r3
    4d3a:	42b3      	cmp	r3, r6
    4d3c:	d803      	bhi.n	4d46 <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    4d3e:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    4d40:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
    4d42:	4218      	tst	r0, r3
    4d44:	d001      	beq.n	4d4a <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    4d46:	0028      	movs	r0, r5
    4d48:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
    4d4a:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    4d4c:	4294      	cmp	r4, r2
    4d4e:	d3fa      	bcc.n	4d46 <nvm_read_buffer+0x22>
    4d50:	4b13      	ldr	r3, [pc, #76]	; (4da0 <nvm_read_buffer+0x7c>)
    4d52:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4d54:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    4d56:	07db      	lsls	r3, r3, #31
    4d58:	d5f5      	bpl.n	4d46 <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4d5a:	2420      	movs	r4, #32
    4d5c:	34ff      	adds	r4, #255	; 0xff
    4d5e:	4b10      	ldr	r3, [pc, #64]	; (4da0 <nvm_read_buffer+0x7c>)
    4d60:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    4d62:	2a00      	cmp	r2, #0
    4d64:	d014      	beq.n	4d90 <nvm_read_buffer+0x6c>
    4d66:	2301      	movs	r3, #1
    4d68:	4398      	bics	r0, r3
    4d6a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    4d6c:	1e56      	subs	r6, r2, #1
    4d6e:	e004      	b.n	4d7a <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
    4d70:	3302      	adds	r3, #2
    4d72:	b29b      	uxth	r3, r3
    4d74:	3002      	adds	r0, #2
    4d76:	429a      	cmp	r2, r3
    4d78:	d908      	bls.n	4d8c <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
    4d7a:	8804      	ldrh	r4, [r0, #0]
    4d7c:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    4d7e:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    4d80:	42b3      	cmp	r3, r6
    4d82:	daf5      	bge.n	4d70 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
    4d84:	18cd      	adds	r5, r1, r3
    4d86:	0a24      	lsrs	r4, r4, #8
    4d88:	706c      	strb	r4, [r5, #1]
    4d8a:	e7f1      	b.n	4d70 <nvm_read_buffer+0x4c>
	return STATUS_OK;
    4d8c:	2500      	movs	r5, #0
    4d8e:	e7da      	b.n	4d46 <nvm_read_buffer+0x22>
    4d90:	2500      	movs	r5, #0
    4d92:	e7d8      	b.n	4d46 <nvm_read_buffer+0x22>
    4d94:	20000b60 	.word	0x20000b60
    4d98:	00001fff 	.word	0x00001fff
    4d9c:	ffc00000 	.word	0xffc00000
    4da0:	41004000 	.word	0x41004000

00004da4 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    4da4:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    4da6:	4a22      	ldr	r2, [pc, #136]	; (4e30 <nvm_erase_row+0x8c>)
    4da8:	8813      	ldrh	r3, [r2, #0]
    4daa:	8852      	ldrh	r2, [r2, #2]
    4dac:	435a      	muls	r2, r3
	if (row_address >
    4dae:	4282      	cmp	r2, r0
    4db0:	d207      	bcs.n	4dc2 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4db2:	4c20      	ldr	r4, [pc, #128]	; (4e34 <nvm_erase_row+0x90>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    4db4:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    4db6:	4920      	ldr	r1, [pc, #128]	; (4e38 <nvm_erase_row+0x94>)
    4db8:	1841      	adds	r1, r0, r1
    4dba:	42a1      	cmp	r1, r4
    4dbc:	d807      	bhi.n	4dce <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    4dbe:	2401      	movs	r4, #1
    4dc0:	e000      	b.n	4dc4 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    4dc2:	2400      	movs	r4, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4dc4:	009b      	lsls	r3, r3, #2
    4dc6:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    4dc8:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    4dca:	4218      	tst	r0, r3
    4dcc:	d001      	beq.n	4dd2 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    4dce:	0010      	movs	r0, r2
    4dd0:	bd10      	pop	{r4, pc}
    4dd2:	4b1a      	ldr	r3, [pc, #104]	; (4e3c <nvm_erase_row+0x98>)
    4dd4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    4dd6:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    4dd8:	07db      	lsls	r3, r3, #31
    4dda:	d5f8      	bpl.n	4dce <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4ddc:	4b17      	ldr	r3, [pc, #92]	; (4e3c <nvm_erase_row+0x98>)
    4dde:	2220      	movs	r2, #32
    4de0:	32ff      	adds	r2, #255	; 0xff
    4de2:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    4de4:	0880      	lsrs	r0, r0, #2
    4de6:	0040      	lsls	r0, r0, #1
    4de8:	61d8      	str	r0, [r3, #28]
	if (is_rww_eeprom) {
    4dea:	2c00      	cmp	r4, #0
    4dec:	d01b      	beq.n	4e26 <nvm_erase_row+0x82>
		nvm_module->CTRLB.bit.CACHEDIS = 1;
    4dee:	6859      	ldr	r1, [r3, #4]
    4df0:	2280      	movs	r2, #128	; 0x80
    4df2:	02d2      	lsls	r2, r2, #11
    4df4:	430a      	orrs	r2, r1
    4df6:	605a      	str	r2, [r3, #4]
		nvm_module->CTRLB.reg;
    4df8:	685a      	ldr	r2, [r3, #4]
		nvm_module->CTRLA.reg = NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4dfa:	4a11      	ldr	r2, [pc, #68]	; (4e40 <nvm_erase_row+0x9c>)
    4dfc:	801a      	strh	r2, [r3, #0]
    4dfe:	490f      	ldr	r1, [pc, #60]	; (4e3c <nvm_erase_row+0x98>)
	while (!nvm_is_ready()) {
    4e00:	2201      	movs	r2, #1
    4e02:	7d0b      	ldrb	r3, [r1, #20]
    4e04:	4213      	tst	r3, r2
    4e06:	d0fc      	beq.n	4e02 <nvm_erase_row+0x5e>
	if (is_rww_eeprom) {
    4e08:	2c00      	cmp	r4, #0
    4e0a:	d004      	beq.n	4e16 <nvm_erase_row+0x72>
		nvm_module->CTRLB.bit.CACHEDIS = 0;
    4e0c:	4a0b      	ldr	r2, [pc, #44]	; (4e3c <nvm_erase_row+0x98>)
    4e0e:	6853      	ldr	r3, [r2, #4]
    4e10:	490c      	ldr	r1, [pc, #48]	; (4e44 <nvm_erase_row+0xa0>)
    4e12:	400b      	ands	r3, r1
    4e14:	6053      	str	r3, [r2, #4]
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    4e16:	4b09      	ldr	r3, [pc, #36]	; (4e3c <nvm_erase_row+0x98>)
    4e18:	8b1a      	ldrh	r2, [r3, #24]
    4e1a:	201c      	movs	r0, #28
    4e1c:	4002      	ands	r2, r0
	return STATUS_OK;
    4e1e:	1e50      	subs	r0, r2, #1
    4e20:	4182      	sbcs	r2, r0
    4e22:	0092      	lsls	r2, r2, #2
    4e24:	e7d3      	b.n	4dce <nvm_erase_row+0x2a>
		nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    4e26:	4a08      	ldr	r2, [pc, #32]	; (4e48 <nvm_erase_row+0xa4>)
    4e28:	4b04      	ldr	r3, [pc, #16]	; (4e3c <nvm_erase_row+0x98>)
    4e2a:	801a      	strh	r2, [r3, #0]
    4e2c:	e7e7      	b.n	4dfe <nvm_erase_row+0x5a>
    4e2e:	46c0      	nop			; (mov r8, r8)
    4e30:	20000b60 	.word	0x20000b60
    4e34:	00001fff 	.word	0x00001fff
    4e38:	ffc00000 	.word	0xffc00000
    4e3c:	41004000 	.word	0x41004000
    4e40:	ffffa51a 	.word	0xffffa51a
    4e44:	fffbffff 	.word	0xfffbffff
    4e48:	ffffa502 	.word	0xffffa502

00004e4c <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    4e4c:	4b15      	ldr	r3, [pc, #84]	; (4ea4 <nvm_get_parameters+0x58>)
    4e4e:	2220      	movs	r2, #32
    4e50:	32ff      	adds	r2, #255	; 0xff
    4e52:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    4e54:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    4e56:	0359      	lsls	r1, r3, #13
    4e58:	0f49      	lsrs	r1, r1, #29
    4e5a:	3a18      	subs	r2, #24
    4e5c:	3aff      	subs	r2, #255	; 0xff
    4e5e:	408a      	lsls	r2, r1
	parameters->page_size =
    4e60:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    4e62:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    4e64:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    4e66:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    4e68:	4b0f      	ldr	r3, [pc, #60]	; (4ea8 <nvm_get_parameters+0x5c>)
    4e6a:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    4e6c:	065b      	lsls	r3, r3, #25
    4e6e:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    4e70:	2b07      	cmp	r3, #7
    4e72:	d010      	beq.n	4e96 <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    4e74:	2206      	movs	r2, #6
    4e76:	1ad2      	subs	r2, r2, r3
    4e78:	2304      	movs	r3, #4
    4e7a:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    4e7c:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    4e7e:	4b0a      	ldr	r3, [pc, #40]	; (4ea8 <nvm_get_parameters+0x5c>)
    4e80:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    4e82:	2207      	movs	r2, #7
    4e84:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    4e86:	2b07      	cmp	r3, #7
    4e88:	d008      	beq.n	4e9c <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    4e8a:	2207      	movs	r2, #7
    4e8c:	1ad2      	subs	r2, r2, r3
    4e8e:	2304      	movs	r3, #4
    4e90:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    4e92:	6083      	str	r3, [r0, #8]
	}
}
    4e94:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    4e96:	2300      	movs	r3, #0
    4e98:	6043      	str	r3, [r0, #4]
    4e9a:	e7f0      	b.n	4e7e <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    4e9c:	2300      	movs	r3, #0
    4e9e:	6083      	str	r3, [r0, #8]
    4ea0:	e7f8      	b.n	4e94 <nvm_get_parameters+0x48>
    4ea2:	46c0      	nop			; (mov r8, r8)
    4ea4:	41004000 	.word	0x41004000
    4ea8:	00804000 	.word	0x00804000

00004eac <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    4eac:	b500      	push	{lr}
    4eae:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4eb0:	ab01      	add	r3, sp, #4
    4eb2:	2280      	movs	r2, #128	; 0x80
    4eb4:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    4eb6:	780a      	ldrb	r2, [r1, #0]
    4eb8:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    4eba:	784a      	ldrb	r2, [r1, #1]
    4ebc:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    4ebe:	788a      	ldrb	r2, [r1, #2]
    4ec0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    4ec2:	0019      	movs	r1, r3
    4ec4:	4b01      	ldr	r3, [pc, #4]	; (4ecc <port_pin_set_config+0x20>)
    4ec6:	4798      	blx	r3
}
    4ec8:	b003      	add	sp, #12
    4eca:	bd00      	pop	{pc}
    4ecc:	00007369 	.word	0x00007369

00004ed0 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4ed0:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    4ed2:	6918      	ldr	r0, [r3, #16]
    4ed4:	1e43      	subs	r3, r0, #1
    4ed6:	4198      	sbcs	r0, r3
    4ed8:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    4eda:	4770      	bx	lr

00004edc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    4edc:	b570      	push	{r4, r5, r6, lr}
    4ede:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4ee0:	6806      	ldr	r6, [r0, #0]
    4ee2:	2204      	movs	r2, #4
    4ee4:	4b08      	ldr	r3, [pc, #32]	; (4f08 <rtc_count_enable+0x2c>)
    4ee6:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    4ee8:	4d08      	ldr	r5, [pc, #32]	; (4f0c <rtc_count_enable+0x30>)
    4eea:	0020      	movs	r0, r4
    4eec:	47a8      	blx	r5
    4eee:	2800      	cmp	r0, #0
    4ef0:	d1fb      	bne.n	4eea <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    4ef2:	8833      	ldrh	r3, [r6, #0]
    4ef4:	2202      	movs	r2, #2
    4ef6:	4313      	orrs	r3, r2
    4ef8:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4efa:	4d04      	ldr	r5, [pc, #16]	; (4f0c <rtc_count_enable+0x30>)
    4efc:	0020      	movs	r0, r4
    4efe:	47a8      	blx	r5
    4f00:	2800      	cmp	r0, #0
    4f02:	d1fb      	bne.n	4efc <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    4f04:	bd70      	pop	{r4, r5, r6, pc}
    4f06:	46c0      	nop			; (mov r8, r8)
    4f08:	e000e100 	.word	0xe000e100
    4f0c:	00004ed1 	.word	0x00004ed1

00004f10 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    4f10:	b570      	push	{r4, r5, r6, lr}
    4f12:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f14:	6806      	ldr	r6, [r0, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4f16:	2104      	movs	r1, #4
    4f18:	2380      	movs	r3, #128	; 0x80
    4f1a:	4a0a      	ldr	r2, [pc, #40]	; (4f44 <rtc_count_disable+0x34>)
    4f1c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    4f1e:	4d0a      	ldr	r5, [pc, #40]	; (4f48 <rtc_count_disable+0x38>)
    4f20:	0020      	movs	r0, r4
    4f22:	47a8      	blx	r5
    4f24:	2800      	cmp	r0, #0
    4f26:	d1fb      	bne.n	4f20 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    4f28:	4b08      	ldr	r3, [pc, #32]	; (4f4c <rtc_count_disable+0x3c>)
    4f2a:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    4f2c:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    4f2e:	8833      	ldrh	r3, [r6, #0]
    4f30:	2202      	movs	r2, #2
    4f32:	4393      	bics	r3, r2
    4f34:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4f36:	4d04      	ldr	r5, [pc, #16]	; (4f48 <rtc_count_disable+0x38>)
    4f38:	0020      	movs	r0, r4
    4f3a:	47a8      	blx	r5
    4f3c:	2800      	cmp	r0, #0
    4f3e:	d1fb      	bne.n	4f38 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    4f40:	bd70      	pop	{r4, r5, r6, pc}
    4f42:	46c0      	nop			; (mov r8, r8)
    4f44:	e000e100 	.word	0xe000e100
    4f48:	00004ed1 	.word	0x00004ed1
    4f4c:	ffff81ff 	.word	0xffff81ff

00004f50 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    4f50:	b570      	push	{r4, r5, r6, lr}
    4f52:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f54:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    4f56:	4b0a      	ldr	r3, [pc, #40]	; (4f80 <rtc_count_reset+0x30>)
    4f58:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    4f5a:	2300      	movs	r3, #0
    4f5c:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    4f5e:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    4f60:	4d08      	ldr	r5, [pc, #32]	; (4f84 <rtc_count_reset+0x34>)
    4f62:	0020      	movs	r0, r4
    4f64:	47a8      	blx	r5
    4f66:	2800      	cmp	r0, #0
    4f68:	d1fb      	bne.n	4f62 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    4f6a:	8833      	ldrh	r3, [r6, #0]
    4f6c:	2201      	movs	r2, #1
    4f6e:	4313      	orrs	r3, r2
    4f70:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    4f72:	4d04      	ldr	r5, [pc, #16]	; (4f84 <rtc_count_reset+0x34>)
    4f74:	0020      	movs	r0, r4
    4f76:	47a8      	blx	r5
    4f78:	2800      	cmp	r0, #0
    4f7a:	d1fb      	bne.n	4f74 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    4f7c:	bd70      	pop	{r4, r5, r6, pc}
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	00004f11 	.word	0x00004f11
    4f84:	00004ed1 	.word	0x00004ed1

00004f88 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    4f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f8a:	0004      	movs	r4, r0
    4f8c:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4f8e:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    4f90:	4d0c      	ldr	r5, [pc, #48]	; (4fc4 <rtc_count_set_count+0x3c>)
    4f92:	0020      	movs	r0, r4
    4f94:	47a8      	blx	r5
    4f96:	2800      	cmp	r0, #0
    4f98:	d1fb      	bne.n	4f92 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    4f9a:	7923      	ldrb	r3, [r4, #4]
    4f9c:	2b00      	cmp	r3, #0
    4f9e:	d009      	beq.n	4fb4 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4fa0:	2017      	movs	r0, #23
	switch(module->mode){
    4fa2:	2b01      	cmp	r3, #1
    4fa4:	d105      	bne.n	4fb2 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    4fa6:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    4fa8:	4d06      	ldr	r5, [pc, #24]	; (4fc4 <rtc_count_set_count+0x3c>)
    4faa:	0020      	movs	r0, r4
    4fac:	47a8      	blx	r5
    4fae:	2800      	cmp	r0, #0
    4fb0:	d1fb      	bne.n	4faa <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    4fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    4fb4:	4b04      	ldr	r3, [pc, #16]	; (4fc8 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    4fb6:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    4fb8:	429e      	cmp	r6, r3
    4fba:	d8fa      	bhi.n	4fb2 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    4fbc:	b2b6      	uxth	r6, r6
    4fbe:	833e      	strh	r6, [r7, #24]
			break;
    4fc0:	e7f2      	b.n	4fa8 <rtc_count_set_count+0x20>
    4fc2:	46c0      	nop			; (mov r8, r8)
    4fc4:	00004ed1 	.word	0x00004ed1
    4fc8:	0000ffff 	.word	0x0000ffff

00004fcc <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    4fcc:	b570      	push	{r4, r5, r6, lr}
    4fce:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    4fd0:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    4fd2:	4d08      	ldr	r5, [pc, #32]	; (4ff4 <rtc_count_get_count+0x28>)
    4fd4:	0020      	movs	r0, r4
    4fd6:	47a8      	blx	r5
    4fd8:	2800      	cmp	r0, #0
    4fda:	d1fb      	bne.n	4fd4 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    4fdc:	7923      	ldrb	r3, [r4, #4]
    4fde:	2b00      	cmp	r3, #0
    4fe0:	d004      	beq.n	4fec <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    4fe2:	2000      	movs	r0, #0
	switch (module->mode) {
    4fe4:	2b01      	cmp	r3, #1
    4fe6:	d100      	bne.n	4fea <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    4fe8:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    4fea:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    4fec:	8b30      	ldrh	r0, [r6, #24]
    4fee:	b280      	uxth	r0, r0
			break;
    4ff0:	e7fb      	b.n	4fea <rtc_count_get_count+0x1e>
    4ff2:	46c0      	nop			; (mov r8, r8)
    4ff4:	00004ed1 	.word	0x00004ed1

00004ff8 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    4ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ffa:	b083      	sub	sp, #12
    4ffc:	0004      	movs	r4, r0
    4ffe:	9101      	str	r1, [sp, #4]
    5000:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5002:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    5004:	4f13      	ldr	r7, [pc, #76]	; (5054 <rtc_count_set_compare+0x5c>)
    5006:	0020      	movs	r0, r4
    5008:	47b8      	blx	r7
    500a:	2800      	cmp	r0, #0
    500c:	d1fb      	bne.n	5006 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    500e:	7923      	ldrb	r3, [r4, #4]
    5010:	2b00      	cmp	r3, #0
    5012:	d00e      	beq.n	5032 <rtc_count_set_compare+0x3a>
    5014:	2b01      	cmp	r3, #1
    5016:	d119      	bne.n	504c <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    5018:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    501a:	2d01      	cmp	r5, #1
    501c:	d817      	bhi.n	504e <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    501e:	3508      	adds	r5, #8
    5020:	00ad      	lsls	r5, r5, #2
    5022:	9b01      	ldr	r3, [sp, #4]
    5024:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    5026:	4d0b      	ldr	r5, [pc, #44]	; (5054 <rtc_count_set_compare+0x5c>)
    5028:	0020      	movs	r0, r4
    502a:	47a8      	blx	r5
    502c:	2800      	cmp	r0, #0
    502e:	d1fb      	bne.n	5028 <rtc_count_set_compare+0x30>
    5030:	e00d      	b.n	504e <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    5032:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    5034:	2d02      	cmp	r5, #2
    5036:	d80a      	bhi.n	504e <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    5038:	4b07      	ldr	r3, [pc, #28]	; (5058 <rtc_count_set_compare+0x60>)
    503a:	9a01      	ldr	r2, [sp, #4]
    503c:	429a      	cmp	r2, r3
    503e:	d806      	bhi.n	504e <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    5040:	466b      	mov	r3, sp
    5042:	889b      	ldrh	r3, [r3, #4]
    5044:	3510      	adds	r5, #16
    5046:	006d      	lsls	r5, r5, #1
    5048:	53ab      	strh	r3, [r5, r6]
			break;
    504a:	e7ec      	b.n	5026 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    504c:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    504e:	b003      	add	sp, #12
    5050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5052:	46c0      	nop			; (mov r8, r8)
    5054:	00004ed1 	.word	0x00004ed1
    5058:	0000ffff 	.word	0x0000ffff

0000505c <rtc_count_init>:
{
    505c:	b570      	push	{r4, r5, r6, lr}
    505e:	0004      	movs	r4, r0
    5060:	0015      	movs	r5, r2
	module->hw = hw;
    5062:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    5064:	4a1f      	ldr	r2, [pc, #124]	; (50e4 <rtc_count_init+0x88>)
    5066:	6951      	ldr	r1, [r2, #20]
    5068:	2380      	movs	r3, #128	; 0x80
    506a:	005b      	lsls	r3, r3, #1
    506c:	430b      	orrs	r3, r1
    506e:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    5070:	2205      	movs	r2, #5
    5072:	4b1d      	ldr	r3, [pc, #116]	; (50e8 <rtc_count_init+0x8c>)
    5074:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    5076:	4b1d      	ldr	r3, [pc, #116]	; (50ec <rtc_count_init+0x90>)
    5078:	4798      	blx	r3
	module->mode                = config->mode;
    507a:	78ab      	ldrb	r3, [r5, #2]
    507c:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    507e:	4b1c      	ldr	r3, [pc, #112]	; (50f0 <rtc_count_init+0x94>)
    5080:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    5082:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    5084:	792b      	ldrb	r3, [r5, #4]
    5086:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    5088:	8829      	ldrh	r1, [r5, #0]
    508a:	430b      	orrs	r3, r1
    508c:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    508e:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    5090:	78ab      	ldrb	r3, [r5, #2]
    5092:	2b00      	cmp	r3, #0
    5094:	d013      	beq.n	50be <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    5096:	2017      	movs	r0, #23
	switch (config->mode) {
    5098:	2b01      	cmp	r3, #1
    509a:	d10f      	bne.n	50bc <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    509c:	8813      	ldrh	r3, [r2, #0]
    509e:	b29b      	uxth	r3, r3
    50a0:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    50a2:	78eb      	ldrb	r3, [r5, #3]
    50a4:	2b00      	cmp	r3, #0
    50a6:	d003      	beq.n	50b0 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    50a8:	8813      	ldrh	r3, [r2, #0]
    50aa:	2180      	movs	r1, #128	; 0x80
    50ac:	430b      	orrs	r3, r1
    50ae:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    50b0:	68a9      	ldr	r1, [r5, #8]
    50b2:	2200      	movs	r2, #0
    50b4:	0020      	movs	r0, r4
    50b6:	4b0f      	ldr	r3, [pc, #60]	; (50f4 <rtc_count_init+0x98>)
    50b8:	4798      	blx	r3
	return STATUS_OK;
    50ba:	2000      	movs	r0, #0
}
    50bc:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    50be:	8813      	ldrh	r3, [r2, #0]
    50c0:	2104      	movs	r1, #4
    50c2:	430b      	orrs	r3, r1
    50c4:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    50c6:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    50c8:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    50ca:	2b00      	cmp	r3, #0
    50cc:	d1f6      	bne.n	50bc <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    50ce:	2200      	movs	r2, #0
    50d0:	68a9      	ldr	r1, [r5, #8]
    50d2:	0020      	movs	r0, r4
    50d4:	4e07      	ldr	r6, [pc, #28]	; (50f4 <rtc_count_init+0x98>)
    50d6:	47b0      	blx	r6
    50d8:	68e9      	ldr	r1, [r5, #12]
    50da:	2201      	movs	r2, #1
    50dc:	0020      	movs	r0, r4
    50de:	47b0      	blx	r6
	return STATUS_OK;
    50e0:	2000      	movs	r0, #0
    50e2:	e7eb      	b.n	50bc <rtc_count_init+0x60>
    50e4:	40000400 	.word	0x40000400
    50e8:	40001000 	.word	0x40001000
    50ec:	00004f51 	.word	0x00004f51
    50f0:	20002234 	.word	0x20002234
    50f4:	00004ff9 	.word	0x00004ff9

000050f8 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    50f8:	2a0a      	cmp	r2, #10
    50fa:	d009      	beq.n	5110 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    50fc:	2a07      	cmp	r2, #7
    50fe:	d907      	bls.n	5110 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    5100:	7903      	ldrb	r3, [r0, #4]
    5102:	2b00      	cmp	r3, #0
    5104:	d010      	beq.n	5128 <rtc_count_register_callback+0x30>
    5106:	2b01      	cmp	r3, #1
    5108:	d112      	bne.n	5130 <rtc_count_register_callback+0x38>
    510a:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    510c:	2a09      	cmp	r2, #9
    510e:	d809      	bhi.n	5124 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    5110:	1c93      	adds	r3, r2, #2
    5112:	009b      	lsls	r3, r3, #2
    5114:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    5116:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    5118:	2101      	movs	r1, #1
    511a:	4091      	lsls	r1, r2
    511c:	430b      	orrs	r3, r1
    511e:	b29b      	uxth	r3, r3
    5120:	8683      	strh	r3, [r0, #52]	; 0x34
    5122:	2300      	movs	r3, #0
	}

	return status;
}
    5124:	0018      	movs	r0, r3
    5126:	4770      	bx	lr
    5128:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    512a:	2a0a      	cmp	r2, #10
    512c:	d8fa      	bhi.n	5124 <rtc_count_register_callback+0x2c>
    512e:	e7ef      	b.n	5110 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    5130:	2317      	movs	r3, #23
    5132:	e7f7      	b.n	5124 <rtc_count_register_callback+0x2c>

00005134 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    5134:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5136:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    5138:	290a      	cmp	r1, #10
    513a:	d011      	beq.n	5160 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    513c:	2907      	cmp	r1, #7
    513e:	d912      	bls.n	5166 <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    5140:	2380      	movs	r3, #128	; 0x80
    5142:	005b      	lsls	r3, r3, #1
    5144:	000c      	movs	r4, r1
    5146:	3c08      	subs	r4, #8
    5148:	40a3      	lsls	r3, r4
    514a:	24c0      	movs	r4, #192	; 0xc0
    514c:	00a4      	lsls	r4, r4, #2
    514e:	4023      	ands	r3, r4
    5150:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    5152:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    5154:	2201      	movs	r2, #1
    5156:	408a      	lsls	r2, r1
    5158:	4313      	orrs	r3, r2
    515a:	b29b      	uxth	r3, r3
    515c:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    515e:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    5160:	4b04      	ldr	r3, [pc, #16]	; (5174 <rtc_count_enable_callback+0x40>)
    5162:	8153      	strh	r3, [r2, #10]
    5164:	e7f5      	b.n	5152 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    5166:	2401      	movs	r4, #1
    5168:	408c      	lsls	r4, r1
    516a:	23ff      	movs	r3, #255	; 0xff
    516c:	4023      	ands	r3, r4
    516e:	8153      	strh	r3, [r2, #10]
    5170:	e7ef      	b.n	5152 <rtc_count_enable_callback+0x1e>
    5172:	46c0      	nop			; (mov r8, r8)
    5174:	ffff8000 	.word	0xffff8000

00005178 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    5178:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    517a:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    517c:	290a      	cmp	r1, #10
    517e:	d010      	beq.n	51a2 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    5180:	2907      	cmp	r1, #7
    5182:	d911      	bls.n	51a8 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    5184:	2380      	movs	r3, #128	; 0x80
    5186:	005b      	lsls	r3, r3, #1
    5188:	000c      	movs	r4, r1
    518a:	3c08      	subs	r4, #8
    518c:	40a3      	lsls	r3, r4
    518e:	24c0      	movs	r4, #192	; 0xc0
    5190:	00a4      	lsls	r4, r4, #2
    5192:	4023      	ands	r3, r4
    5194:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    5196:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    5198:	2201      	movs	r2, #1
    519a:	408a      	lsls	r2, r1
    519c:	4393      	bics	r3, r2
    519e:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    51a0:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    51a2:	4b04      	ldr	r3, [pc, #16]	; (51b4 <rtc_count_disable_callback+0x3c>)
    51a4:	8113      	strh	r3, [r2, #8]
    51a6:	e7f6      	b.n	5196 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    51a8:	2401      	movs	r4, #1
    51aa:	408c      	lsls	r4, r1
    51ac:	23ff      	movs	r3, #255	; 0xff
    51ae:	4023      	ands	r3, r4
    51b0:	8113      	strh	r3, [r2, #8]
    51b2:	e7f0      	b.n	5196 <rtc_count_disable_callback+0x1e>
    51b4:	ffff8000 	.word	0xffff8000

000051b8 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    51b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51ba:	46de      	mov	lr, fp
    51bc:	4657      	mov	r7, sl
    51be:	464e      	mov	r6, r9
    51c0:	4645      	mov	r5, r8
    51c2:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    51c4:	4b2b      	ldr	r3, [pc, #172]	; (5274 <RTC_Handler+0xbc>)
    51c6:	681b      	ldr	r3, [r3, #0]
    51c8:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    51ca:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    51cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    51ce:	4652      	mov	r2, sl
    51d0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    51d2:	401a      	ands	r2, r3
    51d4:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    51d6:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    51d8:	8973      	ldrh	r3, [r6, #10]
    51da:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    51dc:	b21a      	sxth	r2, r3
    51de:	2a00      	cmp	r2, #0
    51e0:	db08      	blt.n	51f4 <RTC_Handler+0x3c>
    51e2:	27ff      	movs	r7, #255	; 0xff
    51e4:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    51e6:	d02a      	beq.n	523e <RTC_Handler+0x86>
    51e8:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    51ea:	2301      	movs	r3, #1
    51ec:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    51ee:	33fe      	adds	r3, #254	; 0xfe
    51f0:	469b      	mov	fp, r3
    51f2:	e014      	b.n	521e <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    51f4:	4643      	mov	r3, r8
    51f6:	055b      	lsls	r3, r3, #21
    51f8:	d407      	bmi.n	520a <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    51fa:	4b1f      	ldr	r3, [pc, #124]	; (5278 <RTC_Handler+0xc0>)
    51fc:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    51fe:	bc3c      	pop	{r2, r3, r4, r5}
    5200:	4690      	mov	r8, r2
    5202:	4699      	mov	r9, r3
    5204:	46a2      	mov	sl, r4
    5206:	46ab      	mov	fp, r5
    5208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    520a:	4653      	mov	r3, sl
    520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    520e:	4798      	blx	r3
    5210:	e7f3      	b.n	51fa <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    5212:	465b      	mov	r3, fp
    5214:	401d      	ands	r5, r3
    5216:	81b5      	strh	r5, [r6, #12]
    5218:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    521a:	2c08      	cmp	r4, #8
    521c:	d0ef      	beq.n	51fe <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    521e:	0023      	movs	r3, r4
    5220:	464d      	mov	r5, r9
    5222:	40a5      	lsls	r5, r4
    5224:	422f      	tst	r7, r5
    5226:	d0f4      	beq.n	5212 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    5228:	4642      	mov	r2, r8
    522a:	4122      	asrs	r2, r4
    522c:	4649      	mov	r1, r9
    522e:	4211      	tst	r1, r2
    5230:	d0ef      	beq.n	5212 <RTC_Handler+0x5a>
				module->callbacks[i]();
    5232:	3302      	adds	r3, #2
    5234:	009b      	lsls	r3, r3, #2
    5236:	4652      	mov	r2, sl
    5238:	589b      	ldr	r3, [r3, r2]
    523a:	4798      	blx	r3
    523c:	e7e9      	b.n	5212 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    523e:	05da      	lsls	r2, r3, #23
    5240:	d50a      	bpl.n	5258 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    5242:	4643      	mov	r3, r8
    5244:	05db      	lsls	r3, r3, #23
    5246:	d403      	bmi.n	5250 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    5248:	2380      	movs	r3, #128	; 0x80
    524a:	005b      	lsls	r3, r3, #1
    524c:	81b3      	strh	r3, [r6, #12]
    524e:	e7d6      	b.n	51fe <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    5250:	4653      	mov	r3, sl
    5252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5254:	4798      	blx	r3
    5256:	e7f7      	b.n	5248 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    5258:	059b      	lsls	r3, r3, #22
    525a:	d5d0      	bpl.n	51fe <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    525c:	4643      	mov	r3, r8
    525e:	059b      	lsls	r3, r3, #22
    5260:	d403      	bmi.n	526a <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    5262:	2380      	movs	r3, #128	; 0x80
    5264:	009b      	lsls	r3, r3, #2
    5266:	81b3      	strh	r3, [r6, #12]
}
    5268:	e7c9      	b.n	51fe <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    526a:	4653      	mov	r3, sl
    526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    526e:	4798      	blx	r3
    5270:	e7f7      	b.n	5262 <RTC_Handler+0xaa>
    5272:	46c0      	nop			; (mov r8, r8)
    5274:	20002234 	.word	0x20002234
    5278:	ffff8000 	.word	0xffff8000

0000527c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    527c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    527e:	2207      	movs	r2, #7
    5280:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    5282:	421a      	tst	r2, r3
    5284:	d1fc      	bne.n	5280 <_i2c_master_wait_for_sync+0x4>
}
    5286:	4770      	bx	lr

00005288 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    5288:	b5f0      	push	{r4, r5, r6, r7, lr}
    528a:	46d6      	mov	lr, sl
    528c:	464f      	mov	r7, r9
    528e:	4646      	mov	r6, r8
    5290:	b5c0      	push	{r6, r7, lr}
    5292:	b08a      	sub	sp, #40	; 0x28
    5294:	0007      	movs	r7, r0
    5296:	000e      	movs	r6, r1
    5298:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    529a:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    529c:	0008      	movs	r0, r1
    529e:	4ba5      	ldr	r3, [pc, #660]	; (5534 <i2c_master_init+0x2ac>)
    52a0:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    52a2:	2805      	cmp	r0, #5
    52a4:	d100      	bne.n	52a8 <i2c_master_init+0x20>
    52a6:	e13d      	b.n	5524 <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    52a8:	0005      	movs	r5, r0
    52aa:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    52ac:	4aa2      	ldr	r2, [pc, #648]	; (5538 <i2c_master_init+0x2b0>)
    52ae:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    52b0:	2301      	movs	r3, #1
    52b2:	4083      	lsls	r3, r0
    52b4:	430b      	orrs	r3, r1
    52b6:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    52b8:	a909      	add	r1, sp, #36	; 0x24
    52ba:	7b23      	ldrb	r3, [r4, #12]
    52bc:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    52be:	b2ed      	uxtb	r5, r5
    52c0:	0028      	movs	r0, r5
    52c2:	4b9e      	ldr	r3, [pc, #632]	; (553c <i2c_master_init+0x2b4>)
    52c4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    52c6:	0028      	movs	r0, r5
    52c8:	4b9d      	ldr	r3, [pc, #628]	; (5540 <i2c_master_init+0x2b8>)
    52ca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    52cc:	7b20      	ldrb	r0, [r4, #12]
    52ce:	2100      	movs	r1, #0
    52d0:	4b9c      	ldr	r3, [pc, #624]	; (5544 <i2c_master_init+0x2bc>)
    52d2:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    52d4:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    52d6:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    52d8:	079b      	lsls	r3, r3, #30
    52da:	d505      	bpl.n	52e8 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    52dc:	b00a      	add	sp, #40	; 0x28
    52de:	bc1c      	pop	{r2, r3, r4}
    52e0:	4690      	mov	r8, r2
    52e2:	4699      	mov	r9, r3
    52e4:	46a2      	mov	sl, r4
    52e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    52e8:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    52ea:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    52ec:	07db      	lsls	r3, r3, #31
    52ee:	d4f5      	bmi.n	52dc <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    52f0:	6838      	ldr	r0, [r7, #0]
    52f2:	4b90      	ldr	r3, [pc, #576]	; (5534 <i2c_master_init+0x2ac>)
    52f4:	4699      	mov	r9, r3
    52f6:	4798      	blx	r3
    52f8:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    52fa:	4993      	ldr	r1, [pc, #588]	; (5548 <i2c_master_init+0x2c0>)
    52fc:	4b93      	ldr	r3, [pc, #588]	; (554c <i2c_master_init+0x2c4>)
    52fe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    5300:	00ad      	lsls	r5, r5, #2
    5302:	4b93      	ldr	r3, [pc, #588]	; (5550 <i2c_master_init+0x2c8>)
    5304:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    5306:	2300      	movs	r3, #0
    5308:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    530a:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    530c:	2500      	movs	r5, #0
    530e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    5310:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    5312:	2225      	movs	r2, #37	; 0x25
    5314:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    5316:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    5318:	3314      	adds	r3, #20
    531a:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    531c:	683b      	ldr	r3, [r7, #0]
    531e:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    5320:	0018      	movs	r0, r3
    5322:	47c8      	blx	r9
    5324:	4681      	mov	r9, r0
    5326:	2380      	movs	r3, #128	; 0x80
    5328:	aa08      	add	r2, sp, #32
    532a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    532c:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    532e:	2301      	movs	r3, #1
    5330:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    5332:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    5334:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    5336:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    5338:	2800      	cmp	r0, #0
    533a:	d100      	bne.n	533e <i2c_master_init+0xb6>
    533c:	e0af      	b.n	549e <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    533e:	ab08      	add	r3, sp, #32
    5340:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    5342:	2302      	movs	r3, #2
    5344:	aa08      	add	r2, sp, #32
    5346:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    5348:	0c00      	lsrs	r0, r0, #16
    534a:	b2c0      	uxtb	r0, r0
    534c:	0011      	movs	r1, r2
    534e:	4b81      	ldr	r3, [pc, #516]	; (5554 <i2c_master_init+0x2cc>)
    5350:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    5352:	2e00      	cmp	r6, #0
    5354:	d100      	bne.n	5358 <i2c_master_init+0xd0>
    5356:	e0a7      	b.n	54a8 <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    5358:	ab08      	add	r3, sp, #32
    535a:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    535c:	2302      	movs	r3, #2
    535e:	aa08      	add	r2, sp, #32
    5360:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    5362:	0c36      	lsrs	r6, r6, #16
    5364:	b2f0      	uxtb	r0, r6
    5366:	0011      	movs	r1, r2
    5368:	4b7a      	ldr	r3, [pc, #488]	; (5554 <i2c_master_init+0x2cc>)
    536a:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    536c:	8aa3      	ldrh	r3, [r4, #20]
    536e:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    5370:	8ae3      	ldrh	r3, [r4, #22]
    5372:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    5374:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    5376:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    5378:	2b00      	cmp	r3, #0
    537a:	d104      	bne.n	5386 <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    537c:	4b76      	ldr	r3, [pc, #472]	; (5558 <i2c_master_init+0x2d0>)
    537e:	789b      	ldrb	r3, [r3, #2]
    5380:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    5382:	0fdb      	lsrs	r3, r3, #31
    5384:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    5386:	68a1      	ldr	r1, [r4, #8]
    5388:	6923      	ldr	r3, [r4, #16]
    538a:	430b      	orrs	r3, r1
    538c:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    538e:	2224      	movs	r2, #36	; 0x24
    5390:	5ca2      	ldrb	r2, [r4, r2]
    5392:	2a00      	cmp	r2, #0
    5394:	d002      	beq.n	539c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    5396:	2280      	movs	r2, #128	; 0x80
    5398:	05d2      	lsls	r2, r2, #23
    539a:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    539c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    539e:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    53a0:	222c      	movs	r2, #44	; 0x2c
    53a2:	5ca2      	ldrb	r2, [r4, r2]
    53a4:	2a00      	cmp	r2, #0
    53a6:	d103      	bne.n	53b0 <i2c_master_init+0x128>
    53a8:	2280      	movs	r2, #128	; 0x80
    53aa:	0492      	lsls	r2, r2, #18
    53ac:	4291      	cmp	r1, r2
    53ae:	d102      	bne.n	53b6 <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    53b0:	2280      	movs	r2, #128	; 0x80
    53b2:	0512      	lsls	r2, r2, #20
    53b4:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    53b6:	222d      	movs	r2, #45	; 0x2d
    53b8:	5ca2      	ldrb	r2, [r4, r2]
    53ba:	2a00      	cmp	r2, #0
    53bc:	d002      	beq.n	53c4 <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    53be:	2280      	movs	r2, #128	; 0x80
    53c0:	0412      	lsls	r2, r2, #16
    53c2:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    53c4:	222e      	movs	r2, #46	; 0x2e
    53c6:	5ca2      	ldrb	r2, [r4, r2]
    53c8:	2a00      	cmp	r2, #0
    53ca:	d002      	beq.n	53d2 <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    53cc:	2280      	movs	r2, #128	; 0x80
    53ce:	03d2      	lsls	r2, r2, #15
    53d0:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    53d2:	4642      	mov	r2, r8
    53d4:	6812      	ldr	r2, [r2, #0]
    53d6:	4313      	orrs	r3, r2
    53d8:	4642      	mov	r2, r8
    53da:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    53dc:	2380      	movs	r3, #128	; 0x80
    53de:	005b      	lsls	r3, r3, #1
    53e0:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    53e2:	464d      	mov	r5, r9
    53e4:	3512      	adds	r5, #18
    53e6:	b2e8      	uxtb	r0, r5
    53e8:	4b5c      	ldr	r3, [pc, #368]	; (555c <i2c_master_init+0x2d4>)
    53ea:	4798      	blx	r3
    53ec:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    53ee:	23fa      	movs	r3, #250	; 0xfa
    53f0:	009b      	lsls	r3, r3, #2
    53f2:	6822      	ldr	r2, [r4, #0]
    53f4:	435a      	muls	r2, r3
    53f6:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    53f8:	6863      	ldr	r3, [r4, #4]
    53fa:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    53fc:	4d58      	ldr	r5, [pc, #352]	; (5560 <i2c_master_init+0x2d8>)
    53fe:	47a8      	blx	r5
    5400:	9000      	str	r0, [sp, #0]
    5402:	9101      	str	r1, [sp, #4]
    5404:	464b      	mov	r3, r9
    5406:	0058      	lsls	r0, r3, #1
    5408:	47a8      	blx	r5
    540a:	9002      	str	r0, [sp, #8]
    540c:	9103      	str	r1, [sp, #12]
    540e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    5410:	47a8      	blx	r5
    5412:	9004      	str	r0, [sp, #16]
    5414:	9105      	str	r1, [sp, #20]
    5416:	4f53      	ldr	r7, [pc, #332]	; (5564 <i2c_master_init+0x2dc>)
    5418:	4a53      	ldr	r2, [pc, #332]	; (5568 <i2c_master_init+0x2e0>)
    541a:	4b54      	ldr	r3, [pc, #336]	; (556c <i2c_master_init+0x2e4>)
    541c:	9800      	ldr	r0, [sp, #0]
    541e:	9901      	ldr	r1, [sp, #4]
    5420:	47b8      	blx	r7
    5422:	0002      	movs	r2, r0
    5424:	000b      	movs	r3, r1
    5426:	9804      	ldr	r0, [sp, #16]
    5428:	9905      	ldr	r1, [sp, #20]
    542a:	47b8      	blx	r7
    542c:	4e50      	ldr	r6, [pc, #320]	; (5570 <i2c_master_init+0x2e8>)
    542e:	2200      	movs	r2, #0
    5430:	4b50      	ldr	r3, [pc, #320]	; (5574 <i2c_master_init+0x2ec>)
    5432:	47b0      	blx	r6
    5434:	9004      	str	r0, [sp, #16]
    5436:	9105      	str	r1, [sp, #20]
    5438:	4648      	mov	r0, r9
    543a:	47a8      	blx	r5
    543c:	0002      	movs	r2, r0
    543e:	000b      	movs	r3, r1
    5440:	9804      	ldr	r0, [sp, #16]
    5442:	9905      	ldr	r1, [sp, #20]
    5444:	47b8      	blx	r7
    5446:	0002      	movs	r2, r0
    5448:	000b      	movs	r3, r1
    544a:	4d4b      	ldr	r5, [pc, #300]	; (5578 <i2c_master_init+0x2f0>)
    544c:	9800      	ldr	r0, [sp, #0]
    544e:	9901      	ldr	r1, [sp, #4]
    5450:	47a8      	blx	r5
    5452:	9a02      	ldr	r2, [sp, #8]
    5454:	9b03      	ldr	r3, [sp, #12]
    5456:	47b0      	blx	r6
    5458:	2200      	movs	r2, #0
    545a:	4b48      	ldr	r3, [pc, #288]	; (557c <i2c_master_init+0x2f4>)
    545c:	47a8      	blx	r5
    545e:	9a02      	ldr	r2, [sp, #8]
    5460:	9b03      	ldr	r3, [sp, #12]
    5462:	4d47      	ldr	r5, [pc, #284]	; (5580 <i2c_master_init+0x2f8>)
    5464:	47a8      	blx	r5
    5466:	4b47      	ldr	r3, [pc, #284]	; (5584 <i2c_master_init+0x2fc>)
    5468:	4798      	blx	r3
    546a:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    546c:	2380      	movs	r3, #128	; 0x80
    546e:	049b      	lsls	r3, r3, #18
    5470:	68a2      	ldr	r2, [r4, #8]
    5472:	429a      	cmp	r2, r3
    5474:	d01e      	beq.n	54b4 <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5476:	0003      	movs	r3, r0
    5478:	2040      	movs	r0, #64	; 0x40
    547a:	2dff      	cmp	r5, #255	; 0xff
    547c:	d900      	bls.n	5480 <i2c_master_init+0x1f8>
    547e:	e72d      	b.n	52dc <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    5480:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    5482:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5484:	25ff      	movs	r5, #255	; 0xff
    5486:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    5488:	0624      	lsls	r4, r4, #24
    548a:	4325      	orrs	r5, r4
    548c:	0400      	lsls	r0, r0, #16
    548e:	23ff      	movs	r3, #255	; 0xff
    5490:	041b      	lsls	r3, r3, #16
    5492:	4018      	ands	r0, r3
    5494:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    5496:	4643      	mov	r3, r8
    5498:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    549a:	2000      	movs	r0, #0
    549c:	e71e      	b.n	52dc <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    549e:	2100      	movs	r1, #0
    54a0:	4640      	mov	r0, r8
    54a2:	4b39      	ldr	r3, [pc, #228]	; (5588 <i2c_master_init+0x300>)
    54a4:	4798      	blx	r3
    54a6:	e74a      	b.n	533e <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    54a8:	2101      	movs	r1, #1
    54aa:	4640      	mov	r0, r8
    54ac:	4b36      	ldr	r3, [pc, #216]	; (5588 <i2c_master_init+0x300>)
    54ae:	4798      	blx	r3
    54b0:	0006      	movs	r6, r0
    54b2:	e751      	b.n	5358 <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    54b4:	26fa      	movs	r6, #250	; 0xfa
    54b6:	00b6      	lsls	r6, r6, #2
    54b8:	4653      	mov	r3, sl
    54ba:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    54bc:	9800      	ldr	r0, [sp, #0]
    54be:	9901      	ldr	r1, [sp, #4]
    54c0:	0002      	movs	r2, r0
    54c2:	000b      	movs	r3, r1
    54c4:	4c2a      	ldr	r4, [pc, #168]	; (5570 <i2c_master_init+0x2e8>)
    54c6:	47a0      	blx	r4
    54c8:	9000      	str	r0, [sp, #0]
    54ca:	9101      	str	r1, [sp, #4]
    54cc:	0030      	movs	r0, r6
    54ce:	4b24      	ldr	r3, [pc, #144]	; (5560 <i2c_master_init+0x2d8>)
    54d0:	4798      	blx	r3
    54d2:	2200      	movs	r2, #0
    54d4:	4b2d      	ldr	r3, [pc, #180]	; (558c <i2c_master_init+0x304>)
    54d6:	47b8      	blx	r7
    54d8:	0002      	movs	r2, r0
    54da:	000b      	movs	r3, r1
    54dc:	9800      	ldr	r0, [sp, #0]
    54de:	9901      	ldr	r1, [sp, #4]
    54e0:	4c27      	ldr	r4, [pc, #156]	; (5580 <i2c_master_init+0x2f8>)
    54e2:	47a0      	blx	r4
    54e4:	2200      	movs	r2, #0
    54e6:	4b25      	ldr	r3, [pc, #148]	; (557c <i2c_master_init+0x2f4>)
    54e8:	4c23      	ldr	r4, [pc, #140]	; (5578 <i2c_master_init+0x2f0>)
    54ea:	47a0      	blx	r4
    54ec:	4b25      	ldr	r3, [pc, #148]	; (5584 <i2c_master_init+0x2fc>)
    54ee:	4798      	blx	r3
    54f0:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    54f2:	d00c      	beq.n	550e <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    54f4:	0031      	movs	r1, r6
    54f6:	9807      	ldr	r0, [sp, #28]
    54f8:	4b25      	ldr	r3, [pc, #148]	; (5590 <i2c_master_init+0x308>)
    54fa:	4798      	blx	r3
    54fc:	3802      	subs	r0, #2
    54fe:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5500:	002b      	movs	r3, r5
    5502:	2dff      	cmp	r5, #255	; 0xff
    5504:	d80c      	bhi.n	5520 <i2c_master_init+0x298>
    5506:	28ff      	cmp	r0, #255	; 0xff
    5508:	d9bc      	bls.n	5484 <i2c_master_init+0x1fc>
    550a:	2040      	movs	r0, #64	; 0x40
    550c:	e6e6      	b.n	52dc <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    550e:	0071      	lsls	r1, r6, #1
    5510:	1e48      	subs	r0, r1, #1
    5512:	9b07      	ldr	r3, [sp, #28]
    5514:	469c      	mov	ip, r3
    5516:	4460      	add	r0, ip
    5518:	4b1d      	ldr	r3, [pc, #116]	; (5590 <i2c_master_init+0x308>)
    551a:	4798      	blx	r3
    551c:	3801      	subs	r0, #1
    551e:	e7ef      	b.n	5500 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    5520:	2040      	movs	r0, #64	; 0x40
    5522:	e6db      	b.n	52dc <i2c_master_init+0x54>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    5524:	4a04      	ldr	r2, [pc, #16]	; (5538 <i2c_master_init+0x2b0>)
    5526:	6a13      	ldr	r3, [r2, #32]
    5528:	2102      	movs	r1, #2
    552a:	430b      	orrs	r3, r1
    552c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    552e:	2518      	movs	r5, #24
    5530:	e6c2      	b.n	52b8 <i2c_master_init+0x30>
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	00005f41 	.word	0x00005f41
    5538:	40000400 	.word	0x40000400
    553c:	0000723d 	.word	0x0000723d
    5540:	000071cd 	.word	0x000071cd
    5544:	00005d99 	.word	0x00005d99
    5548:	00005a35 	.word	0x00005a35
    554c:	00005f7d 	.word	0x00005f7d
    5550:	20002238 	.word	0x20002238
    5554:	00007369 	.word	0x00007369
    5558:	41002000 	.word	0x41002000
    555c:	00007261 	.word	0x00007261
    5560:	000194dd 	.word	0x000194dd
    5564:	000188c5 	.word	0x000188c5
    5568:	e826d695 	.word	0xe826d695
    556c:	3e112e0b 	.word	0x3e112e0b
    5570:	00017a3d 	.word	0x00017a3d
    5574:	40240000 	.word	0x40240000
    5578:	00018dc5 	.word	0x00018dc5
    557c:	3ff00000 	.word	0x3ff00000
    5580:	0001805d 	.word	0x0001805d
    5584:	000193f1 	.word	0x000193f1
    5588:	00005de5 	.word	0x00005de5
    558c:	40080000 	.word	0x40080000
    5590:	000165b9 	.word	0x000165b9

00005594 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
    5594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5596:	46ce      	mov	lr, r9
    5598:	4647      	mov	r7, r8
    559a:	b580      	push	{r7, lr}
    559c:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    559e:	6803      	ldr	r3, [r0, #0]
    55a0:	4699      	mov	r9, r3

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    55a2:	4e14      	ldr	r6, [pc, #80]	; (55f4 <i2c_master_reset+0x60>)
    55a4:	47b0      	blx	r6
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    55a6:	6825      	ldr	r5, [r4, #0]
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    55a8:	0028      	movs	r0, r5
    55aa:	4b13      	ldr	r3, [pc, #76]	; (55f8 <i2c_master_reset+0x64>)
    55ac:	4698      	mov	r8, r3
    55ae:	4798      	blx	r3
    55b0:	231f      	movs	r3, #31
    55b2:	4018      	ands	r0, r3
    55b4:	2701      	movs	r7, #1
    55b6:	0039      	movs	r1, r7
    55b8:	4081      	lsls	r1, r0
    55ba:	3361      	adds	r3, #97	; 0x61
    55bc:	4a0f      	ldr	r2, [pc, #60]	; (55fc <i2c_master_reset+0x68>)
    55be:	50d1      	str	r1, [r2, r3]
	_i2c_master_wait_for_sync(module);
    55c0:	0020      	movs	r0, r4
    55c2:	47b0      	blx	r6
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
    55c4:	2383      	movs	r3, #131	; 0x83
    55c6:	752b      	strb	r3, [r5, #20]
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
    55c8:	762b      	strb	r3, [r5, #24]
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    55ca:	682b      	ldr	r3, [r5, #0]
    55cc:	2202      	movs	r2, #2
    55ce:	4393      	bics	r3, r2
    55d0:	602b      	str	r3, [r5, #0]
	cpu_irq_enter_critical();
    55d2:	4b0b      	ldr	r3, [pc, #44]	; (5600 <i2c_master_reset+0x6c>)
    55d4:	4798      	blx	r3
	i2c_master_disable(module);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
    55d6:	6820      	ldr	r0, [r4, #0]
    55d8:	47c0      	blx	r8
    55da:	4b0a      	ldr	r3, [pc, #40]	; (5604 <i2c_master_reset+0x70>)
    55dc:	4798      	blx	r3
	cpu_irq_leave_critical();
    55de:	4b0a      	ldr	r3, [pc, #40]	; (5608 <i2c_master_reset+0x74>)
    55e0:	4798      	blx	r3
	system_interrupt_leave_critical_section();
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
    55e2:	0020      	movs	r0, r4
    55e4:	47b0      	blx	r6

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
    55e6:	464b      	mov	r3, r9
    55e8:	601f      	str	r7, [r3, #0]
}
    55ea:	bc0c      	pop	{r2, r3}
    55ec:	4690      	mov	r8, r2
    55ee:	4699      	mov	r9, r3
    55f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    55f2:	46c0      	nop			; (mov r8, r8)
    55f4:	0000527d 	.word	0x0000527d
    55f8:	00005fb9 	.word	0x00005fb9
    55fc:	e000e100 	.word	0xe000e100
    5600:	0000457d 	.word	0x0000457d
    5604:	00007291 	.word	0x00007291
    5608:	000045bd 	.word	0x000045bd

0000560c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    560c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    560e:	7e1a      	ldrb	r2, [r3, #24]
    5610:	0792      	lsls	r2, r2, #30
    5612:	d507      	bpl.n	5624 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5614:	2202      	movs	r2, #2
    5616:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5618:	8b5b      	ldrh	r3, [r3, #26]
    561a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    561c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    561e:	17db      	asrs	r3, r3, #31
    5620:	4018      	ands	r0, r3
}
    5622:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5624:	8b5a      	ldrh	r2, [r3, #26]
    5626:	0752      	lsls	r2, r2, #29
    5628:	d506      	bpl.n	5638 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    562a:	6859      	ldr	r1, [r3, #4]
    562c:	22c0      	movs	r2, #192	; 0xc0
    562e:	0292      	lsls	r2, r2, #10
    5630:	430a      	orrs	r2, r1
    5632:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    5634:	2018      	movs	r0, #24
    5636:	e7f4      	b.n	5622 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    5638:	2000      	movs	r0, #0
    563a:	e7f2      	b.n	5622 <_i2c_master_address_response+0x16>

0000563c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    563c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    563e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    5640:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    5642:	2401      	movs	r4, #1
    5644:	2502      	movs	r5, #2
    5646:	7e11      	ldrb	r1, [r2, #24]
    5648:	4221      	tst	r1, r4
    564a:	d10b      	bne.n	5664 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    564c:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    564e:	4229      	tst	r1, r5
    5650:	d106      	bne.n	5660 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    5652:	3301      	adds	r3, #1
    5654:	b29b      	uxth	r3, r3
    5656:	8901      	ldrh	r1, [r0, #8]
    5658:	4299      	cmp	r1, r3
    565a:	d8f4      	bhi.n	5646 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    565c:	2012      	movs	r0, #18
    565e:	e002      	b.n	5666 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    5660:	2000      	movs	r0, #0
    5662:	e000      	b.n	5666 <_i2c_master_wait_for_bus+0x2a>
    5664:	2000      	movs	r0, #0
}
    5666:	bd30      	pop	{r4, r5, pc}

00005668 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    5668:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    566a:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    566c:	6862      	ldr	r2, [r4, #4]
    566e:	2380      	movs	r3, #128	; 0x80
    5670:	02db      	lsls	r3, r3, #11
    5672:	4313      	orrs	r3, r2
    5674:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    5676:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5678:	4b02      	ldr	r3, [pc, #8]	; (5684 <_i2c_master_send_hs_master_code+0x1c>)
    567a:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    567c:	2301      	movs	r3, #1
    567e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    5680:	bd10      	pop	{r4, pc}
    5682:	46c0      	nop			; (mov r8, r8)
    5684:	0000563d 	.word	0x0000563d

00005688 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5688:	b5f0      	push	{r4, r5, r6, r7, lr}
    568a:	46de      	mov	lr, fp
    568c:	4657      	mov	r7, sl
    568e:	464e      	mov	r6, r9
    5690:	4645      	mov	r5, r8
    5692:	b5e0      	push	{r5, r6, r7, lr}
    5694:	b083      	sub	sp, #12
    5696:	0006      	movs	r6, r0
    5698:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    569a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    569c:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    569e:	682b      	ldr	r3, [r5, #0]
    56a0:	011b      	lsls	r3, r3, #4
    56a2:	0fdb      	lsrs	r3, r3, #31
    56a4:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    56a6:	7a4b      	ldrb	r3, [r1, #9]
    56a8:	2b00      	cmp	r3, #0
    56aa:	d12b      	bne.n	5704 <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    56ac:	686b      	ldr	r3, [r5, #4]
    56ae:	4a58      	ldr	r2, [pc, #352]	; (5810 <_i2c_master_read_packet+0x188>)
    56b0:	4013      	ands	r3, r2
    56b2:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    56b4:	464b      	mov	r3, r9
    56b6:	7a1b      	ldrb	r3, [r3, #8]
    56b8:	2b00      	cmp	r3, #0
    56ba:	d127      	bne.n	570c <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    56bc:	464b      	mov	r3, r9
    56be:	881b      	ldrh	r3, [r3, #0]
    56c0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    56c2:	464a      	mov	r2, r9
    56c4:	7a52      	ldrb	r2, [r2, #9]
    56c6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    56c8:	4313      	orrs	r3, r2
    56ca:	2201      	movs	r2, #1
    56cc:	4313      	orrs	r3, r2
    56ce:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    56d0:	0030      	movs	r0, r6
    56d2:	4b50      	ldr	r3, [pc, #320]	; (5814 <_i2c_master_read_packet+0x18c>)
    56d4:	4798      	blx	r3
    56d6:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    56d8:	4653      	mov	r3, sl
    56da:	2b00      	cmp	r3, #0
    56dc:	d003      	beq.n	56e6 <_i2c_master_read_packet+0x5e>
    56de:	464b      	mov	r3, r9
    56e0:	885b      	ldrh	r3, [r3, #2]
    56e2:	2b01      	cmp	r3, #1
    56e4:	d03b      	beq.n	575e <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    56e6:	686b      	ldr	r3, [r5, #4]
    56e8:	4a49      	ldr	r2, [pc, #292]	; (5810 <_i2c_master_read_packet+0x188>)
    56ea:	4013      	ands	r3, r2
    56ec:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    56ee:	9b01      	ldr	r3, [sp, #4]
    56f0:	2b00      	cmp	r3, #0
    56f2:	d03a      	beq.n	576a <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    56f4:	9801      	ldr	r0, [sp, #4]
    56f6:	b003      	add	sp, #12
    56f8:	bc3c      	pop	{r2, r3, r4, r5}
    56fa:	4690      	mov	r8, r2
    56fc:	4699      	mov	r9, r3
    56fe:	46a2      	mov	sl, r4
    5700:	46ab      	mov	fp, r5
    5702:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5704:	7a89      	ldrb	r1, [r1, #10]
    5706:	4b44      	ldr	r3, [pc, #272]	; (5818 <_i2c_master_read_packet+0x190>)
    5708:	4798      	blx	r3
    570a:	e7cf      	b.n	56ac <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    570c:	464b      	mov	r3, r9
    570e:	881b      	ldrh	r3, [r3, #0]
    5710:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5712:	464a      	mov	r2, r9
    5714:	7a52      	ldrb	r2, [r2, #9]
    5716:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    5718:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    571a:	2280      	movs	r2, #128	; 0x80
    571c:	0212      	lsls	r2, r2, #8
    571e:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    5720:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    5722:	0030      	movs	r0, r6
    5724:	4b3b      	ldr	r3, [pc, #236]	; (5814 <_i2c_master_read_packet+0x18c>)
    5726:	4798      	blx	r3
    5728:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    572a:	686b      	ldr	r3, [r5, #4]
    572c:	4a38      	ldr	r2, [pc, #224]	; (5810 <_i2c_master_read_packet+0x188>)
    572e:	4013      	ands	r3, r2
    5730:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    5732:	2800      	cmp	r0, #0
    5734:	d1de      	bne.n	56f4 <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    5736:	0030      	movs	r0, r6
    5738:	4b38      	ldr	r3, [pc, #224]	; (581c <_i2c_master_read_packet+0x194>)
    573a:	4798      	blx	r3
    573c:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    573e:	2800      	cmp	r0, #0
    5740:	d1d8      	bne.n	56f4 <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    5742:	464b      	mov	r3, r9
    5744:	881b      	ldrh	r3, [r3, #0]
    5746:	0a1b      	lsrs	r3, r3, #8
    5748:	2278      	movs	r2, #120	; 0x78
    574a:	4313      	orrs	r3, r2
    574c:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    574e:	464a      	mov	r2, r9
    5750:	7a52      	ldrb	r2, [r2, #9]
    5752:	0392      	lsls	r2, r2, #14
    5754:	2101      	movs	r1, #1
    5756:	430a      	orrs	r2, r1
    5758:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    575a:	626b      	str	r3, [r5, #36]	; 0x24
    575c:	e7b8      	b.n	56d0 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    575e:	686a      	ldr	r2, [r5, #4]
    5760:	2380      	movs	r3, #128	; 0x80
    5762:	02db      	lsls	r3, r3, #11
    5764:	4313      	orrs	r3, r2
    5766:	606b      	str	r3, [r5, #4]
    5768:	e7c1      	b.n	56ee <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    576a:	0030      	movs	r0, r6
    576c:	4b2b      	ldr	r3, [pc, #172]	; (581c <_i2c_master_read_packet+0x194>)
    576e:	4798      	blx	r3
    5770:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    5772:	2800      	cmp	r0, #0
    5774:	d1be      	bne.n	56f4 <_i2c_master_read_packet+0x6c>
    5776:	3c01      	subs	r4, #1
    5778:	b2a4      	uxth	r4, r4
    577a:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    577c:	4b28      	ldr	r3, [pc, #160]	; (5820 <_i2c_master_read_packet+0x198>)
    577e:	469b      	mov	fp, r3
    5780:	e015      	b.n	57ae <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    5782:	2c01      	cmp	r4, #1
    5784:	d020      	beq.n	57c8 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    5786:	0030      	movs	r0, r6
    5788:	4b26      	ldr	r3, [pc, #152]	; (5824 <_i2c_master_read_packet+0x19c>)
    578a:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    578c:	4643      	mov	r3, r8
    578e:	1c5f      	adds	r7, r3, #1
    5790:	b2bf      	uxth	r7, r7
    5792:	2328      	movs	r3, #40	; 0x28
    5794:	5ceb      	ldrb	r3, [r5, r3]
    5796:	464a      	mov	r2, r9
    5798:	6852      	ldr	r2, [r2, #4]
    579a:	4641      	mov	r1, r8
    579c:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    579e:	0030      	movs	r0, r6
    57a0:	4b1c      	ldr	r3, [pc, #112]	; (5814 <_i2c_master_read_packet+0x18c>)
    57a2:	4798      	blx	r3
    57a4:	3c01      	subs	r4, #1
    57a6:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    57a8:	2800      	cmp	r0, #0
    57aa:	d115      	bne.n	57d8 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    57ac:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    57ae:	455c      	cmp	r4, fp
    57b0:	d014      	beq.n	57dc <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    57b2:	8b6b      	ldrh	r3, [r5, #26]
    57b4:	069b      	lsls	r3, r3, #26
    57b6:	d527      	bpl.n	5808 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    57b8:	7af3      	ldrb	r3, [r6, #11]
    57ba:	2b00      	cmp	r3, #0
    57bc:	d0e3      	beq.n	5786 <_i2c_master_read_packet+0xfe>
    57be:	4653      	mov	r3, sl
    57c0:	2b00      	cmp	r3, #0
    57c2:	d1de      	bne.n	5782 <_i2c_master_read_packet+0xfa>
    57c4:	2c00      	cmp	r4, #0
    57c6:	d1de      	bne.n	5786 <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    57c8:	686a      	ldr	r2, [r5, #4]
    57ca:	2380      	movs	r3, #128	; 0x80
    57cc:	02db      	lsls	r3, r3, #11
    57ce:	4313      	orrs	r3, r2
    57d0:	606b      	str	r3, [r5, #4]
    57d2:	3c01      	subs	r4, #1
    57d4:	b2a4      	uxth	r4, r4
    57d6:	e7ea      	b.n	57ae <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    57d8:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    57da:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    57dc:	7ab3      	ldrb	r3, [r6, #10]
    57de:	2b00      	cmp	r3, #0
    57e0:	d109      	bne.n	57f6 <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    57e2:	0030      	movs	r0, r6
    57e4:	4b0f      	ldr	r3, [pc, #60]	; (5824 <_i2c_master_read_packet+0x19c>)
    57e6:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    57e8:	2328      	movs	r3, #40	; 0x28
    57ea:	5cea      	ldrb	r2, [r5, r3]
    57ec:	464b      	mov	r3, r9
    57ee:	685b      	ldr	r3, [r3, #4]
    57f0:	4641      	mov	r1, r8
    57f2:	545a      	strb	r2, [r3, r1]
    57f4:	e77e      	b.n	56f4 <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    57f6:	0030      	movs	r0, r6
    57f8:	4b0a      	ldr	r3, [pc, #40]	; (5824 <_i2c_master_read_packet+0x19c>)
    57fa:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    57fc:	686a      	ldr	r2, [r5, #4]
    57fe:	23c0      	movs	r3, #192	; 0xc0
    5800:	029b      	lsls	r3, r3, #10
    5802:	4313      	orrs	r3, r2
    5804:	606b      	str	r3, [r5, #4]
    5806:	e7ec      	b.n	57e2 <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    5808:	2341      	movs	r3, #65	; 0x41
    580a:	9301      	str	r3, [sp, #4]
    580c:	e772      	b.n	56f4 <_i2c_master_read_packet+0x6c>
    580e:	46c0      	nop			; (mov r8, r8)
    5810:	fffbffff 	.word	0xfffbffff
    5814:	0000563d 	.word	0x0000563d
    5818:	00005669 	.word	0x00005669
    581c:	0000560d 	.word	0x0000560d
    5820:	0000ffff 	.word	0x0000ffff
    5824:	0000527d 	.word	0x0000527d

00005828 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5828:	b5f0      	push	{r4, r5, r6, r7, lr}
    582a:	46de      	mov	lr, fp
    582c:	4657      	mov	r7, sl
    582e:	464e      	mov	r6, r9
    5830:	4645      	mov	r5, r8
    5832:	b5e0      	push	{r5, r6, r7, lr}
    5834:	b083      	sub	sp, #12
    5836:	0006      	movs	r6, r0
    5838:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    583a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    583c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    583e:	4b32      	ldr	r3, [pc, #200]	; (5908 <_i2c_master_write_packet+0xe0>)
    5840:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    5842:	7a7b      	ldrb	r3, [r7, #9]
    5844:	2b00      	cmp	r3, #0
    5846:	d11d      	bne.n	5884 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    5848:	686b      	ldr	r3, [r5, #4]
    584a:	4a30      	ldr	r2, [pc, #192]	; (590c <_i2c_master_write_packet+0xe4>)
    584c:	4013      	ands	r3, r2
    584e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    5850:	7a3b      	ldrb	r3, [r7, #8]
    5852:	2b00      	cmp	r3, #0
    5854:	d01b      	beq.n	588e <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5856:	883b      	ldrh	r3, [r7, #0]
    5858:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    585a:	7a7a      	ldrb	r2, [r7, #9]
    585c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    585e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    5860:	2280      	movs	r2, #128	; 0x80
    5862:	0212      	lsls	r2, r2, #8
    5864:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5866:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    5868:	0030      	movs	r0, r6
    586a:	4b29      	ldr	r3, [pc, #164]	; (5910 <_i2c_master_write_packet+0xe8>)
    586c:	4798      	blx	r3
    586e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    5870:	2800      	cmp	r0, #0
    5872:	d013      	beq.n	589c <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    5874:	9801      	ldr	r0, [sp, #4]
    5876:	b003      	add	sp, #12
    5878:	bc3c      	pop	{r2, r3, r4, r5}
    587a:	4690      	mov	r8, r2
    587c:	4699      	mov	r9, r3
    587e:	46a2      	mov	sl, r4
    5880:	46ab      	mov	fp, r5
    5882:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    5884:	7ab9      	ldrb	r1, [r7, #10]
    5886:	0030      	movs	r0, r6
    5888:	4b22      	ldr	r3, [pc, #136]	; (5914 <_i2c_master_write_packet+0xec>)
    588a:	4798      	blx	r3
    588c:	e7dc      	b.n	5848 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    588e:	883b      	ldrh	r3, [r7, #0]
    5890:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    5892:	7a7a      	ldrb	r2, [r7, #9]
    5894:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    5896:	4313      	orrs	r3, r2
    5898:	626b      	str	r3, [r5, #36]	; 0x24
    589a:	e7e5      	b.n	5868 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    589c:	0030      	movs	r0, r6
    589e:	4b1e      	ldr	r3, [pc, #120]	; (5918 <_i2c_master_write_packet+0xf0>)
    58a0:	4798      	blx	r3
    58a2:	1e03      	subs	r3, r0, #0
    58a4:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    58a6:	d1e5      	bne.n	5874 <_i2c_master_write_packet+0x4c>
    58a8:	46a0      	mov	r8, r4
    58aa:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    58ac:	3320      	adds	r3, #32
    58ae:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    58b0:	4b15      	ldr	r3, [pc, #84]	; (5908 <_i2c_master_write_packet+0xe0>)
    58b2:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    58b4:	4b16      	ldr	r3, [pc, #88]	; (5910 <_i2c_master_write_packet+0xe8>)
    58b6:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    58b8:	4544      	cmp	r4, r8
    58ba:	d015      	beq.n	58e8 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    58bc:	8b6b      	ldrh	r3, [r5, #26]
    58be:	464a      	mov	r2, r9
    58c0:	4213      	tst	r3, r2
    58c2:	d01d      	beq.n	5900 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    58c4:	0030      	movs	r0, r6
    58c6:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    58c8:	687b      	ldr	r3, [r7, #4]
    58ca:	5d1a      	ldrb	r2, [r3, r4]
    58cc:	2328      	movs	r3, #40	; 0x28
    58ce:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    58d0:	0030      	movs	r0, r6
    58d2:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    58d4:	2800      	cmp	r0, #0
    58d6:	d106      	bne.n	58e6 <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    58d8:	8b6b      	ldrh	r3, [r5, #26]
    58da:	3401      	adds	r4, #1
    58dc:	075b      	lsls	r3, r3, #29
    58de:	d5eb      	bpl.n	58b8 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    58e0:	231e      	movs	r3, #30
    58e2:	9301      	str	r3, [sp, #4]
    58e4:	e000      	b.n	58e8 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    58e6:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    58e8:	7ab3      	ldrb	r3, [r6, #10]
    58ea:	2b00      	cmp	r3, #0
    58ec:	d0c2      	beq.n	5874 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    58ee:	0030      	movs	r0, r6
    58f0:	4b05      	ldr	r3, [pc, #20]	; (5908 <_i2c_master_write_packet+0xe0>)
    58f2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    58f4:	686a      	ldr	r2, [r5, #4]
    58f6:	23c0      	movs	r3, #192	; 0xc0
    58f8:	029b      	lsls	r3, r3, #10
    58fa:	4313      	orrs	r3, r2
    58fc:	606b      	str	r3, [r5, #4]
    58fe:	e7b9      	b.n	5874 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    5900:	2341      	movs	r3, #65	; 0x41
    5902:	9301      	str	r3, [sp, #4]
    5904:	e7b6      	b.n	5874 <_i2c_master_write_packet+0x4c>
    5906:	46c0      	nop			; (mov r8, r8)
    5908:	0000527d 	.word	0x0000527d
    590c:	fffbffff 	.word	0xfffbffff
    5910:	0000563d 	.word	0x0000563d
    5914:	00005669 	.word	0x00005669
    5918:	0000560d 	.word	0x0000560d

0000591c <i2c_master_read_packet_wait>:
{
    591c:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    591e:	8b83      	ldrh	r3, [r0, #28]
    5920:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    5922:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    5924:	2b00      	cmp	r3, #0
    5926:	d001      	beq.n	592c <i2c_master_read_packet_wait+0x10>
}
    5928:	0010      	movs	r0, r2
    592a:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    592c:	3301      	adds	r3, #1
    592e:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    5930:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    5932:	4b02      	ldr	r3, [pc, #8]	; (593c <i2c_master_read_packet_wait+0x20>)
    5934:	4798      	blx	r3
    5936:	0002      	movs	r2, r0
    5938:	e7f6      	b.n	5928 <i2c_master_read_packet_wait+0xc>
    593a:	46c0      	nop			; (mov r8, r8)
    593c:	00005689 	.word	0x00005689

00005940 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    5940:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    5942:	8b83      	ldrh	r3, [r0, #28]
    5944:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    5946:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    5948:	2b00      	cmp	r3, #0
    594a:	d001      	beq.n	5950 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    594c:	0010      	movs	r0, r2
    594e:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    5950:	3301      	adds	r3, #1
    5952:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    5954:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    5956:	4b02      	ldr	r3, [pc, #8]	; (5960 <i2c_master_write_packet_wait+0x20>)
    5958:	4798      	blx	r3
    595a:	0002      	movs	r2, r0
    595c:	e7f6      	b.n	594c <i2c_master_write_packet_wait+0xc>
    595e:	46c0      	nop			; (mov r8, r8)
    5960:	00005829 	.word	0x00005829

00005964 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    5964:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    5966:	2207      	movs	r2, #7
    5968:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    596a:	421a      	tst	r2, r3
    596c:	d1fc      	bne.n	5968 <_i2c_master_wait_for_sync+0x4>
}
    596e:	4770      	bx	lr

00005970 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    5970:	b570      	push	{r4, r5, r6, lr}
    5972:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5974:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5976:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    5978:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    597a:	8b83      	ldrh	r3, [r0, #28]
    597c:	1aed      	subs	r5, r5, r3
    597e:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    5980:	8b83      	ldrh	r3, [r0, #28]
    5982:	3b01      	subs	r3, #1
    5984:	b29b      	uxth	r3, r3
    5986:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    5988:	0113      	lsls	r3, r2, #4
    598a:	d51d      	bpl.n	59c8 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    598c:	7ac3      	ldrb	r3, [r0, #11]
    598e:	2b00      	cmp	r3, #0
    5990:	d003      	beq.n	599a <_i2c_master_read+0x2a>
    5992:	8b83      	ldrh	r3, [r0, #28]
    5994:	b29b      	uxth	r3, r3
    5996:	2b01      	cmp	r3, #1
    5998:	d010      	beq.n	59bc <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    599a:	8ba3      	ldrh	r3, [r4, #28]
    599c:	b29b      	uxth	r3, r3
    599e:	2b00      	cmp	r3, #0
    59a0:	d102      	bne.n	59a8 <_i2c_master_read+0x38>
		if (module->send_stop) {
    59a2:	7aa3      	ldrb	r3, [r4, #10]
    59a4:	2b00      	cmp	r3, #0
    59a6:	d11c      	bne.n	59e2 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    59a8:	0020      	movs	r0, r4
    59aa:	4b12      	ldr	r3, [pc, #72]	; (59f4 <_i2c_master_read+0x84>)
    59ac:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    59ae:	6a23      	ldr	r3, [r4, #32]
    59b0:	195d      	adds	r5, r3, r5
    59b2:	2328      	movs	r3, #40	; 0x28
    59b4:	5cf3      	ldrb	r3, [r6, r3]
    59b6:	b2db      	uxtb	r3, r3
    59b8:	702b      	strb	r3, [r5, #0]
}
    59ba:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    59bc:	6872      	ldr	r2, [r6, #4]
    59be:	2380      	movs	r3, #128	; 0x80
    59c0:	02db      	lsls	r3, r3, #11
    59c2:	4313      	orrs	r3, r2
    59c4:	6073      	str	r3, [r6, #4]
    59c6:	e7e8      	b.n	599a <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    59c8:	7ac3      	ldrb	r3, [r0, #11]
    59ca:	2b00      	cmp	r3, #0
    59cc:	d0e5      	beq.n	599a <_i2c_master_read+0x2a>
    59ce:	8b83      	ldrh	r3, [r0, #28]
    59d0:	b29b      	uxth	r3, r3
    59d2:	2b00      	cmp	r3, #0
    59d4:	d1e1      	bne.n	599a <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    59d6:	6872      	ldr	r2, [r6, #4]
    59d8:	2380      	movs	r3, #128	; 0x80
    59da:	02db      	lsls	r3, r3, #11
    59dc:	4313      	orrs	r3, r2
    59de:	6073      	str	r3, [r6, #4]
    59e0:	e7db      	b.n	599a <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    59e2:	0020      	movs	r0, r4
    59e4:	4b03      	ldr	r3, [pc, #12]	; (59f4 <_i2c_master_read+0x84>)
    59e6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    59e8:	6872      	ldr	r2, [r6, #4]
    59ea:	23c0      	movs	r3, #192	; 0xc0
    59ec:	029b      	lsls	r3, r3, #10
    59ee:	4313      	orrs	r3, r2
    59f0:	6073      	str	r3, [r6, #4]
    59f2:	e7d9      	b.n	59a8 <_i2c_master_read+0x38>
    59f4:	00005965 	.word	0x00005965

000059f8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    59f8:	b570      	push	{r4, r5, r6, lr}
    59fa:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    59fc:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    59fe:	8b6b      	ldrh	r3, [r5, #26]
    5a00:	075b      	lsls	r3, r3, #29
    5a02:	d503      	bpl.n	5a0c <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    5a04:	221e      	movs	r2, #30
    5a06:	2325      	movs	r3, #37	; 0x25
    5a08:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    5a0a:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    5a0c:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    5a0e:	8b83      	ldrh	r3, [r0, #28]
    5a10:	1af6      	subs	r6, r6, r3
    5a12:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    5a14:	8b83      	ldrh	r3, [r0, #28]
    5a16:	3b01      	subs	r3, #1
    5a18:	b29b      	uxth	r3, r3
    5a1a:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    5a1c:	4b04      	ldr	r3, [pc, #16]	; (5a30 <_i2c_master_write+0x38>)
    5a1e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    5a20:	6a23      	ldr	r3, [r4, #32]
    5a22:	199e      	adds	r6, r3, r6
    5a24:	7833      	ldrb	r3, [r6, #0]
    5a26:	b2db      	uxtb	r3, r3
    5a28:	2228      	movs	r2, #40	; 0x28
    5a2a:	54ab      	strb	r3, [r5, r2]
    5a2c:	e7ed      	b.n	5a0a <_i2c_master_write+0x12>
    5a2e:	46c0      	nop			; (mov r8, r8)
    5a30:	00005965 	.word	0x00005965

00005a34 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    5a34:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    5a36:	0080      	lsls	r0, r0, #2
    5a38:	4b75      	ldr	r3, [pc, #468]	; (5c10 <_i2c_master_interrupt_handler+0x1dc>)
    5a3a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    5a3c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    5a3e:	682b      	ldr	r3, [r5, #0]
    5a40:	011b      	lsls	r3, r3, #4
    5a42:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    5a44:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    5a46:	7e26      	ldrb	r6, [r4, #24]
    5a48:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    5a4a:	8b63      	ldrh	r3, [r4, #26]
    5a4c:	b29b      	uxth	r3, r3
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d103      	bne.n	5a5a <_i2c_master_interrupt_handler+0x26>
    5a52:	8ba3      	ldrh	r3, [r4, #28]
    5a54:	b29b      	uxth	r3, r3
    5a56:	2b00      	cmp	r3, #0
    5a58:	d123      	bne.n	5aa2 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5a5a:	8b63      	ldrh	r3, [r4, #26]
    5a5c:	b29b      	uxth	r3, r3
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d008      	beq.n	5a74 <_i2c_master_interrupt_handler+0x40>
    5a62:	8ba3      	ldrh	r3, [r4, #28]
    5a64:	b29b      	uxth	r3, r3
    5a66:	2b00      	cmp	r3, #0
    5a68:	d104      	bne.n	5a74 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    5a6a:	3325      	adds	r3, #37	; 0x25
    5a6c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5a6e:	2b05      	cmp	r3, #5
    5a70:	d100      	bne.n	5a74 <_i2c_master_interrupt_handler+0x40>
    5a72:	e06d      	b.n	5b50 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    5a74:	8b63      	ldrh	r3, [r4, #26]
    5a76:	b29b      	uxth	r3, r3
    5a78:	2b00      	cmp	r3, #0
    5a7a:	d024      	beq.n	5ac6 <_i2c_master_interrupt_handler+0x92>
    5a7c:	8ba3      	ldrh	r3, [r4, #28]
    5a7e:	b29b      	uxth	r3, r3
    5a80:	2b00      	cmp	r3, #0
    5a82:	d020      	beq.n	5ac6 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    5a84:	8b6b      	ldrh	r3, [r5, #26]
    5a86:	069b      	lsls	r3, r3, #26
    5a88:	d500      	bpl.n	5a8c <_i2c_master_interrupt_handler+0x58>
    5a8a:	e081      	b.n	5b90 <_i2c_master_interrupt_handler+0x15c>
    5a8c:	2a00      	cmp	r2, #0
    5a8e:	d004      	beq.n	5a9a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    5a90:	8ba3      	ldrh	r3, [r4, #28]
    5a92:	b29b      	uxth	r3, r3
    5a94:	2b01      	cmp	r3, #1
    5a96:	d100      	bne.n	5a9a <_i2c_master_interrupt_handler+0x66>
    5a98:	e07a      	b.n	5b90 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    5a9a:	2241      	movs	r2, #65	; 0x41
    5a9c:	2325      	movs	r3, #37	; 0x25
    5a9e:	54e2      	strb	r2, [r4, r3]
    5aa0:	e011      	b.n	5ac6 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    5aa2:	7e2b      	ldrb	r3, [r5, #24]
    5aa4:	07db      	lsls	r3, r3, #31
    5aa6:	d507      	bpl.n	5ab8 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    5aa8:	2301      	movs	r3, #1
    5aaa:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    5aac:	8b6b      	ldrh	r3, [r5, #26]
    5aae:	079b      	lsls	r3, r3, #30
    5ab0:	d52e      	bpl.n	5b10 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    5ab2:	2241      	movs	r2, #65	; 0x41
    5ab4:	2325      	movs	r3, #37	; 0x25
    5ab6:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    5ab8:	8ba3      	ldrh	r3, [r4, #28]
    5aba:	b29b      	uxth	r3, r3
    5abc:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    5abe:	2325      	movs	r3, #37	; 0x25
    5ac0:	5ce3      	ldrb	r3, [r4, r3]
    5ac2:	2b05      	cmp	r3, #5
    5ac4:	d038      	beq.n	5b38 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5ac6:	8b63      	ldrh	r3, [r4, #26]
    5ac8:	b29b      	uxth	r3, r3
    5aca:	2b00      	cmp	r3, #0
    5acc:	d007      	beq.n	5ade <_i2c_master_interrupt_handler+0xaa>
    5ace:	8ba3      	ldrh	r3, [r4, #28]
    5ad0:	b29b      	uxth	r3, r3
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d103      	bne.n	5ade <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    5ad6:	3325      	adds	r3, #37	; 0x25
    5ad8:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    5ada:	2b05      	cmp	r3, #5
    5adc:	d064      	beq.n	5ba8 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    5ade:	2325      	movs	r3, #37	; 0x25
    5ae0:	5ce3      	ldrb	r3, [r4, r3]
    5ae2:	2b05      	cmp	r3, #5
    5ae4:	d013      	beq.n	5b0e <_i2c_master_interrupt_handler+0xda>
    5ae6:	2325      	movs	r3, #37	; 0x25
    5ae8:	5ce3      	ldrb	r3, [r4, r3]
    5aea:	2b00      	cmp	r3, #0
    5aec:	d00f      	beq.n	5b0e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    5aee:	2303      	movs	r3, #3
    5af0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    5af2:	2300      	movs	r3, #0
    5af4:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    5af6:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    5af8:	3325      	adds	r3, #37	; 0x25
    5afa:	5ce3      	ldrb	r3, [r4, r3]
    5afc:	2b41      	cmp	r3, #65	; 0x41
    5afe:	d003      	beq.n	5b08 <_i2c_master_interrupt_handler+0xd4>
    5b00:	7aa3      	ldrb	r3, [r4, #10]
    5b02:	2b00      	cmp	r3, #0
    5b04:	d000      	beq.n	5b08 <_i2c_master_interrupt_handler+0xd4>
    5b06:	e075      	b.n	5bf4 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    5b08:	0773      	lsls	r3, r6, #29
    5b0a:	d500      	bpl.n	5b0e <_i2c_master_interrupt_handler+0xda>
    5b0c:	e07b      	b.n	5c06 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    5b0e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    5b10:	8b6b      	ldrh	r3, [r5, #26]
    5b12:	075b      	lsls	r3, r3, #29
    5b14:	d5d0      	bpl.n	5ab8 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    5b16:	2218      	movs	r2, #24
    5b18:	2325      	movs	r3, #37	; 0x25
    5b1a:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    5b1c:	2300      	movs	r3, #0
    5b1e:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    5b20:	7aa3      	ldrb	r3, [r4, #10]
    5b22:	2b00      	cmp	r3, #0
    5b24:	d0c8      	beq.n	5ab8 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    5b26:	0020      	movs	r0, r4
    5b28:	4b3a      	ldr	r3, [pc, #232]	; (5c14 <_i2c_master_interrupt_handler+0x1e0>)
    5b2a:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5b2c:	686a      	ldr	r2, [r5, #4]
    5b2e:	23c0      	movs	r3, #192	; 0xc0
    5b30:	029b      	lsls	r3, r3, #10
    5b32:	4313      	orrs	r3, r2
    5b34:	606b      	str	r3, [r5, #4]
    5b36:	e7bf      	b.n	5ab8 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5b38:	331f      	adds	r3, #31
    5b3a:	5ce3      	ldrb	r3, [r4, r3]
    5b3c:	2b00      	cmp	r3, #0
    5b3e:	d003      	beq.n	5b48 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    5b40:	0020      	movs	r0, r4
    5b42:	4b35      	ldr	r3, [pc, #212]	; (5c18 <_i2c_master_interrupt_handler+0x1e4>)
    5b44:	4798      	blx	r3
    5b46:	e7be      	b.n	5ac6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    5b48:	0020      	movs	r0, r4
    5b4a:	4b34      	ldr	r3, [pc, #208]	; (5c1c <_i2c_master_interrupt_handler+0x1e8>)
    5b4c:	4798      	blx	r3
    5b4e:	e7ba      	b.n	5ac6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5b50:	331f      	adds	r3, #31
    5b52:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    5b54:	2b00      	cmp	r3, #0
    5b56:	d000      	beq.n	5b5a <_i2c_master_interrupt_handler+0x126>
    5b58:	e78c      	b.n	5a74 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    5b5a:	3303      	adds	r3, #3
    5b5c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    5b5e:	2300      	movs	r3, #0
    5b60:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    5b62:	3325      	adds	r3, #37	; 0x25
    5b64:	2200      	movs	r2, #0
    5b66:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    5b68:	7aa3      	ldrb	r3, [r4, #10]
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	d107      	bne.n	5b7e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    5b6e:	2301      	movs	r3, #1
    5b70:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    5b72:	07f3      	lsls	r3, r6, #31
    5b74:	d5a7      	bpl.n	5ac6 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5b76:	68e3      	ldr	r3, [r4, #12]
    5b78:	0020      	movs	r0, r4
    5b7a:	4798      	blx	r3
    5b7c:	e7a3      	b.n	5ac6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    5b7e:	0020      	movs	r0, r4
    5b80:	4b24      	ldr	r3, [pc, #144]	; (5c14 <_i2c_master_interrupt_handler+0x1e0>)
    5b82:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    5b84:	686a      	ldr	r2, [r5, #4]
    5b86:	23c0      	movs	r3, #192	; 0xc0
    5b88:	029b      	lsls	r3, r3, #10
    5b8a:	4313      	orrs	r3, r2
    5b8c:	606b      	str	r3, [r5, #4]
    5b8e:	e7f0      	b.n	5b72 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    5b90:	2324      	movs	r3, #36	; 0x24
    5b92:	5ce3      	ldrb	r3, [r4, r3]
    5b94:	2b00      	cmp	r3, #0
    5b96:	d103      	bne.n	5ba0 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    5b98:	0020      	movs	r0, r4
    5b9a:	4b20      	ldr	r3, [pc, #128]	; (5c1c <_i2c_master_interrupt_handler+0x1e8>)
    5b9c:	4798      	blx	r3
    5b9e:	e792      	b.n	5ac6 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    5ba0:	0020      	movs	r0, r4
    5ba2:	4b1d      	ldr	r3, [pc, #116]	; (5c18 <_i2c_master_interrupt_handler+0x1e4>)
    5ba4:	4798      	blx	r3
    5ba6:	e78e      	b.n	5ac6 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    5ba8:	331f      	adds	r3, #31
    5baa:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    5bac:	2b01      	cmp	r3, #1
    5bae:	d196      	bne.n	5ade <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    5bb0:	7e2b      	ldrb	r3, [r5, #24]
    5bb2:	079b      	lsls	r3, r3, #30
    5bb4:	d501      	bpl.n	5bba <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    5bb6:	2302      	movs	r3, #2
    5bb8:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    5bba:	2303      	movs	r3, #3
    5bbc:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    5bbe:	2300      	movs	r3, #0
    5bc0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    5bc2:	3325      	adds	r3, #37	; 0x25
    5bc4:	2200      	movs	r2, #0
    5bc6:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    5bc8:	07b3      	lsls	r3, r6, #30
    5bca:	d503      	bpl.n	5bd4 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    5bcc:	2324      	movs	r3, #36	; 0x24
    5bce:	5ce3      	ldrb	r3, [r4, r3]
    5bd0:	2b01      	cmp	r3, #1
    5bd2:	d00b      	beq.n	5bec <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    5bd4:	07f3      	lsls	r3, r6, #31
    5bd6:	d400      	bmi.n	5bda <_i2c_master_interrupt_handler+0x1a6>
    5bd8:	e781      	b.n	5ade <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    5bda:	2324      	movs	r3, #36	; 0x24
    5bdc:	5ce3      	ldrb	r3, [r4, r3]
    5bde:	2b00      	cmp	r3, #0
    5be0:	d000      	beq.n	5be4 <_i2c_master_interrupt_handler+0x1b0>
    5be2:	e77c      	b.n	5ade <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    5be4:	68e3      	ldr	r3, [r4, #12]
    5be6:	0020      	movs	r0, r4
    5be8:	4798      	blx	r3
    5bea:	e778      	b.n	5ade <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    5bec:	6923      	ldr	r3, [r4, #16]
    5bee:	0020      	movs	r0, r4
    5bf0:	4798      	blx	r3
    5bf2:	e774      	b.n	5ade <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    5bf4:	0020      	movs	r0, r4
    5bf6:	4b07      	ldr	r3, [pc, #28]	; (5c14 <_i2c_master_interrupt_handler+0x1e0>)
    5bf8:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    5bfa:	686a      	ldr	r2, [r5, #4]
    5bfc:	23e0      	movs	r3, #224	; 0xe0
    5bfe:	02db      	lsls	r3, r3, #11
    5c00:	4313      	orrs	r3, r2
    5c02:	606b      	str	r3, [r5, #4]
    5c04:	e780      	b.n	5b08 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    5c06:	6963      	ldr	r3, [r4, #20]
    5c08:	0020      	movs	r0, r4
    5c0a:	4798      	blx	r3
}
    5c0c:	e77f      	b.n	5b0e <_i2c_master_interrupt_handler+0xda>
    5c0e:	46c0      	nop			; (mov r8, r8)
    5c10:	20002238 	.word	0x20002238
    5c14:	00005965 	.word	0x00005965
    5c18:	00005971 	.word	0x00005971
    5c1c:	000059f9 	.word	0x000059f9

00005c20 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    5c20:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c22:	46de      	mov	lr, fp
    5c24:	4657      	mov	r7, sl
    5c26:	464e      	mov	r6, r9
    5c28:	4645      	mov	r5, r8
    5c2a:	b5e0      	push	{r5, r6, r7, lr}
    5c2c:	b087      	sub	sp, #28
    5c2e:	4680      	mov	r8, r0
    5c30:	9104      	str	r1, [sp, #16]
    5c32:	0016      	movs	r6, r2
    5c34:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    5c36:	2200      	movs	r2, #0
    5c38:	2300      	movs	r3, #0
    5c3a:	2100      	movs	r1, #0
    5c3c:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    5c3e:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    5c40:	2001      	movs	r0, #1
    5c42:	0021      	movs	r1, r4
    5c44:	9600      	str	r6, [sp, #0]
    5c46:	9701      	str	r7, [sp, #4]
    5c48:	465c      	mov	r4, fp
    5c4a:	9403      	str	r4, [sp, #12]
    5c4c:	4644      	mov	r4, r8
    5c4e:	9405      	str	r4, [sp, #20]
    5c50:	e013      	b.n	5c7a <long_division+0x5a>
    5c52:	2420      	movs	r4, #32
    5c54:	1a64      	subs	r4, r4, r1
    5c56:	0005      	movs	r5, r0
    5c58:	40e5      	lsrs	r5, r4
    5c5a:	46a8      	mov	r8, r5
    5c5c:	e014      	b.n	5c88 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    5c5e:	9c00      	ldr	r4, [sp, #0]
    5c60:	9d01      	ldr	r5, [sp, #4]
    5c62:	1b12      	subs	r2, r2, r4
    5c64:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    5c66:	465c      	mov	r4, fp
    5c68:	464d      	mov	r5, r9
    5c6a:	432c      	orrs	r4, r5
    5c6c:	46a3      	mov	fp, r4
    5c6e:	9c03      	ldr	r4, [sp, #12]
    5c70:	4645      	mov	r5, r8
    5c72:	432c      	orrs	r4, r5
    5c74:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    5c76:	3901      	subs	r1, #1
    5c78:	d325      	bcc.n	5cc6 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    5c7a:	2420      	movs	r4, #32
    5c7c:	4264      	negs	r4, r4
    5c7e:	190c      	adds	r4, r1, r4
    5c80:	d4e7      	bmi.n	5c52 <long_division+0x32>
    5c82:	0005      	movs	r5, r0
    5c84:	40a5      	lsls	r5, r4
    5c86:	46a8      	mov	r8, r5
    5c88:	0004      	movs	r4, r0
    5c8a:	408c      	lsls	r4, r1
    5c8c:	46a1      	mov	r9, r4
		r = r << 1;
    5c8e:	1892      	adds	r2, r2, r2
    5c90:	415b      	adcs	r3, r3
    5c92:	0014      	movs	r4, r2
    5c94:	001d      	movs	r5, r3
		if (n & bit_shift) {
    5c96:	9e05      	ldr	r6, [sp, #20]
    5c98:	464f      	mov	r7, r9
    5c9a:	403e      	ands	r6, r7
    5c9c:	46b4      	mov	ip, r6
    5c9e:	9e04      	ldr	r6, [sp, #16]
    5ca0:	4647      	mov	r7, r8
    5ca2:	403e      	ands	r6, r7
    5ca4:	46b2      	mov	sl, r6
    5ca6:	4666      	mov	r6, ip
    5ca8:	4657      	mov	r7, sl
    5caa:	433e      	orrs	r6, r7
    5cac:	d003      	beq.n	5cb6 <long_division+0x96>
			r |= 0x01;
    5cae:	0006      	movs	r6, r0
    5cb0:	4326      	orrs	r6, r4
    5cb2:	0032      	movs	r2, r6
    5cb4:	002b      	movs	r3, r5
		if (r >= d) {
    5cb6:	9c00      	ldr	r4, [sp, #0]
    5cb8:	9d01      	ldr	r5, [sp, #4]
    5cba:	429d      	cmp	r5, r3
    5cbc:	d8db      	bhi.n	5c76 <long_division+0x56>
    5cbe:	d1ce      	bne.n	5c5e <long_division+0x3e>
    5cc0:	4294      	cmp	r4, r2
    5cc2:	d8d8      	bhi.n	5c76 <long_division+0x56>
    5cc4:	e7cb      	b.n	5c5e <long_division+0x3e>
    5cc6:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    5cc8:	4658      	mov	r0, fp
    5cca:	0019      	movs	r1, r3
    5ccc:	b007      	add	sp, #28
    5cce:	bc3c      	pop	{r2, r3, r4, r5}
    5cd0:	4690      	mov	r8, r2
    5cd2:	4699      	mov	r9, r3
    5cd4:	46a2      	mov	sl, r4
    5cd6:	46ab      	mov	fp, r5
    5cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005cda <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5cda:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    5cdc:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5cde:	2340      	movs	r3, #64	; 0x40
    5ce0:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    5ce2:	4281      	cmp	r1, r0
    5ce4:	d202      	bcs.n	5cec <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    5ce6:	0018      	movs	r0, r3
    5ce8:	bd10      	pop	{r4, pc}
		baud_calculated++;
    5cea:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    5cec:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    5cee:	1c63      	adds	r3, r4, #1
    5cf0:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    5cf2:	4288      	cmp	r0, r1
    5cf4:	d9f9      	bls.n	5cea <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5cf6:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    5cf8:	2cff      	cmp	r4, #255	; 0xff
    5cfa:	d8f4      	bhi.n	5ce6 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    5cfc:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    5cfe:	2300      	movs	r3, #0
    5d00:	e7f1      	b.n	5ce6 <_sercom_get_sync_baud_val+0xc>
	...

00005d04 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    5d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d06:	b083      	sub	sp, #12
    5d08:	000f      	movs	r7, r1
    5d0a:	0016      	movs	r6, r2
    5d0c:	aa08      	add	r2, sp, #32
    5d0e:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    5d10:	0004      	movs	r4, r0
    5d12:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5d14:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    5d16:	42bc      	cmp	r4, r7
    5d18:	d902      	bls.n	5d20 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    5d1a:	0010      	movs	r0, r2
    5d1c:	b003      	add	sp, #12
    5d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    5d20:	2b00      	cmp	r3, #0
    5d22:	d114      	bne.n	5d4e <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    5d24:	0002      	movs	r2, r0
    5d26:	0008      	movs	r0, r1
    5d28:	2100      	movs	r1, #0
    5d2a:	4c19      	ldr	r4, [pc, #100]	; (5d90 <_sercom_get_async_baud_val+0x8c>)
    5d2c:	47a0      	blx	r4
    5d2e:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    5d30:	003a      	movs	r2, r7
    5d32:	2300      	movs	r3, #0
    5d34:	2000      	movs	r0, #0
    5d36:	4c17      	ldr	r4, [pc, #92]	; (5d94 <_sercom_get_async_baud_val+0x90>)
    5d38:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    5d3a:	2200      	movs	r2, #0
    5d3c:	2301      	movs	r3, #1
    5d3e:	1a12      	subs	r2, r2, r0
    5d40:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    5d42:	0c12      	lsrs	r2, r2, #16
    5d44:	041b      	lsls	r3, r3, #16
    5d46:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    5d48:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    5d4a:	2200      	movs	r2, #0
    5d4c:	e7e5      	b.n	5d1a <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    5d4e:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    5d50:	2b01      	cmp	r3, #1
    5d52:	d1f9      	bne.n	5d48 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    5d54:	000a      	movs	r2, r1
    5d56:	2300      	movs	r3, #0
    5d58:	2100      	movs	r1, #0
    5d5a:	4c0d      	ldr	r4, [pc, #52]	; (5d90 <_sercom_get_async_baud_val+0x8c>)
    5d5c:	47a0      	blx	r4
    5d5e:	0002      	movs	r2, r0
    5d60:	000b      	movs	r3, r1
    5d62:	9200      	str	r2, [sp, #0]
    5d64:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    5d66:	0038      	movs	r0, r7
    5d68:	2100      	movs	r1, #0
    5d6a:	4c0a      	ldr	r4, [pc, #40]	; (5d94 <_sercom_get_async_baud_val+0x90>)
    5d6c:	47a0      	blx	r4
    5d6e:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    5d70:	2380      	movs	r3, #128	; 0x80
    5d72:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5d74:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    5d76:	4298      	cmp	r0, r3
    5d78:	d8cf      	bhi.n	5d1a <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    5d7a:	0f79      	lsrs	r1, r7, #29
    5d7c:	00f8      	lsls	r0, r7, #3
    5d7e:	9a00      	ldr	r2, [sp, #0]
    5d80:	9b01      	ldr	r3, [sp, #4]
    5d82:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    5d84:	00ea      	lsls	r2, r5, #3
    5d86:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    5d88:	b2d2      	uxtb	r2, r2
    5d8a:	0352      	lsls	r2, r2, #13
    5d8c:	432a      	orrs	r2, r5
    5d8e:	e7db      	b.n	5d48 <_sercom_get_async_baud_val+0x44>
    5d90:	000169d5 	.word	0x000169d5
    5d94:	00005c21 	.word	0x00005c21

00005d98 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    5d98:	b510      	push	{r4, lr}
    5d9a:	b082      	sub	sp, #8
    5d9c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    5d9e:	4b0e      	ldr	r3, [pc, #56]	; (5dd8 <sercom_set_gclk_generator+0x40>)
    5da0:	781b      	ldrb	r3, [r3, #0]
    5da2:	2b00      	cmp	r3, #0
    5da4:	d007      	beq.n	5db6 <sercom_set_gclk_generator+0x1e>
    5da6:	2900      	cmp	r1, #0
    5da8:	d105      	bne.n	5db6 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    5daa:	4b0b      	ldr	r3, [pc, #44]	; (5dd8 <sercom_set_gclk_generator+0x40>)
    5dac:	785b      	ldrb	r3, [r3, #1]
    5dae:	4283      	cmp	r3, r0
    5db0:	d010      	beq.n	5dd4 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5db2:	201d      	movs	r0, #29
    5db4:	e00c      	b.n	5dd0 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    5db6:	a901      	add	r1, sp, #4
    5db8:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    5dba:	2011      	movs	r0, #17
    5dbc:	4b07      	ldr	r3, [pc, #28]	; (5ddc <sercom_set_gclk_generator+0x44>)
    5dbe:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5dc0:	2011      	movs	r0, #17
    5dc2:	4b07      	ldr	r3, [pc, #28]	; (5de0 <sercom_set_gclk_generator+0x48>)
    5dc4:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    5dc6:	4b04      	ldr	r3, [pc, #16]	; (5dd8 <sercom_set_gclk_generator+0x40>)
    5dc8:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    5dca:	2201      	movs	r2, #1
    5dcc:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    5dce:	2000      	movs	r0, #0
}
    5dd0:	b002      	add	sp, #8
    5dd2:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    5dd4:	2000      	movs	r0, #0
    5dd6:	e7fb      	b.n	5dd0 <sercom_set_gclk_generator+0x38>
    5dd8:	20000b68 	.word	0x20000b68
    5ddc:	0000723d 	.word	0x0000723d
    5de0:	000071cd 	.word	0x000071cd

00005de4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    5de4:	4b3c      	ldr	r3, [pc, #240]	; (5ed8 <_sercom_get_default_pad+0xf4>)
    5de6:	4298      	cmp	r0, r3
    5de8:	d032      	beq.n	5e50 <_sercom_get_default_pad+0x6c>
    5dea:	d90a      	bls.n	5e02 <_sercom_get_default_pad+0x1e>
    5dec:	4b3b      	ldr	r3, [pc, #236]	; (5edc <_sercom_get_default_pad+0xf8>)
    5dee:	4298      	cmp	r0, r3
    5df0:	d04e      	beq.n	5e90 <_sercom_get_default_pad+0xac>
    5df2:	4b3b      	ldr	r3, [pc, #236]	; (5ee0 <_sercom_get_default_pad+0xfc>)
    5df4:	4298      	cmp	r0, r3
    5df6:	d055      	beq.n	5ea4 <_sercom_get_default_pad+0xc0>
    5df8:	4b3a      	ldr	r3, [pc, #232]	; (5ee4 <_sercom_get_default_pad+0x100>)
    5dfa:	4298      	cmp	r0, r3
    5dfc:	d038      	beq.n	5e70 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    5dfe:	2000      	movs	r0, #0
}
    5e00:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    5e02:	2384      	movs	r3, #132	; 0x84
    5e04:	05db      	lsls	r3, r3, #23
    5e06:	4298      	cmp	r0, r3
    5e08:	d00c      	beq.n	5e24 <_sercom_get_default_pad+0x40>
    5e0a:	4b37      	ldr	r3, [pc, #220]	; (5ee8 <_sercom_get_default_pad+0x104>)
    5e0c:	4298      	cmp	r0, r3
    5e0e:	d1f6      	bne.n	5dfe <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5e10:	2901      	cmp	r1, #1
    5e12:	d017      	beq.n	5e44 <_sercom_get_default_pad+0x60>
    5e14:	2900      	cmp	r1, #0
    5e16:	d057      	beq.n	5ec8 <_sercom_get_default_pad+0xe4>
    5e18:	2902      	cmp	r1, #2
    5e1a:	d015      	beq.n	5e48 <_sercom_get_default_pad+0x64>
    5e1c:	2903      	cmp	r1, #3
    5e1e:	d015      	beq.n	5e4c <_sercom_get_default_pad+0x68>
	return 0;
    5e20:	2000      	movs	r0, #0
    5e22:	e7ed      	b.n	5e00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5e24:	2901      	cmp	r1, #1
    5e26:	d007      	beq.n	5e38 <_sercom_get_default_pad+0x54>
    5e28:	2900      	cmp	r1, #0
    5e2a:	d04b      	beq.n	5ec4 <_sercom_get_default_pad+0xe0>
    5e2c:	2902      	cmp	r1, #2
    5e2e:	d005      	beq.n	5e3c <_sercom_get_default_pad+0x58>
    5e30:	2903      	cmp	r1, #3
    5e32:	d005      	beq.n	5e40 <_sercom_get_default_pad+0x5c>
	return 0;
    5e34:	2000      	movs	r0, #0
    5e36:	e7e3      	b.n	5e00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5e38:	482c      	ldr	r0, [pc, #176]	; (5eec <_sercom_get_default_pad+0x108>)
    5e3a:	e7e1      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e3c:	482c      	ldr	r0, [pc, #176]	; (5ef0 <_sercom_get_default_pad+0x10c>)
    5e3e:	e7df      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e40:	482c      	ldr	r0, [pc, #176]	; (5ef4 <_sercom_get_default_pad+0x110>)
    5e42:	e7dd      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e44:	482c      	ldr	r0, [pc, #176]	; (5ef8 <_sercom_get_default_pad+0x114>)
    5e46:	e7db      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e48:	482c      	ldr	r0, [pc, #176]	; (5efc <_sercom_get_default_pad+0x118>)
    5e4a:	e7d9      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e4c:	482c      	ldr	r0, [pc, #176]	; (5f00 <_sercom_get_default_pad+0x11c>)
    5e4e:	e7d7      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e50:	2901      	cmp	r1, #1
    5e52:	d007      	beq.n	5e64 <_sercom_get_default_pad+0x80>
    5e54:	2900      	cmp	r1, #0
    5e56:	d039      	beq.n	5ecc <_sercom_get_default_pad+0xe8>
    5e58:	2902      	cmp	r1, #2
    5e5a:	d005      	beq.n	5e68 <_sercom_get_default_pad+0x84>
    5e5c:	2903      	cmp	r1, #3
    5e5e:	d005      	beq.n	5e6c <_sercom_get_default_pad+0x88>
	return 0;
    5e60:	2000      	movs	r0, #0
    5e62:	e7cd      	b.n	5e00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5e64:	4827      	ldr	r0, [pc, #156]	; (5f04 <_sercom_get_default_pad+0x120>)
    5e66:	e7cb      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e68:	4827      	ldr	r0, [pc, #156]	; (5f08 <_sercom_get_default_pad+0x124>)
    5e6a:	e7c9      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e6c:	4827      	ldr	r0, [pc, #156]	; (5f0c <_sercom_get_default_pad+0x128>)
    5e6e:	e7c7      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e70:	2901      	cmp	r1, #1
    5e72:	d007      	beq.n	5e84 <_sercom_get_default_pad+0xa0>
    5e74:	2900      	cmp	r1, #0
    5e76:	d02b      	beq.n	5ed0 <_sercom_get_default_pad+0xec>
    5e78:	2902      	cmp	r1, #2
    5e7a:	d005      	beq.n	5e88 <_sercom_get_default_pad+0xa4>
    5e7c:	2903      	cmp	r1, #3
    5e7e:	d005      	beq.n	5e8c <_sercom_get_default_pad+0xa8>
	return 0;
    5e80:	2000      	movs	r0, #0
    5e82:	e7bd      	b.n	5e00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5e84:	4822      	ldr	r0, [pc, #136]	; (5f10 <_sercom_get_default_pad+0x12c>)
    5e86:	e7bb      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e88:	4822      	ldr	r0, [pc, #136]	; (5f14 <_sercom_get_default_pad+0x130>)
    5e8a:	e7b9      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e8c:	4822      	ldr	r0, [pc, #136]	; (5f18 <_sercom_get_default_pad+0x134>)
    5e8e:	e7b7      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e90:	2902      	cmp	r1, #2
    5e92:	d003      	beq.n	5e9c <_sercom_get_default_pad+0xb8>
    5e94:	2903      	cmp	r1, #3
    5e96:	d003      	beq.n	5ea0 <_sercom_get_default_pad+0xbc>
    5e98:	2000      	movs	r0, #0
    5e9a:	e7b1      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5e9c:	481f      	ldr	r0, [pc, #124]	; (5f1c <_sercom_get_default_pad+0x138>)
    5e9e:	e7af      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ea0:	481f      	ldr	r0, [pc, #124]	; (5f20 <_sercom_get_default_pad+0x13c>)
    5ea2:	e7ad      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ea4:	2901      	cmp	r1, #1
    5ea6:	d007      	beq.n	5eb8 <_sercom_get_default_pad+0xd4>
    5ea8:	2900      	cmp	r1, #0
    5eaa:	d013      	beq.n	5ed4 <_sercom_get_default_pad+0xf0>
    5eac:	2902      	cmp	r1, #2
    5eae:	d005      	beq.n	5ebc <_sercom_get_default_pad+0xd8>
    5eb0:	2903      	cmp	r1, #3
    5eb2:	d005      	beq.n	5ec0 <_sercom_get_default_pad+0xdc>
	return 0;
    5eb4:	2000      	movs	r0, #0
    5eb6:	e7a3      	b.n	5e00 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    5eb8:	481a      	ldr	r0, [pc, #104]	; (5f24 <_sercom_get_default_pad+0x140>)
    5eba:	e7a1      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ebc:	481a      	ldr	r0, [pc, #104]	; (5f28 <_sercom_get_default_pad+0x144>)
    5ebe:	e79f      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ec0:	481a      	ldr	r0, [pc, #104]	; (5f2c <_sercom_get_default_pad+0x148>)
    5ec2:	e79d      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ec4:	481a      	ldr	r0, [pc, #104]	; (5f30 <_sercom_get_default_pad+0x14c>)
    5ec6:	e79b      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ec8:	2003      	movs	r0, #3
    5eca:	e799      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ecc:	4819      	ldr	r0, [pc, #100]	; (5f34 <_sercom_get_default_pad+0x150>)
    5ece:	e797      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ed0:	4819      	ldr	r0, [pc, #100]	; (5f38 <_sercom_get_default_pad+0x154>)
    5ed2:	e795      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ed4:	4819      	ldr	r0, [pc, #100]	; (5f3c <_sercom_get_default_pad+0x158>)
    5ed6:	e793      	b.n	5e00 <_sercom_get_default_pad+0x1c>
    5ed8:	42000800 	.word	0x42000800
    5edc:	42001000 	.word	0x42001000
    5ee0:	43000400 	.word	0x43000400
    5ee4:	42000c00 	.word	0x42000c00
    5ee8:	42000400 	.word	0x42000400
    5eec:	00050003 	.word	0x00050003
    5ef0:	00060003 	.word	0x00060003
    5ef4:	00070003 	.word	0x00070003
    5ef8:	00010003 	.word	0x00010003
    5efc:	001e0003 	.word	0x001e0003
    5f00:	001f0003 	.word	0x001f0003
    5f04:	00090003 	.word	0x00090003
    5f08:	000a0003 	.word	0x000a0003
    5f0c:	000b0003 	.word	0x000b0003
    5f10:	00110003 	.word	0x00110003
    5f14:	00120003 	.word	0x00120003
    5f18:	00130003 	.word	0x00130003
    5f1c:	000e0003 	.word	0x000e0003
    5f20:	000f0003 	.word	0x000f0003
    5f24:	00170003 	.word	0x00170003
    5f28:	00180003 	.word	0x00180003
    5f2c:	00190003 	.word	0x00190003
    5f30:	00040003 	.word	0x00040003
    5f34:	00080003 	.word	0x00080003
    5f38:	00100003 	.word	0x00100003
    5f3c:	00160003 	.word	0x00160003

00005f40 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5f40:	b530      	push	{r4, r5, lr}
    5f42:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5f44:	4b0b      	ldr	r3, [pc, #44]	; (5f74 <_sercom_get_sercom_inst_index+0x34>)
    5f46:	466a      	mov	r2, sp
    5f48:	cb32      	ldmia	r3!, {r1, r4, r5}
    5f4a:	c232      	stmia	r2!, {r1, r4, r5}
    5f4c:	cb32      	ldmia	r3!, {r1, r4, r5}
    5f4e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5f50:	9b00      	ldr	r3, [sp, #0]
    5f52:	4283      	cmp	r3, r0
    5f54:	d00b      	beq.n	5f6e <_sercom_get_sercom_inst_index+0x2e>
    5f56:	2301      	movs	r3, #1
    5f58:	009a      	lsls	r2, r3, #2
    5f5a:	4669      	mov	r1, sp
    5f5c:	5852      	ldr	r2, [r2, r1]
    5f5e:	4282      	cmp	r2, r0
    5f60:	d006      	beq.n	5f70 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5f62:	3301      	adds	r3, #1
    5f64:	2b06      	cmp	r3, #6
    5f66:	d1f7      	bne.n	5f58 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5f68:	2000      	movs	r0, #0
}
    5f6a:	b007      	add	sp, #28
    5f6c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5f6e:	2300      	movs	r3, #0
			return i;
    5f70:	b2d8      	uxtb	r0, r3
    5f72:	e7fa      	b.n	5f6a <_sercom_get_sercom_inst_index+0x2a>
    5f74:	0001fb24 	.word	0x0001fb24

00005f78 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    5f78:	4770      	bx	lr
	...

00005f7c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    5f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    5f7e:	4b0a      	ldr	r3, [pc, #40]	; (5fa8 <_sercom_set_handler+0x2c>)
    5f80:	781b      	ldrb	r3, [r3, #0]
    5f82:	2b00      	cmp	r3, #0
    5f84:	d10c      	bne.n	5fa0 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5f86:	4f09      	ldr	r7, [pc, #36]	; (5fac <_sercom_set_handler+0x30>)
    5f88:	4e09      	ldr	r6, [pc, #36]	; (5fb0 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    5f8a:	4d0a      	ldr	r5, [pc, #40]	; (5fb4 <_sercom_set_handler+0x38>)
    5f8c:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    5f8e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    5f90:	195a      	adds	r2, r3, r5
    5f92:	6014      	str	r4, [r2, #0]
    5f94:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5f96:	2b18      	cmp	r3, #24
    5f98:	d1f9      	bne.n	5f8e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    5f9a:	2201      	movs	r2, #1
    5f9c:	4b02      	ldr	r3, [pc, #8]	; (5fa8 <_sercom_set_handler+0x2c>)
    5f9e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    5fa0:	0080      	lsls	r0, r0, #2
    5fa2:	4b02      	ldr	r3, [pc, #8]	; (5fac <_sercom_set_handler+0x30>)
    5fa4:	50c1      	str	r1, [r0, r3]
}
    5fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fa8:	20000b6a 	.word	0x20000b6a
    5fac:	20000b6c 	.word	0x20000b6c
    5fb0:	00005f79 	.word	0x00005f79
    5fb4:	20002238 	.word	0x20002238

00005fb8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    5fb8:	b500      	push	{lr}
    5fba:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    5fbc:	2308      	movs	r3, #8
    5fbe:	466a      	mov	r2, sp
    5fc0:	7013      	strb	r3, [r2, #0]
    5fc2:	3301      	adds	r3, #1
    5fc4:	7053      	strb	r3, [r2, #1]
    5fc6:	3301      	adds	r3, #1
    5fc8:	7093      	strb	r3, [r2, #2]
    5fca:	3301      	adds	r3, #1
    5fcc:	70d3      	strb	r3, [r2, #3]
    5fce:	3301      	adds	r3, #1
    5fd0:	7113      	strb	r3, [r2, #4]
    5fd2:	3301      	adds	r3, #1
    5fd4:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    5fd6:	4b03      	ldr	r3, [pc, #12]	; (5fe4 <_sercom_get_interrupt_vector+0x2c>)
    5fd8:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    5fda:	466b      	mov	r3, sp
    5fdc:	5618      	ldrsb	r0, [r3, r0]
}
    5fde:	b003      	add	sp, #12
    5fe0:	bd00      	pop	{pc}
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	00005f41 	.word	0x00005f41

00005fe8 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    5fe8:	b510      	push	{r4, lr}
    5fea:	4b02      	ldr	r3, [pc, #8]	; (5ff4 <SERCOM0_Handler+0xc>)
    5fec:	681b      	ldr	r3, [r3, #0]
    5fee:	2000      	movs	r0, #0
    5ff0:	4798      	blx	r3
    5ff2:	bd10      	pop	{r4, pc}
    5ff4:	20000b6c 	.word	0x20000b6c

00005ff8 <SERCOM1_Handler>:
    5ff8:	b510      	push	{r4, lr}
    5ffa:	4b02      	ldr	r3, [pc, #8]	; (6004 <SERCOM1_Handler+0xc>)
    5ffc:	685b      	ldr	r3, [r3, #4]
    5ffe:	2001      	movs	r0, #1
    6000:	4798      	blx	r3
    6002:	bd10      	pop	{r4, pc}
    6004:	20000b6c 	.word	0x20000b6c

00006008 <SERCOM2_Handler>:
    6008:	b510      	push	{r4, lr}
    600a:	4b02      	ldr	r3, [pc, #8]	; (6014 <SERCOM2_Handler+0xc>)
    600c:	689b      	ldr	r3, [r3, #8]
    600e:	2002      	movs	r0, #2
    6010:	4798      	blx	r3
    6012:	bd10      	pop	{r4, pc}
    6014:	20000b6c 	.word	0x20000b6c

00006018 <SERCOM3_Handler>:
    6018:	b510      	push	{r4, lr}
    601a:	4b02      	ldr	r3, [pc, #8]	; (6024 <SERCOM3_Handler+0xc>)
    601c:	68db      	ldr	r3, [r3, #12]
    601e:	2003      	movs	r0, #3
    6020:	4798      	blx	r3
    6022:	bd10      	pop	{r4, pc}
    6024:	20000b6c 	.word	0x20000b6c

00006028 <SERCOM4_Handler>:
    6028:	b510      	push	{r4, lr}
    602a:	4b02      	ldr	r3, [pc, #8]	; (6034 <SERCOM4_Handler+0xc>)
    602c:	691b      	ldr	r3, [r3, #16]
    602e:	2004      	movs	r0, #4
    6030:	4798      	blx	r3
    6032:	bd10      	pop	{r4, pc}
    6034:	20000b6c 	.word	0x20000b6c

00006038 <SERCOM5_Handler>:
    6038:	b510      	push	{r4, lr}
    603a:	4b02      	ldr	r3, [pc, #8]	; (6044 <SERCOM5_Handler+0xc>)
    603c:	695b      	ldr	r3, [r3, #20]
    603e:	2005      	movs	r0, #5
    6040:	4798      	blx	r3
    6042:	bd10      	pop	{r4, pc}
    6044:	20000b6c 	.word	0x20000b6c

00006048 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6048:	b5f0      	push	{r4, r5, r6, r7, lr}
    604a:	46d6      	mov	lr, sl
    604c:	464f      	mov	r7, r9
    604e:	4646      	mov	r6, r8
    6050:	b5c0      	push	{r6, r7, lr}
    6052:	b08a      	sub	sp, #40	; 0x28
    6054:	0006      	movs	r6, r0
    6056:	000f      	movs	r7, r1
    6058:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    605a:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    605c:	680b      	ldr	r3, [r1, #0]
    605e:	079b      	lsls	r3, r3, #30
    6060:	d40a      	bmi.n	6078 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6062:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    6064:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    6066:	07db      	lsls	r3, r3, #31
    6068:	d400      	bmi.n	606c <spi_init+0x24>
    606a:	e097      	b.n	619c <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    606c:	b00a      	add	sp, #40	; 0x28
    606e:	bc1c      	pop	{r2, r3, r4}
    6070:	4690      	mov	r8, r2
    6072:	4699      	mov	r9, r3
    6074:	46a2      	mov	sl, r4
    6076:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    6078:	6a93      	ldr	r3, [r2, #40]	; 0x28
    607a:	9305      	str	r3, [sp, #20]
    607c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    607e:	9306      	str	r3, [sp, #24]
    6080:	6b13      	ldr	r3, [r2, #48]	; 0x30
    6082:	9307      	str	r3, [sp, #28]
    6084:	6b53      	ldr	r3, [r2, #52]	; 0x34
    6086:	9308      	str	r3, [sp, #32]
    6088:	2500      	movs	r5, #0
    608a:	e00a      	b.n	60a2 <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    608c:	0038      	movs	r0, r7
    608e:	4b9a      	ldr	r3, [pc, #616]	; (62f8 <spi_init+0x2b0>)
    6090:	4798      	blx	r3
    6092:	e00e      	b.n	60b2 <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    6094:	230f      	movs	r3, #15
    6096:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    6098:	4581      	cmp	r9, r0
    609a:	d130      	bne.n	60fe <spi_init+0xb6>
    609c:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    609e:	2d04      	cmp	r5, #4
    60a0:	d031      	beq.n	6106 <spi_init+0xbe>
    60a2:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    60a4:	00ab      	lsls	r3, r5, #2
    60a6:	aa02      	add	r2, sp, #8
    60a8:	200c      	movs	r0, #12
    60aa:	1812      	adds	r2, r2, r0
    60ac:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    60ae:	2800      	cmp	r0, #0
    60b0:	d0ec      	beq.n	608c <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    60b2:	1c43      	adds	r3, r0, #1
    60b4:	d0f2      	beq.n	609c <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    60b6:	0401      	lsls	r1, r0, #16
    60b8:	0c0b      	lsrs	r3, r1, #16
    60ba:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    60bc:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    60be:	b2c3      	uxtb	r3, r0
    60c0:	469c      	mov	ip, r3
		return NULL;
    60c2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    60c4:	0602      	lsls	r2, r0, #24
    60c6:	d405      	bmi.n	60d4 <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    60c8:	4663      	mov	r3, ip
    60ca:	095b      	lsrs	r3, r3, #5
    60cc:	01db      	lsls	r3, r3, #7
    60ce:	4a8b      	ldr	r2, [pc, #556]	; (62fc <spi_init+0x2b4>)
    60d0:	4690      	mov	r8, r2
    60d2:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    60d4:	221f      	movs	r2, #31
    60d6:	4660      	mov	r0, ip
    60d8:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    60da:	1898      	adds	r0, r3, r2
    60dc:	3040      	adds	r0, #64	; 0x40
    60de:	7800      	ldrb	r0, [r0, #0]
    60e0:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    60e2:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    60e4:	4651      	mov	r1, sl
    60e6:	07c9      	lsls	r1, r1, #31
    60e8:	d5d6      	bpl.n	6098 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    60ea:	0852      	lsrs	r2, r2, #1
    60ec:	189b      	adds	r3, r3, r2
    60ee:	3330      	adds	r3, #48	; 0x30
    60f0:	7818      	ldrb	r0, [r3, #0]
    60f2:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    60f4:	4663      	mov	r3, ip
    60f6:	07db      	lsls	r3, r3, #31
    60f8:	d5cc      	bpl.n	6094 <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    60fa:	0900      	lsrs	r0, r0, #4
    60fc:	e7cc      	b.n	6098 <spi_init+0x50>
			module->hw = NULL;
    60fe:	2300      	movs	r3, #0
    6100:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    6102:	201c      	movs	r0, #28
    6104:	e7b2      	b.n	606c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    6106:	2011      	movs	r0, #17
    6108:	4b7d      	ldr	r3, [pc, #500]	; (6300 <spi_init+0x2b8>)
    610a:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    610c:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    610e:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    6110:	2a01      	cmp	r2, #1
    6112:	d026      	beq.n	6162 <spi_init+0x11a>
	ctrla |= config->mux_setting;
    6114:	6863      	ldr	r3, [r4, #4]
    6116:	68a2      	ldr	r2, [r4, #8]
    6118:	4313      	orrs	r3, r2
    611a:	68e2      	ldr	r2, [r4, #12]
    611c:	4313      	orrs	r3, r2
    611e:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    6120:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    6122:	7c61      	ldrb	r1, [r4, #17]
    6124:	2900      	cmp	r1, #0
    6126:	d001      	beq.n	612c <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    6128:	2180      	movs	r1, #128	; 0x80
    612a:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    612c:	7ca1      	ldrb	r1, [r4, #18]
    612e:	2900      	cmp	r1, #0
    6130:	d002      	beq.n	6138 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6132:	2180      	movs	r1, #128	; 0x80
    6134:	0289      	lsls	r1, r1, #10
    6136:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    6138:	7ce1      	ldrb	r1, [r4, #19]
    613a:	2900      	cmp	r1, #0
    613c:	d002      	beq.n	6144 <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    613e:	2180      	movs	r1, #128	; 0x80
    6140:	0089      	lsls	r1, r1, #2
    6142:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    6144:	7d21      	ldrb	r1, [r4, #20]
    6146:	2900      	cmp	r1, #0
    6148:	d002      	beq.n	6150 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    614a:	2180      	movs	r1, #128	; 0x80
    614c:	0189      	lsls	r1, r1, #6
    614e:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    6150:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    6152:	2002      	movs	r0, #2
    6154:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    6156:	428b      	cmp	r3, r1
    6158:	d017      	beq.n	618a <spi_init+0x142>
	module->hw = NULL;
    615a:	2300      	movs	r3, #0
    615c:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    615e:	201c      	movs	r0, #28
    6160:	e784      	b.n	606c <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    6162:	aa04      	add	r2, sp, #16
    6164:	0001      	movs	r1, r0
    6166:	69a0      	ldr	r0, [r4, #24]
    6168:	4b66      	ldr	r3, [pc, #408]	; (6304 <spi_init+0x2bc>)
    616a:	4798      	blx	r3
    616c:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    616e:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    6170:	2b00      	cmp	r3, #0
    6172:	d000      	beq.n	6176 <spi_init+0x12e>
    6174:	e77a      	b.n	606c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    6176:	7b3b      	ldrb	r3, [r7, #12]
    6178:	b2db      	uxtb	r3, r3
    617a:	aa04      	add	r2, sp, #16
    617c:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    617e:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    6180:	429a      	cmp	r2, r3
    6182:	d000      	beq.n	6186 <spi_init+0x13e>
    6184:	e772      	b.n	606c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    6186:	350c      	adds	r5, #12
    6188:	e7c4      	b.n	6114 <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    618a:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    618c:	4293      	cmp	r3, r2
    618e:	d1e4      	bne.n	615a <spi_init+0x112>
		module->mode           = config->mode;
    6190:	7823      	ldrb	r3, [r4, #0]
    6192:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    6194:	7c23      	ldrb	r3, [r4, #16]
    6196:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    6198:	2000      	movs	r0, #0
    619a:	e767      	b.n	606c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    619c:	0008      	movs	r0, r1
    619e:	4b5a      	ldr	r3, [pc, #360]	; (6308 <spi_init+0x2c0>)
    61a0:	4798      	blx	r3
	if (sercom_index == 5) {
    61a2:	2805      	cmp	r0, #5
    61a4:	d100      	bne.n	61a8 <spi_init+0x160>
    61a6:	e09f      	b.n	62e8 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    61a8:	0003      	movs	r3, r0
    61aa:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    61ac:	4957      	ldr	r1, [pc, #348]	; (630c <spi_init+0x2c4>)
    61ae:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    61b0:	2201      	movs	r2, #1
    61b2:	4082      	lsls	r2, r0
    61b4:	432a      	orrs	r2, r5
    61b6:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    61b8:	a909      	add	r1, sp, #36	; 0x24
    61ba:	2524      	movs	r5, #36	; 0x24
    61bc:	5d62      	ldrb	r2, [r4, r5]
    61be:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    61c0:	b2db      	uxtb	r3, r3
    61c2:	9301      	str	r3, [sp, #4]
    61c4:	0018      	movs	r0, r3
    61c6:	4b52      	ldr	r3, [pc, #328]	; (6310 <spi_init+0x2c8>)
    61c8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    61ca:	9801      	ldr	r0, [sp, #4]
    61cc:	4b51      	ldr	r3, [pc, #324]	; (6314 <spi_init+0x2cc>)
    61ce:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    61d0:	5d60      	ldrb	r0, [r4, r5]
    61d2:	2100      	movs	r1, #0
    61d4:	4b50      	ldr	r3, [pc, #320]	; (6318 <spi_init+0x2d0>)
    61d6:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    61d8:	7823      	ldrb	r3, [r4, #0]
    61da:	2b01      	cmp	r3, #1
    61dc:	d019      	beq.n	6212 <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    61de:	6833      	ldr	r3, [r6, #0]
    61e0:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    61e2:	ab04      	add	r3, sp, #16
    61e4:	2280      	movs	r2, #128	; 0x80
    61e6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    61e8:	2200      	movs	r2, #0
    61ea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    61ec:	2101      	movs	r1, #1
    61ee:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    61f0:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    61f2:	7823      	ldrb	r3, [r4, #0]
    61f4:	2b00      	cmp	r3, #0
    61f6:	d101      	bne.n	61fc <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    61f8:	ab04      	add	r3, sp, #16
    61fa:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    61fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    61fe:	9305      	str	r3, [sp, #20]
    6200:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6202:	9306      	str	r3, [sp, #24]
    6204:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6206:	9307      	str	r3, [sp, #28]
    6208:	6b63      	ldr	r3, [r4, #52]	; 0x34
    620a:	9308      	str	r3, [sp, #32]
    620c:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    620e:	ad05      	add	r5, sp, #20
    6210:	e011      	b.n	6236 <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    6212:	683b      	ldr	r3, [r7, #0]
    6214:	220c      	movs	r2, #12
    6216:	4313      	orrs	r3, r2
    6218:	603b      	str	r3, [r7, #0]
    621a:	e7e0      	b.n	61de <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    621c:	4640      	mov	r0, r8
    621e:	4b36      	ldr	r3, [pc, #216]	; (62f8 <spi_init+0x2b0>)
    6220:	4798      	blx	r3
    6222:	e00d      	b.n	6240 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    6224:	a904      	add	r1, sp, #16
    6226:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6228:	0c00      	lsrs	r0, r0, #16
    622a:	b2c0      	uxtb	r0, r0
    622c:	4b3b      	ldr	r3, [pc, #236]	; (631c <spi_init+0x2d4>)
    622e:	4798      	blx	r3
    6230:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    6232:	2f04      	cmp	r7, #4
    6234:	d007      	beq.n	6246 <spi_init+0x1fe>
    6236:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6238:	00bb      	lsls	r3, r7, #2
    623a:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    623c:	2800      	cmp	r0, #0
    623e:	d0ed      	beq.n	621c <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    6240:	1c43      	adds	r3, r0, #1
    6242:	d1ef      	bne.n	6224 <spi_init+0x1dc>
    6244:	e7f4      	b.n	6230 <spi_init+0x1e8>
	module->mode             = config->mode;
    6246:	7823      	ldrb	r3, [r4, #0]
    6248:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    624a:	7c23      	ldrb	r3, [r4, #16]
    624c:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    624e:	7ca3      	ldrb	r3, [r4, #18]
    6250:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    6252:	7d23      	ldrb	r3, [r4, #20]
    6254:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    6256:	2200      	movs	r2, #0
    6258:	ab02      	add	r3, sp, #8
    625a:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    625c:	7823      	ldrb	r3, [r4, #0]
    625e:	2b01      	cmp	r3, #1
    6260:	d02a      	beq.n	62b8 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    6262:	6863      	ldr	r3, [r4, #4]
    6264:	68a2      	ldr	r2, [r4, #8]
    6266:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    6268:	68e2      	ldr	r2, [r4, #12]
    626a:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    626c:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    626e:	7c62      	ldrb	r2, [r4, #17]
    6270:	2a00      	cmp	r2, #0
    6272:	d103      	bne.n	627c <spi_init+0x234>
    6274:	4a2a      	ldr	r2, [pc, #168]	; (6320 <spi_init+0x2d8>)
    6276:	7892      	ldrb	r2, [r2, #2]
    6278:	0792      	lsls	r2, r2, #30
    627a:	d501      	bpl.n	6280 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    627c:	2280      	movs	r2, #128	; 0x80
    627e:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    6280:	7ca2      	ldrb	r2, [r4, #18]
    6282:	2a00      	cmp	r2, #0
    6284:	d002      	beq.n	628c <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    6286:	2280      	movs	r2, #128	; 0x80
    6288:	0292      	lsls	r2, r2, #10
    628a:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    628c:	7ce2      	ldrb	r2, [r4, #19]
    628e:	2a00      	cmp	r2, #0
    6290:	d002      	beq.n	6298 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    6292:	2280      	movs	r2, #128	; 0x80
    6294:	0092      	lsls	r2, r2, #2
    6296:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    6298:	7d22      	ldrb	r2, [r4, #20]
    629a:	2a00      	cmp	r2, #0
    629c:	d002      	beq.n	62a4 <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    629e:	2280      	movs	r2, #128	; 0x80
    62a0:	0192      	lsls	r2, r2, #6
    62a2:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    62a4:	4642      	mov	r2, r8
    62a6:	6812      	ldr	r2, [r2, #0]
    62a8:	4313      	orrs	r3, r2
    62aa:	4642      	mov	r2, r8
    62ac:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    62ae:	6853      	ldr	r3, [r2, #4]
    62b0:	430b      	orrs	r3, r1
    62b2:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    62b4:	2000      	movs	r0, #0
    62b6:	e6d9      	b.n	606c <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    62b8:	6830      	ldr	r0, [r6, #0]
    62ba:	4b13      	ldr	r3, [pc, #76]	; (6308 <spi_init+0x2c0>)
    62bc:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    62be:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    62c0:	b2c0      	uxtb	r0, r0
    62c2:	4b0f      	ldr	r3, [pc, #60]	; (6300 <spi_init+0x2b8>)
    62c4:	4798      	blx	r3
    62c6:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    62c8:	ab02      	add	r3, sp, #8
    62ca:	1d9a      	adds	r2, r3, #6
    62cc:	69a0      	ldr	r0, [r4, #24]
    62ce:	4b0d      	ldr	r3, [pc, #52]	; (6304 <spi_init+0x2bc>)
    62d0:	4798      	blx	r3
    62d2:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    62d4:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    62d6:	2b00      	cmp	r3, #0
    62d8:	d000      	beq.n	62dc <spi_init+0x294>
    62da:	e6c7      	b.n	606c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    62dc:	ab02      	add	r3, sp, #8
    62de:	3306      	adds	r3, #6
    62e0:	781b      	ldrb	r3, [r3, #0]
    62e2:	4642      	mov	r2, r8
    62e4:	7313      	strb	r3, [r2, #12]
    62e6:	e7bc      	b.n	6262 <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    62e8:	4a08      	ldr	r2, [pc, #32]	; (630c <spi_init+0x2c4>)
    62ea:	6a13      	ldr	r3, [r2, #32]
    62ec:	2102      	movs	r1, #2
    62ee:	430b      	orrs	r3, r1
    62f0:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    62f2:	2318      	movs	r3, #24
    62f4:	e760      	b.n	61b8 <spi_init+0x170>
    62f6:	46c0      	nop			; (mov r8, r8)
    62f8:	00005de5 	.word	0x00005de5
    62fc:	40002800 	.word	0x40002800
    6300:	00007261 	.word	0x00007261
    6304:	00005cdb 	.word	0x00005cdb
    6308:	00005f41 	.word	0x00005f41
    630c:	40000400 	.word	0x40000400
    6310:	0000723d 	.word	0x0000723d
    6314:	000071cd 	.word	0x000071cd
    6318:	00005d99 	.word	0x00005d99
    631c:	00007369 	.word	0x00007369
    6320:	41002000 	.word	0x41002000

00006324 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    6324:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    6326:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    6328:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    632a:	2c01      	cmp	r4, #1
    632c:	d001      	beq.n	6332 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    632e:	0018      	movs	r0, r3
    6330:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    6332:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    6334:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    6336:	2c00      	cmp	r4, #0
    6338:	d1f9      	bne.n	632e <spi_select_slave+0xa>
		if (select) {
    633a:	2a00      	cmp	r2, #0
    633c:	d058      	beq.n	63f0 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    633e:	784b      	ldrb	r3, [r1, #1]
    6340:	2b00      	cmp	r3, #0
    6342:	d044      	beq.n	63ce <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    6344:	6803      	ldr	r3, [r0, #0]
    6346:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    6348:	07db      	lsls	r3, r3, #31
    634a:	d410      	bmi.n	636e <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    634c:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    634e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6350:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6352:	2900      	cmp	r1, #0
    6354:	d104      	bne.n	6360 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    6356:	0953      	lsrs	r3, r2, #5
    6358:	01db      	lsls	r3, r3, #7
    635a:	492e      	ldr	r1, [pc, #184]	; (6414 <spi_select_slave+0xf0>)
    635c:	468c      	mov	ip, r1
    635e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6360:	211f      	movs	r1, #31
    6362:	4011      	ands	r1, r2
    6364:	2201      	movs	r2, #1
    6366:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    6368:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    636a:	2305      	movs	r3, #5
    636c:	e7df      	b.n	632e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    636e:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    6370:	09d4      	lsrs	r4, r2, #7
		return NULL;
    6372:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6374:	2c00      	cmp	r4, #0
    6376:	d104      	bne.n	6382 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    6378:	0953      	lsrs	r3, r2, #5
    637a:	01db      	lsls	r3, r3, #7
    637c:	4c25      	ldr	r4, [pc, #148]	; (6414 <spi_select_slave+0xf0>)
    637e:	46a4      	mov	ip, r4
    6380:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6382:	241f      	movs	r4, #31
    6384:	4014      	ands	r4, r2
    6386:	2201      	movs	r2, #1
    6388:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    638a:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    638c:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    638e:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    6390:	07d2      	lsls	r2, r2, #31
    6392:	d501      	bpl.n	6398 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6394:	788a      	ldrb	r2, [r1, #2]
    6396:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    6398:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    639a:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    639c:	2a00      	cmp	r2, #0
    639e:	d1c6      	bne.n	632e <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    63a0:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    63a2:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    63a4:	7e13      	ldrb	r3, [r2, #24]
    63a6:	420b      	tst	r3, r1
    63a8:	d0fc      	beq.n	63a4 <spi_select_slave+0x80>
    63aa:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    63ac:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    63ae:	0749      	lsls	r1, r1, #29
    63b0:	d5bd      	bpl.n	632e <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    63b2:	8b53      	ldrh	r3, [r2, #26]
    63b4:	075b      	lsls	r3, r3, #29
    63b6:	d501      	bpl.n	63bc <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    63b8:	2304      	movs	r3, #4
    63ba:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    63bc:	7983      	ldrb	r3, [r0, #6]
    63be:	2b01      	cmp	r3, #1
    63c0:	d002      	beq.n	63c8 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    63c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    63c4:	2300      	movs	r3, #0
    63c6:	e7b2      	b.n	632e <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    63c8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    63ca:	2300      	movs	r3, #0
    63cc:	e7af      	b.n	632e <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    63ce:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    63d0:	09d1      	lsrs	r1, r2, #7
		return NULL;
    63d2:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    63d4:	2900      	cmp	r1, #0
    63d6:	d104      	bne.n	63e2 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    63d8:	0953      	lsrs	r3, r2, #5
    63da:	01db      	lsls	r3, r3, #7
    63dc:	490d      	ldr	r1, [pc, #52]	; (6414 <spi_select_slave+0xf0>)
    63de:	468c      	mov	ip, r1
    63e0:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    63e2:	211f      	movs	r1, #31
    63e4:	4011      	ands	r1, r2
    63e6:	2201      	movs	r2, #1
    63e8:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    63ea:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    63ec:	2300      	movs	r3, #0
    63ee:	e79e      	b.n	632e <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    63f0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    63f2:	09d1      	lsrs	r1, r2, #7
		return NULL;
    63f4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    63f6:	2900      	cmp	r1, #0
    63f8:	d104      	bne.n	6404 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    63fa:	0953      	lsrs	r3, r2, #5
    63fc:	01db      	lsls	r3, r3, #7
    63fe:	4905      	ldr	r1, [pc, #20]	; (6414 <spi_select_slave+0xf0>)
    6400:	468c      	mov	ip, r1
    6402:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6404:	211f      	movs	r1, #31
    6406:	4011      	ands	r1, r2
    6408:	2201      	movs	r2, #1
    640a:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    640c:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    640e:	2300      	movs	r3, #0
    6410:	e78d      	b.n	632e <spi_select_slave+0xa>
    6412:	46c0      	nop			; (mov r8, r8)
    6414:	40002800 	.word	0x40002800

00006418 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    6418:	b5f0      	push	{r4, r5, r6, r7, lr}
    641a:	46de      	mov	lr, fp
    641c:	4657      	mov	r7, sl
    641e:	464e      	mov	r6, r9
    6420:	4645      	mov	r5, r8
    6422:	b5e0      	push	{r5, r6, r7, lr}
    6424:	b091      	sub	sp, #68	; 0x44
    6426:	0005      	movs	r5, r0
    6428:	000c      	movs	r4, r1
    642a:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    642c:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    642e:	0008      	movs	r0, r1
    6430:	4bc4      	ldr	r3, [pc, #784]	; (6744 <usart_init+0x32c>)
    6432:	4798      	blx	r3
    6434:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	if (sercom_index == 5) {
    6436:	2805      	cmp	r0, #5
    6438:	d00d      	beq.n	6456 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    643a:	0007      	movs	r7, r0
    643c:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    643e:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6440:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    6442:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    6444:	07c9      	lsls	r1, r1, #31
    6446:	d509      	bpl.n	645c <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    6448:	b011      	add	sp, #68	; 0x44
    644a:	bc3c      	pop	{r2, r3, r4, r5}
    644c:	4690      	mov	r8, r2
    644e:	4699      	mov	r9, r3
    6450:	46a2      	mov	sl, r4
    6452:	46ab      	mov	fp, r5
    6454:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    6456:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    6458:	2301      	movs	r3, #1
    645a:	e7f1      	b.n	6440 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    645c:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    645e:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    6460:	0789      	lsls	r1, r1, #30
    6462:	d4f1      	bmi.n	6448 <usart_init+0x30>
	if (sercom_index == 5) {
    6464:	2a05      	cmp	r2, #5
    6466:	d049      	beq.n	64fc <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    6468:	49b7      	ldr	r1, [pc, #732]	; (6748 <usart_init+0x330>)
    646a:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    646c:	2201      	movs	r2, #1
    646e:	409a      	lsls	r2, r3
    6470:	0013      	movs	r3, r2
    6472:	4303      	orrs	r3, r0
    6474:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    6476:	a90f      	add	r1, sp, #60	; 0x3c
    6478:	232d      	movs	r3, #45	; 0x2d
    647a:	4698      	mov	r8, r3
    647c:	5cf3      	ldrb	r3, [r6, r3]
    647e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    6480:	b2ff      	uxtb	r7, r7
    6482:	0038      	movs	r0, r7
    6484:	4bb1      	ldr	r3, [pc, #708]	; (674c <usart_init+0x334>)
    6486:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    6488:	0038      	movs	r0, r7
    648a:	4bb1      	ldr	r3, [pc, #708]	; (6750 <usart_init+0x338>)
    648c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    648e:	4643      	mov	r3, r8
    6490:	5cf0      	ldrb	r0, [r6, r3]
    6492:	2100      	movs	r1, #0
    6494:	4baf      	ldr	r3, [pc, #700]	; (6754 <usart_init+0x33c>)
    6496:	4798      	blx	r3
	module->character_size = config->character_size;
    6498:	7af3      	ldrb	r3, [r6, #11]
    649a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    649c:	2324      	movs	r3, #36	; 0x24
    649e:	5cf3      	ldrb	r3, [r6, r3]
    64a0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    64a2:	2325      	movs	r3, #37	; 0x25
    64a4:	5cf3      	ldrb	r3, [r6, r3]
    64a6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    64a8:	7ef3      	ldrb	r3, [r6, #27]
    64aa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    64ac:	7f33      	ldrb	r3, [r6, #28]
    64ae:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    64b0:	682b      	ldr	r3, [r5, #0]
    64b2:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    64b4:	0018      	movs	r0, r3
    64b6:	4ba3      	ldr	r3, [pc, #652]	; (6744 <usart_init+0x32c>)
    64b8:	4798      	blx	r3
	if (sercom_index == 5) {
    64ba:	2805      	cmp	r0, #5
    64bc:	d026      	beq.n	650c <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    64be:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    64c0:	2200      	movs	r2, #0
    64c2:	230e      	movs	r3, #14
    64c4:	a906      	add	r1, sp, #24
    64c6:	468c      	mov	ip, r1
    64c8:	4463      	add	r3, ip
    64ca:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    64cc:	8a32      	ldrh	r2, [r6, #16]
    64ce:	9202      	str	r2, [sp, #8]
    64d0:	2380      	movs	r3, #128	; 0x80
    64d2:	01db      	lsls	r3, r3, #7
    64d4:	429a      	cmp	r2, r3
    64d6:	d100      	bne.n	64da <usart_init+0xc2>
    64d8:	e0a7      	b.n	662a <usart_init+0x212>
    64da:	d919      	bls.n	6510 <usart_init+0xf8>
    64dc:	23c0      	movs	r3, #192	; 0xc0
    64de:	01db      	lsls	r3, r3, #7
    64e0:	9a02      	ldr	r2, [sp, #8]
    64e2:	429a      	cmp	r2, r3
    64e4:	d100      	bne.n	64e8 <usart_init+0xd0>
    64e6:	e09b      	b.n	6620 <usart_init+0x208>
    64e8:	2380      	movs	r3, #128	; 0x80
    64ea:	021b      	lsls	r3, r3, #8
    64ec:	429a      	cmp	r2, r3
    64ee:	d000      	beq.n	64f2 <usart_init+0xda>
    64f0:	e123      	b.n	673a <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    64f2:	2303      	movs	r3, #3
    64f4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    64f6:	2300      	movs	r3, #0
    64f8:	9307      	str	r3, [sp, #28]
    64fa:	e012      	b.n	6522 <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    64fc:	4992      	ldr	r1, [pc, #584]	; (6748 <usart_init+0x330>)
    64fe:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    6500:	3a04      	subs	r2, #4
    6502:	409a      	lsls	r2, r3
    6504:	0013      	movs	r3, r2
    6506:	4303      	orrs	r3, r0
    6508:	620b      	str	r3, [r1, #32]
    650a:	e7b4      	b.n	6476 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    650c:	2018      	movs	r0, #24
    650e:	e7d7      	b.n	64c0 <usart_init+0xa8>
	switch (config->sample_rate) {
    6510:	2380      	movs	r3, #128	; 0x80
    6512:	019b      	lsls	r3, r3, #6
    6514:	429a      	cmp	r2, r3
    6516:	d000      	beq.n	651a <usart_init+0x102>
    6518:	e10f      	b.n	673a <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    651a:	2310      	movs	r3, #16
    651c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    651e:	3b0f      	subs	r3, #15
    6520:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    6522:	6833      	ldr	r3, [r6, #0]
    6524:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    6526:	68f3      	ldr	r3, [r6, #12]
    6528:	469b      	mov	fp, r3
		config->sample_adjustment |
    652a:	6973      	ldr	r3, [r6, #20]
    652c:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    652e:	7e33      	ldrb	r3, [r6, #24]
    6530:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6532:	2326      	movs	r3, #38	; 0x26
    6534:	5cf3      	ldrb	r3, [r6, r3]
    6536:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    6538:	6873      	ldr	r3, [r6, #4]
    653a:	4699      	mov	r9, r3
	switch (transfer_mode)
    653c:	2b00      	cmp	r3, #0
    653e:	d100      	bne.n	6542 <usart_init+0x12a>
    6540:	e09b      	b.n	667a <usart_init+0x262>
    6542:	2380      	movs	r3, #128	; 0x80
    6544:	055b      	lsls	r3, r3, #21
    6546:	4599      	cmp	r9, r3
    6548:	d104      	bne.n	6554 <usart_init+0x13c>
			if (!config->use_external_clock) {
    654a:	2327      	movs	r3, #39	; 0x27
    654c:	5cf3      	ldrb	r3, [r6, r3]
    654e:	2b00      	cmp	r3, #0
    6550:	d100      	bne.n	6554 <usart_init+0x13c>
    6552:	e080      	b.n	6656 <usart_init+0x23e>
	if(config->encoding_format_enable) {
    6554:	7e73      	ldrb	r3, [r6, #25]
    6556:	2b00      	cmp	r3, #0
    6558:	d002      	beq.n	6560 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    655a:	7eb3      	ldrb	r3, [r6, #26]
    655c:	4642      	mov	r2, r8
    655e:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
    6560:	230e      	movs	r3, #14
    6562:	aa06      	add	r2, sp, #24
    6564:	4694      	mov	ip, r2
    6566:	4463      	add	r3, ip
    6568:	881b      	ldrh	r3, [r3, #0]
    656a:	4642      	mov	r2, r8
    656c:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    656e:	9b05      	ldr	r3, [sp, #20]
    6570:	465a      	mov	r2, fp
    6572:	4313      	orrs	r3, r2
    6574:	9a03      	ldr	r2, [sp, #12]
    6576:	4313      	orrs	r3, r2
    6578:	464a      	mov	r2, r9
    657a:	4313      	orrs	r3, r2
    657c:	9f02      	ldr	r7, [sp, #8]
    657e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    6580:	9b04      	ldr	r3, [sp, #16]
    6582:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    6584:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    6586:	4653      	mov	r3, sl
    6588:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    658a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    658c:	2327      	movs	r3, #39	; 0x27
    658e:	5cf3      	ldrb	r3, [r6, r3]
    6590:	2b00      	cmp	r3, #0
    6592:	d101      	bne.n	6598 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    6594:	3304      	adds	r3, #4
    6596:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    6598:	7e73      	ldrb	r3, [r6, #25]
    659a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    659c:	7f32      	ldrb	r2, [r6, #28]
    659e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    65a0:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    65a2:	7f72      	ldrb	r2, [r6, #29]
    65a4:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    65a6:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    65a8:	2224      	movs	r2, #36	; 0x24
    65aa:	5cb2      	ldrb	r2, [r6, r2]
    65ac:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    65ae:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    65b0:	2225      	movs	r2, #37	; 0x25
    65b2:	5cb2      	ldrb	r2, [r6, r2]
    65b4:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    65b6:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    65b8:	7ab1      	ldrb	r1, [r6, #10]
    65ba:	7af2      	ldrb	r2, [r6, #11]
    65bc:	4311      	orrs	r1, r2
    65be:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    65c0:	8933      	ldrh	r3, [r6, #8]
    65c2:	2bff      	cmp	r3, #255	; 0xff
    65c4:	d07d      	beq.n	66c2 <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    65c6:	2280      	movs	r2, #128	; 0x80
    65c8:	0452      	lsls	r2, r2, #17
    65ca:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    65cc:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    65ce:	232c      	movs	r3, #44	; 0x2c
    65d0:	5cf3      	ldrb	r3, [r6, r3]
    65d2:	2b00      	cmp	r3, #0
    65d4:	d103      	bne.n	65de <usart_init+0x1c6>
    65d6:	4b60      	ldr	r3, [pc, #384]	; (6758 <usart_init+0x340>)
    65d8:	789b      	ldrb	r3, [r3, #2]
    65da:	079b      	lsls	r3, r3, #30
    65dc:	d501      	bpl.n	65e2 <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    65de:	2380      	movs	r3, #128	; 0x80
    65e0:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    65e2:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    65e4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    65e6:	2b00      	cmp	r3, #0
    65e8:	d1fc      	bne.n	65e4 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
    65ea:	4643      	mov	r3, r8
    65ec:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    65ee:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    65f0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    65f2:	2b00      	cmp	r3, #0
    65f4:	d1fc      	bne.n	65f0 <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
    65f6:	4643      	mov	r3, r8
    65f8:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    65fa:	ab0e      	add	r3, sp, #56	; 0x38
    65fc:	2280      	movs	r2, #128	; 0x80
    65fe:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6600:	2200      	movs	r2, #0
    6602:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    6604:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    6606:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    6608:	6b33      	ldr	r3, [r6, #48]	; 0x30
    660a:	930a      	str	r3, [sp, #40]	; 0x28
    660c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    660e:	930b      	str	r3, [sp, #44]	; 0x2c
    6610:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    6612:	930c      	str	r3, [sp, #48]	; 0x30
    6614:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    6616:	9302      	str	r3, [sp, #8]
    6618:	930d      	str	r3, [sp, #52]	; 0x34
    661a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    661c:	ae0a      	add	r6, sp, #40	; 0x28
    661e:	e05e      	b.n	66de <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6620:	2308      	movs	r3, #8
    6622:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    6624:	3b07      	subs	r3, #7
    6626:	9307      	str	r3, [sp, #28]
    6628:	e77b      	b.n	6522 <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    662a:	6833      	ldr	r3, [r6, #0]
    662c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    662e:	68f3      	ldr	r3, [r6, #12]
    6630:	469b      	mov	fp, r3
		config->sample_adjustment |
    6632:	6973      	ldr	r3, [r6, #20]
    6634:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    6636:	7e33      	ldrb	r3, [r6, #24]
    6638:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    663a:	2326      	movs	r3, #38	; 0x26
    663c:	5cf3      	ldrb	r3, [r6, r3]
    663e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    6640:	6873      	ldr	r3, [r6, #4]
    6642:	4699      	mov	r9, r3
	switch (transfer_mode)
    6644:	2b00      	cmp	r3, #0
    6646:	d014      	beq.n	6672 <usart_init+0x25a>
    6648:	2380      	movs	r3, #128	; 0x80
    664a:	055b      	lsls	r3, r3, #21
    664c:	4599      	cmp	r9, r3
    664e:	d100      	bne.n	6652 <usart_init+0x23a>
    6650:	e77b      	b.n	654a <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    6652:	2000      	movs	r0, #0
    6654:	e020      	b.n	6698 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    6656:	6a33      	ldr	r3, [r6, #32]
    6658:	001f      	movs	r7, r3
    665a:	b2c0      	uxtb	r0, r0
    665c:	4b3f      	ldr	r3, [pc, #252]	; (675c <usart_init+0x344>)
    665e:	4798      	blx	r3
    6660:	0001      	movs	r1, r0
    6662:	220e      	movs	r2, #14
    6664:	ab06      	add	r3, sp, #24
    6666:	469c      	mov	ip, r3
    6668:	4462      	add	r2, ip
    666a:	0038      	movs	r0, r7
    666c:	4b3c      	ldr	r3, [pc, #240]	; (6760 <usart_init+0x348>)
    666e:	4798      	blx	r3
    6670:	e012      	b.n	6698 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    6672:	2308      	movs	r3, #8
    6674:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    6676:	2300      	movs	r3, #0
    6678:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    667a:	2327      	movs	r3, #39	; 0x27
    667c:	5cf3      	ldrb	r3, [r6, r3]
    667e:	2b00      	cmp	r3, #0
    6680:	d00e      	beq.n	66a0 <usart_init+0x288>
				status_code =
    6682:	9b06      	ldr	r3, [sp, #24]
    6684:	9300      	str	r3, [sp, #0]
    6686:	9b07      	ldr	r3, [sp, #28]
    6688:	220e      	movs	r2, #14
    668a:	a906      	add	r1, sp, #24
    668c:	468c      	mov	ip, r1
    668e:	4462      	add	r2, ip
    6690:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    6692:	6a30      	ldr	r0, [r6, #32]
    6694:	4f33      	ldr	r7, [pc, #204]	; (6764 <usart_init+0x34c>)
    6696:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    6698:	2800      	cmp	r0, #0
    669a:	d000      	beq.n	669e <usart_init+0x286>
    669c:	e6d4      	b.n	6448 <usart_init+0x30>
    669e:	e759      	b.n	6554 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    66a0:	6a33      	ldr	r3, [r6, #32]
    66a2:	001f      	movs	r7, r3
    66a4:	b2c0      	uxtb	r0, r0
    66a6:	4b2d      	ldr	r3, [pc, #180]	; (675c <usart_init+0x344>)
    66a8:	4798      	blx	r3
    66aa:	0001      	movs	r1, r0
				status_code =
    66ac:	9b06      	ldr	r3, [sp, #24]
    66ae:	9300      	str	r3, [sp, #0]
    66b0:	9b07      	ldr	r3, [sp, #28]
    66b2:	220e      	movs	r2, #14
    66b4:	a806      	add	r0, sp, #24
    66b6:	4684      	mov	ip, r0
    66b8:	4462      	add	r2, ip
    66ba:	0038      	movs	r0, r7
    66bc:	4f29      	ldr	r7, [pc, #164]	; (6764 <usart_init+0x34c>)
    66be:	47b8      	blx	r7
    66c0:	e7ea      	b.n	6698 <usart_init+0x280>
		if(config->lin_slave_enable) {
    66c2:	7ef3      	ldrb	r3, [r6, #27]
    66c4:	2b00      	cmp	r3, #0
    66c6:	d082      	beq.n	65ce <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    66c8:	2380      	movs	r3, #128	; 0x80
    66ca:	04db      	lsls	r3, r3, #19
    66cc:	431f      	orrs	r7, r3
    66ce:	e77e      	b.n	65ce <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    66d0:	0020      	movs	r0, r4
    66d2:	4b25      	ldr	r3, [pc, #148]	; (6768 <usart_init+0x350>)
    66d4:	4798      	blx	r3
    66d6:	e007      	b.n	66e8 <usart_init+0x2d0>
    66d8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    66da:	2f04      	cmp	r7, #4
    66dc:	d00d      	beq.n	66fa <usart_init+0x2e2>
    66de:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    66e0:	00bb      	lsls	r3, r7, #2
    66e2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    66e4:	2800      	cmp	r0, #0
    66e6:	d0f3      	beq.n	66d0 <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
    66e8:	1c43      	adds	r3, r0, #1
    66ea:	d0f5      	beq.n	66d8 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    66ec:	a90e      	add	r1, sp, #56	; 0x38
    66ee:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    66f0:	0c00      	lsrs	r0, r0, #16
    66f2:	b2c0      	uxtb	r0, r0
    66f4:	4b1d      	ldr	r3, [pc, #116]	; (676c <usart_init+0x354>)
    66f6:	4798      	blx	r3
    66f8:	e7ee      	b.n	66d8 <usart_init+0x2c0>
		module->callback[i]            = NULL;
    66fa:	2300      	movs	r3, #0
    66fc:	60eb      	str	r3, [r5, #12]
    66fe:	612b      	str	r3, [r5, #16]
    6700:	616b      	str	r3, [r5, #20]
    6702:	61ab      	str	r3, [r5, #24]
    6704:	61eb      	str	r3, [r5, #28]
    6706:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    6708:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    670a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    670c:	2200      	movs	r2, #0
    670e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    6710:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    6712:	3330      	adds	r3, #48	; 0x30
    6714:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    6716:	3301      	adds	r3, #1
    6718:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    671a:	3301      	adds	r3, #1
    671c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    671e:	3301      	adds	r3, #1
    6720:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    6722:	6828      	ldr	r0, [r5, #0]
    6724:	4b07      	ldr	r3, [pc, #28]	; (6744 <usart_init+0x32c>)
    6726:	4798      	blx	r3
    6728:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    672a:	4911      	ldr	r1, [pc, #68]	; (6770 <usart_init+0x358>)
    672c:	4b11      	ldr	r3, [pc, #68]	; (6774 <usart_init+0x35c>)
    672e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    6730:	00a4      	lsls	r4, r4, #2
    6732:	4b11      	ldr	r3, [pc, #68]	; (6778 <usart_init+0x360>)
    6734:	50e5      	str	r5, [r4, r3]
	return status_code;
    6736:	2000      	movs	r0, #0
    6738:	e686      	b.n	6448 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    673a:	2310      	movs	r3, #16
    673c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    673e:	2300      	movs	r3, #0
    6740:	9307      	str	r3, [sp, #28]
    6742:	e6ee      	b.n	6522 <usart_init+0x10a>
    6744:	00005f41 	.word	0x00005f41
    6748:	40000400 	.word	0x40000400
    674c:	0000723d 	.word	0x0000723d
    6750:	000071cd 	.word	0x000071cd
    6754:	00005d99 	.word	0x00005d99
    6758:	41002000 	.word	0x41002000
    675c:	00007261 	.word	0x00007261
    6760:	00005cdb 	.word	0x00005cdb
    6764:	00005d05 	.word	0x00005d05
    6768:	00005de5 	.word	0x00005de5
    676c:	00007369 	.word	0x00007369
    6770:	00006961 	.word	0x00006961
    6774:	00005f7d 	.word	0x00005f7d
    6778:	20002238 	.word	0x20002238

0000677c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    677c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    677e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    6780:	2a00      	cmp	r2, #0
    6782:	d101      	bne.n	6788 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    6784:	0018      	movs	r0, r3
    6786:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    6788:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    678a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    678c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    678e:	2a00      	cmp	r2, #0
    6790:	d1f8      	bne.n	6784 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6792:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
    6794:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    6796:	2102      	movs	r1, #2
    6798:	7e13      	ldrb	r3, [r2, #24]
    679a:	420b      	tst	r3, r1
    679c:	d0fc      	beq.n	6798 <usart_write_wait+0x1c>
	return STATUS_OK;
    679e:	2300      	movs	r3, #0
    67a0:	e7f0      	b.n	6784 <usart_write_wait+0x8>

000067a2 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    67a2:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    67a4:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    67a6:	2a00      	cmp	r2, #0
    67a8:	d101      	bne.n	67ae <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    67aa:	0018      	movs	r0, r3
    67ac:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    67ae:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    67b0:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    67b2:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    67b4:	2a00      	cmp	r2, #0
    67b6:	d1f8      	bne.n	67aa <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    67b8:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    67ba:	7e10      	ldrb	r0, [r2, #24]
    67bc:	0740      	lsls	r0, r0, #29
    67be:	d5f4      	bpl.n	67aa <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    67c0:	8b53      	ldrh	r3, [r2, #26]
    67c2:	b2db      	uxtb	r3, r3
	if (error_code) {
    67c4:	0698      	lsls	r0, r3, #26
    67c6:	d01d      	beq.n	6804 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    67c8:	0798      	lsls	r0, r3, #30
    67ca:	d503      	bpl.n	67d4 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    67cc:	2302      	movs	r3, #2
    67ce:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    67d0:	3318      	adds	r3, #24
    67d2:	e7ea      	b.n	67aa <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    67d4:	0758      	lsls	r0, r3, #29
    67d6:	d503      	bpl.n	67e0 <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    67d8:	2304      	movs	r3, #4
    67da:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    67dc:	331a      	adds	r3, #26
    67de:	e7e4      	b.n	67aa <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    67e0:	07d8      	lsls	r0, r3, #31
    67e2:	d503      	bpl.n	67ec <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    67e4:	2301      	movs	r3, #1
    67e6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    67e8:	3312      	adds	r3, #18
    67ea:	e7de      	b.n	67aa <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    67ec:	06d8      	lsls	r0, r3, #27
    67ee:	d503      	bpl.n	67f8 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    67f0:	2310      	movs	r3, #16
    67f2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    67f4:	3332      	adds	r3, #50	; 0x32
    67f6:	e7d8      	b.n	67aa <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    67f8:	069b      	lsls	r3, r3, #26
    67fa:	d503      	bpl.n	6804 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    67fc:	2320      	movs	r3, #32
    67fe:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    6800:	3321      	adds	r3, #33	; 0x21
    6802:	e7d2      	b.n	67aa <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    6804:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    6806:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    6808:	2300      	movs	r3, #0
    680a:	e7ce      	b.n	67aa <usart_read_wait+0x8>

0000680c <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    680c:	b5f0      	push	{r4, r5, r6, r7, lr}
    680e:	46ce      	mov	lr, r9
    6810:	4647      	mov	r7, r8
    6812:	b580      	push	{r7, lr}
    6814:	b083      	sub	sp, #12
    6816:	0005      	movs	r5, r0
    6818:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    681a:	2017      	movs	r0, #23
	if (length == 0) {
    681c:	2a00      	cmp	r2, #0
    681e:	d104      	bne.n	682a <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
    6820:	b003      	add	sp, #12
    6822:	bc0c      	pop	{r2, r3}
    6824:	4690      	mov	r8, r2
    6826:	4699      	mov	r9, r3
    6828:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
    682a:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
    682c:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
    682e:	2b00      	cmp	r3, #0
    6830:	d0f6      	beq.n	6820 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
    6832:	682c      	ldr	r4, [r5, #0]
	while (length--) {
    6834:	3a01      	subs	r2, #1
    6836:	b293      	uxth	r3, r2
    6838:	4699      	mov	r9, r3
    683a:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    683c:	2701      	movs	r7, #1
	while (length--) {
    683e:	4b20      	ldr	r3, [pc, #128]	; (68c0 <usart_write_buffer_wait+0xb4>)
    6840:	4698      	mov	r8, r3
    6842:	e011      	b.n	6868 <usart_write_buffer_wait+0x5c>
		uint16_t data_to_send = tx_data[tx_pos++];
    6844:	1c73      	adds	r3, r6, #1
    6846:	b29b      	uxth	r3, r3
    6848:	9a01      	ldr	r2, [sp, #4]
    684a:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    684c:	796a      	ldrb	r2, [r5, #5]
    684e:	2a01      	cmp	r2, #1
    6850:	d017      	beq.n	6882 <usart_write_buffer_wait+0x76>
		uint16_t data_to_send = tx_data[tx_pos++];
    6852:	b289      	uxth	r1, r1
    6854:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
    6856:	0028      	movs	r0, r5
    6858:	4b1a      	ldr	r3, [pc, #104]	; (68c4 <usart_write_buffer_wait+0xb8>)
    685a:	4798      	blx	r3
	while (length--) {
    685c:	464b      	mov	r3, r9
    685e:	3b01      	subs	r3, #1
    6860:	b29b      	uxth	r3, r3
    6862:	4699      	mov	r9, r3
    6864:	4543      	cmp	r3, r8
    6866:	d013      	beq.n	6890 <usart_write_buffer_wait+0x84>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
    6868:	7e23      	ldrb	r3, [r4, #24]
    686a:	423b      	tst	r3, r7
    686c:	d1ea      	bne.n	6844 <usart_write_buffer_wait+0x38>
    686e:	4b14      	ldr	r3, [pc, #80]	; (68c0 <usart_write_buffer_wait+0xb4>)
    6870:	7e22      	ldrb	r2, [r4, #24]
    6872:	423a      	tst	r2, r7
    6874:	d1e6      	bne.n	6844 <usart_write_buffer_wait+0x38>
			} else if (i == USART_TIMEOUT) {
    6876:	2b01      	cmp	r3, #1
    6878:	d019      	beq.n	68ae <usart_write_buffer_wait+0xa2>
    687a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    687c:	2b00      	cmp	r3, #0
    687e:	d1f7      	bne.n	6870 <usart_write_buffer_wait+0x64>
    6880:	e7e0      	b.n	6844 <usart_write_buffer_wait+0x38>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6882:	3602      	adds	r6, #2
    6884:	b2b6      	uxth	r6, r6
    6886:	9a01      	ldr	r2, [sp, #4]
    6888:	5cd3      	ldrb	r3, [r2, r3]
    688a:	021b      	lsls	r3, r3, #8
    688c:	4319      	orrs	r1, r3
    688e:	e7e2      	b.n	6856 <usart_write_buffer_wait+0x4a>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
    6890:	7e23      	ldrb	r3, [r4, #24]
    6892:	079b      	lsls	r3, r3, #30
    6894:	d40d      	bmi.n	68b2 <usart_write_buffer_wait+0xa6>
    6896:	4b0a      	ldr	r3, [pc, #40]	; (68c0 <usart_write_buffer_wait+0xb4>)
    6898:	2102      	movs	r1, #2
    689a:	7e22      	ldrb	r2, [r4, #24]
    689c:	420a      	tst	r2, r1
    689e:	d10a      	bne.n	68b6 <usart_write_buffer_wait+0xaa>
		} else if (i == USART_TIMEOUT) {
    68a0:	2b01      	cmp	r3, #1
    68a2:	d00a      	beq.n	68ba <usart_write_buffer_wait+0xae>
    68a4:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    68a6:	2b00      	cmp	r3, #0
    68a8:	d1f7      	bne.n	689a <usart_write_buffer_wait+0x8e>
	return STATUS_OK;
    68aa:	2000      	movs	r0, #0
    68ac:	e7b8      	b.n	6820 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    68ae:	2012      	movs	r0, #18
    68b0:	e7b6      	b.n	6820 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    68b2:	2000      	movs	r0, #0
    68b4:	e7b4      	b.n	6820 <usart_write_buffer_wait+0x14>
    68b6:	2000      	movs	r0, #0
    68b8:	e7b2      	b.n	6820 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    68ba:	2012      	movs	r0, #18
    68bc:	e7b0      	b.n	6820 <usart_write_buffer_wait+0x14>
    68be:	46c0      	nop			; (mov r8, r8)
    68c0:	0000ffff 	.word	0x0000ffff
    68c4:	0000677d 	.word	0x0000677d

000068c8 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    68c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    68ca:	46d6      	mov	lr, sl
    68cc:	b500      	push	{lr}
    68ce:	b084      	sub	sp, #16
    68d0:	0004      	movs	r4, r0
    68d2:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    68d4:	2017      	movs	r0, #23
	if (length == 0) {
    68d6:	2a00      	cmp	r2, #0
    68d8:	d103      	bne.n	68e2 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    68da:	b004      	add	sp, #16
    68dc:	bc04      	pop	{r2}
    68de:	4692      	mov	sl, r2
    68e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    68e2:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    68e4:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    68e6:	2b00      	cmp	r3, #0
    68e8:	d0f7      	beq.n	68da <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    68ea:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    68ec:	3a01      	subs	r2, #1
    68ee:	b293      	uxth	r3, r2
    68f0:	469a      	mov	sl, r3
    68f2:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    68f4:	2704      	movs	r7, #4
    68f6:	e019      	b.n	692c <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    68f8:	2300      	movs	r3, #0
    68fa:	aa02      	add	r2, sp, #8
    68fc:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    68fe:	1d91      	adds	r1, r2, #6
    6900:	0020      	movs	r0, r4
    6902:	4b15      	ldr	r3, [pc, #84]	; (6958 <usart_read_buffer_wait+0x90>)
    6904:	4798      	blx	r3
		if (retval != STATUS_OK) {
    6906:	2800      	cmp	r0, #0
    6908:	d1e7      	bne.n	68da <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    690a:	1c69      	adds	r1, r5, #1
    690c:	b289      	uxth	r1, r1
    690e:	ab02      	add	r3, sp, #8
    6910:	88db      	ldrh	r3, [r3, #6]
    6912:	9a01      	ldr	r2, [sp, #4]
    6914:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6916:	7962      	ldrb	r2, [r4, #5]
    6918:	2a01      	cmp	r2, #1
    691a:	d014      	beq.n	6946 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    691c:	000d      	movs	r5, r1
	while (length--) {
    691e:	4653      	mov	r3, sl
    6920:	3b01      	subs	r3, #1
    6922:	b29b      	uxth	r3, r3
    6924:	469a      	mov	sl, r3
    6926:	4b0d      	ldr	r3, [pc, #52]	; (695c <usart_read_buffer_wait+0x94>)
    6928:	459a      	cmp	sl, r3
    692a:	d0d6      	beq.n	68da <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    692c:	7e33      	ldrb	r3, [r6, #24]
    692e:	423b      	tst	r3, r7
    6930:	d1e2      	bne.n	68f8 <usart_read_buffer_wait+0x30>
    6932:	4b0a      	ldr	r3, [pc, #40]	; (695c <usart_read_buffer_wait+0x94>)
    6934:	7e32      	ldrb	r2, [r6, #24]
    6936:	423a      	tst	r2, r7
    6938:	d1de      	bne.n	68f8 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    693a:	2b01      	cmp	r3, #1
    693c:	d009      	beq.n	6952 <usart_read_buffer_wait+0x8a>
    693e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    6940:	2b00      	cmp	r3, #0
    6942:	d1f7      	bne.n	6934 <usart_read_buffer_wait+0x6c>
    6944:	e7d8      	b.n	68f8 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    6946:	3502      	adds	r5, #2
    6948:	b2ad      	uxth	r5, r5
    694a:	0a1b      	lsrs	r3, r3, #8
    694c:	9a01      	ldr	r2, [sp, #4]
    694e:	5453      	strb	r3, [r2, r1]
    6950:	e7e5      	b.n	691e <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    6952:	2012      	movs	r0, #18
    6954:	e7c1      	b.n	68da <usart_read_buffer_wait+0x12>
    6956:	46c0      	nop			; (mov r8, r8)
    6958:	000067a3 	.word	0x000067a3
    695c:	0000ffff 	.word	0x0000ffff

00006960 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    6960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    6962:	0080      	lsls	r0, r0, #2
    6964:	4b62      	ldr	r3, [pc, #392]	; (6af0 <_usart_interrupt_handler+0x190>)
    6966:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    6968:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    696a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    696c:	2b00      	cmp	r3, #0
    696e:	d1fc      	bne.n	696a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    6970:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    6972:	7da6      	ldrb	r6, [r4, #22]
    6974:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    6976:	2330      	movs	r3, #48	; 0x30
    6978:	5ceb      	ldrb	r3, [r5, r3]
    697a:	2231      	movs	r2, #49	; 0x31
    697c:	5caf      	ldrb	r7, [r5, r2]
    697e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    6980:	07f3      	lsls	r3, r6, #31
    6982:	d522      	bpl.n	69ca <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    6984:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    6986:	b29b      	uxth	r3, r3
    6988:	2b00      	cmp	r3, #0
    698a:	d01c      	beq.n	69c6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    698c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    698e:	7813      	ldrb	r3, [r2, #0]
    6990:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    6992:	1c51      	adds	r1, r2, #1
    6994:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6996:	7969      	ldrb	r1, [r5, #5]
    6998:	2901      	cmp	r1, #1
    699a:	d00e      	beq.n	69ba <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    699c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    699e:	05db      	lsls	r3, r3, #23
    69a0:	0ddb      	lsrs	r3, r3, #23
    69a2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    69a4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    69a6:	3b01      	subs	r3, #1
    69a8:	b29b      	uxth	r3, r3
    69aa:	85eb      	strh	r3, [r5, #46]	; 0x2e
    69ac:	2b00      	cmp	r3, #0
    69ae:	d10c      	bne.n	69ca <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    69b0:	3301      	adds	r3, #1
    69b2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    69b4:	3301      	adds	r3, #1
    69b6:	75a3      	strb	r3, [r4, #22]
    69b8:	e007      	b.n	69ca <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    69ba:	7851      	ldrb	r1, [r2, #1]
    69bc:	0209      	lsls	r1, r1, #8
    69be:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    69c0:	3202      	adds	r2, #2
    69c2:	62aa      	str	r2, [r5, #40]	; 0x28
    69c4:	e7eb      	b.n	699e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    69c6:	2301      	movs	r3, #1
    69c8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    69ca:	07b3      	lsls	r3, r6, #30
    69cc:	d506      	bpl.n	69dc <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    69ce:	2302      	movs	r3, #2
    69d0:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    69d2:	2200      	movs	r2, #0
    69d4:	3331      	adds	r3, #49	; 0x31
    69d6:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    69d8:	07fb      	lsls	r3, r7, #31
    69da:	d41a      	bmi.n	6a12 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    69dc:	0773      	lsls	r3, r6, #29
    69de:	d565      	bpl.n	6aac <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    69e0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    69e2:	b29b      	uxth	r3, r3
    69e4:	2b00      	cmp	r3, #0
    69e6:	d05f      	beq.n	6aa8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    69e8:	8b63      	ldrh	r3, [r4, #26]
    69ea:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    69ec:	071a      	lsls	r2, r3, #28
    69ee:	d414      	bmi.n	6a1a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    69f0:	223f      	movs	r2, #63	; 0x3f
    69f2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    69f4:	2b00      	cmp	r3, #0
    69f6:	d034      	beq.n	6a62 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    69f8:	079a      	lsls	r2, r3, #30
    69fa:	d511      	bpl.n	6a20 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    69fc:	221a      	movs	r2, #26
    69fe:	2332      	movs	r3, #50	; 0x32
    6a00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    6a02:	3b30      	subs	r3, #48	; 0x30
    6a04:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    6a06:	077b      	lsls	r3, r7, #29
    6a08:	d550      	bpl.n	6aac <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    6a0a:	0028      	movs	r0, r5
    6a0c:	696b      	ldr	r3, [r5, #20]
    6a0e:	4798      	blx	r3
    6a10:	e04c      	b.n	6aac <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    6a12:	0028      	movs	r0, r5
    6a14:	68eb      	ldr	r3, [r5, #12]
    6a16:	4798      	blx	r3
    6a18:	e7e0      	b.n	69dc <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    6a1a:	2237      	movs	r2, #55	; 0x37
    6a1c:	4013      	ands	r3, r2
    6a1e:	e7e9      	b.n	69f4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    6a20:	075a      	lsls	r2, r3, #29
    6a22:	d505      	bpl.n	6a30 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    6a24:	221e      	movs	r2, #30
    6a26:	2332      	movs	r3, #50	; 0x32
    6a28:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    6a2a:	3b2e      	subs	r3, #46	; 0x2e
    6a2c:	8363      	strh	r3, [r4, #26]
    6a2e:	e7ea      	b.n	6a06 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    6a30:	07da      	lsls	r2, r3, #31
    6a32:	d505      	bpl.n	6a40 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    6a34:	2213      	movs	r2, #19
    6a36:	2332      	movs	r3, #50	; 0x32
    6a38:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    6a3a:	3b31      	subs	r3, #49	; 0x31
    6a3c:	8363      	strh	r3, [r4, #26]
    6a3e:	e7e2      	b.n	6a06 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    6a40:	06da      	lsls	r2, r3, #27
    6a42:	d505      	bpl.n	6a50 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    6a44:	2242      	movs	r2, #66	; 0x42
    6a46:	2332      	movs	r3, #50	; 0x32
    6a48:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    6a4a:	3b22      	subs	r3, #34	; 0x22
    6a4c:	8363      	strh	r3, [r4, #26]
    6a4e:	e7da      	b.n	6a06 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    6a50:	2220      	movs	r2, #32
    6a52:	421a      	tst	r2, r3
    6a54:	d0d7      	beq.n	6a06 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    6a56:	3221      	adds	r2, #33	; 0x21
    6a58:	2332      	movs	r3, #50	; 0x32
    6a5a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    6a5c:	3b12      	subs	r3, #18
    6a5e:	8363      	strh	r3, [r4, #26]
    6a60:	e7d1      	b.n	6a06 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    6a62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    6a64:	05db      	lsls	r3, r3, #23
    6a66:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    6a68:	b2da      	uxtb	r2, r3
    6a6a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6a6c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    6a6e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    6a70:	1c51      	adds	r1, r2, #1
    6a72:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    6a74:	7969      	ldrb	r1, [r5, #5]
    6a76:	2901      	cmp	r1, #1
    6a78:	d010      	beq.n	6a9c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    6a7a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    6a7c:	3b01      	subs	r3, #1
    6a7e:	b29b      	uxth	r3, r3
    6a80:	85ab      	strh	r3, [r5, #44]	; 0x2c
    6a82:	2b00      	cmp	r3, #0
    6a84:	d112      	bne.n	6aac <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6a86:	3304      	adds	r3, #4
    6a88:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    6a8a:	2200      	movs	r2, #0
    6a8c:	332e      	adds	r3, #46	; 0x2e
    6a8e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    6a90:	07bb      	lsls	r3, r7, #30
    6a92:	d50b      	bpl.n	6aac <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    6a94:	0028      	movs	r0, r5
    6a96:	692b      	ldr	r3, [r5, #16]
    6a98:	4798      	blx	r3
    6a9a:	e007      	b.n	6aac <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    6a9c:	0a1b      	lsrs	r3, r3, #8
    6a9e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    6aa0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6aa2:	3301      	adds	r3, #1
    6aa4:	626b      	str	r3, [r5, #36]	; 0x24
    6aa6:	e7e8      	b.n	6a7a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    6aa8:	2304      	movs	r3, #4
    6aaa:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    6aac:	06f3      	lsls	r3, r6, #27
    6aae:	d504      	bpl.n	6aba <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    6ab0:	2310      	movs	r3, #16
    6ab2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    6ab4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    6ab6:	06fb      	lsls	r3, r7, #27
    6ab8:	d40e      	bmi.n	6ad8 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    6aba:	06b3      	lsls	r3, r6, #26
    6abc:	d504      	bpl.n	6ac8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    6abe:	2320      	movs	r3, #32
    6ac0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    6ac2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    6ac4:	073b      	lsls	r3, r7, #28
    6ac6:	d40b      	bmi.n	6ae0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    6ac8:	0733      	lsls	r3, r6, #28
    6aca:	d504      	bpl.n	6ad6 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    6acc:	2308      	movs	r3, #8
    6ace:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    6ad0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    6ad2:	06bb      	lsls	r3, r7, #26
    6ad4:	d408      	bmi.n	6ae8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    6ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    6ad8:	0028      	movs	r0, r5
    6ada:	69eb      	ldr	r3, [r5, #28]
    6adc:	4798      	blx	r3
    6ade:	e7ec      	b.n	6aba <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    6ae0:	0028      	movs	r0, r5
    6ae2:	69ab      	ldr	r3, [r5, #24]
    6ae4:	4798      	blx	r3
    6ae6:	e7ef      	b.n	6ac8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    6ae8:	6a2b      	ldr	r3, [r5, #32]
    6aea:	0028      	movs	r0, r5
    6aec:	4798      	blx	r3
}
    6aee:	e7f2      	b.n	6ad6 <_usart_interrupt_handler+0x176>
    6af0:	20002238 	.word	0x20002238

00006af4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    6af4:	b510      	push	{r4, lr}
	switch (clock_source) {
    6af6:	2808      	cmp	r0, #8
    6af8:	d803      	bhi.n	6b02 <system_clock_source_get_hz+0xe>
    6afa:	0080      	lsls	r0, r0, #2
    6afc:	4b1c      	ldr	r3, [pc, #112]	; (6b70 <system_clock_source_get_hz+0x7c>)
    6afe:	581b      	ldr	r3, [r3, r0]
    6b00:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    6b02:	2000      	movs	r0, #0
    6b04:	e032      	b.n	6b6c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    6b06:	4b1b      	ldr	r3, [pc, #108]	; (6b74 <system_clock_source_get_hz+0x80>)
    6b08:	6918      	ldr	r0, [r3, #16]
    6b0a:	e02f      	b.n	6b6c <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    6b0c:	4b1a      	ldr	r3, [pc, #104]	; (6b78 <system_clock_source_get_hz+0x84>)
    6b0e:	7d18      	ldrb	r0, [r3, #20]
    6b10:	0700      	lsls	r0, r0, #28
    6b12:	0f80      	lsrs	r0, r0, #30
    6b14:	1c43      	adds	r3, r0, #1
    6b16:	4819      	ldr	r0, [pc, #100]	; (6b7c <system_clock_source_get_hz+0x88>)
    6b18:	4358      	muls	r0, r3
    6b1a:	e027      	b.n	6b6c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    6b1c:	4b15      	ldr	r3, [pc, #84]	; (6b74 <system_clock_source_get_hz+0x80>)
    6b1e:	6958      	ldr	r0, [r3, #20]
    6b20:	e024      	b.n	6b6c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6b22:	4b14      	ldr	r3, [pc, #80]	; (6b74 <system_clock_source_get_hz+0x80>)
    6b24:	681b      	ldr	r3, [r3, #0]
			return 0;
    6b26:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    6b28:	079b      	lsls	r3, r3, #30
    6b2a:	d51f      	bpl.n	6b6c <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6b2c:	4912      	ldr	r1, [pc, #72]	; (6b78 <system_clock_source_get_hz+0x84>)
    6b2e:	2280      	movs	r2, #128	; 0x80
    6b30:	0052      	lsls	r2, r2, #1
    6b32:	68cb      	ldr	r3, [r1, #12]
    6b34:	4213      	tst	r3, r2
    6b36:	d0fc      	beq.n	6b32 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    6b38:	4b0e      	ldr	r3, [pc, #56]	; (6b74 <system_clock_source_get_hz+0x80>)
    6b3a:	681b      	ldr	r3, [r3, #0]
    6b3c:	075b      	lsls	r3, r3, #29
    6b3e:	d401      	bmi.n	6b44 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    6b40:	480f      	ldr	r0, [pc, #60]	; (6b80 <system_clock_source_get_hz+0x8c>)
    6b42:	e013      	b.n	6b6c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6b44:	2000      	movs	r0, #0
    6b46:	4b0f      	ldr	r3, [pc, #60]	; (6b84 <system_clock_source_get_hz+0x90>)
    6b48:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    6b4a:	4b0a      	ldr	r3, [pc, #40]	; (6b74 <system_clock_source_get_hz+0x80>)
    6b4c:	689b      	ldr	r3, [r3, #8]
    6b4e:	041b      	lsls	r3, r3, #16
    6b50:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    6b52:	4358      	muls	r0, r3
    6b54:	e00a      	b.n	6b6c <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6b56:	2328      	movs	r3, #40	; 0x28
    6b58:	4a07      	ldr	r2, [pc, #28]	; (6b78 <system_clock_source_get_hz+0x84>)
    6b5a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    6b5c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    6b5e:	079b      	lsls	r3, r3, #30
    6b60:	d504      	bpl.n	6b6c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    6b62:	4b04      	ldr	r3, [pc, #16]	; (6b74 <system_clock_source_get_hz+0x80>)
    6b64:	68d8      	ldr	r0, [r3, #12]
    6b66:	e001      	b.n	6b6c <system_clock_source_get_hz+0x78>
		return 32768UL;
    6b68:	2080      	movs	r0, #128	; 0x80
    6b6a:	0200      	lsls	r0, r0, #8
	}
}
    6b6c:	bd10      	pop	{r4, pc}
    6b6e:	46c0      	nop			; (mov r8, r8)
    6b70:	0001fb3c 	.word	0x0001fb3c
    6b74:	20000b84 	.word	0x20000b84
    6b78:	40000c00 	.word	0x40000c00
    6b7c:	003d0900 	.word	0x003d0900
    6b80:	02dc6c00 	.word	0x02dc6c00
    6b84:	00007261 	.word	0x00007261

00006b88 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    6b88:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    6b8a:	4c0b      	ldr	r4, [pc, #44]	; (6bb8 <system_clock_source_osc16m_set_config+0x30>)
    6b8c:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    6b8e:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6b90:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    6b92:	7802      	ldrb	r2, [r0, #0]
    6b94:	2103      	movs	r1, #3
    6b96:	4011      	ands	r1, r2
    6b98:	0089      	lsls	r1, r1, #2
    6b9a:	220c      	movs	r2, #12
    6b9c:	4393      	bics	r3, r2
    6b9e:	430b      	orrs	r3, r1
    6ba0:	3a0b      	subs	r2, #11
    6ba2:	4032      	ands	r2, r6
    6ba4:	0192      	lsls	r2, r2, #6
    6ba6:	2140      	movs	r1, #64	; 0x40
    6ba8:	438b      	bics	r3, r1
    6baa:	4313      	orrs	r3, r2
    6bac:	01ed      	lsls	r5, r5, #7
    6bae:	227f      	movs	r2, #127	; 0x7f
    6bb0:	4013      	ands	r3, r2
    6bb2:	432b      	orrs	r3, r5
    6bb4:	7523      	strb	r3, [r4, #20]
}
    6bb6:	bd70      	pop	{r4, r5, r6, pc}
    6bb8:	40000c00 	.word	0x40000c00

00006bbc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    6bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bbe:	46d6      	mov	lr, sl
    6bc0:	464f      	mov	r7, r9
    6bc2:	4646      	mov	r6, r8
    6bc4:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    6bc6:	4b20      	ldr	r3, [pc, #128]	; (6c48 <system_clock_source_xosc32k_set_config+0x8c>)
    6bc8:	469a      	mov	sl, r3
    6bca:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    6bcc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    6bce:	7801      	ldrb	r1, [r0, #0]
    6bd0:	424c      	negs	r4, r1
    6bd2:	414c      	adcs	r4, r1
    6bd4:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    6bd6:	7881      	ldrb	r1, [r0, #2]
    6bd8:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    6bda:	78c1      	ldrb	r1, [r0, #3]
    6bdc:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    6bde:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    6be0:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    6be2:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    6be4:	6840      	ldr	r0, [r0, #4]
    6be6:	4919      	ldr	r1, [pc, #100]	; (6c4c <system_clock_source_xosc32k_set_config+0x90>)
    6be8:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    6bea:	2101      	movs	r1, #1
    6bec:	4648      	mov	r0, r9
    6bee:	0080      	lsls	r0, r0, #2
    6bf0:	2204      	movs	r2, #4
    6bf2:	4393      	bics	r3, r2
    6bf4:	4303      	orrs	r3, r0
    6bf6:	4640      	mov	r0, r8
    6bf8:	4008      	ands	r0, r1
    6bfa:	00c0      	lsls	r0, r0, #3
    6bfc:	3204      	adds	r2, #4
    6bfe:	4393      	bics	r3, r2
    6c00:	4303      	orrs	r3, r0
    6c02:	4660      	mov	r0, ip
    6c04:	4008      	ands	r0, r1
    6c06:	0100      	lsls	r0, r0, #4
    6c08:	3208      	adds	r2, #8
    6c0a:	4393      	bics	r3, r2
    6c0c:	4303      	orrs	r3, r0
    6c0e:	400f      	ands	r7, r1
    6c10:	01bf      	lsls	r7, r7, #6
    6c12:	2040      	movs	r0, #64	; 0x40
    6c14:	4383      	bics	r3, r0
    6c16:	433b      	orrs	r3, r7
    6c18:	400e      	ands	r6, r1
    6c1a:	01f6      	lsls	r6, r6, #7
    6c1c:	3040      	adds	r0, #64	; 0x40
    6c1e:	4383      	bics	r3, r0
    6c20:	4333      	orrs	r3, r6
    6c22:	3879      	subs	r0, #121	; 0x79
    6c24:	4005      	ands	r5, r0
    6c26:	022d      	lsls	r5, r5, #8
    6c28:	4809      	ldr	r0, [pc, #36]	; (6c50 <system_clock_source_xosc32k_set_config+0x94>)
    6c2a:	4003      	ands	r3, r0
    6c2c:	432b      	orrs	r3, r5
    6c2e:	4021      	ands	r1, r4
    6c30:	0309      	lsls	r1, r1, #12
    6c32:	4808      	ldr	r0, [pc, #32]	; (6c54 <system_clock_source_xosc32k_set_config+0x98>)
    6c34:	4003      	ands	r3, r0
    6c36:	430b      	orrs	r3, r1
    6c38:	4652      	mov	r2, sl
    6c3a:	6153      	str	r3, [r2, #20]
}
    6c3c:	bc1c      	pop	{r2, r3, r4}
    6c3e:	4690      	mov	r8, r2
    6c40:	4699      	mov	r9, r3
    6c42:	46a2      	mov	sl, r4
    6c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c46:	46c0      	nop			; (mov r8, r8)
    6c48:	40001000 	.word	0x40001000
    6c4c:	20000b84 	.word	0x20000b84
    6c50:	fffff8ff 	.word	0xfffff8ff
    6c54:	ffffefff 	.word	0xffffefff

00006c58 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    6c58:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6c5a:	7a83      	ldrb	r3, [r0, #10]
    6c5c:	069b      	lsls	r3, r3, #26
    6c5e:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    6c60:	8982      	ldrh	r2, [r0, #12]
    6c62:	0592      	lsls	r2, r2, #22
    6c64:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    6c66:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    6c68:	491a      	ldr	r1, [pc, #104]	; (6cd4 <system_clock_source_dfll_set_config+0x7c>)
    6c6a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    6c6c:	7a03      	ldrb	r3, [r0, #8]
    6c6e:	7a42      	ldrb	r2, [r0, #9]
    6c70:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    6c72:	8882      	ldrh	r2, [r0, #4]
    6c74:	88c4      	ldrh	r4, [r0, #6]
    6c76:	4322      	orrs	r2, r4
    6c78:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    6c7a:	7842      	ldrb	r2, [r0, #1]
    6c7c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    6c7e:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    6c80:	7882      	ldrb	r2, [r0, #2]
    6c82:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    6c84:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    6c86:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    6c88:	7803      	ldrb	r3, [r0, #0]
    6c8a:	2b04      	cmp	r3, #4
    6c8c:	d011      	beq.n	6cb2 <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    6c8e:	2b20      	cmp	r3, #32
    6c90:	d10e      	bne.n	6cb0 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6c92:	7b83      	ldrb	r3, [r0, #14]
    6c94:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    6c96:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6c98:	4313      	orrs	r3, r2
    6c9a:	8a02      	ldrh	r2, [r0, #16]
    6c9c:	0412      	lsls	r2, r2, #16
    6c9e:	490e      	ldr	r1, [pc, #56]	; (6cd8 <system_clock_source_dfll_set_config+0x80>)
    6ca0:	400a      	ands	r2, r1
    6ca2:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    6ca4:	4a0b      	ldr	r2, [pc, #44]	; (6cd4 <system_clock_source_dfll_set_config+0x7c>)
    6ca6:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    6ca8:	6811      	ldr	r1, [r2, #0]
    6caa:	4b0c      	ldr	r3, [pc, #48]	; (6cdc <system_clock_source_dfll_set_config+0x84>)
    6cac:	430b      	orrs	r3, r1
    6cae:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    6cb0:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    6cb2:	7b83      	ldrb	r3, [r0, #14]
    6cb4:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    6cb6:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    6cb8:	4313      	orrs	r3, r2
    6cba:	8a02      	ldrh	r2, [r0, #16]
    6cbc:	0412      	lsls	r2, r2, #16
    6cbe:	4906      	ldr	r1, [pc, #24]	; (6cd8 <system_clock_source_dfll_set_config+0x80>)
    6cc0:	400a      	ands	r2, r1
    6cc2:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    6cc4:	4a03      	ldr	r2, [pc, #12]	; (6cd4 <system_clock_source_dfll_set_config+0x7c>)
    6cc6:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    6cc8:	6813      	ldr	r3, [r2, #0]
    6cca:	2104      	movs	r1, #4
    6ccc:	430b      	orrs	r3, r1
    6cce:	6013      	str	r3, [r2, #0]
    6cd0:	e7ee      	b.n	6cb0 <system_clock_source_dfll_set_config+0x58>
    6cd2:	46c0      	nop			; (mov r8, r8)
    6cd4:	20000b84 	.word	0x20000b84
    6cd8:	03ff0000 	.word	0x03ff0000
    6cdc:	00000424 	.word	0x00000424

00006ce0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6ce0:	2808      	cmp	r0, #8
    6ce2:	d803      	bhi.n	6cec <system_clock_source_enable+0xc>
    6ce4:	0080      	lsls	r0, r0, #2
    6ce6:	4b29      	ldr	r3, [pc, #164]	; (6d8c <system_clock_source_enable+0xac>)
    6ce8:	581b      	ldr	r3, [r3, r0]
    6cea:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6cec:	2017      	movs	r0, #23
    6cee:	e04b      	b.n	6d88 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    6cf0:	4a27      	ldr	r2, [pc, #156]	; (6d90 <system_clock_source_enable+0xb0>)
    6cf2:	7d13      	ldrb	r3, [r2, #20]
    6cf4:	2102      	movs	r1, #2
    6cf6:	430b      	orrs	r3, r1
    6cf8:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    6cfa:	2000      	movs	r0, #0
    6cfc:	e044      	b.n	6d88 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    6cfe:	4a25      	ldr	r2, [pc, #148]	; (6d94 <system_clock_source_enable+0xb4>)
    6d00:	6993      	ldr	r3, [r2, #24]
    6d02:	2102      	movs	r1, #2
    6d04:	430b      	orrs	r3, r1
    6d06:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    6d08:	2000      	movs	r0, #0
		break;
    6d0a:	e03d      	b.n	6d88 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    6d0c:	4a20      	ldr	r2, [pc, #128]	; (6d90 <system_clock_source_enable+0xb0>)
    6d0e:	8a13      	ldrh	r3, [r2, #16]
    6d10:	2102      	movs	r1, #2
    6d12:	430b      	orrs	r3, r1
    6d14:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6d16:	2000      	movs	r0, #0
		break;
    6d18:	e036      	b.n	6d88 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    6d1a:	4a1e      	ldr	r2, [pc, #120]	; (6d94 <system_clock_source_enable+0xb4>)
    6d1c:	6953      	ldr	r3, [r2, #20]
    6d1e:	2102      	movs	r1, #2
    6d20:	430b      	orrs	r3, r1
    6d22:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6d24:	2000      	movs	r0, #0
		break;
    6d26:	e02f      	b.n	6d88 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    6d28:	491b      	ldr	r1, [pc, #108]	; (6d98 <system_clock_source_enable+0xb8>)
    6d2a:	680b      	ldr	r3, [r1, #0]
    6d2c:	2202      	movs	r2, #2
    6d2e:	4313      	orrs	r3, r2
    6d30:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    6d32:	4b17      	ldr	r3, [pc, #92]	; (6d90 <system_clock_source_enable+0xb0>)
    6d34:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6d36:	0019      	movs	r1, r3
    6d38:	32fe      	adds	r2, #254	; 0xfe
    6d3a:	68cb      	ldr	r3, [r1, #12]
    6d3c:	4213      	tst	r3, r2
    6d3e:	d0fc      	beq.n	6d3a <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    6d40:	4a15      	ldr	r2, [pc, #84]	; (6d98 <system_clock_source_enable+0xb8>)
    6d42:	6891      	ldr	r1, [r2, #8]
    6d44:	4b12      	ldr	r3, [pc, #72]	; (6d90 <system_clock_source_enable+0xb0>)
    6d46:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    6d48:	6852      	ldr	r2, [r2, #4]
    6d4a:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    6d4c:	2200      	movs	r2, #0
    6d4e:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    6d50:	0019      	movs	r1, r3
    6d52:	3201      	adds	r2, #1
    6d54:	32ff      	adds	r2, #255	; 0xff
    6d56:	68cb      	ldr	r3, [r1, #12]
    6d58:	4213      	tst	r3, r2
    6d5a:	d0fc      	beq.n	6d56 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6d5c:	4b0e      	ldr	r3, [pc, #56]	; (6d98 <system_clock_source_enable+0xb8>)
    6d5e:	681b      	ldr	r3, [r3, #0]
    6d60:	b29b      	uxth	r3, r3
    6d62:	4a0b      	ldr	r2, [pc, #44]	; (6d90 <system_clock_source_enable+0xb0>)
    6d64:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6d66:	2000      	movs	r0, #0
    6d68:	e00e      	b.n	6d88 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    6d6a:	4909      	ldr	r1, [pc, #36]	; (6d90 <system_clock_source_enable+0xb0>)
    6d6c:	2228      	movs	r2, #40	; 0x28
    6d6e:	5c8b      	ldrb	r3, [r1, r2]
    6d70:	2002      	movs	r0, #2
    6d72:	4303      	orrs	r3, r0
    6d74:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    6d76:	0008      	movs	r0, r1
    6d78:	2138      	movs	r1, #56	; 0x38
    6d7a:	3a26      	subs	r2, #38	; 0x26
    6d7c:	5c43      	ldrb	r3, [r0, r1]
    6d7e:	4213      	tst	r3, r2
    6d80:	d1fc      	bne.n	6d7c <system_clock_source_enable+0x9c>
	return STATUS_OK;
    6d82:	2000      	movs	r0, #0
    6d84:	e000      	b.n	6d88 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    6d86:	2000      	movs	r0, #0
}
    6d88:	4770      	bx	lr
    6d8a:	46c0      	nop			; (mov r8, r8)
    6d8c:	0001fb60 	.word	0x0001fb60
    6d90:	40000c00 	.word	0x40000c00
    6d94:	40001000 	.word	0x40001000
    6d98:	20000b84 	.word	0x20000b84

00006d9c <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    6d9c:	2808      	cmp	r0, #8
    6d9e:	d832      	bhi.n	6e06 <system_clock_source_disable+0x6a>
    6da0:	0080      	lsls	r0, r0, #2
    6da2:	4b1a      	ldr	r3, [pc, #104]	; (6e0c <system_clock_source_disable+0x70>)
    6da4:	581b      	ldr	r3, [r3, r0]
    6da6:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    6da8:	4a19      	ldr	r2, [pc, #100]	; (6e10 <system_clock_source_disable+0x74>)
    6daa:	7d13      	ldrb	r3, [r2, #20]
    6dac:	2102      	movs	r1, #2
    6dae:	438b      	bics	r3, r1
    6db0:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    6db2:	2000      	movs	r0, #0
}
    6db4:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    6db6:	4a17      	ldr	r2, [pc, #92]	; (6e14 <system_clock_source_disable+0x78>)
    6db8:	6993      	ldr	r3, [r2, #24]
    6dba:	2102      	movs	r1, #2
    6dbc:	438b      	bics	r3, r1
    6dbe:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    6dc0:	2000      	movs	r0, #0
		break;
    6dc2:	e7f7      	b.n	6db4 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    6dc4:	4a12      	ldr	r2, [pc, #72]	; (6e10 <system_clock_source_disable+0x74>)
    6dc6:	8a13      	ldrh	r3, [r2, #16]
    6dc8:	2102      	movs	r1, #2
    6dca:	438b      	bics	r3, r1
    6dcc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    6dce:	2000      	movs	r0, #0
		break;
    6dd0:	e7f0      	b.n	6db4 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    6dd2:	4a10      	ldr	r2, [pc, #64]	; (6e14 <system_clock_source_disable+0x78>)
    6dd4:	6953      	ldr	r3, [r2, #20]
    6dd6:	2102      	movs	r1, #2
    6dd8:	438b      	bics	r3, r1
    6dda:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    6ddc:	2000      	movs	r0, #0
		break;
    6dde:	e7e9      	b.n	6db4 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    6de0:	4b0d      	ldr	r3, [pc, #52]	; (6e18 <system_clock_source_disable+0x7c>)
    6de2:	681a      	ldr	r2, [r3, #0]
    6de4:	2102      	movs	r1, #2
    6de6:	438a      	bics	r2, r1
    6de8:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    6dea:	681b      	ldr	r3, [r3, #0]
    6dec:	b29b      	uxth	r3, r3
    6dee:	4a08      	ldr	r2, [pc, #32]	; (6e10 <system_clock_source_disable+0x74>)
    6df0:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    6df2:	2000      	movs	r0, #0
		break;
    6df4:	e7de      	b.n	6db4 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    6df6:	4906      	ldr	r1, [pc, #24]	; (6e10 <system_clock_source_disable+0x74>)
    6df8:	2228      	movs	r2, #40	; 0x28
    6dfa:	5c8b      	ldrb	r3, [r1, r2]
    6dfc:	2002      	movs	r0, #2
    6dfe:	4383      	bics	r3, r0
    6e00:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    6e02:	2000      	movs	r0, #0
		break;
    6e04:	e7d6      	b.n	6db4 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    6e06:	2017      	movs	r0, #23
    6e08:	e7d4      	b.n	6db4 <system_clock_source_disable+0x18>
    6e0a:	46c0      	nop			; (mov r8, r8)
    6e0c:	0001fb84 	.word	0x0001fb84
    6e10:	40000c00 	.word	0x40000c00
    6e14:	40001000 	.word	0x40001000
    6e18:	20000b84 	.word	0x20000b84

00006e1c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e1e:	46ce      	mov	lr, r9
    6e20:	4647      	mov	r7, r8
    6e22:	b580      	push	{r7, lr}
    6e24:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    6e26:	2280      	movs	r2, #128	; 0x80
    6e28:	0052      	lsls	r2, r2, #1
    6e2a:	4b76      	ldr	r3, [pc, #472]	; (7004 <system_clock_init+0x1e8>)
    6e2c:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    6e2e:	3afd      	subs	r2, #253	; 0xfd
    6e30:	4b75      	ldr	r3, [pc, #468]	; (7008 <system_clock_init+0x1ec>)
    6e32:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    6e34:	4a75      	ldr	r2, [pc, #468]	; (700c <system_clock_init+0x1f0>)
    6e36:	6853      	ldr	r3, [r2, #4]
    6e38:	211e      	movs	r1, #30
    6e3a:	438b      	bics	r3, r1
    6e3c:	391a      	subs	r1, #26
    6e3e:	430b      	orrs	r3, r1
    6e40:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6e42:	2380      	movs	r3, #128	; 0x80
    6e44:	05db      	lsls	r3, r3, #23
    6e46:	789b      	ldrb	r3, [r3, #2]
    6e48:	2b02      	cmp	r3, #2
    6e4a:	d00f      	beq.n	6e6c <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J || (WLR089U0)
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6e4c:	2380      	movs	r3, #128	; 0x80
    6e4e:	05db      	lsls	r3, r3, #23
    6e50:	789b      	ldrb	r3, [r3, #2]
    6e52:	b25b      	sxtb	r3, r3
    6e54:	2b00      	cmp	r3, #0
    6e56:	db09      	blt.n	6e6c <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6e58:	2380      	movs	r3, #128	; 0x80
    6e5a:	05db      	lsls	r3, r3, #23
    6e5c:	2201      	movs	r2, #1
    6e5e:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    6e60:	3201      	adds	r2, #1
    6e62:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    6e64:	001a      	movs	r2, r3
    6e66:	7993      	ldrb	r3, [r2, #6]
    6e68:	2b00      	cmp	r3, #0
    6e6a:	d0fc      	beq.n	6e66 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    6e6c:	a809      	add	r0, sp, #36	; 0x24
    6e6e:	2300      	movs	r3, #0
    6e70:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    6e72:	2280      	movs	r2, #128	; 0x80
    6e74:	0212      	lsls	r2, r2, #8
    6e76:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    6e78:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    6e7a:	2201      	movs	r2, #1
    6e7c:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    6e7e:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    6e80:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6e82:	3203      	adds	r2, #3
    6e84:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    6e86:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6e88:	4b61      	ldr	r3, [pc, #388]	; (7010 <system_clock_init+0x1f4>)
    6e8a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    6e8c:	2005      	movs	r0, #5
    6e8e:	4b61      	ldr	r3, [pc, #388]	; (7014 <system_clock_init+0x1f8>)
    6e90:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    6e92:	4961      	ldr	r1, [pc, #388]	; (7018 <system_clock_init+0x1fc>)
    6e94:	2201      	movs	r2, #1
    6e96:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6e98:	421a      	tst	r2, r3
    6e9a:	d0fc      	beq.n	6e96 <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    6e9c:	a901      	add	r1, sp, #4
    6e9e:	2501      	movs	r5, #1
    6ea0:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    6ea2:	2400      	movs	r4, #0
    6ea4:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    6ea6:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6ea8:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    6eaa:	2303      	movs	r3, #3
    6eac:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6eae:	2000      	movs	r0, #0
    6eb0:	4b5a      	ldr	r3, [pc, #360]	; (701c <system_clock_init+0x200>)
    6eb2:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6eb4:	2006      	movs	r0, #6
    6eb6:	4b5a      	ldr	r3, [pc, #360]	; (7020 <system_clock_init+0x204>)
    6eb8:	4798      	blx	r3
	config->run_in_standby  = false;
    6eba:	466b      	mov	r3, sp
    6ebc:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    6ebe:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    6ec0:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    6ec2:	4668      	mov	r0, sp
    6ec4:	4b57      	ldr	r3, [pc, #348]	; (7024 <system_clock_init+0x208>)
    6ec6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    6ec8:	2006      	movs	r0, #6
    6eca:	4b52      	ldr	r3, [pc, #328]	; (7014 <system_clock_init+0x1f8>)
    6ecc:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6ece:	494d      	ldr	r1, [pc, #308]	; (7004 <system_clock_init+0x1e8>)
    6ed0:	2210      	movs	r2, #16
    6ed2:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    6ed4:	421a      	tst	r2, r3
    6ed6:	d0fc      	beq.n	6ed2 <system_clock_init+0xb6>
	config->division_factor    = 1;
    6ed8:	a901      	add	r1, sp, #4
    6eda:	2301      	movs	r3, #1
    6edc:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    6ede:	2400      	movs	r4, #0
    6ee0:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6ee2:	3305      	adds	r3, #5
    6ee4:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    6ee6:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    6ee8:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    6eea:	2000      	movs	r0, #0
    6eec:	4b4b      	ldr	r3, [pc, #300]	; (701c <system_clock_init+0x200>)
    6eee:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    6ef0:	ab04      	add	r3, sp, #16
    6ef2:	2200      	movs	r2, #0
    6ef4:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6ef6:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    6ef8:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6efa:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    6efc:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    6efe:	213f      	movs	r1, #63	; 0x3f
    6f00:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6f02:	393b      	subs	r1, #59	; 0x3b
    6f04:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    6f06:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    6f08:	4b47      	ldr	r3, [pc, #284]	; (7028 <system_clock_init+0x20c>)
    6f0a:	681b      	ldr	r3, [r3, #0]
    6f0c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    6f0e:	2b3f      	cmp	r3, #63	; 0x3f
    6f10:	d100      	bne.n	6f14 <system_clock_init+0xf8>
    6f12:	e074      	b.n	6ffe <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    6f14:	a804      	add	r0, sp, #16
    6f16:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    6f18:	23b7      	movs	r3, #183	; 0xb7
    6f1a:	00db      	lsls	r3, r3, #3
    6f1c:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6f1e:	2307      	movs	r3, #7
    6f20:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    6f22:	3338      	adds	r3, #56	; 0x38
    6f24:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6f26:	4b41      	ldr	r3, [pc, #260]	; (702c <system_clock_init+0x210>)
    6f28:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    6f2a:	4b41      	ldr	r3, [pc, #260]	; (7030 <system_clock_init+0x214>)
    6f2c:	4798      	blx	r3
	config->division_factor    = 1;
    6f2e:	ac01      	add	r4, sp, #4
    6f30:	2601      	movs	r6, #1
    6f32:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    6f34:	2500      	movs	r5, #0
    6f36:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    6f38:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6f3a:	2305      	movs	r3, #5
    6f3c:	4699      	mov	r9, r3
    6f3e:	7023      	strb	r3, [r4, #0]
    6f40:	7226      	strb	r6, [r4, #8]
    6f42:	0021      	movs	r1, r4
    6f44:	2001      	movs	r0, #1
    6f46:	4b35      	ldr	r3, [pc, #212]	; (701c <system_clock_init+0x200>)
    6f48:	4698      	mov	r8, r3
    6f4a:	4798      	blx	r3
    6f4c:	2001      	movs	r0, #1
    6f4e:	4f39      	ldr	r7, [pc, #228]	; (7034 <system_clock_init+0x218>)
    6f50:	47b8      	blx	r7
	config->high_when_disabled = false;
    6f52:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    6f54:	2306      	movs	r3, #6
    6f56:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    6f58:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    6f5a:	7265      	strb	r5, [r4, #9]
    6f5c:	464b      	mov	r3, r9
    6f5e:	6063      	str	r3, [r4, #4]
    6f60:	0021      	movs	r1, r4
    6f62:	2002      	movs	r0, #2
    6f64:	47c0      	blx	r8
    6f66:	2002      	movs	r0, #2
    6f68:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6f6a:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6f6c:	0021      	movs	r1, r4
    6f6e:	2000      	movs	r0, #0
    6f70:	4b31      	ldr	r3, [pc, #196]	; (7038 <system_clock_init+0x21c>)
    6f72:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    6f74:	2000      	movs	r0, #0
    6f76:	4b31      	ldr	r3, [pc, #196]	; (703c <system_clock_init+0x220>)
    6f78:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6f7a:	2007      	movs	r0, #7
    6f7c:	4b25      	ldr	r3, [pc, #148]	; (7014 <system_clock_init+0x1f8>)
    6f7e:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    6f80:	4920      	ldr	r1, [pc, #128]	; (7004 <system_clock_init+0x1e8>)
    6f82:	22d0      	movs	r2, #208	; 0xd0
    6f84:	0112      	lsls	r2, r2, #4
    6f86:	68cb      	ldr	r3, [r1, #12]
    6f88:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6f8a:	4293      	cmp	r3, r2
    6f8c:	d1fb      	bne.n	6f86 <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    6f8e:	4c2c      	ldr	r4, [pc, #176]	; (7040 <system_clock_init+0x224>)
    6f90:	2301      	movs	r3, #1
    6f92:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    6f94:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    6f96:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    6f98:	a901      	add	r1, sp, #4
    6f9a:	2300      	movs	r3, #0
    6f9c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    6f9e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    6fa0:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6fa2:	3307      	adds	r3, #7
    6fa4:	700b      	strb	r3, [r1, #0]
    6fa6:	3b01      	subs	r3, #1
    6fa8:	604b      	str	r3, [r1, #4]
    6faa:	2000      	movs	r0, #0
    6fac:	4b1b      	ldr	r3, [pc, #108]	; (701c <system_clock_init+0x200>)
    6fae:	4798      	blx	r3
    6fb0:	2000      	movs	r0, #0
    6fb2:	4b20      	ldr	r3, [pc, #128]	; (7034 <system_clock_init+0x218>)
    6fb4:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    6fb6:	2000      	movs	r0, #0
    6fb8:	4b22      	ldr	r3, [pc, #136]	; (7044 <system_clock_init+0x228>)
    6fba:	4798      	blx	r3
    6fbc:	7921      	ldrb	r1, [r4, #4]
    6fbe:	b2c9      	uxtb	r1, r1
    6fc0:	4b21      	ldr	r3, [pc, #132]	; (7048 <system_clock_init+0x22c>)
    6fc2:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    6fc4:	4b21      	ldr	r3, [pc, #132]	; (704c <system_clock_init+0x230>)
    6fc6:	4298      	cmp	r0, r3
    6fc8:	d814      	bhi.n	6ff4 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    6fca:	2380      	movs	r3, #128	; 0x80
    6fcc:	05db      	lsls	r3, r3, #23
    6fce:	789b      	ldrb	r3, [r3, #2]
    6fd0:	2b00      	cmp	r3, #0
    6fd2:	d00f      	beq.n	6ff4 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    6fd4:	2380      	movs	r3, #128	; 0x80
    6fd6:	05db      	lsls	r3, r3, #23
    6fd8:	789b      	ldrb	r3, [r3, #2]
    6fda:	b25b      	sxtb	r3, r3
    6fdc:	2b00      	cmp	r3, #0
    6fde:	db09      	blt.n	6ff4 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    6fe0:	2380      	movs	r3, #128	; 0x80
    6fe2:	05db      	lsls	r3, r3, #23
    6fe4:	2201      	movs	r2, #1
    6fe6:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    6fe8:	2200      	movs	r2, #0
    6fea:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    6fec:	001a      	movs	r2, r3
    6fee:	7993      	ldrb	r3, [r2, #6]
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d0fc      	beq.n	6fee <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    6ff4:	b00d      	add	sp, #52	; 0x34
    6ff6:	bc0c      	pop	{r2, r3}
    6ff8:	4690      	mov	r8, r2
    6ffa:	4699      	mov	r9, r3
    6ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    6ffe:	3b20      	subs	r3, #32
    7000:	e788      	b.n	6f14 <system_clock_init+0xf8>
    7002:	46c0      	nop			; (mov r8, r8)
    7004:	40000c00 	.word	0x40000c00
    7008:	40001400 	.word	0x40001400
    700c:	41004000 	.word	0x41004000
    7010:	00006bbd 	.word	0x00006bbd
    7014:	00006ce1 	.word	0x00006ce1
    7018:	40001000 	.word	0x40001000
    701c:	00007075 	.word	0x00007075
    7020:	00006d9d 	.word	0x00006d9d
    7024:	00006b89 	.word	0x00006b89
    7028:	00806020 	.word	0x00806020
    702c:	00006c59 	.word	0x00006c59
    7030:	00007051 	.word	0x00007051
    7034:	00007121 	.word	0x00007121
    7038:	0000723d 	.word	0x0000723d
    703c:	000071cd 	.word	0x000071cd
    7040:	40000400 	.word	0x40000400
    7044:	00007161 	.word	0x00007161
    7048:	000165b9 	.word	0x000165b9
    704c:	00b71b00 	.word	0x00b71b00

00007050 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    7050:	4a06      	ldr	r2, [pc, #24]	; (706c <system_gclk_init+0x1c>)
    7052:	6953      	ldr	r3, [r2, #20]
    7054:	2140      	movs	r1, #64	; 0x40
    7056:	430b      	orrs	r3, r1
    7058:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    705a:	2201      	movs	r2, #1
    705c:	4b04      	ldr	r3, [pc, #16]	; (7070 <system_gclk_init+0x20>)
    705e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    7060:	0019      	movs	r1, r3
    7062:	780b      	ldrb	r3, [r1, #0]
    7064:	4213      	tst	r3, r2
    7066:	d1fc      	bne.n	7062 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    7068:	4770      	bx	lr
    706a:	46c0      	nop			; (mov r8, r8)
    706c:	40000400 	.word	0x40000400
    7070:	40001800 	.word	0x40001800

00007074 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    7074:	b570      	push	{r4, r5, r6, lr}
    7076:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    7078:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    707a:	784b      	ldrb	r3, [r1, #1]
    707c:	2b00      	cmp	r3, #0
    707e:	d002      	beq.n	7086 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    7080:	2380      	movs	r3, #128	; 0x80
    7082:	00db      	lsls	r3, r3, #3
    7084:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    7086:	7a4b      	ldrb	r3, [r1, #9]
    7088:	2b00      	cmp	r3, #0
    708a:	d002      	beq.n	7092 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    708c:	2380      	movs	r3, #128	; 0x80
    708e:	011b      	lsls	r3, r3, #4
    7090:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    7092:	6848      	ldr	r0, [r1, #4]
    7094:	2801      	cmp	r0, #1
    7096:	d90f      	bls.n	70b8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    7098:	1e43      	subs	r3, r0, #1
    709a:	4218      	tst	r0, r3
    709c:	d131      	bne.n	7102 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    709e:	2802      	cmp	r0, #2
    70a0:	d92d      	bls.n	70fe <system_gclk_gen_set_config+0x8a>
    70a2:	2302      	movs	r3, #2
    70a4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    70a6:	3201      	adds	r2, #1
						mask <<= 1) {
    70a8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    70aa:	4298      	cmp	r0, r3
    70ac:	d8fb      	bhi.n	70a6 <system_gclk_gen_set_config+0x32>
    70ae:	2380      	movs	r3, #128	; 0x80
    70b0:	015b      	lsls	r3, r3, #5
    70b2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    70b4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    70b6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    70b8:	7a0b      	ldrb	r3, [r1, #8]
    70ba:	2b00      	cmp	r3, #0
    70bc:	d002      	beq.n	70c4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    70be:	2380      	movs	r3, #128	; 0x80
    70c0:	019b      	lsls	r3, r3, #6
    70c2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    70c4:	2604      	movs	r6, #4
    70c6:	40a6      	lsls	r6, r4
    70c8:	4911      	ldr	r1, [pc, #68]	; (7110 <system_gclk_gen_set_config+0x9c>)
    70ca:	4a12      	ldr	r2, [pc, #72]	; (7114 <system_gclk_gen_set_config+0xa0>)
    70cc:	684b      	ldr	r3, [r1, #4]
    70ce:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    70d0:	421e      	tst	r6, r3
    70d2:	d1fb      	bne.n	70cc <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    70d4:	4b10      	ldr	r3, [pc, #64]	; (7118 <system_gclk_gen_set_config+0xa4>)
    70d6:	4798      	blx	r3
    70d8:	00a4      	lsls	r4, r4, #2
    70da:	4b0d      	ldr	r3, [pc, #52]	; (7110 <system_gclk_gen_set_config+0x9c>)
    70dc:	469c      	mov	ip, r3
    70de:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    70e0:	6a22      	ldr	r2, [r4, #32]
    70e2:	2380      	movs	r3, #128	; 0x80
    70e4:	005b      	lsls	r3, r3, #1
    70e6:	401a      	ands	r2, r3
    70e8:	432a      	orrs	r2, r5
    70ea:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    70ec:	4661      	mov	r1, ip
    70ee:	4a09      	ldr	r2, [pc, #36]	; (7114 <system_gclk_gen_set_config+0xa0>)
    70f0:	684b      	ldr	r3, [r1, #4]
    70f2:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    70f4:	421e      	tst	r6, r3
    70f6:	d1fb      	bne.n	70f0 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    70f8:	4b08      	ldr	r3, [pc, #32]	; (711c <system_gclk_gen_set_config+0xa8>)
    70fa:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    70fc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    70fe:	2200      	movs	r2, #0
    7100:	e7d5      	b.n	70ae <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    7102:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    7104:	2380      	movs	r3, #128	; 0x80
    7106:	009b      	lsls	r3, r3, #2
    7108:	4318      	orrs	r0, r3
    710a:	4305      	orrs	r5, r0
    710c:	e7d4      	b.n	70b8 <system_gclk_gen_set_config+0x44>
    710e:	46c0      	nop			; (mov r8, r8)
    7110:	40001800 	.word	0x40001800
    7114:	000007fc 	.word	0x000007fc
    7118:	0000457d 	.word	0x0000457d
    711c:	000045bd 	.word	0x000045bd

00007120 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    7120:	b510      	push	{r4, lr}
    7122:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7124:	2204      	movs	r2, #4
    7126:	4082      	lsls	r2, r0
    7128:	4809      	ldr	r0, [pc, #36]	; (7150 <system_gclk_gen_enable+0x30>)
    712a:	490a      	ldr	r1, [pc, #40]	; (7154 <system_gclk_gen_enable+0x34>)
    712c:	6843      	ldr	r3, [r0, #4]
    712e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    7130:	421a      	tst	r2, r3
    7132:	d1fb      	bne.n	712c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    7134:	4b08      	ldr	r3, [pc, #32]	; (7158 <system_gclk_gen_enable+0x38>)
    7136:	4798      	blx	r3
    7138:	00a4      	lsls	r4, r4, #2
    713a:	4b05      	ldr	r3, [pc, #20]	; (7150 <system_gclk_gen_enable+0x30>)
    713c:	469c      	mov	ip, r3
    713e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    7140:	6a22      	ldr	r2, [r4, #32]
    7142:	2380      	movs	r3, #128	; 0x80
    7144:	005b      	lsls	r3, r3, #1
    7146:	4313      	orrs	r3, r2
    7148:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    714a:	4b04      	ldr	r3, [pc, #16]	; (715c <system_gclk_gen_enable+0x3c>)
    714c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    714e:	bd10      	pop	{r4, pc}
    7150:	40001800 	.word	0x40001800
    7154:	000007fc 	.word	0x000007fc
    7158:	0000457d 	.word	0x0000457d
    715c:	000045bd 	.word	0x000045bd

00007160 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    7160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7162:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    7164:	2204      	movs	r2, #4
    7166:	4082      	lsls	r2, r0
    7168:	4812      	ldr	r0, [pc, #72]	; (71b4 <system_gclk_gen_get_hz+0x54>)
    716a:	4913      	ldr	r1, [pc, #76]	; (71b8 <system_gclk_gen_get_hz+0x58>)
    716c:	6843      	ldr	r3, [r0, #4]
    716e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    7170:	421a      	tst	r2, r3
    7172:	d1fb      	bne.n	716c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    7174:	4b11      	ldr	r3, [pc, #68]	; (71bc <system_gclk_gen_get_hz+0x5c>)
    7176:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    7178:	4f0e      	ldr	r7, [pc, #56]	; (71b4 <system_gclk_gen_get_hz+0x54>)
    717a:	3408      	adds	r4, #8
    717c:	00a4      	lsls	r4, r4, #2
    717e:	59e0      	ldr	r0, [r4, r7]
    7180:	0700      	lsls	r0, r0, #28
    7182:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    7184:	4b0e      	ldr	r3, [pc, #56]	; (71c0 <system_gclk_gen_get_hz+0x60>)
    7186:	4798      	blx	r3
    7188:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    718a:	59e5      	ldr	r5, [r4, r7]
    718c:	04ed      	lsls	r5, r5, #19
    718e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    7190:	59e4      	ldr	r4, [r4, r7]
    7192:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    7194:	4b0b      	ldr	r3, [pc, #44]	; (71c4 <system_gclk_gen_get_hz+0x64>)
    7196:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    7198:	2d00      	cmp	r5, #0
    719a:	d107      	bne.n	71ac <system_gclk_gen_get_hz+0x4c>
    719c:	2c01      	cmp	r4, #1
    719e:	d907      	bls.n	71b0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    71a0:	0021      	movs	r1, r4
    71a2:	0030      	movs	r0, r6
    71a4:	4b08      	ldr	r3, [pc, #32]	; (71c8 <system_gclk_gen_get_hz+0x68>)
    71a6:	4798      	blx	r3
    71a8:	0006      	movs	r6, r0
    71aa:	e001      	b.n	71b0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    71ac:	3401      	adds	r4, #1
    71ae:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    71b0:	0030      	movs	r0, r6
    71b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71b4:	40001800 	.word	0x40001800
    71b8:	000007fc 	.word	0x000007fc
    71bc:	0000457d 	.word	0x0000457d
    71c0:	00006af5 	.word	0x00006af5
    71c4:	000045bd 	.word	0x000045bd
    71c8:	000165b9 	.word	0x000165b9

000071cc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    71cc:	b510      	push	{r4, lr}
    71ce:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    71d0:	4b09      	ldr	r3, [pc, #36]	; (71f8 <system_gclk_chan_enable+0x2c>)
    71d2:	4798      	blx	r3
    71d4:	00a0      	lsls	r0, r4, #2
    71d6:	4b09      	ldr	r3, [pc, #36]	; (71fc <system_gclk_chan_enable+0x30>)
    71d8:	469c      	mov	ip, r3
    71da:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    71dc:	2280      	movs	r2, #128	; 0x80
    71de:	5883      	ldr	r3, [r0, r2]
    71e0:	2140      	movs	r1, #64	; 0x40
    71e2:	430b      	orrs	r3, r1
    71e4:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    71e6:	3140      	adds	r1, #64	; 0x40
    71e8:	3a40      	subs	r2, #64	; 0x40
    71ea:	5843      	ldr	r3, [r0, r1]
    71ec:	421a      	tst	r2, r3
    71ee:	d0fc      	beq.n	71ea <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    71f0:	4b03      	ldr	r3, [pc, #12]	; (7200 <system_gclk_chan_enable+0x34>)
    71f2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    71f4:	bd10      	pop	{r4, pc}
    71f6:	46c0      	nop			; (mov r8, r8)
    71f8:	0000457d 	.word	0x0000457d
    71fc:	40001800 	.word	0x40001800
    7200:	000045bd 	.word	0x000045bd

00007204 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    7204:	b510      	push	{r4, lr}
    7206:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7208:	4b09      	ldr	r3, [pc, #36]	; (7230 <system_gclk_chan_disable+0x2c>)
    720a:	4798      	blx	r3
    720c:	00a0      	lsls	r0, r4, #2
    720e:	4b09      	ldr	r3, [pc, #36]	; (7234 <system_gclk_chan_disable+0x30>)
    7210:	469c      	mov	ip, r3
    7212:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    7214:	2280      	movs	r2, #128	; 0x80
    7216:	5883      	ldr	r3, [r0, r2]
    7218:	2140      	movs	r1, #64	; 0x40
    721a:	438b      	bics	r3, r1
    721c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    721e:	3140      	adds	r1, #64	; 0x40
    7220:	3a40      	subs	r2, #64	; 0x40
    7222:	5843      	ldr	r3, [r0, r1]
    7224:	421a      	tst	r2, r3
    7226:	d1fc      	bne.n	7222 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    7228:	4b03      	ldr	r3, [pc, #12]	; (7238 <system_gclk_chan_disable+0x34>)
    722a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    722c:	bd10      	pop	{r4, pc}
    722e:	46c0      	nop			; (mov r8, r8)
    7230:	0000457d 	.word	0x0000457d
    7234:	40001800 	.word	0x40001800
    7238:	000045bd 	.word	0x000045bd

0000723c <system_gclk_chan_set_config>:
{
    723c:	b570      	push	{r4, r5, r6, lr}
    723e:	0004      	movs	r4, r0
    7240:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    7242:	4b05      	ldr	r3, [pc, #20]	; (7258 <system_gclk_chan_set_config+0x1c>)
    7244:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    7246:	782a      	ldrb	r2, [r5, #0]
    7248:	230f      	movs	r3, #15
    724a:	4013      	ands	r3, r2
    724c:	3420      	adds	r4, #32
    724e:	00a4      	lsls	r4, r4, #2
    7250:	4a02      	ldr	r2, [pc, #8]	; (725c <system_gclk_chan_set_config+0x20>)
    7252:	50a3      	str	r3, [r4, r2]
}
    7254:	bd70      	pop	{r4, r5, r6, pc}
    7256:	46c0      	nop			; (mov r8, r8)
    7258:	00007205 	.word	0x00007205
    725c:	40001800 	.word	0x40001800

00007260 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    7260:	b510      	push	{r4, lr}
    7262:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    7264:	4b06      	ldr	r3, [pc, #24]	; (7280 <system_gclk_chan_get_hz+0x20>)
    7266:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    7268:	3420      	adds	r4, #32
    726a:	00a4      	lsls	r4, r4, #2
    726c:	4b05      	ldr	r3, [pc, #20]	; (7284 <system_gclk_chan_get_hz+0x24>)
    726e:	58e4      	ldr	r4, [r4, r3]
    7270:	0724      	lsls	r4, r4, #28
    7272:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    7274:	4b04      	ldr	r3, [pc, #16]	; (7288 <system_gclk_chan_get_hz+0x28>)
    7276:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    7278:	0020      	movs	r0, r4
    727a:	4b04      	ldr	r3, [pc, #16]	; (728c <system_gclk_chan_get_hz+0x2c>)
    727c:	4798      	blx	r3
}
    727e:	bd10      	pop	{r4, pc}
    7280:	0000457d 	.word	0x0000457d
    7284:	40001800 	.word	0x40001800
    7288:	000045bd 	.word	0x000045bd
    728c:	00007161 	.word	0x00007161

00007290 <system_interrupt_clear_pending>:
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
	enum status_code status = STATUS_OK;

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    7290:	2800      	cmp	r0, #0
    7292:	db08      	blt.n	72a6 <system_interrupt_clear_pending+0x16>
		NVIC->ICPR[0] = (1 << vector);
    7294:	2301      	movs	r3, #1
    7296:	4083      	lsls	r3, r0
    7298:	22c0      	movs	r2, #192	; 0xc0
    729a:	0052      	lsls	r2, r2, #1
    729c:	4906      	ldr	r1, [pc, #24]	; (72b8 <system_interrupt_clear_pending+0x28>)
    729e:	508b      	str	r3, [r1, r2]
	enum status_code status = STATUS_OK;
    72a0:	2300      	movs	r3, #0
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
	}

	return status;
}
    72a2:	0018      	movs	r0, r3
    72a4:	4770      	bx	lr
		status = STATUS_ERR_INVALID_ARG;
    72a6:	2317      	movs	r3, #23
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    72a8:	1c42      	adds	r2, r0, #1
    72aa:	d1fa      	bne.n	72a2 <system_interrupt_clear_pending+0x12>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
    72ac:	2280      	movs	r2, #128	; 0x80
    72ae:	0492      	lsls	r2, r2, #18
    72b0:	4b02      	ldr	r3, [pc, #8]	; (72bc <system_interrupt_clear_pending+0x2c>)
    72b2:	605a      	str	r2, [r3, #4]
	enum status_code status = STATUS_OK;
    72b4:	2300      	movs	r3, #0
    72b6:	e7f4      	b.n	72a2 <system_interrupt_clear_pending+0x12>
    72b8:	e000e100 	.word	0xe000e100
    72bc:	e000ed00 	.word	0xe000ed00

000072c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    72c0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    72c2:	78d3      	ldrb	r3, [r2, #3]
    72c4:	2b00      	cmp	r3, #0
    72c6:	d135      	bne.n	7334 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    72c8:	7813      	ldrb	r3, [r2, #0]
    72ca:	2b80      	cmp	r3, #128	; 0x80
    72cc:	d029      	beq.n	7322 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    72ce:	061b      	lsls	r3, r3, #24
    72d0:	2480      	movs	r4, #128	; 0x80
    72d2:	0264      	lsls	r4, r4, #9
    72d4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    72d6:	7854      	ldrb	r4, [r2, #1]
    72d8:	2502      	movs	r5, #2
    72da:	43ac      	bics	r4, r5
    72dc:	d106      	bne.n	72ec <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    72de:	7894      	ldrb	r4, [r2, #2]
    72e0:	2c00      	cmp	r4, #0
    72e2:	d120      	bne.n	7326 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    72e4:	2480      	movs	r4, #128	; 0x80
    72e6:	02a4      	lsls	r4, r4, #10
    72e8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    72ea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    72ec:	7854      	ldrb	r4, [r2, #1]
    72ee:	3c01      	subs	r4, #1
    72f0:	2c01      	cmp	r4, #1
    72f2:	d91c      	bls.n	732e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    72f4:	040d      	lsls	r5, r1, #16
    72f6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    72f8:	24a0      	movs	r4, #160	; 0xa0
    72fa:	05e4      	lsls	r4, r4, #23
    72fc:	432c      	orrs	r4, r5
    72fe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7300:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7302:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7304:	24d0      	movs	r4, #208	; 0xd0
    7306:	0624      	lsls	r4, r4, #24
    7308:	432c      	orrs	r4, r5
    730a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    730c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    730e:	78d4      	ldrb	r4, [r2, #3]
    7310:	2c00      	cmp	r4, #0
    7312:	d122      	bne.n	735a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    7314:	035b      	lsls	r3, r3, #13
    7316:	d51c      	bpl.n	7352 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    7318:	7893      	ldrb	r3, [r2, #2]
    731a:	2b01      	cmp	r3, #1
    731c:	d01e      	beq.n	735c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    731e:	6141      	str	r1, [r0, #20]
    7320:	e017      	b.n	7352 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    7322:	2300      	movs	r3, #0
    7324:	e7d7      	b.n	72d6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    7326:	24c0      	movs	r4, #192	; 0xc0
    7328:	02e4      	lsls	r4, r4, #11
    732a:	4323      	orrs	r3, r4
    732c:	e7dd      	b.n	72ea <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    732e:	4c0d      	ldr	r4, [pc, #52]	; (7364 <_system_pinmux_config+0xa4>)
    7330:	4023      	ands	r3, r4
    7332:	e7df      	b.n	72f4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    7334:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    7336:	040c      	lsls	r4, r1, #16
    7338:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    733a:	23a0      	movs	r3, #160	; 0xa0
    733c:	05db      	lsls	r3, r3, #23
    733e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    7340:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    7342:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    7344:	23d0      	movs	r3, #208	; 0xd0
    7346:	061b      	lsls	r3, r3, #24
    7348:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    734a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    734c:	78d3      	ldrb	r3, [r2, #3]
    734e:	2b00      	cmp	r3, #0
    7350:	d103      	bne.n	735a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    7352:	7853      	ldrb	r3, [r2, #1]
    7354:	3b01      	subs	r3, #1
    7356:	2b01      	cmp	r3, #1
    7358:	d902      	bls.n	7360 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    735a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    735c:	6181      	str	r1, [r0, #24]
    735e:	e7f8      	b.n	7352 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    7360:	6081      	str	r1, [r0, #8]
}
    7362:	e7fa      	b.n	735a <_system_pinmux_config+0x9a>
    7364:	fffbffff 	.word	0xfffbffff

00007368 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    7368:	b510      	push	{r4, lr}
    736a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    736c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    736e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7370:	2900      	cmp	r1, #0
    7372:	d104      	bne.n	737e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    7374:	0943      	lsrs	r3, r0, #5
    7376:	01db      	lsls	r3, r3, #7
    7378:	4905      	ldr	r1, [pc, #20]	; (7390 <system_pinmux_pin_set_config+0x28>)
    737a:	468c      	mov	ip, r1
    737c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    737e:	241f      	movs	r4, #31
    7380:	4020      	ands	r0, r4
    7382:	2101      	movs	r1, #1
    7384:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    7386:	0018      	movs	r0, r3
    7388:	4b02      	ldr	r3, [pc, #8]	; (7394 <system_pinmux_pin_set_config+0x2c>)
    738a:	4798      	blx	r3
}
    738c:	bd10      	pop	{r4, pc}
    738e:	46c0      	nop			; (mov r8, r8)
    7390:	40002800 	.word	0x40002800
    7394:	000072c1 	.word	0x000072c1

00007398 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    7398:	4770      	bx	lr
	...

0000739c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    739c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    739e:	4b05      	ldr	r3, [pc, #20]	; (73b4 <system_init+0x18>)
    73a0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    73a2:	4b05      	ldr	r3, [pc, #20]	; (73b8 <system_init+0x1c>)
    73a4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    73a6:	4b05      	ldr	r3, [pc, #20]	; (73bc <system_init+0x20>)
    73a8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    73aa:	4b05      	ldr	r3, [pc, #20]	; (73c0 <system_init+0x24>)
    73ac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    73ae:	4b05      	ldr	r3, [pc, #20]	; (73c4 <system_init+0x28>)
    73b0:	4798      	blx	r3
}
    73b2:	bd10      	pop	{r4, pc}
    73b4:	00006e1d 	.word	0x00006e1d
    73b8:	000045ed 	.word	0x000045ed
    73bc:	00007399 	.word	0x00007399
    73c0:	000049e5 	.word	0x000049e5
    73c4:	00007399 	.word	0x00007399

000073c8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    73c8:	1c93      	adds	r3, r2, #2
    73ca:	009b      	lsls	r3, r3, #2
    73cc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    73ce:	2a02      	cmp	r2, #2
    73d0:	d009      	beq.n	73e6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    73d2:	2a03      	cmp	r2, #3
    73d4:	d00c      	beq.n	73f0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    73d6:	2301      	movs	r3, #1
    73d8:	4093      	lsls	r3, r2
    73da:	001a      	movs	r2, r3
    73dc:	7e03      	ldrb	r3, [r0, #24]
    73de:	4313      	orrs	r3, r2
    73e0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    73e2:	2000      	movs	r0, #0
    73e4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    73e6:	7e03      	ldrb	r3, [r0, #24]
    73e8:	2210      	movs	r2, #16
    73ea:	4313      	orrs	r3, r2
    73ec:	7603      	strb	r3, [r0, #24]
    73ee:	e7f8      	b.n	73e2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    73f0:	7e03      	ldrb	r3, [r0, #24]
    73f2:	2220      	movs	r2, #32
    73f4:	4313      	orrs	r3, r2
    73f6:	7603      	strb	r3, [r0, #24]
    73f8:	e7f3      	b.n	73e2 <tc_register_callback+0x1a>
	...

000073fc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    73fc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    73fe:	0080      	lsls	r0, r0, #2
    7400:	4b16      	ldr	r3, [pc, #88]	; (745c <_tc_interrupt_handler+0x60>)
    7402:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    7404:	6823      	ldr	r3, [r4, #0]
    7406:	7a9d      	ldrb	r5, [r3, #10]
    7408:	7e22      	ldrb	r2, [r4, #24]
    740a:	7e63      	ldrb	r3, [r4, #25]
    740c:	4013      	ands	r3, r2
    740e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    7410:	07eb      	lsls	r3, r5, #31
    7412:	d406      	bmi.n	7422 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    7414:	07ab      	lsls	r3, r5, #30
    7416:	d40b      	bmi.n	7430 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    7418:	06eb      	lsls	r3, r5, #27
    741a:	d410      	bmi.n	743e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    741c:	06ab      	lsls	r3, r5, #26
    741e:	d415      	bmi.n	744c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    7420:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    7422:	0020      	movs	r0, r4
    7424:	68a3      	ldr	r3, [r4, #8]
    7426:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    7428:	2301      	movs	r3, #1
    742a:	6822      	ldr	r2, [r4, #0]
    742c:	7293      	strb	r3, [r2, #10]
    742e:	e7f1      	b.n	7414 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    7430:	0020      	movs	r0, r4
    7432:	68e3      	ldr	r3, [r4, #12]
    7434:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    7436:	2302      	movs	r3, #2
    7438:	6822      	ldr	r2, [r4, #0]
    743a:	7293      	strb	r3, [r2, #10]
    743c:	e7ec      	b.n	7418 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    743e:	0020      	movs	r0, r4
    7440:	6923      	ldr	r3, [r4, #16]
    7442:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    7444:	2310      	movs	r3, #16
    7446:	6822      	ldr	r2, [r4, #0]
    7448:	7293      	strb	r3, [r2, #10]
    744a:	e7e7      	b.n	741c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    744c:	0020      	movs	r0, r4
    744e:	6963      	ldr	r3, [r4, #20]
    7450:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    7452:	6823      	ldr	r3, [r4, #0]
    7454:	2220      	movs	r2, #32
    7456:	729a      	strb	r2, [r3, #10]
}
    7458:	e7e2      	b.n	7420 <_tc_interrupt_handler+0x24>
    745a:	46c0      	nop			; (mov r8, r8)
    745c:	20002250 	.word	0x20002250

00007460 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    7460:	b510      	push	{r4, lr}
    7462:	2000      	movs	r0, #0
    7464:	4b01      	ldr	r3, [pc, #4]	; (746c <TC0_Handler+0xc>)
    7466:	4798      	blx	r3
    7468:	bd10      	pop	{r4, pc}
    746a:	46c0      	nop			; (mov r8, r8)
    746c:	000073fd 	.word	0x000073fd

00007470 <TC1_Handler>:
    7470:	b510      	push	{r4, lr}
    7472:	2001      	movs	r0, #1
    7474:	4b01      	ldr	r3, [pc, #4]	; (747c <TC1_Handler+0xc>)
    7476:	4798      	blx	r3
    7478:	bd10      	pop	{r4, pc}
    747a:	46c0      	nop			; (mov r8, r8)
    747c:	000073fd 	.word	0x000073fd

00007480 <TC2_Handler>:
    7480:	b510      	push	{r4, lr}
    7482:	2002      	movs	r0, #2
    7484:	4b01      	ldr	r3, [pc, #4]	; (748c <TC2_Handler+0xc>)
    7486:	4798      	blx	r3
    7488:	bd10      	pop	{r4, pc}
    748a:	46c0      	nop			; (mov r8, r8)
    748c:	000073fd 	.word	0x000073fd

00007490 <TC3_Handler>:
    7490:	b510      	push	{r4, lr}
    7492:	2003      	movs	r0, #3
    7494:	4b01      	ldr	r3, [pc, #4]	; (749c <TC3_Handler+0xc>)
    7496:	4798      	blx	r3
    7498:	bd10      	pop	{r4, pc}
    749a:	46c0      	nop			; (mov r8, r8)
    749c:	000073fd 	.word	0x000073fd

000074a0 <TC4_Handler>:
    74a0:	b510      	push	{r4, lr}
    74a2:	2004      	movs	r0, #4
    74a4:	4b01      	ldr	r3, [pc, #4]	; (74ac <TC4_Handler+0xc>)
    74a6:	4798      	blx	r3
    74a8:	bd10      	pop	{r4, pc}
    74aa:	46c0      	nop			; (mov r8, r8)
    74ac:	000073fd 	.word	0x000073fd

000074b0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    74b0:	b530      	push	{r4, r5, lr}
    74b2:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    74b4:	a901      	add	r1, sp, #4
    74b6:	4b0c      	ldr	r3, [pc, #48]	; (74e8 <_tc_get_inst_index+0x38>)
    74b8:	000a      	movs	r2, r1
    74ba:	cb32      	ldmia	r3!, {r1, r4, r5}
    74bc:	c232      	stmia	r2!, {r1, r4, r5}
    74be:	cb12      	ldmia	r3!, {r1, r4}
    74c0:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    74c2:	9b01      	ldr	r3, [sp, #4]
    74c4:	4298      	cmp	r0, r3
    74c6:	d00b      	beq.n	74e0 <_tc_get_inst_index+0x30>
    74c8:	2301      	movs	r3, #1
    74ca:	a901      	add	r1, sp, #4
    74cc:	009a      	lsls	r2, r3, #2
    74ce:	5852      	ldr	r2, [r2, r1]
    74d0:	4282      	cmp	r2, r0
    74d2:	d006      	beq.n	74e2 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    74d4:	3301      	adds	r3, #1
    74d6:	2b05      	cmp	r3, #5
    74d8:	d1f8      	bne.n	74cc <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    74da:	2000      	movs	r0, #0
}
    74dc:	b007      	add	sp, #28
    74de:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    74e0:	2300      	movs	r3, #0
			return i;
    74e2:	b2d8      	uxtb	r0, r3
    74e4:	e7fa      	b.n	74dc <_tc_get_inst_index+0x2c>
    74e6:	46c0      	nop			; (mov r8, r8)
    74e8:	0001fbd0 	.word	0x0001fbd0

000074ec <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    74ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    74ee:	46c6      	mov	lr, r8
    74f0:	b500      	push	{lr}
    74f2:	b08e      	sub	sp, #56	; 0x38
    74f4:	0004      	movs	r4, r0
    74f6:	000d      	movs	r5, r1
    74f8:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    74fa:	0008      	movs	r0, r1
    74fc:	4bae      	ldr	r3, [pc, #696]	; (77b8 <tc_init+0x2cc>)
    74fe:	4798      	blx	r3
    7500:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J) || (WLR089U0)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    7502:	ab0c      	add	r3, sp, #48	; 0x30
    7504:	221b      	movs	r2, #27
    7506:	701a      	strb	r2, [r3, #0]
    7508:	705a      	strb	r2, [r3, #1]
    750a:	3201      	adds	r2, #1
    750c:	709a      	strb	r2, [r3, #2]
    750e:	70da      	strb	r2, [r3, #3]
    7510:	3201      	adds	r2, #1
    7512:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    7514:	a902      	add	r1, sp, #8
    7516:	4ba9      	ldr	r3, [pc, #676]	; (77bc <tc_init+0x2d0>)
    7518:	3314      	adds	r3, #20
    751a:	000a      	movs	r2, r1
    751c:	cb83      	ldmia	r3!, {r0, r1, r7}
    751e:	c283      	stmia	r2!, {r0, r1, r7}
    7520:	cb83      	ldmia	r3!, {r0, r1, r7}
    7522:	c283      	stmia	r2!, {r0, r1, r7}
    7524:	cb83      	ldmia	r3!, {r0, r1, r7}
    7526:	c283      	stmia	r2!, {r0, r1, r7}
    7528:	681b      	ldr	r3, [r3, #0]
    752a:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    752c:	2300      	movs	r3, #0
    752e:	60a3      	str	r3, [r4, #8]
    7530:	60e3      	str	r3, [r4, #12]
    7532:	6123      	str	r3, [r4, #16]
    7534:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    7536:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    7538:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    753a:	4643      	mov	r3, r8
    753c:	009a      	lsls	r2, r3, #2
    753e:	4ba0      	ldr	r3, [pc, #640]	; (77c0 <tc_init+0x2d4>)
    7540:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    7542:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    7544:	2334      	movs	r3, #52	; 0x34
    7546:	5cf3      	ldrb	r3, [r6, r3]
    7548:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    754a:	78f3      	ldrb	r3, [r6, #3]
    754c:	2b08      	cmp	r3, #8
    754e:	d008      	beq.n	7562 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    7550:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    7552:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    7554:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    7556:	07db      	lsls	r3, r3, #31
    7558:	d508      	bpl.n	756c <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    755a:	b00e      	add	sp, #56	; 0x38
    755c:	bc04      	pop	{r2}
    755e:	4690      	mov	r8, r2
    7560:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    7562:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    7564:	4642      	mov	r2, r8
    7566:	07d2      	lsls	r2, r2, #31
    7568:	d4f7      	bmi.n	755a <tc_init+0x6e>
    756a:	e7f1      	b.n	7550 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    756c:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    756e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    7570:	079b      	lsls	r3, r3, #30
    7572:	d4f2      	bmi.n	755a <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    7574:	682b      	ldr	r3, [r5, #0]
    7576:	079b      	lsls	r3, r3, #30
    7578:	d4ef      	bmi.n	755a <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    757a:	7c33      	ldrb	r3, [r6, #16]
    757c:	2b00      	cmp	r3, #0
    757e:	d112      	bne.n	75a6 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    7580:	7f33      	ldrb	r3, [r6, #28]
    7582:	2b00      	cmp	r3, #0
    7584:	d11b      	bne.n	75be <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    7586:	4643      	mov	r3, r8
    7588:	005a      	lsls	r2, r3, #1
    758a:	a902      	add	r1, sp, #8
    758c:	1c53      	adds	r3, r2, #1
    758e:	009b      	lsls	r3, r3, #2
    7590:	5858      	ldr	r0, [r3, r1]
    7592:	4643      	mov	r3, r8
    7594:	00db      	lsls	r3, r3, #3
    7596:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    7598:	b2d9      	uxtb	r1, r3
    759a:	2904      	cmp	r1, #4
    759c:	d823      	bhi.n	75e6 <tc_init+0xfa>
    759e:	008b      	lsls	r3, r1, #2
    75a0:	4988      	ldr	r1, [pc, #544]	; (77c4 <tc_init+0x2d8>)
    75a2:	58cb      	ldr	r3, [r1, r3]
    75a4:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    75a6:	a901      	add	r1, sp, #4
    75a8:	2301      	movs	r3, #1
    75aa:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    75ac:	2200      	movs	r2, #0
    75ae:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    75b0:	7e32      	ldrb	r2, [r6, #24]
    75b2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    75b4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    75b6:	7d30      	ldrb	r0, [r6, #20]
    75b8:	4b83      	ldr	r3, [pc, #524]	; (77c8 <tc_init+0x2dc>)
    75ba:	4798      	blx	r3
    75bc:	e7e0      	b.n	7580 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    75be:	a901      	add	r1, sp, #4
    75c0:	2301      	movs	r3, #1
    75c2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    75c4:	2200      	movs	r2, #0
    75c6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    75c8:	3224      	adds	r2, #36	; 0x24
    75ca:	18b2      	adds	r2, r6, r2
    75cc:	7812      	ldrb	r2, [r2, #0]
    75ce:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    75d0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    75d2:	331f      	adds	r3, #31
    75d4:	18f3      	adds	r3, r6, r3
    75d6:	7818      	ldrb	r0, [r3, #0]
    75d8:	4b7b      	ldr	r3, [pc, #492]	; (77c8 <tc_init+0x2dc>)
    75da:	4798      	blx	r3
    75dc:	e7d3      	b.n	7586 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    75de:	497b      	ldr	r1, [pc, #492]	; (77cc <tc_init+0x2e0>)
    75e0:	694b      	ldr	r3, [r1, #20]
    75e2:	4318      	orrs	r0, r3
    75e4:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    75e6:	78f3      	ldrb	r3, [r6, #3]
    75e8:	2b08      	cmp	r3, #8
    75ea:	d100      	bne.n	75ee <tc_init+0x102>
    75ec:	e086      	b.n	76fc <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    75ee:	7833      	ldrb	r3, [r6, #0]
    75f0:	466a      	mov	r2, sp
    75f2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    75f4:	ab0c      	add	r3, sp, #48	; 0x30
    75f6:	4642      	mov	r2, r8
    75f8:	5c9f      	ldrb	r7, [r3, r2]
    75fa:	4669      	mov	r1, sp
    75fc:	0038      	movs	r0, r7
    75fe:	4b74      	ldr	r3, [pc, #464]	; (77d0 <tc_init+0x2e4>)
    7600:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    7602:	0038      	movs	r0, r7
    7604:	4b73      	ldr	r3, [pc, #460]	; (77d4 <tc_init+0x2e8>)
    7606:	4798      	blx	r3
			(uint32_t)config->counter_size |
    7608:	78f3      	ldrb	r3, [r6, #3]
    760a:	79f2      	ldrb	r2, [r6, #7]
    760c:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    760e:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    7610:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    7612:	7a72      	ldrb	r2, [r6, #9]
    7614:	2a00      	cmp	r2, #0
    7616:	d002      	beq.n	761e <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    7618:	2280      	movs	r2, #128	; 0x80
    761a:	0252      	lsls	r2, r2, #9
    761c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    761e:	7ab2      	ldrb	r2, [r6, #10]
    7620:	2a00      	cmp	r2, #0
    7622:	d002      	beq.n	762a <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    7624:	2280      	movs	r2, #128	; 0x80
    7626:	0292      	lsls	r2, r2, #10
    7628:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    762a:	7af2      	ldrb	r2, [r6, #11]
    762c:	2a00      	cmp	r2, #0
    762e:	d002      	beq.n	7636 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    7630:	2280      	movs	r2, #128	; 0x80
    7632:	0352      	lsls	r2, r2, #13
    7634:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    7636:	7b32      	ldrb	r2, [r6, #12]
    7638:	2a00      	cmp	r2, #0
    763a:	d002      	beq.n	7642 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    763c:	2280      	movs	r2, #128	; 0x80
    763e:	0392      	lsls	r2, r2, #14
    7640:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    7642:	7871      	ldrb	r1, [r6, #1]
    7644:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    7646:	78b2      	ldrb	r2, [r6, #2]
    7648:	01d2      	lsls	r2, r2, #7
    764a:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    764c:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    764e:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	return (tc_module->SYNCBUSY.reg);
    7650:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7652:	2b00      	cmp	r3, #0
    7654:	d1fc      	bne.n	7650 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    7656:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7658:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    765a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    765c:	2b00      	cmp	r3, #0
    765e:	d1fc      	bne.n	765a <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    7660:	79b3      	ldrb	r3, [r6, #6]
    7662:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    7664:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    7666:	1e4b      	subs	r3, r1, #1
    7668:	4199      	sbcs	r1, r3
    766a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    766c:	7bb3      	ldrb	r3, [r6, #14]
    766e:	2b00      	cmp	r3, #0
    7670:	d001      	beq.n	7676 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    7672:	2301      	movs	r3, #1
    7674:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7676:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7678:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    767a:	2b00      	cmp	r3, #0
    767c:	d1fc      	bne.n	7678 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    767e:	33ff      	adds	r3, #255	; 0xff
    7680:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    7682:	2900      	cmp	r1, #0
    7684:	d004      	beq.n	7690 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7686:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7688:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    768a:	2b00      	cmp	r3, #0
    768c:	d1fc      	bne.n	7688 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    768e:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    7690:	7a33      	ldrb	r3, [r6, #8]
    7692:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7694:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7696:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    7698:	2b00      	cmp	r3, #0
    769a:	d1fc      	bne.n	7696 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    769c:	7923      	ldrb	r3, [r4, #4]
    769e:	2b04      	cmp	r3, #4
    76a0:	d059      	beq.n	7756 <tc_init+0x26a>
    76a2:	2b08      	cmp	r3, #8
    76a4:	d074      	beq.n	7790 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    76a6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    76a8:	2b00      	cmp	r3, #0
    76aa:	d000      	beq.n	76ae <tc_init+0x1c2>
    76ac:	e755      	b.n	755a <tc_init+0x6e>
    76ae:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    76b0:	2b00      	cmp	r3, #0
    76b2:	d1fc      	bne.n	76ae <tc_init+0x1c2>
				= config->counter_16_bit.value;
    76b4:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    76b6:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76b8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    76ba:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    76bc:	2b00      	cmp	r3, #0
    76be:	d1fc      	bne.n	76ba <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    76c0:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    76c2:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    76c4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    76c6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    76c8:	2b00      	cmp	r3, #0
    76ca:	d1fc      	bne.n	76c6 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    76cc:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    76ce:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    76d0:	2000      	movs	r0, #0
    76d2:	e742      	b.n	755a <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    76d4:	493d      	ldr	r1, [pc, #244]	; (77cc <tc_init+0x2e0>)
    76d6:	698b      	ldr	r3, [r1, #24]
    76d8:	4318      	orrs	r0, r3
    76da:	6188      	str	r0, [r1, #24]
    76dc:	e783      	b.n	75e6 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    76de:	493b      	ldr	r1, [pc, #236]	; (77cc <tc_init+0x2e0>)
    76e0:	69cb      	ldr	r3, [r1, #28]
    76e2:	4318      	orrs	r0, r3
    76e4:	61c8      	str	r0, [r1, #28]
    76e6:	e77e      	b.n	75e6 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    76e8:	4938      	ldr	r1, [pc, #224]	; (77cc <tc_init+0x2e0>)
    76ea:	6a0b      	ldr	r3, [r1, #32]
    76ec:	4318      	orrs	r0, r3
    76ee:	6208      	str	r0, [r1, #32]
    76f0:	e779      	b.n	75e6 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    76f2:	4b36      	ldr	r3, [pc, #216]	; (77cc <tc_init+0x2e0>)
    76f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    76f6:	4308      	orrs	r0, r1
    76f8:	6258      	str	r0, [r3, #36]	; 0x24
    76fa:	e774      	b.n	75e6 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    76fc:	4643      	mov	r3, r8
    76fe:	3301      	adds	r3, #1
    7700:	2b04      	cmp	r3, #4
    7702:	dd00      	ble.n	7706 <tc_init+0x21a>
    7704:	e773      	b.n	75ee <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    7706:	ab02      	add	r3, sp, #8
    7708:	1cd1      	adds	r1, r2, #3
    770a:	0089      	lsls	r1, r1, #2
    770c:	58c9      	ldr	r1, [r1, r3]
    770e:	3202      	adds	r2, #2
    7710:	0092      	lsls	r2, r2, #2
    7712:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    7714:	b2da      	uxtb	r2, r3
    7716:	2a04      	cmp	r2, #4
    7718:	d900      	bls.n	771c <tc_init+0x230>
    771a:	e768      	b.n	75ee <tc_init+0x102>
    771c:	0093      	lsls	r3, r2, #2
    771e:	4a2e      	ldr	r2, [pc, #184]	; (77d8 <tc_init+0x2ec>)
    7720:	58d3      	ldr	r3, [r2, r3]
    7722:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    7724:	4a29      	ldr	r2, [pc, #164]	; (77cc <tc_init+0x2e0>)
    7726:	6953      	ldr	r3, [r2, #20]
    7728:	4319      	orrs	r1, r3
    772a:	6151      	str	r1, [r2, #20]
    772c:	e75f      	b.n	75ee <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    772e:	4a27      	ldr	r2, [pc, #156]	; (77cc <tc_init+0x2e0>)
    7730:	6993      	ldr	r3, [r2, #24]
    7732:	4319      	orrs	r1, r3
    7734:	6191      	str	r1, [r2, #24]
    7736:	e75a      	b.n	75ee <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    7738:	4a24      	ldr	r2, [pc, #144]	; (77cc <tc_init+0x2e0>)
    773a:	69d3      	ldr	r3, [r2, #28]
    773c:	4319      	orrs	r1, r3
    773e:	61d1      	str	r1, [r2, #28]
    7740:	e755      	b.n	75ee <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    7742:	4a22      	ldr	r2, [pc, #136]	; (77cc <tc_init+0x2e0>)
    7744:	6a13      	ldr	r3, [r2, #32]
    7746:	4319      	orrs	r1, r3
    7748:	6211      	str	r1, [r2, #32]
    774a:	e750      	b.n	75ee <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    774c:	4b1f      	ldr	r3, [pc, #124]	; (77cc <tc_init+0x2e0>)
    774e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7750:	4311      	orrs	r1, r2
    7752:	6259      	str	r1, [r3, #36]	; 0x24
    7754:	e74b      	b.n	75ee <tc_init+0x102>
    7756:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7758:	2b00      	cmp	r3, #0
    775a:	d1fc      	bne.n	7756 <tc_init+0x26a>
					config->counter_8_bit.value;
    775c:	3328      	adds	r3, #40	; 0x28
    775e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    7760:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7762:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7764:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7766:	2b00      	cmp	r3, #0
    7768:	d1fc      	bne.n	7764 <tc_init+0x278>
					config->counter_8_bit.period;
    776a:	3329      	adds	r3, #41	; 0x29
    776c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    776e:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    7770:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7772:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7774:	2b00      	cmp	r3, #0
    7776:	d1fc      	bne.n	7772 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    7778:	332a      	adds	r3, #42	; 0x2a
    777a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    777c:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    777e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    7780:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7782:	2b00      	cmp	r3, #0
    7784:	d1fc      	bne.n	7780 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    7786:	332b      	adds	r3, #43	; 0x2b
    7788:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    778a:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    778c:	2000      	movs	r0, #0
    778e:	e6e4      	b.n	755a <tc_init+0x6e>
    7790:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    7792:	2b00      	cmp	r3, #0
    7794:	d1fc      	bne.n	7790 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    7796:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7798:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    779a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    779c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    779e:	2b00      	cmp	r3, #0
    77a0:	d1fc      	bne.n	779c <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    77a2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    77a4:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    77a6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    77a8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    77aa:	2b00      	cmp	r3, #0
    77ac:	d1fc      	bne.n	77a8 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    77ae:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    77b0:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    77b2:	2000      	movs	r0, #0
    77b4:	e6d1      	b.n	755a <tc_init+0x6e>
    77b6:	46c0      	nop			; (mov r8, r8)
    77b8:	000074b1 	.word	0x000074b1
    77bc:	0001fbd0 	.word	0x0001fbd0
    77c0:	20002250 	.word	0x20002250
    77c4:	0001fba8 	.word	0x0001fba8
    77c8:	00007369 	.word	0x00007369
    77cc:	40000400 	.word	0x40000400
    77d0:	0000723d 	.word	0x0000723d
    77d4:	000071cd 	.word	0x000071cd
    77d8:	0001fbbc 	.word	0x0001fbbc

000077dc <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    77dc:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    77de:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    77e0:	2b00      	cmp	r3, #0
    77e2:	d1fc      	bne.n	77de <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    77e4:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    77e6:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    77e8:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    77ea:	2b00      	cmp	r3, #0
    77ec:	d1fc      	bne.n	77e8 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    77ee:	3380      	adds	r3, #128	; 0x80
    77f0:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    77f2:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    77f4:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    77f6:	2b00      	cmp	r3, #0
    77f8:	d1fc      	bne.n	77f4 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    77fa:	7903      	ldrb	r3, [r0, #4]
    77fc:	2b04      	cmp	r3, #4
    77fe:	d005      	beq.n	780c <tc_get_count_value+0x30>
    7800:	2b08      	cmp	r3, #8
    7802:	d009      	beq.n	7818 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    7804:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    7806:	2b00      	cmp	r3, #0
    7808:	d003      	beq.n	7812 <tc_get_count_value+0x36>
}
    780a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    780c:	7d10      	ldrb	r0, [r2, #20]
    780e:	b2c0      	uxtb	r0, r0
    7810:	e7fb      	b.n	780a <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    7812:	8a90      	ldrh	r0, [r2, #20]
    7814:	b280      	uxth	r0, r0
    7816:	e7f8      	b.n	780a <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    7818:	6950      	ldr	r0, [r2, #20]
    781a:	e7f6      	b.n	780a <tc_get_count_value+0x2e>

0000781c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    781c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    781e:	6804      	ldr	r4, [r0, #0]
    7820:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    7822:	2b00      	cmp	r3, #0
    7824:	d1fc      	bne.n	7820 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    7826:	7903      	ldrb	r3, [r0, #4]
    7828:	2b04      	cmp	r3, #4
    782a:	d006      	beq.n	783a <tc_set_compare_value+0x1e>
    782c:	2b08      	cmp	r3, #8
    782e:	d028      	beq.n	7882 <tc_set_compare_value+0x66>
    7830:	2b00      	cmp	r3, #0
    7832:	d013      	beq.n	785c <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    7834:	2317      	movs	r3, #23
}
    7836:	0018      	movs	r0, r3
    7838:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    783a:	2317      	movs	r3, #23
			if (channel_index <
    783c:	2901      	cmp	r1, #1
    783e:	d8fa      	bhi.n	7836 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7840:	7e83      	ldrb	r3, [r0, #26]
    7842:	2b00      	cmp	r3, #0
    7844:	d005      	beq.n	7852 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    7846:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    7848:	1861      	adds	r1, r4, r1
    784a:	3130      	adds	r1, #48	; 0x30
    784c:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    784e:	2300      	movs	r3, #0
    7850:	e7f1      	b.n	7836 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    7852:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    7854:	1864      	adds	r4, r4, r1
    7856:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    7858:	2300      	movs	r3, #0
    785a:	e7ec      	b.n	7836 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    785c:	2317      	movs	r3, #23
			if (channel_index <
    785e:	2901      	cmp	r1, #1
    7860:	d8e9      	bhi.n	7836 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7862:	7e83      	ldrb	r3, [r0, #26]
    7864:	2b00      	cmp	r3, #0
    7866:	d005      	beq.n	7874 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    7868:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    786a:	3118      	adds	r1, #24
    786c:	0049      	lsls	r1, r1, #1
    786e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    7870:	2300      	movs	r3, #0
    7872:	e7e0      	b.n	7836 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    7874:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    7876:	310c      	adds	r1, #12
    7878:	0049      	lsls	r1, r1, #1
    787a:	1864      	adds	r4, r4, r1
    787c:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    787e:	2300      	movs	r3, #0
    7880:	e7d9      	b.n	7836 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    7882:	2317      	movs	r3, #23
			if (channel_index <
    7884:	2901      	cmp	r1, #1
    7886:	d8d6      	bhi.n	7836 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    7888:	7e83      	ldrb	r3, [r0, #26]
    788a:	2b00      	cmp	r3, #0
    788c:	d105      	bne.n	789a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    788e:	3106      	adds	r1, #6
    7890:	0089      	lsls	r1, r1, #2
    7892:	1864      	adds	r4, r4, r1
    7894:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    7896:	2300      	movs	r3, #0
    7898:	e7cd      	b.n	7836 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    789a:	310c      	adds	r1, #12
    789c:	0089      	lsls	r1, r1, #2
    789e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    78a0:	2300      	movs	r3, #0
    78a2:	e7c8      	b.n	7836 <tc_set_compare_value+0x1a>

000078a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    78a4:	e7fe      	b.n	78a4 <Dummy_Handler>
	...

000078a8 <Reset_Handler>:
{
    78a8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    78aa:	4a1a      	ldr	r2, [pc, #104]	; (7914 <Reset_Handler+0x6c>)
    78ac:	4b1a      	ldr	r3, [pc, #104]	; (7918 <Reset_Handler+0x70>)
    78ae:	429a      	cmp	r2, r3
    78b0:	d011      	beq.n	78d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    78b2:	001a      	movs	r2, r3
    78b4:	4b19      	ldr	r3, [pc, #100]	; (791c <Reset_Handler+0x74>)
    78b6:	429a      	cmp	r2, r3
    78b8:	d20d      	bcs.n	78d6 <Reset_Handler+0x2e>
    78ba:	4a19      	ldr	r2, [pc, #100]	; (7920 <Reset_Handler+0x78>)
    78bc:	3303      	adds	r3, #3
    78be:	1a9b      	subs	r3, r3, r2
    78c0:	089b      	lsrs	r3, r3, #2
    78c2:	3301      	adds	r3, #1
    78c4:	009b      	lsls	r3, r3, #2
    78c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    78c8:	4813      	ldr	r0, [pc, #76]	; (7918 <Reset_Handler+0x70>)
    78ca:	4912      	ldr	r1, [pc, #72]	; (7914 <Reset_Handler+0x6c>)
    78cc:	588c      	ldr	r4, [r1, r2]
    78ce:	5084      	str	r4, [r0, r2]
    78d0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    78d2:	429a      	cmp	r2, r3
    78d4:	d1fa      	bne.n	78cc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    78d6:	4a13      	ldr	r2, [pc, #76]	; (7924 <Reset_Handler+0x7c>)
    78d8:	4b13      	ldr	r3, [pc, #76]	; (7928 <Reset_Handler+0x80>)
    78da:	429a      	cmp	r2, r3
    78dc:	d20a      	bcs.n	78f4 <Reset_Handler+0x4c>
    78de:	43d3      	mvns	r3, r2
    78e0:	4911      	ldr	r1, [pc, #68]	; (7928 <Reset_Handler+0x80>)
    78e2:	185b      	adds	r3, r3, r1
    78e4:	2103      	movs	r1, #3
    78e6:	438b      	bics	r3, r1
    78e8:	3304      	adds	r3, #4
    78ea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    78ec:	2100      	movs	r1, #0
    78ee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    78f0:	4293      	cmp	r3, r2
    78f2:	d1fc      	bne.n	78ee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    78f4:	4a0d      	ldr	r2, [pc, #52]	; (792c <Reset_Handler+0x84>)
    78f6:	21ff      	movs	r1, #255	; 0xff
    78f8:	4b0d      	ldr	r3, [pc, #52]	; (7930 <Reset_Handler+0x88>)
    78fa:	438b      	bics	r3, r1
    78fc:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    78fe:	4a0d      	ldr	r2, [pc, #52]	; (7934 <Reset_Handler+0x8c>)
    7900:	6853      	ldr	r3, [r2, #4]
    7902:	397f      	subs	r1, #127	; 0x7f
    7904:	430b      	orrs	r3, r1
    7906:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    7908:	4b0b      	ldr	r3, [pc, #44]	; (7938 <Reset_Handler+0x90>)
    790a:	4798      	blx	r3
        main();
    790c:	4b0b      	ldr	r3, [pc, #44]	; (793c <Reset_Handler+0x94>)
    790e:	4798      	blx	r3
    7910:	e7fe      	b.n	7910 <Reset_Handler+0x68>
    7912:	46c0      	nop			; (mov r8, r8)
    7914:	00020930 	.word	0x00020930
    7918:	20000000 	.word	0x20000000
    791c:	200009c8 	.word	0x200009c8
    7920:	20000004 	.word	0x20000004
    7924:	200009c8 	.word	0x200009c8
    7928:	20002fe8 	.word	0x20002fe8
    792c:	e000ed00 	.word	0xe000ed00
    7930:	00000000 	.word	0x00000000
    7934:	41004000 	.word	0x41004000
    7938:	00019651 	.word	0x00019651
    793c:	0000fa15 	.word	0x0000fa15

00007940 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    7940:	b5f0      	push	{r4, r5, r6, r7, lr}
    7942:	46c6      	mov	lr, r8
    7944:	b500      	push	{lr}
    7946:	000c      	movs	r4, r1
    7948:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    794a:	2800      	cmp	r0, #0
    794c:	d10f      	bne.n	796e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    794e:	2a00      	cmp	r2, #0
    7950:	dd11      	ble.n	7976 <_read+0x36>
    7952:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    7954:	4e09      	ldr	r6, [pc, #36]	; (797c <_read+0x3c>)
    7956:	4d0a      	ldr	r5, [pc, #40]	; (7980 <_read+0x40>)
    7958:	6830      	ldr	r0, [r6, #0]
    795a:	0021      	movs	r1, r4
    795c:	682b      	ldr	r3, [r5, #0]
    795e:	4798      	blx	r3
		ptr++;
    7960:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    7962:	42bc      	cmp	r4, r7
    7964:	d1f8      	bne.n	7958 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    7966:	4640      	mov	r0, r8
    7968:	bc04      	pop	{r2}
    796a:	4690      	mov	r8, r2
    796c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    796e:	2301      	movs	r3, #1
    7970:	425b      	negs	r3, r3
    7972:	4698      	mov	r8, r3
    7974:	e7f7      	b.n	7966 <_read+0x26>
	for (; len > 0; --len) {
    7976:	4680      	mov	r8, r0
    7978:	e7f5      	b.n	7966 <_read+0x26>
    797a:	46c0      	nop			; (mov r8, r8)
    797c:	2000226c 	.word	0x2000226c
    7980:	20002264 	.word	0x20002264

00007984 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    7984:	b5f0      	push	{r4, r5, r6, r7, lr}
    7986:	46c6      	mov	lr, r8
    7988:	b500      	push	{lr}
    798a:	000e      	movs	r6, r1
    798c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    798e:	3801      	subs	r0, #1
    7990:	2802      	cmp	r0, #2
    7992:	d810      	bhi.n	79b6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    7994:	2a00      	cmp	r2, #0
    7996:	d011      	beq.n	79bc <_write+0x38>
    7998:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    799a:	4b0c      	ldr	r3, [pc, #48]	; (79cc <_write+0x48>)
    799c:	4698      	mov	r8, r3
    799e:	4f0c      	ldr	r7, [pc, #48]	; (79d0 <_write+0x4c>)
    79a0:	4643      	mov	r3, r8
    79a2:	6818      	ldr	r0, [r3, #0]
    79a4:	5d31      	ldrb	r1, [r6, r4]
    79a6:	683b      	ldr	r3, [r7, #0]
    79a8:	4798      	blx	r3
    79aa:	2800      	cmp	r0, #0
    79ac:	db08      	blt.n	79c0 <_write+0x3c>
			return -1;
		}
		++nChars;
    79ae:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    79b0:	42a5      	cmp	r5, r4
    79b2:	d1f5      	bne.n	79a0 <_write+0x1c>
    79b4:	e006      	b.n	79c4 <_write+0x40>
		return -1;
    79b6:	2401      	movs	r4, #1
    79b8:	4264      	negs	r4, r4
    79ba:	e003      	b.n	79c4 <_write+0x40>
	for (; len != 0; --len) {
    79bc:	0014      	movs	r4, r2
    79be:	e001      	b.n	79c4 <_write+0x40>
			return -1;
    79c0:	2401      	movs	r4, #1
    79c2:	4264      	negs	r4, r4
	}
	return nChars;
}
    79c4:	0020      	movs	r0, r4
    79c6:	bc04      	pop	{r2}
    79c8:	4690      	mov	r8, r2
    79ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    79cc:	2000226c 	.word	0x2000226c
    79d0:	20002268 	.word	0x20002268

000079d4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    79d4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    79d6:	4a06      	ldr	r2, [pc, #24]	; (79f0 <_sbrk+0x1c>)
    79d8:	6812      	ldr	r2, [r2, #0]
    79da:	2a00      	cmp	r2, #0
    79dc:	d004      	beq.n	79e8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    79de:	4a04      	ldr	r2, [pc, #16]	; (79f0 <_sbrk+0x1c>)
    79e0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    79e2:	18c3      	adds	r3, r0, r3
    79e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    79e6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    79e8:	4902      	ldr	r1, [pc, #8]	; (79f4 <_sbrk+0x20>)
    79ea:	4a01      	ldr	r2, [pc, #4]	; (79f0 <_sbrk+0x1c>)
    79ec:	6011      	str	r1, [r2, #0]
    79ee:	e7f6      	b.n	79de <_sbrk+0xa>
    79f0:	20000b9c 	.word	0x20000b9c
    79f4:	20004fe8 	.word	0x20004fe8

000079f8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    79f8:	2001      	movs	r0, #1
    79fa:	4240      	negs	r0, r0
    79fc:	4770      	bx	lr

000079fe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    79fe:	2380      	movs	r3, #128	; 0x80
    7a00:	019b      	lsls	r3, r3, #6
    7a02:	604b      	str	r3, [r1, #4]

	return 0;
}
    7a04:	2000      	movs	r0, #0
    7a06:	4770      	bx	lr

00007a08 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    7a08:	2001      	movs	r0, #1
    7a0a:	4770      	bx	lr

00007a0c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    7a0c:	2000      	movs	r0, #0
    7a0e:	4770      	bx	lr

00007a10 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    7a10:	b570      	push	{r4, r5, r6, lr}
    7a12:	b082      	sub	sp, #8
    7a14:	0005      	movs	r5, r0
    7a16:	000e      	movs	r6, r1
	uint16_t temp = 0;
    7a18:	2200      	movs	r2, #0
    7a1a:	466b      	mov	r3, sp
    7a1c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    7a1e:	4c06      	ldr	r4, [pc, #24]	; (7a38 <usart_serial_getchar+0x28>)
    7a20:	466b      	mov	r3, sp
    7a22:	1d99      	adds	r1, r3, #6
    7a24:	0028      	movs	r0, r5
    7a26:	47a0      	blx	r4
    7a28:	2800      	cmp	r0, #0
    7a2a:	d1f9      	bne.n	7a20 <usart_serial_getchar+0x10>

	*c = temp;
    7a2c:	466b      	mov	r3, sp
    7a2e:	3306      	adds	r3, #6
    7a30:	881b      	ldrh	r3, [r3, #0]
    7a32:	7033      	strb	r3, [r6, #0]
}
    7a34:	b002      	add	sp, #8
    7a36:	bd70      	pop	{r4, r5, r6, pc}
    7a38:	000067a3 	.word	0x000067a3

00007a3c <usart_serial_putchar>:
{
    7a3c:	b570      	push	{r4, r5, r6, lr}
    7a3e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    7a40:	b28c      	uxth	r4, r1
    7a42:	4e03      	ldr	r6, [pc, #12]	; (7a50 <usart_serial_putchar+0x14>)
    7a44:	0021      	movs	r1, r4
    7a46:	0028      	movs	r0, r5
    7a48:	47b0      	blx	r6
    7a4a:	2800      	cmp	r0, #0
    7a4c:	d1fa      	bne.n	7a44 <usart_serial_putchar+0x8>
}
    7a4e:	bd70      	pop	{r4, r5, r6, pc}
    7a50:	0000677d 	.word	0x0000677d

00007a54 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35 || WLR089
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    7a54:	b510      	push	{r4, lr}
    7a56:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    7a58:	466b      	mov	r3, sp
    7a5a:	1ddc      	adds	r4, r3, #7
    7a5c:	2201      	movs	r2, #1
    7a5e:	0021      	movs	r1, r4
    7a60:	480f      	ldr	r0, [pc, #60]	; (7aa0 <USART_HOST_ISR_VECT+0x4c>)
    7a62:	4b10      	ldr	r3, [pc, #64]	; (7aa4 <USART_HOST_ISR_VECT+0x50>)
    7a64:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    7a66:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    7a68:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    7a6c:	2200      	movs	r2, #0
    7a6e:	4b0e      	ldr	r3, [pc, #56]	; (7aa8 <USART_HOST_ISR_VECT+0x54>)
    7a70:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    7a72:	4b0e      	ldr	r3, [pc, #56]	; (7aac <USART_HOST_ISR_VECT+0x58>)
    7a74:	781b      	ldrb	r3, [r3, #0]
    7a76:	7821      	ldrb	r1, [r4, #0]
    7a78:	4a0d      	ldr	r2, [pc, #52]	; (7ab0 <USART_HOST_ISR_VECT+0x5c>)
    7a7a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    7a7c:	2b7f      	cmp	r3, #127	; 0x7f
    7a7e:	d00a      	beq.n	7a96 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    7a80:	3301      	adds	r3, #1
    7a82:	4a0a      	ldr	r2, [pc, #40]	; (7aac <USART_HOST_ISR_VECT+0x58>)
    7a84:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    7a86:	2201      	movs	r2, #1
    7a88:	4b07      	ldr	r3, [pc, #28]	; (7aa8 <USART_HOST_ISR_VECT+0x54>)
    7a8a:	701a      	strb	r2, [r3, #0]
    7a8c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    7a90:	b662      	cpsie	i
}
    7a92:	b002      	add	sp, #8
    7a94:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    7a96:	2200      	movs	r2, #0
    7a98:	4b04      	ldr	r3, [pc, #16]	; (7aac <USART_HOST_ISR_VECT+0x58>)
    7a9a:	701a      	strb	r2, [r3, #0]
    7a9c:	e7f3      	b.n	7a86 <USART_HOST_ISR_VECT+0x32>
    7a9e:	46c0      	nop			; (mov r8, r8)
    7aa0:	20000ba0 	.word	0x20000ba0
    7aa4:	000068c9 	.word	0x000068c9
    7aa8:	20000014 	.word	0x20000014
    7aac:	20000c55 	.word	0x20000c55
    7ab0:	20000bd4 	.word	0x20000bd4

00007ab4 <sio2host_init>:
{
    7ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ab6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    7ab8:	2380      	movs	r3, #128	; 0x80
    7aba:	05db      	lsls	r3, r3, #23
    7abc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    7abe:	2300      	movs	r3, #0
    7ac0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    7ac2:	22ff      	movs	r2, #255	; 0xff
    7ac4:	4669      	mov	r1, sp
    7ac6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    7ac8:	2200      	movs	r2, #0
    7aca:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7acc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    7ace:	2401      	movs	r4, #1
    7ad0:	2124      	movs	r1, #36	; 0x24
    7ad2:	4668      	mov	r0, sp
    7ad4:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    7ad6:	3101      	adds	r1, #1
    7ad8:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    7ada:	3101      	adds	r1, #1
    7adc:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    7ade:	3101      	adds	r1, #1
    7ae0:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    7ae2:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    7ae4:	3105      	adds	r1, #5
    7ae6:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    7ae8:	3101      	adds	r1, #1
    7aea:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7aec:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7aee:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    7af0:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    7af2:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    7af4:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    7af6:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    7af8:	2313      	movs	r3, #19
    7afa:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    7afc:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    7afe:	2380      	movs	r3, #128	; 0x80
    7b00:	035b      	lsls	r3, r3, #13
    7b02:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    7b04:	4b2f      	ldr	r3, [pc, #188]	; (7bc4 <sio2host_init+0x110>)
    7b06:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    7b08:	4b2f      	ldr	r3, [pc, #188]	; (7bc8 <sio2host_init+0x114>)
    7b0a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    7b0c:	2301      	movs	r3, #1
    7b0e:	425b      	negs	r3, r3
    7b10:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    7b12:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    7b14:	23e1      	movs	r3, #225	; 0xe1
    7b16:	025b      	lsls	r3, r3, #9
    7b18:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    7b1a:	4d2c      	ldr	r5, [pc, #176]	; (7bcc <sio2host_init+0x118>)
    7b1c:	4b2c      	ldr	r3, [pc, #176]	; (7bd0 <sio2host_init+0x11c>)
    7b1e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    7b20:	4a2c      	ldr	r2, [pc, #176]	; (7bd4 <sio2host_init+0x120>)
    7b22:	4b2d      	ldr	r3, [pc, #180]	; (7bd8 <sio2host_init+0x124>)
    7b24:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    7b26:	4a2d      	ldr	r2, [pc, #180]	; (7bdc <sio2host_init+0x128>)
    7b28:	4b2d      	ldr	r3, [pc, #180]	; (7be0 <sio2host_init+0x12c>)
    7b2a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    7b2c:	466a      	mov	r2, sp
    7b2e:	2184      	movs	r1, #132	; 0x84
    7b30:	05c9      	lsls	r1, r1, #23
    7b32:	0028      	movs	r0, r5
    7b34:	4b2b      	ldr	r3, [pc, #172]	; (7be4 <sio2host_init+0x130>)
    7b36:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    7b38:	4f2b      	ldr	r7, [pc, #172]	; (7be8 <sio2host_init+0x134>)
    7b3a:	683b      	ldr	r3, [r7, #0]
    7b3c:	6898      	ldr	r0, [r3, #8]
    7b3e:	2100      	movs	r1, #0
    7b40:	4e2a      	ldr	r6, [pc, #168]	; (7bec <sio2host_init+0x138>)
    7b42:	47b0      	blx	r6
	setbuf(stdin, NULL);
    7b44:	683b      	ldr	r3, [r7, #0]
    7b46:	6858      	ldr	r0, [r3, #4]
    7b48:	2100      	movs	r1, #0
    7b4a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b4c:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7b4e:	0030      	movs	r0, r6
    7b50:	4b27      	ldr	r3, [pc, #156]	; (7bf0 <sio2host_init+0x13c>)
    7b52:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7b54:	231f      	movs	r3, #31
    7b56:	4018      	ands	r0, r3
    7b58:	4084      	lsls	r4, r0
    7b5a:	4b26      	ldr	r3, [pc, #152]	; (7bf4 <sio2host_init+0x140>)
    7b5c:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b5e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7b60:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7b62:	2b00      	cmp	r3, #0
    7b64:	d1fc      	bne.n	7b60 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    7b66:	6833      	ldr	r3, [r6, #0]
    7b68:	2202      	movs	r2, #2
    7b6a:	4313      	orrs	r3, r2
    7b6c:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7b6e:	4b17      	ldr	r3, [pc, #92]	; (7bcc <sio2host_init+0x118>)
    7b70:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    7b72:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7b74:	2a00      	cmp	r2, #0
    7b76:	d1fc      	bne.n	7b72 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    7b78:	6859      	ldr	r1, [r3, #4]
    7b7a:	2280      	movs	r2, #128	; 0x80
    7b7c:	0252      	lsls	r2, r2, #9
    7b7e:	430a      	orrs	r2, r1
    7b80:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    7b82:	2101      	movs	r1, #1
    7b84:	4a11      	ldr	r2, [pc, #68]	; (7bcc <sio2host_init+0x118>)
    7b86:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    7b88:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7b8a:	2a00      	cmp	r2, #0
    7b8c:	d1fc      	bne.n	7b88 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    7b8e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7b90:	2a00      	cmp	r2, #0
    7b92:	d1fc      	bne.n	7b8e <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    7b94:	6859      	ldr	r1, [r3, #4]
    7b96:	2280      	movs	r2, #128	; 0x80
    7b98:	0292      	lsls	r2, r2, #10
    7b9a:	430a      	orrs	r2, r1
    7b9c:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    7b9e:	2101      	movs	r1, #1
    7ba0:	4a0a      	ldr	r2, [pc, #40]	; (7bcc <sio2host_init+0x118>)
    7ba2:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    7ba4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7ba6:	2a00      	cmp	r2, #0
    7ba8:	d1fc      	bne.n	7ba4 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    7baa:	4913      	ldr	r1, [pc, #76]	; (7bf8 <sio2host_init+0x144>)
    7bac:	2000      	movs	r0, #0
    7bae:	4b13      	ldr	r3, [pc, #76]	; (7bfc <sio2host_init+0x148>)
    7bb0:	4798      	blx	r3
    7bb2:	2204      	movs	r2, #4
    7bb4:	2384      	movs	r3, #132	; 0x84
    7bb6:	05db      	lsls	r3, r3, #23
    7bb8:	759a      	strb	r2, [r3, #22]
    7bba:	32fc      	adds	r2, #252	; 0xfc
    7bbc:	4b0d      	ldr	r3, [pc, #52]	; (7bf4 <sio2host_init+0x140>)
    7bbe:	601a      	str	r2, [r3, #0]
}
    7bc0:	b011      	add	sp, #68	; 0x44
    7bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7bc4:	00040003 	.word	0x00040003
    7bc8:	00050003 	.word	0x00050003
    7bcc:	20000ba0 	.word	0x20000ba0
    7bd0:	2000226c 	.word	0x2000226c
    7bd4:	00007a3d 	.word	0x00007a3d
    7bd8:	20002268 	.word	0x20002268
    7bdc:	00007a11 	.word	0x00007a11
    7be0:	20002264 	.word	0x20002264
    7be4:	00006419 	.word	0x00006419
    7be8:	20000018 	.word	0x20000018
    7bec:	0001a039 	.word	0x0001a039
    7bf0:	00005fb9 	.word	0x00005fb9
    7bf4:	e000e100 	.word	0xe000e100
    7bf8:	00007a55 	.word	0x00007a55
    7bfc:	00005f7d 	.word	0x00005f7d

00007c00 <sio2host_deinit>:
{
    7c00:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c02:	4d15      	ldr	r5, [pc, #84]	; (7c58 <sio2host_deinit+0x58>)
    7c04:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    7c06:	0020      	movs	r0, r4
    7c08:	4b14      	ldr	r3, [pc, #80]	; (7c5c <sio2host_deinit+0x5c>)
    7c0a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7c0c:	231f      	movs	r3, #31
    7c0e:	4018      	ands	r0, r3
    7c10:	3b1e      	subs	r3, #30
    7c12:	4083      	lsls	r3, r0
    7c14:	2280      	movs	r2, #128	; 0x80
    7c16:	4912      	ldr	r1, [pc, #72]	; (7c60 <sio2host_deinit+0x60>)
    7c18:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c1a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    7c1c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    7c1e:	2b00      	cmp	r3, #0
    7c20:	d1fc      	bne.n	7c1c <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    7c22:	6823      	ldr	r3, [r4, #0]
    7c24:	2202      	movs	r2, #2
    7c26:	4393      	bics	r3, r2
    7c28:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7c2a:	4b0b      	ldr	r3, [pc, #44]	; (7c58 <sio2host_deinit+0x58>)
    7c2c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    7c2e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7c30:	2a00      	cmp	r2, #0
    7c32:	d1fc      	bne.n	7c2e <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    7c34:	685a      	ldr	r2, [r3, #4]
    7c36:	490b      	ldr	r1, [pc, #44]	; (7c64 <sio2host_deinit+0x64>)
    7c38:	400a      	ands	r2, r1
    7c3a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    7c3c:	2100      	movs	r1, #0
    7c3e:	4a06      	ldr	r2, [pc, #24]	; (7c58 <sio2host_deinit+0x58>)
    7c40:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    7c42:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    7c44:	2a00      	cmp	r2, #0
    7c46:	d1fc      	bne.n	7c42 <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    7c48:	685a      	ldr	r2, [r3, #4]
    7c4a:	4907      	ldr	r1, [pc, #28]	; (7c68 <sio2host_deinit+0x68>)
    7c4c:	400a      	ands	r2, r1
    7c4e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    7c50:	2200      	movs	r2, #0
    7c52:	4b01      	ldr	r3, [pc, #4]	; (7c58 <sio2host_deinit+0x58>)
    7c54:	719a      	strb	r2, [r3, #6]
}
    7c56:	bd70      	pop	{r4, r5, r6, pc}
    7c58:	20000ba0 	.word	0x20000ba0
    7c5c:	00005fb9 	.word	0x00005fb9
    7c60:	e000e100 	.word	0xe000e100
    7c64:	fffeffff 	.word	0xfffeffff
    7c68:	fffdffff 	.word	0xfffdffff

00007c6c <sio2host_tx>:
{
    7c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c6e:	b083      	sub	sp, #12
    7c70:	0006      	movs	r6, r0
    7c72:	9101      	str	r1, [sp, #4]
	return usart_write_buffer_wait(module, tx_data, length);
    7c74:	466b      	mov	r3, sp
    7c76:	889d      	ldrh	r5, [r3, #4]
    7c78:	4c05      	ldr	r4, [pc, #20]	; (7c90 <sio2host_tx+0x24>)
    7c7a:	4f06      	ldr	r7, [pc, #24]	; (7c94 <sio2host_tx+0x28>)
    7c7c:	002a      	movs	r2, r5
    7c7e:	0031      	movs	r1, r6
    7c80:	0020      	movs	r0, r4
    7c82:	47b8      	blx	r7
	} while (status != STATUS_OK);
    7c84:	2800      	cmp	r0, #0
    7c86:	d1f9      	bne.n	7c7c <sio2host_tx+0x10>
}
    7c88:	9801      	ldr	r0, [sp, #4]
    7c8a:	b003      	add	sp, #12
    7c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c8e:	46c0      	nop			; (mov r8, r8)
    7c90:	20000ba0 	.word	0x20000ba0
    7c94:	0000680d 	.word	0x0000680d

00007c98 <sio2host_rx>:
{
    7c98:	b570      	push	{r4, r5, r6, lr}
    7c9a:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    7c9c:	4b1f      	ldr	r3, [pc, #124]	; (7d1c <sio2host_rx+0x84>)
    7c9e:	781c      	ldrb	r4, [r3, #0]
    7ca0:	4b1f      	ldr	r3, [pc, #124]	; (7d20 <sio2host_rx+0x88>)
    7ca2:	781b      	ldrb	r3, [r3, #0]
    7ca4:	429c      	cmp	r4, r3
    7ca6:	d319      	bcc.n	7cdc <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    7ca8:	1ae3      	subs	r3, r4, r3
    7caa:	481e      	ldr	r0, [pc, #120]	; (7d24 <sio2host_rx+0x8c>)
    7cac:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    7cae:	4b1d      	ldr	r3, [pc, #116]	; (7d24 <sio2host_rx+0x8c>)
    7cb0:	7818      	ldrb	r0, [r3, #0]
    7cb2:	2800      	cmp	r0, #0
    7cb4:	d031      	beq.n	7d1a <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    7cb6:	b243      	sxtb	r3, r0
    7cb8:	2b00      	cmp	r3, #0
    7cba:	db15      	blt.n	7ce8 <sio2host_rx+0x50>
    7cbc:	1c03      	adds	r3, r0, #0
    7cbe:	4288      	cmp	r0, r1
    7cc0:	d900      	bls.n	7cc4 <sio2host_rx+0x2c>
    7cc2:	1c0b      	adds	r3, r1, #0
    7cc4:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    7cc6:	2800      	cmp	r0, #0
    7cc8:	d027      	beq.n	7d1a <sio2host_rx+0x82>
    7cca:	4b15      	ldr	r3, [pc, #84]	; (7d20 <sio2host_rx+0x88>)
    7ccc:	781b      	ldrb	r3, [r3, #0]
    7cce:	1e44      	subs	r4, r0, #1
    7cd0:	b2e4      	uxtb	r4, r4
    7cd2:	3401      	adds	r4, #1
    7cd4:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    7cd6:	4d14      	ldr	r5, [pc, #80]	; (7d28 <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    7cd8:	2600      	movs	r6, #0
    7cda:	e014      	b.n	7d06 <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    7cdc:	0020      	movs	r0, r4
    7cde:	3880      	subs	r0, #128	; 0x80
    7ce0:	1ac3      	subs	r3, r0, r3
    7ce2:	4810      	ldr	r0, [pc, #64]	; (7d24 <sio2host_rx+0x8c>)
    7ce4:	7003      	strb	r3, [r0, #0]
    7ce6:	e7e2      	b.n	7cae <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    7ce8:	4b0d      	ldr	r3, [pc, #52]	; (7d20 <sio2host_rx+0x88>)
    7cea:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    7cec:	2080      	movs	r0, #128	; 0x80
    7cee:	4b0d      	ldr	r3, [pc, #52]	; (7d24 <sio2host_rx+0x8c>)
    7cf0:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    7cf2:	b24b      	sxtb	r3, r1
    7cf4:	2b00      	cmp	r3, #0
    7cf6:	db01      	blt.n	7cfc <sio2host_rx+0x64>
    7cf8:	0008      	movs	r0, r1
    7cfa:	e7e4      	b.n	7cc6 <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    7cfc:	2080      	movs	r0, #128	; 0x80
    7cfe:	e7e4      	b.n	7cca <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    7d00:	0033      	movs	r3, r6
	while (max_length > 0) {
    7d02:	4294      	cmp	r4, r2
    7d04:	d007      	beq.n	7d16 <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    7d06:	5ce9      	ldrb	r1, [r5, r3]
    7d08:	7011      	strb	r1, [r2, #0]
		data++;
    7d0a:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    7d0c:	2b7f      	cmp	r3, #127	; 0x7f
    7d0e:	d0f7      	beq.n	7d00 <sio2host_rx+0x68>
			serial_rx_buf_head++;
    7d10:	3301      	adds	r3, #1
    7d12:	b2db      	uxtb	r3, r3
    7d14:	e7f5      	b.n	7d02 <sio2host_rx+0x6a>
    7d16:	4a02      	ldr	r2, [pc, #8]	; (7d20 <sio2host_rx+0x88>)
    7d18:	7013      	strb	r3, [r2, #0]
}
    7d1a:	bd70      	pop	{r4, r5, r6, pc}
    7d1c:	20000c55 	.word	0x20000c55
    7d20:	20000c54 	.word	0x20000c54
    7d24:	20000c56 	.word	0x20000c56
    7d28:	20000bd4 	.word	0x20000bd4

00007d2c <sio2host_getchar_nowait>:
{
    7d2c:	b500      	push	{lr}
    7d2e:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
    7d30:	2101      	movs	r1, #1
    7d32:	466b      	mov	r3, sp
    7d34:	1dd8      	adds	r0, r3, #7
    7d36:	4b05      	ldr	r3, [pc, #20]	; (7d4c <sio2host_getchar_nowait+0x20>)
    7d38:	4798      	blx	r3
	if (back >= 1) {
    7d3a:	2800      	cmp	r0, #0
    7d3c:	dd03      	ble.n	7d46 <sio2host_getchar_nowait+0x1a>
		return c;
    7d3e:	466b      	mov	r3, sp
    7d40:	79d8      	ldrb	r0, [r3, #7]
}
    7d42:	b003      	add	sp, #12
    7d44:	bd00      	pop	{pc}
		return (-1);
    7d46:	2001      	movs	r0, #1
    7d48:	4240      	negs	r0, r0
    7d4a:	e7fa      	b.n	7d42 <sio2host_getchar_nowait+0x16>
    7d4c:	00007c99 	.word	0x00007c99

00007d50 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    7d50:	4b13      	ldr	r3, [pc, #76]	; (7da0 <HAL_SPISend+0x50>)
    7d52:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    7d54:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7d56:	7e1a      	ldrb	r2, [r3, #24]
    7d58:	420a      	tst	r2, r1
    7d5a:	d0fc      	beq.n	7d56 <HAL_SPISend+0x6>
    7d5c:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    7d5e:	07d2      	lsls	r2, r2, #31
    7d60:	d500      	bpl.n	7d64 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7d62:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    7d64:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7d66:	7e1a      	ldrb	r2, [r3, #24]
    7d68:	420a      	tst	r2, r1
    7d6a:	d0fc      	beq.n	7d66 <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    7d6c:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7d6e:	7e1a      	ldrb	r2, [r3, #24]
    7d70:	420a      	tst	r2, r1
    7d72:	d0fc      	beq.n	7d6e <HAL_SPISend+0x1e>
    7d74:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    7d76:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    7d78:	0752      	lsls	r2, r2, #29
    7d7a:	d50a      	bpl.n	7d92 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7d7c:	8b5a      	ldrh	r2, [r3, #26]
    7d7e:	0752      	lsls	r2, r2, #29
    7d80:	d501      	bpl.n	7d86 <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7d82:	2204      	movs	r2, #4
    7d84:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7d86:	4a06      	ldr	r2, [pc, #24]	; (7da0 <HAL_SPISend+0x50>)
    7d88:	7992      	ldrb	r2, [r2, #6]
    7d8a:	2a01      	cmp	r2, #1
    7d8c:	d003      	beq.n	7d96 <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7d8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7d90:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    7d92:	b2c0      	uxtb	r0, r0
}
    7d94:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7d96:	6a98      	ldr	r0, [r3, #40]	; 0x28
    7d98:	05c0      	lsls	r0, r0, #23
    7d9a:	0dc0      	lsrs	r0, r0, #23
    7d9c:	e7f9      	b.n	7d92 <HAL_SPISend+0x42>
    7d9e:	46c0      	nop			; (mov r8, r8)
    7da0:	20000c64 	.word	0x20000c64

00007da4 <HAL_ResetPinMakeOutput>:
{
    7da4:	b500      	push	{lr}
    7da6:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    7da8:	a901      	add	r1, sp, #4
    7daa:	2301      	movs	r3, #1
    7dac:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    7dae:	2200      	movs	r2, #0
    7db0:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7db2:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    7db4:	202f      	movs	r0, #47	; 0x2f
    7db6:	4b02      	ldr	r3, [pc, #8]	; (7dc0 <HAL_ResetPinMakeOutput+0x1c>)
    7db8:	4798      	blx	r3
}
    7dba:	b003      	add	sp, #12
    7dbc:	bd00      	pop	{pc}
    7dbe:	46c0      	nop			; (mov r8, r8)
    7dc0:	00004ead 	.word	0x00004ead

00007dc4 <HAL_RadioDIO2Callback>:
{
    7dc4:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    7dc6:	4b05      	ldr	r3, [pc, #20]	; (7ddc <HAL_RadioDIO2Callback+0x18>)
    7dc8:	681b      	ldr	r3, [r3, #0]
    7dca:	2b00      	cmp	r3, #0
    7dcc:	d004      	beq.n	7dd8 <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    7dce:	4b04      	ldr	r3, [pc, #16]	; (7de0 <HAL_RadioDIO2Callback+0x1c>)
    7dd0:	4798      	blx	r3
    interruptHandlerDio2();
    7dd2:	4b02      	ldr	r3, [pc, #8]	; (7ddc <HAL_RadioDIO2Callback+0x18>)
    7dd4:	681b      	ldr	r3, [r3, #0]
    7dd6:	4798      	blx	r3
}
    7dd8:	bd10      	pop	{r4, pc}
    7dda:	46c0      	nop			; (mov r8, r8)
    7ddc:	20000c60 	.word	0x20000c60
    7de0:	00008361 	.word	0x00008361

00007de4 <HAL_RadioDIO1Callback>:
{
    7de4:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    7de6:	4b05      	ldr	r3, [pc, #20]	; (7dfc <HAL_RadioDIO1Callback+0x18>)
    7de8:	681b      	ldr	r3, [r3, #0]
    7dea:	2b00      	cmp	r3, #0
    7dec:	d004      	beq.n	7df8 <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    7dee:	4b04      	ldr	r3, [pc, #16]	; (7e00 <HAL_RadioDIO1Callback+0x1c>)
    7df0:	4798      	blx	r3
    interruptHandlerDio1();
    7df2:	4b02      	ldr	r3, [pc, #8]	; (7dfc <HAL_RadioDIO1Callback+0x18>)
    7df4:	681b      	ldr	r3, [r3, #0]
    7df6:	4798      	blx	r3
}
    7df8:	bd10      	pop	{r4, pc}
    7dfa:	46c0      	nop			; (mov r8, r8)
    7dfc:	20000c5c 	.word	0x20000c5c
    7e00:	00008361 	.word	0x00008361

00007e04 <HAL_RadioDIO0Callback>:
{
    7e04:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    7e06:	4b05      	ldr	r3, [pc, #20]	; (7e1c <HAL_RadioDIO0Callback+0x18>)
    7e08:	681b      	ldr	r3, [r3, #0]
    7e0a:	2b00      	cmp	r3, #0
    7e0c:	d004      	beq.n	7e18 <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    7e0e:	4b04      	ldr	r3, [pc, #16]	; (7e20 <HAL_RadioDIO0Callback+0x1c>)
    7e10:	4798      	blx	r3
    interruptHandlerDio0();
    7e12:	4b02      	ldr	r3, [pc, #8]	; (7e1c <HAL_RadioDIO0Callback+0x18>)
    7e14:	681b      	ldr	r3, [r3, #0]
    7e16:	4798      	blx	r3
}
    7e18:	bd10      	pop	{r4, pc}
    7e1a:	46c0      	nop			; (mov r8, r8)
    7e1c:	20000c58 	.word	0x20000c58
    7e20:	00008361 	.word	0x00008361

00007e24 <HAL_SPICSAssert>:
{
    7e24:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    7e26:	2201      	movs	r2, #1
    7e28:	4902      	ldr	r1, [pc, #8]	; (7e34 <HAL_SPICSAssert+0x10>)
    7e2a:	4803      	ldr	r0, [pc, #12]	; (7e38 <HAL_SPICSAssert+0x14>)
    7e2c:	4b03      	ldr	r3, [pc, #12]	; (7e3c <HAL_SPICSAssert+0x18>)
    7e2e:	4798      	blx	r3
}
    7e30:	bd10      	pop	{r4, pc}
    7e32:	46c0      	nop			; (mov r8, r8)
    7e34:	20002270 	.word	0x20002270
    7e38:	20000c64 	.word	0x20000c64
    7e3c:	00006325 	.word	0x00006325

00007e40 <HAL_SPICSDeassert>:
{
    7e40:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    7e42:	2200      	movs	r2, #0
    7e44:	4902      	ldr	r1, [pc, #8]	; (7e50 <HAL_SPICSDeassert+0x10>)
    7e46:	4803      	ldr	r0, [pc, #12]	; (7e54 <HAL_SPICSDeassert+0x14>)
    7e48:	4b03      	ldr	r3, [pc, #12]	; (7e58 <HAL_SPICSDeassert+0x18>)
    7e4a:	4798      	blx	r3
}
    7e4c:	bd10      	pop	{r4, pc}
    7e4e:	46c0      	nop			; (mov r8, r8)
    7e50:	20002270 	.word	0x20002270
    7e54:	20000c64 	.word	0x20000c64
    7e58:	00006325 	.word	0x00006325

00007e5c <HAL_RadioInit>:
{
    7e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e5e:	46d6      	mov	lr, sl
    7e60:	464f      	mov	r7, r9
    7e62:	4646      	mov	r6, r8
    7e64:	b5c0      	push	{r6, r7, lr}
    7e66:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    7e68:	ac01      	add	r4, sp, #4
    7e6a:	2601      	movs	r6, #1
    7e6c:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    7e6e:	2500      	movs	r5, #0
    7e70:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    7e72:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    7e74:	0021      	movs	r1, r4
    7e76:	2052      	movs	r0, #82	; 0x52
    7e78:	4f52      	ldr	r7, [pc, #328]	; (7fc4 <HAL_RadioInit+0x168>)
    7e7a:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    7e7c:	0021      	movs	r1, r4
    7e7e:	203e      	movs	r0, #62	; 0x3e
    7e80:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    7e82:	0021      	movs	r1, r4
    7e84:	203f      	movs	r0, #63	; 0x3f
    7e86:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    7e88:	0021      	movs	r1, r4
    7e8a:	202f      	movs	r0, #47	; 0x2f
    7e8c:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    7e8e:	2280      	movs	r2, #128	; 0x80
    7e90:	02d2      	lsls	r2, r2, #11
    7e92:	4b4d      	ldr	r3, [pc, #308]	; (7fc8 <HAL_RadioInit+0x16c>)
    7e94:	619a      	str	r2, [r3, #24]
    7e96:	4b4d      	ldr	r3, [pc, #308]	; (7fcc <HAL_RadioInit+0x170>)
    7e98:	2280      	movs	r2, #128	; 0x80
    7e9a:	05d2      	lsls	r2, r2, #23
    7e9c:	619a      	str	r2, [r3, #24]
    7e9e:	2280      	movs	r2, #128	; 0x80
    7ea0:	0612      	lsls	r2, r2, #24
    7ea2:	619a      	str	r2, [r3, #24]
    7ea4:	2280      	movs	r2, #128	; 0x80
    7ea6:	0212      	lsls	r2, r2, #8
    7ea8:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    7eaa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    7eac:	0021      	movs	r1, r4
    7eae:	2053      	movs	r0, #83	; 0x53
    7eb0:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    7eb2:	ac02      	add	r4, sp, #8
    7eb4:	0020      	movs	r0, r4
    7eb6:	4b46      	ldr	r3, [pc, #280]	; (7fd0 <HAL_RadioInit+0x174>)
    7eb8:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    7eba:	2330      	movs	r3, #48	; 0x30
    7ebc:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    7ebe:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7ec0:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7ec2:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    7ec4:	0021      	movs	r1, r4
    7ec6:	2000      	movs	r0, #0
    7ec8:	4b42      	ldr	r3, [pc, #264]	; (7fd4 <HAL_RadioInit+0x178>)
    7eca:	469a      	mov	sl, r3
    7ecc:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7ece:	2200      	movs	r2, #0
    7ed0:	2100      	movs	r1, #0
    7ed2:	4841      	ldr	r0, [pc, #260]	; (7fd8 <HAL_RadioInit+0x17c>)
    7ed4:	4b41      	ldr	r3, [pc, #260]	; (7fdc <HAL_RadioInit+0x180>)
    7ed6:	4699      	mov	r9, r3
    7ed8:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7eda:	2100      	movs	r1, #0
    7edc:	2000      	movs	r0, #0
    7ede:	4b40      	ldr	r3, [pc, #256]	; (7fe0 <HAL_RadioInit+0x184>)
    7ee0:	4698      	mov	r8, r3
    7ee2:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    7ee4:	230b      	movs	r3, #11
    7ee6:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    7ee8:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7eea:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7eec:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    7eee:	0021      	movs	r1, r4
    7ef0:	200b      	movs	r0, #11
    7ef2:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7ef4:	2200      	movs	r2, #0
    7ef6:	210b      	movs	r1, #11
    7ef8:	483a      	ldr	r0, [pc, #232]	; (7fe4 <HAL_RadioInit+0x188>)
    7efa:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7efc:	2100      	movs	r1, #0
    7efe:	200b      	movs	r0, #11
    7f00:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    7f02:	230c      	movs	r3, #12
    7f04:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    7f06:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    7f08:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    7f0a:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    7f0c:	0021      	movs	r1, r4
    7f0e:	200c      	movs	r0, #12
    7f10:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f12:	2200      	movs	r2, #0
    7f14:	210c      	movs	r1, #12
    7f16:	4834      	ldr	r0, [pc, #208]	; (7fe8 <HAL_RadioInit+0x18c>)
    7f18:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    7f1a:	2100      	movs	r1, #0
    7f1c:	200c      	movs	r0, #12
    7f1e:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    7f20:	4b32      	ldr	r3, [pc, #200]	; (7fec <HAL_RadioInit+0x190>)
    7f22:	4698      	mov	r8, r3
    7f24:	233f      	movs	r3, #63	; 0x3f
    7f26:	4642      	mov	r2, r8
    7f28:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    7f2a:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    7f2c:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    7f2e:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    7f30:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    7f32:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    7f34:	0021      	movs	r1, r4
    7f36:	203f      	movs	r0, #63	; 0x3f
    7f38:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    7f3a:	4643      	mov	r3, r8
    7f3c:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    7f3e:	09d1      	lsrs	r1, r2, #7
		return NULL;
    7f40:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    7f42:	2900      	cmp	r1, #0
    7f44:	d104      	bne.n	7f50 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    7f46:	0953      	lsrs	r3, r2, #5
    7f48:	01db      	lsls	r3, r3, #7
    7f4a:	4929      	ldr	r1, [pc, #164]	; (7ff0 <HAL_RadioInit+0x194>)
    7f4c:	468c      	mov	ip, r1
    7f4e:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7f50:	211f      	movs	r1, #31
    7f52:	4011      	ands	r1, r2
    7f54:	2201      	movs	r2, #1
    7f56:	0010      	movs	r0, r2
    7f58:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    7f5a:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    7f5c:	ac02      	add	r4, sp, #8
    7f5e:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    7f60:	2300      	movs	r3, #0
    7f62:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    7f64:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    7f66:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    7f68:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    7f6a:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    7f6c:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    7f6e:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    7f70:	3223      	adds	r2, #35	; 0x23
    7f72:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    7f74:	3a18      	subs	r2, #24
    7f76:	2100      	movs	r1, #0
    7f78:	a808      	add	r0, sp, #32
    7f7a:	4b1e      	ldr	r3, [pc, #120]	; (7ff4 <HAL_RadioInit+0x198>)
    7f7c:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    7f7e:	4b1e      	ldr	r3, [pc, #120]	; (7ff8 <HAL_RadioInit+0x19c>)
    7f80:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    7f82:	2380      	movs	r3, #128	; 0x80
    7f84:	025b      	lsls	r3, r3, #9
    7f86:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    7f88:	4b1c      	ldr	r3, [pc, #112]	; (7ffc <HAL_RadioInit+0x1a0>)
    7f8a:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    7f8c:	2301      	movs	r3, #1
    7f8e:	425b      	negs	r3, r3
    7f90:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    7f92:	4b1b      	ldr	r3, [pc, #108]	; (8000 <HAL_RadioInit+0x1a4>)
    7f94:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    7f96:	4b1b      	ldr	r3, [pc, #108]	; (8004 <HAL_RadioInit+0x1a8>)
    7f98:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    7f9a:	4d1b      	ldr	r5, [pc, #108]	; (8008 <HAL_RadioInit+0x1ac>)
    7f9c:	0022      	movs	r2, r4
    7f9e:	491b      	ldr	r1, [pc, #108]	; (800c <HAL_RadioInit+0x1b0>)
    7fa0:	0028      	movs	r0, r5
    7fa2:	4b1b      	ldr	r3, [pc, #108]	; (8010 <HAL_RadioInit+0x1b4>)
    7fa4:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    7fa6:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    7fa8:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    7faa:	2b00      	cmp	r3, #0
    7fac:	d1fc      	bne.n	7fa8 <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7fae:	6813      	ldr	r3, [r2, #0]
    7fb0:	2102      	movs	r1, #2
    7fb2:	430b      	orrs	r3, r1
    7fb4:	6013      	str	r3, [r2, #0]
}
    7fb6:	b010      	add	sp, #64	; 0x40
    7fb8:	bc1c      	pop	{r2, r3, r4}
    7fba:	4690      	mov	r8, r2
    7fbc:	4699      	mov	r9, r3
    7fbe:	46a2      	mov	sl, r4
    7fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fc2:	46c0      	nop			; (mov r8, r8)
    7fc4:	00004ead 	.word	0x00004ead
    7fc8:	40002900 	.word	0x40002900
    7fcc:	40002880 	.word	0x40002880
    7fd0:	00004a45 	.word	0x00004a45
    7fd4:	00004a59 	.word	0x00004a59
    7fd8:	00007e05 	.word	0x00007e05
    7fdc:	00004905 	.word	0x00004905
    7fe0:	00004931 	.word	0x00004931
    7fe4:	00007de5 	.word	0x00007de5
    7fe8:	00007dc5 	.word	0x00007dc5
    7fec:	20002270 	.word	0x20002270
    7ff0:	40002800 	.word	0x40002800
    7ff4:	00019e41 	.word	0x00019e41
    7ff8:	001e8480 	.word	0x001e8480
    7ffc:	00530005 	.word	0x00530005
    8000:	003e0005 	.word	0x003e0005
    8004:	00520005 	.word	0x00520005
    8008:	20000c64 	.word	0x20000c64
    800c:	42001000 	.word	0x42001000
    8010:	00006049 	.word	0x00006049

00008014 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    8014:	4b07      	ldr	r3, [pc, #28]	; (8034 <HAL_Radio_resources_init+0x20>)
    8016:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    8018:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    801a:	2b00      	cmp	r3, #0
    801c:	d1fc      	bne.n	8018 <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    801e:	6813      	ldr	r3, [r2, #0]
    8020:	2102      	movs	r1, #2
    8022:	430b      	orrs	r3, r1
    8024:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    8026:	4b03      	ldr	r3, [pc, #12]	; (8034 <HAL_Radio_resources_init+0x20>)
    8028:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    802a:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    802c:	2b00      	cmp	r3, #0
    802e:	d1fc      	bne.n	802a <HAL_Radio_resources_init+0x16>
}
    8030:	4770      	bx	lr
    8032:	46c0      	nop			; (mov r8, r8)
    8034:	20000c64 	.word	0x20000c64

00008038 <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    8038:	4b06      	ldr	r3, [pc, #24]	; (8054 <HAL_RadioDeInit+0x1c>)
    803a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    803c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    803e:	2b00      	cmp	r3, #0
    8040:	d1fc      	bne.n	803c <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    8042:	338f      	adds	r3, #143	; 0x8f
    8044:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    8046:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    8048:	6813      	ldr	r3, [r2, #0]
    804a:	2102      	movs	r1, #2
    804c:	438b      	bics	r3, r1
    804e:	6013      	str	r3, [r2, #0]
}
    8050:	4770      	bx	lr
    8052:	46c0      	nop			; (mov r8, r8)
    8054:	20000c64 	.word	0x20000c64

00008058 <RADIO_Reset>:
{
    8058:	b570      	push	{r4, r5, r6, lr}
    805a:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    805c:	4c0a      	ldr	r4, [pc, #40]	; (8088 <RADIO_Reset+0x30>)
    805e:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    8060:	4d0a      	ldr	r5, [pc, #40]	; (808c <RADIO_Reset+0x34>)
    8062:	2680      	movs	r6, #128	; 0x80
    8064:	0236      	lsls	r6, r6, #8
    8066:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    8068:	2001      	movs	r0, #1
    806a:	4b09      	ldr	r3, [pc, #36]	; (8090 <RADIO_Reset+0x38>)
    806c:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    806e:	a901      	add	r1, sp, #4
    8070:	2300      	movs	r3, #0
    8072:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    8074:	2201      	movs	r2, #1
    8076:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    8078:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    807a:	202f      	movs	r0, #47	; 0x2f
    807c:	4b05      	ldr	r3, [pc, #20]	; (8094 <RADIO_Reset+0x3c>)
    807e:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    8080:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    8082:	47a0      	blx	r4
}
    8084:	b002      	add	sp, #8
    8086:	bd70      	pop	{r4, r5, r6, pc}
    8088:	00007da5 	.word	0x00007da5
    808c:	40002880 	.word	0x40002880
    8090:	000082f5 	.word	0x000082f5
    8094:	00004ead 	.word	0x00004ead

00008098 <RADIO_RegisterWrite>:
{
    8098:	b570      	push	{r4, r5, r6, lr}
    809a:	0004      	movs	r4, r0
    809c:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    809e:	4b05      	ldr	r3, [pc, #20]	; (80b4 <RADIO_RegisterWrite+0x1c>)
    80a0:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    80a2:	2080      	movs	r0, #128	; 0x80
    80a4:	4320      	orrs	r0, r4
    80a6:	4c04      	ldr	r4, [pc, #16]	; (80b8 <RADIO_RegisterWrite+0x20>)
    80a8:	47a0      	blx	r4
	HAL_SPISend(value);
    80aa:	0028      	movs	r0, r5
    80ac:	47a0      	blx	r4
	HAL_SPICSDeassert();
    80ae:	4b03      	ldr	r3, [pc, #12]	; (80bc <RADIO_RegisterWrite+0x24>)
    80b0:	4798      	blx	r3
}
    80b2:	bd70      	pop	{r4, r5, r6, pc}
    80b4:	00007e25 	.word	0x00007e25
    80b8:	00007d51 	.word	0x00007d51
    80bc:	00007e41 	.word	0x00007e41

000080c0 <RADIO_RegisterRead>:
{
    80c0:	b510      	push	{r4, lr}
    80c2:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    80c4:	4b06      	ldr	r3, [pc, #24]	; (80e0 <RADIO_RegisterRead+0x20>)
    80c6:	4798      	blx	r3
	HAL_SPISend(reg);
    80c8:	207f      	movs	r0, #127	; 0x7f
    80ca:	4020      	ands	r0, r4
    80cc:	4c05      	ldr	r4, [pc, #20]	; (80e4 <RADIO_RegisterRead+0x24>)
    80ce:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    80d0:	20ff      	movs	r0, #255	; 0xff
    80d2:	47a0      	blx	r4
    80d4:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    80d6:	4b04      	ldr	r3, [pc, #16]	; (80e8 <RADIO_RegisterRead+0x28>)
    80d8:	4798      	blx	r3
}
    80da:	0020      	movs	r0, r4
    80dc:	bd10      	pop	{r4, pc}
    80de:	46c0      	nop			; (mov r8, r8)
    80e0:	00007e25 	.word	0x00007e25
    80e4:	00007d51 	.word	0x00007d51
    80e8:	00007e41 	.word	0x00007e41

000080ec <RADIO_FrameWrite>:
{
    80ec:	b570      	push	{r4, r5, r6, lr}
    80ee:	0004      	movs	r4, r0
    80f0:	000e      	movs	r6, r1
    80f2:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    80f4:	4b0a      	ldr	r3, [pc, #40]	; (8120 <RADIO_FrameWrite+0x34>)
    80f6:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    80f8:	2080      	movs	r0, #128	; 0x80
    80fa:	4320      	orrs	r0, r4
    80fc:	4b09      	ldr	r3, [pc, #36]	; (8124 <RADIO_FrameWrite+0x38>)
    80fe:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    8100:	2d00      	cmp	r5, #0
    8102:	d00a      	beq.n	811a <RADIO_FrameWrite+0x2e>
    8104:	0034      	movs	r4, r6
    8106:	3d01      	subs	r5, #1
    8108:	b2ed      	uxtb	r5, r5
    810a:	3501      	adds	r5, #1
    810c:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    810e:	4e05      	ldr	r6, [pc, #20]	; (8124 <RADIO_FrameWrite+0x38>)
    8110:	7820      	ldrb	r0, [r4, #0]
    8112:	47b0      	blx	r6
    8114:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    8116:	42ac      	cmp	r4, r5
    8118:	d1fa      	bne.n	8110 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    811a:	4b03      	ldr	r3, [pc, #12]	; (8128 <RADIO_FrameWrite+0x3c>)
    811c:	4798      	blx	r3
}
    811e:	bd70      	pop	{r4, r5, r6, pc}
    8120:	00007e25 	.word	0x00007e25
    8124:	00007d51 	.word	0x00007d51
    8128:	00007e41 	.word	0x00007e41

0000812c <RADIO_FrameRead>:
{
    812c:	b570      	push	{r4, r5, r6, lr}
    812e:	0004      	movs	r4, r0
    8130:	000e      	movs	r6, r1
    8132:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    8134:	4b0a      	ldr	r3, [pc, #40]	; (8160 <RADIO_FrameRead+0x34>)
    8136:	4798      	blx	r3
    HAL_SPISend(offset);
    8138:	0020      	movs	r0, r4
    813a:	4b0a      	ldr	r3, [pc, #40]	; (8164 <RADIO_FrameRead+0x38>)
    813c:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    813e:	2d00      	cmp	r5, #0
    8140:	d00b      	beq.n	815a <RADIO_FrameRead+0x2e>
    8142:	0034      	movs	r4, r6
    8144:	3d01      	subs	r5, #1
    8146:	b2ed      	uxtb	r5, r5
    8148:	3501      	adds	r5, #1
    814a:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    814c:	4e05      	ldr	r6, [pc, #20]	; (8164 <RADIO_FrameRead+0x38>)
    814e:	20ff      	movs	r0, #255	; 0xff
    8150:	47b0      	blx	r6
    8152:	7020      	strb	r0, [r4, #0]
    8154:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    8156:	42ac      	cmp	r4, r5
    8158:	d1f9      	bne.n	814e <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    815a:	4b03      	ldr	r3, [pc, #12]	; (8168 <RADIO_FrameRead+0x3c>)
    815c:	4798      	blx	r3
}
    815e:	bd70      	pop	{r4, r5, r6, pc}
    8160:	00007e25 	.word	0x00007e25
    8164:	00007d51 	.word	0x00007d51
    8168:	00007e41 	.word	0x00007e41

0000816c <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    816c:	2802      	cmp	r0, #2
    816e:	d007      	beq.n	8180 <HAL_RegisterDioInterruptHandler+0x14>
    8170:	2804      	cmp	r0, #4
    8172:	d008      	beq.n	8186 <HAL_RegisterDioInterruptHandler+0x1a>
    8174:	2801      	cmp	r0, #1
    8176:	d000      	beq.n	817a <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    8178:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    817a:	4b04      	ldr	r3, [pc, #16]	; (818c <HAL_RegisterDioInterruptHandler+0x20>)
    817c:	6019      	str	r1, [r3, #0]
      break;
    817e:	e7fb      	b.n	8178 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    8180:	4b03      	ldr	r3, [pc, #12]	; (8190 <HAL_RegisterDioInterruptHandler+0x24>)
    8182:	6019      	str	r1, [r3, #0]
      break;
    8184:	e7f8      	b.n	8178 <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    8186:	4b03      	ldr	r3, [pc, #12]	; (8194 <HAL_RegisterDioInterruptHandler+0x28>)
    8188:	6019      	str	r1, [r3, #0]
}
    818a:	e7f5      	b.n	8178 <HAL_RegisterDioInterruptHandler+0xc>
    818c:	20000c58 	.word	0x20000c58
    8190:	20000c5c 	.word	0x20000c5c
    8194:	20000c60 	.word	0x20000c60

00008198 <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    8198:	2801      	cmp	r0, #1
    819a:	d00a      	beq.n	81b2 <HAL_EnableRFCtrl+0x1a>
    819c:	2900      	cmp	r1, #0
    819e:	d008      	beq.n	81b2 <HAL_EnableRFCtrl+0x1a>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
   else if ((RFCtrl1 == PA_BOOST) && (RFCtrl2 == TX))
    81a0:	2802      	cmp	r0, #2
    81a2:	d10a      	bne.n	81ba <HAL_EnableRFCtrl+0x22>
    81a4:	2901      	cmp	r1, #1
    81a6:	d108      	bne.n	81ba <HAL_EnableRFCtrl+0x22>
		port_base->OUTCLR.reg = pin_mask;
    81a8:	2280      	movs	r2, #128	; 0x80
    81aa:	0192      	lsls	r2, r2, #6
    81ac:	4b03      	ldr	r3, [pc, #12]	; (81bc <HAL_EnableRFCtrl+0x24>)
    81ae:	615a      	str	r2, [r3, #20]
   {
	   port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);
   }
#endif	
}
    81b0:	e003      	b.n	81ba <HAL_EnableRFCtrl+0x22>
		port_base->OUTSET.reg = pin_mask;
    81b2:	2280      	movs	r2, #128	; 0x80
    81b4:	0192      	lsls	r2, r2, #6
    81b6:	4b01      	ldr	r3, [pc, #4]	; (81bc <HAL_EnableRFCtrl+0x24>)
    81b8:	619a      	str	r2, [r3, #24]
    81ba:	4770      	bx	lr
    81bc:	40002800 	.word	0x40002800

000081c0 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    81c0:	2801      	cmp	r0, #1
    81c2:	d001      	beq.n	81c8 <HAL_DisableRFCtrl+0x8>
    81c4:	2900      	cmp	r1, #0
    81c6:	d103      	bne.n	81d0 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    81c8:	2280      	movs	r2, #128	; 0x80
    81ca:	0192      	lsls	r2, r2, #6
    81cc:	4b01      	ldr	r3, [pc, #4]	; (81d4 <HAL_DisableRFCtrl+0x14>)
    81ce:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    81d0:	4770      	bx	lr
    81d2:	46c0      	nop			; (mov r8, r8)
    81d4:	40002800 	.word	0x40002800

000081d8 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    81d8:	2002      	movs	r0, #2
    81da:	4770      	bx	lr

000081dc <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    81dc:	2000      	movs	r0, #0
    81de:	4770      	bx	lr

000081e0 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    81e0:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    81e2:	2280      	movs	r2, #128	; 0x80
    81e4:	0092      	lsls	r2, r2, #2
    81e6:	4b03      	ldr	r3, [pc, #12]	; (81f4 <HAL_TCXOPowerOn+0x14>)
    81e8:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    81ea:	2002      	movs	r0, #2
    81ec:	4b02      	ldr	r3, [pc, #8]	; (81f8 <HAL_TCXOPowerOn+0x18>)
    81ee:	4798      	blx	r3
#endif
}
    81f0:	bd10      	pop	{r4, pc}
    81f2:	46c0      	nop			; (mov r8, r8)
    81f4:	40002800 	.word	0x40002800
    81f8:	00004551 	.word	0x00004551

000081fc <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    81fc:	2280      	movs	r2, #128	; 0x80
    81fe:	0092      	lsls	r2, r2, #2
    8200:	4b01      	ldr	r3, [pc, #4]	; (8208 <HAL_TCXOPowerOff+0xc>)
    8202:	615a      	str	r2, [r3, #20]
#ifdef TCXO_ENABLE
#ifndef TCXO_ALWAYS_ON
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
#endif
}
    8204:	4770      	bx	lr
    8206:	46c0      	nop			; (mov r8, r8)
    8208:	40002800 	.word	0x40002800

0000820c <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    820c:	2801      	cmp	r0, #1
    820e:	d002      	beq.n	8216 <HAL_Sleep+0xa>
    8210:	2802      	cmp	r0, #2
    8212:	d00c      	beq.n	822e <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    8214:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    8216:	2204      	movs	r2, #4
    8218:	2380      	movs	r3, #128	; 0x80
    821a:	05db      	lsls	r3, r3, #23
    821c:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    821e:	001a      	movs	r2, r3
    8220:	7853      	ldrb	r3, [r2, #1]
    8222:	2b04      	cmp	r3, #4
    8224:	d1fc      	bne.n	8220 <HAL_Sleep+0x14>
  __ASM volatile ("dsb 0xF":::"memory");
    8226:	f3bf 8f4f 	dsb	sy
	__WFI();
    822a:	bf30      	wfi
    822c:	e7f2      	b.n	8214 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    822e:	2205      	movs	r2, #5
    8230:	2380      	movs	r3, #128	; 0x80
    8232:	05db      	lsls	r3, r3, #23
    8234:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    8236:	001a      	movs	r2, r3
    8238:	7853      	ldrb	r3, [r2, #1]
    823a:	2b05      	cmp	r3, #5
    823c:	d1fc      	bne.n	8238 <HAL_Sleep+0x2c>
    823e:	f3bf 8f4f 	dsb	sy
	__WFI();
    8242:	bf30      	wfi
    8244:	e7e6      	b.n	8214 <HAL_Sleep+0x8>
	...

00008248 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    8248:	b510      	push	{r4, lr}
    824a:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    824c:	2201      	movs	r2, #1
    824e:	466b      	mov	r3, sp
    8250:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    8252:	2300      	movs	r3, #0
    8254:	4669      	mov	r1, sp
    8256:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->enable_read_sync    = true;
    8258:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    825a:	466a      	mov	r2, sp
    825c:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    825e:	3b01      	subs	r3, #1
    8260:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    8262:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    8264:	4c04      	ldr	r4, [pc, #16]	; (8278 <SleepTimerInit+0x30>)
    8266:	4905      	ldr	r1, [pc, #20]	; (827c <SleepTimerInit+0x34>)
    8268:	0020      	movs	r0, r4
    826a:	4b05      	ldr	r3, [pc, #20]	; (8280 <SleepTimerInit+0x38>)
    826c:	4798      	blx	r3
	rtc_count_enable(&rtc);
    826e:	0020      	movs	r0, r4
    8270:	4b04      	ldr	r3, [pc, #16]	; (8284 <SleepTimerInit+0x3c>)
    8272:	4798      	blx	r3
}
    8274:	b004      	add	sp, #16
    8276:	bd10      	pop	{r4, pc}
    8278:	20002274 	.word	0x20002274
    827c:	40002000 	.word	0x40002000
    8280:	0000505d 	.word	0x0000505d
    8284:	00004edd 	.word	0x00004edd

00008288 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    8288:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    828a:	4802      	ldr	r0, [pc, #8]	; (8294 <SleepTimerGetElapsedTime+0xc>)
    828c:	4b02      	ldr	r3, [pc, #8]	; (8298 <SleepTimerGetElapsedTime+0x10>)
    828e:	4798      	blx	r3
}
    8290:	bd10      	pop	{r4, pc}
    8292:	46c0      	nop			; (mov r8, r8)
    8294:	20002274 	.word	0x20002274
    8298:	00004fcd 	.word	0x00004fcd

0000829c <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    829c:	b570      	push	{r4, r5, r6, lr}
    829e:	0005      	movs	r5, r0
    82a0:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    82a2:	4c0a      	ldr	r4, [pc, #40]	; (82cc <SleepTimerStart+0x30>)
    82a4:	2100      	movs	r1, #0
    82a6:	0020      	movs	r0, r4
    82a8:	4b09      	ldr	r3, [pc, #36]	; (82d0 <SleepTimerStart+0x34>)
    82aa:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    82ac:	2208      	movs	r2, #8
    82ae:	0031      	movs	r1, r6
    82b0:	0020      	movs	r0, r4
    82b2:	4b08      	ldr	r3, [pc, #32]	; (82d4 <SleepTimerStart+0x38>)
    82b4:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    82b6:	2200      	movs	r2, #0
    82b8:	0029      	movs	r1, r5
    82ba:	0020      	movs	r0, r4
    82bc:	4b06      	ldr	r3, [pc, #24]	; (82d8 <SleepTimerStart+0x3c>)
    82be:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    82c0:	2108      	movs	r1, #8
    82c2:	0020      	movs	r0, r4
    82c4:	4b05      	ldr	r3, [pc, #20]	; (82dc <SleepTimerStart+0x40>)
    82c6:	4798      	blx	r3
}
    82c8:	bd70      	pop	{r4, r5, r6, pc}
    82ca:	46c0      	nop			; (mov r8, r8)
    82cc:	20002274 	.word	0x20002274
    82d0:	00004f89 	.word	0x00004f89
    82d4:	000050f9 	.word	0x000050f9
    82d8:	00004ff9 	.word	0x00004ff9
    82dc:	00005135 	.word	0x00005135

000082e0 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    82e0:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    82e2:	2108      	movs	r1, #8
    82e4:	4801      	ldr	r0, [pc, #4]	; (82ec <SleepTimerStop+0xc>)
    82e6:	4b02      	ldr	r3, [pc, #8]	; (82f0 <SleepTimerStop+0x10>)
    82e8:	4798      	blx	r3
}
    82ea:	bd10      	pop	{r4, pc}
    82ec:	20002274 	.word	0x20002274
    82f0:	00005179 	.word	0x00005179

000082f4 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    82f4:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    82f6:	2800      	cmp	r0, #0
    82f8:	d103      	bne.n	8302 <SystemBlockingWaitMs+0xe>
    82fa:	2001      	movs	r0, #1
    82fc:	4b02      	ldr	r3, [pc, #8]	; (8308 <SystemBlockingWaitMs+0x14>)
    82fe:	4798      	blx	r3
#endif
}
    8300:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    8302:	4b02      	ldr	r3, [pc, #8]	; (830c <SystemBlockingWaitMs+0x18>)
    8304:	4798      	blx	r3
    8306:	e7fb      	b.n	8300 <SystemBlockingWaitMs+0xc>
    8308:	00004525 	.word	0x00004525
    830c:	00004551 	.word	0x00004551

00008310 <System_GetExternalEui>:
#if (EDBG_EUI_READ == 1)
#include "edbg_eui.h"
#endif

void System_GetExternalEui(uint8_t *id)
{
    8310:	b510      	push	{r4, lr}
    8312:	b082      	sub	sp, #8
    8314:	466a      	mov	r2, sp
    8316:	4b0a      	ldr	r3, [pc, #40]	; (8340 <System_GetExternalEui+0x30>)
#elif (defined(__WLR089U0__) && MODULE_EUI_READ == 1)

	#define NVM_UID_ADDRESS   ((volatile uint16_t *)(0x0080400AU))
	uint8_t i = 0, j = 0 ;
	uint8_t moduleDevEUI[8] ;
	for (i = 0; i < 8; i += 2, j++)
    8318:	4c0a      	ldr	r4, [pc, #40]	; (8344 <System_GetExternalEui+0x34>)
	{
		moduleDevEUI[i] = (NVM_UID_ADDRESS[j] & 0xFF) ;
    831a:	8819      	ldrh	r1, [r3, #0]
    831c:	7011      	strb	r1, [r2, #0]
		moduleDevEUI[i + 1] = (NVM_UID_ADDRESS[j] >> 8) ;
    831e:	8819      	ldrh	r1, [r3, #0]
    8320:	0a09      	lsrs	r1, r1, #8
    8322:	7051      	strb	r1, [r2, #1]
    8324:	3302      	adds	r3, #2
    8326:	3202      	adds	r2, #2
	for (i = 0; i < 8; i += 2, j++)
    8328:	42a3      	cmp	r3, r4
    832a:	d1f6      	bne.n	831a <System_GetExternalEui+0xa>
    832c:	2300      	movs	r3, #0
	}
	for (i= 0; i < 8; i++)
	{
		*id = moduleDevEUI[i] ;
    832e:	466a      	mov	r2, sp
    8330:	5c9a      	ldrb	r2, [r3, r2]
    8332:	54c2      	strb	r2, [r0, r3]
    8334:	3301      	adds	r3, #1
	for (i= 0; i < 8; i++)
    8336:	2b08      	cmp	r3, #8
    8338:	d1f9      	bne.n	832e <System_GetExternalEui+0x1e>
		id++ ;
	}
#endif
}
    833a:	b002      	add	sp, #8
    833c:	bd10      	pop	{r4, pc}
    833e:	46c0      	nop			; (mov r8, r8)
    8340:	0080400a 	.word	0x0080400a
    8344:	00804012 	.word	0x00804012

00008348 <system_enter_critical_section>:

void system_enter_critical_section(void)
{
    8348:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    834a:	4b01      	ldr	r3, [pc, #4]	; (8350 <system_enter_critical_section+0x8>)
    834c:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    834e:	bd10      	pop	{r4, pc}
    8350:	0000457d 	.word	0x0000457d

00008354 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    8354:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    8356:	4b01      	ldr	r3, [pc, #4]	; (835c <system_leave_critical_section+0x8>)
    8358:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    835a:	bd10      	pop	{r4, pc}
    835c:	000045bd 	.word	0x000045bd

00008360 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    8360:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    8362:	4b16      	ldr	r3, [pc, #88]	; (83bc <PMM_Wakeup+0x5c>)
    8364:	781b      	ldrb	r3, [r3, #0]
    8366:	2b01      	cmp	r3, #1
    8368:	d000      	beq.n	836c <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    836a:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    836c:	2200      	movs	r2, #0
    836e:	4b13      	ldr	r3, [pc, #76]	; (83bc <PMM_Wakeup+0x5c>)
    8370:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    8372:	4b13      	ldr	r3, [pc, #76]	; (83c0 <PMM_Wakeup+0x60>)
    8374:	4798      	blx	r3
    8376:	4b13      	ldr	r3, [pc, #76]	; (83c4 <PMM_Wakeup+0x64>)
    8378:	4798      	blx	r3
    837a:	4913      	ldr	r1, [pc, #76]	; (83c8 <PMM_Wakeup+0x68>)
    837c:	4b13      	ldr	r3, [pc, #76]	; (83cc <PMM_Wakeup+0x6c>)
    837e:	4798      	blx	r3
    8380:	4b13      	ldr	r3, [pc, #76]	; (83d0 <PMM_Wakeup+0x70>)
    8382:	4798      	blx	r3
    8384:	0004      	movs	r4, r0
    8386:	000d      	movs	r5, r1
        SleepTimerStop();
    8388:	4b12      	ldr	r3, [pc, #72]	; (83d4 <PMM_Wakeup+0x74>)
    838a:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    838c:	0020      	movs	r0, r4
    838e:	0029      	movs	r1, r5
    8390:	4b11      	ldr	r3, [pc, #68]	; (83d8 <PMM_Wakeup+0x78>)
    8392:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    8394:	4b11      	ldr	r3, [pc, #68]	; (83dc <PMM_Wakeup+0x7c>)
    8396:	681b      	ldr	r3, [r3, #0]
    8398:	2b00      	cmp	r3, #0
    839a:	d0e6      	beq.n	836a <PMM_Wakeup+0xa>
    839c:	689e      	ldr	r6, [r3, #8]
    839e:	2e00      	cmp	r6, #0
    83a0:	d0e3      	beq.n	836a <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    83a2:	22fa      	movs	r2, #250	; 0xfa
    83a4:	0092      	lsls	r2, r2, #2
    83a6:	2300      	movs	r3, #0
    83a8:	0020      	movs	r0, r4
    83aa:	0029      	movs	r1, r5
    83ac:	4c0c      	ldr	r4, [pc, #48]	; (83e0 <PMM_Wakeup+0x80>)
    83ae:	47a0      	blx	r4
    83b0:	47b0      	blx	r6
            sleepReq = NULL;
    83b2:	2200      	movs	r2, #0
    83b4:	4b09      	ldr	r3, [pc, #36]	; (83dc <PMM_Wakeup+0x7c>)
    83b6:	601a      	str	r2, [r3, #0]
}
    83b8:	e7d7      	b.n	836a <PMM_Wakeup+0xa>
    83ba:	46c0      	nop			; (mov r8, r8)
    83bc:	20000c70 	.word	0x20000c70
    83c0:	00008289 	.word	0x00008289
    83c4:	000179b1 	.word	0x000179b1
    83c8:	41f423d7 	.word	0x41f423d7
    83cc:	00017359 	.word	0x00017359
    83d0:	00016a95 	.word	0x00016a95
    83d4:	000082e1 	.word	0x000082e1
    83d8:	0000f295 	.word	0x0000f295
    83dc:	20000c74 	.word	0x20000c74
    83e0:	00016995 	.word	0x00016995

000083e4 <PMM_Sleep>:
{
    83e4:	b570      	push	{r4, r5, r6, lr}
    83e6:	1e04      	subs	r4, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    83e8:	d055      	beq.n	8496 <PMM_Sleep+0xb2>
    83ea:	4b2c      	ldr	r3, [pc, #176]	; (849c <PMM_Sleep+0xb8>)
    83ec:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    83ee:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    83f0:	2b00      	cmp	r3, #0
    83f2:	d000      	beq.n	83f6 <PMM_Sleep+0x12>
}
    83f4:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    83f6:	4b2a      	ldr	r3, [pc, #168]	; (84a0 <PMM_Sleep+0xbc>)
    83f8:	4798      	blx	r3
    83fa:	0003      	movs	r3, r0
            return status;
    83fc:	2000      	movs	r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    83fe:	2b00      	cmp	r3, #0
    8400:	d0f8      	beq.n	83f4 <PMM_Sleep+0x10>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    8402:	6823      	ldr	r3, [r4, #0]
    8404:	4a27      	ldr	r2, [pc, #156]	; (84a4 <PMM_Sleep+0xc0>)
    8406:	4694      	mov	ip, r2
    8408:	4463      	add	r3, ip
        if ( false == canSleep )
    840a:	4a27      	ldr	r2, [pc, #156]	; (84a8 <PMM_Sleep+0xc4>)
    840c:	4293      	cmp	r3, r2
    840e:	d8f1      	bhi.n	83f4 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    8410:	7923      	ldrb	r3, [r4, #4]
    8412:	2b02      	cmp	r3, #2
    8414:	d021      	beq.n	845a <PMM_Sleep+0x76>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    8416:	2b01      	cmp	r3, #1
    8418:	d025      	beq.n	8466 <PMM_Sleep+0x82>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    841a:	2501      	movs	r5, #1
    841c:	426d      	negs	r5, r5
        if ( canSleep && SYSTEM_ReadyToSleep() )
    841e:	4b20      	ldr	r3, [pc, #128]	; (84a0 <PMM_Sleep+0xbc>)
    8420:	4798      	blx	r3
    8422:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    8424:	2000      	movs	r0, #0
        if ( canSleep && SYSTEM_ReadyToSleep() )
    8426:	2b00      	cmp	r3, #0
    8428:	d0e4      	beq.n	83f4 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    842a:	4b20      	ldr	r3, [pc, #128]	; (84ac <PMM_Sleep+0xc8>)
    842c:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    842e:	0028      	movs	r0, r5
    8430:	380a      	subs	r0, #10
    8432:	4b1f      	ldr	r3, [pc, #124]	; (84b0 <PMM_Sleep+0xcc>)
    8434:	4798      	blx	r3
    8436:	491f      	ldr	r1, [pc, #124]	; (84b4 <PMM_Sleep+0xd0>)
    8438:	4b1f      	ldr	r3, [pc, #124]	; (84b8 <PMM_Sleep+0xd4>)
    843a:	4798      	blx	r3
    843c:	4b1f      	ldr	r3, [pc, #124]	; (84bc <PMM_Sleep+0xd8>)
    843e:	4798      	blx	r3
    8440:	491f      	ldr	r1, [pc, #124]	; (84c0 <PMM_Sleep+0xdc>)
    8442:	4b20      	ldr	r3, [pc, #128]	; (84c4 <PMM_Sleep+0xe0>)
    8444:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    8446:	2201      	movs	r2, #1
    8448:	4b14      	ldr	r3, [pc, #80]	; (849c <PMM_Sleep+0xb8>)
    844a:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    844c:	4b1e      	ldr	r3, [pc, #120]	; (84c8 <PMM_Sleep+0xe4>)
    844e:	601c      	str	r4, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    8450:	7920      	ldrb	r0, [r4, #4]
    8452:	4b1e      	ldr	r3, [pc, #120]	; (84cc <PMM_Sleep+0xe8>)
    8454:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    8456:	2001      	movs	r0, #1
    8458:	e7cc      	b.n	83f4 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    845a:	4b1d      	ldr	r3, [pc, #116]	; (84d0 <PMM_Sleep+0xec>)
    845c:	4798      	blx	r3
        if ( canSleep && SYSTEM_ReadyToSleep() )
    845e:	1c43      	adds	r3, r0, #1
    8460:	d017      	beq.n	8492 <PMM_Sleep+0xae>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    8462:	2000      	movs	r0, #0
    8464:	e7c6      	b.n	83f4 <PMM_Sleep+0x10>
            sysSleepTime = SwTimerNextExpiryDuration();
    8466:	4b1a      	ldr	r3, [pc, #104]	; (84d0 <PMM_Sleep+0xec>)
    8468:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    846a:	1c43      	adds	r3, r0, #1
    846c:	d00b      	beq.n	8486 <PMM_Sleep+0xa2>
    846e:	21fa      	movs	r1, #250	; 0xfa
    8470:	0089      	lsls	r1, r1, #2
    8472:	4b18      	ldr	r3, [pc, #96]	; (84d4 <PMM_Sleep+0xf0>)
    8474:	4798      	blx	r3
    8476:	0003      	movs	r3, r0
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    8478:	4a0a      	ldr	r2, [pc, #40]	; (84a4 <PMM_Sleep+0xc0>)
    847a:	1881      	adds	r1, r0, r2
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    847c:	4a0a      	ldr	r2, [pc, #40]	; (84a8 <PMM_Sleep+0xc4>)
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    847e:	2000      	movs	r0, #0
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    8480:	4291      	cmp	r1, r2
    8482:	d8b7      	bhi.n	83f4 <PMM_Sleep+0x10>
    8484:	e000      	b.n	8488 <PMM_Sleep+0xa4>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    8486:	4b14      	ldr	r3, [pc, #80]	; (84d8 <PMM_Sleep+0xf4>)
    8488:	6825      	ldr	r5, [r4, #0]
    848a:	429d      	cmp	r5, r3
    848c:	d9c7      	bls.n	841e <PMM_Sleep+0x3a>
    848e:	001d      	movs	r5, r3
    8490:	e7c5      	b.n	841e <PMM_Sleep+0x3a>
            sysSleepTime = req->sleepTimeMs;
    8492:	6825      	ldr	r5, [r4, #0]
    8494:	e7c3      	b.n	841e <PMM_Sleep+0x3a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    8496:	2000      	movs	r0, #0
    8498:	e7ac      	b.n	83f4 <PMM_Sleep+0x10>
    849a:	46c0      	nop			; (mov r8, r8)
    849c:	20000c70 	.word	0x20000c70
    84a0:	0000f459 	.word	0x0000f459
    84a4:	fffffc18 	.word	0xfffffc18
    84a8:	07cebbc8 	.word	0x07cebbc8
    84ac:	0000f261 	.word	0x0000f261
    84b0:	000179b1 	.word	0x000179b1
    84b4:	42031375 	.word	0x42031375
    84b8:	00017359 	.word	0x00017359
    84bc:	00016a29 	.word	0x00016a29
    84c0:	00008361 	.word	0x00008361
    84c4:	0000829d 	.word	0x0000829d
    84c8:	20000c74 	.word	0x20000c74
    84cc:	0000820d 	.word	0x0000820d
    84d0:	0000ef9d 	.word	0x0000ef9d
    84d4:	000165b9 	.word	0x000165b9
    84d8:	07cebfb0 	.word	0x07cebfb0

000084dc <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    84dc:	4770      	bx	lr
	...

000084e0 <LORAReg_InitAS>:
{
    84e0:	b570      	push	{r4, r5, r6, lr}
    84e2:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    84e4:	4b8e      	ldr	r3, [pc, #568]	; (8720 <LORAReg_InitAS+0x240>)
    84e6:	2103      	movs	r1, #3
    84e8:	2226      	movs	r2, #38	; 0x26
    84ea:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    84ec:	2410      	movs	r4, #16
    84ee:	3204      	adds	r2, #4
    84f0:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    84f2:	3a29      	subs	r2, #41	; 0x29
    84f4:	3126      	adds	r1, #38	; 0x26
    84f6:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    84f8:	3902      	subs	r1, #2
    84fa:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    84fc:	001a      	movs	r2, r3
    84fe:	3283      	adds	r2, #131	; 0x83
    8500:	2100      	movs	r1, #0
    8502:	711a      	strb	r2, [r3, #4]
    8504:	0a15      	lsrs	r5, r2, #8
    8506:	715d      	strb	r5, [r3, #5]
    8508:	0c15      	lsrs	r5, r2, #16
    850a:	719d      	strb	r5, [r3, #6]
    850c:	0e12      	lsrs	r2, r2, #24
    850e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8510:	001a      	movs	r2, r3
    8512:	3243      	adds	r2, #67	; 0x43
    8514:	701a      	strb	r2, [r3, #0]
    8516:	0a15      	lsrs	r5, r2, #8
    8518:	705d      	strb	r5, [r3, #1]
    851a:	0c15      	lsrs	r5, r2, #16
    851c:	709d      	strb	r5, [r3, #2]
    851e:	0e12      	lsrs	r2, r2, #24
    8520:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8522:	001a      	movs	r2, r3
    8524:	32a3      	adds	r2, #163	; 0xa3
    8526:	721a      	strb	r2, [r3, #8]
    8528:	0a15      	lsrs	r5, r2, #8
    852a:	725d      	strb	r5, [r3, #9]
    852c:	0c15      	lsrs	r5, r2, #16
    852e:	729d      	strb	r5, [r3, #10]
    8530:	0e12      	lsrs	r2, r2, #24
    8532:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8534:	001a      	movs	r2, r3
    8536:	3264      	adds	r2, #100	; 0x64
    8538:	32ff      	adds	r2, #255	; 0xff
    853a:	741a      	strb	r2, [r3, #16]
    853c:	0a15      	lsrs	r5, r2, #8
    853e:	745d      	strb	r5, [r3, #17]
    8540:	0c15      	lsrs	r5, r2, #16
    8542:	749d      	strb	r5, [r3, #18]
    8544:	0e12      	lsrs	r2, r2, #24
    8546:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8548:	001a      	movs	r2, r3
    854a:	3234      	adds	r2, #52	; 0x34
    854c:	751a      	strb	r2, [r3, #20]
    854e:	0a15      	lsrs	r5, r2, #8
    8550:	755d      	strb	r5, [r3, #21]
    8552:	0c15      	lsrs	r5, r2, #16
    8554:	759d      	strb	r5, [r3, #22]
    8556:	0e12      	lsrs	r2, r2, #24
    8558:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    855a:	001a      	movs	r2, r3
    855c:	323d      	adds	r2, #61	; 0x3d
    855e:	761a      	strb	r2, [r3, #24]
    8560:	0a15      	lsrs	r5, r2, #8
    8562:	765d      	strb	r5, [r3, #25]
    8564:	0c15      	lsrs	r5, r2, #16
    8566:	769d      	strb	r5, [r3, #26]
    8568:	0e12      	lsrs	r2, r2, #24
    856a:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    856c:	001a      	movs	r2, r3
    856e:	32c4      	adds	r2, #196	; 0xc4
    8570:	32ff      	adds	r2, #255	; 0xff
    8572:	731a      	strb	r2, [r3, #12]
    8574:	0a15      	lsrs	r5, r2, #8
    8576:	735d      	strb	r5, [r3, #13]
    8578:	0c15      	lsrs	r5, r2, #16
    857a:	739d      	strb	r5, [r3, #14]
    857c:	0e12      	lsrs	r2, r2, #24
    857e:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    8580:	2202      	movs	r2, #2
    8582:	2522      	movs	r5, #34	; 0x22
    8584:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    8586:	3501      	adds	r5, #1
    8588:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    858a:	2500      	movs	r5, #0
    858c:	771d      	strb	r5, [r3, #28]
    858e:	3d16      	subs	r5, #22
    8590:	775d      	strb	r5, [r3, #29]
    8592:	351c      	adds	r5, #28
    8594:	779d      	strb	r5, [r3, #30]
    8596:	3531      	adds	r5, #49	; 0x31
    8598:	77dd      	strb	r5, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    859a:	3d16      	subs	r5, #22
    859c:	555a      	strb	r2, [r3, r5]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    859e:	2632      	movs	r6, #50	; 0x32
    85a0:	3d01      	subs	r5, #1
    85a2:	555e      	strb	r6, [r3, r5]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    85a4:	3d19      	subs	r5, #25
    85a6:	3e0e      	subs	r6, #14
    85a8:	559d      	strb	r5, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    85aa:	3601      	adds	r6, #1
    85ac:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    85ae:	3607      	adds	r6, #7
    85b0:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    85b2:	3601      	adds	r6, #1
    85b4:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwr = DEFAULT_EIRP_AS;
    85b6:	3521      	adds	r5, #33	; 0x21
    85b8:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    85ba:	34b1      	adds	r4, #177	; 0xb1
    85bc:	34ff      	adds	r4, #255	; 0xff
    85be:	551a      	strb	r2, [r3, r4]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    85c0:	4a58      	ldr	r2, [pc, #352]	; (8724 <LORAReg_InitAS+0x244>)
    85c2:	7815      	ldrb	r5, [r2, #0]
    85c4:	2468      	movs	r4, #104	; 0x68
    85c6:	34ff      	adds	r4, #255	; 0xff
    85c8:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    85ca:	7855      	ldrb	r5, [r2, #1]
    85cc:	3c2b      	subs	r4, #43	; 0x2b
    85ce:	3cff      	subs	r4, #255	; 0xff
    85d0:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    85d2:	7894      	ldrb	r4, [r2, #2]
    85d4:	223c      	movs	r2, #60	; 0x3c
    85d6:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    85d8:	2400      	movs	r4, #0
    85da:	3a04      	subs	r2, #4
    85dc:	549c      	strb	r4, [r3, r2]
    85de:	3201      	adds	r2, #1
    85e0:	549c      	strb	r4, [r3, r2]
    85e2:	3201      	adds	r2, #1
    85e4:	549c      	strb	r4, [r3, r2]
    85e6:	3201      	adds	r2, #1
    85e8:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    85ea:	3207      	adds	r2, #7
    85ec:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    85ee:	001a      	movs	r2, r3
    85f0:	323e      	adds	r2, #62	; 0x3e
    85f2:	7011      	strb	r1, [r2, #0]
    85f4:	7051      	strb	r1, [r2, #1]
    85f6:	7091      	strb	r1, [r2, #2]
    85f8:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    85fa:	31c3      	adds	r1, #195	; 0xc3
    85fc:	31ff      	adds	r1, #255	; 0xff
    85fe:	5c5a      	ldrb	r2, [r3, r1]
    8600:	2401      	movs	r4, #1
    8602:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    8604:	2402      	movs	r4, #2
    8606:	4322      	orrs	r2, r4
    8608:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    860a:	222e      	movs	r2, #46	; 0x2e
    860c:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    860e:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    8610:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    8612:	2808      	cmp	r0, #8
    8614:	d91a      	bls.n	864c <LORAReg_InitAS+0x16c>
	if(!initialized)
    8616:	4b44      	ldr	r3, [pc, #272]	; (8728 <LORAReg_InitAS+0x248>)
    8618:	781b      	ldrb	r3, [r3, #0]
    861a:	2b00      	cmp	r3, #0
    861c:	d102      	bne.n	8624 <LORAReg_InitAS+0x144>
		initialized = true;
    861e:	2201      	movs	r2, #1
    8620:	4b41      	ldr	r3, [pc, #260]	; (8728 <LORAReg_InitAS+0x248>)
    8622:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    8624:	4b41      	ldr	r3, [pc, #260]	; (872c <LORAReg_InitAS+0x24c>)
    8626:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    8628:	4b41      	ldr	r3, [pc, #260]	; (8730 <LORAReg_InitAS+0x250>)
    862a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    862c:	4b41      	ldr	r3, [pc, #260]	; (8734 <LORAReg_InitAS+0x254>)
    862e:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    8630:	4b3b      	ldr	r3, [pc, #236]	; (8720 <LORAReg_InitAS+0x240>)
    8632:	4a41      	ldr	r2, [pc, #260]	; (8738 <LORAReg_InitAS+0x258>)
    8634:	5c9a      	ldrb	r2, [r3, r2]
    8636:	4941      	ldr	r1, [pc, #260]	; (873c <LORAReg_InitAS+0x25c>)
    8638:	5c58      	ldrb	r0, [r3, r1]
    863a:	0200      	lsls	r0, r0, #8
    863c:	4310      	orrs	r0, r2
    863e:	b2c1      	uxtb	r1, r0
    8640:	0a00      	lsrs	r0, r0, #8
    8642:	4b3f      	ldr	r3, [pc, #252]	; (8740 <LORAReg_InitAS+0x260>)
    8644:	4798      	blx	r3
}
    8646:	0020      	movs	r0, r4
    8648:	b006      	add	sp, #24
    864a:	bd70      	pop	{r4, r5, r6, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    864c:	001c      	movs	r4, r3
    864e:	0018      	movs	r0, r3
    8650:	3083      	adds	r0, #131	; 0x83
    8652:	3a2a      	subs	r2, #42	; 0x2a
    8654:	493b      	ldr	r1, [pc, #236]	; (8744 <LORAReg_InitAS+0x264>)
    8656:	4d3c      	ldr	r5, [pc, #240]	; (8748 <LORAReg_InitAS+0x268>)
    8658:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    865a:	0020      	movs	r0, r4
    865c:	30a3      	adds	r0, #163	; 0xa3
    865e:	2218      	movs	r2, #24
    8660:	493a      	ldr	r1, [pc, #232]	; (874c <LORAReg_InitAS+0x26c>)
    8662:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    8664:	0020      	movs	r0, r4
    8666:	30c4      	adds	r0, #196	; 0xc4
    8668:	30ff      	adds	r0, #255	; 0xff
    866a:	220c      	movs	r2, #12
    866c:	4938      	ldr	r1, [pc, #224]	; (8750 <LORAReg_InitAS+0x270>)
    866e:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    8670:	0020      	movs	r0, r4
    8672:	30ae      	adds	r0, #174	; 0xae
    8674:	30ff      	adds	r0, #255	; 0xff
    8676:	2202      	movs	r2, #2
    8678:	4936      	ldr	r1, [pc, #216]	; (8754 <LORAReg_InitAS+0x274>)
    867a:	47a8      	blx	r5
    867c:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    867e:	4828      	ldr	r0, [pc, #160]	; (8720 <LORAReg_InitAS+0x240>)
    8680:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    8682:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8684:	7902      	ldrb	r2, [r0, #4]
    8686:	7941      	ldrb	r1, [r0, #5]
    8688:	0209      	lsls	r1, r1, #8
    868a:	4311      	orrs	r1, r2
    868c:	7982      	ldrb	r2, [r0, #6]
    868e:	0412      	lsls	r2, r2, #16
    8690:	4311      	orrs	r1, r2
    8692:	79c2      	ldrb	r2, [r0, #7]
    8694:	0612      	lsls	r2, r2, #24
    8696:	430a      	orrs	r2, r1
    8698:	0059      	lsls	r1, r3, #1
    869a:	188a      	adds	r2, r1, r2
    869c:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    869e:	3301      	adds	r3, #1
    86a0:	b2db      	uxtb	r3, r3
    86a2:	5702      	ldrsb	r2, [r0, r4]
    86a4:	4293      	cmp	r3, r2
    86a6:	dbed      	blt.n	8684 <LORAReg_InitAS+0x1a4>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    86a8:	4c1d      	ldr	r4, [pc, #116]	; (8720 <LORAReg_InitAS+0x240>)
    86aa:	2210      	movs	r2, #16
    86ac:	23c2      	movs	r3, #194	; 0xc2
    86ae:	33ff      	adds	r3, #255	; 0xff
    86b0:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    86b2:	7820      	ldrb	r0, [r4, #0]
    86b4:	7863      	ldrb	r3, [r4, #1]
    86b6:	021b      	lsls	r3, r3, #8
    86b8:	4303      	orrs	r3, r0
    86ba:	78a0      	ldrb	r0, [r4, #2]
    86bc:	0400      	lsls	r0, r0, #16
    86be:	4303      	orrs	r3, r0
    86c0:	78e0      	ldrb	r0, [r4, #3]
    86c2:	0600      	lsls	r0, r0, #24
    86c4:	4318      	orrs	r0, r3
    86c6:	3230      	adds	r2, #48	; 0x30
    86c8:	4923      	ldr	r1, [pc, #140]	; (8758 <LORAReg_InitAS+0x278>)
    86ca:	4b1f      	ldr	r3, [pc, #124]	; (8748 <LORAReg_InitAS+0x268>)
    86cc:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    86ce:	2304      	movs	r3, #4
    86d0:	2104      	movs	r1, #4
    86d2:	4a22      	ldr	r2, [pc, #136]	; (875c <LORAReg_InitAS+0x27c>)
    86d4:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    86d6:	2100      	movs	r1, #0
    86d8:	4a21      	ldr	r2, [pc, #132]	; (8760 <LORAReg_InitAS+0x280>)
    86da:	54a1      	strb	r1, [r4, r2]
    86dc:	18a2      	adds	r2, r4, r2
    86de:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    86e0:	3101      	adds	r1, #1
    86e2:	2284      	movs	r2, #132	; 0x84
    86e4:	0092      	lsls	r2, r2, #2
    86e6:	54a1      	strb	r1, [r4, r2]
    86e8:	18a2      	adds	r2, r4, r2
    86ea:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    86ec:	3101      	adds	r1, #1
    86ee:	4a12      	ldr	r2, [pc, #72]	; (8738 <LORAReg_InitAS+0x258>)
    86f0:	54a1      	strb	r1, [r4, r2]
    86f2:	18a2      	adds	r2, r4, r2
    86f4:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    86f6:	2200      	movs	r2, #0
    86f8:	2383      	movs	r3, #131	; 0x83
    86fa:	009b      	lsls	r3, r3, #2
    86fc:	54e2      	strb	r2, [r4, r3]
    86fe:	469c      	mov	ip, r3
    8700:	4464      	add	r4, ip
    8702:	2300      	movs	r3, #0
    8704:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    8706:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    8708:	3203      	adds	r2, #3
    870a:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    870c:	4a15      	ldr	r2, [pc, #84]	; (8764 <LORAReg_InitAS+0x284>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    870e:	9200      	str	r2, [sp, #0]
    8710:	4915      	ldr	r1, [pc, #84]	; (8768 <LORAReg_InitAS+0x288>)
    8712:	9a03      	ldr	r2, [sp, #12]
    8714:	4b15      	ldr	r3, [pc, #84]	; (876c <LORAReg_InitAS+0x28c>)
    8716:	2004      	movs	r0, #4
    8718:	4c15      	ldr	r4, [pc, #84]	; (8770 <LORAReg_InitAS+0x290>)
    871a:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    871c:	2408      	movs	r4, #8
    871e:	e77a      	b.n	8616 <LORAReg_InitAS+0x136>
    8720:	200024d0 	.word	0x200024d0
    8724:	200024cc 	.word	0x200024cc
    8728:	20000c78 	.word	0x20000c78
    872c:	0000cc75 	.word	0x0000cc75
    8730:	0000d3a5 	.word	0x0000d3a5
    8734:	0000d679 	.word	0x0000d679
    8738:	00000212 	.word	0x00000212
    873c:	00000213 	.word	0x00000213
    8740:	0000e071 	.word	0x0000e071
    8744:	0001fc24 	.word	0x0001fc24
    8748:	00019d1d 	.word	0x00019d1d
    874c:	0001fc0c 	.word	0x0001fc0c
    8750:	0001fc6c 	.word	0x0001fc6c
    8754:	0001fc68 	.word	0x0001fc68
    8758:	0001fc28 	.word	0x0001fc28
    875c:	0000020b 	.word	0x0000020b
    8760:	0000020e 	.word	0x0000020e
    8764:	000084dd 	.word	0x000084dd
    8768:	200022ac 	.word	0x200022ac
    876c:	0001fc78 	.word	0x0001fc78
    8770:	0000e355 	.word	0x0000e355

00008774 <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    8774:	4770      	bx	lr
	...

00008778 <LORAReg_InitAU>:
{
    8778:	b5f0      	push	{r4, r5, r6, r7, lr}
    877a:	46de      	mov	lr, fp
    877c:	4657      	mov	r7, sl
    877e:	464e      	mov	r6, r9
    8780:	4645      	mov	r5, r8
    8782:	b5e0      	push	{r5, r6, r7, lr}
    8784:	b087      	sub	sp, #28
    8786:	4683      	mov	fp, r0
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    8788:	4c83      	ldr	r4, [pc, #524]	; (8998 <LORAReg_InitAU+0x220>)
    878a:	2103      	movs	r1, #3
    878c:	2326      	movs	r3, #38	; 0x26
    878e:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    8790:	3145      	adds	r1, #69	; 0x45
    8792:	3304      	adds	r3, #4
    8794:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    8796:	3941      	subs	r1, #65	; 0x41
    8798:	3b03      	subs	r3, #3
    879a:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    879c:	0020      	movs	r0, r4
    879e:	30b3      	adds	r0, #179	; 0xb3
    87a0:	2600      	movs	r6, #0
    87a2:	7120      	strb	r0, [r4, #4]
    87a4:	0a03      	lsrs	r3, r0, #8
    87a6:	7163      	strb	r3, [r4, #5]
    87a8:	0c03      	lsrs	r3, r0, #16
    87aa:	71a3      	strb	r3, [r4, #6]
    87ac:	0e03      	lsrs	r3, r0, #24
    87ae:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    87b0:	2343      	movs	r3, #67	; 0x43
    87b2:	4698      	mov	r8, r3
    87b4:	44a0      	add	r8, r4
    87b6:	4643      	mov	r3, r8
    87b8:	7023      	strb	r3, [r4, #0]
    87ba:	4643      	mov	r3, r8
    87bc:	0a1b      	lsrs	r3, r3, #8
    87be:	7063      	strb	r3, [r4, #1]
    87c0:	4643      	mov	r3, r8
    87c2:	0c1b      	lsrs	r3, r3, #16
    87c4:	70a3      	strb	r3, [r4, #2]
    87c6:	4643      	mov	r3, r8
    87c8:	0e1b      	lsrs	r3, r3, #24
    87ca:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    87cc:	2321      	movs	r3, #33	; 0x21
    87ce:	31f8      	adds	r1, #248	; 0xf8
    87d0:	54e1      	strb	r1, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    87d2:	2508      	movs	r5, #8
    87d4:	2708      	movs	r7, #8
    87d6:	3301      	adds	r3, #1
    87d8:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    87da:	3301      	adds	r3, #1
    87dc:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    87de:	3b83      	subs	r3, #131	; 0x83
    87e0:	469c      	mov	ip, r3
    87e2:	7723      	strb	r3, [r4, #28]
    87e4:	2370      	movs	r3, #112	; 0x70
    87e6:	7763      	strb	r3, [r4, #29]
    87e8:	77a7      	strb	r7, [r4, #30]
    87ea:	3b39      	subs	r3, #57	; 0x39
    87ec:	77e3      	strb	r3, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    87ee:	39c7      	subs	r1, #199	; 0xc7
    87f0:	3b17      	subs	r3, #23
    87f2:	54e1      	strb	r1, [r4, r3]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    87f4:	2224      	movs	r2, #36	; 0x24
    87f6:	3b1a      	subs	r3, #26
    87f8:	54a3      	strb	r3, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    87fa:	3201      	adds	r2, #1
    87fc:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    87fe:	321b      	adds	r2, #27
    8800:	4692      	mov	sl, r2
    8802:	2254      	movs	r2, #84	; 0x54
    8804:	32ff      	adds	r2, #255	; 0xff
    8806:	4653      	mov	r3, sl
    8808:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    880a:	23aa      	movs	r3, #170	; 0xaa
    880c:	005b      	lsls	r3, r3, #1
    880e:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    8810:	2350      	movs	r3, #80	; 0x50
    8812:	33ff      	adds	r3, #255	; 0xff
    8814:	54e6      	strb	r6, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    8816:	3301      	adds	r3, #1
    8818:	3a4e      	subs	r2, #78	; 0x4e
    881a:	3aff      	subs	r2, #255	; 0xff
    881c:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    881e:	2352      	movs	r3, #82	; 0x52
    8820:	33ff      	adds	r3, #255	; 0xff
    8822:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    8824:	3b45      	subs	r3, #69	; 0x45
    8826:	3bff      	subs	r3, #255	; 0xff
    8828:	4699      	mov	r9, r3
    882a:	3346      	adds	r3, #70	; 0x46
    882c:	33ff      	adds	r3, #255	; 0xff
    882e:	464a      	mov	r2, r9
    8830:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    8832:	2356      	movs	r3, #86	; 0x56
    8834:	33ff      	adds	r3, #255	; 0xff
    8836:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    8838:	2300      	movs	r3, #0
    883a:	4699      	mov	r9, r3
    883c:	2344      	movs	r3, #68	; 0x44
    883e:	33ff      	adds	r3, #255	; 0xff
    8840:	464a      	mov	r2, r9
    8842:	54e2      	strb	r2, [r4, r3]
    8844:	0023      	movs	r3, r4
    8846:	3344      	adds	r3, #68	; 0x44
    8848:	33ff      	adds	r3, #255	; 0xff
    884a:	2228      	movs	r2, #40	; 0x28
    884c:	4252      	negs	r2, r2
    884e:	705a      	strb	r2, [r3, #1]
    8850:	2274      	movs	r2, #116	; 0x74
    8852:	4252      	negs	r2, r2
    8854:	709a      	strb	r2, [r3, #2]
    8856:	2236      	movs	r2, #54	; 0x36
    8858:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    885a:	2360      	movs	r3, #96	; 0x60
    885c:	4699      	mov	r9, r3
    885e:	2348      	movs	r3, #72	; 0x48
    8860:	33ff      	adds	r3, #255	; 0xff
    8862:	464a      	mov	r2, r9
    8864:	54e2      	strb	r2, [r4, r3]
    8866:	0023      	movs	r3, r4
    8868:	3348      	adds	r3, #72	; 0x48
    886a:	33ff      	adds	r3, #255	; 0xff
    886c:	227a      	movs	r2, #122	; 0x7a
    886e:	4252      	negs	r2, r2
    8870:	705a      	strb	r2, [r3, #1]
    8872:	2269      	movs	r2, #105	; 0x69
    8874:	4252      	negs	r2, r2
    8876:	709a      	strb	r2, [r3, #2]
    8878:	2236      	movs	r2, #54	; 0x36
    887a:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    887c:	234c      	movs	r3, #76	; 0x4c
    887e:	33ff      	adds	r3, #255	; 0xff
    8880:	4662      	mov	r2, ip
    8882:	54e2      	strb	r2, [r4, r3]
    8884:	0023      	movs	r3, r4
    8886:	334c      	adds	r3, #76	; 0x4c
    8888:	33ff      	adds	r3, #255	; 0xff
    888a:	2270      	movs	r2, #112	; 0x70
    888c:	705a      	strb	r2, [r3, #1]
    888e:	709f      	strb	r7, [r3, #2]
    8890:	2237      	movs	r2, #55	; 0x37
    8892:	70da      	strb	r2, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8894:	0023      	movs	r3, r4
    8896:	3334      	adds	r3, #52	; 0x34
    8898:	7523      	strb	r3, [r4, #20]
    889a:	0a1a      	lsrs	r2, r3, #8
    889c:	7562      	strb	r2, [r4, #21]
    889e:	0c1a      	lsrs	r2, r3, #16
    88a0:	75a2      	strb	r2, [r4, #22]
    88a2:	0e1b      	lsrs	r3, r3, #24
    88a4:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    88a6:	0023      	movs	r3, r4
    88a8:	333d      	adds	r3, #61	; 0x3d
    88aa:	7623      	strb	r3, [r4, #24]
    88ac:	0a1a      	lsrs	r2, r3, #8
    88ae:	7662      	strb	r2, [r4, #25]
    88b0:	0c1a      	lsrs	r2, r3, #16
    88b2:	76a2      	strb	r2, [r4, #26]
    88b4:	0e1b      	lsrs	r3, r3, #24
    88b6:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    88b8:	2305      	movs	r3, #5
    88ba:	469c      	mov	ip, r3
    88bc:	3327      	adds	r3, #39	; 0x27
    88be:	4662      	mov	r2, ip
    88c0:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    88c2:	3b22      	subs	r3, #34	; 0x22
    88c4:	469c      	mov	ip, r3
    88c6:	3323      	adds	r3, #35	; 0x23
    88c8:	4662      	mov	r2, ip
    88ca:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_AU;
    88cc:	3b0f      	subs	r3, #15
    88ce:	469c      	mov	ip, r3
    88d0:	330a      	adds	r3, #10
    88d2:	4662      	mov	r2, ip
    88d4:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    88d6:	2358      	movs	r3, #88	; 0x58
    88d8:	33ff      	adds	r3, #255	; 0xff
    88da:	54e6      	strb	r6, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    88dc:	4b2f      	ldr	r3, [pc, #188]	; (899c <LORAReg_InitAU+0x224>)
    88de:	469a      	mov	sl, r3
    88e0:	781a      	ldrb	r2, [r3, #0]
    88e2:	4691      	mov	r9, r2
    88e4:	223d      	movs	r2, #61	; 0x3d
    88e6:	464b      	mov	r3, r9
    88e8:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    88ea:	4653      	mov	r3, sl
    88ec:	785b      	ldrb	r3, [r3, #1]
    88ee:	469c      	mov	ip, r3
    88f0:	233c      	movs	r3, #60	; 0x3c
    88f2:	4662      	mov	r2, ip
    88f4:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    88f6:	2300      	movs	r3, #0
    88f8:	5463      	strb	r3, [r4, r1]
    88fa:	2100      	movs	r1, #0
    88fc:	3339      	adds	r3, #57	; 0x39
    88fe:	54e1      	strb	r1, [r4, r3]
    8900:	3301      	adds	r3, #1
    8902:	54e1      	strb	r1, [r4, r3]
    8904:	3301      	adds	r3, #1
    8906:	54e1      	strb	r1, [r4, r3]
	RegParams.joinbccount =0;
    8908:	3307      	adds	r3, #7
    890a:	54e6      	strb	r6, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    890c:	0023      	movs	r3, r4
    890e:	333e      	adds	r3, #62	; 0x3e
    8910:	7019      	strb	r1, [r3, #0]
    8912:	7059      	strb	r1, [r3, #1]
    8914:	7099      	strb	r1, [r3, #2]
    8916:	70d9      	strb	r1, [r3, #3]
	RegParams.band = ismBand;
    8918:	232e      	movs	r3, #46	; 0x2e
    891a:	465a      	mov	r2, fp
    891c:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    891e:	2290      	movs	r2, #144	; 0x90
    8920:	491f      	ldr	r1, [pc, #124]	; (89a0 <LORAReg_InitAU+0x228>)
    8922:	4b20      	ldr	r3, [pc, #128]	; (89a4 <LORAReg_InitAU+0x22c>)
    8924:	4699      	mov	r9, r3
    8926:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    8928:	2270      	movs	r2, #112	; 0x70
    892a:	491f      	ldr	r1, [pc, #124]	; (89a8 <LORAReg_InitAU+0x230>)
    892c:	4640      	mov	r0, r8
    892e:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    8930:	23ab      	movs	r3, #171	; 0xab
    8932:	005b      	lsls	r3, r3, #1
    8934:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    8936:	4b1d      	ldr	r3, [pc, #116]	; (89ac <LORAReg_InitAU+0x234>)
    8938:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    893a:	2200      	movs	r2, #0
    893c:	4b1c      	ldr	r3, [pc, #112]	; (89b0 <LORAReg_InitAU+0x238>)
    893e:	54e2      	strb	r2, [r4, r3]
    8940:	18e3      	adds	r3, r4, r3
    8942:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    8944:	2384      	movs	r3, #132	; 0x84
    8946:	009b      	lsls	r3, r3, #2
    8948:	54e2      	strb	r2, [r4, r3]
    894a:	18e3      	adds	r3, r4, r3
    894c:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    894e:	4b19      	ldr	r3, [pc, #100]	; (89b4 <LORAReg_InitAU+0x23c>)
    8950:	54e2      	strb	r2, [r4, r3]
    8952:	18e3      	adds	r3, r4, r3
    8954:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_AU_LAST_USED_SB;
    8956:	3201      	adds	r2, #1
    8958:	2383      	movs	r3, #131	; 0x83
    895a:	009b      	lsls	r3, r3, #2
    895c:	54e2      	strb	r2, [r4, r3]
    895e:	469c      	mov	ip, r3
    8960:	4464      	add	r4, ip
    8962:	7067      	strb	r7, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    8964:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    8966:	3201      	adds	r2, #1
    8968:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    896a:	4a13      	ldr	r2, [pc, #76]	; (89b8 <LORAReg_InitAU+0x240>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    896c:	9200      	str	r2, [sp, #0]
    896e:	4913      	ldr	r1, [pc, #76]	; (89bc <LORAReg_InitAU+0x244>)
    8970:	9a03      	ldr	r2, [sp, #12]
    8972:	4b13      	ldr	r3, [pc, #76]	; (89c0 <LORAReg_InitAU+0x248>)
    8974:	2008      	movs	r0, #8
    8976:	4c13      	ldr	r4, [pc, #76]	; (89c4 <LORAReg_InitAU+0x24c>)
    8978:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    897a:	4b13      	ldr	r3, [pc, #76]	; (89c8 <LORAReg_InitAU+0x250>)
    897c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    897e:	4b13      	ldr	r3, [pc, #76]	; (89cc <LORAReg_InitAU+0x254>)
    8980:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    8982:	4b13      	ldr	r3, [pc, #76]	; (89d0 <LORAReg_InitAU+0x258>)
    8984:	4798      	blx	r3
}
    8986:	2008      	movs	r0, #8
    8988:	b007      	add	sp, #28
    898a:	bc3c      	pop	{r2, r3, r4, r5}
    898c:	4690      	mov	r8, r2
    898e:	4699      	mov	r9, r3
    8990:	46a2      	mov	sl, r4
    8992:	46ab      	mov	fp, r5
    8994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8996:	46c0      	nop			; (mov r8, r8)
    8998:	200024d0 	.word	0x200024d0
    899c:	200024cc 	.word	0x200024cc
    89a0:	0001fc90 	.word	0x0001fc90
    89a4:	00019d1d 	.word	0x00019d1d
    89a8:	0001fd20 	.word	0x0001fd20
    89ac:	0000020b 	.word	0x0000020b
    89b0:	0000020e 	.word	0x0000020e
    89b4:	00000212 	.word	0x00000212
    89b8:	00008775 	.word	0x00008775
    89bc:	200022b0 	.word	0x200022b0
    89c0:	0001fd90 	.word	0x0001fd90
    89c4:	0000e355 	.word	0x0000e355
    89c8:	0000cdbd 	.word	0x0000cdbd
    89cc:	0000d411 	.word	0x0000d411
    89d0:	0000d6ed 	.word	0x0000d6ed

000089d4 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    89d4:	4770      	bx	lr
	...

000089d8 <LORAReg_InitEU>:
{
    89d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    89da:	b08b      	sub	sp, #44	; 0x2c
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    89dc:	4ba2      	ldr	r3, [pc, #648]	; (8c68 <LORAReg_InitEU+0x290>)
    89de:	2103      	movs	r1, #3
    89e0:	2226      	movs	r2, #38	; 0x26
    89e2:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    89e4:	2510      	movs	r5, #16
    89e6:	3204      	adds	r2, #4
    89e8:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    89ea:	2406      	movs	r4, #6
    89ec:	3a01      	subs	r2, #1
    89ee:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    89f0:	3c05      	subs	r4, #5
    89f2:	3a02      	subs	r2, #2
    89f4:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    89f6:	001a      	movs	r2, r3
    89f8:	3283      	adds	r2, #131	; 0x83
    89fa:	2400      	movs	r4, #0
    89fc:	711a      	strb	r2, [r3, #4]
    89fe:	0a16      	lsrs	r6, r2, #8
    8a00:	715e      	strb	r6, [r3, #5]
    8a02:	0c16      	lsrs	r6, r2, #16
    8a04:	719e      	strb	r6, [r3, #6]
    8a06:	0e12      	lsrs	r2, r2, #24
    8a08:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8a0a:	001a      	movs	r2, r3
    8a0c:	3243      	adds	r2, #67	; 0x43
    8a0e:	701a      	strb	r2, [r3, #0]
    8a10:	0a16      	lsrs	r6, r2, #8
    8a12:	705e      	strb	r6, [r3, #1]
    8a14:	0c16      	lsrs	r6, r2, #16
    8a16:	709e      	strb	r6, [r3, #2]
    8a18:	0e12      	lsrs	r2, r2, #24
    8a1a:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    8a1c:	001a      	movs	r2, r3
    8a1e:	32c4      	adds	r2, #196	; 0xc4
    8a20:	32ff      	adds	r2, #255	; 0xff
    8a22:	731a      	strb	r2, [r3, #12]
    8a24:	0a16      	lsrs	r6, r2, #8
    8a26:	735e      	strb	r6, [r3, #13]
    8a28:	0c16      	lsrs	r6, r2, #16
    8a2a:	739e      	strb	r6, [r3, #14]
    8a2c:	0e12      	lsrs	r2, r2, #24
    8a2e:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8a30:	001a      	movs	r2, r3
    8a32:	32a3      	adds	r2, #163	; 0xa3
    8a34:	721a      	strb	r2, [r3, #8]
    8a36:	0a16      	lsrs	r6, r2, #8
    8a38:	725e      	strb	r6, [r3, #9]
    8a3a:	0c16      	lsrs	r6, r2, #16
    8a3c:	729e      	strb	r6, [r3, #10]
    8a3e:	0e12      	lsrs	r2, r2, #24
    8a40:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8a42:	001a      	movs	r2, r3
    8a44:	3264      	adds	r2, #100	; 0x64
    8a46:	32ff      	adds	r2, #255	; 0xff
    8a48:	741a      	strb	r2, [r3, #16]
    8a4a:	0a16      	lsrs	r6, r2, #8
    8a4c:	745e      	strb	r6, [r3, #17]
    8a4e:	0c16      	lsrs	r6, r2, #16
    8a50:	749e      	strb	r6, [r3, #18]
    8a52:	0e12      	lsrs	r2, r2, #24
    8a54:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8a56:	001a      	movs	r2, r3
    8a58:	3234      	adds	r2, #52	; 0x34
    8a5a:	751a      	strb	r2, [r3, #20]
    8a5c:	0a16      	lsrs	r6, r2, #8
    8a5e:	755e      	strb	r6, [r3, #21]
    8a60:	0c16      	lsrs	r6, r2, #16
    8a62:	759e      	strb	r6, [r3, #22]
    8a64:	0e12      	lsrs	r2, r2, #24
    8a66:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8a68:	001a      	movs	r2, r3
    8a6a:	323d      	adds	r2, #61	; 0x3d
    8a6c:	761a      	strb	r2, [r3, #24]
    8a6e:	0a16      	lsrs	r6, r2, #8
    8a70:	765e      	strb	r6, [r3, #25]
    8a72:	0c16      	lsrs	r6, r2, #16
    8a74:	769e      	strb	r6, [r3, #26]
    8a76:	0e12      	lsrs	r2, r2, #24
    8a78:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    8a7a:	2221      	movs	r2, #33	; 0x21
    8a7c:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    8a7e:	2622      	movs	r6, #34	; 0x22
    8a80:	3a01      	subs	r2, #1
    8a82:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    8a84:	3a19      	subs	r2, #25
    8a86:	3602      	adds	r6, #2
    8a88:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    8a8a:	3601      	adds	r6, #1
    8a8c:	559c      	strb	r4, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    8a8e:	2705      	movs	r7, #5
    8a90:	3607      	adds	r6, #7
    8a92:	559f      	strb	r7, [r3, r6]
	RegParams.maxTxPwrIndx = 7;
    8a94:	3601      	adds	r6, #1
    8a96:	559a      	strb	r2, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    8a98:	32ba      	adds	r2, #186	; 0xba
    8a9a:	32ff      	adds	r2, #255	; 0xff
    8a9c:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_EU;
    8a9e:	3a99      	subs	r2, #153	; 0x99
    8aa0:	3aff      	subs	r2, #255	; 0xff
    8aa2:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    8aa4:	4a71      	ldr	r2, [pc, #452]	; (8c6c <LORAReg_InitEU+0x294>)
    8aa6:	7815      	ldrb	r5, [r2, #0]
    8aa8:	2168      	movs	r1, #104	; 0x68
    8aaa:	31ff      	adds	r1, #255	; 0xff
    8aac:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8aae:	7855      	ldrb	r5, [r2, #1]
    8ab0:	392b      	subs	r1, #43	; 0x2b
    8ab2:	39ff      	subs	r1, #255	; 0xff
    8ab4:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    8ab6:	7891      	ldrb	r1, [r2, #2]
    8ab8:	223c      	movs	r2, #60	; 0x3c
    8aba:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    8abc:	2100      	movs	r1, #0
    8abe:	3a04      	subs	r2, #4
    8ac0:	5499      	strb	r1, [r3, r2]
    8ac2:	3201      	adds	r2, #1
    8ac4:	5499      	strb	r1, [r3, r2]
    8ac6:	3201      	adds	r2, #1
    8ac8:	5499      	strb	r1, [r3, r2]
    8aca:	3201      	adds	r2, #1
    8acc:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    8ace:	3207      	adds	r2, #7
    8ad0:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8ad2:	001a      	movs	r2, r3
    8ad4:	323e      	adds	r2, #62	; 0x3e
    8ad6:	7011      	strb	r1, [r2, #0]
    8ad8:	7051      	strb	r1, [r2, #1]
    8ada:	7091      	strb	r1, [r2, #2]
    8adc:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    8ade:	222e      	movs	r2, #46	; 0x2e
    8ae0:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    8ae2:	2800      	cmp	r0, #0
    8ae4:	d006      	beq.n	8af4 <LORAReg_InitEU+0x11c>
		return UNSUPPORTED_BAND;
    8ae6:	23c6      	movs	r3, #198	; 0xc6
	else if(ismBand == ISM_EU433)
    8ae8:	2801      	cmp	r0, #1
    8aea:	d100      	bne.n	8aee <LORAReg_InitEU+0x116>
    8aec:	e084      	b.n	8bf8 <LORAReg_InitEU+0x220>
}
    8aee:	0018      	movs	r0, r3
    8af0:	b00b      	add	sp, #44	; 0x2c
    8af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    8af4:	001c      	movs	r4, r3
    8af6:	0018      	movs	r0, r3
    8af8:	3083      	adds	r0, #131	; 0x83
    8afa:	3a28      	subs	r2, #40	; 0x28
    8afc:	495c      	ldr	r1, [pc, #368]	; (8c70 <LORAReg_InitEU+0x298>)
    8afe:	4d5d      	ldr	r5, [pc, #372]	; (8c74 <LORAReg_InitEU+0x29c>)
    8b00:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    8b02:	0020      	movs	r0, r4
    8b04:	30a3      	adds	r0, #163	; 0xa3
    8b06:	2224      	movs	r2, #36	; 0x24
    8b08:	495b      	ldr	r1, [pc, #364]	; (8c78 <LORAReg_InitEU+0x2a0>)
    8b0a:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    8b0c:	0020      	movs	r0, r4
    8b0e:	30c4      	adds	r0, #196	; 0xc4
    8b10:	30ff      	adds	r0, #255	; 0xff
    8b12:	2248      	movs	r2, #72	; 0x48
    8b14:	4959      	ldr	r1, [pc, #356]	; (8c7c <LORAReg_InitEU+0x2a4>)
    8b16:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    8b18:	0020      	movs	r0, r4
    8b1a:	30ae      	adds	r0, #174	; 0xae
    8b1c:	30ff      	adds	r0, #255	; 0xff
    8b1e:	220c      	movs	r2, #12
    8b20:	4957      	ldr	r1, [pc, #348]	; (8c80 <LORAReg_InitEU+0x2a8>)
    8b22:	47a8      	blx	r5
    8b24:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    8b26:	4850      	ldr	r0, [pc, #320]	; (8c68 <LORAReg_InitEU+0x290>)
    8b28:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    8b2a:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    8b2c:	7902      	ldrb	r2, [r0, #4]
    8b2e:	7941      	ldrb	r1, [r0, #5]
    8b30:	0209      	lsls	r1, r1, #8
    8b32:	4311      	orrs	r1, r2
    8b34:	7982      	ldrb	r2, [r0, #6]
    8b36:	0412      	lsls	r2, r2, #16
    8b38:	4311      	orrs	r1, r2
    8b3a:	79c2      	ldrb	r2, [r0, #7]
    8b3c:	0612      	lsls	r2, r2, #24
    8b3e:	430a      	orrs	r2, r1
    8b40:	0059      	lsls	r1, r3, #1
    8b42:	188a      	adds	r2, r1, r2
    8b44:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8b46:	3301      	adds	r3, #1
    8b48:	b2db      	uxtb	r3, r3
    8b4a:	5702      	ldrsb	r2, [r0, r4]
    8b4c:	4293      	cmp	r3, r2
    8b4e:	dbed      	blt.n	8b2c <LORAReg_InitEU+0x154>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    8b50:	4b45      	ldr	r3, [pc, #276]	; (8c68 <LORAReg_InitEU+0x290>)
    8b52:	2200      	movs	r2, #0
    8b54:	2122      	movs	r1, #34	; 0x22
    8b56:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    8b58:	3101      	adds	r1, #1
    8b5a:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    8b5c:	3208      	adds	r2, #8
    8b5e:	771a      	strb	r2, [r3, #28]
    8b60:	3a22      	subs	r2, #34	; 0x22
    8b62:	775a      	strb	r2, [r3, #29]
    8b64:	3a13      	subs	r2, #19
    8b66:	779a      	strb	r2, [r3, #30]
    8b68:	3260      	adds	r2, #96	; 0x60
    8b6a:	77da      	strb	r2, [r3, #31]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    8b6c:	3920      	subs	r1, #32
    8b6e:	4a45      	ldr	r2, [pc, #276]	; (8c84 <LORAReg_InitEU+0x2ac>)
    8b70:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    8b72:	2100      	movs	r1, #0
    8b74:	4a44      	ldr	r2, [pc, #272]	; (8c88 <LORAReg_InitEU+0x2b0>)
    8b76:	5499      	strb	r1, [r3, r2]
    8b78:	189a      	adds	r2, r3, r2
    8b7a:	2103      	movs	r1, #3
    8b7c:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    8b7e:	2100      	movs	r1, #0
    8b80:	2284      	movs	r2, #132	; 0x84
    8b82:	0092      	lsls	r2, r2, #2
    8b84:	5499      	strb	r1, [r3, r2]
    8b86:	189a      	adds	r2, r3, r2
    8b88:	310b      	adds	r1, #11
    8b8a:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    8b8c:	2100      	movs	r1, #0
    8b8e:	4a3f      	ldr	r2, [pc, #252]	; (8c8c <LORAReg_InitEU+0x2b4>)
    8b90:	5499      	strb	r1, [r3, r2]
    8b92:	189a      	adds	r2, r3, r2
    8b94:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8b96:	2283      	movs	r2, #131	; 0x83
    8b98:	0092      	lsls	r2, r2, #2
    8b9a:	5499      	strb	r1, [r3, r2]
    8b9c:	4694      	mov	ip, r2
    8b9e:	4463      	add	r3, ip
    8ba0:	2200      	movs	r2, #0
    8ba2:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    8ba4:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    8ba6:	2601      	movs	r6, #1
    8ba8:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    8baa:	4d39      	ldr	r5, [pc, #228]	; (8c90 <LORAReg_InitEU+0x2b8>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    8bac:	9500      	str	r5, [sp, #0]
    8bae:	4939      	ldr	r1, [pc, #228]	; (8c94 <LORAReg_InitEU+0x2bc>)
    8bb0:	9a03      	ldr	r2, [sp, #12]
    8bb2:	4b39      	ldr	r3, [pc, #228]	; (8c98 <LORAReg_InitEU+0x2c0>)
    8bb4:	2003      	movs	r0, #3
    8bb6:	4c39      	ldr	r4, [pc, #228]	; (8c9c <LORAReg_InitEU+0x2c4>)
    8bb8:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    8bba:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    8bbc:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    8bbe:	9500      	str	r5, [sp, #0]
    8bc0:	4937      	ldr	r1, [pc, #220]	; (8ca0 <LORAReg_InitEU+0x2c8>)
    8bc2:	9a07      	ldr	r2, [sp, #28]
    8bc4:	4b37      	ldr	r3, [pc, #220]	; (8ca4 <LORAReg_InitEU+0x2cc>)
    8bc6:	200b      	movs	r0, #11
    8bc8:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    8bca:	4a27      	ldr	r2, [pc, #156]	; (8c68 <LORAReg_InitEU+0x290>)
    8bcc:	7810      	ldrb	r0, [r2, #0]
    8bce:	7853      	ldrb	r3, [r2, #1]
    8bd0:	021b      	lsls	r3, r3, #8
    8bd2:	4303      	orrs	r3, r0
    8bd4:	7890      	ldrb	r0, [r2, #2]
    8bd6:	0400      	lsls	r0, r0, #16
    8bd8:	4303      	orrs	r3, r0
    8bda:	78d0      	ldrb	r0, [r2, #3]
    8bdc:	0600      	lsls	r0, r0, #24
    8bde:	4318      	orrs	r0, r3
    8be0:	2240      	movs	r2, #64	; 0x40
    8be2:	4931      	ldr	r1, [pc, #196]	; (8ca8 <LORAReg_InitEU+0x2d0>)
    8be4:	4b23      	ldr	r3, [pc, #140]	; (8c74 <LORAReg_InitEU+0x29c>)
    8be6:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    8be8:	4b30      	ldr	r3, [pc, #192]	; (8cac <LORAReg_InitEU+0x2d4>)
    8bea:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    8bec:	4b30      	ldr	r3, [pc, #192]	; (8cb0 <LORAReg_InitEU+0x2d8>)
    8bee:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    8bf0:	4b30      	ldr	r3, [pc, #192]	; (8cb4 <LORAReg_InitEU+0x2dc>)
    8bf2:	4798      	blx	r3
	return status;
    8bf4:	2308      	movs	r3, #8
    8bf6:	e77a      	b.n	8aee <LORAReg_InitEU+0x116>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    8bf8:	4c1b      	ldr	r4, [pc, #108]	; (8c68 <LORAReg_InitEU+0x290>)
    8bfa:	0020      	movs	r0, r4
    8bfc:	3083      	adds	r0, #131	; 0x83
    8bfe:	2206      	movs	r2, #6
    8c00:	492d      	ldr	r1, [pc, #180]	; (8cb8 <LORAReg_InitEU+0x2e0>)
    8c02:	4d1c      	ldr	r5, [pc, #112]	; (8c74 <LORAReg_InitEU+0x29c>)
    8c04:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    8c06:	0020      	movs	r0, r4
    8c08:	30a3      	adds	r0, #163	; 0xa3
    8c0a:	2224      	movs	r2, #36	; 0x24
    8c0c:	492b      	ldr	r1, [pc, #172]	; (8cbc <LORAReg_InitEU+0x2e4>)
    8c0e:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    8c10:	0020      	movs	r0, r4
    8c12:	30c4      	adds	r0, #196	; 0xc4
    8c14:	30ff      	adds	r0, #255	; 0xff
    8c16:	220c      	movs	r2, #12
    8c18:	4929      	ldr	r1, [pc, #164]	; (8cc0 <LORAReg_InitEU+0x2e8>)
    8c1a:	47a8      	blx	r5
    8c1c:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8c1e:	4812      	ldr	r0, [pc, #72]	; (8c68 <LORAReg_InitEU+0x290>)
    8c20:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    8c22:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8c24:	7902      	ldrb	r2, [r0, #4]
    8c26:	7941      	ldrb	r1, [r0, #5]
    8c28:	0209      	lsls	r1, r1, #8
    8c2a:	4311      	orrs	r1, r2
    8c2c:	7982      	ldrb	r2, [r0, #6]
    8c2e:	0412      	lsls	r2, r2, #16
    8c30:	4311      	orrs	r1, r2
    8c32:	79c2      	ldrb	r2, [r0, #7]
    8c34:	0612      	lsls	r2, r2, #24
    8c36:	430a      	orrs	r2, r1
    8c38:	0059      	lsls	r1, r3, #1
    8c3a:	188a      	adds	r2, r1, r2
    8c3c:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    8c3e:	3301      	adds	r3, #1
    8c40:	b2db      	uxtb	r3, r3
    8c42:	5702      	ldrsb	r2, [r0, r4]
    8c44:	4293      	cmp	r3, r2
    8c46:	dbed      	blt.n	8c24 <LORAReg_InitEU+0x24c>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    8c48:	4b07      	ldr	r3, [pc, #28]	; (8c68 <LORAReg_InitEU+0x290>)
    8c4a:	2105      	movs	r1, #5
    8c4c:	2222      	movs	r2, #34	; 0x22
    8c4e:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    8c50:	2100      	movs	r1, #0
    8c52:	3201      	adds	r2, #1
    8c54:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    8c56:	3a93      	subs	r2, #147	; 0x93
    8c58:	771a      	strb	r2, [r3, #28]
    8c5a:	3241      	adds	r2, #65	; 0x41
    8c5c:	775a      	strb	r2, [r3, #29]
    8c5e:	3a02      	subs	r2, #2
    8c60:	779a      	strb	r2, [r3, #30]
    8c62:	324a      	adds	r2, #74	; 0x4a
    8c64:	77da      	strb	r2, [r3, #31]
    8c66:	e7b0      	b.n	8bca <LORAReg_InitEU+0x1f2>
    8c68:	200024d0 	.word	0x200024d0
    8c6c:	200024cc 	.word	0x200024cc
    8c70:	0001fdf0 	.word	0x0001fdf0
    8c74:	00019d1d 	.word	0x00019d1d
    8c78:	0001fdc4 	.word	0x0001fdc4
    8c7c:	0001fe50 	.word	0x0001fe50
    8c80:	0001fe38 	.word	0x0001fe38
    8c84:	0000020b 	.word	0x0000020b
    8c88:	0000020e 	.word	0x0000020e
    8c8c:	00000212 	.word	0x00000212
    8c90:	000089d5 	.word	0x000089d5
    8c94:	200022b4 	.word	0x200022b4
    8c98:	0001fe98 	.word	0x0001fe98
    8c9c:	0000e355 	.word	0x0000e355
    8ca0:	200022b8 	.word	0x200022b8
    8ca4:	0001fea0 	.word	0x0001fea0
    8ca8:	0001fdf8 	.word	0x0001fdf8
    8cac:	0000cb2d 	.word	0x0000cb2d
    8cb0:	0000d33d 	.word	0x0000d33d
    8cb4:	0000d60d 	.word	0x0000d60d
    8cb8:	0001fde8 	.word	0x0001fde8
    8cbc:	0001fda0 	.word	0x0001fda0
    8cc0:	0001fe44 	.word	0x0001fe44

00008cc4 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    8cc4:	4770      	bx	lr
	...

00008cc8 <LORAReg_InitIN>:
{
    8cc8:	b530      	push	{r4, r5, lr}
    8cca:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    8ccc:	4b72      	ldr	r3, [pc, #456]	; (8e98 <LORAReg_InitIN+0x1d0>)
    8cce:	2403      	movs	r4, #3
    8cd0:	2226      	movs	r2, #38	; 0x26
    8cd2:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    8cd4:	2110      	movs	r1, #16
    8cd6:	3204      	adds	r2, #4
    8cd8:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    8cda:	3a29      	subs	r2, #41	; 0x29
    8cdc:	3119      	adds	r1, #25
    8cde:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    8ce0:	3902      	subs	r1, #2
    8ce2:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8ce4:	001a      	movs	r2, r3
    8ce6:	3283      	adds	r2, #131	; 0x83
    8ce8:	2100      	movs	r1, #0
    8cea:	711a      	strb	r2, [r3, #4]
    8cec:	0a15      	lsrs	r5, r2, #8
    8cee:	715d      	strb	r5, [r3, #5]
    8cf0:	0c15      	lsrs	r5, r2, #16
    8cf2:	719d      	strb	r5, [r3, #6]
    8cf4:	0e12      	lsrs	r2, r2, #24
    8cf6:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8cf8:	001a      	movs	r2, r3
    8cfa:	3243      	adds	r2, #67	; 0x43
    8cfc:	701a      	strb	r2, [r3, #0]
    8cfe:	0a15      	lsrs	r5, r2, #8
    8d00:	705d      	strb	r5, [r3, #1]
    8d02:	0c15      	lsrs	r5, r2, #16
    8d04:	709d      	strb	r5, [r3, #2]
    8d06:	0e12      	lsrs	r2, r2, #24
    8d08:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8d0a:	001a      	movs	r2, r3
    8d0c:	32a3      	adds	r2, #163	; 0xa3
    8d0e:	721a      	strb	r2, [r3, #8]
    8d10:	0a15      	lsrs	r5, r2, #8
    8d12:	725d      	strb	r5, [r3, #9]
    8d14:	0c15      	lsrs	r5, r2, #16
    8d16:	729d      	strb	r5, [r3, #10]
    8d18:	0e12      	lsrs	r2, r2, #24
    8d1a:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8d1c:	001a      	movs	r2, r3
    8d1e:	3264      	adds	r2, #100	; 0x64
    8d20:	32ff      	adds	r2, #255	; 0xff
    8d22:	741a      	strb	r2, [r3, #16]
    8d24:	0a15      	lsrs	r5, r2, #8
    8d26:	745d      	strb	r5, [r3, #17]
    8d28:	0c15      	lsrs	r5, r2, #16
    8d2a:	749d      	strb	r5, [r3, #18]
    8d2c:	0e12      	lsrs	r2, r2, #24
    8d2e:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8d30:	001a      	movs	r2, r3
    8d32:	3234      	adds	r2, #52	; 0x34
    8d34:	751a      	strb	r2, [r3, #20]
    8d36:	0a15      	lsrs	r5, r2, #8
    8d38:	755d      	strb	r5, [r3, #21]
    8d3a:	0c15      	lsrs	r5, r2, #16
    8d3c:	759d      	strb	r5, [r3, #22]
    8d3e:	0e12      	lsrs	r2, r2, #24
    8d40:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8d42:	001a      	movs	r2, r3
    8d44:	323d      	adds	r2, #61	; 0x3d
    8d46:	761a      	strb	r2, [r3, #24]
    8d48:	0a15      	lsrs	r5, r2, #8
    8d4a:	765d      	strb	r5, [r3, #25]
    8d4c:	0c15      	lsrs	r5, r2, #16
    8d4e:	769d      	strb	r5, [r3, #26]
    8d50:	0e12      	lsrs	r2, r2, #24
    8d52:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    8d54:	2222      	movs	r2, #34	; 0x22
    8d56:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    8d58:	2502      	movs	r5, #2
    8d5a:	3201      	adds	r2, #1
    8d5c:	549d      	strb	r5, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    8d5e:	3a33      	subs	r2, #51	; 0x33
    8d60:	771a      	strb	r2, [r3, #28]
    8d62:	3a70      	subs	r2, #112	; 0x70
    8d64:	775a      	strb	r2, [r3, #29]
    8d66:	3226      	adds	r2, #38	; 0x26
    8d68:	779a      	strb	r2, [r3, #30]
    8d6a:	328d      	adds	r2, #141	; 0x8d
    8d6c:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    8d6e:	3a12      	subs	r2, #18
    8d70:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    8d72:	352e      	adds	r5, #46	; 0x2e
    8d74:	3a01      	subs	r2, #1
    8d76:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    8d78:	3a19      	subs	r2, #25
    8d7a:	3d0c      	subs	r5, #12
    8d7c:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    8d7e:	3501      	adds	r5, #1
    8d80:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    8d82:	359c      	adds	r5, #156	; 0x9c
    8d84:	35ff      	adds	r5, #255	; 0xff
    8d86:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    8d88:	3429      	adds	r4, #41	; 0x29
    8d8a:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 10;
    8d8c:	3c22      	subs	r4, #34	; 0x22
    8d8e:	3226      	adds	r2, #38	; 0x26
    8d90:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_IN;
    8d92:	3414      	adds	r4, #20
    8d94:	3a05      	subs	r2, #5
    8d96:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    8d98:	4a40      	ldr	r2, [pc, #256]	; (8e9c <LORAReg_InitIN+0x1d4>)
    8d9a:	7815      	ldrb	r5, [r2, #0]
    8d9c:	341e      	adds	r4, #30
    8d9e:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    8da0:	2500      	movs	r5, #0
    8da2:	3c04      	subs	r4, #4
    8da4:	551d      	strb	r5, [r3, r4]
    8da6:	3401      	adds	r4, #1
    8da8:	551d      	strb	r5, [r3, r4]
    8daa:	3401      	adds	r4, #1
    8dac:	551d      	strb	r5, [r3, r4]
    8dae:	3401      	adds	r4, #1
    8db0:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    8db2:	7854      	ldrb	r4, [r2, #1]
    8db4:	223d      	movs	r2, #61	; 0x3d
    8db6:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    8db8:	3205      	adds	r2, #5
    8dba:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    8dbc:	001a      	movs	r2, r3
    8dbe:	323e      	adds	r2, #62	; 0x3e
    8dc0:	7011      	strb	r1, [r2, #0]
    8dc2:	7051      	strb	r1, [r2, #1]
    8dc4:	7091      	strb	r1, [r2, #2]
    8dc6:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    8dc8:	222e      	movs	r2, #46	; 0x2e
    8dca:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    8dcc:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    8dce:	280f      	cmp	r0, #15
    8dd0:	d008      	beq.n	8de4 <LORAReg_InitIN+0x11c>
    LORAREG_InitGetAttrFnPtrsIN();
    8dd2:	4b33      	ldr	r3, [pc, #204]	; (8ea0 <LORAReg_InitIN+0x1d8>)
    8dd4:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    8dd6:	4b33      	ldr	r3, [pc, #204]	; (8ea4 <LORAReg_InitIN+0x1dc>)
    8dd8:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    8dda:	4b33      	ldr	r3, [pc, #204]	; (8ea8 <LORAReg_InitIN+0x1e0>)
    8ddc:	4798      	blx	r3
}
    8dde:	0020      	movs	r0, r4
    8de0:	b007      	add	sp, #28
    8de2:	bd30      	pop	{r4, r5, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    8de4:	001c      	movs	r4, r3
    8de6:	0018      	movs	r0, r3
    8de8:	3083      	adds	r0, #131	; 0x83
    8dea:	3a28      	subs	r2, #40	; 0x28
    8dec:	492f      	ldr	r1, [pc, #188]	; (8eac <LORAReg_InitIN+0x1e4>)
    8dee:	4d30      	ldr	r5, [pc, #192]	; (8eb0 <LORAReg_InitIN+0x1e8>)
    8df0:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    8df2:	0020      	movs	r0, r4
    8df4:	30a3      	adds	r0, #163	; 0xa3
    8df6:	2224      	movs	r2, #36	; 0x24
    8df8:	492e      	ldr	r1, [pc, #184]	; (8eb4 <LORAReg_InitIN+0x1ec>)
    8dfa:	47a8      	blx	r5
    8dfc:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    8dfe:	4926      	ldr	r1, [pc, #152]	; (8e98 <LORAReg_InitIN+0x1d0>)
    8e00:	24ff      	movs	r4, #255	; 0xff
    8e02:	790b      	ldrb	r3, [r1, #4]
    8e04:	794a      	ldrb	r2, [r1, #5]
    8e06:	0212      	lsls	r2, r2, #8
    8e08:	431a      	orrs	r2, r3
    8e0a:	798b      	ldrb	r3, [r1, #6]
    8e0c:	041b      	lsls	r3, r3, #16
    8e0e:	431a      	orrs	r2, r3
    8e10:	79cb      	ldrb	r3, [r1, #7]
    8e12:	061b      	lsls	r3, r3, #24
    8e14:	4313      	orrs	r3, r2
    8e16:	181b      	adds	r3, r3, r0
    8e18:	705c      	strb	r4, [r3, #1]
    8e1a:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    8e1c:	2820      	cmp	r0, #32
    8e1e:	d1f0      	bne.n	8e02 <LORAReg_InitIN+0x13a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_IN;
    8e20:	4c1d      	ldr	r4, [pc, #116]	; (8e98 <LORAReg_InitIN+0x1d0>)
    8e22:	221e      	movs	r2, #30
    8e24:	23c2      	movs	r3, #194	; 0xc2
    8e26:	33ff      	adds	r3, #255	; 0xff
    8e28:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    8e2a:	7820      	ldrb	r0, [r4, #0]
    8e2c:	7863      	ldrb	r3, [r4, #1]
    8e2e:	021b      	lsls	r3, r3, #8
    8e30:	4303      	orrs	r3, r0
    8e32:	78a0      	ldrb	r0, [r4, #2]
    8e34:	0400      	lsls	r0, r0, #16
    8e36:	4303      	orrs	r3, r0
    8e38:	78e0      	ldrb	r0, [r4, #3]
    8e3a:	0600      	lsls	r0, r0, #24
    8e3c:	4318      	orrs	r0, r3
    8e3e:	3222      	adds	r2, #34	; 0x22
    8e40:	491d      	ldr	r1, [pc, #116]	; (8eb8 <LORAReg_InitIN+0x1f0>)
    8e42:	4b1b      	ldr	r3, [pc, #108]	; (8eb0 <LORAReg_InitIN+0x1e8>)
    8e44:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    8e46:	2306      	movs	r3, #6
    8e48:	2106      	movs	r1, #6
    8e4a:	4a1c      	ldr	r2, [pc, #112]	; (8ebc <LORAReg_InitIN+0x1f4>)
    8e4c:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    8e4e:	2100      	movs	r1, #0
    8e50:	4a1b      	ldr	r2, [pc, #108]	; (8ec0 <LORAReg_InitIN+0x1f8>)
    8e52:	54a1      	strb	r1, [r4, r2]
    8e54:	18a2      	adds	r2, r4, r2
    8e56:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    8e58:	3101      	adds	r1, #1
    8e5a:	2284      	movs	r2, #132	; 0x84
    8e5c:	0092      	lsls	r2, r2, #2
    8e5e:	54a1      	strb	r1, [r4, r2]
    8e60:	18a2      	adds	r2, r4, r2
    8e62:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    8e64:	2200      	movs	r2, #0
    8e66:	4b17      	ldr	r3, [pc, #92]	; (8ec4 <LORAReg_InitIN+0x1fc>)
    8e68:	54e2      	strb	r2, [r4, r3]
    8e6a:	18e3      	adds	r3, r4, r3
    8e6c:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    8e6e:	2383      	movs	r3, #131	; 0x83
    8e70:	009b      	lsls	r3, r3, #2
    8e72:	54e2      	strb	r2, [r4, r3]
    8e74:	469c      	mov	ip, r3
    8e76:	4464      	add	r4, ip
    8e78:	2300      	movs	r3, #0
    8e7a:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    8e7c:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    8e7e:	3202      	adds	r2, #2
    8e80:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    8e82:	4a11      	ldr	r2, [pc, #68]	; (8ec8 <LORAReg_InitIN+0x200>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    8e84:	9200      	str	r2, [sp, #0]
    8e86:	4911      	ldr	r1, [pc, #68]	; (8ecc <LORAReg_InitIN+0x204>)
    8e88:	9a03      	ldr	r2, [sp, #12]
    8e8a:	4b11      	ldr	r3, [pc, #68]	; (8ed0 <LORAReg_InitIN+0x208>)
    8e8c:	2006      	movs	r0, #6
    8e8e:	4c11      	ldr	r4, [pc, #68]	; (8ed4 <LORAReg_InitIN+0x20c>)
    8e90:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8e92:	2408      	movs	r4, #8
    8e94:	e79d      	b.n	8dd2 <LORAReg_InitIN+0x10a>
    8e96:	46c0      	nop			; (mov r8, r8)
    8e98:	200024d0 	.word	0x200024d0
    8e9c:	200024cc 	.word	0x200024cc
    8ea0:	0000cef9 	.word	0x0000cef9
    8ea4:	0000d47d 	.word	0x0000d47d
    8ea8:	0000d741 	.word	0x0000d741
    8eac:	0001fecc 	.word	0x0001fecc
    8eb0:	00019d1d 	.word	0x00019d1d
    8eb4:	0001fea8 	.word	0x0001fea8
    8eb8:	0001fed4 	.word	0x0001fed4
    8ebc:	0000020b 	.word	0x0000020b
    8ec0:	0000020e 	.word	0x0000020e
    8ec4:	00000212 	.word	0x00000212
    8ec8:	00008cc5 	.word	0x00008cc5
    8ecc:	200022bc 	.word	0x200022bc
    8ed0:	0001ff14 	.word	0x0001ff14
    8ed4:	0000e355 	.word	0x0000e355

00008ed8 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    8ed8:	4770      	bx	lr
	...

00008edc <LORAReg_InitJP>:
{
    8edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ede:	46c6      	mov	lr, r8
    8ee0:	b500      	push	{lr}
    8ee2:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    8ee4:	4b97      	ldr	r3, [pc, #604]	; (9144 <LORAReg_InitJP+0x268>)
    8ee6:	2103      	movs	r1, #3
    8ee8:	2226      	movs	r2, #38	; 0x26
    8eea:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    8eec:	2510      	movs	r5, #16
    8eee:	3204      	adds	r2, #4
    8ef0:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    8ef2:	3901      	subs	r1, #1
    8ef4:	3a01      	subs	r2, #1
    8ef6:	5499      	strb	r1, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    8ef8:	2401      	movs	r4, #1
    8efa:	3a02      	subs	r2, #2
    8efc:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    8efe:	001a      	movs	r2, r3
    8f00:	3283      	adds	r2, #131	; 0x83
    8f02:	2400      	movs	r4, #0
    8f04:	46a0      	mov	r8, r4
    8f06:	711a      	strb	r2, [r3, #4]
    8f08:	0a16      	lsrs	r6, r2, #8
    8f0a:	715e      	strb	r6, [r3, #5]
    8f0c:	0c16      	lsrs	r6, r2, #16
    8f0e:	719e      	strb	r6, [r3, #6]
    8f10:	0e12      	lsrs	r2, r2, #24
    8f12:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    8f14:	001a      	movs	r2, r3
    8f16:	3243      	adds	r2, #67	; 0x43
    8f18:	701a      	strb	r2, [r3, #0]
    8f1a:	0a16      	lsrs	r6, r2, #8
    8f1c:	705e      	strb	r6, [r3, #1]
    8f1e:	0c16      	lsrs	r6, r2, #16
    8f20:	709e      	strb	r6, [r3, #2]
    8f22:	0e12      	lsrs	r2, r2, #24
    8f24:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    8f26:	001a      	movs	r2, r3
    8f28:	32c4      	adds	r2, #196	; 0xc4
    8f2a:	32ff      	adds	r2, #255	; 0xff
    8f2c:	731a      	strb	r2, [r3, #12]
    8f2e:	0a16      	lsrs	r6, r2, #8
    8f30:	735e      	strb	r6, [r3, #13]
    8f32:	0c16      	lsrs	r6, r2, #16
    8f34:	739e      	strb	r6, [r3, #14]
    8f36:	0e12      	lsrs	r2, r2, #24
    8f38:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    8f3a:	001a      	movs	r2, r3
    8f3c:	32a3      	adds	r2, #163	; 0xa3
    8f3e:	721a      	strb	r2, [r3, #8]
    8f40:	0a16      	lsrs	r6, r2, #8
    8f42:	725e      	strb	r6, [r3, #9]
    8f44:	0c16      	lsrs	r6, r2, #16
    8f46:	729e      	strb	r6, [r3, #10]
    8f48:	0e12      	lsrs	r2, r2, #24
    8f4a:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    8f4c:	001a      	movs	r2, r3
    8f4e:	3264      	adds	r2, #100	; 0x64
    8f50:	32ff      	adds	r2, #255	; 0xff
    8f52:	741a      	strb	r2, [r3, #16]
    8f54:	0a16      	lsrs	r6, r2, #8
    8f56:	745e      	strb	r6, [r3, #17]
    8f58:	0c16      	lsrs	r6, r2, #16
    8f5a:	749e      	strb	r6, [r3, #18]
    8f5c:	0e12      	lsrs	r2, r2, #24
    8f5e:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    8f60:	001a      	movs	r2, r3
    8f62:	3234      	adds	r2, #52	; 0x34
    8f64:	751a      	strb	r2, [r3, #20]
    8f66:	0a16      	lsrs	r6, r2, #8
    8f68:	755e      	strb	r6, [r3, #21]
    8f6a:	0c16      	lsrs	r6, r2, #16
    8f6c:	759e      	strb	r6, [r3, #22]
    8f6e:	0e12      	lsrs	r2, r2, #24
    8f70:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    8f72:	001a      	movs	r2, r3
    8f74:	323d      	adds	r2, #61	; 0x3d
    8f76:	761a      	strb	r2, [r3, #24]
    8f78:	0a16      	lsrs	r6, r2, #8
    8f7a:	765e      	strb	r6, [r3, #25]
    8f7c:	0c16      	lsrs	r6, r2, #16
    8f7e:	769e      	strb	r6, [r3, #26]
    8f80:	0e12      	lsrs	r2, r2, #24
    8f82:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    8f84:	2222      	movs	r2, #34	; 0x22
    8f86:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    8f88:	3201      	adds	r2, #1
    8f8a:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    8f8c:	2200      	movs	r2, #0
    8f8e:	771a      	strb	r2, [r3, #28]
    8f90:	3a16      	subs	r2, #22
    8f92:	775a      	strb	r2, [r3, #29]
    8f94:	321c      	adds	r2, #28
    8f96:	779a      	strb	r2, [r3, #30]
    8f98:	3231      	adds	r2, #49	; 0x31
    8f9a:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    8f9c:	3a16      	subs	r2, #22
    8f9e:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    8fa0:	2636      	movs	r6, #54	; 0x36
    8fa2:	3a01      	subs	r2, #1
    8fa4:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    8fa6:	3a19      	subs	r2, #25
    8fa8:	3e12      	subs	r6, #18
    8faa:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    8fac:	3601      	adds	r6, #1
    8fae:	559c      	strb	r4, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    8fb0:	3e20      	subs	r6, #32
    8fb2:	27be      	movs	r7, #190	; 0xbe
    8fb4:	37ff      	adds	r7, #255	; 0xff
    8fb6:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    8fb8:	3f0e      	subs	r7, #14
    8fba:	3fff      	subs	r7, #255	; 0xff
    8fbc:	46bc      	mov	ip, r7
    8fbe:	370f      	adds	r7, #15
    8fc0:	37ff      	adds	r7, #255	; 0xff
    8fc2:	4664      	mov	r4, ip
    8fc4:	55dc      	strb	r4, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    8fc6:	27c0      	movs	r7, #192	; 0xc0
    8fc8:	37ff      	adds	r7, #255	; 0xff
    8fca:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    8fcc:	36bc      	adds	r6, #188	; 0xbc
    8fce:	36ff      	adds	r6, #255	; 0xff
    8fd0:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    8fd2:	312a      	adds	r1, #42	; 0x2a
    8fd4:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    8fd6:	3101      	adds	r1, #1
    8fd8:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwr = DEFAULT_EIRP_JP;
    8fda:	3221      	adds	r2, #33	; 0x21
    8fdc:	549d      	strb	r5, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    8fde:	4a5a      	ldr	r2, [pc, #360]	; (9148 <LORAReg_InitJP+0x26c>)
    8fe0:	7815      	ldrb	r5, [r2, #0]
    8fe2:	3180      	adds	r1, #128	; 0x80
    8fe4:	31ff      	adds	r1, #255	; 0xff
    8fe6:	545d      	strb	r5, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    8fe8:	7855      	ldrb	r5, [r2, #1]
    8fea:	2168      	movs	r1, #104	; 0x68
    8fec:	31ff      	adds	r1, #255	; 0xff
    8fee:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[2];
    8ff0:	7895      	ldrb	r5, [r2, #2]
    8ff2:	392b      	subs	r1, #43	; 0x2b
    8ff4:	39ff      	subs	r1, #255	; 0xff
    8ff6:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[3];
    8ff8:	78d1      	ldrb	r1, [r2, #3]
    8ffa:	223c      	movs	r2, #60	; 0x3c
    8ffc:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    8ffe:	2100      	movs	r1, #0
    9000:	3a04      	subs	r2, #4
    9002:	5499      	strb	r1, [r3, r2]
    9004:	3201      	adds	r2, #1
    9006:	5499      	strb	r1, [r3, r2]
    9008:	3201      	adds	r2, #1
    900a:	5499      	strb	r1, [r3, r2]
    900c:	3201      	adds	r2, #1
    900e:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    9010:	3207      	adds	r2, #7
    9012:	4641      	mov	r1, r8
    9014:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    9016:	001a      	movs	r2, r3
    9018:	323e      	adds	r2, #62	; 0x3e
    901a:	2100      	movs	r1, #0
    901c:	7011      	strb	r1, [r2, #0]
    901e:	7051      	strb	r1, [r2, #1]
    9020:	7091      	strb	r1, [r2, #2]
    9022:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    9024:	31c3      	adds	r1, #195	; 0xc3
    9026:	31ff      	adds	r1, #255	; 0xff
    9028:	5c5a      	ldrb	r2, [r3, r1]
    902a:	2401      	movs	r4, #1
    902c:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    902e:	2402      	movs	r4, #2
    9030:	4322      	orrs	r2, r4
    9032:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    9034:	222e      	movs	r2, #46	; 0x2e
    9036:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    9038:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    903a:	2805      	cmp	r0, #5
    903c:	d00a      	beq.n	9054 <LORAReg_InitJP+0x178>
    LORAREG_InitGetAttrFnPtrsJP();
    903e:	4b43      	ldr	r3, [pc, #268]	; (914c <LORAReg_InitJP+0x270>)
    9040:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    9042:	4b43      	ldr	r3, [pc, #268]	; (9150 <LORAReg_InitJP+0x274>)
    9044:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    9046:	4b43      	ldr	r3, [pc, #268]	; (9154 <LORAReg_InitJP+0x278>)
    9048:	4798      	blx	r3
}
    904a:	0020      	movs	r0, r4
    904c:	b006      	add	sp, #24
    904e:	bc04      	pop	{r2}
    9050:	4690      	mov	r8, r2
    9052:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    9054:	001c      	movs	r4, r3
    9056:	0018      	movs	r0, r3
    9058:	3083      	adds	r0, #131	; 0x83
    905a:	3a2a      	subs	r2, #42	; 0x2a
    905c:	493e      	ldr	r1, [pc, #248]	; (9158 <LORAReg_InitJP+0x27c>)
    905e:	4d3f      	ldr	r5, [pc, #252]	; (915c <LORAReg_InitJP+0x280>)
    9060:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    9062:	0020      	movs	r0, r4
    9064:	30a3      	adds	r0, #163	; 0xa3
    9066:	2218      	movs	r2, #24
    9068:	493d      	ldr	r1, [pc, #244]	; (9160 <LORAReg_InitJP+0x284>)
    906a:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    906c:	0020      	movs	r0, r4
    906e:	30c4      	adds	r0, #196	; 0xc4
    9070:	30ff      	adds	r0, #255	; 0xff
    9072:	2218      	movs	r2, #24
    9074:	493b      	ldr	r1, [pc, #236]	; (9164 <LORAReg_InitJP+0x288>)
    9076:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    9078:	0020      	movs	r0, r4
    907a:	30ae      	adds	r0, #174	; 0xae
    907c:	30ff      	adds	r0, #255	; 0xff
    907e:	2204      	movs	r2, #4
    9080:	4939      	ldr	r1, [pc, #228]	; (9168 <LORAReg_InitJP+0x28c>)
    9082:	47a8      	blx	r5
    9084:	2302      	movs	r3, #2
    9086:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9088:	492e      	ldr	r1, [pc, #184]	; (9144 <LORAReg_InitJP+0x268>)
    908a:	3fc0      	subs	r7, #192	; 0xc0
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    908c:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    908e:	3e97      	subs	r6, #151	; 0x97
    9090:	3eff      	subs	r6, #255	; 0xff
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    9092:	7908      	ldrb	r0, [r1, #4]
    9094:	794c      	ldrb	r4, [r1, #5]
    9096:	0224      	lsls	r4, r4, #8
    9098:	4304      	orrs	r4, r0
    909a:	7988      	ldrb	r0, [r1, #6]
    909c:	0400      	lsls	r0, r0, #16
    909e:	4304      	orrs	r4, r0
    90a0:	79c8      	ldrb	r0, [r1, #7]
    90a2:	0600      	lsls	r0, r0, #24
    90a4:	4320      	orrs	r0, r4
    90a6:	0054      	lsls	r4, r2, #1
    90a8:	1820      	adds	r0, r4, r0
    90aa:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    90ac:	3358      	adds	r3, #88	; 0x58
    90ae:	009b      	lsls	r3, r3, #2
    90b0:	18cb      	adds	r3, r1, r3
    90b2:	721d      	strb	r5, [r3, #8]
    90b4:	725d      	strb	r5, [r3, #9]
    90b6:	729d      	strb	r5, [r3, #10]
    90b8:	72dd      	strb	r5, [r3, #11]
    for (i = 2; i < RegParams.maxChannels; i++)
    90ba:	3201      	adds	r2, #1
    90bc:	b2d2      	uxtb	r2, r2
    90be:	0013      	movs	r3, r2
    90c0:	5788      	ldrsb	r0, [r1, r6]
    90c2:	4282      	cmp	r2, r0
    90c4:	dbe5      	blt.n	9092 <LORAReg_InitJP+0x1b6>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    90c6:	4c1f      	ldr	r4, [pc, #124]	; (9144 <LORAReg_InitJP+0x268>)
    90c8:	22ff      	movs	r2, #255	; 0xff
    90ca:	232f      	movs	r3, #47	; 0x2f
    90cc:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    90ce:	3aef      	subs	r2, #239	; 0xef
    90d0:	23c2      	movs	r3, #194	; 0xc2
    90d2:	33ff      	adds	r3, #255	; 0xff
    90d4:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    90d6:	7820      	ldrb	r0, [r4, #0]
    90d8:	7863      	ldrb	r3, [r4, #1]
    90da:	021b      	lsls	r3, r3, #8
    90dc:	4303      	orrs	r3, r0
    90de:	78a0      	ldrb	r0, [r4, #2]
    90e0:	0400      	lsls	r0, r0, #16
    90e2:	4303      	orrs	r3, r0
    90e4:	78e0      	ldrb	r0, [r4, #3]
    90e6:	0600      	lsls	r0, r0, #24
    90e8:	4318      	orrs	r0, r3
    90ea:	3230      	adds	r2, #48	; 0x30
    90ec:	491f      	ldr	r1, [pc, #124]	; (916c <LORAReg_InitJP+0x290>)
    90ee:	4b1b      	ldr	r3, [pc, #108]	; (915c <LORAReg_InitJP+0x280>)
    90f0:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    90f2:	2307      	movs	r3, #7
    90f4:	2107      	movs	r1, #7
    90f6:	4a1e      	ldr	r2, [pc, #120]	; (9170 <LORAReg_InitJP+0x294>)
    90f8:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    90fa:	2100      	movs	r1, #0
    90fc:	4a1d      	ldr	r2, [pc, #116]	; (9174 <LORAReg_InitJP+0x298>)
    90fe:	54a1      	strb	r1, [r4, r2]
    9100:	18a2      	adds	r2, r4, r2
    9102:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    9104:	3101      	adds	r1, #1
    9106:	2284      	movs	r2, #132	; 0x84
    9108:	0092      	lsls	r2, r2, #2
    910a:	54a1      	strb	r1, [r4, r2]
    910c:	18a2      	adds	r2, r4, r2
    910e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    9110:	2200      	movs	r2, #0
    9112:	4b19      	ldr	r3, [pc, #100]	; (9178 <LORAReg_InitJP+0x29c>)
    9114:	54e2      	strb	r2, [r4, r3]
    9116:	18e3      	adds	r3, r4, r3
    9118:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    911a:	2383      	movs	r3, #131	; 0x83
    911c:	009b      	lsls	r3, r3, #2
    911e:	54e2      	strb	r2, [r4, r3]
    9120:	469c      	mov	ip, r3
    9122:	4464      	add	r4, ip
    9124:	2300      	movs	r3, #0
    9126:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    9128:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    912a:	3202      	adds	r2, #2
    912c:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    912e:	4a13      	ldr	r2, [pc, #76]	; (917c <LORAReg_InitJP+0x2a0>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    9130:	9200      	str	r2, [sp, #0]
    9132:	4913      	ldr	r1, [pc, #76]	; (9180 <LORAReg_InitJP+0x2a4>)
    9134:	9a03      	ldr	r2, [sp, #12]
    9136:	4b13      	ldr	r3, [pc, #76]	; (9184 <LORAReg_InitJP+0x2a8>)
    9138:	2007      	movs	r0, #7
    913a:	4c13      	ldr	r4, [pc, #76]	; (9188 <LORAReg_InitJP+0x2ac>)
    913c:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    913e:	2408      	movs	r4, #8
    9140:	e77d      	b.n	903e <LORAReg_InitJP+0x162>
    9142:	46c0      	nop			; (mov r8, r8)
    9144:	200024d0 	.word	0x200024d0
    9148:	200024cc 	.word	0x200024cc
    914c:	0000d02d 	.word	0x0000d02d
    9150:	0000d4e5 	.word	0x0000d4e5
    9154:	0000d7a5 	.word	0x0000d7a5
    9158:	0001ff3c 	.word	0x0001ff3c
    915c:	00019d1d 	.word	0x00019d1d
    9160:	0001ff24 	.word	0x0001ff24
    9164:	0001ff84 	.word	0x0001ff84
    9168:	0001ff80 	.word	0x0001ff80
    916c:	0001ff40 	.word	0x0001ff40
    9170:	0000020b 	.word	0x0000020b
    9174:	0000020e 	.word	0x0000020e
    9178:	00000212 	.word	0x00000212
    917c:	00008ed9 	.word	0x00008ed9
    9180:	200022c0 	.word	0x200022c0
    9184:	0001ff9c 	.word	0x0001ff9c
    9188:	0000e355 	.word	0x0000e355

0000918c <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    918c:	4770      	bx	lr
	...

00009190 <LORAReg_InitKR>:
{
    9190:	b5f0      	push	{r4, r5, r6, r7, lr}
    9192:	46de      	mov	lr, fp
    9194:	4657      	mov	r7, sl
    9196:	464e      	mov	r6, r9
    9198:	4645      	mov	r5, r8
    919a:	b5e0      	push	{r5, r6, r7, lr}
    919c:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    919e:	4ba9      	ldr	r3, [pc, #676]	; (9444 <LORAReg_InitKR+0x2b4>)
    91a0:	2403      	movs	r4, #3
    91a2:	2226      	movs	r2, #38	; 0x26
    91a4:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    91a6:	2110      	movs	r1, #16
    91a8:	3204      	adds	r2, #4
    91aa:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    91ac:	3a29      	subs	r2, #41	; 0x29
    91ae:	3119      	adds	r1, #25
    91b0:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    91b2:	3902      	subs	r1, #2
    91b4:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    91b6:	001a      	movs	r2, r3
    91b8:	3283      	adds	r2, #131	; 0x83
    91ba:	2100      	movs	r1, #0
    91bc:	711a      	strb	r2, [r3, #4]
    91be:	0a15      	lsrs	r5, r2, #8
    91c0:	715d      	strb	r5, [r3, #5]
    91c2:	0c15      	lsrs	r5, r2, #16
    91c4:	719d      	strb	r5, [r3, #6]
    91c6:	0e12      	lsrs	r2, r2, #24
    91c8:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    91ca:	001a      	movs	r2, r3
    91cc:	3243      	adds	r2, #67	; 0x43
    91ce:	701a      	strb	r2, [r3, #0]
    91d0:	0a15      	lsrs	r5, r2, #8
    91d2:	705d      	strb	r5, [r3, #1]
    91d4:	0c15      	lsrs	r5, r2, #16
    91d6:	709d      	strb	r5, [r3, #2]
    91d8:	0e12      	lsrs	r2, r2, #24
    91da:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    91dc:	001a      	movs	r2, r3
    91de:	32a3      	adds	r2, #163	; 0xa3
    91e0:	721a      	strb	r2, [r3, #8]
    91e2:	0a15      	lsrs	r5, r2, #8
    91e4:	725d      	strb	r5, [r3, #9]
    91e6:	0c15      	lsrs	r5, r2, #16
    91e8:	729d      	strb	r5, [r3, #10]
    91ea:	0e12      	lsrs	r2, r2, #24
    91ec:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    91ee:	001a      	movs	r2, r3
    91f0:	3264      	adds	r2, #100	; 0x64
    91f2:	32ff      	adds	r2, #255	; 0xff
    91f4:	741a      	strb	r2, [r3, #16]
    91f6:	0a15      	lsrs	r5, r2, #8
    91f8:	745d      	strb	r5, [r3, #17]
    91fa:	0c15      	lsrs	r5, r2, #16
    91fc:	749d      	strb	r5, [r3, #18]
    91fe:	0e12      	lsrs	r2, r2, #24
    9200:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    9202:	001a      	movs	r2, r3
    9204:	3234      	adds	r2, #52	; 0x34
    9206:	751a      	strb	r2, [r3, #20]
    9208:	0a15      	lsrs	r5, r2, #8
    920a:	755d      	strb	r5, [r3, #21]
    920c:	0c15      	lsrs	r5, r2, #16
    920e:	759d      	strb	r5, [r3, #22]
    9210:	0e12      	lsrs	r2, r2, #24
    9212:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    9214:	001a      	movs	r2, r3
    9216:	323d      	adds	r2, #61	; 0x3d
    9218:	761a      	strb	r2, [r3, #24]
    921a:	0a15      	lsrs	r5, r2, #8
    921c:	765d      	strb	r5, [r3, #25]
    921e:	0c15      	lsrs	r5, r2, #16
    9220:	769d      	strb	r5, [r3, #26]
    9222:	0e12      	lsrs	r2, r2, #24
    9224:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    9226:	2222      	movs	r2, #34	; 0x22
    9228:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    922a:	3201      	adds	r2, #1
    922c:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    922e:	3a43      	subs	r2, #67	; 0x43
    9230:	771a      	strb	r2, [r3, #28]
    9232:	3233      	adds	r2, #51	; 0x33
    9234:	775a      	strb	r2, [r3, #29]
    9236:	3a20      	subs	r2, #32
    9238:	779a      	strb	r2, [r3, #30]
    923a:	3243      	adds	r2, #67	; 0x43
    923c:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    923e:	3a15      	subs	r2, #21
    9240:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    9242:	2534      	movs	r5, #52	; 0x34
    9244:	3a01      	subs	r2, #1
    9246:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    9248:	3a1b      	subs	r2, #27
    924a:	3d10      	subs	r5, #16
    924c:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    924e:	3501      	adds	r5, #1
    9250:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    9252:	3d1b      	subs	r5, #27
    9254:	26be      	movs	r6, #190	; 0xbe
    9256:	36ff      	adds	r6, #255	; 0xff
    9258:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    925a:	27bf      	movs	r7, #191	; 0xbf
    925c:	3601      	adds	r6, #1
    925e:	559f      	strb	r7, [r3, r6]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    9260:	26c0      	movs	r6, #192	; 0xc0
    9262:	36ff      	adds	r6, #255	; 0xff
    9264:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    9266:	35b7      	adds	r5, #183	; 0xb7
    9268:	35ff      	adds	r5, #255	; 0xff
    926a:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 5;
    926c:	3429      	adds	r4, #41	; 0x29
    926e:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 7;
    9270:	3c25      	subs	r4, #37	; 0x25
    9272:	3228      	adds	r2, #40	; 0x28
    9274:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = DEFAULT_EIRP_KR_HF;
    9276:	3407      	adds	r4, #7
    9278:	3a05      	subs	r2, #5
    927a:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    927c:	4a72      	ldr	r2, [pc, #456]	; (9448 <LORAReg_InitKR+0x2b8>)
    927e:	7815      	ldrb	r5, [r2, #0]
    9280:	349f      	adds	r4, #159	; 0x9f
    9282:	34ff      	adds	r4, #255	; 0xff
    9284:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    9286:	7855      	ldrb	r5, [r2, #1]
    9288:	3c70      	subs	r4, #112	; 0x70
    928a:	3cff      	subs	r4, #255	; 0xff
    928c:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    928e:	7894      	ldrb	r4, [r2, #2]
    9290:	223c      	movs	r2, #60	; 0x3c
    9292:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    9294:	2400      	movs	r4, #0
    9296:	3a04      	subs	r2, #4
    9298:	549c      	strb	r4, [r3, r2]
    929a:	3201      	adds	r2, #1
    929c:	549c      	strb	r4, [r3, r2]
    929e:	3201      	adds	r2, #1
    92a0:	549c      	strb	r4, [r3, r2]
    92a2:	3201      	adds	r2, #1
    92a4:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    92a6:	3207      	adds	r2, #7
    92a8:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    92aa:	001a      	movs	r2, r3
    92ac:	323e      	adds	r2, #62	; 0x3e
    92ae:	7011      	strb	r1, [r2, #0]
    92b0:	7051      	strb	r1, [r2, #1]
    92b2:	7091      	strb	r1, [r2, #2]
    92b4:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    92b6:	222e      	movs	r2, #46	; 0x2e
    92b8:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    92ba:	34c6      	adds	r4, #198	; 0xc6
	if(ismBand == ISM_KR920)
    92bc:	2804      	cmp	r0, #4
    92be:	d00d      	beq.n	92dc <LORAReg_InitKR+0x14c>
    LORAREG_InitGetAttrFnPtrsKR();
    92c0:	4b62      	ldr	r3, [pc, #392]	; (944c <LORAReg_InitKR+0x2bc>)
    92c2:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    92c4:	4b62      	ldr	r3, [pc, #392]	; (9450 <LORAReg_InitKR+0x2c0>)
    92c6:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    92c8:	4b62      	ldr	r3, [pc, #392]	; (9454 <LORAReg_InitKR+0x2c4>)
    92ca:	4798      	blx	r3
}
    92cc:	0020      	movs	r0, r4
    92ce:	b007      	add	sp, #28
    92d0:	bc3c      	pop	{r2, r3, r4, r5}
    92d2:	4690      	mov	r8, r2
    92d4:	4699      	mov	r9, r3
    92d6:	46a2      	mov	sl, r4
    92d8:	46ab      	mov	fp, r5
    92da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    92dc:	001c      	movs	r4, r3
    92de:	0018      	movs	r0, r3
    92e0:	3083      	adds	r0, #131	; 0x83
    92e2:	3a28      	subs	r2, #40	; 0x28
    92e4:	495c      	ldr	r1, [pc, #368]	; (9458 <LORAReg_InitKR+0x2c8>)
    92e6:	4d5d      	ldr	r5, [pc, #372]	; (945c <LORAReg_InitKR+0x2cc>)
    92e8:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    92ea:	0020      	movs	r0, r4
    92ec:	30a3      	adds	r0, #163	; 0xa3
    92ee:	2224      	movs	r2, #36	; 0x24
    92f0:	495b      	ldr	r1, [pc, #364]	; (9460 <LORAReg_InitKR+0x2d0>)
    92f2:	47a8      	blx	r5
    92f4:	2103      	movs	r1, #3
    92f6:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    92f8:	4b52      	ldr	r3, [pc, #328]	; (9444 <LORAReg_InitKR+0x2b4>)
    92fa:	22ff      	movs	r2, #255	; 0xff
    92fc:	4692      	mov	sl, r2
		RegParams.pChParams[i].status = DISABLED;
    92fe:	2400      	movs	r4, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    9300:	22c2      	movs	r2, #194	; 0xc2
    9302:	32ff      	adds	r2, #255	; 0xff
    9304:	4694      	mov	ip, r2
    9306:	4657      	mov	r7, sl
    for (i = 3; i < RegParams.maxChannels; i++)
    9308:	3a98      	subs	r2, #152	; 0x98
    930a:	3aff      	subs	r2, #255	; 0xff
    930c:	4693      	mov	fp, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    930e:	0042      	lsls	r2, r0, #1
    9310:	791e      	ldrb	r6, [r3, #4]
    9312:	46b0      	mov	r8, r6
    9314:	795e      	ldrb	r6, [r3, #5]
    9316:	0236      	lsls	r6, r6, #8
    9318:	46b1      	mov	r9, r6
    931a:	4646      	mov	r6, r8
    931c:	464d      	mov	r5, r9
    931e:	432e      	orrs	r6, r5
    9320:	799d      	ldrb	r5, [r3, #6]
    9322:	042d      	lsls	r5, r5, #16
    9324:	432e      	orrs	r6, r5
    9326:	79dd      	ldrb	r5, [r3, #7]
    9328:	062d      	lsls	r5, r5, #24
    932a:	432e      	orrs	r6, r5
    932c:	46b0      	mov	r8, r6
    932e:	4490      	add	r8, r2
    9330:	4645      	mov	r5, r8
    9332:	4656      	mov	r6, sl
    9334:	706e      	strb	r6, [r5, #1]
		RegParams.pChParams[i].status = DISABLED;
    9336:	791d      	ldrb	r5, [r3, #4]
    9338:	46a8      	mov	r8, r5
    933a:	795d      	ldrb	r5, [r3, #5]
    933c:	022d      	lsls	r5, r5, #8
    933e:	4646      	mov	r6, r8
    9340:	432e      	orrs	r6, r5
    9342:	799d      	ldrb	r5, [r3, #6]
    9344:	042d      	lsls	r5, r5, #16
    9346:	432e      	orrs	r6, r5
    9348:	79dd      	ldrb	r5, [r3, #7]
    934a:	062d      	lsls	r5, r5, #24
    934c:	432e      	orrs	r6, r5
    934e:	54b4      	strb	r4, [r6, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    9350:	7a1d      	ldrb	r5, [r3, #8]
    9352:	46a8      	mov	r8, r5
    9354:	7a5d      	ldrb	r5, [r3, #9]
    9356:	022d      	lsls	r5, r5, #8
    9358:	4646      	mov	r6, r8
    935a:	432e      	orrs	r6, r5
    935c:	7a9d      	ldrb	r5, [r3, #10]
    935e:	042d      	lsls	r5, r5, #16
    9360:	432e      	orrs	r6, r5
    9362:	7add      	ldrb	r5, [r3, #11]
    9364:	062d      	lsls	r5, r5, #24
    9366:	432e      	orrs	r6, r5
    9368:	46b0      	mov	r8, r6
    936a:	1812      	adds	r2, r2, r0
    936c:	0092      	lsls	r2, r2, #2
    936e:	4442      	add	r2, r8
    9370:	7254      	strb	r4, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    9372:	4662      	mov	r2, ip
    9374:	549f      	strb	r7, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9376:	000a      	movs	r2, r1
    9378:	3258      	adds	r2, #88	; 0x58
    937a:	0092      	lsls	r2, r2, #2
    937c:	189a      	adds	r2, r3, r2
    937e:	7214      	strb	r4, [r2, #8]
    9380:	7254      	strb	r4, [r2, #9]
    9382:	7294      	strb	r4, [r2, #10]
    9384:	72d4      	strb	r4, [r2, #11]
    for (i = 3; i < RegParams.maxChannels; i++)
    9386:	3001      	adds	r0, #1
    9388:	b2c0      	uxtb	r0, r0
    938a:	0001      	movs	r1, r0
    938c:	465a      	mov	r2, fp
    938e:	569a      	ldrsb	r2, [r3, r2]
    9390:	4290      	cmp	r0, r2
    9392:	dbbc      	blt.n	930e <LORAReg_InitKR+0x17e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    9394:	4c2b      	ldr	r4, [pc, #172]	; (9444 <LORAReg_InitKR+0x2b4>)
    9396:	22ff      	movs	r2, #255	; 0xff
    9398:	232f      	movs	r3, #47	; 0x2f
    939a:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    939c:	7820      	ldrb	r0, [r4, #0]
    939e:	7863      	ldrb	r3, [r4, #1]
    93a0:	021b      	lsls	r3, r3, #8
    93a2:	4303      	orrs	r3, r0
    93a4:	78a0      	ldrb	r0, [r4, #2]
    93a6:	0400      	lsls	r0, r0, #16
    93a8:	4303      	orrs	r3, r0
    93aa:	78e0      	ldrb	r0, [r4, #3]
    93ac:	0600      	lsls	r0, r0, #24
    93ae:	4318      	orrs	r0, r3
    93b0:	3acf      	subs	r2, #207	; 0xcf
    93b2:	492c      	ldr	r1, [pc, #176]	; (9464 <LORAReg_InitKR+0x2d4>)
    93b4:	4b29      	ldr	r3, [pc, #164]	; (945c <LORAReg_InitKR+0x2cc>)
    93b6:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    93b8:	2325      	movs	r3, #37	; 0x25
    93ba:	5ce3      	ldrb	r3, [r4, r3]
    93bc:	2b00      	cmp	r3, #0
    93be:	dd18      	ble.n	93f2 <LORAReg_InitKR+0x262>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    93c0:	4a20      	ldr	r2, [pc, #128]	; (9444 <LORAReg_InitKR+0x2b4>)
    93c2:	7811      	ldrb	r1, [r2, #0]
    93c4:	7853      	ldrb	r3, [r2, #1]
    93c6:	021b      	lsls	r3, r3, #8
    93c8:	430b      	orrs	r3, r1
    93ca:	7891      	ldrb	r1, [r2, #2]
    93cc:	0409      	lsls	r1, r1, #16
    93ce:	430b      	orrs	r3, r1
    93d0:	78d1      	ldrb	r1, [r2, #3]
    93d2:	0609      	lsls	r1, r1, #24
    93d4:	4319      	orrs	r1, r3
    93d6:	2300      	movs	r3, #0
    93d8:	2601      	movs	r6, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    93da:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    93dc:	0014      	movs	r4, r2
    93de:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    93e0:	00da      	lsls	r2, r3, #3
    93e2:	188a      	adds	r2, r1, r2
    93e4:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    93e6:	7195      	strb	r5, [r2, #6]
    93e8:	3301      	adds	r3, #1
    93ea:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    93ec:	5c22      	ldrb	r2, [r4, r0]
    93ee:	4293      	cmp	r3, r2
    93f0:	dbf6      	blt.n	93e0 <LORAReg_InitKR+0x250>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    93f2:	4b14      	ldr	r3, [pc, #80]	; (9444 <LORAReg_InitKR+0x2b4>)
    93f4:	2205      	movs	r2, #5
    93f6:	2005      	movs	r0, #5
    93f8:	491b      	ldr	r1, [pc, #108]	; (9468 <LORAReg_InitKR+0x2d8>)
    93fa:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    93fc:	2000      	movs	r0, #0
    93fe:	491b      	ldr	r1, [pc, #108]	; (946c <LORAReg_InitKR+0x2dc>)
    9400:	5458      	strb	r0, [r3, r1]
    9402:	1859      	adds	r1, r3, r1
    9404:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    9406:	3001      	adds	r0, #1
    9408:	2184      	movs	r1, #132	; 0x84
    940a:	0089      	lsls	r1, r1, #2
    940c:	5458      	strb	r0, [r3, r1]
    940e:	1859      	adds	r1, r3, r1
    9410:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    9412:	2100      	movs	r1, #0
    9414:	4a16      	ldr	r2, [pc, #88]	; (9470 <LORAReg_InitKR+0x2e0>)
    9416:	5499      	strb	r1, [r3, r2]
    9418:	189a      	adds	r2, r3, r2
    941a:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    941c:	2283      	movs	r2, #131	; 0x83
    941e:	0092      	lsls	r2, r2, #2
    9420:	5499      	strb	r1, [r3, r2]
    9422:	4694      	mov	ip, r2
    9424:	4463      	add	r3, ip
    9426:	2200      	movs	r2, #0
    9428:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    942a:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    942c:	3202      	adds	r2, #2
    942e:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    9430:	4a10      	ldr	r2, [pc, #64]	; (9474 <LORAReg_InitKR+0x2e4>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    9432:	9200      	str	r2, [sp, #0]
    9434:	4910      	ldr	r1, [pc, #64]	; (9478 <LORAReg_InitKR+0x2e8>)
    9436:	9a03      	ldr	r2, [sp, #12]
    9438:	4b10      	ldr	r3, [pc, #64]	; (947c <LORAReg_InitKR+0x2ec>)
    943a:	3004      	adds	r0, #4
    943c:	4c10      	ldr	r4, [pc, #64]	; (9480 <LORAReg_InitKR+0x2f0>)
    943e:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9440:	2408      	movs	r4, #8
    9442:	e73d      	b.n	92c0 <LORAReg_InitKR+0x130>
    9444:	200024d0 	.word	0x200024d0
    9448:	200024cc 	.word	0x200024cc
    944c:	0000d189 	.word	0x0000d189
    9450:	0000d551 	.word	0x0000d551
    9454:	0000d825 	.word	0x0000d825
    9458:	0001ffd0 	.word	0x0001ffd0
    945c:	00019d1d 	.word	0x00019d1d
    9460:	0001ffac 	.word	0x0001ffac
    9464:	0001ffd8 	.word	0x0001ffd8
    9468:	0000020b 	.word	0x0000020b
    946c:	0000020e 	.word	0x0000020e
    9470:	00000212 	.word	0x00000212
    9474:	0000918d 	.word	0x0000918d
    9478:	200022c4 	.word	0x200022c4
    947c:	00020008 	.word	0x00020008
    9480:	0000e355 	.word	0x0000e355

00009484 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    9484:	4770      	bx	lr
	...

00009488 <LORAReg_InitNA>:
{
    9488:	b5f0      	push	{r4, r5, r6, r7, lr}
    948a:	46de      	mov	lr, fp
    948c:	4657      	mov	r7, sl
    948e:	464e      	mov	r6, r9
    9490:	4645      	mov	r5, r8
    9492:	b5e0      	push	{r5, r6, r7, lr}
    9494:	b089      	sub	sp, #36	; 0x24
    9496:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    9498:	4c7d      	ldr	r4, [pc, #500]	; (9690 <LORAReg_InitNA+0x208>)
    949a:	2702      	movs	r7, #2
    949c:	2302      	movs	r3, #2
    949e:	469b      	mov	fp, r3
    94a0:	2326      	movs	r3, #38	; 0x26
    94a2:	54e7      	strb	r7, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    94a4:	2248      	movs	r2, #72	; 0x48
    94a6:	3304      	adds	r3, #4
    94a8:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    94aa:	3a41      	subs	r2, #65	; 0x41
    94ac:	3b03      	subs	r3, #3
    94ae:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = DEFAULT_EIRP_NA;
    94b0:	3217      	adds	r2, #23
    94b2:	3301      	adds	r3, #1
    94b4:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    94b6:	0023      	movs	r3, r4
    94b8:	33b3      	adds	r3, #179	; 0xb3
    94ba:	0018      	movs	r0, r3
    94bc:	2500      	movs	r5, #0
    94be:	7123      	strb	r3, [r4, #4]
    94c0:	0a1b      	lsrs	r3, r3, #8
    94c2:	7163      	strb	r3, [r4, #5]
    94c4:	0c03      	lsrs	r3, r0, #16
    94c6:	71a3      	strb	r3, [r4, #6]
    94c8:	0e03      	lsrs	r3, r0, #24
    94ca:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    94cc:	0026      	movs	r6, r4
    94ce:	3643      	adds	r6, #67	; 0x43
    94d0:	7026      	strb	r6, [r4, #0]
    94d2:	0a33      	lsrs	r3, r6, #8
    94d4:	7063      	strb	r3, [r4, #1]
    94d6:	0c33      	lsrs	r3, r6, #16
    94d8:	70a3      	strb	r3, [r4, #2]
    94da:	0e33      	lsrs	r3, r6, #24
    94dc:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    94de:	2321      	movs	r3, #33	; 0x21
    94e0:	32e1      	adds	r2, #225	; 0xe1
    94e2:	54e2      	strb	r2, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    94e4:	3add      	subs	r2, #221	; 0xdd
    94e6:	3b17      	subs	r3, #23
    94e8:	54a3      	strb	r3, [r4, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    94ea:	3a1a      	subs	r2, #26
    94ec:	2108      	movs	r1, #8
    94ee:	468c      	mov	ip, r1
    94f0:	2123      	movs	r1, #35	; 0x23
    94f2:	5462      	strb	r2, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    94f4:	3983      	subs	r1, #131	; 0x83
    94f6:	4688      	mov	r8, r1
    94f8:	7721      	strb	r1, [r4, #28]
    94fa:	2170      	movs	r1, #112	; 0x70
    94fc:	7761      	strb	r1, [r4, #29]
    94fe:	4661      	mov	r1, ip
    9500:	77a1      	strb	r1, [r4, #30]
    9502:	2137      	movs	r1, #55	; 0x37
    9504:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    9506:	3917      	subs	r1, #23
    9508:	2338      	movs	r3, #56	; 0x38
    950a:	5463      	strb	r3, [r4, r1]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    950c:	391c      	subs	r1, #28
    950e:	4689      	mov	r9, r1
    9510:	3120      	adds	r1, #32
    9512:	464b      	mov	r3, r9
    9514:	5463      	strb	r3, [r4, r1]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    9516:	2325      	movs	r3, #37	; 0x25
    9518:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    951a:	2354      	movs	r3, #84	; 0x54
    951c:	33ff      	adds	r3, #255	; 0xff
    951e:	311c      	adds	r1, #28
    9520:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    9522:	3301      	adds	r3, #1
    9524:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    9526:	2350      	movs	r3, #80	; 0x50
    9528:	33ff      	adds	r3, #255	; 0xff
    952a:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    952c:	3301      	adds	r3, #1
    952e:	4649      	mov	r1, r9
    9530:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    9532:	2352      	movs	r3, #82	; 0x52
    9534:	33ff      	adds	r3, #255	; 0xff
    9536:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    9538:	3b45      	subs	r3, #69	; 0x45
    953a:	3bff      	subs	r3, #255	; 0xff
    953c:	324b      	adds	r2, #75	; 0x4b
    953e:	32ff      	adds	r2, #255	; 0xff
    9540:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    9542:	2256      	movs	r2, #86	; 0x56
    9544:	32ff      	adds	r2, #255	; 0xff
    9546:	230a      	movs	r3, #10
    9548:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    954a:	0022      	movs	r2, r4
    954c:	3234      	adds	r2, #52	; 0x34
    954e:	7522      	strb	r2, [r4, #20]
    9550:	0a13      	lsrs	r3, r2, #8
    9552:	7563      	strb	r3, [r4, #21]
    9554:	0c13      	lsrs	r3, r2, #16
    9556:	75a3      	strb	r3, [r4, #22]
    9558:	0e12      	lsrs	r2, r2, #24
    955a:	75e2      	strb	r2, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    955c:	0022      	movs	r2, r4
    955e:	323d      	adds	r2, #61	; 0x3d
    9560:	7622      	strb	r2, [r4, #24]
    9562:	0a13      	lsrs	r3, r2, #8
    9564:	7663      	strb	r3, [r4, #25]
    9566:	0c13      	lsrs	r3, r2, #16
    9568:	76a3      	strb	r3, [r4, #26]
    956a:	0e12      	lsrs	r2, r2, #24
    956c:	76e2      	strb	r2, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    956e:	2360      	movs	r3, #96	; 0x60
    9570:	2244      	movs	r2, #68	; 0x44
    9572:	32ff      	adds	r2, #255	; 0xff
    9574:	54a3      	strb	r3, [r4, r2]
    9576:	0022      	movs	r2, r4
    9578:	3244      	adds	r2, #68	; 0x44
    957a:	32ff      	adds	r2, #255	; 0xff
    957c:	2301      	movs	r3, #1
    957e:	7053      	strb	r3, [r2, #1]
    9580:	2338      	movs	r3, #56	; 0x38
    9582:	425b      	negs	r3, r3
    9584:	7093      	strb	r3, [r2, #2]
    9586:	2335      	movs	r3, #53	; 0x35
    9588:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    958a:	2340      	movs	r3, #64	; 0x40
    958c:	425b      	negs	r3, r3
    958e:	2248      	movs	r2, #72	; 0x48
    9590:	32ff      	adds	r2, #255	; 0xff
    9592:	54a3      	strb	r3, [r4, r2]
    9594:	0022      	movs	r2, r4
    9596:	3248      	adds	r2, #72	; 0x48
    9598:	32ff      	adds	r2, #255	; 0xff
    959a:	2351      	movs	r3, #81	; 0x51
    959c:	425b      	negs	r3, r3
    959e:	7053      	strb	r3, [r2, #1]
    95a0:	232e      	movs	r3, #46	; 0x2e
    95a2:	425b      	negs	r3, r3
    95a4:	7093      	strb	r3, [r2, #2]
    95a6:	2335      	movs	r3, #53	; 0x35
    95a8:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    95aa:	224c      	movs	r2, #76	; 0x4c
    95ac:	32ff      	adds	r2, #255	; 0xff
    95ae:	4643      	mov	r3, r8
    95b0:	54a3      	strb	r3, [r4, r2]
    95b2:	0022      	movs	r2, r4
    95b4:	324c      	adds	r2, #76	; 0x4c
    95b6:	32ff      	adds	r2, #255	; 0xff
    95b8:	2370      	movs	r3, #112	; 0x70
    95ba:	7053      	strb	r3, [r2, #1]
    95bc:	4663      	mov	r3, ip
    95be:	7093      	strb	r3, [r2, #2]
    95c0:	2337      	movs	r3, #55	; 0x37
    95c2:	70d3      	strb	r3, [r2, #3]
	RegParams.Rx1DrOffset = 3;
    95c4:	2303      	movs	r3, #3
    95c6:	222c      	movs	r2, #44	; 0x2c
    95c8:	54a3      	strb	r3, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    95ca:	3201      	adds	r2, #1
    95cc:	230a      	movs	r3, #10
    95ce:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    95d0:	2358      	movs	r3, #88	; 0x58
    95d2:	33ff      	adds	r3, #255	; 0xff
    95d4:	54e5      	strb	r5, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    95d6:	4b2f      	ldr	r3, [pc, #188]	; (9694 <LORAReg_InitNA+0x20c>)
    95d8:	781a      	ldrb	r2, [r3, #0]
    95da:	4694      	mov	ip, r2
    95dc:	223d      	movs	r2, #61	; 0x3d
    95de:	4661      	mov	r1, ip
    95e0:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    95e2:	785a      	ldrb	r2, [r3, #1]
    95e4:	233c      	movs	r3, #60	; 0x3c
    95e6:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    95e8:	2300      	movs	r3, #0
    95ea:	2238      	movs	r2, #56	; 0x38
    95ec:	54a3      	strb	r3, [r4, r2]
    95ee:	2200      	movs	r2, #0
    95f0:	3339      	adds	r3, #57	; 0x39
    95f2:	54e2      	strb	r2, [r4, r3]
    95f4:	3301      	adds	r3, #1
    95f6:	54e2      	strb	r2, [r4, r3]
    95f8:	3301      	adds	r3, #1
    95fa:	54e2      	strb	r2, [r4, r3]
	RegParams.joinbccount =0;
    95fc:	3307      	adds	r3, #7
    95fe:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    9600:	0023      	movs	r3, r4
    9602:	333e      	adds	r3, #62	; 0x3e
    9604:	701a      	strb	r2, [r3, #0]
    9606:	705a      	strb	r2, [r3, #1]
    9608:	709a      	strb	r2, [r3, #2]
    960a:	70da      	strb	r2, [r3, #3]
	RegParams.band = ismBand;
    960c:	232e      	movs	r3, #46	; 0x2e
    960e:	466a      	mov	r2, sp
    9610:	7b12      	ldrb	r2, [r2, #12]
    9612:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    9614:	2290      	movs	r2, #144	; 0x90
    9616:	4920      	ldr	r1, [pc, #128]	; (9698 <LORAReg_InitNA+0x210>)
    9618:	4b20      	ldr	r3, [pc, #128]	; (969c <LORAReg_InitNA+0x214>)
    961a:	4698      	mov	r8, r3
    961c:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    961e:	2270      	movs	r2, #112	; 0x70
    9620:	491f      	ldr	r1, [pc, #124]	; (96a0 <LORAReg_InitNA+0x218>)
    9622:	0030      	movs	r0, r6
    9624:	47c0      	blx	r8
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    9626:	23ab      	movs	r3, #171	; 0xab
    9628:	005b      	lsls	r3, r3, #1
    962a:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    962c:	4b1d      	ldr	r3, [pc, #116]	; (96a4 <LORAReg_InitNA+0x21c>)
    962e:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    9630:	2200      	movs	r2, #0
    9632:	4b1d      	ldr	r3, [pc, #116]	; (96a8 <LORAReg_InitNA+0x220>)
    9634:	54e2      	strb	r2, [r4, r3]
    9636:	18e3      	adds	r3, r4, r3
    9638:	465a      	mov	r2, fp
    963a:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    963c:	2200      	movs	r2, #0
    963e:	2384      	movs	r3, #132	; 0x84
    9640:	009b      	lsls	r3, r3, #2
    9642:	54e2      	strb	r2, [r4, r3]
    9644:	18e3      	adds	r3, r4, r3
    9646:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    9648:	4b18      	ldr	r3, [pc, #96]	; (96ac <LORAReg_InitNA+0x224>)
    964a:	54e2      	strb	r2, [r4, r3]
    964c:	18e3      	adds	r3, r4, r3
    964e:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_NA_LAST_USED_SB;
    9650:	2383      	movs	r3, #131	; 0x83
    9652:	009b      	lsls	r3, r3, #2
    9654:	2201      	movs	r2, #1
    9656:	54e2      	strb	r2, [r4, r3]
    9658:	469c      	mov	ip, r3
    965a:	4464      	add	r4, ip
    965c:	465b      	mov	r3, fp
    965e:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    9660:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    9662:	711f      	strb	r7, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    9664:	4a12      	ldr	r2, [pc, #72]	; (96b0 <LORAReg_InitNA+0x228>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    9666:	9200      	str	r2, [sp, #0]
    9668:	4912      	ldr	r1, [pc, #72]	; (96b4 <LORAReg_InitNA+0x22c>)
    966a:	9a05      	ldr	r2, [sp, #20]
    966c:	4b12      	ldr	r3, [pc, #72]	; (96b8 <LORAReg_InitNA+0x230>)
    966e:	2002      	movs	r0, #2
    9670:	4c12      	ldr	r4, [pc, #72]	; (96bc <LORAReg_InitNA+0x234>)
    9672:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    9674:	4b12      	ldr	r3, [pc, #72]	; (96c0 <LORAReg_InitNA+0x238>)
    9676:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    9678:	4b12      	ldr	r3, [pc, #72]	; (96c4 <LORAReg_InitNA+0x23c>)
    967a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    967c:	4b12      	ldr	r3, [pc, #72]	; (96c8 <LORAReg_InitNA+0x240>)
    967e:	4798      	blx	r3
}
    9680:	2008      	movs	r0, #8
    9682:	b009      	add	sp, #36	; 0x24
    9684:	bc3c      	pop	{r2, r3, r4, r5}
    9686:	4690      	mov	r8, r2
    9688:	4699      	mov	r9, r3
    968a:	46a2      	mov	sl, r4
    968c:	46ab      	mov	fp, r5
    968e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9690:	200024d0 	.word	0x200024d0
    9694:	200024cc 	.word	0x200024cc
    9698:	00020018 	.word	0x00020018
    969c:	00019d1d 	.word	0x00019d1d
    96a0:	000200a8 	.word	0x000200a8
    96a4:	0000020b 	.word	0x0000020b
    96a8:	0000020e 	.word	0x0000020e
    96ac:	00000212 	.word	0x00000212
    96b0:	00009485 	.word	0x00009485
    96b4:	200022c8 	.word	0x200022c8
    96b8:	00020118 	.word	0x00020118
    96bc:	0000e355 	.word	0x0000e355
    96c0:	0000c9f1 	.word	0x0000c9f1
    96c4:	0000d2d1 	.word	0x0000d2d1
    96c8:	0000d5b9 	.word	0x0000d5b9

000096cc <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    96cc:	2015      	movs	r0, #21
    96ce:	4770      	bx	lr

000096d0 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    96d0:	2015      	movs	r0, #21
    96d2:	4770      	bx	lr

000096d4 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    96d4:	232a      	movs	r3, #42	; 0x2a
    96d6:	4902      	ldr	r1, [pc, #8]	; (96e0 <LORAREG_GetAttr_MaxChannel+0xc>)
    96d8:	5ccb      	ldrb	r3, [r1, r3]
    96da:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    96dc:	2008      	movs	r0, #8
    96de:	4770      	bx	lr
    96e0:	200024d0 	.word	0x200024d0

000096e4 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    96e4:	4905      	ldr	r1, [pc, #20]	; (96fc <LORAREG_GetAttr_MinNewChIndex+0x18>)
    96e6:	2321      	movs	r3, #33	; 0x21
    96e8:	5cc8      	ldrb	r0, [r1, r3]
    96ea:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    96ec:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    96ee:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    96f0:	2bff      	cmp	r3, #255	; 0xff
    96f2:	d000      	beq.n	96f6 <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    96f4:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    96f6:	3002      	adds	r0, #2
    96f8:	e7fc      	b.n	96f4 <LORAREG_GetAttr_MinNewChIndex+0x10>
    96fa:	46c0      	nop			; (mov r8, r8)
    96fc:	200024d0 	.word	0x200024d0

00009700 <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    9700:	2322      	movs	r3, #34	; 0x22
    9702:	4902      	ldr	r1, [pc, #8]	; (970c <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    9704:	5ccb      	ldrb	r3, [r1, r3]
    9706:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9708:	2008      	movs	r0, #8
    970a:	4770      	bx	lr
    970c:	200024d0 	.word	0x200024d0

00009710 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    9710:	2323      	movs	r3, #35	; 0x23
    9712:	4902      	ldr	r1, [pc, #8]	; (971c <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    9714:	5ccb      	ldrb	r3, [r1, r3]
    9716:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9718:	2008      	movs	r0, #8
    971a:	4770      	bx	lr
    971c:	200024d0 	.word	0x200024d0

00009720 <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    9720:	2320      	movs	r3, #32
    9722:	4902      	ldr	r1, [pc, #8]	; (972c <LORAREG_GetAttr_RegFeatures+0xc>)
    9724:	5ccb      	ldrb	r3, [r1, r3]
    9726:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9728:	2008      	movs	r0, #8
    972a:	4770      	bx	lr
    972c:	200024d0 	.word	0x200024d0

00009730 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    9730:	b530      	push	{r4, r5, lr}
    9732:	b083      	sub	sp, #12
    9734:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    9736:	780c      	ldrb	r4, [r1, #0]
    9738:	a901      	add	r1, sp, #4
    973a:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    973c:	2301      	movs	r3, #1
    973e:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    9740:	4b0d      	ldr	r3, [pc, #52]	; (9778 <LORAREG_GetAttr_DataRange+0x48>)
    9742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9744:	2015      	movs	r0, #21
    9746:	4798      	blx	r3
    9748:	2808      	cmp	r0, #8
    974a:	d004      	beq.n	9756 <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    974c:	23ff      	movs	r3, #255	; 0xff
    974e:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    9750:	200a      	movs	r0, #10
	}
	return result;
}
    9752:	b003      	add	sp, #12
    9754:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    9756:	4909      	ldr	r1, [pc, #36]	; (977c <LORAREG_GetAttr_DataRange+0x4c>)
    9758:	790b      	ldrb	r3, [r1, #4]
    975a:	794a      	ldrb	r2, [r1, #5]
    975c:	0212      	lsls	r2, r2, #8
    975e:	4313      	orrs	r3, r2
    9760:	798a      	ldrb	r2, [r1, #6]
    9762:	0412      	lsls	r2, r2, #16
    9764:	431a      	orrs	r2, r3
    9766:	79cb      	ldrb	r3, [r1, #7]
    9768:	061b      	lsls	r3, r3, #24
    976a:	431a      	orrs	r2, r3
    976c:	0063      	lsls	r3, r4, #1
    976e:	189b      	adds	r3, r3, r2
    9770:	785b      	ldrb	r3, [r3, #1]
    9772:	702b      	strb	r3, [r5, #0]
    9774:	e7ed      	b.n	9752 <LORAREG_GetAttr_DataRange+0x22>
    9776:	46c0      	nop			; (mov r8, r8)
    9778:	20000e64 	.word	0x20000e64
    977c:	200024d0 	.word	0x200024d0

00009780 <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    9780:	b530      	push	{r4, r5, lr}
    9782:	b083      	sub	sp, #12
    9784:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    9786:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    9788:	a901      	add	r1, sp, #4
    978a:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    978c:	2301      	movs	r3, #1
    978e:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    9790:	4b0c      	ldr	r3, [pc, #48]	; (97c4 <LORAREG_GetAttr_ChIdStatus+0x44>)
    9792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    9794:	2015      	movs	r0, #21
    9796:	4798      	blx	r3
    9798:	2808      	cmp	r0, #8
    979a:	d004      	beq.n	97a6 <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    979c:	2300      	movs	r3, #0
    979e:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    97a0:	200a      	movs	r0, #10
	}
	return result;
}
    97a2:	b003      	add	sp, #12
    97a4:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    97a6:	4908      	ldr	r1, [pc, #32]	; (97c8 <LORAREG_GetAttr_ChIdStatus+0x48>)
    97a8:	790a      	ldrb	r2, [r1, #4]
    97aa:	794b      	ldrb	r3, [r1, #5]
    97ac:	021b      	lsls	r3, r3, #8
    97ae:	4313      	orrs	r3, r2
    97b0:	798a      	ldrb	r2, [r1, #6]
    97b2:	0412      	lsls	r2, r2, #16
    97b4:	4313      	orrs	r3, r2
    97b6:	79ca      	ldrb	r2, [r1, #7]
    97b8:	0612      	lsls	r2, r2, #24
    97ba:	431a      	orrs	r2, r3
    97bc:	0064      	lsls	r4, r4, #1
    97be:	5ca3      	ldrb	r3, [r4, r2]
    97c0:	702b      	strb	r3, [r5, #0]
    97c2:	e7ee      	b.n	97a2 <LORAREG_GetAttr_ChIdStatus+0x22>
    97c4:	20000e64 	.word	0x20000e64
    97c8:	200024d0 	.word	0x200024d0

000097cc <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    97cc:	2301      	movs	r3, #1
    97ce:	425b      	negs	r3, r3
    97d0:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    97d2:	200a      	movs	r0, #10
    97d4:	4770      	bx	lr

000097d6 <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    97d6:	2301      	movs	r3, #1
    97d8:	425b      	negs	r3, r3
    97da:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    97dc:	200a      	movs	r0, #10
    97de:	4770      	bx	lr

000097e0 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    97e0:	23fa      	movs	r3, #250	; 0xfa
    97e2:	009b      	lsls	r3, r3, #2
    97e4:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    97e6:	2008      	movs	r0, #8
    97e8:	4770      	bx	lr

000097ea <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    97ea:	23fa      	movs	r3, #250	; 0xfa
    97ec:	00db      	lsls	r3, r3, #3
    97ee:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    97f0:	2008      	movs	r0, #8
    97f2:	4770      	bx	lr

000097f4 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    97f4:	4b01      	ldr	r3, [pc, #4]	; (97fc <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    97f6:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    97f8:	2008      	movs	r0, #8
    97fa:	4770      	bx	lr
    97fc:	00001388 	.word	0x00001388

00009800 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    9800:	4b01      	ldr	r3, [pc, #4]	; (9808 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    9802:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9804:	2008      	movs	r0, #8
    9806:	4770      	bx	lr
    9808:	00001770 	.word	0x00001770

0000980c <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    980c:	23fa      	movs	r3, #250	; 0xfa
    980e:	00db      	lsls	r3, r3, #3
    9810:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9812:	2008      	movs	r0, #8
    9814:	4770      	bx	lr

00009816 <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    9816:	2320      	movs	r3, #32
    9818:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    981a:	2008      	movs	r0, #8
    981c:	4770      	bx	lr

0000981e <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    981e:	2340      	movs	r3, #64	; 0x40
    9820:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9822:	2008      	movs	r0, #8
    9824:	4770      	bx	lr

00009826 <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    9826:	2380      	movs	r3, #128	; 0x80
    9828:	01db      	lsls	r3, r3, #7
    982a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    982c:	2008      	movs	r0, #8
    982e:	4770      	bx	lr

00009830 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    9830:	2327      	movs	r3, #39	; 0x27
    9832:	4902      	ldr	r1, [pc, #8]	; (983c <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    9834:	5ccb      	ldrb	r3, [r1, r3]
    9836:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9838:	2008      	movs	r0, #8
    983a:	4770      	bx	lr
    983c:	200024d0 	.word	0x200024d0

00009840 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    9840:	2326      	movs	r3, #38	; 0x26
    9842:	4902      	ldr	r1, [pc, #8]	; (984c <LORAREG_GetAttr_RegDefTxDR+0xc>)
    9844:	5ccb      	ldrb	r3, [r1, r3]
    9846:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9848:	2008      	movs	r0, #8
    984a:	4770      	bx	lr
    984c:	200024d0 	.word	0x200024d0

00009850 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    9850:	232f      	movs	r3, #47	; 0x2f
    9852:	4902      	ldr	r1, [pc, #8]	; (985c <LORAREG_GetAttr_CurChIndx+0xc>)
    9854:	5ccb      	ldrb	r3, [r1, r3]
    9856:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    9858:	2008      	movs	r0, #8
    985a:	4770      	bx	lr
    985c:	200024d0 	.word	0x200024d0

00009860 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    9860:	4b09      	ldr	r3, [pc, #36]	; (9888 <LORAREG_GetAttr_DefLBTParams+0x28>)
    9862:	21c0      	movs	r1, #192	; 0xc0
    9864:	31ff      	adds	r1, #255	; 0xff
    9866:	5c59      	ldrb	r1, [r3, r1]
    9868:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    986a:	21be      	movs	r1, #190	; 0xbe
    986c:	31ff      	adds	r1, #255	; 0xff
    986e:	5c59      	ldrb	r1, [r3, r1]
    9870:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    9872:	21df      	movs	r1, #223	; 0xdf
    9874:	0049      	lsls	r1, r1, #1
    9876:	565b      	ldrsb	r3, [r3, r1]
    9878:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    987a:	2301      	movs	r3, #1
    987c:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    987e:	3304      	adds	r3, #4
    9880:	8093      	strh	r3, [r2, #4]
	return 0;
}
    9882:	2000      	movs	r0, #0
    9884:	4770      	bx	lr
    9886:	46c0      	nop			; (mov r8, r8)
    9888:	200024d0 	.word	0x200024d0

0000988c <LORAREG_GetAttr_FreqT1>:
{
    988c:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    988e:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    9890:	212a      	movs	r1, #42	; 0x2a
    9892:	4820      	ldr	r0, [pc, #128]	; (9914 <LORAREG_GetAttr_FreqT1+0x88>)
    9894:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    9896:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    9898:	428b      	cmp	r3, r1
    989a:	dc39      	bgt.n	9910 <LORAREG_GetAttr_FreqT1+0x84>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    989c:	2054      	movs	r0, #84	; 0x54
    989e:	30ff      	adds	r0, #255	; 0xff
    98a0:	4c1c      	ldr	r4, [pc, #112]	; (9914 <LORAREG_GetAttr_FreqT1+0x88>)
    98a2:	5c24      	ldrb	r4, [r4, r0]
    98a4:	42a3      	cmp	r3, r4
    98a6:	d31c      	bcc.n	98e2 <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    98a8:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    98aa:	428b      	cmp	r3, r1
    98ac:	da30      	bge.n	9910 <LORAREG_GetAttr_FreqT1+0x84>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    98ae:	1b1b      	subs	r3, r3, r4
    98b0:	4919      	ldr	r1, [pc, #100]	; (9918 <LORAREG_GetAttr_FreqT1+0x8c>)
    98b2:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    98b4:	4c17      	ldr	r4, [pc, #92]	; (9914 <LORAREG_GetAttr_FreqT1+0x88>)
    98b6:	2148      	movs	r1, #72	; 0x48
    98b8:	31ff      	adds	r1, #255	; 0xff
    98ba:	5c61      	ldrb	r1, [r4, r1]
    98bc:	303f      	adds	r0, #63	; 0x3f
    98be:	30ff      	adds	r0, #255	; 0xff
    98c0:	5c20      	ldrb	r0, [r4, r0]
    98c2:	0200      	lsls	r0, r0, #8
    98c4:	4301      	orrs	r1, r0
    98c6:	204a      	movs	r0, #74	; 0x4a
    98c8:	30ff      	adds	r0, #255	; 0xff
    98ca:	5c20      	ldrb	r0, [r4, r0]
    98cc:	0400      	lsls	r0, r0, #16
    98ce:	4308      	orrs	r0, r1
    98d0:	21a5      	movs	r1, #165	; 0xa5
    98d2:	0049      	lsls	r1, r1, #1
    98d4:	5c61      	ldrb	r1, [r4, r1]
    98d6:	0609      	lsls	r1, r1, #24
    98d8:	4301      	orrs	r1, r0
    98da:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    98dc:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    98de:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    98e0:	e016      	b.n	9910 <LORAREG_GetAttr_FreqT1+0x84>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    98e2:	4c0c      	ldr	r4, [pc, #48]	; (9914 <LORAREG_GetAttr_FreqT1+0x88>)
    98e4:	2144      	movs	r1, #68	; 0x44
    98e6:	31ff      	adds	r1, #255	; 0xff
    98e8:	5c61      	ldrb	r1, [r4, r1]
    98ea:	380f      	subs	r0, #15
    98ec:	5c20      	ldrb	r0, [r4, r0]
    98ee:	0200      	lsls	r0, r0, #8
    98f0:	4308      	orrs	r0, r1
    98f2:	2146      	movs	r1, #70	; 0x46
    98f4:	31ff      	adds	r1, #255	; 0xff
    98f6:	5c61      	ldrb	r1, [r4, r1]
    98f8:	0409      	lsls	r1, r1, #16
    98fa:	4308      	orrs	r0, r1
    98fc:	21a3      	movs	r1, #163	; 0xa3
    98fe:	0049      	lsls	r1, r1, #1
    9900:	5c61      	ldrb	r1, [r4, r1]
    9902:	0609      	lsls	r1, r1, #24
    9904:	4301      	orrs	r1, r0
    9906:	4805      	ldr	r0, [pc, #20]	; (991c <LORAREG_GetAttr_FreqT1+0x90>)
    9908:	4343      	muls	r3, r0
    990a:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    990c:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    990e:	2008      	movs	r0, #8
}
    9910:	bd30      	pop	{r4, r5, pc}
    9912:	46c0      	nop			; (mov r8, r8)
    9914:	200024d0 	.word	0x200024d0
    9918:	00186a00 	.word	0x00186a00
    991c:	00030d40 	.word	0x00030d40

00009920 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9920:	780a      	ldrb	r2, [r1, #0]
    9922:	23a8      	movs	r3, #168	; 0xa8
    9924:	005b      	lsls	r3, r3, #1
    9926:	4903      	ldr	r1, [pc, #12]	; (9934 <ValidateDataRateTxT1+0x14>)
    9928:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    992a:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    992c:	429a      	cmp	r2, r3
    992e:	d900      	bls.n	9932 <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    9930:	3002      	adds	r0, #2
	}
	
	return result;
}
    9932:	4770      	bx	lr
    9934:	200024d0 	.word	0x200024d0

00009938 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    9938:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    993a:	2224      	movs	r2, #36	; 0x24
    993c:	4908      	ldr	r1, [pc, #32]	; (9960 <ValidateDataRateTxT2+0x28>)
    993e:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    9940:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    9942:	429a      	cmp	r2, r3
    9944:	d30a      	bcc.n	995c <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    9946:	22e1      	movs	r2, #225	; 0xe1
    9948:	0052      	lsls	r2, r2, #1
    994a:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    994c:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    994e:	07d2      	lsls	r2, r2, #31
    9950:	d504      	bpl.n	995c <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    9952:	2222      	movs	r2, #34	; 0x22
    9954:	5c8a      	ldrb	r2, [r1, r2]
    9956:	429a      	cmp	r2, r3
    9958:	d900      	bls.n	995c <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    995a:	3002      	adds	r0, #2
	}
	
	return result;
}
    995c:	4770      	bx	lr
    995e:	46c0      	nop			; (mov r8, r8)
    9960:	200024d0 	.word	0x200024d0

00009964 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    9964:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    9966:	22a9      	movs	r2, #169	; 0xa9
    9968:	0052      	lsls	r2, r2, #1
    996a:	4906      	ldr	r1, [pc, #24]	; (9984 <ValidateDataRateRxT1+0x20>)
    996c:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    996e:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    9970:	429a      	cmp	r2, r3
    9972:	d306      	bcc.n	9982 <ValidateDataRateRxT1+0x1e>
    9974:	2252      	movs	r2, #82	; 0x52
    9976:	32ff      	adds	r2, #255	; 0xff
    9978:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    997a:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    997c:	429a      	cmp	r2, r3
    997e:	d900      	bls.n	9982 <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    9980:	3002      	adds	r0, #2
	}
	return result;
}
    9982:	4770      	bx	lr
    9984:	200024d0 	.word	0x200024d0

00009988 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    9988:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    998a:	2224      	movs	r2, #36	; 0x24
    998c:	4908      	ldr	r1, [pc, #32]	; (99b0 <ValidateDataRateRxT2+0x28>)
    998e:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    9990:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    9992:	429a      	cmp	r2, r3
    9994:	d30a      	bcc.n	99ac <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    9996:	22e1      	movs	r2, #225	; 0xe1
    9998:	0052      	lsls	r2, r2, #1
    999a:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    999c:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    999e:	0792      	lsls	r2, r2, #30
    99a0:	d504      	bpl.n	99ac <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    99a2:	2222      	movs	r2, #34	; 0x22
    99a4:	5c8a      	ldrb	r2, [r1, r2]
    99a6:	429a      	cmp	r2, r3
    99a8:	d900      	bls.n	99ac <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    99aa:	3002      	adds	r0, #2
	}

	return result;
}
    99ac:	4770      	bx	lr
    99ae:	46c0      	nop			; (mov r8, r8)
    99b0:	200024d0 	.word	0x200024d0

000099b4 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    99b4:	780a      	ldrb	r2, [r1, #0]
    99b6:	232a      	movs	r3, #42	; 0x2a
    99b8:	4903      	ldr	r1, [pc, #12]	; (99c8 <ValidateChannelId+0x14>)
    99ba:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    99bc:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    99be:	429a      	cmp	r2, r3
    99c0:	db00      	blt.n	99c4 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    99c2:	3002      	adds	r0, #2
    }
	
    return result;
}
    99c4:	4770      	bx	lr
    99c6:	46c0      	nop			; (mov r8, r8)
    99c8:	200024d0 	.word	0x200024d0

000099cc <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    99cc:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    99ce:	222a      	movs	r2, #42	; 0x2a
    99d0:	4808      	ldr	r0, [pc, #32]	; (99f4 <ValidateChannelIdT2+0x28>)
    99d2:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    99d4:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    99d6:	4293      	cmp	r3, r2
    99d8:	da0a      	bge.n	99f0 <ValidateChannelIdT2+0x24>
    99da:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    99dc:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    99de:	2a00      	cmp	r2, #0
    99e0:	d106      	bne.n	99f0 <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    99e2:	32c1      	adds	r2, #193	; 0xc1
    99e4:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    99e6:	4903      	ldr	r1, [pc, #12]	; (99f4 <ValidateChannelIdT2+0x28>)
    99e8:	5c8a      	ldrb	r2, [r1, r2]
    99ea:	429a      	cmp	r2, r3
    99ec:	d900      	bls.n	99f0 <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    99ee:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    99f0:	4770      	bx	lr
    99f2:	46c0      	nop			; (mov r8, r8)
    99f4:	200024d0 	.word	0x200024d0

000099f8 <LORAREG_GetAttr_DutyCycleT2>:
{
    99f8:	b530      	push	{r4, r5, lr}
    99fa:	b083      	sub	sp, #12
    99fc:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    99fe:	780d      	ldrb	r5, [r1, #0]
    9a00:	a901      	add	r1, sp, #4
    9a02:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    9a04:	2301      	movs	r3, #1
    9a06:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    9a08:	2015      	movs	r0, #21
    9a0a:	4b0b      	ldr	r3, [pc, #44]	; (9a38 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    9a0c:	4798      	blx	r3
    9a0e:	2808      	cmp	r0, #8
    9a10:	d002      	beq.n	9a18 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    9a12:	200a      	movs	r0, #10
}
    9a14:	b003      	add	sp, #12
    9a16:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    9a18:	4a08      	ldr	r2, [pc, #32]	; (9a3c <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    9a1a:	006b      	lsls	r3, r5, #1
    9a1c:	195b      	adds	r3, r3, r5
    9a1e:	009b      	lsls	r3, r3, #2
    9a20:	18d3      	adds	r3, r2, r3
    9a22:	33ab      	adds	r3, #171	; 0xab
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    9a24:	781b      	ldrb	r3, [r3, #0]
    9a26:	33d4      	adds	r3, #212	; 0xd4
    9a28:	005b      	lsls	r3, r3, #1
    9a2a:	18d2      	adds	r2, r2, r3
    9a2c:	7951      	ldrb	r1, [r2, #5]
    9a2e:	7993      	ldrb	r3, [r2, #6]
    9a30:	021b      	lsls	r3, r3, #8
    9a32:	430b      	orrs	r3, r1
    9a34:	8023      	strh	r3, [r4, #0]
    9a36:	e7ed      	b.n	9a14 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    9a38:	000099cd 	.word	0x000099cd
    9a3c:	200024d0 	.word	0x200024d0

00009a40 <LORAREG_GetAttr_MinMaxDr>:
{
    9a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a42:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    9a44:	4b21      	ldr	r3, [pc, #132]	; (9acc <LORAREG_GetAttr_MinMaxDr+0x8c>)
    9a46:	2124      	movs	r1, #36	; 0x24
    9a48:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    9a4a:	3101      	adds	r1, #1
    9a4c:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    9a4e:	3105      	adds	r1, #5
    9a50:	565e      	ldrsb	r6, [r3, r1]
    9a52:	2e00      	cmp	r6, #0
    9a54:	dd28      	ble.n	9aa8 <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9a56:	0019      	movs	r1, r3
    9a58:	791d      	ldrb	r5, [r3, #4]
    9a5a:	795b      	ldrb	r3, [r3, #5]
    9a5c:	021b      	lsls	r3, r3, #8
    9a5e:	432b      	orrs	r3, r5
    9a60:	798d      	ldrb	r5, [r1, #6]
    9a62:	042d      	lsls	r5, r5, #16
    9a64:	432b      	orrs	r3, r5
    9a66:	79cd      	ldrb	r5, [r1, #7]
    9a68:	062d      	lsls	r5, r5, #24
    9a6a:	431d      	orrs	r5, r3
    9a6c:	2100      	movs	r1, #0
    9a6e:	e00b      	b.n	9a88 <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9a70:	7843      	ldrb	r3, [r0, #1]
    9a72:	091b      	lsrs	r3, r3, #4
    9a74:	42bb      	cmp	r3, r7
    9a76:	dd03      	ble.n	9a80 <LORAREG_GetAttr_MinMaxDr+0x40>
    9a78:	7800      	ldrb	r0, [r0, #0]
    9a7a:	2800      	cmp	r0, #0
    9a7c:	d000      	beq.n	9a80 <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    9a7e:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    9a80:	3101      	adds	r1, #1
    9a82:	b2c9      	uxtb	r1, r1
    9a84:	42b1      	cmp	r1, r6
    9a86:	da0f      	bge.n	9aa8 <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9a88:	0048      	lsls	r0, r1, #1
    9a8a:	1828      	adds	r0, r5, r0
    9a8c:	7843      	ldrb	r3, [r0, #1]
    9a8e:	071b      	lsls	r3, r3, #28
    9a90:	0f1b      	lsrs	r3, r3, #28
    9a92:	42a3      	cmp	r3, r4
    9a94:	daec      	bge.n	9a70 <LORAREG_GetAttr_MinMaxDr+0x30>
    9a96:	7802      	ldrb	r2, [r0, #0]
    9a98:	2a00      	cmp	r2, #0
    9a9a:	d0f1      	beq.n	9a80 <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    9a9c:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    9a9e:	7843      	ldrb	r3, [r0, #1]
    9aa0:	091b      	lsrs	r3, r3, #4
    9aa2:	42bb      	cmp	r3, r7
    9aa4:	dceb      	bgt.n	9a7e <LORAREG_GetAttr_MinMaxDr+0x3e>
    9aa6:	e7eb      	b.n	9a80 <LORAREG_GetAttr_MinMaxDr+0x40>
		}
	}
	
	if ((RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1) && ((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0))
    9aa8:	23e1      	movs	r3, #225	; 0xe1
    9aaa:	005b      	lsls	r3, r3, #1
    9aac:	4907      	ldr	r1, [pc, #28]	; (9acc <LORAREG_GetAttr_MinMaxDr+0x8c>)
    9aae:	5ccb      	ldrb	r3, [r1, r3]
    9ab0:	07db      	lsls	r3, r3, #31
    9ab2:	d506      	bpl.n	9ac2 <LORAREG_GetAttr_MinMaxDr+0x82>
    9ab4:	232e      	movs	r3, #46	; 0x2e
    9ab6:	5cc9      	ldrb	r1, [r1, r3]
    9ab8:	4b05      	ldr	r3, [pc, #20]	; (9ad0 <LORAREG_GetAttr_MinMaxDr+0x90>)
    9aba:	410b      	asrs	r3, r1
    9abc:	07db      	lsls	r3, r3, #31
    9abe:	d500      	bpl.n	9ac2 <LORAREG_GetAttr_MinMaxDr+0x82>
	{
		minDataRate = DR2;
    9ac0:	2402      	movs	r4, #2
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    9ac2:	4663      	mov	r3, ip
    9ac4:	701c      	strb	r4, [r3, #0]
    9ac6:	705f      	strb	r7, [r3, #1]
}
    9ac8:	2008      	movs	r0, #8
    9aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9acc:	200024d0 	.word	0x200024d0
    9ad0:	00007fe0 	.word	0x00007fe0

00009ad4 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    9ad4:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    9ad6:	2b05      	cmp	r3, #5
    9ad8:	d004      	beq.n	9ae4 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9ada:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    9adc:	2b07      	cmp	r3, #7
    9ade:	d900      	bls.n	9ae2 <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    9ae0:	3002      	adds	r0, #2
    }

    return result;
}
    9ae2:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    9ae4:	200a      	movs	r0, #10
    9ae6:	e7fc      	b.n	9ae2 <ValidateChannelMaskCntl+0xe>

00009ae8 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9ae8:	780a      	ldrb	r2, [r1, #0]
    9aea:	232d      	movs	r3, #45	; 0x2d
    9aec:	4903      	ldr	r1, [pc, #12]	; (9afc <ValidateTxPower+0x14>)
    9aee:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9af0:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9af2:	429a      	cmp	r2, r3
    9af4:	dd00      	ble.n	9af8 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    9af6:	3002      	adds	r0, #2
	}

	return result;
}
    9af8:	4770      	bx	lr
    9afa:	46c0      	nop			; (mov r8, r8)
    9afc:	200024d0 	.word	0x200024d0

00009b00 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    9b00:	2008      	movs	r0, #8
    9b02:	4770      	bx	lr

00009b04 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9b04:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    9b06:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    9b08:	2900      	cmp	r1, #0
    9b0a:	d020      	beq.n	9b4e <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    9b0c:	232a      	movs	r3, #42	; 0x2a
    9b0e:	4a11      	ldr	r2, [pc, #68]	; (9b54 <ValidateChannelMaskT2+0x50>)
    9b10:	56d0      	ldrsb	r0, [r2, r3]
    9b12:	2800      	cmp	r0, #0
    9b14:	dd1b      	ble.n	9b4e <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    9b16:	7a14      	ldrb	r4, [r2, #8]
    9b18:	7a53      	ldrb	r3, [r2, #9]
    9b1a:	021b      	lsls	r3, r3, #8
    9b1c:	4323      	orrs	r3, r4
    9b1e:	7a94      	ldrb	r4, [r2, #10]
    9b20:	0424      	lsls	r4, r4, #16
    9b22:	4323      	orrs	r3, r4
    9b24:	7ad4      	ldrb	r4, [r2, #11]
    9b26:	0624      	lsls	r4, r4, #24
    9b28:	431c      	orrs	r4, r3
    9b2a:	2300      	movs	r3, #0
    9b2c:	2503      	movs	r5, #3
    9b2e:	e004      	b.n	9b3a <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    9b30:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    9b32:	3301      	adds	r3, #1
    9b34:	b2db      	uxtb	r3, r3
    9b36:	4283      	cmp	r3, r0
    9b38:	da09      	bge.n	9b4e <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    9b3a:	2900      	cmp	r1, #0
    9b3c:	d0f8      	beq.n	9b30 <ValidateChannelMaskT2+0x2c>
    9b3e:	005a      	lsls	r2, r3, #1
    9b40:	18d2      	adds	r2, r2, r3
    9b42:	0092      	lsls	r2, r2, #2
    9b44:	18a2      	adds	r2, r4, r2
    9b46:	7ad2      	ldrb	r2, [r2, #11]
    9b48:	402a      	ands	r2, r5
    9b4a:	2a03      	cmp	r2, #3
    9b4c:	d0f0      	beq.n	9b30 <ValidateChannelMaskT2+0x2c>
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
	
	return retVal;
}
    9b4e:	2008      	movs	r0, #8
    9b50:	bd30      	pop	{r4, r5, pc}
    9b52:	46c0      	nop			; (mov r8, r8)
    9b54:	200024d0 	.word	0x200024d0

00009b58 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    9b58:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9b5a:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    9b5c:	2b00      	cmp	r3, #0
    9b5e:	d002      	beq.n	9b66 <ValidateChannelMaskCntlT2+0xe>
    9b60:	2b06      	cmp	r3, #6
    9b62:	d001      	beq.n	9b68 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    9b64:	3002      	adds	r0, #2
    }
	return result;
}
    9b66:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9b68:	2008      	movs	r0, #8
    9b6a:	e7fc      	b.n	9b66 <ValidateChannelMaskCntlT2+0xe>

00009b6c <ValidateChMaskChCntlT2>:
{
    9b6c:	b510      	push	{r4, lr}
    9b6e:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    9b70:	ac01      	add	r4, sp, #4
    9b72:	2204      	movs	r2, #4
    9b74:	0020      	movs	r0, r4
    9b76:	4b0f      	ldr	r3, [pc, #60]	; (9bb4 <ValidateChMaskChCntlT2+0x48>)
    9b78:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    9b7a:	8863      	ldrh	r3, [r4, #2]
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d104      	bne.n	9b8a <ValidateChMaskChCntlT2+0x1e>
    9b80:	ab01      	add	r3, sp, #4
    9b82:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    9b84:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    9b86:	2a00      	cmp	r2, #0
    9b88:	d007      	beq.n	9b9a <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9b8a:	466b      	mov	r3, sp
    9b8c:	1d99      	adds	r1, r3, #6
    9b8e:	201a      	movs	r0, #26
    9b90:	4b09      	ldr	r3, [pc, #36]	; (9bb8 <ValidateChMaskChCntlT2+0x4c>)
    9b92:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    9b94:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9b96:	2808      	cmp	r0, #8
    9b98:	d002      	beq.n	9ba0 <ValidateChMaskChCntlT2+0x34>
}
    9b9a:	0018      	movs	r0, r3
    9b9c:	b002      	add	sp, #8
    9b9e:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    9ba0:	a901      	add	r1, sp, #4
    9ba2:	3013      	adds	r0, #19
    9ba4:	4b05      	ldr	r3, [pc, #20]	; (9bbc <ValidateChMaskChCntlT2+0x50>)
    9ba6:	4798      	blx	r3
    9ba8:	0003      	movs	r3, r0
    9baa:	2808      	cmp	r0, #8
    9bac:	d0f5      	beq.n	9b9a <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    9bae:	230a      	movs	r3, #10
    9bb0:	e7f3      	b.n	9b9a <ValidateChMaskChCntlT2+0x2e>
    9bb2:	46c0      	nop			; (mov r8, r8)
    9bb4:	00019d1d 	.word	0x00019d1d
    9bb8:	00009b05 	.word	0x00009b05
    9bbc:	00009b59 	.word	0x00009b59

00009bc0 <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    9bc0:	780a      	ldrb	r2, [r1, #0]
    9bc2:	2324      	movs	r3, #36	; 0x24
    9bc4:	4903      	ldr	r1, [pc, #12]	; (9bd4 <ValidateDataRate+0x14>)
    9bc6:	5ccb      	ldrb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    9bc8:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    9bca:	429a      	cmp	r2, r3
    9bcc:	d900      	bls.n	9bd0 <ValidateDataRate+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER;
    9bce:	3002      	adds	r0, #2
    }

    return result;
}
    9bd0:	4770      	bx	lr
    9bd2:	46c0      	nop			; (mov r8, r8)
    9bd4:	200024d0 	.word	0x200024d0

00009bd8 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9bd8:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    9bda:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    9bdc:	232a      	movs	r3, #42	; 0x2a
    9bde:	4a14      	ldr	r2, [pc, #80]	; (9c30 <ValidateSupportedDr+0x58>)
    9be0:	56d4      	ldrsb	r4, [r2, r3]
    9be2:	2c00      	cmp	r4, #0
    9be4:	dd22      	ble.n	9c2c <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9be6:	7910      	ldrb	r0, [r2, #4]
    9be8:	7953      	ldrb	r3, [r2, #5]
    9bea:	021b      	lsls	r3, r3, #8
    9bec:	4303      	orrs	r3, r0
    9bee:	7990      	ldrb	r0, [r2, #6]
    9bf0:	0400      	lsls	r0, r0, #16
    9bf2:	4303      	orrs	r3, r0
    9bf4:	79d0      	ldrb	r0, [r2, #7]
    9bf6:	0600      	lsls	r0, r0, #24
    9bf8:	4318      	orrs	r0, r3
    9bfa:	2300      	movs	r3, #0
    9bfc:	002e      	movs	r6, r5
    9bfe:	e003      	b.n	9c08 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    9c00:	3301      	adds	r3, #1
    9c02:	b2db      	uxtb	r3, r3
    9c04:	42a3      	cmp	r3, r4
    9c06:	da0f      	bge.n	9c28 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9c08:	005a      	lsls	r2, r3, #1
    9c0a:	1882      	adds	r2, r0, r2
    9c0c:	7811      	ldrb	r1, [r2, #0]
    9c0e:	2900      	cmp	r1, #0
    9c10:	d0f6      	beq.n	9c00 <ValidateSupportedDr+0x28>
    9c12:	7851      	ldrb	r1, [r2, #1]
    9c14:	0709      	lsls	r1, r1, #28
    9c16:	0f09      	lsrs	r1, r1, #28
    9c18:	428d      	cmp	r5, r1
    9c1a:	dbf1      	blt.n	9c00 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    9c1c:	7852      	ldrb	r2, [r2, #1]
    9c1e:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    9c20:	4296      	cmp	r6, r2
    9c22:	dced      	bgt.n	9c00 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    9c24:	2008      	movs	r0, #8
    9c26:	e000      	b.n	9c2a <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    9c28:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    9c2a:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    9c2c:	200a      	movs	r0, #10
    9c2e:	e7fc      	b.n	9c2a <ValidateSupportedDr+0x52>
    9c30:	200024d0 	.word	0x200024d0

00009c34 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    9c34:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9c36:	6808      	ldr	r0, [r1, #0]
    9c38:	4b07      	ldr	r3, [pc, #28]	; (9c58 <ValidateRxFreqT1+0x24>)
    9c3a:	469c      	mov	ip, r3
    9c3c:	4460      	add	r0, ip
    9c3e:	4a07      	ldr	r2, [pc, #28]	; (9c5c <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    9c40:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9c42:	4290      	cmp	r0, r2
    9c44:	d806      	bhi.n	9c54 <ValidateRxFreqT1+0x20>
    9c46:	4906      	ldr	r1, [pc, #24]	; (9c60 <ValidateRxFreqT1+0x2c>)
    9c48:	4b06      	ldr	r3, [pc, #24]	; (9c64 <ValidateRxFreqT1+0x30>)
    9c4a:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9c4c:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    9c4e:	2900      	cmp	r1, #0
    9c50:	d000      	beq.n	9c54 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    9c52:	3302      	adds	r3, #2
	}
	return result;
}
    9c54:	0018      	movs	r0, r3
    9c56:	bd10      	pop	{r4, pc}
    9c58:	c8f78f60 	.word	0xc8f78f60
    9c5c:	00401640 	.word	0x00401640
    9c60:	000927c0 	.word	0x000927c0
    9c64:	000166c5 	.word	0x000166c5

00009c68 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    9c68:	780a      	ldrb	r2, [r1, #0]
    9c6a:	232c      	movs	r3, #44	; 0x2c
    9c6c:	4903      	ldr	r1, [pc, #12]	; (9c7c <ValidateRx1DataRateOffset+0x14>)
    9c6e:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    9c70:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    9c72:	429a      	cmp	r2, r3
    9c74:	dc00      	bgt.n	9c78 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    9c76:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    9c78:	4770      	bx	lr
    9c7a:	46c0      	nop			; (mov r8, r8)
    9c7c:	200024d0 	.word	0x200024d0

00009c80 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    9c80:	b530      	push	{r4, r5, lr}
    9c82:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	|| (JPN_BAND == 1)
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    9c84:	2329      	movs	r3, #41	; 0x29
    9c86:	4a19      	ldr	r2, [pc, #100]	; (9cec <getSubBandId+0x6c>)
    9c88:	5cd5      	ldrb	r5, [r2, r3]
    9c8a:	2d00      	cmp	r5, #0
    9c8c:	d02c      	beq.n	9ce8 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    9c8e:	0011      	movs	r1, r2
    9c90:	7b13      	ldrb	r3, [r2, #12]
    9c92:	7b52      	ldrb	r2, [r2, #13]
    9c94:	0212      	lsls	r2, r2, #8
    9c96:	431a      	orrs	r2, r3
    9c98:	7b8b      	ldrb	r3, [r1, #14]
    9c9a:	041b      	lsls	r3, r3, #16
    9c9c:	431a      	orrs	r2, r3
    9c9e:	7bcb      	ldrb	r3, [r1, #15]
    9ca0:	061b      	lsls	r3, r3, #24
    9ca2:	4313      	orrs	r3, r2
    9ca4:	2000      	movs	r0, #0
    9ca6:	e004      	b.n	9cb2 <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    9ca8:	3001      	adds	r0, #1
    9caa:	b2c0      	uxtb	r0, r0
    9cac:	330c      	adds	r3, #12
    9cae:	42a8      	cmp	r0, r5
    9cb0:	d018      	beq.n	9ce4 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    9cb2:	781a      	ldrb	r2, [r3, #0]
    9cb4:	7859      	ldrb	r1, [r3, #1]
    9cb6:	0209      	lsls	r1, r1, #8
    9cb8:	4311      	orrs	r1, r2
    9cba:	789a      	ldrb	r2, [r3, #2]
    9cbc:	0412      	lsls	r2, r2, #16
    9cbe:	4311      	orrs	r1, r2
    9cc0:	78da      	ldrb	r2, [r3, #3]
    9cc2:	0612      	lsls	r2, r2, #24
    9cc4:	430a      	orrs	r2, r1
    9cc6:	42a2      	cmp	r2, r4
    9cc8:	d8ee      	bhi.n	9ca8 <getSubBandId+0x28>
    9cca:	791a      	ldrb	r2, [r3, #4]
    9ccc:	7959      	ldrb	r1, [r3, #5]
    9cce:	0209      	lsls	r1, r1, #8
    9cd0:	4311      	orrs	r1, r2
    9cd2:	799a      	ldrb	r2, [r3, #6]
    9cd4:	0412      	lsls	r2, r2, #16
    9cd6:	4311      	orrs	r1, r2
    9cd8:	79da      	ldrb	r2, [r3, #7]
    9cda:	0612      	lsls	r2, r2, #24
    9cdc:	430a      	orrs	r2, r1
    9cde:	4294      	cmp	r4, r2
    9ce0:	d8e2      	bhi.n	9ca8 <getSubBandId+0x28>
    9ce2:	e000      	b.n	9ce6 <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    9ce4:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    9ce6:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    9ce8:	20ff      	movs	r0, #255	; 0xff
    9cea:	e7fc      	b.n	9ce6 <getSubBandId+0x66>
    9cec:	200024d0 	.word	0x200024d0

00009cf0 <ValidateFreq>:
{
    9cf0:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    9cf2:	6808      	ldr	r0, [r1, #0]
    9cf4:	4b04      	ldr	r3, [pc, #16]	; (9d08 <ValidateFreq+0x18>)
    9cf6:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9cf8:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    9cfa:	28ff      	cmp	r0, #255	; 0xff
    9cfc:	d001      	beq.n	9d02 <ValidateFreq+0x12>
}
    9cfe:	0018      	movs	r0, r3
    9d00:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    9d02:	3302      	adds	r3, #2
    9d04:	e7fb      	b.n	9cfe <ValidateFreq+0xe>
    9d06:	46c0      	nop			; (mov r8, r8)
    9d08:	00009c81 	.word	0x00009c81

00009d0c <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    9d0c:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    9d0e:	222e      	movs	r2, #46	; 0x2e
    9d10:	4919      	ldr	r1, [pc, #100]	; (9d78 <ValidateFrequencyAS+0x6c>)
    9d12:	5c8a      	ldrb	r2, [r1, r2]
    9d14:	1f91      	subs	r1, r2, #6
    9d16:	2903      	cmp	r1, #3
    9d18:	d808      	bhi.n	9d2c <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9d1a:	4a18      	ldr	r2, [pc, #96]	; (9d7c <ValidateFrequencyAS+0x70>)
    9d1c:	4694      	mov	ip, r2
    9d1e:	4463      	add	r3, ip
    9d20:	4a17      	ldr	r2, [pc, #92]	; (9d80 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9d22:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9d24:	4293      	cmp	r3, r2
    9d26:	d900      	bls.n	9d2a <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    9d28:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    9d2a:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    9d2c:	2a0a      	cmp	r2, #10
    9d2e:	d011      	beq.n	9d54 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    9d30:	2a0b      	cmp	r2, #11
    9d32:	d018      	beq.n	9d66 <ValidateFrequencyAS+0x5a>
    9d34:	0011      	movs	r1, r2
    9d36:	390d      	subs	r1, #13
    9d38:	2901      	cmp	r1, #1
    9d3a:	d914      	bls.n	9d66 <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    9d3c:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    9d3e:	2a0c      	cmp	r2, #12
    9d40:	d1f3      	bne.n	9d2a <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9d42:	4a10      	ldr	r2, [pc, #64]	; (9d84 <ValidateFrequencyAS+0x78>)
    9d44:	4694      	mov	ip, r2
    9d46:	4463      	add	r3, ip
    9d48:	4a0f      	ldr	r2, [pc, #60]	; (9d88 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9d4a:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9d4c:	4293      	cmp	r3, r2
    9d4e:	d9ec      	bls.n	9d2a <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9d50:	3002      	adds	r0, #2
    9d52:	e7ea      	b.n	9d2a <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9d54:	4a0d      	ldr	r2, [pc, #52]	; (9d8c <ValidateFrequencyAS+0x80>)
    9d56:	4694      	mov	ip, r2
    9d58:	4463      	add	r3, ip
    9d5a:	4a0d      	ldr	r2, [pc, #52]	; (9d90 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9d5c:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    9d5e:	4293      	cmp	r3, r2
    9d60:	d9e3      	bls.n	9d2a <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9d62:	3002      	adds	r0, #2
    9d64:	e7e1      	b.n	9d2a <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9d66:	4a0b      	ldr	r2, [pc, #44]	; (9d94 <ValidateFrequencyAS+0x88>)
    9d68:	4694      	mov	ip, r2
    9d6a:	4463      	add	r3, ip
    9d6c:	4a0a      	ldr	r2, [pc, #40]	; (9d98 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9d6e:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    9d70:	4293      	cmp	r3, r2
    9d72:	d9da      	bls.n	9d2a <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    9d74:	3002      	adds	r0, #2
    9d76:	e7d8      	b.n	9d2a <ValidateFrequencyAS+0x1e>
    9d78:	200024d0 	.word	0x200024d0
    9d7c:	c8fc2340 	.word	0xc8fc2340
    9d80:	001e8480 	.word	0x001e8480
    9d84:	c90b6580 	.word	0xc90b6580
    9d88:	005b8d80 	.word	0x005b8d80
    9d8c:	c9763540 	.word	0xc9763540
    9d90:	00c65d40 	.word	0x00c65d40
    9d94:	c929ea00 	.word	0xc929ea00
    9d98:	004c4b40 	.word	0x004c4b40

00009d9c <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    9d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    9d9e:	780c      	ldrb	r4, [r1, #0]
    9da0:	784a      	ldrb	r2, [r1, #1]
    9da2:	0791      	lsls	r1, r2, #30
    9da4:	0fc9      	lsrs	r1, r1, #31
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    9da6:	4e11      	ldr	r6, [pc, #68]	; (9dec <setTxParams+0x50>)
    9da8:	25e1      	movs	r5, #225	; 0xe1
    9daa:	006d      	lsls	r5, r5, #1
    9dac:	2001      	movs	r0, #1
    9dae:	4002      	ands	r2, r0
    9db0:	5d73      	ldrb	r3, [r6, r5]
    9db2:	2701      	movs	r7, #1
    9db4:	43bb      	bics	r3, r7
    9db6:	4313      	orrs	r3, r2
    9db8:	5573      	strb	r3, [r6, r5]
	if (RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    9dba:	4218      	tst	r0, r3
    9dbc:	d111      	bne.n	9de2 <setTxParams+0x46>
	{
		RegParams.maxDataRate = DR2;
	}
	else
	{
		RegParams.maxDataRate = DR0;
    9dbe:	2000      	movs	r0, #0
    9dc0:	2325      	movs	r3, #37	; 0x25
    9dc2:	4a0a      	ldr	r2, [pc, #40]	; (9dec <setTxParams+0x50>)
    9dc4:	54d0      	strb	r0, [r2, r3]
	}
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    9dc6:	4a09      	ldr	r2, [pc, #36]	; (9dec <setTxParams+0x50>)
    9dc8:	20e1      	movs	r0, #225	; 0xe1
    9dca:	0040      	lsls	r0, r0, #1
    9dcc:	0049      	lsls	r1, r1, #1
    9dce:	5c13      	ldrb	r3, [r2, r0]
    9dd0:	2502      	movs	r5, #2
    9dd2:	43ab      	bics	r3, r5
    9dd4:	430b      	orrs	r3, r1
    9dd6:	5413      	strb	r3, [r2, r0]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    9dd8:	2328      	movs	r3, #40	; 0x28
    9dda:	54d4      	strb	r4, [r2, r3]
	
	return LORAWAN_SUCCESS;
}
    9ddc:	38bb      	subs	r0, #187	; 0xbb
    9dde:	38ff      	subs	r0, #255	; 0xff
    9de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		RegParams.maxDataRate = DR2;
    9de2:	3001      	adds	r0, #1
    9de4:	2325      	movs	r3, #37	; 0x25
    9de6:	54f0      	strb	r0, [r6, r3]
    9de8:	e7ed      	b.n	9dc6 <setTxParams+0x2a>
    9dea:	46c0      	nop			; (mov r8, r8)
    9dec:	200024d0 	.word	0x200024d0

00009df0 <setChlistDefaultState>:
	return status;
}
#endif
#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setChlistDefaultState(LorawanRegionalAttributes_t attr, void *attrInput)
{
    9df0:	b5f0      	push	{r4, r5, r6, r7, lr}
	StackRetStatus_t status = LORAWAN_SUCCESS;
	/* Traverse the entire channel list and disable the all the Channel status except Default channels */
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    9df2:	232a      	movs	r3, #42	; 0x2a
    9df4:	4a17      	ldr	r2, [pc, #92]	; (9e54 <setChlistDefaultState+0x64>)
    9df6:	5cd3      	ldrb	r3, [r2, r3]
    9df8:	2b7f      	cmp	r3, #127	; 0x7f
    9dfa:	d829      	bhi.n	9e50 <setChlistDefaultState+0x60>
    9dfc:	2200      	movs	r2, #0
	{
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    9dfe:	4815      	ldr	r0, [pc, #84]	; (9e54 <setChlistDefaultState+0x64>)
		{
			RegParams.pChParams[i].status = DISABLED;
    9e00:	0004      	movs	r4, r0
    9e02:	2700      	movs	r7, #0
	for (uint8_t i = 0; i <= RegParams.maxChannels; i++)
    9e04:	0006      	movs	r6, r0
    9e06:	252a      	movs	r5, #42	; 0x2a
    9e08:	e004      	b.n	9e14 <setChlistDefaultState+0x24>
    9e0a:	3201      	adds	r2, #1
    9e0c:	b2d2      	uxtb	r2, r2
    9e0e:	5773      	ldrsb	r3, [r6, r5]
    9e10:	429a      	cmp	r2, r3
    9e12:	dc1d      	bgt.n	9e50 <setChlistDefaultState+0x60>
		if(RegParams.pOtherChParams[i].joinRequestChannel != true)
    9e14:	7a03      	ldrb	r3, [r0, #8]
    9e16:	7a41      	ldrb	r1, [r0, #9]
    9e18:	0209      	lsls	r1, r1, #8
    9e1a:	430b      	orrs	r3, r1
    9e1c:	7a81      	ldrb	r1, [r0, #10]
    9e1e:	0409      	lsls	r1, r1, #16
    9e20:	4319      	orrs	r1, r3
    9e22:	7ac3      	ldrb	r3, [r0, #11]
    9e24:	061b      	lsls	r3, r3, #24
    9e26:	4319      	orrs	r1, r3
    9e28:	0053      	lsls	r3, r2, #1
    9e2a:	189b      	adds	r3, r3, r2
    9e2c:	009b      	lsls	r3, r3, #2
    9e2e:	185b      	adds	r3, r3, r1
    9e30:	7a5b      	ldrb	r3, [r3, #9]
    9e32:	2b00      	cmp	r3, #0
    9e34:	d1e9      	bne.n	9e0a <setChlistDefaultState+0x1a>
			RegParams.pChParams[i].status = DISABLED;
    9e36:	7923      	ldrb	r3, [r4, #4]
    9e38:	7961      	ldrb	r1, [r4, #5]
    9e3a:	0209      	lsls	r1, r1, #8
    9e3c:	4319      	orrs	r1, r3
    9e3e:	79a3      	ldrb	r3, [r4, #6]
    9e40:	041b      	lsls	r3, r3, #16
    9e42:	4319      	orrs	r1, r3
    9e44:	79e3      	ldrb	r3, [r4, #7]
    9e46:	061b      	lsls	r3, r3, #24
    9e48:	430b      	orrs	r3, r1
    9e4a:	0051      	lsls	r1, r2, #1
    9e4c:	54cf      	strb	r7, [r1, r3]
    9e4e:	e7dc      	b.n	9e0a <setChlistDefaultState+0x1a>
		}
	}
	return status;
}
    9e50:	2008      	movs	r0, #8
    9e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9e54:	200024d0 	.word	0x200024d0

00009e58 <SearchAvailableChannel1>:
{
    9e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e5a:	46de      	mov	lr, fp
    9e5c:	4657      	mov	r7, sl
    9e5e:	464e      	mov	r6, r9
    9e60:	4645      	mov	r5, r8
    9e62:	b5e0      	push	{r5, r6, r7, lr}
    9e64:	b0af      	sub	sp, #188	; 0xbc
    9e66:	000d      	movs	r5, r1
    9e68:	0017      	movs	r7, r2
    9e6a:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    9e6c:	2290      	movs	r2, #144	; 0x90
    9e6e:	2100      	movs	r1, #0
    9e70:	a80a      	add	r0, sp, #40	; 0x28
    9e72:	4b77      	ldr	r3, [pc, #476]	; (a050 <SearchAvailableChannel1+0x1f8>)
    9e74:	4798      	blx	r3
	if(transmissionType == false)
    9e76:	2d00      	cmp	r5, #0
    9e78:	d01a      	beq.n	9eb0 <SearchAvailableChannel1+0x58>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9e7a:	4b76      	ldr	r3, [pc, #472]	; (a054 <SearchAvailableChannel1+0x1fc>)
    9e7c:	222f      	movs	r2, #47	; 0x2f
    9e7e:	5c9a      	ldrb	r2, [r3, r2]
    9e80:	4693      	mov	fp, r2
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9e82:	2258      	movs	r2, #88	; 0x58
    9e84:	32ff      	adds	r2, #255	; 0xff
    9e86:	5c9a      	ldrb	r2, [r3, r2]
    9e88:	9207      	str	r2, [sp, #28]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    9e8a:	9208      	str	r2, [sp, #32]
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9e8c:	7919      	ldrb	r1, [r3, #4]
    9e8e:	795a      	ldrb	r2, [r3, #5]
    9e90:	0212      	lsls	r2, r2, #8
    9e92:	4311      	orrs	r1, r2
    9e94:	799a      	ldrb	r2, [r3, #6]
    9e96:	0412      	lsls	r2, r2, #16
    9e98:	430a      	orrs	r2, r1
    9e9a:	79db      	ldrb	r3, [r3, #7]
    9e9c:	061b      	lsls	r3, r3, #24
    9e9e:	4313      	orrs	r3, r2
    9ea0:	9302      	str	r3, [sp, #8]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    9ea2:	9303      	str	r3, [sp, #12]
    9ea4:	2100      	movs	r1, #0
    9ea6:	2600      	movs	r6, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    9ea8:	46b9      	mov	r9, r7
    9eaa:	46bc      	mov	ip, r7
    9eac:	0037      	movs	r7, r6
    9eae:	e03a      	b.n	9f26 <SearchAvailableChannel1+0xce>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    9eb0:	2320      	movs	r3, #32
    9eb2:	4a68      	ldr	r2, [pc, #416]	; (a054 <SearchAvailableChannel1+0x1fc>)
    9eb4:	5cd3      	ldrb	r3, [r2, r3]
    9eb6:	069b      	lsls	r3, r3, #26
    9eb8:	d5df      	bpl.n	9e7a <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    9eba:	0011      	movs	r1, r2
    9ebc:	7d13      	ldrb	r3, [r2, #20]
    9ebe:	7d52      	ldrb	r2, [r2, #21]
    9ec0:	0212      	lsls	r2, r2, #8
    9ec2:	431a      	orrs	r2, r3
    9ec4:	7d8b      	ldrb	r3, [r1, #22]
    9ec6:	041b      	lsls	r3, r3, #16
    9ec8:	431a      	orrs	r2, r3
    9eca:	7dcb      	ldrb	r3, [r1, #23]
    9ecc:	061b      	lsls	r3, r3, #24
    9ece:	4313      	orrs	r3, r2
    9ed0:	7a18      	ldrb	r0, [r3, #8]
    9ed2:	4b61      	ldr	r3, [pc, #388]	; (a058 <SearchAvailableChannel1+0x200>)
    9ed4:	4798      	blx	r3
    9ed6:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    9ed8:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    9eda:	2b00      	cmp	r3, #0
    9edc:	d0cd      	beq.n	9e7a <SearchAvailableChannel1+0x22>
    9ede:	e053      	b.n	9f88 <SearchAvailableChannel1+0x130>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    9ee0:	7806      	ldrb	r6, [r0, #0]
    9ee2:	2e00      	cmp	r6, #0
    9ee4:	d100      	bne.n	9ee8 <SearchAvailableChannel1+0x90>
    9ee6:	e088      	b.n	9ffa <SearchAvailableChannel1+0x1a2>
    9ee8:	001e      	movs	r6, r3
    9eea:	459b      	cmp	fp, r3
    9eec:	d100      	bne.n	9ef0 <SearchAvailableChannel1+0x98>
    9eee:	e084      	b.n	9ffa <SearchAvailableChannel1+0x1a2>
					&&
    9ef0:	2b3f      	cmp	r3, #63	; 0x3f
    9ef2:	dc02      	bgt.n	9efa <SearchAvailableChannel1+0xa2>
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9ef4:	9f07      	ldr	r7, [sp, #28]
    9ef6:	4547      	cmp	r7, r8
    9ef8:	d06c      	beq.n	9fd4 <SearchAvailableChannel1+0x17c>
					|| 
    9efa:	2e40      	cmp	r6, #64	; 0x40
    9efc:	dc00      	bgt.n	9f00 <SearchAvailableChannel1+0xa8>
    9efe:	e07c      	b.n	9ffa <SearchAvailableChannel1+0x1a2>
					(((i+j) > MAX_CHANNELS_BANDWIDTH_125_AU_NA) && 
    9f00:	001e      	movs	r6, r3
    9f02:	3e40      	subs	r6, #64	; 0x40
    9f04:	9f08      	ldr	r7, [sp, #32]
    9f06:	42b7      	cmp	r7, r6
    9f08:	d000      	beq.n	9f0c <SearchAvailableChannel1+0xb4>
    9f0a:	e076      	b.n	9ffa <SearchAvailableChannel1+0x1a2>
    9f0c:	e08d      	b.n	a02a <SearchAvailableChannel1+0x1d2>
    9f0e:	9f01      	ldr	r7, [sp, #4]
    9f10:	9b00      	ldr	r3, [sp, #0]
    9f12:	469c      	mov	ip, r3
    9f14:	9b02      	ldr	r3, [sp, #8]
    9f16:	3310      	adds	r3, #16
    9f18:	9302      	str	r3, [sp, #8]
    9f1a:	9b03      	ldr	r3, [sp, #12]
    9f1c:	3310      	adds	r3, #16
    9f1e:	9303      	str	r3, [sp, #12]
    9f20:	9904      	ldr	r1, [sp, #16]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    9f22:	2909      	cmp	r1, #9
    9f24:	d00e      	beq.n	9f44 <SearchAvailableChannel1+0xec>
    9f26:	00cb      	lsls	r3, r1, #3
    9f28:	1c4a      	adds	r2, r1, #1
    9f2a:	9204      	str	r2, [sp, #16]
    9f2c:	001c      	movs	r4, r3
    9f2e:	3408      	adds	r4, #8
{
    9f30:	9803      	ldr	r0, [sp, #12]
    9f32:	9a02      	ldr	r2, [sp, #8]
								ChList[num][1] = k + 1;    
    9f34:	1c4e      	adds	r6, r1, #1
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    9f36:	b2c9      	uxtb	r1, r1
    9f38:	9701      	str	r7, [sp, #4]
    9f3a:	9605      	str	r6, [sp, #20]
    9f3c:	4688      	mov	r8, r1
    9f3e:	4661      	mov	r1, ip
    9f40:	9100      	str	r1, [sp, #0]
    9f42:	e060      	b.n	a006 <SearchAvailableChannel1+0x1ae>
    9f44:	1e3e      	subs	r6, r7, #0
    9f46:	4667      	mov	r7, ip
	if(0 != num)
    9f48:	d125      	bne.n	9f96 <SearchAvailableChannel1+0x13e>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9f4a:	4942      	ldr	r1, [pc, #264]	; (a054 <SearchAvailableChannel1+0x1fc>)
    9f4c:	232f      	movs	r3, #47	; 0x2f
    9f4e:	5ccc      	ldrb	r4, [r1, r3]
    9f50:	790b      	ldrb	r3, [r1, #4]
    9f52:	794a      	ldrb	r2, [r1, #5]
    9f54:	0212      	lsls	r2, r2, #8
    9f56:	431a      	orrs	r2, r3
    9f58:	798b      	ldrb	r3, [r1, #6]
    9f5a:	041b      	lsls	r3, r3, #16
    9f5c:	431a      	orrs	r2, r3
    9f5e:	79cb      	ldrb	r3, [r1, #7]
    9f60:	061b      	lsls	r3, r3, #24
    9f62:	4313      	orrs	r3, r2
    9f64:	0062      	lsls	r2, r4, #1
    9f66:	189b      	adds	r3, r3, r2
    9f68:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    9f6a:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9f6c:	2a00      	cmp	r2, #0
    9f6e:	d00b      	beq.n	9f88 <SearchAvailableChannel1+0x130>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    9f70:	785a      	ldrb	r2, [r3, #1]
    9f72:	0712      	lsls	r2, r2, #28
    9f74:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    9f76:	4297      	cmp	r7, r2
    9f78:	db06      	blt.n	9f88 <SearchAvailableChannel1+0x130>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    9f7a:	785b      	ldrb	r3, [r3, #1]
    9f7c:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    9f7e:	429f      	cmp	r7, r3
    9f80:	dc02      	bgt.n	9f88 <SearchAvailableChannel1+0x130>
			*channelIndex = RegParams.lastUsedChannelIndex;
    9f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9f84:	701c      	strb	r4, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9f86:	3808      	subs	r0, #8
}
    9f88:	b02f      	add	sp, #188	; 0xbc
    9f8a:	bc3c      	pop	{r2, r3, r4, r5}
    9f8c:	4690      	mov	r8, r2
    9f8e:	4699      	mov	r9, r3
    9f90:	46a2      	mov	sl, r4
    9f92:	46ab      	mov	fp, r5
    9f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    9f96:	4b31      	ldr	r3, [pc, #196]	; (a05c <SearchAvailableChannel1+0x204>)
    9f98:	4798      	blx	r3
    9f9a:	0031      	movs	r1, r6
    9f9c:	4b30      	ldr	r3, [pc, #192]	; (a060 <SearchAvailableChannel1+0x208>)
    9f9e:	4798      	blx	r3
    9fa0:	23ff      	movs	r3, #255	; 0xff
    9fa2:	400b      	ands	r3, r1
		*channelIndex = ChList[randomNumber][0];
    9fa4:	005b      	lsls	r3, r3, #1
    9fa6:	aa0a      	add	r2, sp, #40	; 0x28
    9fa8:	5c9a      	ldrb	r2, [r3, r2]
    9faa:	9909      	ldr	r1, [sp, #36]	; 0x24
    9fac:	700a      	strb	r2, [r1, #0]
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    9fae:	aa0a      	add	r2, sp, #40	; 0x28
    9fb0:	4694      	mov	ip, r2
    9fb2:	4463      	add	r3, ip
    9fb4:	785b      	ldrb	r3, [r3, #1]
		if(RegParams.cmnParams.paramsType1.lastUsedSB >= MAX_SUBBANDS)
    9fb6:	2b07      	cmp	r3, #7
    9fb8:	d805      	bhi.n	9fc6 <SearchAvailableChannel1+0x16e>
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    9fba:	2258      	movs	r2, #88	; 0x58
    9fbc:	32ff      	adds	r2, #255	; 0xff
    9fbe:	4925      	ldr	r1, [pc, #148]	; (a054 <SearchAvailableChannel1+0x1fc>)
    9fc0:	548b      	strb	r3, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9fc2:	2008      	movs	r0, #8
    9fc4:	e7e0      	b.n	9f88 <SearchAvailableChannel1+0x130>
				RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    9fc6:	2100      	movs	r1, #0
    9fc8:	2358      	movs	r3, #88	; 0x58
    9fca:	33ff      	adds	r3, #255	; 0xff
    9fcc:	4a21      	ldr	r2, [pc, #132]	; (a054 <SearchAvailableChannel1+0x1fc>)
    9fce:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9fd0:	2008      	movs	r0, #8
    9fd2:	e7d9      	b.n	9f88 <SearchAvailableChannel1+0x130>
						ChList[num][0] = i+j;
    9fd4:	9901      	ldr	r1, [sp, #4]
    9fd6:	9106      	str	r1, [sp, #24]
    9fd8:	0049      	lsls	r1, r1, #1
    9fda:	468c      	mov	ip, r1
    9fdc:	a90a      	add	r1, sp, #40	; 0x28
    9fde:	4666      	mov	r6, ip
    9fe0:	5473      	strb	r3, [r6, r1]
								ChList[num][1] = k + 1;    
    9fe2:	9906      	ldr	r1, [sp, #24]
    9fe4:	004e      	lsls	r6, r1, #1
    9fe6:	a90a      	add	r1, sp, #40	; 0x28
    9fe8:	468c      	mov	ip, r1
    9fea:	4466      	add	r6, ip
    9fec:	4669      	mov	r1, sp
    9fee:	7d09      	ldrb	r1, [r1, #20]
    9ff0:	7071      	strb	r1, [r6, #1]
						num++;
    9ff2:	9f01      	ldr	r7, [sp, #4]
    9ff4:	3701      	adds	r7, #1
    9ff6:	b2f9      	uxtb	r1, r7
    9ff8:	9101      	str	r1, [sp, #4]
    9ffa:	3202      	adds	r2, #2
    9ffc:	3002      	adds	r0, #2
    9ffe:	3301      	adds	r3, #1
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    a000:	42a3      	cmp	r3, r4
    a002:	d100      	bne.n	a006 <SearchAvailableChannel1+0x1ae>
    a004:	e783      	b.n	9f0e <SearchAvailableChannel1+0xb6>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    a006:	2d00      	cmp	r5, #0
    a008:	d100      	bne.n	a00c <SearchAvailableChannel1+0x1b4>
    a00a:	e769      	b.n	9ee0 <SearchAvailableChannel1+0x88>
    a00c:	7856      	ldrb	r6, [r2, #1]
    a00e:	0736      	lsls	r6, r6, #28
    a010:	0f36      	lsrs	r6, r6, #28
    a012:	9f00      	ldr	r7, [sp, #0]
    a014:	42b7      	cmp	r7, r6
    a016:	dbf0      	blt.n	9ffa <SearchAvailableChannel1+0x1a2>
    a018:	7856      	ldrb	r6, [r2, #1]
    a01a:	0936      	lsrs	r6, r6, #4
    a01c:	45b1      	cmp	r9, r6
    a01e:	dcec      	bgt.n	9ffa <SearchAvailableChannel1+0x1a2>
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    a020:	7816      	ldrb	r6, [r2, #0]
    a022:	2e00      	cmp	r6, #0
    a024:	d0e9      	beq.n	9ffa <SearchAvailableChannel1+0x1a2>
    a026:	459b      	cmp	fp, r3
    a028:	d0e7      	beq.n	9ffa <SearchAvailableChannel1+0x1a2>
						ChList[num][0] = i+j;
    a02a:	9901      	ldr	r1, [sp, #4]
    a02c:	9106      	str	r1, [sp, #24]
    a02e:	b2de      	uxtb	r6, r3
    a030:	46b4      	mov	ip, r6
    a032:	004e      	lsls	r6, r1, #1
    a034:	af0a      	add	r7, sp, #40	; 0x28
    a036:	4661      	mov	r1, ip
    a038:	55f1      	strb	r1, [r6, r7]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    a03a:	2b3f      	cmp	r3, #63	; 0x3f
    a03c:	ddd1      	ble.n	9fe2 <SearchAvailableChannel1+0x18a>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    a03e:	46ba      	mov	sl, r7
    a040:	4456      	add	r6, sl
    a042:	213f      	movs	r1, #63	; 0x3f
    a044:	4249      	negs	r1, r1
    a046:	468a      	mov	sl, r1
    a048:	44d4      	add	ip, sl
    a04a:	4661      	mov	r1, ip
    a04c:	7071      	strb	r1, [r6, #1]
    a04e:	e7d0      	b.n	9ff2 <SearchAvailableChannel1+0x19a>
    a050:	00019e41 	.word	0x00019e41
    a054:	200024d0 	.word	0x200024d0
    a058:	0000ef39 	.word	0x0000ef39
    a05c:	00019fe1 	.word	0x00019fe1
    a060:	00016899 	.word	0x00016899

0000a064 <LORAREG_GetAttr_FreeChannel1>:
{
    a064:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    a066:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    a068:	202a      	movs	r0, #42	; 0x2a
    a06a:	4d07      	ldr	r5, [pc, #28]	; (a088 <LORAREG_GetAttr_FreeChannel1+0x24>)
    a06c:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    a06e:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    a070:	42ac      	cmp	r4, r5
    a072:	dd00      	ble.n	a076 <LORAREG_GetAttr_FreeChannel1+0x12>
}
    a074:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    a076:	7888      	ldrb	r0, [r1, #2]
    a078:	7809      	ldrb	r1, [r1, #0]
    a07a:	0013      	movs	r3, r2
    a07c:	0002      	movs	r2, r0
    a07e:	0020      	movs	r0, r4
    a080:	4c02      	ldr	r4, [pc, #8]	; (a08c <LORAREG_GetAttr_FreeChannel1+0x28>)
    a082:	47a0      	blx	r4
	return result;
    a084:	e7f6      	b.n	a074 <LORAREG_GetAttr_FreeChannel1+0x10>
    a086:	46c0      	nop			; (mov r8, r8)
    a088:	200024d0 	.word	0x200024d0
    a08c:	00009e59 	.word	0x00009e59

0000a090 <setEnableAllChs>:
{
    a090:	b570      	push	{r4, r5, r6, lr}
    a092:	2000      	movs	r0, #0
		RegParams.pChParams[i].status = ENABLED;	
    a094:	4915      	ldr	r1, [pc, #84]	; (a0ec <setEnableAllChs+0x5c>)
    a096:	2401      	movs	r4, #1
    a098:	790b      	ldrb	r3, [r1, #4]
    a09a:	794a      	ldrb	r2, [r1, #5]
    a09c:	0212      	lsls	r2, r2, #8
    a09e:	431a      	orrs	r2, r3
    a0a0:	798b      	ldrb	r3, [r1, #6]
    a0a2:	041b      	lsls	r3, r3, #16
    a0a4:	431a      	orrs	r2, r3
    a0a6:	79cb      	ldrb	r3, [r1, #7]
    a0a8:	061b      	lsls	r3, r3, #24
    a0aa:	4313      	orrs	r3, r2
    a0ac:	541c      	strb	r4, [r3, r0]
    a0ae:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    a0b0:	2890      	cmp	r0, #144	; 0x90
    a0b2:	d1f1      	bne.n	a098 <setEnableAllChs+0x8>
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    a0b4:	4c0d      	ldr	r4, [pc, #52]	; (a0ec <setEnableAllChs+0x5c>)
    a0b6:	2200      	movs	r2, #0
    a0b8:	2358      	movs	r3, #88	; 0x58
    a0ba:	33ff      	adds	r3, #255	; 0xff
    a0bc:	54e2      	strb	r2, [r4, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a0be:	4b0c      	ldr	r3, [pc, #48]	; (a0f0 <setEnableAllChs+0x60>)
    a0c0:	5ce3      	ldrb	r3, [r4, r3]
    a0c2:	4a0c      	ldr	r2, [pc, #48]	; (a0f4 <setEnableAllChs+0x64>)
    a0c4:	5ca0      	ldrb	r0, [r4, r2]
    a0c6:	0200      	lsls	r0, r0, #8
    a0c8:	4318      	orrs	r0, r3
    a0ca:	b2c1      	uxtb	r1, r0
    a0cc:	0a00      	lsrs	r0, r0, #8
    a0ce:	4d0a      	ldr	r5, [pc, #40]	; (a0f8 <setEnableAllChs+0x68>)
    a0d0:	47a8      	blx	r5
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
    a0d2:	2383      	movs	r3, #131	; 0x83
    a0d4:	009b      	lsls	r3, r3, #2
    a0d6:	5ce3      	ldrb	r3, [r4, r3]
    a0d8:	4a08      	ldr	r2, [pc, #32]	; (a0fc <setEnableAllChs+0x6c>)
    a0da:	5ca0      	ldrb	r0, [r4, r2]
    a0dc:	0200      	lsls	r0, r0, #8
    a0de:	4318      	orrs	r0, r3
    a0e0:	b2c1      	uxtb	r1, r0
    a0e2:	0a00      	lsrs	r0, r0, #8
    a0e4:	47a8      	blx	r5
}
    a0e6:	2008      	movs	r0, #8
    a0e8:	bd70      	pop	{r4, r5, r6, pc}
    a0ea:	46c0      	nop			; (mov r8, r8)
    a0ec:	200024d0 	.word	0x200024d0
    a0f0:	0000020e 	.word	0x0000020e
    a0f4:	0000020f 	.word	0x0000020f
    a0f8:	0000e071 	.word	0x0000e071
    a0fc:	0000020d 	.word	0x0000020d

0000a100 <setJoinSuccess>:
{
    a100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(RegParams.cmnParams.paramsType1.lastUsedSB == 0)
    a102:	2358      	movs	r3, #88	; 0x58
    a104:	33ff      	adds	r3, #255	; 0xff
    a106:	4a1a      	ldr	r2, [pc, #104]	; (a170 <setJoinSuccess+0x70>)
    a108:	5cd7      	ldrb	r7, [r2, r3]
    a10a:	2f00      	cmp	r7, #0
    a10c:	d100      	bne.n	a110 <setJoinSuccess+0x10>
		lastUsedSB = 8;
    a10e:	3708      	adds	r7, #8
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    a110:	1e7c      	subs	r4, r7, #1
    a112:	00e4      	lsls	r4, r4, #3
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    a114:	0026      	movs	r6, r4
    a116:	3608      	adds	r6, #8
    a118:	2300      	movs	r3, #0
			RegParams.pChParams[i].status = DISABLED;	
    a11a:	4815      	ldr	r0, [pc, #84]	; (a170 <setJoinSuccess+0x70>)
    a11c:	2500      	movs	r5, #0
			|| ((i >= MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (i != lastUsedSB + MAX_CHANNELS_BANDWIDTH_125_AU_NA - 1)))
    a11e:	373f      	adds	r7, #63	; 0x3f
    a120:	e010      	b.n	a144 <setJoinSuccess+0x44>
    a122:	429f      	cmp	r7, r3
    a124:	d00b      	beq.n	a13e <setJoinSuccess+0x3e>
			RegParams.pChParams[i].status = DISABLED;	
    a126:	7902      	ldrb	r2, [r0, #4]
    a128:	7941      	ldrb	r1, [r0, #5]
    a12a:	0209      	lsls	r1, r1, #8
    a12c:	4311      	orrs	r1, r2
    a12e:	7982      	ldrb	r2, [r0, #6]
    a130:	0412      	lsls	r2, r2, #16
    a132:	4311      	orrs	r1, r2
    a134:	79c2      	ldrb	r2, [r0, #7]
    a136:	0612      	lsls	r2, r2, #24
    a138:	430a      	orrs	r2, r1
    a13a:	0059      	lsls	r1, r3, #1
    a13c:	548d      	strb	r5, [r1, r2]
    a13e:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    a140:	2b48      	cmp	r3, #72	; 0x48
    a142:	d007      	beq.n	a154 <setJoinSuccess+0x54>
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    a144:	b2da      	uxtb	r2, r3
    a146:	2a3f      	cmp	r2, #63	; 0x3f
    a148:	d8eb      	bhi.n	a122 <setJoinSuccess+0x22>
    a14a:	429c      	cmp	r4, r3
    a14c:	dceb      	bgt.n	a126 <setJoinSuccess+0x26>
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    a14e:	429e      	cmp	r6, r3
    a150:	dde9      	ble.n	a126 <setJoinSuccess+0x26>
    a152:	e7f4      	b.n	a13e <setJoinSuccess+0x3e>
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a154:	4b06      	ldr	r3, [pc, #24]	; (a170 <setJoinSuccess+0x70>)
    a156:	4a07      	ldr	r2, [pc, #28]	; (a174 <setJoinSuccess+0x74>)
    a158:	5c9a      	ldrb	r2, [r3, r2]
    a15a:	4907      	ldr	r1, [pc, #28]	; (a178 <setJoinSuccess+0x78>)
    a15c:	5c58      	ldrb	r0, [r3, r1]
    a15e:	0200      	lsls	r0, r0, #8
    a160:	4310      	orrs	r0, r2
    a162:	b2c1      	uxtb	r1, r0
    a164:	0a00      	lsrs	r0, r0, #8
    a166:	4b05      	ldr	r3, [pc, #20]	; (a17c <setJoinSuccess+0x7c>)
    a168:	4798      	blx	r3
}
    a16a:	2008      	movs	r0, #8
    a16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a16e:	46c0      	nop			; (mov r8, r8)
    a170:	200024d0 	.word	0x200024d0
    a174:	0000020e 	.word	0x0000020e
    a178:	0000020f 	.word	0x0000020f
    a17c:	0000e071 	.word	0x0000e071

0000a180 <UpdateChannelIdStatus>:
{
    a180:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    a182:	232a      	movs	r3, #42	; 0x2a
    a184:	4a13      	ldr	r2, [pc, #76]	; (a1d4 <UpdateChannelIdStatus+0x54>)
    a186:	56d3      	ldrsb	r3, [r2, r3]
    a188:	4298      	cmp	r0, r3
    a18a:	db0b      	blt.n	a1a4 <UpdateChannelIdStatus+0x24>
    a18c:	232e      	movs	r3, #46	; 0x2e
    a18e:	5cd2      	ldrb	r2, [r2, r3]
    a190:	3b22      	subs	r3, #34	; 0x22
    a192:	4113      	asrs	r3, r2
    a194:	07db      	lsls	r3, r3, #31
    a196:	d41c      	bmi.n	a1d2 <UpdateChannelIdStatus+0x52>
    a198:	23e0      	movs	r3, #224	; 0xe0
    a19a:	005b      	lsls	r3, r3, #1
    a19c:	4a0d      	ldr	r2, [pc, #52]	; (a1d4 <UpdateChannelIdStatus+0x54>)
    a19e:	5cd3      	ldrb	r3, [r2, r3]
    a1a0:	4283      	cmp	r3, r0
    a1a2:	d816      	bhi.n	a1d2 <UpdateChannelIdStatus+0x52>
		RegParams.pChParams[chid].status = statusNew;
    a1a4:	4b0b      	ldr	r3, [pc, #44]	; (a1d4 <UpdateChannelIdStatus+0x54>)
    a1a6:	791a      	ldrb	r2, [r3, #4]
    a1a8:	795c      	ldrb	r4, [r3, #5]
    a1aa:	0224      	lsls	r4, r4, #8
    a1ac:	4314      	orrs	r4, r2
    a1ae:	799a      	ldrb	r2, [r3, #6]
    a1b0:	0412      	lsls	r2, r2, #16
    a1b2:	4314      	orrs	r4, r2
    a1b4:	79da      	ldrb	r2, [r3, #7]
    a1b6:	0612      	lsls	r2, r2, #24
    a1b8:	4322      	orrs	r2, r4
    a1ba:	0040      	lsls	r0, r0, #1
    a1bc:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a1be:	4a06      	ldr	r2, [pc, #24]	; (a1d8 <UpdateChannelIdStatus+0x58>)
    a1c0:	5c9a      	ldrb	r2, [r3, r2]
    a1c2:	4906      	ldr	r1, [pc, #24]	; (a1dc <UpdateChannelIdStatus+0x5c>)
    a1c4:	5c58      	ldrb	r0, [r3, r1]
    a1c6:	0200      	lsls	r0, r0, #8
    a1c8:	4310      	orrs	r0, r2
    a1ca:	b2c1      	uxtb	r1, r0
    a1cc:	0a00      	lsrs	r0, r0, #8
    a1ce:	4b04      	ldr	r3, [pc, #16]	; (a1e0 <UpdateChannelIdStatus+0x60>)
    a1d0:	4798      	blx	r3
}
    a1d2:	bd10      	pop	{r4, pc}
    a1d4:	200024d0 	.word	0x200024d0
    a1d8:	0000020e 	.word	0x0000020e
    a1dc:	0000020f 	.word	0x0000020f
    a1e0:	0000e071 	.word	0x0000e071

0000a1e4 <EnableChannels2>:
{
    a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1e6:	46ce      	mov	lr, r9
    a1e8:	4647      	mov	r7, r8
    a1ea:	b580      	push	{r7, lr}
    a1ec:	0004      	movs	r4, r0
    a1ee:	000f      	movs	r7, r1
    a1f0:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    a1f2:	4288      	cmp	r0, r1
    a1f4:	d812      	bhi.n	a21c <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    a1f6:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    a1f8:	4b0a      	ldr	r3, [pc, #40]	; (a224 <EnableChannels2+0x40>)
    a1fa:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    a1fc:	4698      	mov	r8, r3
    a1fe:	e007      	b.n	a210 <EnableChannels2+0x2c>
    a200:	2100      	movs	r1, #0
    a202:	0020      	movs	r0, r4
    a204:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    a206:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    a208:	3401      	adds	r4, #1
    a20a:	b2e4      	uxtb	r4, r4
    a20c:	42a7      	cmp	r7, r4
    a20e:	d305      	bcc.n	a21c <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    a210:	422e      	tst	r6, r5
    a212:	d0f5      	beq.n	a200 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    a214:	0031      	movs	r1, r6
    a216:	0020      	movs	r0, r4
    a218:	47c8      	blx	r9
    a21a:	e7f4      	b.n	a206 <EnableChannels2+0x22>
}
    a21c:	bc0c      	pop	{r2, r3}
    a21e:	4690      	mov	r8, r2
    a220:	4699      	mov	r9, r3
    a222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a224:	0000a181 	.word	0x0000a181

0000a228 <UpdateChannelIdStatusT2>:
{
    a228:	b570      	push	{r4, r5, r6, lr}
    a22a:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    a22c:	232a      	movs	r3, #42	; 0x2a
    a22e:	4a3f      	ldr	r2, [pc, #252]	; (a32c <UpdateChannelIdStatusT2+0x104>)
    a230:	56d3      	ldrsb	r3, [r2, r3]
    a232:	4298      	cmp	r0, r3
    a234:	da17      	bge.n	a266 <UpdateChannelIdStatusT2+0x3e>
    a236:	23e0      	movs	r3, #224	; 0xe0
    a238:	005b      	lsls	r3, r3, #1
    a23a:	5cd3      	ldrb	r3, [r2, r3]
    a23c:	4283      	cmp	r3, r0
    a23e:	d812      	bhi.n	a266 <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    a240:	0045      	lsls	r5, r0, #1
    a242:	182d      	adds	r5, r5, r0
    a244:	00ad      	lsls	r5, r5, #2
    a246:	0011      	movs	r1, r2
    a248:	7a13      	ldrb	r3, [r2, #8]
    a24a:	7a52      	ldrb	r2, [r2, #9]
    a24c:	0212      	lsls	r2, r2, #8
    a24e:	431a      	orrs	r2, r3
    a250:	7a8b      	ldrb	r3, [r1, #10]
    a252:	041b      	lsls	r3, r3, #16
    a254:	431a      	orrs	r2, r3
    a256:	7acb      	ldrb	r3, [r1, #11]
    a258:	061b      	lsls	r3, r3, #24
    a25a:	4313      	orrs	r3, r2
    a25c:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    a25e:	7adb      	ldrb	r3, [r3, #11]
    a260:	43db      	mvns	r3, r3
    a262:	079b      	lsls	r3, r3, #30
    a264:	d000      	beq.n	a268 <UpdateChannelIdStatusT2+0x40>
}
    a266:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    a268:	000e      	movs	r6, r1
    a26a:	790b      	ldrb	r3, [r1, #4]
    a26c:	794a      	ldrb	r2, [r1, #5]
    a26e:	0212      	lsls	r2, r2, #8
    a270:	431a      	orrs	r2, r3
    a272:	798b      	ldrb	r3, [r1, #6]
    a274:	041b      	lsls	r3, r3, #16
    a276:	431a      	orrs	r2, r3
    a278:	79cb      	ldrb	r3, [r1, #7]
    a27a:	061b      	lsls	r3, r3, #24
    a27c:	4313      	orrs	r3, r2
    a27e:	0040      	lsls	r0, r0, #1
    a280:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a282:	4b2b      	ldr	r3, [pc, #172]	; (a330 <UpdateChannelIdStatusT2+0x108>)
    a284:	5ccb      	ldrb	r3, [r1, r3]
    a286:	4a2b      	ldr	r2, [pc, #172]	; (a334 <UpdateChannelIdStatusT2+0x10c>)
    a288:	5c88      	ldrb	r0, [r1, r2]
    a28a:	0200      	lsls	r0, r0, #8
    a28c:	4318      	orrs	r0, r3
    a28e:	b2c1      	uxtb	r1, r0
    a290:	0a00      	lsrs	r0, r0, #8
    a292:	4b29      	ldr	r3, [pc, #164]	; (a338 <UpdateChannelIdStatusT2+0x110>)
    a294:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    a296:	232e      	movs	r3, #46	; 0x2e
    a298:	5cf2      	ldrb	r2, [r6, r3]
    a29a:	3b2b      	subs	r3, #43	; 0x2b
    a29c:	4113      	asrs	r3, r2
    a29e:	07db      	lsls	r3, r3, #31
    a2a0:	d5e1      	bpl.n	a266 <UpdateChannelIdStatusT2+0x3e>
    a2a2:	2c00      	cmp	r4, #0
    a2a4:	d1df      	bne.n	a266 <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    a2a6:	4b21      	ldr	r3, [pc, #132]	; (a32c <UpdateChannelIdStatusT2+0x104>)
    a2a8:	7a18      	ldrb	r0, [r3, #8]
    a2aa:	7a5a      	ldrb	r2, [r3, #9]
    a2ac:	0212      	lsls	r2, r2, #8
    a2ae:	4302      	orrs	r2, r0
    a2b0:	7a98      	ldrb	r0, [r3, #10]
    a2b2:	0400      	lsls	r0, r0, #16
    a2b4:	4302      	orrs	r2, r0
    a2b6:	7ad8      	ldrb	r0, [r3, #11]
    a2b8:	0600      	lsls	r0, r0, #24
    a2ba:	4310      	orrs	r0, r2
    a2bc:	1945      	adds	r5, r0, r5
    a2be:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    a2c0:	222a      	movs	r2, #42	; 0x2a
    a2c2:	569c      	ldrsb	r4, [r3, r2]
    a2c4:	2c00      	cmp	r4, #0
    a2c6:	dd1c      	ble.n	a302 <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    a2c8:	001a      	movs	r2, r3
    a2ca:	7919      	ldrb	r1, [r3, #4]
    a2cc:	795b      	ldrb	r3, [r3, #5]
    a2ce:	021b      	lsls	r3, r3, #8
    a2d0:	430b      	orrs	r3, r1
    a2d2:	7991      	ldrb	r1, [r2, #6]
    a2d4:	0409      	lsls	r1, r1, #16
    a2d6:	430b      	orrs	r3, r1
    a2d8:	79d1      	ldrb	r1, [r2, #7]
    a2da:	0609      	lsls	r1, r1, #24
    a2dc:	4319      	orrs	r1, r3
    a2de:	2300      	movs	r3, #0
    a2e0:	e003      	b.n	a2ea <UpdateChannelIdStatusT2+0xc2>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    a2e2:	3301      	adds	r3, #1
    a2e4:	b2db      	uxtb	r3, r3
    a2e6:	42a3      	cmp	r3, r4
    a2e8:	da0b      	bge.n	a302 <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    a2ea:	005a      	lsls	r2, r3, #1
    a2ec:	5c52      	ldrb	r2, [r2, r1]
    a2ee:	2a00      	cmp	r2, #0
    a2f0:	d0f7      	beq.n	a2e2 <UpdateChannelIdStatusT2+0xba>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    a2f2:	005a      	lsls	r2, r3, #1
    a2f4:	18d2      	adds	r2, r2, r3
    a2f6:	0092      	lsls	r2, r2, #2
    a2f8:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    a2fa:	7a12      	ldrb	r2, [r2, #8]
    a2fc:	42aa      	cmp	r2, r5
    a2fe:	d1f0      	bne.n	a2e2 <UpdateChannelIdStatusT2+0xba>
    a300:	e7b1      	b.n	a266 <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    a302:	490a      	ldr	r1, [pc, #40]	; (a32c <UpdateChannelIdStatusT2+0x104>)
    a304:	7b0a      	ldrb	r2, [r1, #12]
    a306:	7b4b      	ldrb	r3, [r1, #13]
    a308:	021b      	lsls	r3, r3, #8
    a30a:	4313      	orrs	r3, r2
    a30c:	7b8a      	ldrb	r2, [r1, #14]
    a30e:	0412      	lsls	r2, r2, #16
    a310:	4313      	orrs	r3, r2
    a312:	7bca      	ldrb	r2, [r1, #15]
    a314:	0612      	lsls	r2, r2, #24
    a316:	431a      	orrs	r2, r3
    a318:	006b      	lsls	r3, r5, #1
    a31a:	195d      	adds	r5, r3, r5
    a31c:	00ad      	lsls	r5, r5, #2
    a31e:	18ad      	adds	r5, r5, r2
    a320:	2300      	movs	r3, #0
    a322:	722b      	strb	r3, [r5, #8]
    a324:	726b      	strb	r3, [r5, #9]
    a326:	72ab      	strb	r3, [r5, #10]
    a328:	72eb      	strb	r3, [r5, #11]
    a32a:	e79c      	b.n	a266 <UpdateChannelIdStatusT2+0x3e>
    a32c:	200024d0 	.word	0x200024d0
    a330:	0000020e 	.word	0x0000020e
    a334:	0000020f 	.word	0x0000020f
    a338:	0000e071 	.word	0x0000e071

0000a33c <setChannelIdStatusT2>:
{
    a33c:	b570      	push	{r4, r5, r6, lr}
    a33e:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    a340:	780d      	ldrb	r5, [r1, #0]
    a342:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    a344:	a901      	add	r1, sp, #4
    a346:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = /*WITHOUT_DEFAULT_CHANNELS*/ALL_CHANNELS;
    a348:	2301      	movs	r3, #1
    a34a:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    a34c:	2015      	movs	r0, #21
    a34e:	4b0c      	ldr	r3, [pc, #48]	; (a380 <setChannelIdStatusT2+0x44>)
    a350:	4798      	blx	r3
    a352:	0004      	movs	r4, r0
    a354:	2808      	cmp	r0, #8
    a356:	d003      	beq.n	a360 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    a358:	240a      	movs	r4, #10
}
    a35a:	0020      	movs	r0, r4
    a35c:	b002      	add	sp, #8
    a35e:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    a360:	232e      	movs	r3, #46	; 0x2e
    a362:	4a08      	ldr	r2, [pc, #32]	; (a384 <setChannelIdStatusT2+0x48>)
    a364:	5cd3      	ldrb	r3, [r2, r3]
    a366:	2b0f      	cmp	r3, #15
    a368:	d004      	beq.n	a374 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    a36a:	0031      	movs	r1, r6
    a36c:	0028      	movs	r0, r5
    a36e:	4b06      	ldr	r3, [pc, #24]	; (a388 <setChannelIdStatusT2+0x4c>)
    a370:	4798      	blx	r3
    a372:	e7f2      	b.n	a35a <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    a374:	0031      	movs	r1, r6
    a376:	0028      	movs	r0, r5
    a378:	4b04      	ldr	r3, [pc, #16]	; (a38c <setChannelIdStatusT2+0x50>)
    a37a:	4798      	blx	r3
    a37c:	e7ed      	b.n	a35a <setChannelIdStatusT2+0x1e>
    a37e:	46c0      	nop			; (mov r8, r8)
    a380:	000099cd 	.word	0x000099cd
    a384:	200024d0 	.word	0x200024d0
    a388:	0000a229 	.word	0x0000a229
    a38c:	0000a181 	.word	0x0000a181

0000a390 <UpdateChannelIdStatusT4>:
{
    a390:	b570      	push	{r4, r5, r6, lr}
    a392:	0004      	movs	r4, r0
    a394:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    a396:	4923      	ldr	r1, [pc, #140]	; (a424 <UpdateChannelIdStatusT4+0x94>)
    a398:	790b      	ldrb	r3, [r1, #4]
    a39a:	794a      	ldrb	r2, [r1, #5]
    a39c:	0212      	lsls	r2, r2, #8
    a39e:	431a      	orrs	r2, r3
    a3a0:	798b      	ldrb	r3, [r1, #6]
    a3a2:	041b      	lsls	r3, r3, #16
    a3a4:	431a      	orrs	r2, r3
    a3a6:	79cb      	ldrb	r3, [r1, #7]
    a3a8:	061b      	lsls	r3, r3, #24
    a3aa:	4313      	orrs	r3, r2
    a3ac:	0042      	lsls	r2, r0, #1
    a3ae:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a3b0:	4b1d      	ldr	r3, [pc, #116]	; (a428 <UpdateChannelIdStatusT4+0x98>)
    a3b2:	5ccb      	ldrb	r3, [r1, r3]
    a3b4:	4a1d      	ldr	r2, [pc, #116]	; (a42c <UpdateChannelIdStatusT4+0x9c>)
    a3b6:	5c88      	ldrb	r0, [r1, r2]
    a3b8:	0200      	lsls	r0, r0, #8
    a3ba:	4318      	orrs	r0, r3
    a3bc:	b2c1      	uxtb	r1, r0
    a3be:	0a00      	lsrs	r0, r0, #8
    a3c0:	4b1b      	ldr	r3, [pc, #108]	; (a430 <UpdateChannelIdStatusT4+0xa0>)
    a3c2:	4798      	blx	r3
	if(statusNew == ENABLED)
    a3c4:	2d00      	cmp	r5, #0
    a3c6:	d029      	beq.n	a41c <UpdateChannelIdStatusT4+0x8c>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    a3c8:	4a16      	ldr	r2, [pc, #88]	; (a424 <UpdateChannelIdStatusT4+0x94>)
    a3ca:	7a10      	ldrb	r0, [r2, #8]
    a3cc:	7a53      	ldrb	r3, [r2, #9]
    a3ce:	021b      	lsls	r3, r3, #8
    a3d0:	4303      	orrs	r3, r0
    a3d2:	7a90      	ldrb	r0, [r2, #10]
    a3d4:	0400      	lsls	r0, r0, #16
    a3d6:	4303      	orrs	r3, r0
    a3d8:	7ad0      	ldrb	r0, [r2, #11]
    a3da:	0600      	lsls	r0, r0, #24
    a3dc:	4318      	orrs	r0, r3
    a3de:	0063      	lsls	r3, r4, #1
    a3e0:	191c      	adds	r4, r3, r4
    a3e2:	00a4      	lsls	r4, r4, #2
    a3e4:	1900      	adds	r0, r0, r4
    a3e6:	7803      	ldrb	r3, [r0, #0]
    a3e8:	7842      	ldrb	r2, [r0, #1]
    a3ea:	0212      	lsls	r2, r2, #8
    a3ec:	431a      	orrs	r2, r3
    a3ee:	7883      	ldrb	r3, [r0, #2]
    a3f0:	041b      	lsls	r3, r3, #16
    a3f2:	431a      	orrs	r2, r3
    a3f4:	78c3      	ldrb	r3, [r0, #3]
    a3f6:	061b      	lsls	r3, r3, #24
    a3f8:	4313      	orrs	r3, r2
    a3fa:	4a0e      	ldr	r2, [pc, #56]	; (a434 <UpdateChannelIdStatusT4+0xa4>)
    a3fc:	4293      	cmp	r3, r2
    a3fe:	d80e      	bhi.n	a41e <UpdateChannelIdStatusT4+0x8e>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_LF;
    a400:	230a      	movs	r3, #10
    a402:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    a404:	4b07      	ldr	r3, [pc, #28]	; (a424 <UpdateChannelIdStatusT4+0x94>)
    a406:	2284      	movs	r2, #132	; 0x84
    a408:	0092      	lsls	r2, r2, #2
    a40a:	5c9a      	ldrb	r2, [r3, r2]
    a40c:	490a      	ldr	r1, [pc, #40]	; (a438 <UpdateChannelIdStatusT4+0xa8>)
    a40e:	5c58      	ldrb	r0, [r3, r1]
    a410:	0200      	lsls	r0, r0, #8
    a412:	4310      	orrs	r0, r2
    a414:	b2c1      	uxtb	r1, r0
    a416:	0a00      	lsrs	r0, r0, #8
    a418:	4b05      	ldr	r3, [pc, #20]	; (a430 <UpdateChannelIdStatusT4+0xa0>)
    a41a:	4798      	blx	r3
}
    a41c:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_KR_HF;
    a41e:	230e      	movs	r3, #14
    a420:	7283      	strb	r3, [r0, #10]
    a422:	e7ef      	b.n	a404 <UpdateChannelIdStatusT4+0x74>
    a424:	200024d0 	.word	0x200024d0
    a428:	0000020e 	.word	0x0000020e
    a42c:	0000020f 	.word	0x0000020f
    a430:	0000e071 	.word	0x0000e071
    a434:	36f6211f 	.word	0x36f6211f
    a438:	00000211 	.word	0x00000211

0000a43c <UpdateChannelIdStatusT3>:
{
    a43c:	b570      	push	{r4, r5, r6, lr}
    a43e:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    a440:	4c17      	ldr	r4, [pc, #92]	; (a4a0 <UpdateChannelIdStatusT3+0x64>)
    a442:	7923      	ldrb	r3, [r4, #4]
    a444:	7962      	ldrb	r2, [r4, #5]
    a446:	0212      	lsls	r2, r2, #8
    a448:	431a      	orrs	r2, r3
    a44a:	79a3      	ldrb	r3, [r4, #6]
    a44c:	041b      	lsls	r3, r3, #16
    a44e:	431a      	orrs	r2, r3
    a450:	79e3      	ldrb	r3, [r4, #7]
    a452:	061b      	lsls	r3, r3, #24
    a454:	4313      	orrs	r3, r2
    a456:	0042      	lsls	r2, r0, #1
    a458:	54d1      	strb	r1, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a45a:	4b12      	ldr	r3, [pc, #72]	; (a4a4 <UpdateChannelIdStatusT3+0x68>)
    a45c:	5ce3      	ldrb	r3, [r4, r3]
    a45e:	4a12      	ldr	r2, [pc, #72]	; (a4a8 <UpdateChannelIdStatusT3+0x6c>)
    a460:	5ca0      	ldrb	r0, [r4, r2]
    a462:	0200      	lsls	r0, r0, #8
    a464:	4318      	orrs	r0, r3
    a466:	b2c1      	uxtb	r1, r0
    a468:	0a00      	lsrs	r0, r0, #8
    a46a:	4e10      	ldr	r6, [pc, #64]	; (a4ac <UpdateChannelIdStatusT3+0x70>)
    a46c:	47b0      	blx	r6
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    a46e:	2384      	movs	r3, #132	; 0x84
    a470:	009b      	lsls	r3, r3, #2
    a472:	5ce3      	ldrb	r3, [r4, r3]
    a474:	4a0e      	ldr	r2, [pc, #56]	; (a4b0 <UpdateChannelIdStatusT3+0x74>)
    a476:	5ca0      	ldrb	r0, [r4, r2]
    a478:	0200      	lsls	r0, r0, #8
    a47a:	4318      	orrs	r0, r3
    a47c:	b2c1      	uxtb	r1, r0
    a47e:	0a00      	lsrs	r0, r0, #8
    a480:	47b0      	blx	r6
	if( RegParams.band == ISM_JPN923)
    a482:	232e      	movs	r3, #46	; 0x2e
    a484:	5ce3      	ldrb	r3, [r4, r3]
    a486:	2b05      	cmp	r3, #5
    a488:	d000      	beq.n	a48c <UpdateChannelIdStatusT3+0x50>
}
    a48a:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    a48c:	3558      	adds	r5, #88	; 0x58
    a48e:	00ad      	lsls	r5, r5, #2
    a490:	4b03      	ldr	r3, [pc, #12]	; (a4a0 <UpdateChannelIdStatusT3+0x64>)
    a492:	195d      	adds	r5, r3, r5
    a494:	2300      	movs	r3, #0
    a496:	722b      	strb	r3, [r5, #8]
    a498:	726b      	strb	r3, [r5, #9]
    a49a:	72ab      	strb	r3, [r5, #10]
    a49c:	72eb      	strb	r3, [r5, #11]
}
    a49e:	e7f4      	b.n	a48a <UpdateChannelIdStatusT3+0x4e>
    a4a0:	200024d0 	.word	0x200024d0
    a4a4:	0000020e 	.word	0x0000020e
    a4a8:	0000020f 	.word	0x0000020f
    a4ac:	0000e071 	.word	0x0000e071
    a4b0:	00000211 	.word	0x00000211

0000a4b4 <setChannelIdStatusT3>:
{
    a4b4:	b570      	push	{r4, r5, r6, lr}
    a4b6:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    a4b8:	780d      	ldrb	r5, [r1, #0]
    a4ba:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    a4bc:	a901      	add	r1, sp, #4
    a4be:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    a4c0:	2301      	movs	r3, #1
    a4c2:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    a4c4:	2015      	movs	r0, #21
    a4c6:	4b0c      	ldr	r3, [pc, #48]	; (a4f8 <setChannelIdStatusT3+0x44>)
    a4c8:	4798      	blx	r3
    a4ca:	0004      	movs	r4, r0
    a4cc:	2808      	cmp	r0, #8
    a4ce:	d003      	beq.n	a4d8 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    a4d0:	240a      	movs	r4, #10
}
    a4d2:	0020      	movs	r0, r4
    a4d4:	b002      	add	sp, #8
    a4d6:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    a4d8:	232e      	movs	r3, #46	; 0x2e
    a4da:	4a08      	ldr	r2, [pc, #32]	; (a4fc <setChannelIdStatusT3+0x48>)
    a4dc:	5cd3      	ldrb	r3, [r2, r3]
    a4de:	2b04      	cmp	r3, #4
    a4e0:	d004      	beq.n	a4ec <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    a4e2:	0031      	movs	r1, r6
    a4e4:	0028      	movs	r0, r5
    a4e6:	4b06      	ldr	r3, [pc, #24]	; (a500 <setChannelIdStatusT3+0x4c>)
    a4e8:	4798      	blx	r3
    a4ea:	e7f2      	b.n	a4d2 <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    a4ec:	0031      	movs	r1, r6
    a4ee:	0028      	movs	r0, r5
    a4f0:	4b04      	ldr	r3, [pc, #16]	; (a504 <setChannelIdStatusT3+0x50>)
    a4f2:	4798      	blx	r3
    a4f4:	e7ed      	b.n	a4d2 <setChannelIdStatusT3+0x1e>
    a4f6:	46c0      	nop			; (mov r8, r8)
    a4f8:	000099cd 	.word	0x000099cd
    a4fc:	200024d0 	.word	0x200024d0
    a500:	0000a43d 	.word	0x0000a43d
    a504:	0000a391 	.word	0x0000a391

0000a508 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    a508:	b530      	push	{r4, r5, lr}
    a50a:	b083      	sub	sp, #12
    a50c:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    a50e:	2300      	movs	r3, #0
    a510:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    a512:	4920      	ldr	r1, [pc, #128]	; (a594 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    a514:	7d0b      	ldrb	r3, [r1, #20]
    a516:	7d4a      	ldrb	r2, [r1, #21]
    a518:	0212      	lsls	r2, r2, #8
    a51a:	431a      	orrs	r2, r3
    a51c:	7d8b      	ldrb	r3, [r1, #22]
    a51e:	041b      	lsls	r3, r3, #16
    a520:	431a      	orrs	r2, r3
    a522:	7dcb      	ldrb	r3, [r1, #23]
    a524:	061b      	lsls	r3, r3, #24
    a526:	4313      	orrs	r3, r2
    a528:	7a18      	ldrb	r0, [r3, #8]
    a52a:	4b1b      	ldr	r3, [pc, #108]	; (a598 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    a52c:	4798      	blx	r3
    a52e:	2800      	cmp	r0, #0
    a530:	d107      	bne.n	a542 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    a532:	2204      	movs	r2, #4
    a534:	a901      	add	r1, sp, #4
    a536:	0020      	movs	r0, r4
    a538:	4b18      	ldr	r3, [pc, #96]	; (a59c <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    a53a:	4798      	blx	r3
}
    a53c:	2008      	movs	r0, #8
    a53e:	b003      	add	sp, #12
    a540:	bd30      	pop	{r4, r5, pc}
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    a542:	4d14      	ldr	r5, [pc, #80]	; (a594 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    a544:	7d2b      	ldrb	r3, [r5, #20]
    a546:	7d6a      	ldrb	r2, [r5, #21]
    a548:	0212      	lsls	r2, r2, #8
    a54a:	431a      	orrs	r2, r3
    a54c:	7dab      	ldrb	r3, [r5, #22]
    a54e:	041b      	lsls	r3, r3, #16
    a550:	431a      	orrs	r2, r3
    a552:	7deb      	ldrb	r3, [r5, #23]
    a554:	061b      	lsls	r3, r3, #24
    a556:	4313      	orrs	r3, r2
    a558:	7a18      	ldrb	r0, [r3, #8]
    a55a:	4b11      	ldr	r3, [pc, #68]	; (a5a0 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    a55c:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    a55e:	7d2b      	ldrb	r3, [r5, #20]
    a560:	7d6a      	ldrb	r2, [r5, #21]
    a562:	0212      	lsls	r2, r2, #8
    a564:	431a      	orrs	r2, r3
    a566:	7dab      	ldrb	r3, [r5, #22]
    a568:	041b      	lsls	r3, r3, #16
    a56a:	431a      	orrs	r2, r3
    a56c:	7deb      	ldrb	r3, [r5, #23]
    a56e:	061b      	lsls	r3, r3, #24
    a570:	4313      	orrs	r3, r2
    a572:	791d      	ldrb	r5, [r3, #4]
    a574:	795a      	ldrb	r2, [r3, #5]
    a576:	0212      	lsls	r2, r2, #8
    a578:	432a      	orrs	r2, r5
    a57a:	799d      	ldrb	r5, [r3, #6]
    a57c:	042d      	lsls	r5, r5, #16
    a57e:	432a      	orrs	r2, r5
    a580:	79dd      	ldrb	r5, [r3, #7]
    a582:	062d      	lsls	r5, r5, #24
    a584:	4315      	orrs	r5, r2
		timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    a586:	21fa      	movs	r1, #250	; 0xfa
    a588:	0089      	lsls	r1, r1, #2
    a58a:	4b06      	ldr	r3, [pc, #24]	; (a5a4 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    a58c:	4798      	blx	r3
		timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    a58e:	182d      	adds	r5, r5, r0
    a590:	9501      	str	r5, [sp, #4]
    a592:	e7ce      	b.n	a532 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    a594:	200024d0 	.word	0x200024d0
    a598:	0000ef39 	.word	0x0000ef39
    a59c:	00019d1d 	.word	0x00019d1d
    a5a0:	0000ef4d 	.word	0x0000ef4d
    a5a4:	000165b9 	.word	0x000165b9

0000a5a8 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    a5a8:	b510      	push	{r4, lr}
    a5aa:	b082      	sub	sp, #8
    a5ac:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    a5ae:	784c      	ldrb	r4, [r1, #1]
    a5b0:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    a5b2:	780a      	ldrb	r2, [r1, #0]
    a5b4:	2a00      	cmp	r2, #0
    a5b6:	d007      	beq.n	a5c8 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    a5b8:	232f      	movs	r3, #47	; 0x2f
    a5ba:	4a23      	ldr	r2, [pc, #140]	; (a648 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a5bc:	5cd3      	ldrb	r3, [r2, r3]
    a5be:	2b40      	cmp	r3, #64	; 0x40
    a5c0:	d819      	bhi.n	a5f6 <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    a5c2:	2350      	movs	r3, #80	; 0x50
    a5c4:	33ff      	adds	r3, #255	; 0xff
    a5c6:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    a5c8:	491f      	ldr	r1, [pc, #124]	; (a648 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a5ca:	2256      	movs	r2, #86	; 0x56
    a5cc:	32ff      	adds	r2, #255	; 0xff
    a5ce:	5c8a      	ldrb	r2, [r1, r2]
    a5d0:	1b12      	subs	r2, r2, r4
    a5d2:	189b      	adds	r3, r3, r2
    a5d4:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    a5d6:	466a      	mov	r2, sp
    a5d8:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    a5da:	22a9      	movs	r2, #169	; 0xa9
    a5dc:	0052      	lsls	r2, r2, #1
    a5de:	5c8a      	ldrb	r2, [r1, r2]
    a5e0:	4293      	cmp	r3, r2
    a5e2:	d80d      	bhi.n	a600 <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    a5e4:	2252      	movs	r2, #82	; 0x52
    a5e6:	32ff      	adds	r2, #255	; 0xff
    a5e8:	4917      	ldr	r1, [pc, #92]	; (a648 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a5ea:	5c8a      	ldrb	r2, [r1, r2]
    a5ec:	4293      	cmp	r3, r2
    a5ee:	d209      	bcs.n	a604 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    a5f0:	466b      	mov	r3, sp
    a5f2:	711a      	strb	r2, [r3, #4]
    a5f4:	e006      	b.n	a604 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    a5f6:	23a8      	movs	r3, #168	; 0xa8
    a5f8:	005b      	lsls	r3, r3, #1
    a5fa:	4a13      	ldr	r2, [pc, #76]	; (a648 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a5fc:	5cd3      	ldrb	r3, [r2, r3]
    a5fe:	e7e3      	b.n	a5c8 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    a600:	466b      	mov	r3, sp
    a602:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    a604:	4910      	ldr	r1, [pc, #64]	; (a648 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    a606:	232f      	movs	r3, #47	; 0x2f
    a608:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    a60a:	3b28      	subs	r3, #40	; 0x28
    a60c:	4023      	ands	r3, r4
    a60e:	4c0f      	ldr	r4, [pc, #60]	; (a64c <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    a610:	435c      	muls	r4, r3
    a612:	234c      	movs	r3, #76	; 0x4c
    a614:	33ff      	adds	r3, #255	; 0xff
    a616:	5ccb      	ldrb	r3, [r1, r3]
    a618:	22a6      	movs	r2, #166	; 0xa6
    a61a:	0052      	lsls	r2, r2, #1
    a61c:	5c8a      	ldrb	r2, [r1, r2]
    a61e:	0212      	lsls	r2, r2, #8
    a620:	4313      	orrs	r3, r2
    a622:	224e      	movs	r2, #78	; 0x4e
    a624:	32ff      	adds	r2, #255	; 0xff
    a626:	5c8a      	ldrb	r2, [r1, r2]
    a628:	0412      	lsls	r2, r2, #16
    a62a:	431a      	orrs	r2, r3
    a62c:	23a7      	movs	r3, #167	; 0xa7
    a62e:	005b      	lsls	r3, r3, #1
    a630:	5ccb      	ldrb	r3, [r1, r3]
    a632:	061b      	lsls	r3, r3, #24
    a634:	4313      	orrs	r3, r2
    a636:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    a638:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    a63a:	2208      	movs	r2, #8
    a63c:	4669      	mov	r1, sp
    a63e:	4b04      	ldr	r3, [pc, #16]	; (a650 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    a640:	4798      	blx	r3
}
    a642:	2008      	movs	r0, #8
    a644:	b002      	add	sp, #8
    a646:	bd10      	pop	{r4, pc}
    a648:	200024d0 	.word	0x200024d0
    a64c:	000927c0 	.word	0x000927c0
    a650:	00019d1d 	.word	0x00019d1d

0000a654 <LORAREG_GetAttr_DRangeChBandT1>:
{
    a654:	b5f0      	push	{r4, r5, r6, r7, lr}
    a656:	46c6      	mov	lr, r8
    a658:	b500      	push	{lr}
    a65a:	b084      	sub	sp, #16
    a65c:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    a65e:	2204      	movs	r2, #4
    a660:	a803      	add	r0, sp, #12
    a662:	4b43      	ldr	r3, [pc, #268]	; (a770 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    a664:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    a666:	a903      	add	r1, sp, #12
    a668:	201b      	movs	r0, #27
    a66a:	4b42      	ldr	r3, [pc, #264]	; (a774 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    a66c:	4798      	blx	r3
    a66e:	2808      	cmp	r0, #8
    a670:	d004      	beq.n	a67c <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    a672:	200a      	movs	r0, #10
}
    a674:	b004      	add	sp, #16
    a676:	bc04      	pop	{r2}
    a678:	4690      	mov	r8, r2
    a67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    a67c:	aa03      	add	r2, sp, #12
    a67e:	7813      	ldrb	r3, [r2, #0]
    a680:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    a682:	222e      	movs	r2, #46	; 0x2e
    a684:	493c      	ldr	r1, [pc, #240]	; (a778 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a686:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    a688:	3903      	subs	r1, #3
    a68a:	1e4a      	subs	r2, r1, #1
    a68c:	4191      	sbcs	r1, r2
    a68e:	3106      	adds	r1, #6
	switch (chMaskCntl)
    a690:	2b07      	cmp	r3, #7
    a692:	d869      	bhi.n	a768 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    a694:	009a      	lsls	r2, r3, #2
    a696:	4d39      	ldr	r5, [pc, #228]	; (a77c <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    a698:	58aa      	ldr	r2, [r5, r2]
    a69a:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    a69c:	011b      	lsls	r3, r3, #4
    a69e:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    a6a0:	001a      	movs	r2, r3
    a6a2:	3210      	adds	r2, #16
    a6a4:	b2d2      	uxtb	r2, r2
    a6a6:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    a6a8:	4293      	cmp	r3, r2
    a6aa:	d25f      	bcs.n	a76c <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a6ac:	4e32      	ldr	r6, [pc, #200]	; (a778 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a6ae:	7935      	ldrb	r5, [r6, #4]
    a6b0:	7972      	ldrb	r2, [r6, #5]
    a6b2:	0212      	lsls	r2, r2, #8
    a6b4:	4315      	orrs	r5, r2
    a6b6:	79b2      	ldrb	r2, [r6, #6]
    a6b8:	0412      	lsls	r2, r2, #16
    a6ba:	432a      	orrs	r2, r5
    a6bc:	79f5      	ldrb	r5, [r6, #7]
    a6be:	062d      	lsls	r5, r5, #24
    a6c0:	4315      	orrs	r5, r2
    a6c2:	46ac      	mov	ip, r5
    a6c4:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a6c6:	2401      	movs	r4, #1
    a6c8:	e00c      	b.n	a6e4 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    a6ca:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a6cc:	7872      	ldrb	r2, [r6, #1]
    a6ce:	0912      	lsrs	r2, r2, #4
    a6d0:	42aa      	cmp	r2, r5
    a6d2:	dd02      	ble.n	a6da <LORAREG_GetAttr_DRangeChBandT1+0x86>
    a6d4:	423c      	tst	r4, r7
    a6d6:	d011      	beq.n	a6fc <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    a6d8:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    a6da:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    a6dc:	3301      	adds	r3, #1
    a6de:	b2db      	uxtb	r3, r3
    a6e0:	4598      	cmp	r8, r3
    a6e2:	d013      	beq.n	a70c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a6e4:	005e      	lsls	r6, r3, #1
    a6e6:	4466      	add	r6, ip
    a6e8:	7872      	ldrb	r2, [r6, #1]
    a6ea:	0712      	lsls	r2, r2, #28
    a6ec:	0f12      	lsrs	r2, r2, #28
    a6ee:	428a      	cmp	r2, r1
    a6f0:	daec      	bge.n	a6cc <LORAREG_GetAttr_DRangeChBandT1+0x78>
    a6f2:	423c      	tst	r4, r7
    a6f4:	d1e9      	bne.n	a6ca <LORAREG_GetAttr_DRangeChBandT1+0x76>
    a6f6:	2f00      	cmp	r7, #0
    a6f8:	d1ef      	bne.n	a6da <LORAREG_GetAttr_DRangeChBandT1+0x86>
    a6fa:	e7e6      	b.n	a6ca <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    a6fc:	2f00      	cmp	r7, #0
    a6fe:	d0eb      	beq.n	a6d8 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    a700:	e7eb      	b.n	a6da <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a702:	23a8      	movs	r3, #168	; 0xa8
    a704:	005b      	lsls	r3, r3, #1
    a706:	4a1c      	ldr	r2, [pc, #112]	; (a778 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a708:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a70a:	000d      	movs	r5, r1
    a70c:	012d      	lsls	r5, r5, #4
    a70e:	230f      	movs	r3, #15
    a710:	4019      	ands	r1, r3
    a712:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    a714:	9b01      	ldr	r3, [sp, #4]
    a716:	701d      	strb	r5, [r3, #0]
    a718:	e7ac      	b.n	a674 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    a71a:	4d17      	ldr	r5, [pc, #92]	; (a778 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a71c:	792b      	ldrb	r3, [r5, #4]
    a71e:	796a      	ldrb	r2, [r5, #5]
    a720:	0212      	lsls	r2, r2, #8
    a722:	431a      	orrs	r2, r3
    a724:	79ab      	ldrb	r3, [r5, #6]
    a726:	041b      	lsls	r3, r3, #16
    a728:	431a      	orrs	r2, r3
    a72a:	79eb      	ldrb	r3, [r5, #7]
    a72c:	061b      	lsls	r3, r3, #24
    a72e:	4313      	orrs	r3, r2
    a730:	001a      	movs	r2, r3
    a732:	3380      	adds	r3, #128	; 0x80
    a734:	001c      	movs	r4, r3
    a736:	2500      	movs	r5, #0
    a738:	e002      	b.n	a740 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    a73a:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    a73c:	42a2      	cmp	r2, r4
    a73e:	d00c      	beq.n	a75a <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    a740:	0016      	movs	r6, r2
    a742:	7853      	ldrb	r3, [r2, #1]
    a744:	071b      	lsls	r3, r3, #28
    a746:	0f1b      	lsrs	r3, r3, #28
    a748:	428b      	cmp	r3, r1
    a74a:	da00      	bge.n	a74e <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    a74c:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    a74e:	7873      	ldrb	r3, [r6, #1]
    a750:	091b      	lsrs	r3, r3, #4
    a752:	42ab      	cmp	r3, r5
    a754:	ddf1      	ble.n	a73a <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    a756:	001d      	movs	r5, r3
    a758:	e7ef      	b.n	a73a <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    a75a:	2f00      	cmp	r7, #0
    a75c:	d0d6      	beq.n	a70c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    a75e:	23a8      	movs	r3, #168	; 0xa8
    a760:	005b      	lsls	r3, r3, #1
    a762:	4a05      	ldr	r2, [pc, #20]	; (a778 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    a764:	5cd5      	ldrb	r5, [r2, r3]
    a766:	e7d1      	b.n	a70c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    a768:	2500      	movs	r5, #0
    a76a:	e7cf      	b.n	a70c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    a76c:	2500      	movs	r5, #0
    a76e:	e7cd      	b.n	a70c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    a770:	00019d1d 	.word	0x00019d1d
    a774:	00009ad5 	.word	0x00009ad5
    a778:	200024d0 	.word	0x200024d0
    a77c:	00020128 	.word	0x00020128

0000a780 <LORAREG_GetAttr_DefRx2Freq>:
{
    a780:	b510      	push	{r4, lr}
    a782:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    a784:	2204      	movs	r2, #4
    a786:	4902      	ldr	r1, [pc, #8]	; (a790 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    a788:	4b02      	ldr	r3, [pc, #8]	; (a794 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    a78a:	4798      	blx	r3
}
    a78c:	2008      	movs	r0, #8
    a78e:	bd10      	pop	{r4, pc}
    a790:	200024ec 	.word	0x200024ec
    a794:	00019d1d 	.word	0x00019d1d

0000a798 <LORAREG_GetAttr_DlFrequency>:
{
    a798:	b510      	push	{r4, lr}
    a79a:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    a79c:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    a79e:	212a      	movs	r1, #42	; 0x2a
    a7a0:	480d      	ldr	r0, [pc, #52]	; (a7d8 <LORAREG_GetAttr_DlFrequency+0x40>)
    a7a2:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    a7a4:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    a7a6:	428a      	cmp	r2, r1
    a7a8:	dd00      	ble.n	a7ac <LORAREG_GetAttr_DlFrequency+0x14>
}
    a7aa:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    a7ac:	4c0a      	ldr	r4, [pc, #40]	; (a7d8 <LORAREG_GetAttr_DlFrequency+0x40>)
    a7ae:	7a21      	ldrb	r1, [r4, #8]
    a7b0:	7a60      	ldrb	r0, [r4, #9]
    a7b2:	0200      	lsls	r0, r0, #8
    a7b4:	4308      	orrs	r0, r1
    a7b6:	7aa1      	ldrb	r1, [r4, #10]
    a7b8:	0409      	lsls	r1, r1, #16
    a7ba:	4308      	orrs	r0, r1
    a7bc:	7ae1      	ldrb	r1, [r4, #11]
    a7be:	0609      	lsls	r1, r1, #24
    a7c0:	4301      	orrs	r1, r0
    a7c2:	0050      	lsls	r0, r2, #1
    a7c4:	1882      	adds	r2, r0, r2
    a7c6:	0092      	lsls	r2, r2, #2
    a7c8:	1889      	adds	r1, r1, r2
    a7ca:	3104      	adds	r1, #4
    a7cc:	2204      	movs	r2, #4
    a7ce:	0018      	movs	r0, r3
    a7d0:	4b02      	ldr	r3, [pc, #8]	; (a7dc <LORAREG_GetAttr_DlFrequency+0x44>)
    a7d2:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a7d4:	2008      	movs	r0, #8
    a7d6:	e7e8      	b.n	a7aa <LORAREG_GetAttr_DlFrequency+0x12>
    a7d8:	200024d0 	.word	0x200024d0
    a7dc:	00019d1d 	.word	0x00019d1d

0000a7e0 <LORAREG_GetAttr_DutyCycleTimer>:
{
    a7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7e2:	46d6      	mov	lr, sl
    a7e4:	464f      	mov	r7, r9
    a7e6:	4646      	mov	r6, r8
    a7e8:	b5c0      	push	{r6, r7, lr}
    a7ea:	b084      	sub	sp, #16
    a7ec:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    a7ee:	780b      	ldrb	r3, [r1, #0]
    a7f0:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    a7f2:	232a      	movs	r3, #42	; 0x2a
    a7f4:	4a5b      	ldr	r2, [pc, #364]	; (a964 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a7f6:	56d6      	ldrsb	r6, [r2, r3]
    a7f8:	2e00      	cmp	r6, #0
    a7fa:	dd66      	ble.n	a8ca <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    a7fc:	0013      	movs	r3, r2
    a7fe:	7910      	ldrb	r0, [r2, #4]
    a800:	7952      	ldrb	r2, [r2, #5]
    a802:	0212      	lsls	r2, r2, #8
    a804:	4302      	orrs	r2, r0
    a806:	7998      	ldrb	r0, [r3, #6]
    a808:	0400      	lsls	r0, r0, #16
    a80a:	4302      	orrs	r2, r0
    a80c:	79d8      	ldrb	r0, [r3, #7]
    a80e:	0600      	lsls	r0, r0, #24
    a810:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    a812:	7b1f      	ldrb	r7, [r3, #12]
    a814:	7b5a      	ldrb	r2, [r3, #13]
    a816:	0212      	lsls	r2, r2, #8
    a818:	433a      	orrs	r2, r7
    a81a:	7b9f      	ldrb	r7, [r3, #14]
    a81c:	043f      	lsls	r7, r7, #16
    a81e:	433a      	orrs	r2, r7
    a820:	7bdf      	ldrb	r7, [r3, #15]
    a822:	063f      	lsls	r7, r7, #24
    a824:	4317      	orrs	r7, r2
    a826:	2500      	movs	r5, #0
    a828:	2300      	movs	r3, #0
    a82a:	2201      	movs	r2, #1
    a82c:	4252      	negs	r2, r2
    a82e:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    a830:	4a4c      	ldr	r2, [pc, #304]	; (a964 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a832:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a834:	4662      	mov	r2, ip
    a836:	9201      	str	r2, [sp, #4]
    a838:	e004      	b.n	a844 <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    a83a:	3301      	adds	r3, #1
    a83c:	b2db      	uxtb	r3, r3
    a83e:	001d      	movs	r5, r3
    a840:	42b3      	cmp	r3, r6
    a842:	da27      	bge.n	a894 <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    a844:	0059      	lsls	r1, r3, #1
    a846:	1841      	adds	r1, r0, r1
    a848:	780a      	ldrb	r2, [r1, #0]
    a84a:	2a00      	cmp	r2, #0
    a84c:	d0f5      	beq.n	a83a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    a84e:	006a      	lsls	r2, r5, #1
    a850:	1952      	adds	r2, r2, r5
    a852:	0092      	lsls	r2, r2, #2
    a854:	4442      	add	r2, r8
    a856:	32ab      	adds	r2, #171	; 0xab
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    a858:	7815      	ldrb	r5, [r2, #0]
    a85a:	006a      	lsls	r2, r5, #1
    a85c:	1952      	adds	r2, r2, r5
    a85e:	0092      	lsls	r2, r2, #2
    a860:	18ba      	adds	r2, r7, r2
    a862:	7a15      	ldrb	r5, [r2, #8]
    a864:	7a54      	ldrb	r4, [r2, #9]
    a866:	0224      	lsls	r4, r4, #8
    a868:	4325      	orrs	r5, r4
    a86a:	7a94      	ldrb	r4, [r2, #10]
    a86c:	0424      	lsls	r4, r4, #16
    a86e:	4325      	orrs	r5, r4
    a870:	7ad2      	ldrb	r2, [r2, #11]
    a872:	0612      	lsls	r2, r2, #24
    a874:	432a      	orrs	r2, r5
    a876:	d0e0      	beq.n	a83a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    a878:	454a      	cmp	r2, r9
    a87a:	d8de      	bhi.n	a83a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a87c:	784d      	ldrb	r5, [r1, #1]
    a87e:	072d      	lsls	r5, r5, #28
    a880:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    a882:	45ac      	cmp	ip, r5
    a884:	dbd9      	blt.n	a83a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    a886:	7849      	ldrb	r1, [r1, #1]
    a888:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    a88a:	9c01      	ldr	r4, [sp, #4]
    a88c:	428c      	cmp	r4, r1
    a88e:	dcd4      	bgt.n	a83a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    a890:	4691      	mov	r9, r2
    a892:	e7d2      	b.n	a83a <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    a894:	464b      	mov	r3, r9
    a896:	3301      	adds	r3, #1
    a898:	d017      	beq.n	a8ca <LORAREG_GetAttr_DutyCycleTimer+0xea>
    a89a:	4932      	ldr	r1, [pc, #200]	; (a964 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a89c:	23ba      	movs	r3, #186	; 0xba
    a89e:	33ff      	adds	r3, #255	; 0xff
    a8a0:	5ccb      	ldrb	r3, [r1, r3]
    a8a2:	22dd      	movs	r2, #221	; 0xdd
    a8a4:	0052      	lsls	r2, r2, #1
    a8a6:	5c8a      	ldrb	r2, [r1, r2]
    a8a8:	0212      	lsls	r2, r2, #8
    a8aa:	431a      	orrs	r2, r3
    a8ac:	23bc      	movs	r3, #188	; 0xbc
    a8ae:	33ff      	adds	r3, #255	; 0xff
    a8b0:	5ccb      	ldrb	r3, [r1, r3]
    a8b2:	041b      	lsls	r3, r3, #16
    a8b4:	431a      	orrs	r2, r3
    a8b6:	23de      	movs	r3, #222	; 0xde
    a8b8:	005b      	lsls	r3, r3, #1
    a8ba:	5ccb      	ldrb	r3, [r1, r3]
    a8bc:	061b      	lsls	r3, r3, #24
    a8be:	4313      	orrs	r3, r2
    a8c0:	4599      	cmp	r9, r3
    a8c2:	d302      	bcc.n	a8ca <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    a8c4:	464b      	mov	r3, r9
    a8c6:	9303      	str	r3, [sp, #12]
    a8c8:	e013      	b.n	a8f2 <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    a8ca:	4926      	ldr	r1, [pc, #152]	; (a964 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a8cc:	23ba      	movs	r3, #186	; 0xba
    a8ce:	33ff      	adds	r3, #255	; 0xff
    a8d0:	5ccb      	ldrb	r3, [r1, r3]
    a8d2:	22dd      	movs	r2, #221	; 0xdd
    a8d4:	0052      	lsls	r2, r2, #1
    a8d6:	5c8a      	ldrb	r2, [r1, r2]
    a8d8:	0212      	lsls	r2, r2, #8
    a8da:	431a      	orrs	r2, r3
    a8dc:	23bc      	movs	r3, #188	; 0xbc
    a8de:	33ff      	adds	r3, #255	; 0xff
    a8e0:	5ccb      	ldrb	r3, [r1, r3]
    a8e2:	041b      	lsls	r3, r3, #16
    a8e4:	431a      	orrs	r2, r3
    a8e6:	23de      	movs	r3, #222	; 0xde
    a8e8:	005b      	lsls	r3, r3, #1
    a8ea:	5ccb      	ldrb	r3, [r1, r3]
    a8ec:	061b      	lsls	r3, r3, #24
    a8ee:	4313      	orrs	r3, r2
    a8f0:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    a8f2:	491c      	ldr	r1, [pc, #112]	; (a964 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a8f4:	7c0b      	ldrb	r3, [r1, #16]
    a8f6:	7c4a      	ldrb	r2, [r1, #17]
    a8f8:	0212      	lsls	r2, r2, #8
    a8fa:	431a      	orrs	r2, r3
    a8fc:	7c8b      	ldrb	r3, [r1, #18]
    a8fe:	041b      	lsls	r3, r3, #16
    a900:	431a      	orrs	r2, r3
    a902:	7ccb      	ldrb	r3, [r1, #19]
    a904:	061b      	lsls	r3, r3, #24
    a906:	4313      	orrs	r3, r2
    a908:	7918      	ldrb	r0, [r3, #4]
    a90a:	4b17      	ldr	r3, [pc, #92]	; (a968 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    a90c:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    a90e:	9e03      	ldr	r6, [sp, #12]
    a910:	2e00      	cmp	r6, #0
    a912:	d01b      	beq.n	a94c <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    a914:	4913      	ldr	r1, [pc, #76]	; (a964 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    a916:	7c0b      	ldrb	r3, [r1, #16]
    a918:	7c4a      	ldrb	r2, [r1, #17]
    a91a:	0212      	lsls	r2, r2, #8
    a91c:	431a      	orrs	r2, r3
    a91e:	7c8b      	ldrb	r3, [r1, #18]
    a920:	041b      	lsls	r3, r3, #16
    a922:	431a      	orrs	r2, r3
    a924:	7ccb      	ldrb	r3, [r1, #19]
    a926:	061b      	lsls	r3, r3, #24
    a928:	4313      	orrs	r3, r2
    a92a:	781d      	ldrb	r5, [r3, #0]
    a92c:	785a      	ldrb	r2, [r3, #1]
    a92e:	0212      	lsls	r2, r2, #8
    a930:	432a      	orrs	r2, r5
    a932:	789d      	ldrb	r5, [r3, #2]
    a934:	042d      	lsls	r5, r5, #16
    a936:	432a      	orrs	r2, r5
    a938:	78dd      	ldrb	r5, [r3, #3]
    a93a:	062d      	lsls	r5, r5, #24
    a93c:	4315      	orrs	r5, r2
    a93e:	21fa      	movs	r1, #250	; 0xfa
    a940:	0089      	lsls	r1, r1, #2
    a942:	4b0a      	ldr	r3, [pc, #40]	; (a96c <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    a944:	4798      	blx	r3
    a946:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    a948:	1b75      	subs	r5, r6, r5
    a94a:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    a94c:	2204      	movs	r2, #4
    a94e:	a903      	add	r1, sp, #12
    a950:	9800      	ldr	r0, [sp, #0]
    a952:	4b07      	ldr	r3, [pc, #28]	; (a970 <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    a954:	4798      	blx	r3
}
    a956:	2008      	movs	r0, #8
    a958:	b004      	add	sp, #16
    a95a:	bc1c      	pop	{r2, r3, r4}
    a95c:	4690      	mov	r8, r2
    a95e:	4699      	mov	r9, r3
    a960:	46a2      	mov	sl, r4
    a962:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a964:	200024d0 	.word	0x200024d0
    a968:	0000ef4d 	.word	0x0000ef4d
    a96c:	000165b9 	.word	0x000165b9
    a970:	00019d1d 	.word	0x00019d1d

0000a974 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    a974:	b500      	push	{lr}
    a976:	b083      	sub	sp, #12
    a978:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    a97a:	784a      	ldrb	r2, [r1, #1]
    a97c:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    a97e:	429a      	cmp	r2, r3
    a980:	d925      	bls.n	a9ce <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    a982:	2300      	movs	r3, #0
    a984:	466a      	mov	r2, sp
    a986:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    a988:	4913      	ldr	r1, [pc, #76]	; (a9d8 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    a98a:	7a0b      	ldrb	r3, [r1, #8]
    a98c:	7a4a      	ldrb	r2, [r1, #9]
    a98e:	0212      	lsls	r2, r2, #8
    a990:	4313      	orrs	r3, r2
    a992:	7a8a      	ldrb	r2, [r1, #10]
    a994:	0412      	lsls	r2, r2, #16
    a996:	431a      	orrs	r2, r3
    a998:	7acb      	ldrb	r3, [r1, #11]
    a99a:	061b      	lsls	r3, r3, #24
    a99c:	431a      	orrs	r2, r3
    a99e:	232f      	movs	r3, #47	; 0x2f
    a9a0:	5cc9      	ldrb	r1, [r1, r3]
    a9a2:	004b      	lsls	r3, r1, #1
    a9a4:	185b      	adds	r3, r3, r1
    a9a6:	009b      	lsls	r3, r3, #2
    a9a8:	189b      	adds	r3, r3, r2
    a9aa:	7919      	ldrb	r1, [r3, #4]
    a9ac:	795a      	ldrb	r2, [r3, #5]
    a9ae:	0212      	lsls	r2, r2, #8
    a9b0:	4311      	orrs	r1, r2
    a9b2:	799a      	ldrb	r2, [r3, #6]
    a9b4:	0412      	lsls	r2, r2, #16
    a9b6:	430a      	orrs	r2, r1
    a9b8:	79db      	ldrb	r3, [r3, #7]
    a9ba:	061b      	lsls	r3, r3, #24
    a9bc:	4313      	orrs	r3, r2
    a9be:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    a9c0:	2208      	movs	r2, #8
    a9c2:	4669      	mov	r1, sp
    a9c4:	4b05      	ldr	r3, [pc, #20]	; (a9dc <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    a9c6:	4798      	blx	r3
}
    a9c8:	2008      	movs	r0, #8
    a9ca:	b003      	add	sp, #12
    a9cc:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    a9ce:	1a9b      	subs	r3, r3, r2
    a9d0:	466a      	mov	r2, sp
    a9d2:	7113      	strb	r3, [r2, #4]
    a9d4:	e7d8      	b.n	a988 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    a9d6:	46c0      	nop			; (mov r8, r8)
    a9d8:	200024d0 	.word	0x200024d0
    a9dc:	00019d1d 	.word	0x00019d1d

0000a9e0 <LORAREG_GetAttr_DRangeChBandT2>:
{
    a9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9e2:	46c6      	mov	lr, r8
    a9e4:	b500      	push	{lr}
    a9e6:	b082      	sub	sp, #8
    a9e8:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    a9ea:	ad01      	add	r5, sp, #4
    a9ec:	2204      	movs	r2, #4
    a9ee:	0028      	movs	r0, r5
    a9f0:	4b38      	ldr	r3, [pc, #224]	; (aad4 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    a9f2:	4798      	blx	r3
	switch (chMaskCntl)
    a9f4:	782b      	ldrb	r3, [r5, #0]
    a9f6:	2b00      	cmp	r3, #0
    a9f8:	d017      	beq.n	aa2a <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    a9fa:	2b06      	cmp	r3, #6
    a9fc:	d159      	bne.n	aab2 <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    a9fe:	3324      	adds	r3, #36	; 0x24
    aa00:	4a35      	ldr	r2, [pc, #212]	; (aad8 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    aa02:	56d7      	ldrsb	r7, [r2, r3]
    aa04:	2000      	movs	r0, #0
    aa06:	2507      	movs	r5, #7
    aa08:	2f00      	cmp	r7, #0
    aa0a:	dd54      	ble.n	aab6 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    aa0c:	4a32      	ldr	r2, [pc, #200]	; (aad8 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    aa0e:	7916      	ldrb	r6, [r2, #4]
    aa10:	7953      	ldrb	r3, [r2, #5]
    aa12:	021b      	lsls	r3, r3, #8
    aa14:	4333      	orrs	r3, r6
    aa16:	7996      	ldrb	r6, [r2, #6]
    aa18:	0436      	lsls	r6, r6, #16
    aa1a:	4333      	orrs	r3, r6
    aa1c:	79d6      	ldrb	r6, [r2, #7]
    aa1e:	0636      	lsls	r6, r6, #24
    aa20:	431e      	orrs	r6, r3
    aa22:	2000      	movs	r0, #0
    aa24:	2507      	movs	r5, #7
    aa26:	2200      	movs	r2, #0
    aa28:	e035      	b.n	aa96 <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    aa2a:	232a      	movs	r3, #42	; 0x2a
    aa2c:	4a2a      	ldr	r2, [pc, #168]	; (aad8 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    aa2e:	56d3      	ldrsb	r3, [r2, r3]
    aa30:	469c      	mov	ip, r3
    aa32:	2b00      	cmp	r3, #0
    aa34:	dd4a      	ble.n	aacc <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    aa36:	ab01      	add	r3, sp, #4
    aa38:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aa3a:	7917      	ldrb	r7, [r2, #4]
    aa3c:	7953      	ldrb	r3, [r2, #5]
    aa3e:	021b      	lsls	r3, r3, #8
    aa40:	433b      	orrs	r3, r7
    aa42:	7997      	ldrb	r7, [r2, #6]
    aa44:	043f      	lsls	r7, r7, #16
    aa46:	433b      	orrs	r3, r7
    aa48:	79d7      	ldrb	r7, [r2, #7]
    aa4a:	063f      	lsls	r7, r7, #24
    aa4c:	431f      	orrs	r7, r3
    aa4e:	2000      	movs	r0, #0
    aa50:	2507      	movs	r5, #7
    aa52:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aa54:	2401      	movs	r4, #1
    aa56:	e00b      	b.n	aa70 <LORAREG_GetAttr_DRangeChBandT2+0x90>
    aa58:	784b      	ldrb	r3, [r1, #1]
    aa5a:	091b      	lsrs	r3, r3, #4
    aa5c:	4283      	cmp	r3, r0
    aa5e:	dd02      	ble.n	aa66 <LORAREG_GetAttr_DRangeChBandT2+0x86>
    aa60:	4234      	tst	r4, r6
    aa62:	d000      	beq.n	aa66 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    aa64:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    aa66:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    aa68:	3201      	adds	r2, #1
    aa6a:	b2d2      	uxtb	r2, r2
    aa6c:	4562      	cmp	r2, ip
    aa6e:	da22      	bge.n	aab6 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aa70:	0051      	lsls	r1, r2, #1
    aa72:	1879      	adds	r1, r7, r1
    aa74:	784b      	ldrb	r3, [r1, #1]
    aa76:	071b      	lsls	r3, r3, #28
    aa78:	0f1b      	lsrs	r3, r3, #28
    aa7a:	42ab      	cmp	r3, r5
    aa7c:	daec      	bge.n	aa58 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    aa7e:	4234      	tst	r4, r6
    aa80:	d0f1      	beq.n	aa66 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    aa82:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    aa84:	784b      	ldrb	r3, [r1, #1]
    aa86:	091b      	lsrs	r3, r3, #4
    aa88:	4298      	cmp	r0, r3
    aa8a:	dbeb      	blt.n	aa64 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    aa8c:	e7eb      	b.n	aa66 <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    aa8e:	3201      	adds	r2, #1
    aa90:	b2d2      	uxtb	r2, r2
    aa92:	42ba      	cmp	r2, r7
    aa94:	da0f      	bge.n	aab6 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    aa96:	0051      	lsls	r1, r2, #1
    aa98:	1871      	adds	r1, r6, r1
    aa9a:	784b      	ldrb	r3, [r1, #1]
    aa9c:	071b      	lsls	r3, r3, #28
    aa9e:	0f1b      	lsrs	r3, r3, #28
    aaa0:	42ab      	cmp	r3, r5
    aaa2:	da00      	bge.n	aaa6 <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    aaa4:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    aaa6:	784b      	ldrb	r3, [r1, #1]
    aaa8:	091b      	lsrs	r3, r3, #4
    aaaa:	4283      	cmp	r3, r0
    aaac:	ddef      	ble.n	aa8e <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    aaae:	0018      	movs	r0, r3
    aab0:	e7ed      	b.n	aa8e <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    aab2:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    aab4:	25ff      	movs	r5, #255	; 0xff
    aab6:	0100      	lsls	r0, r0, #4
    aab8:	230f      	movs	r3, #15
    aaba:	401d      	ands	r5, r3
    aabc:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    aabe:	4643      	mov	r3, r8
    aac0:	7018      	strb	r0, [r3, #0]
}
    aac2:	2008      	movs	r0, #8
    aac4:	b002      	add	sp, #8
    aac6:	bc04      	pop	{r2}
    aac8:	4690      	mov	r8, r2
    aaca:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    aacc:	2000      	movs	r0, #0
    aace:	2507      	movs	r5, #7
    aad0:	e7f1      	b.n	aab6 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    aad2:	46c0      	nop			; (mov r8, r8)
    aad4:	00019d1d 	.word	0x00019d1d
    aad8:	200024d0 	.word	0x200024d0

0000aadc <LORAREG_GetAttr_FreqT2>:
{
    aadc:	b510      	push	{r4, lr}
    aade:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    aae0:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    aae2:	222a      	movs	r2, #42	; 0x2a
    aae4:	490d      	ldr	r1, [pc, #52]	; (ab1c <LORAREG_GetAttr_FreqT2+0x40>)
    aae6:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    aae8:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    aaea:	4293      	cmp	r3, r2
    aaec:	dd00      	ble.n	aaf0 <LORAREG_GetAttr_FreqT2+0x14>
}
    aaee:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    aaf0:	0008      	movs	r0, r1
    aaf2:	7a09      	ldrb	r1, [r1, #8]
    aaf4:	7a42      	ldrb	r2, [r0, #9]
    aaf6:	0212      	lsls	r2, r2, #8
    aaf8:	430a      	orrs	r2, r1
    aafa:	7a81      	ldrb	r1, [r0, #10]
    aafc:	0409      	lsls	r1, r1, #16
    aafe:	430a      	orrs	r2, r1
    ab00:	7ac1      	ldrb	r1, [r0, #11]
    ab02:	0609      	lsls	r1, r1, #24
    ab04:	4311      	orrs	r1, r2
    ab06:	005a      	lsls	r2, r3, #1
    ab08:	18d3      	adds	r3, r2, r3
    ab0a:	009b      	lsls	r3, r3, #2
    ab0c:	18c9      	adds	r1, r1, r3
    ab0e:	2204      	movs	r2, #4
    ab10:	0020      	movs	r0, r4
    ab12:	4b03      	ldr	r3, [pc, #12]	; (ab20 <LORAREG_GetAttr_FreqT2+0x44>)
    ab14:	4798      	blx	r3
	return result;
    ab16:	2008      	movs	r0, #8
    ab18:	e7e9      	b.n	aaee <LORAREG_GetAttr_FreqT2+0x12>
    ab1a:	46c0      	nop			; (mov r8, r8)
    ab1c:	200024d0 	.word	0x200024d0
    ab20:	00019d1d 	.word	0x00019d1d

0000ab24 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    ab24:	b510      	push	{r4, lr}
    ab26:	b082      	sub	sp, #8
    ab28:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    ab2a:	232e      	movs	r3, #46	; 0x2e
    ab2c:	4a37      	ldr	r2, [pc, #220]	; (ac0c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    ab2e:	5cd2      	ldrb	r2, [r2, r3]
    ab30:	4b37      	ldr	r3, [pc, #220]	; (ac10 <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    ab32:	4113      	asrs	r3, r2
    ab34:	07db      	lsls	r3, r3, #31
    ab36:	d502      	bpl.n	ab3e <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    ab38:	780b      	ldrb	r3, [r1, #0]
    ab3a:	2b00      	cmp	r3, #0
    ab3c:	d116      	bne.n	ab6c <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    ab3e:	23e1      	movs	r3, #225	; 0xe1
    ab40:	005b      	lsls	r3, r3, #1
    ab42:	4a32      	ldr	r2, [pc, #200]	; (ac0c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    ab44:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    ab46:	3bc1      	subs	r3, #193	; 0xc1
    ab48:	3bff      	subs	r3, #255	; 0xff
    ab4a:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    ab4c:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    ab4e:	2b05      	cmp	r3, #5
    ab50:	d92c      	bls.n	abac <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    ab52:	2205      	movs	r2, #5
    ab54:	1ad3      	subs	r3, r2, r3
    ab56:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    ab58:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    ab5a:	429a      	cmp	r2, r3
    ab5c:	db31      	blt.n	abc2 <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    ab5e:	1ad3      	subs	r3, r2, r3
    ab60:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    ab62:	42a3      	cmp	r3, r4
    ab64:	d224      	bcs.n	abb0 <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    ab66:	466b      	mov	r3, sp
    ab68:	711c      	strb	r4, [r3, #4]
    ab6a:	e02c      	b.n	abc6 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    ab6c:	2302      	movs	r3, #2
    ab6e:	466a      	mov	r2, sp
    ab70:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    ab72:	4926      	ldr	r1, [pc, #152]	; (ac0c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    ab74:	7a0b      	ldrb	r3, [r1, #8]
    ab76:	7a4a      	ldrb	r2, [r1, #9]
    ab78:	0212      	lsls	r2, r2, #8
    ab7a:	4313      	orrs	r3, r2
    ab7c:	7a8a      	ldrb	r2, [r1, #10]
    ab7e:	0412      	lsls	r2, r2, #16
    ab80:	431a      	orrs	r2, r3
    ab82:	7acb      	ldrb	r3, [r1, #11]
    ab84:	061b      	lsls	r3, r3, #24
    ab86:	431a      	orrs	r2, r3
    ab88:	232f      	movs	r3, #47	; 0x2f
    ab8a:	5cc9      	ldrb	r1, [r1, r3]
    ab8c:	004b      	lsls	r3, r1, #1
    ab8e:	185b      	adds	r3, r3, r1
    ab90:	009b      	lsls	r3, r3, #2
    ab92:	189b      	adds	r3, r3, r2
    ab94:	7919      	ldrb	r1, [r3, #4]
    ab96:	795a      	ldrb	r2, [r3, #5]
    ab98:	0212      	lsls	r2, r2, #8
    ab9a:	4311      	orrs	r1, r2
    ab9c:	799a      	ldrb	r2, [r3, #6]
    ab9e:	0412      	lsls	r2, r2, #16
    aba0:	430a      	orrs	r2, r1
    aba2:	79db      	ldrb	r3, [r3, #7]
    aba4:	061b      	lsls	r3, r3, #24
    aba6:	4313      	orrs	r3, r2
    aba8:	9300      	str	r3, [sp, #0]
    abaa:	e028      	b.n	abfe <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    abac:	b25b      	sxtb	r3, r3
    abae:	e7d3      	b.n	ab58 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    abb0:	2b05      	cmp	r3, #5
    abb2:	d802      	bhi.n	abba <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    abb4:	466a      	mov	r2, sp
    abb6:	7113      	strb	r3, [r2, #4]
    abb8:	e005      	b.n	abc6 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    abba:	2305      	movs	r3, #5
    abbc:	466a      	mov	r2, sp
    abbe:	7113      	strb	r3, [r2, #4]
    abc0:	e001      	b.n	abc6 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    abc2:	466b      	mov	r3, sp
    abc4:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    abc6:	4911      	ldr	r1, [pc, #68]	; (ac0c <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    abc8:	7a0b      	ldrb	r3, [r1, #8]
    abca:	7a4a      	ldrb	r2, [r1, #9]
    abcc:	0212      	lsls	r2, r2, #8
    abce:	4313      	orrs	r3, r2
    abd0:	7a8a      	ldrb	r2, [r1, #10]
    abd2:	0412      	lsls	r2, r2, #16
    abd4:	431a      	orrs	r2, r3
    abd6:	7acb      	ldrb	r3, [r1, #11]
    abd8:	061b      	lsls	r3, r3, #24
    abda:	431a      	orrs	r2, r3
    abdc:	232f      	movs	r3, #47	; 0x2f
    abde:	5cc9      	ldrb	r1, [r1, r3]
    abe0:	004b      	lsls	r3, r1, #1
    abe2:	185b      	adds	r3, r3, r1
    abe4:	009b      	lsls	r3, r3, #2
    abe6:	189b      	adds	r3, r3, r2
    abe8:	7919      	ldrb	r1, [r3, #4]
    abea:	795a      	ldrb	r2, [r3, #5]
    abec:	0212      	lsls	r2, r2, #8
    abee:	4311      	orrs	r1, r2
    abf0:	799a      	ldrb	r2, [r3, #6]
    abf2:	0412      	lsls	r2, r2, #16
    abf4:	430a      	orrs	r2, r1
    abf6:	79db      	ldrb	r3, [r3, #7]
    abf8:	061b      	lsls	r3, r3, #24
    abfa:	4313      	orrs	r3, r2
    abfc:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    abfe:	2208      	movs	r2, #8
    ac00:	4669      	mov	r1, sp
    ac02:	4b04      	ldr	r3, [pc, #16]	; (ac14 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    ac04:	4798      	blx	r3
}
    ac06:	2008      	movs	r0, #8
    ac08:	b002      	add	sp, #8
    ac0a:	bd10      	pop	{r4, pc}
    ac0c:	200024d0 	.word	0x200024d0
    ac10:	00007fe0 	.word	0x00007fe0
    ac14:	00019d1d 	.word	0x00019d1d

0000ac18 <LORAREG_GetAttr_FreqT3>:
{
    ac18:	b510      	push	{r4, lr}
    ac1a:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    ac1c:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    ac1e:	222a      	movs	r2, #42	; 0x2a
    ac20:	490d      	ldr	r1, [pc, #52]	; (ac58 <LORAREG_GetAttr_FreqT3+0x40>)
    ac22:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    ac24:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    ac26:	4293      	cmp	r3, r2
    ac28:	dd00      	ble.n	ac2c <LORAREG_GetAttr_FreqT3+0x14>
}
    ac2a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    ac2c:	0008      	movs	r0, r1
    ac2e:	7a09      	ldrb	r1, [r1, #8]
    ac30:	7a42      	ldrb	r2, [r0, #9]
    ac32:	0212      	lsls	r2, r2, #8
    ac34:	430a      	orrs	r2, r1
    ac36:	7a81      	ldrb	r1, [r0, #10]
    ac38:	0409      	lsls	r1, r1, #16
    ac3a:	430a      	orrs	r2, r1
    ac3c:	7ac1      	ldrb	r1, [r0, #11]
    ac3e:	0609      	lsls	r1, r1, #24
    ac40:	4311      	orrs	r1, r2
    ac42:	005a      	lsls	r2, r3, #1
    ac44:	18d3      	adds	r3, r2, r3
    ac46:	009b      	lsls	r3, r3, #2
    ac48:	18c9      	adds	r1, r1, r3
    ac4a:	2204      	movs	r2, #4
    ac4c:	0020      	movs	r0, r4
    ac4e:	4b03      	ldr	r3, [pc, #12]	; (ac5c <LORAREG_GetAttr_FreqT3+0x44>)
    ac50:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ac52:	2008      	movs	r0, #8
    ac54:	e7e9      	b.n	ac2a <LORAREG_GetAttr_FreqT3+0x12>
    ac56:	46c0      	nop			; (mov r8, r8)
    ac58:	200024d0 	.word	0x200024d0
    ac5c:	00019d1d 	.word	0x00019d1d

0000ac60 <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    ac60:	b500      	push	{lr}
    ac62:	b083      	sub	sp, #12
    ac64:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    ac66:	784b      	ldrb	r3, [r1, #1]
    ac68:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    ac6a:	2b05      	cmp	r3, #5
    ac6c:	d90b      	bls.n	ac86 <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    ac6e:	2105      	movs	r1, #5
    ac70:	1acb      	subs	r3, r1, r3
    ac72:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    ac74:	429a      	cmp	r2, r3
    ac76:	db0c      	blt.n	ac92 <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    ac78:	1ad3      	subs	r3, r2, r3
    ac7a:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    ac7c:	2b05      	cmp	r3, #5
    ac7e:	d804      	bhi.n	ac8a <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    ac80:	466a      	mov	r2, sp
    ac82:	7113      	strb	r3, [r2, #4]
    ac84:	e008      	b.n	ac98 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    ac86:	b25b      	sxtb	r3, r3
    ac88:	e7f4      	b.n	ac74 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    ac8a:	2305      	movs	r3, #5
    ac8c:	466a      	mov	r2, sp
    ac8e:	7113      	strb	r3, [r2, #4]
    ac90:	e002      	b.n	ac98 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    ac92:	2300      	movs	r3, #0
    ac94:	466a      	mov	r2, sp
    ac96:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    ac98:	4911      	ldr	r1, [pc, #68]	; (ace0 <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    ac9a:	7a0b      	ldrb	r3, [r1, #8]
    ac9c:	7a4a      	ldrb	r2, [r1, #9]
    ac9e:	0212      	lsls	r2, r2, #8
    aca0:	4313      	orrs	r3, r2
    aca2:	7a8a      	ldrb	r2, [r1, #10]
    aca4:	0412      	lsls	r2, r2, #16
    aca6:	431a      	orrs	r2, r3
    aca8:	7acb      	ldrb	r3, [r1, #11]
    acaa:	061b      	lsls	r3, r3, #24
    acac:	431a      	orrs	r2, r3
    acae:	232f      	movs	r3, #47	; 0x2f
    acb0:	5cc9      	ldrb	r1, [r1, r3]
    acb2:	004b      	lsls	r3, r1, #1
    acb4:	185b      	adds	r3, r3, r1
    acb6:	009b      	lsls	r3, r3, #2
    acb8:	189b      	adds	r3, r3, r2
    acba:	7919      	ldrb	r1, [r3, #4]
    acbc:	795a      	ldrb	r2, [r3, #5]
    acbe:	0212      	lsls	r2, r2, #8
    acc0:	4311      	orrs	r1, r2
    acc2:	799a      	ldrb	r2, [r3, #6]
    acc4:	0412      	lsls	r2, r2, #16
    acc6:	430a      	orrs	r2, r1
    acc8:	79db      	ldrb	r3, [r3, #7]
    acca:	061b      	lsls	r3, r3, #24
    accc:	4313      	orrs	r3, r2
    acce:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    acd0:	2208      	movs	r2, #8
    acd2:	4669      	mov	r1, sp
    acd4:	4b03      	ldr	r3, [pc, #12]	; (ace4 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    acd6:	4798      	blx	r3
}
    acd8:	2008      	movs	r0, #8
    acda:	b003      	add	sp, #12
    acdc:	bd00      	pop	{pc}
    acde:	46c0      	nop			; (mov r8, r8)
    ace0:	200024d0 	.word	0x200024d0
    ace4:	00019d1d 	.word	0x00019d1d

0000ace8 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    ace8:	b5f0      	push	{r4, r5, r6, r7, lr}
    acea:	46de      	mov	lr, fp
    acec:	4657      	mov	r7, sl
    acee:	464e      	mov	r6, r9
    acf0:	4645      	mov	r5, r8
    acf2:	b5e0      	push	{r5, r6, r7, lr}
    acf4:	b085      	sub	sp, #20
    acf6:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    acf8:	2301      	movs	r3, #1
    acfa:	425b      	negs	r3, r3
    acfc:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    acfe:	780b      	ldrb	r3, [r1, #0]
    ad00:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    ad02:	232a      	movs	r3, #42	; 0x2a
    ad04:	4a2a      	ldr	r2, [pc, #168]	; (adb0 <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    ad06:	56d7      	ldrsb	r7, [r2, r3]
    ad08:	2f00      	cmp	r7, #0
    ad0a:	dd40      	ble.n	ad8e <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    ad0c:	7916      	ldrb	r6, [r2, #4]
    ad0e:	7953      	ldrb	r3, [r2, #5]
    ad10:	021b      	lsls	r3, r3, #8
    ad12:	4333      	orrs	r3, r6
    ad14:	7996      	ldrb	r6, [r2, #6]
    ad16:	0436      	lsls	r6, r6, #16
    ad18:	4333      	orrs	r3, r6
    ad1a:	79d6      	ldrb	r6, [r2, #7]
    ad1c:	0636      	lsls	r6, r6, #24
    ad1e:	431e      	orrs	r6, r3
    ad20:	2300      	movs	r3, #0
    ad22:	469a      	mov	sl, r3
    ad24:	3b01      	subs	r3, #1
    ad26:	4698      	mov	r8, r3
    ad28:	2300      	movs	r3, #0
    ad2a:	2100      	movs	r1, #0
    ad2c:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    ad2e:	464a      	mov	r2, r9
    ad30:	9201      	str	r2, [sp, #4]
    ad32:	46c3      	mov	fp, r8
    ad34:	e004      	b.n	ad40 <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    ad36:	3101      	adds	r1, #1
    ad38:	b2c9      	uxtb	r1, r1
    ad3a:	000b      	movs	r3, r1
    ad3c:	42b9      	cmp	r1, r7
    ad3e:	da23      	bge.n	ad88 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    ad40:	004a      	lsls	r2, r1, #1
    ad42:	18b2      	adds	r2, r6, r2
    ad44:	7814      	ldrb	r4, [r2, #0]
    ad46:	2c00      	cmp	r4, #0
    ad48:	d0f5      	beq.n	ad36 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    ad4a:	3358      	adds	r3, #88	; 0x58
    ad4c:	009b      	lsls	r3, r3, #2
    ad4e:	4463      	add	r3, ip
    ad50:	7a18      	ldrb	r0, [r3, #8]
    ad52:	4680      	mov	r8, r0
    ad54:	7a58      	ldrb	r0, [r3, #9]
    ad56:	0200      	lsls	r0, r0, #8
    ad58:	4645      	mov	r5, r8
    ad5a:	4305      	orrs	r5, r0
    ad5c:	7a98      	ldrb	r0, [r3, #10]
    ad5e:	0400      	lsls	r0, r0, #16
    ad60:	4328      	orrs	r0, r5
    ad62:	7adb      	ldrb	r3, [r3, #11]
    ad64:	061b      	lsls	r3, r3, #24
    ad66:	4303      	orrs	r3, r0
    ad68:	d0e5      	beq.n	ad36 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    ad6a:	459b      	cmp	fp, r3
    ad6c:	d3e3      	bcc.n	ad36 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    ad6e:	7850      	ldrb	r0, [r2, #1]
    ad70:	0700      	lsls	r0, r0, #28
    ad72:	0f00      	lsrs	r0, r0, #28
    ad74:	4581      	cmp	r9, r0
    ad76:	dbde      	blt.n	ad36 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    ad78:	7852      	ldrb	r2, [r2, #1]
    ad7a:	0912      	lsrs	r2, r2, #4
    ad7c:	9801      	ldr	r0, [sp, #4]
    ad7e:	4290      	cmp	r0, r2
    ad80:	dcd9      	bgt.n	ad36 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    ad82:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    ad84:	469b      	mov	fp, r3
    ad86:	e7d6      	b.n	ad36 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    ad88:	4653      	mov	r3, sl
    ad8a:	2b00      	cmp	r3, #0
    ad8c:	d10c      	bne.n	ada8 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    ad8e:	2204      	movs	r2, #4
    ad90:	a903      	add	r1, sp, #12
    ad92:	9800      	ldr	r0, [sp, #0]
    ad94:	4b07      	ldr	r3, [pc, #28]	; (adb4 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    ad96:	4798      	blx	r3
}
    ad98:	2008      	movs	r0, #8
    ad9a:	b005      	add	sp, #20
    ad9c:	bc3c      	pop	{r2, r3, r4, r5}
    ad9e:	4690      	mov	r8, r2
    ada0:	4699      	mov	r9, r3
    ada2:	46a2      	mov	sl, r4
    ada4:	46ab      	mov	fp, r5
    ada6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ada8:	465b      	mov	r3, fp
    adaa:	9303      	str	r3, [sp, #12]
    adac:	e7ef      	b.n	ad8e <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    adae:	46c0      	nop			; (mov r8, r8)
    adb0:	200024d0 	.word	0x200024d0
    adb4:	00019d1d 	.word	0x00019d1d

0000adb8 <ValidateTxFreqT2>:
{
    adb8:	b500      	push	{lr}
    adba:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    adbc:	2208      	movs	r2, #8
    adbe:	4668      	mov	r0, sp
    adc0:	4b04      	ldr	r3, [pc, #16]	; (add4 <ValidateTxFreqT2+0x1c>)
    adc2:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    adc4:	4b04      	ldr	r3, [pc, #16]	; (add8 <ValidateTxFreqT2+0x20>)
    adc6:	685b      	ldr	r3, [r3, #4]
    adc8:	4669      	mov	r1, sp
    adca:	2001      	movs	r0, #1
    adcc:	4798      	blx	r3
}
    adce:	b003      	add	sp, #12
    add0:	bd00      	pop	{pc}
    add2:	46c0      	nop			; (mov r8, r8)
    add4:	00019d1d 	.word	0x00019d1d
    add8:	20000e64 	.word	0x20000e64

0000addc <ValidateFreqIN>:
{
    addc:	b500      	push	{lr}
    adde:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    ade0:	2204      	movs	r2, #4
    ade2:	a801      	add	r0, sp, #4
    ade4:	4b06      	ldr	r3, [pc, #24]	; (ae00 <ValidateFreqIN+0x24>)
    ade6:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    ade8:	9b01      	ldr	r3, [sp, #4]
    adea:	4a06      	ldr	r2, [pc, #24]	; (ae04 <ValidateFreqIN+0x28>)
    adec:	4694      	mov	ip, r2
    adee:	4463      	add	r3, ip
    adf0:	4a05      	ldr	r2, [pc, #20]	; (ae08 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    adf2:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    adf4:	4293      	cmp	r3, r2
    adf6:	d900      	bls.n	adfa <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    adf8:	3002      	adds	r0, #2
}
    adfa:	b003      	add	sp, #12
    adfc:	bd00      	pop	{pc}
    adfe:	46c0      	nop			; (mov r8, r8)
    ae00:	00019d1d 	.word	0x00019d1d
    ae04:	cc7125c0 	.word	0xcc7125c0
    ae08:	001e8480 	.word	0x001e8480

0000ae0c <ValidateFreqJP>:
{
    ae0c:	b500      	push	{lr}
    ae0e:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    ae10:	2204      	movs	r2, #4
    ae12:	a801      	add	r0, sp, #4
    ae14:	4b06      	ldr	r3, [pc, #24]	; (ae30 <ValidateFreqJP+0x24>)
    ae16:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    ae18:	9b01      	ldr	r3, [sp, #4]
    ae1a:	4a06      	ldr	r2, [pc, #24]	; (ae34 <ValidateFreqJP+0x28>)
    ae1c:	4694      	mov	ip, r2
    ae1e:	4463      	add	r3, ip
    ae20:	4a05      	ldr	r2, [pc, #20]	; (ae38 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ae22:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    ae24:	4293      	cmp	r3, r2
    ae26:	d900      	bls.n	ae2a <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    ae28:	3002      	adds	r0, #2
}
    ae2a:	b003      	add	sp, #12
    ae2c:	bd00      	pop	{pc}
    ae2e:	46c0      	nop			; (mov r8, r8)
    ae30:	00019d1d 	.word	0x00019d1d
    ae34:	c929ea00 	.word	0xc929ea00
    ae38:	007a1200 	.word	0x007a1200

0000ae3c <ValidateFreqKR>:
{
    ae3c:	b500      	push	{lr}
    ae3e:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    ae40:	2204      	movs	r2, #4
    ae42:	a801      	add	r0, sp, #4
    ae44:	4b0a      	ldr	r3, [pc, #40]	; (ae70 <ValidateFreqKR+0x34>)
    ae46:	4798      	blx	r3
		if(freq == freqNew)
    ae48:	9a01      	ldr	r2, [sp, #4]
    ae4a:	4b0a      	ldr	r3, [pc, #40]	; (ae74 <ValidateFreqKR+0x38>)
    ae4c:	429a      	cmp	r2, r3
    ae4e:	d00b      	beq.n	ae68 <ValidateFreqKR+0x2c>
    ae50:	4b09      	ldr	r3, [pc, #36]	; (ae78 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    ae52:	490a      	ldr	r1, [pc, #40]	; (ae7c <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    ae54:	429a      	cmp	r2, r3
    ae56:	d009      	beq.n	ae6c <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    ae58:	4809      	ldr	r0, [pc, #36]	; (ae80 <ValidateFreqKR+0x44>)
    ae5a:	4684      	mov	ip, r0
    ae5c:	4463      	add	r3, ip
    ae5e:	428b      	cmp	r3, r1
    ae60:	d1f8      	bne.n	ae54 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    ae62:	200a      	movs	r0, #10
}
    ae64:	b003      	add	sp, #12
    ae66:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    ae68:	2008      	movs	r0, #8
    ae6a:	e7fb      	b.n	ae64 <ValidateFreqKR+0x28>
    ae6c:	2008      	movs	r0, #8
    ae6e:	e7f9      	b.n	ae64 <ValidateFreqKR+0x28>
    ae70:	00019d1d 	.word	0x00019d1d
    ae74:	36e3d1a0 	.word	0x36e3d1a0
    ae78:	36e6dee0 	.word	0x36e6dee0
    ae7c:	370b7de0 	.word	0x370b7de0
    ae80:	00030d40 	.word	0x00030d40

0000ae84 <setNewChannelsT1>:
{
    ae84:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae86:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    ae88:	ac01      	add	r4, sp, #4
    ae8a:	2204      	movs	r2, #4
    ae8c:	0020      	movs	r0, r4
    ae8e:	4b1f      	ldr	r3, [pc, #124]	; (af0c <setNewChannelsT1+0x88>)
    ae90:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    ae92:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    ae94:	78a6      	ldrb	r6, [r4, #2]
    ae96:	466b      	mov	r3, sp
    ae98:	1cd9      	adds	r1, r3, #3
    ae9a:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    ae9c:	201b      	movs	r0, #27
    ae9e:	4b1c      	ldr	r3, [pc, #112]	; (af10 <setNewChannelsT1+0x8c>)
    aea0:	4798      	blx	r3
    aea2:	0005      	movs	r5, r0
    aea4:	2808      	cmp	r0, #8
    aea6:	d003      	beq.n	aeb0 <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    aea8:	250a      	movs	r5, #10
}
    aeaa:	0028      	movs	r0, r5
    aeac:	b003      	add	sp, #12
    aeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    aeb0:	2e06      	cmp	r6, #6
    aeb2:	d01c      	beq.n	aeee <setNewChannelsT1+0x6a>
    aeb4:	d80a      	bhi.n	aecc <setNewChannelsT1+0x48>
    aeb6:	2e04      	cmp	r6, #4
    aeb8:	d8f7      	bhi.n	aeaa <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    aeba:	0136      	lsls	r6, r6, #4
    aebc:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    aebe:	0001      	movs	r1, r0
    aec0:	310f      	adds	r1, #15
    aec2:	b2c9      	uxtb	r1, r1
    aec4:	003a      	movs	r2, r7
    aec6:	4b13      	ldr	r3, [pc, #76]	; (af14 <setNewChannelsT1+0x90>)
    aec8:	4798      	blx	r3
				break;
    aeca:	e7ee      	b.n	aeaa <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    aecc:	2400      	movs	r4, #0
    aece:	2e07      	cmp	r6, #7
    aed0:	d1eb      	bne.n	aeaa <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    aed2:	4e11      	ldr	r6, [pc, #68]	; (af18 <setNewChannelsT1+0x94>)
    aed4:	2100      	movs	r1, #0
    aed6:	0020      	movs	r0, r4
    aed8:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    aeda:	3401      	adds	r4, #1
    aedc:	b2e4      	uxtb	r4, r4
    aede:	2c3f      	cmp	r4, #63	; 0x3f
    aee0:	d1f8      	bne.n	aed4 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    aee2:	003a      	movs	r2, r7
    aee4:	2147      	movs	r1, #71	; 0x47
    aee6:	2040      	movs	r0, #64	; 0x40
    aee8:	4b0a      	ldr	r3, [pc, #40]	; (af14 <setNewChannelsT1+0x90>)
    aeea:	4798      	blx	r3
				break;
    aeec:	e7dd      	b.n	aeaa <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    aeee:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    aef0:	4e09      	ldr	r6, [pc, #36]	; (af18 <setNewChannelsT1+0x94>)
    aef2:	2101      	movs	r1, #1
    aef4:	0020      	movs	r0, r4
    aef6:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    aef8:	3401      	adds	r4, #1
    aefa:	b2e4      	uxtb	r4, r4
    aefc:	2c3f      	cmp	r4, #63	; 0x3f
    aefe:	d1f8      	bne.n	aef2 <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    af00:	003a      	movs	r2, r7
    af02:	2147      	movs	r1, #71	; 0x47
    af04:	2040      	movs	r0, #64	; 0x40
    af06:	4b03      	ldr	r3, [pc, #12]	; (af14 <setNewChannelsT1+0x90>)
    af08:	4798      	blx	r3
			    break;
    af0a:	e7ce      	b.n	aeaa <setNewChannelsT1+0x26>
    af0c:	00019d1d 	.word	0x00019d1d
    af10:	00009ad5 	.word	0x00009ad5
    af14:	0000a1e5 	.word	0x0000a1e5
    af18:	0000a181 	.word	0x0000a181

0000af1c <setDlFrequency>:
{
    af1c:	b530      	push	{r4, r5, lr}
    af1e:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    af20:	ac02      	add	r4, sp, #8
    af22:	2208      	movs	r2, #8
    af24:	0020      	movs	r0, r4
    af26:	4b20      	ldr	r3, [pc, #128]	; (afa8 <setDlFrequency+0x8c>)
    af28:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    af2a:	ab01      	add	r3, sp, #4
    af2c:	7922      	ldrb	r2, [r4, #4]
    af2e:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    af30:	2201      	movs	r2, #1
    af32:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    af34:	4b1d      	ldr	r3, [pc, #116]	; (afac <setDlFrequency+0x90>)
    af36:	685b      	ldr	r3, [r3, #4]
    af38:	0021      	movs	r1, r4
    af3a:	2001      	movs	r0, #1
    af3c:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    af3e:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    af40:	2808      	cmp	r0, #8
    af42:	d002      	beq.n	af4a <setDlFrequency+0x2e>
}
    af44:	0020      	movs	r0, r4
    af46:	b005      	add	sp, #20
    af48:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    af4a:	a901      	add	r1, sp, #4
    af4c:	300d      	adds	r0, #13
    af4e:	4b18      	ldr	r3, [pc, #96]	; (afb0 <setDlFrequency+0x94>)
    af50:	4798      	blx	r3
    af52:	0004      	movs	r4, r0
    af54:	2808      	cmp	r0, #8
    af56:	d001      	beq.n	af5c <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    af58:	240a      	movs	r4, #10
    af5a:	e7f3      	b.n	af44 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    af5c:	4a15      	ldr	r2, [pc, #84]	; (afb4 <setDlFrequency+0x98>)
    af5e:	7a13      	ldrb	r3, [r2, #8]
    af60:	7a50      	ldrb	r0, [r2, #9]
    af62:	0200      	lsls	r0, r0, #8
    af64:	4303      	orrs	r3, r0
    af66:	7a90      	ldrb	r0, [r2, #10]
    af68:	0400      	lsls	r0, r0, #16
    af6a:	4318      	orrs	r0, r3
    af6c:	7ad3      	ldrb	r3, [r2, #11]
    af6e:	061b      	lsls	r3, r3, #24
    af70:	4318      	orrs	r0, r3
    af72:	a902      	add	r1, sp, #8
    af74:	790d      	ldrb	r5, [r1, #4]
    af76:	006b      	lsls	r3, r5, #1
    af78:	195b      	adds	r3, r3, r5
    af7a:	009b      	lsls	r3, r3, #2
    af7c:	181b      	adds	r3, r3, r0
    af7e:	7808      	ldrb	r0, [r1, #0]
    af80:	7118      	strb	r0, [r3, #4]
    af82:	7848      	ldrb	r0, [r1, #1]
    af84:	7158      	strb	r0, [r3, #5]
    af86:	7888      	ldrb	r0, [r1, #2]
    af88:	7198      	strb	r0, [r3, #6]
    af8a:	78c9      	ldrb	r1, [r1, #3]
    af8c:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    af8e:	2384      	movs	r3, #132	; 0x84
    af90:	009b      	lsls	r3, r3, #2
    af92:	5cd3      	ldrb	r3, [r2, r3]
    af94:	4908      	ldr	r1, [pc, #32]	; (afb8 <setDlFrequency+0x9c>)
    af96:	5c50      	ldrb	r0, [r2, r1]
    af98:	0200      	lsls	r0, r0, #8
    af9a:	4318      	orrs	r0, r3
    af9c:	b2c1      	uxtb	r1, r0
    af9e:	0a00      	lsrs	r0, r0, #8
    afa0:	4b06      	ldr	r3, [pc, #24]	; (afbc <setDlFrequency+0xa0>)
    afa2:	4798      	blx	r3
    afa4:	e7ce      	b.n	af44 <setDlFrequency+0x28>
    afa6:	46c0      	nop			; (mov r8, r8)
    afa8:	00019d1d 	.word	0x00019d1d
    afac:	20000e64 	.word	0x20000e64
    afb0:	000099cd 	.word	0x000099cd
    afb4:	200024d0 	.word	0x200024d0
    afb8:	00000211 	.word	0x00000211
    afbc:	0000e071 	.word	0x0000e071

0000afc0 <setFrequency>:
{
    afc0:	b570      	push	{r4, r5, r6, lr}
    afc2:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    afc4:	ac02      	add	r4, sp, #8
    afc6:	2208      	movs	r2, #8
    afc8:	0020      	movs	r0, r4
    afca:	4b3f      	ldr	r3, [pc, #252]	; (b0c8 <setFrequency+0x108>)
    afcc:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    afce:	ab01      	add	r3, sp, #4
    afd0:	7922      	ldrb	r2, [r4, #4]
    afd2:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    afd4:	2200      	movs	r2, #0
    afd6:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    afd8:	4b3c      	ldr	r3, [pc, #240]	; (b0cc <setFrequency+0x10c>)
    afda:	685b      	ldr	r3, [r3, #4]
    afdc:	0021      	movs	r1, r4
    afde:	2001      	movs	r0, #1
    afe0:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    afe2:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    afe4:	2808      	cmp	r0, #8
    afe6:	d002      	beq.n	afee <setFrequency+0x2e>
}
    afe8:	0020      	movs	r0, r4
    afea:	b004      	add	sp, #16
    afec:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    afee:	a901      	add	r1, sp, #4
    aff0:	300d      	adds	r0, #13
    aff2:	4b37      	ldr	r3, [pc, #220]	; (b0d0 <setFrequency+0x110>)
    aff4:	4798      	blx	r3
    aff6:	0004      	movs	r4, r0
    aff8:	2808      	cmp	r0, #8
    affa:	d001      	beq.n	b000 <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    affc:	240a      	movs	r4, #10
    affe:	e7f3      	b.n	afe8 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    b000:	ab02      	add	r3, sp, #8
    b002:	791d      	ldrb	r5, [r3, #4]
		if((((1 << RegParams.band) & ((ISM_EUBAND) | (1 << ISM_JPN923))) != 0))
    b004:	232e      	movs	r3, #46	; 0x2e
    b006:	4a33      	ldr	r2, [pc, #204]	; (b0d4 <setFrequency+0x114>)
    b008:	5cd2      	ldrb	r2, [r2, r3]
    b00a:	3b0b      	subs	r3, #11
    b00c:	4113      	asrs	r3, r2
    b00e:	07db      	lsls	r3, r3, #31
    b010:	d445      	bmi.n	b09e <setFrequency+0xde>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    b012:	006a      	lsls	r2, r5, #1
    b014:	1952      	adds	r2, r2, r5
    b016:	0090      	lsls	r0, r2, #2
    b018:	a902      	add	r1, sp, #8
    b01a:	9d02      	ldr	r5, [sp, #8]
    b01c:	4b2d      	ldr	r3, [pc, #180]	; (b0d4 <setFrequency+0x114>)
    b01e:	7a1a      	ldrb	r2, [r3, #8]
    b020:	7a5e      	ldrb	r6, [r3, #9]
    b022:	0236      	lsls	r6, r6, #8
    b024:	4316      	orrs	r6, r2
    b026:	7a9a      	ldrb	r2, [r3, #10]
    b028:	0412      	lsls	r2, r2, #16
    b02a:	4316      	orrs	r6, r2
    b02c:	7ada      	ldrb	r2, [r3, #11]
    b02e:	0612      	lsls	r2, r2, #24
    b030:	4332      	orrs	r2, r6
    b032:	5415      	strb	r5, [r2, r0]
    b034:	0a2e      	lsrs	r6, r5, #8
    b036:	1812      	adds	r2, r2, r0
    b038:	7056      	strb	r6, [r2, #1]
    b03a:	0c2e      	lsrs	r6, r5, #16
    b03c:	7096      	strb	r6, [r2, #2]
    b03e:	0e2d      	lsrs	r5, r5, #24
    b040:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    b042:	7a1a      	ldrb	r2, [r3, #8]
    b044:	7a5d      	ldrb	r5, [r3, #9]
    b046:	022d      	lsls	r5, r5, #8
    b048:	4315      	orrs	r5, r2
    b04a:	7a9a      	ldrb	r2, [r3, #10]
    b04c:	0412      	lsls	r2, r2, #16
    b04e:	4315      	orrs	r5, r2
    b050:	7ada      	ldrb	r2, [r3, #11]
    b052:	0612      	lsls	r2, r2, #24
    b054:	432a      	orrs	r2, r5
    b056:	1812      	adds	r2, r2, r0
    b058:	780d      	ldrb	r5, [r1, #0]
    b05a:	7115      	strb	r5, [r2, #4]
    b05c:	784d      	ldrb	r5, [r1, #1]
    b05e:	7155      	strb	r5, [r2, #5]
    b060:	788d      	ldrb	r5, [r1, #2]
    b062:	7195      	strb	r5, [r2, #6]
    b064:	78c9      	ldrb	r1, [r1, #3]
    b066:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    b068:	7a1a      	ldrb	r2, [r3, #8]
    b06a:	7a59      	ldrb	r1, [r3, #9]
    b06c:	0209      	lsls	r1, r1, #8
    b06e:	4311      	orrs	r1, r2
    b070:	7a9a      	ldrb	r2, [r3, #10]
    b072:	0412      	lsls	r2, r2, #16
    b074:	4311      	orrs	r1, r2
    b076:	7ada      	ldrb	r2, [r3, #11]
    b078:	0612      	lsls	r2, r2, #24
    b07a:	430a      	orrs	r2, r1
    b07c:	1812      	adds	r2, r2, r0
    b07e:	7ad1      	ldrb	r1, [r2, #11]
    b080:	2001      	movs	r0, #1
    b082:	4301      	orrs	r1, r0
    b084:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    b086:	2284      	movs	r2, #132	; 0x84
    b088:	0092      	lsls	r2, r2, #2
    b08a:	5c9a      	ldrb	r2, [r3, r2]
    b08c:	4912      	ldr	r1, [pc, #72]	; (b0d8 <setFrequency+0x118>)
    b08e:	5c58      	ldrb	r0, [r3, r1]
    b090:	0200      	lsls	r0, r0, #8
    b092:	4310      	orrs	r0, r2
    b094:	b2c1      	uxtb	r1, r0
    b096:	0a00      	lsrs	r0, r0, #8
    b098:	4b10      	ldr	r3, [pc, #64]	; (b0dc <setFrequency+0x11c>)
    b09a:	4798      	blx	r3
    b09c:	e7a4      	b.n	afe8 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    b09e:	4a0d      	ldr	r2, [pc, #52]	; (b0d4 <setFrequency+0x114>)
    b0a0:	7a16      	ldrb	r6, [r2, #8]
    b0a2:	7a53      	ldrb	r3, [r2, #9]
    b0a4:	021b      	lsls	r3, r3, #8
    b0a6:	4333      	orrs	r3, r6
    b0a8:	7a96      	ldrb	r6, [r2, #10]
    b0aa:	0436      	lsls	r6, r6, #16
    b0ac:	4333      	orrs	r3, r6
    b0ae:	7ad6      	ldrb	r6, [r2, #11]
    b0b0:	0636      	lsls	r6, r6, #24
    b0b2:	431e      	orrs	r6, r3
    b0b4:	006b      	lsls	r3, r5, #1
    b0b6:	195b      	adds	r3, r3, r5
    b0b8:	009b      	lsls	r3, r3, #2
    b0ba:	18f6      	adds	r6, r6, r3
    b0bc:	9802      	ldr	r0, [sp, #8]
    b0be:	4b08      	ldr	r3, [pc, #32]	; (b0e0 <setFrequency+0x120>)
    b0c0:	4798      	blx	r3
    b0c2:	7230      	strb	r0, [r6, #8]
    b0c4:	e7a5      	b.n	b012 <setFrequency+0x52>
    b0c6:	46c0      	nop			; (mov r8, r8)
    b0c8:	00019d1d 	.word	0x00019d1d
    b0cc:	20000e64 	.word	0x20000e64
    b0d0:	000099cd 	.word	0x000099cd
    b0d4:	200024d0 	.word	0x200024d0
    b0d8:	00000211 	.word	0x00000211
    b0dc:	0000e071 	.word	0x0000e071
    b0e0:	00009c81 	.word	0x00009c81

0000b0e4 <setDutyCycle>:
{
    b0e4:	b570      	push	{r4, r5, r6, lr}
    b0e6:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    b0e8:	ac01      	add	r4, sp, #4
    b0ea:	2204      	movs	r2, #4
    b0ec:	0020      	movs	r0, r4
    b0ee:	4b2d      	ldr	r3, [pc, #180]	; (b1a4 <setDutyCycle+0xc0>)
    b0f0:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    b0f2:	78a5      	ldrb	r5, [r4, #2]
    b0f4:	466b      	mov	r3, sp
    b0f6:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    b0f8:	2301      	movs	r3, #1
    b0fa:	466a      	mov	r2, sp
    b0fc:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    b0fe:	4669      	mov	r1, sp
    b100:	2015      	movs	r0, #21
    b102:	4b29      	ldr	r3, [pc, #164]	; (b1a8 <setDutyCycle+0xc4>)
    b104:	4798      	blx	r3
    b106:	0004      	movs	r4, r0
    b108:	2808      	cmp	r0, #8
    b10a:	d003      	beq.n	b114 <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    b10c:	240a      	movs	r4, #10
}
    b10e:	0020      	movs	r0, r4
    b110:	b002      	add	sp, #8
    b112:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    b114:	0069      	lsls	r1, r5, #1
    b116:	1949      	adds	r1, r1, r5
    b118:	0089      	lsls	r1, r1, #2
    b11a:	4b24      	ldr	r3, [pc, #144]	; (b1ac <setDutyCycle+0xc8>)
    b11c:	7a1a      	ldrb	r2, [r3, #8]
    b11e:	7a58      	ldrb	r0, [r3, #9]
    b120:	0200      	lsls	r0, r0, #8
    b122:	4310      	orrs	r0, r2
    b124:	7a9a      	ldrb	r2, [r3, #10]
    b126:	0412      	lsls	r2, r2, #16
    b128:	4310      	orrs	r0, r2
    b12a:	7ada      	ldrb	r2, [r3, #11]
    b12c:	0612      	lsls	r2, r2, #24
    b12e:	4302      	orrs	r2, r0
    b130:	1852      	adds	r2, r2, r1
    b132:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    b134:	0028      	movs	r0, r5
    b136:	30d4      	adds	r0, #212	; 0xd4
    b138:	0040      	lsls	r0, r0, #1
    b13a:	aa01      	add	r2, sp, #4
    b13c:	1818      	adds	r0, r3, r0
    b13e:	7816      	ldrb	r6, [r2, #0]
    b140:	7146      	strb	r6, [r0, #5]
    b142:	7852      	ldrb	r2, [r2, #1]
    b144:	7182      	strb	r2, [r0, #6]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    b146:	7b18      	ldrb	r0, [r3, #12]
    b148:	7b5a      	ldrb	r2, [r3, #13]
    b14a:	0212      	lsls	r2, r2, #8
    b14c:	4302      	orrs	r2, r0
    b14e:	7b98      	ldrb	r0, [r3, #14]
    b150:	0400      	lsls	r0, r0, #16
    b152:	4302      	orrs	r2, r0
    b154:	7bd8      	ldrb	r0, [r3, #15]
    b156:	0600      	lsls	r0, r0, #24
    b158:	4310      	orrs	r0, r2
    b15a:	006a      	lsls	r2, r5, #1
    b15c:	1952      	adds	r2, r2, r5
    b15e:	0092      	lsls	r2, r2, #2
    b160:	1812      	adds	r2, r2, r0
    b162:	2000      	movs	r0, #0
    b164:	7210      	strb	r0, [r2, #8]
    b166:	7250      	strb	r0, [r2, #9]
    b168:	7290      	strb	r0, [r2, #10]
    b16a:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    b16c:	7a1d      	ldrb	r5, [r3, #8]
    b16e:	7a5a      	ldrb	r2, [r3, #9]
    b170:	0212      	lsls	r2, r2, #8
    b172:	432a      	orrs	r2, r5
    b174:	7a9d      	ldrb	r5, [r3, #10]
    b176:	042d      	lsls	r5, r5, #16
    b178:	432a      	orrs	r2, r5
    b17a:	7add      	ldrb	r5, [r3, #11]
    b17c:	062d      	lsls	r5, r5, #24
    b17e:	4315      	orrs	r5, r2
    b180:	186d      	adds	r5, r5, r1
    b182:	7aea      	ldrb	r2, [r5, #11]
    b184:	2104      	movs	r1, #4
    b186:	430a      	orrs	r2, r1
    b188:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    b18a:	2284      	movs	r2, #132	; 0x84
    b18c:	0092      	lsls	r2, r2, #2
    b18e:	5c9a      	ldrb	r2, [r3, r2]
    b190:	4907      	ldr	r1, [pc, #28]	; (b1b0 <setDutyCycle+0xcc>)
    b192:	5c58      	ldrb	r0, [r3, r1]
    b194:	0200      	lsls	r0, r0, #8
    b196:	4310      	orrs	r0, r2
    b198:	b2c1      	uxtb	r1, r0
    b19a:	0a00      	lsrs	r0, r0, #8
    b19c:	4b05      	ldr	r3, [pc, #20]	; (b1b4 <setDutyCycle+0xd0>)
    b19e:	4798      	blx	r3
    b1a0:	e7b5      	b.n	b10e <setDutyCycle+0x2a>
    b1a2:	46c0      	nop			; (mov r8, r8)
    b1a4:	00019d1d 	.word	0x00019d1d
    b1a8:	000099cd 	.word	0x000099cd
    b1ac:	200024d0 	.word	0x200024d0
    b1b0:	00000211 	.word	0x00000211
    b1b4:	0000e071 	.word	0x0000e071

0000b1b8 <SearchAvailableChannel2>:
{
    b1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1ba:	46de      	mov	lr, fp
    b1bc:	4657      	mov	r7, sl
    b1be:	464e      	mov	r6, r9
    b1c0:	4645      	mov	r5, r8
    b1c2:	b5e0      	push	{r5, r6, r7, lr}
    b1c4:	b087      	sub	sp, #28
    b1c6:	af00      	add	r7, sp, #0
    b1c8:	0004      	movs	r4, r0
    b1ca:	4688      	mov	r8, r1
    b1cc:	60f9      	str	r1, [r7, #12]
    b1ce:	0015      	movs	r5, r2
    b1d0:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    b1d2:	1dc3      	adds	r3, r0, #7
    b1d4:	08db      	lsrs	r3, r3, #3
    b1d6:	00db      	lsls	r3, r3, #3
    b1d8:	466a      	mov	r2, sp
    b1da:	1ad3      	subs	r3, r2, r3
    b1dc:	469d      	mov	sp, r3
    b1de:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    b1e0:	0002      	movs	r2, r0
    b1e2:	2100      	movs	r1, #0
    b1e4:	4668      	mov	r0, sp
    b1e6:	4b5c      	ldr	r3, [pc, #368]	; (b358 <SearchAvailableChannel2+0x1a0>)
    b1e8:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    b1ea:	232e      	movs	r3, #46	; 0x2e
    b1ec:	4a5b      	ldr	r2, [pc, #364]	; (b35c <SearchAvailableChannel2+0x1a4>)
    b1ee:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    b1f0:	4643      	mov	r3, r8
    b1f2:	2b00      	cmp	r3, #0
    b1f4:	d148      	bne.n	b288 <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    b1f6:	3320      	adds	r3, #32
    b1f8:	5cd3      	ldrb	r3, [r2, r3]
    b1fa:	069b      	lsls	r3, r3, #26
    b1fc:	d431      	bmi.n	b262 <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    b1fe:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    b200:	2c00      	cmp	r4, #0
    b202:	d100      	bne.n	b206 <SearchAvailableChannel2+0x4e>
    b204:	e093      	b.n	b32e <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    b206:	4b56      	ldr	r3, [pc, #344]	; (b360 <SearchAvailableChannel2+0x1a8>)
    b208:	4133      	asrs	r3, r6
    b20a:	2201      	movs	r2, #1
    b20c:	401a      	ands	r2, r3
    b20e:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b210:	4b52      	ldr	r3, [pc, #328]	; (b35c <SearchAvailableChannel2+0x1a4>)
    b212:	7b19      	ldrb	r1, [r3, #12]
    b214:	7b5a      	ldrb	r2, [r3, #13]
    b216:	0212      	lsls	r2, r2, #8
    b218:	4311      	orrs	r1, r2
    b21a:	7b9a      	ldrb	r2, [r3, #14]
    b21c:	0412      	lsls	r2, r2, #16
    b21e:	430a      	orrs	r2, r1
    b220:	7bd9      	ldrb	r1, [r3, #15]
    b222:	0609      	lsls	r1, r1, #24
    b224:	4311      	orrs	r1, r2
    b226:	468c      	mov	ip, r1
    b228:	7a18      	ldrb	r0, [r3, #8]
    b22a:	7a5a      	ldrb	r2, [r3, #9]
    b22c:	0212      	lsls	r2, r2, #8
    b22e:	4302      	orrs	r2, r0
    b230:	7a98      	ldrb	r0, [r3, #10]
    b232:	0400      	lsls	r0, r0, #16
    b234:	4302      	orrs	r2, r0
    b236:	7ad8      	ldrb	r0, [r3, #11]
    b238:	0600      	lsls	r0, r0, #24
    b23a:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b23c:	791a      	ldrb	r2, [r3, #4]
    b23e:	7959      	ldrb	r1, [r3, #5]
    b240:	0209      	lsls	r1, r1, #8
    b242:	4311      	orrs	r1, r2
    b244:	799a      	ldrb	r2, [r3, #6]
    b246:	0412      	lsls	r2, r2, #16
    b248:	4311      	orrs	r1, r2
    b24a:	79da      	ldrb	r2, [r3, #7]
    b24c:	0612      	lsls	r2, r2, #24
    b24e:	430a      	orrs	r2, r1
    b250:	0006      	movs	r6, r0
    b252:	3608      	adds	r6, #8
    b254:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b256:	2300      	movs	r3, #0
    b258:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b25a:	46aa      	mov	sl, r5
    b25c:	46a9      	mov	r9, r5
    b25e:	0025      	movs	r5, r4
    b260:	e036      	b.n	b2d0 <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    b262:	0011      	movs	r1, r2
    b264:	7d13      	ldrb	r3, [r2, #20]
    b266:	7d52      	ldrb	r2, [r2, #21]
    b268:	0212      	lsls	r2, r2, #8
    b26a:	431a      	orrs	r2, r3
    b26c:	7d8b      	ldrb	r3, [r1, #22]
    b26e:	041b      	lsls	r3, r3, #16
    b270:	431a      	orrs	r2, r3
    b272:	7dcb      	ldrb	r3, [r1, #23]
    b274:	061b      	lsls	r3, r3, #24
    b276:	4313      	orrs	r3, r2
    b278:	7a18      	ldrb	r0, [r3, #8]
    b27a:	4b3a      	ldr	r3, [pc, #232]	; (b364 <SearchAvailableChannel2+0x1ac>)
    b27c:	4798      	blx	r3
    b27e:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    b280:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    b282:	2b00      	cmp	r3, #0
    b284:	d0bb      	beq.n	b1fe <SearchAvailableChannel2+0x46>
    b286:	e052      	b.n	b32e <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    b288:	4934      	ldr	r1, [pc, #208]	; (b35c <SearchAvailableChannel2+0x1a4>)
    b28a:	23ba      	movs	r3, #186	; 0xba
    b28c:	33ff      	adds	r3, #255	; 0xff
    b28e:	5ccb      	ldrb	r3, [r1, r3]
    b290:	22dd      	movs	r2, #221	; 0xdd
    b292:	0052      	lsls	r2, r2, #1
    b294:	5c8a      	ldrb	r2, [r1, r2]
    b296:	0212      	lsls	r2, r2, #8
    b298:	431a      	orrs	r2, r3
    b29a:	23bc      	movs	r3, #188	; 0xbc
    b29c:	33ff      	adds	r3, #255	; 0xff
    b29e:	5ccb      	ldrb	r3, [r1, r3]
    b2a0:	041b      	lsls	r3, r3, #16
    b2a2:	431a      	orrs	r2, r3
    b2a4:	23de      	movs	r3, #222	; 0xde
    b2a6:	005b      	lsls	r3, r3, #1
    b2a8:	5ccb      	ldrb	r3, [r1, r3]
    b2aa:	061b      	lsls	r3, r3, #24
    b2ac:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    b2ae:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    b2b0:	2b00      	cmp	r3, #0
    b2b2:	d0a4      	beq.n	b1fe <SearchAvailableChannel2+0x46>
    b2b4:	e03b      	b.n	b32e <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    b2b6:	693c      	ldr	r4, [r7, #16]
    b2b8:	6979      	ldr	r1, [r7, #20]
    b2ba:	5463      	strb	r3, [r4, r1]
					num++;
    b2bc:	3101      	adds	r1, #1
    b2be:	b2c9      	uxtb	r1, r1
    b2c0:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    b2c2:	3301      	adds	r3, #1
    b2c4:	b2db      	uxtb	r3, r3
    b2c6:	3202      	adds	r2, #2
    b2c8:	360c      	adds	r6, #12
    b2ca:	300c      	adds	r0, #12
    b2cc:	429d      	cmp	r5, r3
    b2ce:	d02a      	beq.n	b326 <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b2d0:	7811      	ldrb	r1, [r2, #0]
    b2d2:	2900      	cmp	r1, #0
    b2d4:	d0f5      	beq.n	b2c2 <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b2d6:	7851      	ldrb	r1, [r2, #1]
    b2d8:	0709      	lsls	r1, r1, #28
    b2da:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    b2dc:	4589      	cmp	r9, r1
    b2de:	dbf0      	blt.n	b2c2 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    b2e0:	7851      	ldrb	r1, [r2, #1]
    b2e2:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    b2e4:	458a      	cmp	sl, r1
    b2e6:	dcec      	bgt.n	b2c2 <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    b2e8:	4641      	mov	r1, r8
    b2ea:	2900      	cmp	r1, #0
    b2ec:	d014      	beq.n	b318 <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    b2ee:	7834      	ldrb	r4, [r6, #0]
    b2f0:	0061      	lsls	r1, r4, #1
    b2f2:	1909      	adds	r1, r1, r4
    b2f4:	0089      	lsls	r1, r1, #2
    b2f6:	4461      	add	r1, ip
    b2f8:	7a0c      	ldrb	r4, [r1, #8]
    b2fa:	46a3      	mov	fp, r4
    b2fc:	60b9      	str	r1, [r7, #8]
    b2fe:	7a4c      	ldrb	r4, [r1, #9]
    b300:	0224      	lsls	r4, r4, #8
    b302:	4659      	mov	r1, fp
    b304:	430c      	orrs	r4, r1
    b306:	68b9      	ldr	r1, [r7, #8]
    b308:	7a89      	ldrb	r1, [r1, #10]
    b30a:	0409      	lsls	r1, r1, #16
    b30c:	430c      	orrs	r4, r1
    b30e:	68b9      	ldr	r1, [r7, #8]
    b310:	7ac9      	ldrb	r1, [r1, #11]
    b312:	0609      	lsls	r1, r1, #24
    b314:	4321      	orrs	r1, r4
    b316:	d1d4      	bne.n	b2c2 <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    b318:	68f9      	ldr	r1, [r7, #12]
    b31a:	2900      	cmp	r1, #0
    b31c:	d1cb      	bne.n	b2b6 <SearchAvailableChannel2+0xfe>
    b31e:	7801      	ldrb	r1, [r0, #0]
    b320:	2900      	cmp	r1, #0
    b322:	d0ce      	beq.n	b2c2 <SearchAvailableChannel2+0x10a>
    b324:	e7c7      	b.n	b2b6 <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    b326:	2010      	movs	r0, #16
	if(0 != num)
    b328:	697c      	ldr	r4, [r7, #20]
    b32a:	2c00      	cmp	r4, #0
    b32c:	d107      	bne.n	b33e <SearchAvailableChannel2+0x186>
}
    b32e:	46bd      	mov	sp, r7
    b330:	b007      	add	sp, #28
    b332:	bc3c      	pop	{r2, r3, r4, r5}
    b334:	4690      	mov	r8, r2
    b336:	4699      	mov	r9, r3
    b338:	46a2      	mov	sl, r4
    b33a:	46ab      	mov	fp, r5
    b33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    b33e:	4b0a      	ldr	r3, [pc, #40]	; (b368 <SearchAvailableChannel2+0x1b0>)
    b340:	4798      	blx	r3
    b342:	0021      	movs	r1, r4
    b344:	4b09      	ldr	r3, [pc, #36]	; (b36c <SearchAvailableChannel2+0x1b4>)
    b346:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    b348:	23ff      	movs	r3, #255	; 0xff
    b34a:	4019      	ands	r1, r3
    b34c:	693b      	ldr	r3, [r7, #16]
    b34e:	5c5b      	ldrb	r3, [r3, r1]
    b350:	687a      	ldr	r2, [r7, #4]
    b352:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b354:	2008      	movs	r0, #8
    b356:	e7ea      	b.n	b32e <SearchAvailableChannel2+0x176>
    b358:	00019e41 	.word	0x00019e41
    b35c:	200024d0 	.word	0x200024d0
    b360:	00007fe3 	.word	0x00007fe3
    b364:	0000ef39 	.word	0x0000ef39
    b368:	00019fe1 	.word	0x00019fe1
    b36c:	00016899 	.word	0x00016899

0000b370 <LORAREG_GetAttr_FreeChannel2>:
{
    b370:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    b372:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    b374:	202a      	movs	r0, #42	; 0x2a
    b376:	4d07      	ldr	r5, [pc, #28]	; (b394 <LORAREG_GetAttr_FreeChannel2+0x24>)
    b378:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    b37a:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    b37c:	42ac      	cmp	r4, r5
    b37e:	dd00      	ble.n	b382 <LORAREG_GetAttr_FreeChannel2+0x12>
}
    b380:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    b382:	7888      	ldrb	r0, [r1, #2]
    b384:	7809      	ldrb	r1, [r1, #0]
    b386:	0013      	movs	r3, r2
    b388:	0002      	movs	r2, r0
    b38a:	0020      	movs	r0, r4
    b38c:	4c02      	ldr	r4, [pc, #8]	; (b398 <LORAREG_GetAttr_FreeChannel2+0x28>)
    b38e:	47a0      	blx	r4
	return result;
    b390:	e7f6      	b.n	b380 <LORAREG_GetAttr_FreeChannel2+0x10>
    b392:	46c0      	nop			; (mov r8, r8)
    b394:	200024d0 	.word	0x200024d0
    b398:	0000b1b9 	.word	0x0000b1b9

0000b39c <setJoinBackoffCntl>:
{   
    b39c:	b500      	push	{lr}
    b39e:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    b3a0:	780b      	ldrb	r3, [r1, #0]
    b3a2:	466a      	mov	r2, sp
    b3a4:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	d145      	bne.n	b436 <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    b3aa:	3320      	adds	r3, #32
    b3ac:	4a26      	ldr	r2, [pc, #152]	; (b448 <setJoinBackoffCntl+0xac>)
    b3ae:	5cd3      	ldrb	r3, [r2, r3]
    b3b0:	069a      	lsls	r2, r3, #26
    b3b2:	d546      	bpl.n	b442 <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    b3b4:	4924      	ldr	r1, [pc, #144]	; (b448 <setJoinBackoffCntl+0xac>)
    b3b6:	2220      	movs	r2, #32
    b3b8:	4393      	bics	r3, r2
    b3ba:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    b3bc:	7e0b      	ldrb	r3, [r1, #24]
    b3be:	7e4a      	ldrb	r2, [r1, #25]
    b3c0:	0212      	lsls	r2, r2, #8
    b3c2:	431a      	orrs	r2, r3
    b3c4:	7e8b      	ldrb	r3, [r1, #26]
    b3c6:	041b      	lsls	r3, r3, #16
    b3c8:	431a      	orrs	r2, r3
    b3ca:	7ecb      	ldrb	r3, [r1, #27]
    b3cc:	061b      	lsls	r3, r3, #24
    b3ce:	4313      	orrs	r3, r2
    b3d0:	7818      	ldrb	r0, [r3, #0]
    b3d2:	4b1e      	ldr	r3, [pc, #120]	; (b44c <setJoinBackoffCntl+0xb0>)
    b3d4:	4798      	blx	r3
    b3d6:	2800      	cmp	r0, #0
    b3d8:	d11e      	bne.n	b418 <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b3da:	491b      	ldr	r1, [pc, #108]	; (b448 <setJoinBackoffCntl+0xac>)
    b3dc:	7d0b      	ldrb	r3, [r1, #20]
    b3de:	7d4a      	ldrb	r2, [r1, #21]
    b3e0:	0212      	lsls	r2, r2, #8
    b3e2:	431a      	orrs	r2, r3
    b3e4:	7d8b      	ldrb	r3, [r1, #22]
    b3e6:	041b      	lsls	r3, r3, #16
    b3e8:	431a      	orrs	r2, r3
    b3ea:	7dcb      	ldrb	r3, [r1, #23]
    b3ec:	061b      	lsls	r3, r3, #24
    b3ee:	4313      	orrs	r3, r2
    b3f0:	7a18      	ldrb	r0, [r3, #8]
    b3f2:	4b16      	ldr	r3, [pc, #88]	; (b44c <setJoinBackoffCntl+0xb0>)
    b3f4:	4798      	blx	r3
    b3f6:	2800      	cmp	r0, #0
    b3f8:	d023      	beq.n	b442 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b3fa:	4913      	ldr	r1, [pc, #76]	; (b448 <setJoinBackoffCntl+0xac>)
    b3fc:	7d0b      	ldrb	r3, [r1, #20]
    b3fe:	7d4a      	ldrb	r2, [r1, #21]
    b400:	0212      	lsls	r2, r2, #8
    b402:	431a      	orrs	r2, r3
    b404:	7d8b      	ldrb	r3, [r1, #22]
    b406:	041b      	lsls	r3, r3, #16
    b408:	431a      	orrs	r2, r3
    b40a:	7dcb      	ldrb	r3, [r1, #23]
    b40c:	061b      	lsls	r3, r3, #24
    b40e:	4313      	orrs	r3, r2
    b410:	7a18      	ldrb	r0, [r3, #8]
    b412:	4b0f      	ldr	r3, [pc, #60]	; (b450 <setJoinBackoffCntl+0xb4>)
    b414:	4798      	blx	r3
    b416:	e014      	b.n	b442 <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    b418:	490b      	ldr	r1, [pc, #44]	; (b448 <setJoinBackoffCntl+0xac>)
    b41a:	7e0b      	ldrb	r3, [r1, #24]
    b41c:	7e4a      	ldrb	r2, [r1, #25]
    b41e:	0212      	lsls	r2, r2, #8
    b420:	431a      	orrs	r2, r3
    b422:	7e8b      	ldrb	r3, [r1, #26]
    b424:	041b      	lsls	r3, r3, #16
    b426:	431a      	orrs	r2, r3
    b428:	7ecb      	ldrb	r3, [r1, #27]
    b42a:	061b      	lsls	r3, r3, #24
    b42c:	4313      	orrs	r3, r2
    b42e:	7818      	ldrb	r0, [r3, #0]
    b430:	4b07      	ldr	r3, [pc, #28]	; (b450 <setJoinBackoffCntl+0xb4>)
    b432:	4798      	blx	r3
    b434:	e7d1      	b.n	b3da <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    b436:	4904      	ldr	r1, [pc, #16]	; (b448 <setJoinBackoffCntl+0xac>)
    b438:	2220      	movs	r2, #32
    b43a:	5c8b      	ldrb	r3, [r1, r2]
    b43c:	2020      	movs	r0, #32
    b43e:	4303      	orrs	r3, r0
    b440:	548b      	strb	r3, [r1, r2]
}
    b442:	2008      	movs	r0, #8
    b444:	b003      	add	sp, #12
    b446:	bd00      	pop	{pc}
    b448:	200024d0 	.word	0x200024d0
    b44c:	0000ef39 	.word	0x0000ef39
    b450:	0000f0b9 	.word	0x0000f0b9

0000b454 <setJoinBackOffTimer>:
{
    b454:	b510      	push	{r4, lr}
    b456:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    b458:	780b      	ldrb	r3, [r1, #0]
    b45a:	220f      	movs	r2, #15
    b45c:	446a      	add	r2, sp
    b45e:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    b460:	2b00      	cmp	r3, #0
    b462:	d113      	bne.n	b48c <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    b464:	4c13      	ldr	r4, [pc, #76]	; (b4b4 <setJoinBackOffTimer+0x60>)
    b466:	7e23      	ldrb	r3, [r4, #24]
    b468:	7e62      	ldrb	r2, [r4, #25]
    b46a:	0212      	lsls	r2, r2, #8
    b46c:	431a      	orrs	r2, r3
    b46e:	7ea3      	ldrb	r3, [r4, #26]
    b470:	041b      	lsls	r3, r3, #16
    b472:	431a      	orrs	r2, r3
    b474:	7ee3      	ldrb	r3, [r4, #27]
    b476:	061b      	lsls	r3, r3, #24
    b478:	4313      	orrs	r3, r2
    b47a:	7818      	ldrb	r0, [r3, #0]
    b47c:	4b0e      	ldr	r3, [pc, #56]	; (b4b8 <setJoinBackOffTimer+0x64>)
    b47e:	4798      	blx	r3
		RegParams.joinbccount = 0;
    b480:	2200      	movs	r2, #0
    b482:	2342      	movs	r3, #66	; 0x42
    b484:	54e2      	strb	r2, [r4, r3]
}
    b486:	2008      	movs	r0, #8
    b488:	b004      	add	sp, #16
    b48a:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    b48c:	4909      	ldr	r1, [pc, #36]	; (b4b4 <setJoinBackOffTimer+0x60>)
    b48e:	7e0b      	ldrb	r3, [r1, #24]
    b490:	7e4a      	ldrb	r2, [r1, #25]
    b492:	0212      	lsls	r2, r2, #8
    b494:	431a      	orrs	r2, r3
    b496:	7e8b      	ldrb	r3, [r1, #26]
    b498:	041b      	lsls	r3, r3, #16
    b49a:	431a      	orrs	r2, r3
    b49c:	7ecb      	ldrb	r3, [r1, #27]
    b49e:	061b      	lsls	r3, r3, #24
    b4a0:	4313      	orrs	r3, r2
    b4a2:	7818      	ldrb	r0, [r3, #0]
    b4a4:	2300      	movs	r3, #0
    b4a6:	9300      	str	r3, [sp, #0]
    b4a8:	4b04      	ldr	r3, [pc, #16]	; (b4bc <setJoinBackOffTimer+0x68>)
    b4aa:	2200      	movs	r2, #0
    b4ac:	4904      	ldr	r1, [pc, #16]	; (b4c0 <setJoinBackOffTimer+0x6c>)
    b4ae:	4c05      	ldr	r4, [pc, #20]	; (b4c4 <setJoinBackOffTimer+0x70>)
    b4b0:	47a0      	blx	r4
    b4b2:	e7e8      	b.n	b486 <setJoinBackOffTimer+0x32>
    b4b4:	200024d0 	.word	0x200024d0
    b4b8:	0000f0b9 	.word	0x0000f0b9
    b4bc:	0000c0d5 	.word	0x0000c0d5
    b4c0:	6b49d200 	.word	0x6b49d200
    b4c4:	0000eda1 	.word	0x0000eda1

0000b4c8 <setJoinDutyCycleTimer>:
{
    b4c8:	b530      	push	{r4, r5, lr}
    b4ca:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    b4cc:	ac02      	add	r4, sp, #8
    b4ce:	2208      	movs	r2, #8
    b4d0:	0020      	movs	r0, r4
    b4d2:	4b93      	ldr	r3, [pc, #588]	; (b720 <setJoinDutyCycleTimer+0x258>)
    b4d4:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    b4d6:	7923      	ldrb	r3, [r4, #4]
    b4d8:	2b00      	cmp	r3, #0
    b4da:	d100      	bne.n	b4de <setJoinDutyCycleTimer+0x16>
    b4dc:	e0f8      	b.n	b6d0 <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    b4de:	2342      	movs	r3, #66	; 0x42
    b4e0:	4a90      	ldr	r2, [pc, #576]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b4e2:	5cd3      	ldrb	r3, [r2, r3]
    b4e4:	2b01      	cmp	r3, #1
    b4e6:	d800      	bhi.n	b4ea <setJoinDutyCycleTimer+0x22>
    b4e8:	e081      	b.n	b5ee <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    b4ea:	2b13      	cmp	r3, #19
    b4ec:	d900      	bls.n	b4f0 <setJoinDutyCycleTimer+0x28>
    b4ee:	e08d      	b.n	b60c <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    b4f0:	4b8d      	ldr	r3, [pc, #564]	; (b728 <setJoinDutyCycleTimer+0x260>)
    b4f2:	9a02      	ldr	r2, [sp, #8]
    b4f4:	4353      	muls	r3, r2
    b4f6:	4a8b      	ldr	r2, [pc, #556]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b4f8:	323e      	adds	r2, #62	; 0x3e
    b4fa:	7013      	strb	r3, [r2, #0]
    b4fc:	0a19      	lsrs	r1, r3, #8
    b4fe:	7051      	strb	r1, [r2, #1]
    b500:	0c19      	lsrs	r1, r3, #16
    b502:	7091      	strb	r1, [r2, #2]
    b504:	0e1b      	lsrs	r3, r3, #24
    b506:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b508:	4986      	ldr	r1, [pc, #536]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b50a:	7d0b      	ldrb	r3, [r1, #20]
    b50c:	7d4a      	ldrb	r2, [r1, #21]
    b50e:	0212      	lsls	r2, r2, #8
    b510:	431a      	orrs	r2, r3
    b512:	7d8b      	ldrb	r3, [r1, #22]
    b514:	041b      	lsls	r3, r3, #16
    b516:	431a      	orrs	r2, r3
    b518:	7dcb      	ldrb	r3, [r1, #23]
    b51a:	061b      	lsls	r3, r3, #24
    b51c:	4313      	orrs	r3, r2
    b51e:	7a18      	ldrb	r0, [r3, #8]
    b520:	4b82      	ldr	r3, [pc, #520]	; (b72c <setJoinDutyCycleTimer+0x264>)
    b522:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    b524:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    b526:	2800      	cmp	r0, #0
    b528:	d17d      	bne.n	b626 <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    b52a:	4b7e      	ldr	r3, [pc, #504]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b52c:	213e      	movs	r1, #62	; 0x3e
    b52e:	5c59      	ldrb	r1, [r3, r1]
    b530:	203f      	movs	r0, #63	; 0x3f
    b532:	5c18      	ldrb	r0, [r3, r0]
    b534:	0200      	lsls	r0, r0, #8
    b536:	4308      	orrs	r0, r1
    b538:	2140      	movs	r1, #64	; 0x40
    b53a:	5c59      	ldrb	r1, [r3, r1]
    b53c:	0409      	lsls	r1, r1, #16
    b53e:	4308      	orrs	r0, r1
    b540:	2141      	movs	r1, #65	; 0x41
    b542:	5c59      	ldrb	r1, [r3, r1]
    b544:	0609      	lsls	r1, r1, #24
    b546:	4301      	orrs	r1, r0
    b548:	d100      	bne.n	b54c <setJoinDutyCycleTimer+0x84>
    b54a:	e0e5      	b.n	b718 <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    b54c:	428c      	cmp	r4, r1
    b54e:	d300      	bcc.n	b552 <setJoinDutyCycleTimer+0x8a>
    b550:	e0b6      	b.n	b6c0 <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    b552:	1b09      	subs	r1, r1, r4
    b554:	333e      	adds	r3, #62	; 0x3e
    b556:	7019      	strb	r1, [r3, #0]
    b558:	0a0a      	lsrs	r2, r1, #8
    b55a:	705a      	strb	r2, [r3, #1]
    b55c:	0c0a      	lsrs	r2, r1, #16
    b55e:	709a      	strb	r2, [r3, #2]
    b560:	0e0a      	lsrs	r2, r1, #24
    b562:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    b564:	4b72      	ldr	r3, [pc, #456]	; (b730 <setJoinDutyCycleTimer+0x268>)
    b566:	4299      	cmp	r1, r3
    b568:	d800      	bhi.n	b56c <setJoinDutyCycleTimer+0xa4>
    b56a:	e093      	b.n	b694 <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    b56c:	4c6d      	ldr	r4, [pc, #436]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b56e:	7d23      	ldrb	r3, [r4, #20]
    b570:	7d62      	ldrb	r2, [r4, #21]
    b572:	0212      	lsls	r2, r2, #8
    b574:	431a      	orrs	r2, r3
    b576:	7da3      	ldrb	r3, [r4, #22]
    b578:	041b      	lsls	r3, r3, #16
    b57a:	431a      	orrs	r2, r3
    b57c:	7de3      	ldrb	r3, [r4, #23]
    b57e:	061b      	lsls	r3, r3, #24
    b580:	4313      	orrs	r3, r2
    b582:	4a6c      	ldr	r2, [pc, #432]	; (b734 <setJoinDutyCycleTimer+0x26c>)
    b584:	4694      	mov	ip, r2
    b586:	4461      	add	r1, ip
    b588:	7119      	strb	r1, [r3, #4]
    b58a:	0a0a      	lsrs	r2, r1, #8
    b58c:	715a      	strb	r2, [r3, #5]
    b58e:	0c0a      	lsrs	r2, r1, #16
    b590:	719a      	strb	r2, [r3, #6]
    b592:	0e09      	lsrs	r1, r1, #24
    b594:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    b596:	7d23      	ldrb	r3, [r4, #20]
    b598:	7d62      	ldrb	r2, [r4, #21]
    b59a:	0212      	lsls	r2, r2, #8
    b59c:	431a      	orrs	r2, r3
    b59e:	7da3      	ldrb	r3, [r4, #22]
    b5a0:	041b      	lsls	r3, r3, #16
    b5a2:	431a      	orrs	r2, r3
    b5a4:	7de3      	ldrb	r3, [r4, #23]
    b5a6:	061b      	lsls	r3, r3, #24
    b5a8:	4313      	orrs	r3, r2
    b5aa:	7a18      	ldrb	r0, [r3, #8]
    b5ac:	2300      	movs	r3, #0
    b5ae:	9300      	str	r3, [sp, #0]
    b5b0:	4b61      	ldr	r3, [pc, #388]	; (b738 <setJoinDutyCycleTimer+0x270>)
    b5b2:	2200      	movs	r2, #0
    b5b4:	4961      	ldr	r1, [pc, #388]	; (b73c <setJoinDutyCycleTimer+0x274>)
    b5b6:	4d62      	ldr	r5, [pc, #392]	; (b740 <setJoinDutyCycleTimer+0x278>)
    b5b8:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    b5ba:	233e      	movs	r3, #62	; 0x3e
    b5bc:	5ce3      	ldrb	r3, [r4, r3]
    b5be:	223f      	movs	r2, #63	; 0x3f
    b5c0:	5ca2      	ldrb	r2, [r4, r2]
    b5c2:	0212      	lsls	r2, r2, #8
    b5c4:	431a      	orrs	r2, r3
    b5c6:	2340      	movs	r3, #64	; 0x40
    b5c8:	5ce3      	ldrb	r3, [r4, r3]
    b5ca:	041b      	lsls	r3, r3, #16
    b5cc:	431a      	orrs	r2, r3
    b5ce:	2341      	movs	r3, #65	; 0x41
    b5d0:	5ce3      	ldrb	r3, [r4, r3]
    b5d2:	061b      	lsls	r3, r3, #24
    b5d4:	4313      	orrs	r3, r2
    b5d6:	4a57      	ldr	r2, [pc, #348]	; (b734 <setJoinDutyCycleTimer+0x26c>)
    b5d8:	4694      	mov	ip, r2
    b5da:	4463      	add	r3, ip
    b5dc:	343e      	adds	r4, #62	; 0x3e
    b5de:	7023      	strb	r3, [r4, #0]
    b5e0:	0a1a      	lsrs	r2, r3, #8
    b5e2:	7062      	strb	r2, [r4, #1]
    b5e4:	0c1a      	lsrs	r2, r3, #16
    b5e6:	70a2      	strb	r2, [r4, #2]
    b5e8:	0e1b      	lsrs	r3, r3, #24
    b5ea:	70e3      	strb	r3, [r4, #3]
    b5ec:	e094      	b.n	b718 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    b5ee:	9a02      	ldr	r2, [sp, #8]
    b5f0:	0053      	lsls	r3, r2, #1
    b5f2:	189b      	adds	r3, r3, r2
    b5f4:	015a      	lsls	r2, r3, #5
    b5f6:	189b      	adds	r3, r3, r2
    b5f8:	4a4a      	ldr	r2, [pc, #296]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b5fa:	323e      	adds	r2, #62	; 0x3e
    b5fc:	7013      	strb	r3, [r2, #0]
    b5fe:	0a19      	lsrs	r1, r3, #8
    b600:	7051      	strb	r1, [r2, #1]
    b602:	0c19      	lsrs	r1, r3, #16
    b604:	7091      	strb	r1, [r2, #2]
    b606:	0e1b      	lsrs	r3, r3, #24
    b608:	70d3      	strb	r3, [r2, #3]
    b60a:	e77d      	b.n	b508 <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    b60c:	4b4d      	ldr	r3, [pc, #308]	; (b744 <setJoinDutyCycleTimer+0x27c>)
    b60e:	9a02      	ldr	r2, [sp, #8]
    b610:	4353      	muls	r3, r2
    b612:	4a44      	ldr	r2, [pc, #272]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b614:	323e      	adds	r2, #62	; 0x3e
    b616:	7013      	strb	r3, [r2, #0]
    b618:	0a19      	lsrs	r1, r3, #8
    b61a:	7051      	strb	r1, [r2, #1]
    b61c:	0c19      	lsrs	r1, r3, #16
    b61e:	7091      	strb	r1, [r2, #2]
    b620:	0e1b      	lsrs	r3, r3, #24
    b622:	70d3      	strb	r3, [r2, #3]
    b624:	e770      	b.n	b508 <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    b626:	4c3f      	ldr	r4, [pc, #252]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b628:	7d23      	ldrb	r3, [r4, #20]
    b62a:	7d62      	ldrb	r2, [r4, #21]
    b62c:	0212      	lsls	r2, r2, #8
    b62e:	431a      	orrs	r2, r3
    b630:	7da3      	ldrb	r3, [r4, #22]
    b632:	041b      	lsls	r3, r3, #16
    b634:	431a      	orrs	r2, r3
    b636:	7de3      	ldrb	r3, [r4, #23]
    b638:	061b      	lsls	r3, r3, #24
    b63a:	4313      	orrs	r3, r2
    b63c:	7a18      	ldrb	r0, [r3, #8]
    b63e:	4b42      	ldr	r3, [pc, #264]	; (b748 <setJoinDutyCycleTimer+0x280>)
    b640:	4798      	blx	r3
    b642:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b644:	7d23      	ldrb	r3, [r4, #20]
    b646:	7d62      	ldrb	r2, [r4, #21]
    b648:	0212      	lsls	r2, r2, #8
    b64a:	431a      	orrs	r2, r3
    b64c:	7da3      	ldrb	r3, [r4, #22]
    b64e:	041b      	lsls	r3, r3, #16
    b650:	431a      	orrs	r2, r3
    b652:	7de3      	ldrb	r3, [r4, #23]
    b654:	061b      	lsls	r3, r3, #24
    b656:	4313      	orrs	r3, r2
    b658:	7a18      	ldrb	r0, [r3, #8]
    b65a:	4b3c      	ldr	r3, [pc, #240]	; (b74c <setJoinDutyCycleTimer+0x284>)
    b65c:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    b65e:	7d23      	ldrb	r3, [r4, #20]
    b660:	7d62      	ldrb	r2, [r4, #21]
    b662:	0212      	lsls	r2, r2, #8
    b664:	431a      	orrs	r2, r3
    b666:	7da3      	ldrb	r3, [r4, #22]
    b668:	041b      	lsls	r3, r3, #16
    b66a:	431a      	orrs	r2, r3
    b66c:	7de3      	ldrb	r3, [r4, #23]
    b66e:	061b      	lsls	r3, r3, #24
    b670:	4313      	orrs	r3, r2
    b672:	781a      	ldrb	r2, [r3, #0]
    b674:	785c      	ldrb	r4, [r3, #1]
    b676:	0224      	lsls	r4, r4, #8
    b678:	4322      	orrs	r2, r4
    b67a:	789c      	ldrb	r4, [r3, #2]
    b67c:	0424      	lsls	r4, r4, #16
    b67e:	4314      	orrs	r4, r2
    b680:	78da      	ldrb	r2, [r3, #3]
    b682:	0612      	lsls	r2, r2, #24
    b684:	4314      	orrs	r4, r2
    b686:	21fa      	movs	r1, #250	; 0xfa
    b688:	0089      	lsls	r1, r1, #2
    b68a:	0028      	movs	r0, r5
    b68c:	4b30      	ldr	r3, [pc, #192]	; (b750 <setJoinDutyCycleTimer+0x288>)
    b68e:	4798      	blx	r3
    b690:	1a24      	subs	r4, r4, r0
    b692:	e74a      	b.n	b52a <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    b694:	20fa      	movs	r0, #250	; 0xfa
    b696:	0080      	lsls	r0, r0, #2
    b698:	4341      	muls	r1, r0
    b69a:	4c22      	ldr	r4, [pc, #136]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b69c:	7d23      	ldrb	r3, [r4, #20]
    b69e:	7d62      	ldrb	r2, [r4, #21]
    b6a0:	0212      	lsls	r2, r2, #8
    b6a2:	431a      	orrs	r2, r3
    b6a4:	7da3      	ldrb	r3, [r4, #22]
    b6a6:	041b      	lsls	r3, r3, #16
    b6a8:	431a      	orrs	r2, r3
    b6aa:	7de3      	ldrb	r3, [r4, #23]
    b6ac:	061b      	lsls	r3, r3, #24
    b6ae:	4313      	orrs	r3, r2
    b6b0:	7a18      	ldrb	r0, [r3, #8]
    b6b2:	2300      	movs	r3, #0
    b6b4:	9300      	str	r3, [sp, #0]
    b6b6:	4b20      	ldr	r3, [pc, #128]	; (b738 <setJoinDutyCycleTimer+0x270>)
    b6b8:	2200      	movs	r2, #0
    b6ba:	4c21      	ldr	r4, [pc, #132]	; (b740 <setJoinDutyCycleTimer+0x278>)
    b6bc:	47a0      	blx	r4
    b6be:	e02b      	b.n	b718 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    b6c0:	4b18      	ldr	r3, [pc, #96]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b6c2:	333e      	adds	r3, #62	; 0x3e
    b6c4:	2200      	movs	r2, #0
    b6c6:	701a      	strb	r2, [r3, #0]
    b6c8:	705a      	strb	r2, [r3, #1]
    b6ca:	709a      	strb	r2, [r3, #2]
    b6cc:	70da      	strb	r2, [r3, #3]
    b6ce:	e023      	b.n	b718 <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    b6d0:	4c14      	ldr	r4, [pc, #80]	; (b724 <setJoinDutyCycleTimer+0x25c>)
    b6d2:	7d23      	ldrb	r3, [r4, #20]
    b6d4:	7d62      	ldrb	r2, [r4, #21]
    b6d6:	0212      	lsls	r2, r2, #8
    b6d8:	431a      	orrs	r2, r3
    b6da:	7da3      	ldrb	r3, [r4, #22]
    b6dc:	041b      	lsls	r3, r3, #16
    b6de:	431a      	orrs	r2, r3
    b6e0:	7de3      	ldrb	r3, [r4, #23]
    b6e2:	061b      	lsls	r3, r3, #24
    b6e4:	4313      	orrs	r3, r2
    b6e6:	7a18      	ldrb	r0, [r3, #8]
    b6e8:	4b18      	ldr	r3, [pc, #96]	; (b74c <setJoinDutyCycleTimer+0x284>)
    b6ea:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    b6ec:	0023      	movs	r3, r4
    b6ee:	333e      	adds	r3, #62	; 0x3e
    b6f0:	2200      	movs	r2, #0
    b6f2:	701a      	strb	r2, [r3, #0]
    b6f4:	705a      	strb	r2, [r3, #1]
    b6f6:	709a      	strb	r2, [r3, #2]
    b6f8:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    b6fa:	7d23      	ldrb	r3, [r4, #20]
    b6fc:	7d62      	ldrb	r2, [r4, #21]
    b6fe:	0212      	lsls	r2, r2, #8
    b700:	431a      	orrs	r2, r3
    b702:	7da3      	ldrb	r3, [r4, #22]
    b704:	041b      	lsls	r3, r3, #16
    b706:	431a      	orrs	r2, r3
    b708:	7de3      	ldrb	r3, [r4, #23]
    b70a:	061b      	lsls	r3, r3, #24
    b70c:	4313      	orrs	r3, r2
    b70e:	2200      	movs	r2, #0
    b710:	711a      	strb	r2, [r3, #4]
    b712:	715a      	strb	r2, [r3, #5]
    b714:	719a      	strb	r2, [r3, #6]
    b716:	71da      	strb	r2, [r3, #7]
}
    b718:	2008      	movs	r0, #8
    b71a:	b005      	add	sp, #20
    b71c:	bd30      	pop	{r4, r5, pc}
    b71e:	46c0      	nop			; (mov r8, r8)
    b720:	00019d1d 	.word	0x00019d1d
    b724:	200024d0 	.word	0x200024d0
    b728:	000003e7 	.word	0x000003e7
    b72c:	0000ef39 	.word	0x0000ef39
    b730:	0020c49b 	.word	0x0020c49b
    b734:	ffdf3b65 	.word	0xffdf3b65
    b738:	0000bff9 	.word	0x0000bff9
    b73c:	7fffffff 	.word	0x7fffffff
    b740:	0000eda1 	.word	0x0000eda1
    b744:	0000270f 	.word	0x0000270f
    b748:	0000ef4d 	.word	0x0000ef4d
    b74c:	0000f0b9 	.word	0x0000f0b9
    b750:	000165b9 	.word	0x000165b9

0000b754 <setDutyCycleTimer>:
{
    b754:	b5f0      	push	{r4, r5, r6, r7, lr}
    b756:	46de      	mov	lr, fp
    b758:	4657      	mov	r7, sl
    b75a:	464e      	mov	r6, r9
    b75c:	4645      	mov	r5, r8
    b75e:	b5e0      	push	{r5, r6, r7, lr}
    b760:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    b762:	2206      	movs	r2, #6
    b764:	a804      	add	r0, sp, #16
    b766:	4bc9      	ldr	r3, [pc, #804]	; (ba8c <setDutyCycleTimer+0x338>)
    b768:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    b76a:	49c9      	ldr	r1, [pc, #804]	; (ba90 <setDutyCycleTimer+0x33c>)
    b76c:	7a0b      	ldrb	r3, [r1, #8]
    b76e:	7a4a      	ldrb	r2, [r1, #9]
    b770:	0212      	lsls	r2, r2, #8
    b772:	4313      	orrs	r3, r2
    b774:	7a8a      	ldrb	r2, [r1, #10]
    b776:	0412      	lsls	r2, r2, #16
    b778:	431a      	orrs	r2, r3
    b77a:	7acb      	ldrb	r3, [r1, #11]
    b77c:	061b      	lsls	r3, r3, #24
    b77e:	431a      	orrs	r2, r3
    b780:	232f      	movs	r3, #47	; 0x2f
    b782:	5cc9      	ldrb	r1, [r1, r3]
    b784:	004b      	lsls	r3, r1, #1
    b786:	185b      	adds	r3, r3, r1
    b788:	009b      	lsls	r3, r3, #2
    b78a:	189b      	adds	r3, r3, r2
    b78c:	7a1e      	ldrb	r6, [r3, #8]
	if (bandId == 0 && RegParams.band == ISM_JPN923)
    b78e:	2e00      	cmp	r6, #0
    b790:	d105      	bne.n	b79e <setDutyCycleTimer+0x4a>
    b792:	232e      	movs	r3, #46	; 0x2e
    b794:	4abe      	ldr	r2, [pc, #760]	; (ba90 <setDutyCycleTimer+0x33c>)
    b796:	5cd3      	ldrb	r3, [r2, r3]
    b798:	2b05      	cmp	r3, #5
    b79a:	d100      	bne.n	b79e <setDutyCycleTimer+0x4a>
    b79c:	e162      	b.n	ba64 <setDutyCycleTimer+0x310>
	if(updateDCTimer.joining != 1)
    b79e:	ab04      	add	r3, sp, #16
    b7a0:	791b      	ldrb	r3, [r3, #4]
    b7a2:	2b00      	cmp	r3, #0
    b7a4:	d16a      	bne.n	b87c <setDutyCycleTimer+0x128>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    b7a6:	a904      	add	r1, sp, #16
    b7a8:	880a      	ldrh	r2, [r1, #0]
    b7aa:	48b9      	ldr	r0, [pc, #740]	; (ba90 <setDutyCycleTimer+0x33c>)
    b7ac:	7b07      	ldrb	r7, [r0, #12]
    b7ae:	7b43      	ldrb	r3, [r0, #13]
    b7b0:	021b      	lsls	r3, r3, #8
    b7b2:	433b      	orrs	r3, r7
    b7b4:	7b87      	ldrb	r7, [r0, #14]
    b7b6:	043f      	lsls	r7, r7, #16
    b7b8:	431f      	orrs	r7, r3
    b7ba:	7bc4      	ldrb	r4, [r0, #15]
    b7bc:	0624      	lsls	r4, r4, #24
    b7be:	4327      	orrs	r7, r4
    b7c0:	0074      	lsls	r4, r6, #1
    b7c2:	19a4      	adds	r4, r4, r6
    b7c4:	00a4      	lsls	r4, r4, #2
    b7c6:	0035      	movs	r5, r6
    b7c8:	35d4      	adds	r5, #212	; 0xd4
    b7ca:	006d      	lsls	r5, r5, #1
    b7cc:	1945      	adds	r5, r0, r5
    b7ce:	796b      	ldrb	r3, [r5, #5]
    b7d0:	469c      	mov	ip, r3
    b7d2:	79ab      	ldrb	r3, [r5, #6]
    b7d4:	021b      	lsls	r3, r3, #8
    b7d6:	4665      	mov	r5, ip
    b7d8:	432b      	orrs	r3, r5
    b7da:	3b01      	subs	r3, #1
    b7dc:	4353      	muls	r3, r2
    b7de:	19e4      	adds	r4, r4, r7
    b7e0:	7223      	strb	r3, [r4, #8]
    b7e2:	0a1d      	lsrs	r5, r3, #8
    b7e4:	7265      	strb	r5, [r4, #9]
    b7e6:	0c1d      	lsrs	r5, r3, #16
    b7e8:	72a5      	strb	r5, [r4, #10]
    b7ea:	0e1b      	lsrs	r3, r3, #24
    b7ec:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    b7ee:	884b      	ldrh	r3, [r1, #2]
    b7f0:	3b01      	subs	r3, #1
    b7f2:	435a      	muls	r2, r3
    b7f4:	23ba      	movs	r3, #186	; 0xba
    b7f6:	33ff      	adds	r3, #255	; 0xff
    b7f8:	54c2      	strb	r2, [r0, r3]
    b7fa:	0a11      	lsrs	r1, r2, #8
    b7fc:	18c0      	adds	r0, r0, r3
    b7fe:	7041      	strb	r1, [r0, #1]
    b800:	0c11      	lsrs	r1, r2, #16
    b802:	7081      	strb	r1, [r0, #2]
    b804:	0e12      	lsrs	r2, r2, #24
    b806:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    b808:	49a1      	ldr	r1, [pc, #644]	; (ba90 <setDutyCycleTimer+0x33c>)
    b80a:	7c0b      	ldrb	r3, [r1, #16]
    b80c:	7c4a      	ldrb	r2, [r1, #17]
    b80e:	0212      	lsls	r2, r2, #8
    b810:	431a      	orrs	r2, r3
    b812:	7c8b      	ldrb	r3, [r1, #18]
    b814:	041b      	lsls	r3, r3, #16
    b816:	431a      	orrs	r2, r3
    b818:	7ccb      	ldrb	r3, [r1, #19]
    b81a:	061b      	lsls	r3, r3, #24
    b81c:	4313      	orrs	r3, r2
    b81e:	7918      	ldrb	r0, [r3, #4]
    b820:	4b9c      	ldr	r3, [pc, #624]	; (ba94 <setDutyCycleTimer+0x340>)
    b822:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    b824:	2300      	movs	r3, #0
    b826:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    b828:	2800      	cmp	r0, #0
    b82a:	d136      	bne.n	b89a <setDutyCycleTimer+0x146>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    b82c:	4a98      	ldr	r2, [pc, #608]	; (ba90 <setDutyCycleTimer+0x33c>)
    b82e:	7b13      	ldrb	r3, [r2, #12]
    b830:	7b51      	ldrb	r1, [r2, #13]
    b832:	0209      	lsls	r1, r1, #8
    b834:	430b      	orrs	r3, r1
    b836:	7b91      	ldrb	r1, [r2, #14]
    b838:	0409      	lsls	r1, r1, #16
    b83a:	4319      	orrs	r1, r3
    b83c:	7bd3      	ldrb	r3, [r2, #15]
    b83e:	061b      	lsls	r3, r3, #24
    b840:	4319      	orrs	r1, r3
    b842:	0073      	lsls	r3, r6, #1
    b844:	199b      	adds	r3, r3, r6
    b846:	009b      	lsls	r3, r3, #2
    b848:	185b      	adds	r3, r3, r1
    b84a:	7a18      	ldrb	r0, [r3, #8]
    b84c:	7a59      	ldrb	r1, [r3, #9]
    b84e:	0209      	lsls	r1, r1, #8
    b850:	4301      	orrs	r1, r0
    b852:	7a98      	ldrb	r0, [r3, #10]
    b854:	0400      	lsls	r0, r0, #16
    b856:	4301      	orrs	r1, r0
    b858:	7ad8      	ldrb	r0, [r3, #11]
    b85a:	0600      	lsls	r0, r0, #24
    b85c:	4308      	orrs	r0, r1
    b85e:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    b860:	2329      	movs	r3, #41	; 0x29
    b862:	5cd3      	ldrb	r3, [r2, r3]
    b864:	2b00      	cmp	r3, #0
    b866:	d100      	bne.n	b86a <setDutyCycleTimer+0x116>
    b868:	e09c      	b.n	b9a4 <setDutyCycleTimer+0x250>
    b86a:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    b86c:	4d88      	ldr	r5, [pc, #544]	; (ba90 <setDutyCycleTimer+0x33c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    b86e:	002f      	movs	r7, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    b870:	2300      	movs	r3, #0
    b872:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    b874:	46a8      	mov	r8, r5
    b876:	2329      	movs	r3, #41	; 0x29
    b878:	469c      	mov	ip, r3
    b87a:	e051      	b.n	b920 <setDutyCycleTimer+0x1cc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    b87c:	a904      	add	r1, sp, #16
    b87e:	884a      	ldrh	r2, [r1, #2]
    b880:	3a01      	subs	r2, #1
    b882:	880b      	ldrh	r3, [r1, #0]
    b884:	4353      	muls	r3, r2
    b886:	4a82      	ldr	r2, [pc, #520]	; (ba90 <setDutyCycleTimer+0x33c>)
    b888:	323e      	adds	r2, #62	; 0x3e
    b88a:	7013      	strb	r3, [r2, #0]
    b88c:	0a19      	lsrs	r1, r3, #8
    b88e:	7051      	strb	r1, [r2, #1]
    b890:	0c19      	lsrs	r1, r3, #16
    b892:	7091      	strb	r1, [r2, #2]
    b894:	0e1b      	lsrs	r3, r3, #24
    b896:	70d3      	strb	r3, [r2, #3]
    b898:	e7b6      	b.n	b808 <setDutyCycleTimer+0xb4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    b89a:	4c7d      	ldr	r4, [pc, #500]	; (ba90 <setDutyCycleTimer+0x33c>)
    b89c:	7c23      	ldrb	r3, [r4, #16]
    b89e:	7c62      	ldrb	r2, [r4, #17]
    b8a0:	0212      	lsls	r2, r2, #8
    b8a2:	431a      	orrs	r2, r3
    b8a4:	7ca3      	ldrb	r3, [r4, #18]
    b8a6:	041b      	lsls	r3, r3, #16
    b8a8:	431a      	orrs	r2, r3
    b8aa:	7ce3      	ldrb	r3, [r4, #19]
    b8ac:	061b      	lsls	r3, r3, #24
    b8ae:	4313      	orrs	r3, r2
    b8b0:	7918      	ldrb	r0, [r3, #4]
    b8b2:	4b79      	ldr	r3, [pc, #484]	; (ba98 <setDutyCycleTimer+0x344>)
    b8b4:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    b8b6:	7c23      	ldrb	r3, [r4, #16]
    b8b8:	7c62      	ldrb	r2, [r4, #17]
    b8ba:	0212      	lsls	r2, r2, #8
    b8bc:	431a      	orrs	r2, r3
    b8be:	7ca3      	ldrb	r3, [r4, #18]
    b8c0:	041b      	lsls	r3, r3, #16
    b8c2:	431a      	orrs	r2, r3
    b8c4:	7ce3      	ldrb	r3, [r4, #19]
    b8c6:	061b      	lsls	r3, r3, #24
    b8c8:	4313      	orrs	r3, r2
    b8ca:	7918      	ldrb	r0, [r3, #4]
    b8cc:	4b73      	ldr	r3, [pc, #460]	; (ba9c <setDutyCycleTimer+0x348>)
    b8ce:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    b8d0:	7c23      	ldrb	r3, [r4, #16]
    b8d2:	7c62      	ldrb	r2, [r4, #17]
    b8d4:	0212      	lsls	r2, r2, #8
    b8d6:	431a      	orrs	r2, r3
    b8d8:	7ca3      	ldrb	r3, [r4, #18]
    b8da:	041b      	lsls	r3, r3, #16
    b8dc:	431a      	orrs	r2, r3
    b8de:	7ce3      	ldrb	r3, [r4, #19]
    b8e0:	061b      	lsls	r3, r3, #24
    b8e2:	4313      	orrs	r3, r2
    b8e4:	781c      	ldrb	r4, [r3, #0]
    b8e6:	785a      	ldrb	r2, [r3, #1]
    b8e8:	0212      	lsls	r2, r2, #8
    b8ea:	4322      	orrs	r2, r4
    b8ec:	789c      	ldrb	r4, [r3, #2]
    b8ee:	0424      	lsls	r4, r4, #16
    b8f0:	4322      	orrs	r2, r4
    b8f2:	78dc      	ldrb	r4, [r3, #3]
    b8f4:	0624      	lsls	r4, r4, #24
    b8f6:	4314      	orrs	r4, r2
    b8f8:	21fa      	movs	r1, #250	; 0xfa
    b8fa:	0089      	lsls	r1, r1, #2
    b8fc:	4b68      	ldr	r3, [pc, #416]	; (baa0 <setDutyCycleTimer+0x34c>)
    b8fe:	4798      	blx	r3
    b900:	1a23      	subs	r3, r4, r0
    b902:	4699      	mov	r9, r3
    b904:	e792      	b.n	b82c <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    b906:	4651      	mov	r1, sl
    b908:	7219      	strb	r1, [r3, #8]
    b90a:	7259      	strb	r1, [r3, #9]
    b90c:	7299      	strb	r1, [r3, #10]
    b90e:	72d9      	strb	r1, [r3, #11]
    b910:	e02c      	b.n	b96c <setDutyCycleTimer+0x218>
	for(i = 0; i < RegParams.maxSubBands; i++)
    b912:	3201      	adds	r2, #1
    b914:	b2d2      	uxtb	r2, r2
    b916:	4643      	mov	r3, r8
    b918:	4661      	mov	r1, ip
    b91a:	5c5b      	ldrb	r3, [r3, r1]
    b91c:	4293      	cmp	r3, r2
    b91e:	d941      	bls.n	b9a4 <setDutyCycleTimer+0x250>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    b920:	4296      	cmp	r6, r2
    b922:	d0f6      	beq.n	b912 <setDutyCycleTimer+0x1be>
    b924:	0054      	lsls	r4, r2, #1
    b926:	18a4      	adds	r4, r4, r2
    b928:	00a4      	lsls	r4, r4, #2
    b92a:	7b2b      	ldrb	r3, [r5, #12]
    b92c:	7b69      	ldrb	r1, [r5, #13]
    b92e:	0209      	lsls	r1, r1, #8
    b930:	4319      	orrs	r1, r3
    b932:	7bab      	ldrb	r3, [r5, #14]
    b934:	041b      	lsls	r3, r3, #16
    b936:	4319      	orrs	r1, r3
    b938:	7beb      	ldrb	r3, [r5, #15]
    b93a:	061b      	lsls	r3, r3, #24
    b93c:	430b      	orrs	r3, r1
    b93e:	191b      	adds	r3, r3, r4
    b940:	7a18      	ldrb	r0, [r3, #8]
    b942:	7a59      	ldrb	r1, [r3, #9]
    b944:	0209      	lsls	r1, r1, #8
    b946:	4301      	orrs	r1, r0
    b948:	7a98      	ldrb	r0, [r3, #10]
    b94a:	0400      	lsls	r0, r0, #16
    b94c:	4308      	orrs	r0, r1
    b94e:	7ad9      	ldrb	r1, [r3, #11]
    b950:	0609      	lsls	r1, r1, #24
    b952:	4301      	orrs	r1, r0
    b954:	d0dd      	beq.n	b912 <setDutyCycleTimer+0x1be>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    b956:	4589      	cmp	r9, r1
    b958:	d2d5      	bcs.n	b906 <setDutyCycleTimer+0x1b2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    b95a:	4648      	mov	r0, r9
    b95c:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    b95e:	7219      	strb	r1, [r3, #8]
    b960:	0a08      	lsrs	r0, r1, #8
    b962:	7258      	strb	r0, [r3, #9]
    b964:	0c08      	lsrs	r0, r1, #16
    b966:	7298      	strb	r0, [r3, #10]
    b968:	0e09      	lsrs	r1, r1, #24
    b96a:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    b96c:	7b3b      	ldrb	r3, [r7, #12]
    b96e:	7b79      	ldrb	r1, [r7, #13]
    b970:	0209      	lsls	r1, r1, #8
    b972:	4319      	orrs	r1, r3
    b974:	7bbb      	ldrb	r3, [r7, #14]
    b976:	041b      	lsls	r3, r3, #16
    b978:	4319      	orrs	r1, r3
    b97a:	7bfb      	ldrb	r3, [r7, #15]
    b97c:	061b      	lsls	r3, r3, #24
    b97e:	430b      	orrs	r3, r1
    b980:	191c      	adds	r4, r3, r4
    b982:	7a23      	ldrb	r3, [r4, #8]
    b984:	7a61      	ldrb	r1, [r4, #9]
    b986:	0209      	lsls	r1, r1, #8
    b988:	4319      	orrs	r1, r3
    b98a:	7aa3      	ldrb	r3, [r4, #10]
    b98c:	041b      	lsls	r3, r3, #16
    b98e:	4319      	orrs	r1, r3
    b990:	7ae3      	ldrb	r3, [r4, #11]
    b992:	061b      	lsls	r3, r3, #24
    b994:	430b      	orrs	r3, r1
    b996:	9903      	ldr	r1, [sp, #12]
    b998:	428b      	cmp	r3, r1
    b99a:	d8ba      	bhi.n	b912 <setDutyCycleTimer+0x1be>
    b99c:	2b00      	cmp	r3, #0
    b99e:	d0b8      	beq.n	b912 <setDutyCycleTimer+0x1be>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    b9a0:	9303      	str	r3, [sp, #12]
    b9a2:	e7b6      	b.n	b912 <setDutyCycleTimer+0x1be>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    b9a4:	493a      	ldr	r1, [pc, #232]	; (ba90 <setDutyCycleTimer+0x33c>)
    b9a6:	23ba      	movs	r3, #186	; 0xba
    b9a8:	33ff      	adds	r3, #255	; 0xff
    b9aa:	5ccb      	ldrb	r3, [r1, r3]
    b9ac:	22dd      	movs	r2, #221	; 0xdd
    b9ae:	0052      	lsls	r2, r2, #1
    b9b0:	5c8a      	ldrb	r2, [r1, r2]
    b9b2:	0212      	lsls	r2, r2, #8
    b9b4:	431a      	orrs	r2, r3
    b9b6:	23bc      	movs	r3, #188	; 0xbc
    b9b8:	33ff      	adds	r3, #255	; 0xff
    b9ba:	5ccb      	ldrb	r3, [r1, r3]
    b9bc:	041b      	lsls	r3, r3, #16
    b9be:	431a      	orrs	r2, r3
    b9c0:	23de      	movs	r3, #222	; 0xde
    b9c2:	005b      	lsls	r3, r3, #1
    b9c4:	5ccb      	ldrb	r3, [r1, r3]
    b9c6:	061b      	lsls	r3, r3, #24
    b9c8:	4313      	orrs	r3, r2
    b9ca:	d00f      	beq.n	b9ec <setDutyCycleTimer+0x298>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    b9cc:	4599      	cmp	r9, r3
    b9ce:	d251      	bcs.n	ba74 <setDutyCycleTimer+0x320>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    b9d0:	000a      	movs	r2, r1
    b9d2:	4649      	mov	r1, r9
    b9d4:	1a5b      	subs	r3, r3, r1
    b9d6:	21ba      	movs	r1, #186	; 0xba
    b9d8:	31ff      	adds	r1, #255	; 0xff
    b9da:	5453      	strb	r3, [r2, r1]
    b9dc:	0a19      	lsrs	r1, r3, #8
    b9de:	32ba      	adds	r2, #186	; 0xba
    b9e0:	32ff      	adds	r2, #255	; 0xff
    b9e2:	7051      	strb	r1, [r2, #1]
    b9e4:	0c19      	lsrs	r1, r3, #16
    b9e6:	7091      	strb	r1, [r2, #2]
    b9e8:	0e1b      	lsrs	r3, r3, #24
    b9ea:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    b9ec:	4a28      	ldr	r2, [pc, #160]	; (ba90 <setDutyCycleTimer+0x33c>)
    b9ee:	23ba      	movs	r3, #186	; 0xba
    b9f0:	33ff      	adds	r3, #255	; 0xff
    b9f2:	5cd1      	ldrb	r1, [r2, r3]
    b9f4:	3301      	adds	r3, #1
    b9f6:	5cd3      	ldrb	r3, [r2, r3]
    b9f8:	021b      	lsls	r3, r3, #8
    b9fa:	430b      	orrs	r3, r1
    b9fc:	21bc      	movs	r1, #188	; 0xbc
    b9fe:	31ff      	adds	r1, #255	; 0xff
    ba00:	5c51      	ldrb	r1, [r2, r1]
    ba02:	0409      	lsls	r1, r1, #16
    ba04:	430b      	orrs	r3, r1
    ba06:	21de      	movs	r1, #222	; 0xde
    ba08:	0049      	lsls	r1, r1, #1
    ba0a:	5c51      	ldrb	r1, [r2, r1]
    ba0c:	0609      	lsls	r1, r1, #24
    ba0e:	4319      	orrs	r1, r3
    ba10:	9a03      	ldr	r2, [sp, #12]
    ba12:	4291      	cmp	r1, r2
    ba14:	d200      	bcs.n	ba18 <setDutyCycleTimer+0x2c4>
    ba16:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    ba18:	4b1d      	ldr	r3, [pc, #116]	; (ba90 <setDutyCycleTimer+0x33c>)
    ba1a:	7c1a      	ldrb	r2, [r3, #16]
    ba1c:	7c58      	ldrb	r0, [r3, #17]
    ba1e:	0200      	lsls	r0, r0, #8
    ba20:	4310      	orrs	r0, r2
    ba22:	7c9a      	ldrb	r2, [r3, #18]
    ba24:	0412      	lsls	r2, r2, #16
    ba26:	4310      	orrs	r0, r2
    ba28:	7cda      	ldrb	r2, [r3, #19]
    ba2a:	0612      	lsls	r2, r2, #24
    ba2c:	4302      	orrs	r2, r0
    ba2e:	7011      	strb	r1, [r2, #0]
    ba30:	0a08      	lsrs	r0, r1, #8
    ba32:	7050      	strb	r0, [r2, #1]
    ba34:	0c08      	lsrs	r0, r1, #16
    ba36:	7090      	strb	r0, [r2, #2]
    ba38:	0e08      	lsrs	r0, r1, #24
    ba3a:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    ba3c:	22fa      	movs	r2, #250	; 0xfa
    ba3e:	0092      	lsls	r2, r2, #2
    ba40:	4351      	muls	r1, r2
    ba42:	7c18      	ldrb	r0, [r3, #16]
    ba44:	7c5a      	ldrb	r2, [r3, #17]
    ba46:	0212      	lsls	r2, r2, #8
    ba48:	4310      	orrs	r0, r2
    ba4a:	7c9a      	ldrb	r2, [r3, #18]
    ba4c:	0412      	lsls	r2, r2, #16
    ba4e:	4302      	orrs	r2, r0
    ba50:	7cdb      	ldrb	r3, [r3, #19]
    ba52:	061b      	lsls	r3, r3, #24
    ba54:	4313      	orrs	r3, r2
    ba56:	7918      	ldrb	r0, [r3, #4]
    ba58:	2300      	movs	r3, #0
    ba5a:	9300      	str	r3, [sp, #0]
    ba5c:	4b11      	ldr	r3, [pc, #68]	; (baa4 <setDutyCycleTimer+0x350>)
    ba5e:	2200      	movs	r2, #0
    ba60:	4c11      	ldr	r4, [pc, #68]	; (baa8 <setDutyCycleTimer+0x354>)
    ba62:	47a0      	blx	r4
}
    ba64:	2008      	movs	r0, #8
    ba66:	b007      	add	sp, #28
    ba68:	bc3c      	pop	{r2, r3, r4, r5}
    ba6a:	4690      	mov	r8, r2
    ba6c:	4699      	mov	r9, r3
    ba6e:	46a2      	mov	sl, r4
    ba70:	46ab      	mov	fp, r5
    ba72:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    ba74:	4b06      	ldr	r3, [pc, #24]	; (ba90 <setDutyCycleTimer+0x33c>)
    ba76:	2100      	movs	r1, #0
    ba78:	22ba      	movs	r2, #186	; 0xba
    ba7a:	32ff      	adds	r2, #255	; 0xff
    ba7c:	5499      	strb	r1, [r3, r2]
    ba7e:	189b      	adds	r3, r3, r2
    ba80:	2200      	movs	r2, #0
    ba82:	705a      	strb	r2, [r3, #1]
    ba84:	709a      	strb	r2, [r3, #2]
    ba86:	70da      	strb	r2, [r3, #3]
    ba88:	e7b0      	b.n	b9ec <setDutyCycleTimer+0x298>
    ba8a:	46c0      	nop			; (mov r8, r8)
    ba8c:	00019d1d 	.word	0x00019d1d
    ba90:	200024d0 	.word	0x200024d0
    ba94:	0000ef39 	.word	0x0000ef39
    ba98:	0000f0b9 	.word	0x0000f0b9
    ba9c:	0000ef4d 	.word	0x0000ef4d
    baa0:	000165b9 	.word	0x000165b9
    baa4:	0000baad 	.word	0x0000baad
    baa8:	0000eda1 	.word	0x0000eda1

0000baac <DutyCycleCallback>:
{
    baac:	b5f0      	push	{r4, r5, r6, r7, lr}
    baae:	46de      	mov	lr, fp
    bab0:	4657      	mov	r7, sl
    bab2:	464e      	mov	r6, r9
    bab4:	4645      	mov	r5, r8
    bab6:	b5e0      	push	{r5, r6, r7, lr}
    bab8:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    baba:	4980      	ldr	r1, [pc, #512]	; (bcbc <DutyCycleCallback+0x210>)
    babc:	23ba      	movs	r3, #186	; 0xba
    babe:	33ff      	adds	r3, #255	; 0xff
    bac0:	5cca      	ldrb	r2, [r1, r3]
    bac2:	3301      	adds	r3, #1
    bac4:	5ccb      	ldrb	r3, [r1, r3]
    bac6:	021b      	lsls	r3, r3, #8
    bac8:	431a      	orrs	r2, r3
    baca:	23bc      	movs	r3, #188	; 0xbc
    bacc:	33ff      	adds	r3, #255	; 0xff
    bace:	5ccb      	ldrb	r3, [r1, r3]
    bad0:	041b      	lsls	r3, r3, #16
    bad2:	4313      	orrs	r3, r2
    bad4:	22de      	movs	r2, #222	; 0xde
    bad6:	0052      	lsls	r2, r2, #1
    bad8:	5c8a      	ldrb	r2, [r1, r2]
    bada:	0612      	lsls	r2, r2, #24
    badc:	431a      	orrs	r2, r3
    bade:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    bae0:	2329      	movs	r3, #41	; 0x29
    bae2:	5ccb      	ldrb	r3, [r1, r3]
    bae4:	2b00      	cmp	r3, #0
    bae6:	d100      	bne.n	baea <DutyCycleCallback+0x3e>
    bae8:	e0df      	b.n	bcaa <DutyCycleCallback+0x1fe>
    baea:	2600      	movs	r6, #0
    baec:	2300      	movs	r3, #0
    baee:	9304      	str	r3, [sp, #16]
    baf0:	3b01      	subs	r3, #1
    baf2:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    baf4:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    baf6:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    baf8:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    bafa:	2300      	movs	r3, #0
    bafc:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    bafe:	468a      	mov	sl, r1
    bb00:	2329      	movs	r3, #41	; 0x29
    bb02:	4699      	mov	r9, r3
    bb04:	e00c      	b.n	bb20 <DutyCycleCallback+0x74>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    bb06:	465a      	mov	r2, fp
    bb08:	721a      	strb	r2, [r3, #8]
    bb0a:	725a      	strb	r2, [r3, #9]
    bb0c:	729a      	strb	r2, [r3, #10]
    bb0e:	72da      	strb	r2, [r3, #11]
    bb10:	e03f      	b.n	bb92 <DutyCycleCallback+0xe6>
    for (i=0; i < RegParams.maxSubBands; i++)
    bb12:	3601      	adds	r6, #1
    bb14:	b2f6      	uxtb	r6, r6
    bb16:	4653      	mov	r3, sl
    bb18:	464a      	mov	r2, r9
    bb1a:	5c9b      	ldrb	r3, [r3, r2]
    bb1c:	42b3      	cmp	r3, r6
    bb1e:	d95a      	bls.n	bbd6 <DutyCycleCallback+0x12a>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    bb20:	0071      	lsls	r1, r6, #1
    bb22:	1989      	adds	r1, r1, r6
    bb24:	0089      	lsls	r1, r1, #2
    bb26:	7b3b      	ldrb	r3, [r7, #12]
    bb28:	7b7a      	ldrb	r2, [r7, #13]
    bb2a:	0212      	lsls	r2, r2, #8
    bb2c:	431a      	orrs	r2, r3
    bb2e:	7bbb      	ldrb	r3, [r7, #14]
    bb30:	041b      	lsls	r3, r3, #16
    bb32:	431a      	orrs	r2, r3
    bb34:	7bfb      	ldrb	r3, [r7, #15]
    bb36:	061b      	lsls	r3, r3, #24
    bb38:	4313      	orrs	r3, r2
    bb3a:	185b      	adds	r3, r3, r1
    bb3c:	7a1a      	ldrb	r2, [r3, #8]
    bb3e:	7a58      	ldrb	r0, [r3, #9]
    bb40:	0200      	lsls	r0, r0, #8
    bb42:	4310      	orrs	r0, r2
    bb44:	7a9a      	ldrb	r2, [r3, #10]
    bb46:	0412      	lsls	r2, r2, #16
    bb48:	4310      	orrs	r0, r2
    bb4a:	7ada      	ldrb	r2, [r3, #11]
    bb4c:	0612      	lsls	r2, r2, #24
    bb4e:	4302      	orrs	r2, r0
    bb50:	d0df      	beq.n	bb12 <DutyCycleCallback+0x66>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    bb52:	4640      	mov	r0, r8
    bb54:	7c05      	ldrb	r5, [r0, #16]
    bb56:	7c44      	ldrb	r4, [r0, #17]
    bb58:	0224      	lsls	r4, r4, #8
    bb5a:	4325      	orrs	r5, r4
    bb5c:	7c80      	ldrb	r0, [r0, #18]
    bb5e:	0400      	lsls	r0, r0, #16
    bb60:	4305      	orrs	r5, r0
    bb62:	4640      	mov	r0, r8
    bb64:	7cc0      	ldrb	r0, [r0, #19]
    bb66:	0600      	lsls	r0, r0, #24
    bb68:	4328      	orrs	r0, r5
    bb6a:	7804      	ldrb	r4, [r0, #0]
    bb6c:	7845      	ldrb	r5, [r0, #1]
    bb6e:	022d      	lsls	r5, r5, #8
    bb70:	4325      	orrs	r5, r4
    bb72:	7884      	ldrb	r4, [r0, #2]
    bb74:	0424      	lsls	r4, r4, #16
    bb76:	4325      	orrs	r5, r4
    bb78:	78c4      	ldrb	r4, [r0, #3]
    bb7a:	0624      	lsls	r4, r4, #24
    bb7c:	432c      	orrs	r4, r5
    bb7e:	42a2      	cmp	r2, r4
    bb80:	d9c1      	bls.n	bb06 <DutyCycleCallback+0x5a>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    bb82:	1b12      	subs	r2, r2, r4
    bb84:	721a      	strb	r2, [r3, #8]
    bb86:	0a10      	lsrs	r0, r2, #8
    bb88:	7258      	strb	r0, [r3, #9]
    bb8a:	0c10      	lsrs	r0, r2, #16
    bb8c:	7298      	strb	r0, [r3, #10]
    bb8e:	0e12      	lsrs	r2, r2, #24
    bb90:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    bb92:	4663      	mov	r3, ip
    bb94:	7b1b      	ldrb	r3, [r3, #12]
    bb96:	4662      	mov	r2, ip
    bb98:	7b52      	ldrb	r2, [r2, #13]
    bb9a:	0212      	lsls	r2, r2, #8
    bb9c:	431a      	orrs	r2, r3
    bb9e:	4663      	mov	r3, ip
    bba0:	7b9b      	ldrb	r3, [r3, #14]
    bba2:	041b      	lsls	r3, r3, #16
    bba4:	431a      	orrs	r2, r3
    bba6:	4663      	mov	r3, ip
    bba8:	7bdb      	ldrb	r3, [r3, #15]
    bbaa:	061b      	lsls	r3, r3, #24
    bbac:	4313      	orrs	r3, r2
    bbae:	1859      	adds	r1, r3, r1
    bbb0:	7a0b      	ldrb	r3, [r1, #8]
    bbb2:	7a4a      	ldrb	r2, [r1, #9]
    bbb4:	0212      	lsls	r2, r2, #8
    bbb6:	431a      	orrs	r2, r3
    bbb8:	7a8b      	ldrb	r3, [r1, #10]
    bbba:	041b      	lsls	r3, r3, #16
    bbbc:	431a      	orrs	r2, r3
    bbbe:	7acb      	ldrb	r3, [r1, #11]
    bbc0:	061b      	lsls	r3, r3, #24
    bbc2:	4313      	orrs	r3, r2
    bbc4:	9a03      	ldr	r2, [sp, #12]
    bbc6:	4293      	cmp	r3, r2
    bbc8:	d8a3      	bhi.n	bb12 <DutyCycleCallback+0x66>
    bbca:	2b00      	cmp	r3, #0
    bbcc:	d0a1      	beq.n	bb12 <DutyCycleCallback+0x66>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    bbce:	9303      	str	r3, [sp, #12]
                found = 1;
    bbd0:	2301      	movs	r3, #1
    bbd2:	9304      	str	r3, [sp, #16]
    bbd4:	e79d      	b.n	bb12 <DutyCycleCallback+0x66>
    if (( DutyCycleTimeout != 0 ))
    bbd6:	9b05      	ldr	r3, [sp, #20]
    bbd8:	2b00      	cmp	r3, #0
    bbda:	d031      	beq.n	bc40 <DutyCycleCallback+0x194>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    bbdc:	4937      	ldr	r1, [pc, #220]	; (bcbc <DutyCycleCallback+0x210>)
    bbde:	7c0b      	ldrb	r3, [r1, #16]
    bbe0:	7c4a      	ldrb	r2, [r1, #17]
    bbe2:	0212      	lsls	r2, r2, #8
    bbe4:	431a      	orrs	r2, r3
    bbe6:	7c8b      	ldrb	r3, [r1, #18]
    bbe8:	041b      	lsls	r3, r3, #16
    bbea:	431a      	orrs	r2, r3
    bbec:	7ccb      	ldrb	r3, [r1, #19]
    bbee:	061b      	lsls	r3, r3, #24
    bbf0:	4313      	orrs	r3, r2
    bbf2:	7819      	ldrb	r1, [r3, #0]
    bbf4:	785a      	ldrb	r2, [r3, #1]
    bbf6:	0212      	lsls	r2, r2, #8
    bbf8:	430a      	orrs	r2, r1
    bbfa:	7899      	ldrb	r1, [r3, #2]
    bbfc:	0409      	lsls	r1, r1, #16
    bbfe:	430a      	orrs	r2, r1
    bc00:	78d9      	ldrb	r1, [r3, #3]
    bc02:	0609      	lsls	r1, r1, #24
    bc04:	4311      	orrs	r1, r2
    bc06:	9a05      	ldr	r2, [sp, #20]
    bc08:	428a      	cmp	r2, r1
    bc0a:	d90f      	bls.n	bc2c <DutyCycleCallback+0x180>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    bc0c:	1a51      	subs	r1, r2, r1
    bc0e:	4b2b      	ldr	r3, [pc, #172]	; (bcbc <DutyCycleCallback+0x210>)
    bc10:	22ba      	movs	r2, #186	; 0xba
    bc12:	32ff      	adds	r2, #255	; 0xff
    bc14:	5499      	strb	r1, [r3, r2]
    bc16:	0a0a      	lsrs	r2, r1, #8
    bc18:	33ba      	adds	r3, #186	; 0xba
    bc1a:	33ff      	adds	r3, #255	; 0xff
    bc1c:	705a      	strb	r2, [r3, #1]
    bc1e:	0c0a      	lsrs	r2, r1, #16
    bc20:	709a      	strb	r2, [r3, #2]
    bc22:	0e0a      	lsrs	r2, r1, #24
    bc24:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    bc26:	2900      	cmp	r1, #0
    bc28:	d10e      	bne.n	bc48 <DutyCycleCallback+0x19c>
    bc2a:	e009      	b.n	bc40 <DutyCycleCallback+0x194>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    bc2c:	4b23      	ldr	r3, [pc, #140]	; (bcbc <DutyCycleCallback+0x210>)
    bc2e:	2100      	movs	r1, #0
    bc30:	22ba      	movs	r2, #186	; 0xba
    bc32:	32ff      	adds	r2, #255	; 0xff
    bc34:	5499      	strb	r1, [r3, r2]
    bc36:	189b      	adds	r3, r3, r2
    bc38:	2200      	movs	r2, #0
    bc3a:	705a      	strb	r2, [r3, #1]
    bc3c:	709a      	strb	r2, [r3, #2]
    bc3e:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    bc40:	9b04      	ldr	r3, [sp, #16]
    bc42:	2b00      	cmp	r3, #0
    bc44:	d02a      	beq.n	bc9c <DutyCycleCallback+0x1f0>
    bc46:	2100      	movs	r1, #0
    bc48:	9a03      	ldr	r2, [sp, #12]
    bc4a:	4291      	cmp	r1, r2
    bc4c:	d200      	bcs.n	bc50 <DutyCycleCallback+0x1a4>
    bc4e:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    bc50:	4b1a      	ldr	r3, [pc, #104]	; (bcbc <DutyCycleCallback+0x210>)
    bc52:	7c1a      	ldrb	r2, [r3, #16]
    bc54:	7c58      	ldrb	r0, [r3, #17]
    bc56:	0200      	lsls	r0, r0, #8
    bc58:	4310      	orrs	r0, r2
    bc5a:	7c9a      	ldrb	r2, [r3, #18]
    bc5c:	0412      	lsls	r2, r2, #16
    bc5e:	4310      	orrs	r0, r2
    bc60:	7cda      	ldrb	r2, [r3, #19]
    bc62:	0612      	lsls	r2, r2, #24
    bc64:	4302      	orrs	r2, r0
    bc66:	7011      	strb	r1, [r2, #0]
    bc68:	0a08      	lsrs	r0, r1, #8
    bc6a:	7050      	strb	r0, [r2, #1]
    bc6c:	0c08      	lsrs	r0, r1, #16
    bc6e:	7090      	strb	r0, [r2, #2]
    bc70:	0e08      	lsrs	r0, r1, #24
    bc72:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    bc74:	22fa      	movs	r2, #250	; 0xfa
    bc76:	0092      	lsls	r2, r2, #2
    bc78:	4351      	muls	r1, r2
    bc7a:	7c18      	ldrb	r0, [r3, #16]
    bc7c:	7c5a      	ldrb	r2, [r3, #17]
    bc7e:	0212      	lsls	r2, r2, #8
    bc80:	4310      	orrs	r0, r2
    bc82:	7c9a      	ldrb	r2, [r3, #18]
    bc84:	0412      	lsls	r2, r2, #16
    bc86:	4302      	orrs	r2, r0
    bc88:	7cdb      	ldrb	r3, [r3, #19]
    bc8a:	061b      	lsls	r3, r3, #24
    bc8c:	4313      	orrs	r3, r2
    bc8e:	7918      	ldrb	r0, [r3, #4]
    bc90:	2300      	movs	r3, #0
    bc92:	9300      	str	r3, [sp, #0]
    bc94:	4b0a      	ldr	r3, [pc, #40]	; (bcc0 <DutyCycleCallback+0x214>)
    bc96:	2200      	movs	r2, #0
    bc98:	4c0a      	ldr	r4, [pc, #40]	; (bcc4 <DutyCycleCallback+0x218>)
    bc9a:	47a0      	blx	r4
}
    bc9c:	b007      	add	sp, #28
    bc9e:	bc3c      	pop	{r2, r3, r4, r5}
    bca0:	4690      	mov	r8, r2
    bca2:	4699      	mov	r9, r3
    bca4:	46a2      	mov	sl, r4
    bca6:	46ab      	mov	fp, r5
    bca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    bcaa:	9b05      	ldr	r3, [sp, #20]
    bcac:	2b00      	cmp	r3, #0
    bcae:	d0f5      	beq.n	bc9c <DutyCycleCallback+0x1f0>
    bool found = 0;
    bcb0:	2300      	movs	r3, #0
    bcb2:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    bcb4:	3b01      	subs	r3, #1
    bcb6:	9303      	str	r3, [sp, #12]
    bcb8:	e790      	b.n	bbdc <DutyCycleCallback+0x130>
    bcba:	46c0      	nop			; (mov r8, r8)
    bcbc:	200024d0 	.word	0x200024d0
    bcc0:	0000baad 	.word	0x0000baad
    bcc4:	0000eda1 	.word	0x0000eda1

0000bcc8 <setLBTTimer>:
{
    bcc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcca:	46de      	mov	lr, fp
    bccc:	4657      	mov	r7, sl
    bcce:	464e      	mov	r6, r9
    bcd0:	4645      	mov	r5, r8
    bcd2:	b5e0      	push	{r5, r6, r7, lr}
    bcd4:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    bcd6:	4a70      	ldr	r2, [pc, #448]	; (be98 <setLBTTimer+0x1d0>)
    bcd8:	232f      	movs	r3, #47	; 0x2f
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    bcda:	5cd4      	ldrb	r4, [r2, r3]
    bcdc:	0023      	movs	r3, r4
    bcde:	3358      	adds	r3, #88	; 0x58
    bce0:	009b      	lsls	r3, r3, #2
    bce2:	18d3      	adds	r3, r2, r3
    bce4:	2132      	movs	r1, #50	; 0x32
    bce6:	7219      	strb	r1, [r3, #8]
    bce8:	2100      	movs	r1, #0
    bcea:	7259      	strb	r1, [r3, #9]
    bcec:	7299      	strb	r1, [r3, #10]
    bcee:	72d9      	strb	r1, [r3, #11]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    bcf0:	23d6      	movs	r3, #214	; 0xd6
    bcf2:	005b      	lsls	r3, r3, #1
    bcf4:	5cd0      	ldrb	r0, [r2, r3]
    bcf6:	4b69      	ldr	r3, [pc, #420]	; (be9c <setLBTTimer+0x1d4>)
    bcf8:	4798      	blx	r3
    bcfa:	2800      	cmp	r0, #0
    bcfc:	d12f      	bne.n	bd5e <setLBTTimer+0x96>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    bcfe:	4866      	ldr	r0, [pc, #408]	; (be98 <setLBTTimer+0x1d0>)
    bd00:	0023      	movs	r3, r4
    bd02:	3358      	adds	r3, #88	; 0x58
    bd04:	009b      	lsls	r3, r3, #2
    bd06:	18c3      	adds	r3, r0, r3
    bd08:	7a19      	ldrb	r1, [r3, #8]
    bd0a:	7a5a      	ldrb	r2, [r3, #9]
    bd0c:	0212      	lsls	r2, r2, #8
    bd0e:	4311      	orrs	r1, r2
    bd10:	7a9a      	ldrb	r2, [r3, #10]
    bd12:	0412      	lsls	r2, r2, #16
    bd14:	430a      	orrs	r2, r1
    bd16:	7ad9      	ldrb	r1, [r3, #11]
    bd18:	0609      	lsls	r1, r1, #24
    bd1a:	4311      	orrs	r1, r2
    bd1c:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    bd1e:	232a      	movs	r3, #42	; 0x2a
    bd20:	56c3      	ldrsb	r3, [r0, r3]
    bd22:	4698      	mov	r8, r3
    bd24:	2b00      	cmp	r3, #0
    bd26:	dc00      	bgt.n	bd2a <setLBTTimer+0x62>
    bd28:	e08b      	b.n	be42 <setLBTTimer+0x17a>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    bd2a:	2300      	movs	r3, #0
    bd2c:	469a      	mov	sl, r3
		found = 1;
    bd2e:	3301      	adds	r3, #1
    bd30:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    bd32:	4a59      	ldr	r2, [pc, #356]	; (be98 <setLBTTimer+0x1d0>)
    bd34:	232f      	movs	r3, #47	; 0x2f
    bd36:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    bd38:	7911      	ldrb	r1, [r2, #4]
    bd3a:	7953      	ldrb	r3, [r2, #5]
    bd3c:	021b      	lsls	r3, r3, #8
    bd3e:	430b      	orrs	r3, r1
    bd40:	7991      	ldrb	r1, [r2, #6]
    bd42:	0409      	lsls	r1, r1, #16
    bd44:	430b      	orrs	r3, r1
    bd46:	79d1      	ldrb	r1, [r2, #7]
    bd48:	0609      	lsls	r1, r1, #24
    bd4a:	4319      	orrs	r1, r3
    bd4c:	2600      	movs	r6, #0
    bd4e:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    bd50:	2300      	movs	r3, #0
    bd52:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    bd54:	4653      	mov	r3, sl
    bd56:	9302      	str	r3, [sp, #8]
    bd58:	468b      	mov	fp, r1
    bd5a:	4645      	mov	r5, r8
    bd5c:	e03b      	b.n	bdd6 <setLBTTimer+0x10e>
		SwTimerStop(pLBTTimer->timerId);
    bd5e:	4c4e      	ldr	r4, [pc, #312]	; (be98 <setLBTTimer+0x1d0>)
    bd60:	25d6      	movs	r5, #214	; 0xd6
    bd62:	006d      	lsls	r5, r5, #1
    bd64:	5d60      	ldrb	r0, [r4, r5]
    bd66:	4b4e      	ldr	r3, [pc, #312]	; (bea0 <setLBTTimer+0x1d8>)
    bd68:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    bd6a:	5d60      	ldrb	r0, [r4, r5]
    bd6c:	4b4d      	ldr	r3, [pc, #308]	; (bea4 <setLBTTimer+0x1dc>)
    bd6e:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    bd70:	232a      	movs	r3, #42	; 0x2a
    bd72:	56e3      	ldrsb	r3, [r4, r3]
    bd74:	4698      	mov	r8, r3
    bd76:	2b00      	cmp	r3, #0
    bd78:	dd66      	ble.n	be48 <setLBTTimer+0x180>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    bd7a:	4a47      	ldr	r2, [pc, #284]	; (be98 <setLBTTimer+0x1d0>)
    bd7c:	23d4      	movs	r3, #212	; 0xd4
    bd7e:	005b      	lsls	r3, r3, #1
    bd80:	5cd4      	ldrb	r4, [r2, r3]
    bd82:	23aa      	movs	r3, #170	; 0xaa
    bd84:	33ff      	adds	r3, #255	; 0xff
    bd86:	5cd3      	ldrb	r3, [r2, r3]
    bd88:	021b      	lsls	r3, r3, #8
    bd8a:	4323      	orrs	r3, r4
    bd8c:	21d5      	movs	r1, #213	; 0xd5
    bd8e:	0049      	lsls	r1, r1, #1
    bd90:	5c54      	ldrb	r4, [r2, r1]
    bd92:	0424      	lsls	r4, r4, #16
    bd94:	4323      	orrs	r3, r4
    bd96:	21ac      	movs	r1, #172	; 0xac
    bd98:	31ff      	adds	r1, #255	; 0xff
    bd9a:	5c54      	ldrb	r4, [r2, r1]
    bd9c:	0624      	lsls	r4, r4, #24
    bd9e:	431c      	orrs	r4, r3
    bda0:	21fa      	movs	r1, #250	; 0xfa
    bda2:	0089      	lsls	r1, r1, #2
    bda4:	4b40      	ldr	r3, [pc, #256]	; (bea8 <setLBTTimer+0x1e0>)
    bda6:	4798      	blx	r3
    bda8:	1a23      	subs	r3, r4, r0
    bdaa:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    bdac:	2301      	movs	r3, #1
    bdae:	425b      	negs	r3, r3
    bdb0:	4699      	mov	r9, r3
    bool found = 0;
    bdb2:	2300      	movs	r3, #0
    bdb4:	9303      	str	r3, [sp, #12]
    bdb6:	e7bc      	b.n	bd32 <setLBTTimer+0x6a>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    bdb8:	3658      	adds	r6, #88	; 0x58
    bdba:	00b6      	lsls	r6, r6, #2
    bdbc:	4b36      	ldr	r3, [pc, #216]	; (be98 <setLBTTimer+0x1d0>)
    bdbe:	4698      	mov	r8, r3
    bdc0:	4446      	add	r6, r8
    bdc2:	4663      	mov	r3, ip
    bdc4:	7233      	strb	r3, [r6, #8]
    bdc6:	7273      	strb	r3, [r6, #9]
    bdc8:	72b3      	strb	r3, [r6, #10]
    bdca:	72f3      	strb	r3, [r6, #11]
	for(i = 0; i < RegParams.maxChannels; i++)
    bdcc:	3201      	adds	r2, #1
    bdce:	b2d2      	uxtb	r2, r2
    bdd0:	0016      	movs	r6, r2
    bdd2:	42aa      	cmp	r2, r5
    bdd4:	da32      	bge.n	be3c <setLBTTimer+0x174>
		if(i != RegParams.lastUsedChannelIndex)
    bdd6:	4290      	cmp	r0, r2
    bdd8:	d0f8      	beq.n	bdcc <setLBTTimer+0x104>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    bdda:	0053      	lsls	r3, r2, #1
    bddc:	4659      	mov	r1, fp
    bdde:	5c5c      	ldrb	r4, [r3, r1]
    bde0:	2c00      	cmp	r4, #0
    bde2:	d0f3      	beq.n	bdcc <setLBTTimer+0x104>
    bde4:	0033      	movs	r3, r6
    bde6:	3358      	adds	r3, #88	; 0x58
    bde8:	009b      	lsls	r3, r3, #2
    bdea:	4f2b      	ldr	r7, [pc, #172]	; (be98 <setLBTTimer+0x1d0>)
    bdec:	46b8      	mov	r8, r7
    bdee:	4443      	add	r3, r8
    bdf0:	7a1f      	ldrb	r7, [r3, #8]
    bdf2:	46ba      	mov	sl, r7
    bdf4:	7a5f      	ldrb	r7, [r3, #9]
    bdf6:	023f      	lsls	r7, r7, #8
    bdf8:	46b8      	mov	r8, r7
    bdfa:	4657      	mov	r7, sl
    bdfc:	4641      	mov	r1, r8
    bdfe:	430f      	orrs	r7, r1
    be00:	7a99      	ldrb	r1, [r3, #10]
    be02:	0409      	lsls	r1, r1, #16
    be04:	430f      	orrs	r7, r1
    be06:	7adb      	ldrb	r3, [r3, #11]
    be08:	061b      	lsls	r3, r3, #24
    be0a:	433b      	orrs	r3, r7
    be0c:	d0de      	beq.n	bdcc <setLBTTimer+0x104>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    be0e:	9f02      	ldr	r7, [sp, #8]
    be10:	42bb      	cmp	r3, r7
    be12:	d9d1      	bls.n	bdb8 <setLBTTimer+0xf0>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    be14:	1bdb      	subs	r3, r3, r7
    be16:	3658      	adds	r6, #88	; 0x58
    be18:	00b6      	lsls	r6, r6, #2
    be1a:	491f      	ldr	r1, [pc, #124]	; (be98 <setLBTTimer+0x1d0>)
    be1c:	4688      	mov	r8, r1
    be1e:	4446      	add	r6, r8
    be20:	7233      	strb	r3, [r6, #8]
    be22:	0a19      	lsrs	r1, r3, #8
    be24:	7271      	strb	r1, [r6, #9]
    be26:	0c19      	lsrs	r1, r3, #16
    be28:	72b1      	strb	r1, [r6, #10]
    be2a:	0e19      	lsrs	r1, r3, #24
    be2c:	72f1      	strb	r1, [r6, #11]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    be2e:	454b      	cmp	r3, r9
    be30:	d8cc      	bhi.n	bdcc <setLBTTimer+0x104>
    be32:	2b00      	cmp	r3, #0
    be34:	d0ca      	beq.n	bdcc <setLBTTimer+0x104>
    be36:	4699      	mov	r9, r3
					found = 1;
    be38:	9403      	str	r4, [sp, #12]
    be3a:	e7c7      	b.n	bdcc <setLBTTimer+0x104>
	if((found == 1) && minim)
    be3c:	9b03      	ldr	r3, [sp, #12]
    be3e:	2b00      	cmp	r3, #0
    be40:	d002      	beq.n	be48 <setLBTTimer+0x180>
    be42:	464b      	mov	r3, r9
    be44:	2b00      	cmp	r3, #0
    be46:	d107      	bne.n	be58 <setLBTTimer+0x190>
}
    be48:	2008      	movs	r0, #8
    be4a:	b005      	add	sp, #20
    be4c:	bc3c      	pop	{r2, r3, r4, r5}
    be4e:	4690      	mov	r8, r2
    be50:	4699      	mov	r9, r3
    be52:	46a2      	mov	sl, r4
    be54:	46ab      	mov	fp, r5
    be56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    be58:	4b0f      	ldr	r3, [pc, #60]	; (be98 <setLBTTimer+0x1d0>)
    be5a:	22d4      	movs	r2, #212	; 0xd4
    be5c:	0052      	lsls	r2, r2, #1
    be5e:	4649      	mov	r1, r9
    be60:	5499      	strb	r1, [r3, r2]
    be62:	464a      	mov	r2, r9
    be64:	0a11      	lsrs	r1, r2, #8
    be66:	001a      	movs	r2, r3
    be68:	32a9      	adds	r2, #169	; 0xa9
    be6a:	32ff      	adds	r2, #255	; 0xff
    be6c:	7051      	strb	r1, [r2, #1]
    be6e:	4649      	mov	r1, r9
    be70:	0c09      	lsrs	r1, r1, #16
    be72:	7091      	strb	r1, [r2, #2]
    be74:	4649      	mov	r1, r9
    be76:	0e09      	lsrs	r1, r1, #24
    be78:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    be7a:	21fa      	movs	r1, #250	; 0xfa
    be7c:	0089      	lsls	r1, r1, #2
    be7e:	464a      	mov	r2, r9
    be80:	4351      	muls	r1, r2
    be82:	22d6      	movs	r2, #214	; 0xd6
    be84:	0052      	lsls	r2, r2, #1
    be86:	5c98      	ldrb	r0, [r3, r2]
    be88:	2300      	movs	r3, #0
    be8a:	9300      	str	r3, [sp, #0]
    be8c:	4b07      	ldr	r3, [pc, #28]	; (beac <setLBTTimer+0x1e4>)
    be8e:	2200      	movs	r2, #0
    be90:	4c07      	ldr	r4, [pc, #28]	; (beb0 <setLBTTimer+0x1e8>)
    be92:	47a0      	blx	r4
    be94:	e7d8      	b.n	be48 <setLBTTimer+0x180>
    be96:	46c0      	nop			; (mov r8, r8)
    be98:	200024d0 	.word	0x200024d0
    be9c:	0000ef39 	.word	0x0000ef39
    bea0:	0000f0b9 	.word	0x0000f0b9
    bea4:	0000ef4d 	.word	0x0000ef4d
    bea8:	000165b9 	.word	0x000165b9
    beac:	0000beb5 	.word	0x0000beb5
    beb0:	0000eda1 	.word	0x0000eda1

0000beb4 <LBTChannelPauseCallback>:
{
    beb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    beb6:	46de      	mov	lr, fp
    beb8:	4657      	mov	r7, sl
    beba:	464e      	mov	r6, r9
    bebc:	4645      	mov	r5, r8
    bebe:	b5e0      	push	{r5, r6, r7, lr}
    bec0:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    bec2:	232a      	movs	r3, #42	; 0x2a
    bec4:	4a49      	ldr	r2, [pc, #292]	; (bfec <LBTChannelPauseCallback+0x138>)
    bec6:	56d6      	ldrsb	r6, [r2, r3]
    bec8:	2e00      	cmp	r6, #0
    beca:	dd68      	ble.n	bf9e <LBTChannelPauseCallback+0xea>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    becc:	0013      	movs	r3, r2
    bece:	7915      	ldrb	r5, [r2, #4]
    bed0:	7952      	ldrb	r2, [r2, #5]
    bed2:	0212      	lsls	r2, r2, #8
    bed4:	432a      	orrs	r2, r5
    bed6:	799d      	ldrb	r5, [r3, #6]
    bed8:	042d      	lsls	r5, r5, #16
    beda:	432a      	orrs	r2, r5
    bedc:	79dd      	ldrb	r5, [r3, #7]
    bede:	062d      	lsls	r5, r5, #24
    bee0:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    bee2:	22d4      	movs	r2, #212	; 0xd4
    bee4:	0052      	lsls	r2, r2, #1
    bee6:	5c9f      	ldrb	r7, [r3, r2]
    bee8:	22aa      	movs	r2, #170	; 0xaa
    beea:	32ff      	adds	r2, #255	; 0xff
    beec:	5c9a      	ldrb	r2, [r3, r2]
    beee:	0212      	lsls	r2, r2, #8
    bef0:	433a      	orrs	r2, r7
    bef2:	21d5      	movs	r1, #213	; 0xd5
    bef4:	0049      	lsls	r1, r1, #1
    bef6:	5c5f      	ldrb	r7, [r3, r1]
    bef8:	043f      	lsls	r7, r7, #16
    befa:	433a      	orrs	r2, r7
    befc:	21ac      	movs	r1, #172	; 0xac
    befe:	31ff      	adds	r1, #255	; 0xff
    bf00:	5c5f      	ldrb	r7, [r3, r1]
    bf02:	063f      	lsls	r7, r7, #24
    bf04:	4317      	orrs	r7, r2
    bf06:	9703      	str	r7, [sp, #12]
    bf08:	2000      	movs	r0, #0
    bf0a:	2300      	movs	r3, #0
    bf0c:	2200      	movs	r2, #0
    bf0e:	4691      	mov	r9, r2
    bf10:	3a01      	subs	r2, #1
    bf12:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    bf14:	2200      	movs	r2, #0
    bf16:	4694      	mov	ip, r2
    bf18:	e00e      	b.n	bf38 <LBTChannelPauseCallback+0x84>
    bf1a:	3058      	adds	r0, #88	; 0x58
    bf1c:	0080      	lsls	r0, r0, #2
    bf1e:	4a33      	ldr	r2, [pc, #204]	; (bfec <LBTChannelPauseCallback+0x138>)
    bf20:	4692      	mov	sl, r2
    bf22:	4450      	add	r0, sl
    bf24:	4662      	mov	r2, ip
    bf26:	7202      	strb	r2, [r0, #8]
    bf28:	7242      	strb	r2, [r0, #9]
    bf2a:	7282      	strb	r2, [r0, #10]
    bf2c:	72c2      	strb	r2, [r0, #11]
    for (i=0; i < RegParams.maxChannels; i++)
    bf2e:	3301      	adds	r3, #1
    bf30:	b2db      	uxtb	r3, r3
    bf32:	0018      	movs	r0, r3
    bf34:	42b3      	cmp	r3, r6
    bf36:	da2f      	bge.n	bf98 <LBTChannelPauseCallback+0xe4>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    bf38:	005a      	lsls	r2, r3, #1
    bf3a:	5d54      	ldrb	r4, [r2, r5]
    bf3c:	2c00      	cmp	r4, #0
    bf3e:	d0f6      	beq.n	bf2e <LBTChannelPauseCallback+0x7a>
    bf40:	0002      	movs	r2, r0
    bf42:	3258      	adds	r2, #88	; 0x58
    bf44:	0092      	lsls	r2, r2, #2
    bf46:	4929      	ldr	r1, [pc, #164]	; (bfec <LBTChannelPauseCallback+0x138>)
    bf48:	468a      	mov	sl, r1
    bf4a:	4452      	add	r2, sl
    bf4c:	7a17      	ldrb	r7, [r2, #8]
    bf4e:	46bb      	mov	fp, r7
    bf50:	7a57      	ldrb	r7, [r2, #9]
    bf52:	023f      	lsls	r7, r7, #8
    bf54:	46ba      	mov	sl, r7
    bf56:	465f      	mov	r7, fp
    bf58:	4651      	mov	r1, sl
    bf5a:	430f      	orrs	r7, r1
    bf5c:	7a91      	ldrb	r1, [r2, #10]
    bf5e:	0409      	lsls	r1, r1, #16
    bf60:	430f      	orrs	r7, r1
    bf62:	7ad2      	ldrb	r2, [r2, #11]
    bf64:	0612      	lsls	r2, r2, #24
    bf66:	433a      	orrs	r2, r7
    bf68:	d0e1      	beq.n	bf2e <LBTChannelPauseCallback+0x7a>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    bf6a:	9f03      	ldr	r7, [sp, #12]
    bf6c:	42ba      	cmp	r2, r7
    bf6e:	d9d4      	bls.n	bf1a <LBTChannelPauseCallback+0x66>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    bf70:	1bd2      	subs	r2, r2, r7
    bf72:	3058      	adds	r0, #88	; 0x58
    bf74:	0080      	lsls	r0, r0, #2
    bf76:	491d      	ldr	r1, [pc, #116]	; (bfec <LBTChannelPauseCallback+0x138>)
    bf78:	468a      	mov	sl, r1
    bf7a:	4450      	add	r0, sl
    bf7c:	7202      	strb	r2, [r0, #8]
    bf7e:	0a11      	lsrs	r1, r2, #8
    bf80:	7241      	strb	r1, [r0, #9]
    bf82:	0c11      	lsrs	r1, r2, #16
    bf84:	7281      	strb	r1, [r0, #10]
    bf86:	0e11      	lsrs	r1, r2, #24
    bf88:	72c1      	strb	r1, [r0, #11]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    bf8a:	4542      	cmp	r2, r8
    bf8c:	d8cf      	bhi.n	bf2e <LBTChannelPauseCallback+0x7a>
    bf8e:	2a00      	cmp	r2, #0
    bf90:	d0cd      	beq.n	bf2e <LBTChannelPauseCallback+0x7a>
                found = 1;
    bf92:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    bf94:	4690      	mov	r8, r2
    bf96:	e7ca      	b.n	bf2e <LBTChannelPauseCallback+0x7a>
    if ( found == 1 )
    bf98:	464b      	mov	r3, r9
    bf9a:	2b00      	cmp	r3, #0
    bf9c:	d106      	bne.n	bfac <LBTChannelPauseCallback+0xf8>
}
    bf9e:	b005      	add	sp, #20
    bfa0:	bc3c      	pop	{r2, r3, r4, r5}
    bfa2:	4690      	mov	r8, r2
    bfa4:	4699      	mov	r9, r3
    bfa6:	46a2      	mov	sl, r4
    bfa8:	46ab      	mov	fp, r5
    bfaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    bfac:	4b0f      	ldr	r3, [pc, #60]	; (bfec <LBTChannelPauseCallback+0x138>)
    bfae:	22d4      	movs	r2, #212	; 0xd4
    bfb0:	0052      	lsls	r2, r2, #1
    bfb2:	4641      	mov	r1, r8
    bfb4:	5499      	strb	r1, [r3, r2]
    bfb6:	4642      	mov	r2, r8
    bfb8:	0a11      	lsrs	r1, r2, #8
    bfba:	001a      	movs	r2, r3
    bfbc:	32a9      	adds	r2, #169	; 0xa9
    bfbe:	32ff      	adds	r2, #255	; 0xff
    bfc0:	7051      	strb	r1, [r2, #1]
    bfc2:	4641      	mov	r1, r8
    bfc4:	0c09      	lsrs	r1, r1, #16
    bfc6:	7091      	strb	r1, [r2, #2]
    bfc8:	4641      	mov	r1, r8
    bfca:	0e09      	lsrs	r1, r1, #24
    bfcc:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    bfce:	21fa      	movs	r1, #250	; 0xfa
    bfd0:	0089      	lsls	r1, r1, #2
    bfd2:	4642      	mov	r2, r8
    bfd4:	4351      	muls	r1, r2
    bfd6:	22d6      	movs	r2, #214	; 0xd6
    bfd8:	0052      	lsls	r2, r2, #1
    bfda:	5c98      	ldrb	r0, [r3, r2]
    bfdc:	2300      	movs	r3, #0
    bfde:	9300      	str	r3, [sp, #0]
    bfe0:	4b03      	ldr	r3, [pc, #12]	; (bff0 <LBTChannelPauseCallback+0x13c>)
    bfe2:	2200      	movs	r2, #0
    bfe4:	4c03      	ldr	r4, [pc, #12]	; (bff4 <LBTChannelPauseCallback+0x140>)
    bfe6:	47a0      	blx	r4
}
    bfe8:	e7d9      	b.n	bf9e <LBTChannelPauseCallback+0xea>
    bfea:	46c0      	nop			; (mov r8, r8)
    bfec:	200024d0 	.word	0x200024d0
    bff0:	0000beb5 	.word	0x0000beb5
    bff4:	0000eda1 	.word	0x0000eda1

0000bff8 <JoinDutyCycleCallback>:
{   
    bff8:	b510      	push	{r4, lr}
    bffa:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    bffc:	492e      	ldr	r1, [pc, #184]	; (c0b8 <JoinDutyCycleCallback+0xc0>)
    bffe:	7d0b      	ldrb	r3, [r1, #20]
    c000:	7d4a      	ldrb	r2, [r1, #21]
    c002:	0212      	lsls	r2, r2, #8
    c004:	431a      	orrs	r2, r3
    c006:	7d8b      	ldrb	r3, [r1, #22]
    c008:	041b      	lsls	r3, r3, #16
    c00a:	431a      	orrs	r2, r3
    c00c:	7dcb      	ldrb	r3, [r1, #23]
    c00e:	061b      	lsls	r3, r3, #24
    c010:	4313      	orrs	r3, r2
    c012:	7919      	ldrb	r1, [r3, #4]
    c014:	795a      	ldrb	r2, [r3, #5]
    c016:	0212      	lsls	r2, r2, #8
    c018:	430a      	orrs	r2, r1
    c01a:	7999      	ldrb	r1, [r3, #6]
    c01c:	0409      	lsls	r1, r1, #16
    c01e:	430a      	orrs	r2, r1
    c020:	79d9      	ldrb	r1, [r3, #7]
    c022:	0609      	lsls	r1, r1, #24
    c024:	4311      	orrs	r1, r2
    c026:	d03c      	beq.n	c0a2 <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    c028:	4a24      	ldr	r2, [pc, #144]	; (c0bc <JoinDutyCycleCallback+0xc4>)
    c02a:	4291      	cmp	r1, r2
    c02c:	d91e      	bls.n	c06c <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    c02e:	4a24      	ldr	r2, [pc, #144]	; (c0c0 <JoinDutyCycleCallback+0xc8>)
    c030:	4694      	mov	ip, r2
    c032:	4461      	add	r1, ip
    c034:	7119      	strb	r1, [r3, #4]
    c036:	0a0a      	lsrs	r2, r1, #8
    c038:	715a      	strb	r2, [r3, #5]
    c03a:	0c0a      	lsrs	r2, r1, #16
    c03c:	719a      	strb	r2, [r3, #6]
    c03e:	0e09      	lsrs	r1, r1, #24
    c040:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    c042:	491d      	ldr	r1, [pc, #116]	; (c0b8 <JoinDutyCycleCallback+0xc0>)
    c044:	7d0b      	ldrb	r3, [r1, #20]
    c046:	7d4a      	ldrb	r2, [r1, #21]
    c048:	0212      	lsls	r2, r2, #8
    c04a:	431a      	orrs	r2, r3
    c04c:	7d8b      	ldrb	r3, [r1, #22]
    c04e:	041b      	lsls	r3, r3, #16
    c050:	431a      	orrs	r2, r3
    c052:	7dcb      	ldrb	r3, [r1, #23]
    c054:	061b      	lsls	r3, r3, #24
    c056:	4313      	orrs	r3, r2
    c058:	7a18      	ldrb	r0, [r3, #8]
    c05a:	2300      	movs	r3, #0
    c05c:	9300      	str	r3, [sp, #0]
    c05e:	4b19      	ldr	r3, [pc, #100]	; (c0c4 <JoinDutyCycleCallback+0xcc>)
    c060:	2200      	movs	r2, #0
    c062:	4919      	ldr	r1, [pc, #100]	; (c0c8 <JoinDutyCycleCallback+0xd0>)
    c064:	4c19      	ldr	r4, [pc, #100]	; (c0cc <JoinDutyCycleCallback+0xd4>)
    c066:	47a0      	blx	r4
}
    c068:	b002      	add	sp, #8
    c06a:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    c06c:	22fa      	movs	r2, #250	; 0xfa
    c06e:	0092      	lsls	r2, r2, #2
    c070:	4351      	muls	r1, r2
    c072:	7a18      	ldrb	r0, [r3, #8]
    c074:	2300      	movs	r3, #0
    c076:	9300      	str	r3, [sp, #0]
    c078:	4b12      	ldr	r3, [pc, #72]	; (c0c4 <JoinDutyCycleCallback+0xcc>)
    c07a:	2200      	movs	r2, #0
    c07c:	4c13      	ldr	r4, [pc, #76]	; (c0cc <JoinDutyCycleCallback+0xd4>)
    c07e:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    c080:	490d      	ldr	r1, [pc, #52]	; (c0b8 <JoinDutyCycleCallback+0xc0>)
    c082:	7d0b      	ldrb	r3, [r1, #20]
    c084:	7d4a      	ldrb	r2, [r1, #21]
    c086:	0212      	lsls	r2, r2, #8
    c088:	431a      	orrs	r2, r3
    c08a:	7d8b      	ldrb	r3, [r1, #22]
    c08c:	041b      	lsls	r3, r3, #16
    c08e:	431a      	orrs	r2, r3
    c090:	7dcb      	ldrb	r3, [r1, #23]
    c092:	061b      	lsls	r3, r3, #24
    c094:	4313      	orrs	r3, r2
    c096:	2200      	movs	r2, #0
    c098:	711a      	strb	r2, [r3, #4]
    c09a:	715a      	strb	r2, [r3, #5]
    c09c:	719a      	strb	r2, [r3, #6]
    c09e:	71da      	strb	r2, [r3, #7]
    c0a0:	e7e2      	b.n	c068 <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    c0a2:	7a18      	ldrb	r0, [r3, #8]
    c0a4:	4b0a      	ldr	r3, [pc, #40]	; (c0d0 <JoinDutyCycleCallback+0xd8>)
    c0a6:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    c0a8:	4b03      	ldr	r3, [pc, #12]	; (c0b8 <JoinDutyCycleCallback+0xc0>)
    c0aa:	333e      	adds	r3, #62	; 0x3e
    c0ac:	2200      	movs	r2, #0
    c0ae:	701a      	strb	r2, [r3, #0]
    c0b0:	705a      	strb	r2, [r3, #1]
    c0b2:	709a      	strb	r2, [r3, #2]
    c0b4:	70da      	strb	r2, [r3, #3]
}
    c0b6:	e7d7      	b.n	c068 <JoinDutyCycleCallback+0x70>
    c0b8:	200024d0 	.word	0x200024d0
    c0bc:	0020c49b 	.word	0x0020c49b
    c0c0:	ffdf3b65 	.word	0xffdf3b65
    c0c4:	0000bff9 	.word	0x0000bff9
    c0c8:	7fffffff 	.word	0x7fffffff
    c0cc:	0000eda1 	.word	0x0000eda1
    c0d0:	0000f0b9 	.word	0x0000f0b9

0000c0d4 <JoinBackoffCallback>:
{
    c0d4:	b510      	push	{r4, lr}
    c0d6:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    c0d8:	4b0c      	ldr	r3, [pc, #48]	; (c10c <JoinBackoffCallback+0x38>)
    c0da:	2142      	movs	r1, #66	; 0x42
    c0dc:	5c5a      	ldrb	r2, [r3, r1]
    c0de:	3201      	adds	r2, #1
    c0e0:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    c0e2:	7e19      	ldrb	r1, [r3, #24]
    c0e4:	7e5a      	ldrb	r2, [r3, #25]
    c0e6:	0212      	lsls	r2, r2, #8
    c0e8:	4311      	orrs	r1, r2
    c0ea:	7e9a      	ldrb	r2, [r3, #26]
    c0ec:	0412      	lsls	r2, r2, #16
    c0ee:	430a      	orrs	r2, r1
    c0f0:	7edb      	ldrb	r3, [r3, #27]
    c0f2:	061b      	lsls	r3, r3, #24
    c0f4:	4313      	orrs	r3, r2
    c0f6:	7818      	ldrb	r0, [r3, #0]
    c0f8:	2300      	movs	r3, #0
    c0fa:	9300      	str	r3, [sp, #0]
    c0fc:	4b04      	ldr	r3, [pc, #16]	; (c110 <JoinBackoffCallback+0x3c>)
    c0fe:	2200      	movs	r2, #0
    c100:	4904      	ldr	r1, [pc, #16]	; (c114 <JoinBackoffCallback+0x40>)
    c102:	4c05      	ldr	r4, [pc, #20]	; (c118 <JoinBackoffCallback+0x44>)
    c104:	47a0      	blx	r4
}
    c106:	b002      	add	sp, #8
    c108:	bd10      	pop	{r4, pc}
    c10a:	46c0      	nop			; (mov r8, r8)
    c10c:	200024d0 	.word	0x200024d0
    c110:	0000c0d5 	.word	0x0000c0d5
    c114:	6b49d200 	.word	0x6b49d200
    c118:	0000eda1 	.word	0x0000eda1

0000c11c <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c11c:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    c11e:	230f      	movs	r3, #15
    c120:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    c122:	2124      	movs	r1, #36	; 0x24
    c124:	4807      	ldr	r0, [pc, #28]	; (c144 <ValidateDataRangeT2+0x28>)
    c126:	5c41      	ldrb	r1, [r0, r1]
		retVal = LORAWAN_INVALID_PARAMETER;
    c128:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c12a:	428b      	cmp	r3, r1
    c12c:	d900      	bls.n	c130 <ValidateDataRangeT2+0x14>
}
    c12e:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    c130:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    c132:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c134:	428a      	cmp	r2, r1
    c136:	d8fa      	bhi.n	c12e <ValidateDataRangeT2+0x12>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c138:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    c13a:	4293      	cmp	r3, r2
    c13c:	d9f7      	bls.n	c12e <ValidateDataRangeT2+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    c13e:	3002      	adds	r0, #2
	return retVal;
    c140:	e7f5      	b.n	c12e <ValidateDataRangeT2+0x12>
    c142:	46c0      	nop			; (mov r8, r8)
    c144:	200024d0 	.word	0x200024d0

0000c148 <setDataRangeT2>:
{
    c148:	b5f0      	push	{r4, r5, r6, r7, lr}
    c14a:	46c6      	mov	lr, r8
    c14c:	b500      	push	{lr}
    c14e:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c150:	780d      	ldrb	r5, [r1, #0]
    c152:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    c154:	ab01      	add	r3, sp, #4
    c156:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    c158:	2201      	movs	r2, #1
    c15a:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c15c:	2012      	movs	r0, #18
    c15e:	4b24      	ldr	r3, [pc, #144]	; (c1f0 <setDataRangeT2+0xa8>)
    c160:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    c162:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c164:	2808      	cmp	r0, #8
    c166:	d004      	beq.n	c172 <setDataRangeT2+0x2a>
}
    c168:	0020      	movs	r0, r4
    c16a:	b002      	add	sp, #8
    c16c:	bc04      	pop	{r2}
    c16e:	4690      	mov	r8, r2
    c170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    c172:	a901      	add	r1, sp, #4
    c174:	300d      	adds	r0, #13
    c176:	4b1f      	ldr	r3, [pc, #124]	; (c1f4 <setDataRangeT2+0xac>)
    c178:	4798      	blx	r3
    c17a:	0004      	movs	r4, r0
    c17c:	2808      	cmp	r0, #8
    c17e:	d001      	beq.n	c184 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    c180:	240a      	movs	r4, #10
    c182:	e7f1      	b.n	c168 <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    c184:	4f1c      	ldr	r7, [pc, #112]	; (c1f8 <setDataRangeT2+0xb0>)
    c186:	793b      	ldrb	r3, [r7, #4]
    c188:	797a      	ldrb	r2, [r7, #5]
    c18a:	0212      	lsls	r2, r2, #8
    c18c:	431a      	orrs	r2, r3
    c18e:	79bb      	ldrb	r3, [r7, #6]
    c190:	041b      	lsls	r3, r3, #16
    c192:	431a      	orrs	r2, r3
    c194:	79fb      	ldrb	r3, [r7, #7]
    c196:	061b      	lsls	r3, r3, #24
    c198:	4313      	orrs	r3, r2
    c19a:	006a      	lsls	r2, r5, #1
    c19c:	4690      	mov	r8, r2
    c19e:	4443      	add	r3, r8
    c1a0:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    c1a2:	4b16      	ldr	r3, [pc, #88]	; (c1fc <setDataRangeT2+0xb4>)
    c1a4:	5cfb      	ldrb	r3, [r7, r3]
    c1a6:	4a16      	ldr	r2, [pc, #88]	; (c200 <setDataRangeT2+0xb8>)
    c1a8:	5cb8      	ldrb	r0, [r7, r2]
    c1aa:	0200      	lsls	r0, r0, #8
    c1ac:	4318      	orrs	r0, r3
    c1ae:	b2c1      	uxtb	r1, r0
    c1b0:	0a00      	lsrs	r0, r0, #8
    c1b2:	4e14      	ldr	r6, [pc, #80]	; (c204 <setDataRangeT2+0xbc>)
    c1b4:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    c1b6:	7a3b      	ldrb	r3, [r7, #8]
    c1b8:	7a7a      	ldrb	r2, [r7, #9]
    c1ba:	0212      	lsls	r2, r2, #8
    c1bc:	431a      	orrs	r2, r3
    c1be:	7abb      	ldrb	r3, [r7, #10]
    c1c0:	041b      	lsls	r3, r3, #16
    c1c2:	431a      	orrs	r2, r3
    c1c4:	7afb      	ldrb	r3, [r7, #11]
    c1c6:	061b      	lsls	r3, r3, #24
    c1c8:	4313      	orrs	r3, r2
    c1ca:	4445      	add	r5, r8
    c1cc:	00ad      	lsls	r5, r5, #2
    c1ce:	195d      	adds	r5, r3, r5
    c1d0:	7aeb      	ldrb	r3, [r5, #11]
    c1d2:	2202      	movs	r2, #2
    c1d4:	4313      	orrs	r3, r2
    c1d6:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    c1d8:	2384      	movs	r3, #132	; 0x84
    c1da:	009b      	lsls	r3, r3, #2
    c1dc:	5cfb      	ldrb	r3, [r7, r3]
    c1de:	4a0a      	ldr	r2, [pc, #40]	; (c208 <setDataRangeT2+0xc0>)
    c1e0:	5cb8      	ldrb	r0, [r7, r2]
    c1e2:	0200      	lsls	r0, r0, #8
    c1e4:	4318      	orrs	r0, r3
    c1e6:	b2c1      	uxtb	r1, r0
    c1e8:	0a00      	lsrs	r0, r0, #8
    c1ea:	47b0      	blx	r6
    c1ec:	e7bc      	b.n	c168 <setDataRangeT2+0x20>
    c1ee:	46c0      	nop			; (mov r8, r8)
    c1f0:	0000c11d 	.word	0x0000c11d
    c1f4:	000099cd 	.word	0x000099cd
    c1f8:	200024d0 	.word	0x200024d0
    c1fc:	0000020e 	.word	0x0000020e
    c200:	0000020f 	.word	0x0000020f
    c204:	0000e071 	.word	0x0000e071
    c208:	00000211 	.word	0x00000211

0000c20c <LORAREG_GetAttr_MaxPayloadT3>:
{
    c20c:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    c20e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c210:	2124      	movs	r1, #36	; 0x24
    c212:	4816      	ldr	r0, [pc, #88]	; (c26c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c214:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c216:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c218:	4299      	cmp	r1, r3
    c21a:	d215      	bcs.n	c248 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    c21c:	21e1      	movs	r1, #225	; 0xe1
    c21e:	0049      	lsls	r1, r1, #1
    c220:	4c12      	ldr	r4, [pc, #72]	; (c26c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c222:	5c61      	ldrb	r1, [r4, r1]
    c224:	07c9      	lsls	r1, r1, #31
    c226:	d411      	bmi.n	c24c <LORAREG_GetAttr_MaxPayloadT3+0x40>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c228:	4d10      	ldr	r5, [pc, #64]	; (c26c <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    c22a:	7829      	ldrb	r1, [r5, #0]
    c22c:	786c      	ldrb	r4, [r5, #1]
    c22e:	0224      	lsls	r4, r4, #8
    c230:	430c      	orrs	r4, r1
    c232:	78a9      	ldrb	r1, [r5, #2]
    c234:	0409      	lsls	r1, r1, #16
    c236:	430c      	orrs	r4, r1
    c238:	78e9      	ldrb	r1, [r5, #3]
    c23a:	0609      	lsls	r1, r1, #24
    c23c:	4321      	orrs	r1, r4
    c23e:	00db      	lsls	r3, r3, #3
    c240:	185b      	adds	r3, r3, r1
    c242:	789b      	ldrb	r3, [r3, #2]
    c244:	7013      	strb	r3, [r2, #0]
}
    c246:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c248:	3802      	subs	r0, #2
    c24a:	e7e7      	b.n	c21c <LORAREG_GetAttr_MaxPayloadT3+0x10>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    c24c:	0025      	movs	r5, r4
    c24e:	7821      	ldrb	r1, [r4, #0]
    c250:	7864      	ldrb	r4, [r4, #1]
    c252:	0224      	lsls	r4, r4, #8
    c254:	430c      	orrs	r4, r1
    c256:	78a9      	ldrb	r1, [r5, #2]
    c258:	0409      	lsls	r1, r1, #16
    c25a:	430c      	orrs	r4, r1
    c25c:	78e9      	ldrb	r1, [r5, #3]
    c25e:	0609      	lsls	r1, r1, #24
    c260:	4321      	orrs	r1, r4
    c262:	00db      	lsls	r3, r3, #3
    c264:	1859      	adds	r1, r3, r1
    c266:	78cb      	ldrb	r3, [r1, #3]
    c268:	7013      	strb	r3, [r2, #0]
    c26a:	e7ec      	b.n	c246 <LORAREG_GetAttr_MaxPayloadT3+0x3a>
    c26c:	200024d0 	.word	0x200024d0

0000c270 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    c270:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c272:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c274:	2124      	movs	r1, #36	; 0x24
    c276:	480d      	ldr	r0, [pc, #52]	; (c2ac <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    c278:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    c27a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c27c:	4299      	cmp	r1, r3
    c27e:	d200      	bcs.n	c282 <LORAREG_GetAttr_RxWindowSizeT2+0x12>
}
    c280:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    c282:	4c0a      	ldr	r4, [pc, #40]	; (c2ac <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    c284:	7821      	ldrb	r1, [r4, #0]
    c286:	7860      	ldrb	r0, [r4, #1]
    c288:	0200      	lsls	r0, r0, #8
    c28a:	4308      	orrs	r0, r1
    c28c:	78a1      	ldrb	r1, [r4, #2]
    c28e:	0409      	lsls	r1, r1, #16
    c290:	4308      	orrs	r0, r1
    c292:	78e1      	ldrb	r1, [r4, #3]
    c294:	0609      	lsls	r1, r1, #24
    c296:	4301      	orrs	r1, r0
    c298:	00db      	lsls	r3, r3, #3
    c29a:	5c58      	ldrb	r0, [r3, r1]
    c29c:	185b      	adds	r3, r3, r1
    c29e:	785b      	ldrb	r3, [r3, #1]
    c2a0:	021b      	lsls	r3, r3, #8
    c2a2:	4303      	orrs	r3, r0
    c2a4:	8013      	strh	r3, [r2, #0]
	return result;
    c2a6:	2008      	movs	r0, #8
    c2a8:	e7ea      	b.n	c280 <LORAREG_GetAttr_RxWindowSizeT2+0x10>
    c2aa:	46c0      	nop			; (mov r8, r8)
    c2ac:	200024d0 	.word	0x200024d0

0000c2b0 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    c2b0:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c2b2:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c2b4:	2124      	movs	r1, #36	; 0x24
    c2b6:	480c      	ldr	r0, [pc, #48]	; (c2e8 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    c2b8:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    c2ba:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c2bc:	4299      	cmp	r1, r3
    c2be:	d200      	bcs.n	c2c2 <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
}
    c2c0:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    c2c2:	4c09      	ldr	r4, [pc, #36]	; (c2e8 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    c2c4:	7821      	ldrb	r1, [r4, #0]
    c2c6:	7860      	ldrb	r0, [r4, #1]
    c2c8:	0200      	lsls	r0, r0, #8
    c2ca:	4308      	orrs	r0, r1
    c2cc:	78a1      	ldrb	r1, [r4, #2]
    c2ce:	0409      	lsls	r1, r1, #16
    c2d0:	4308      	orrs	r0, r1
    c2d2:	78e1      	ldrb	r1, [r4, #3]
    c2d4:	0609      	lsls	r1, r1, #24
    c2d6:	4301      	orrs	r1, r0
    c2d8:	00db      	lsls	r3, r3, #3
    c2da:	185b      	adds	r3, r3, r1
    c2dc:	791b      	ldrb	r3, [r3, #4]
    c2de:	b25b      	sxtb	r3, r3
    c2e0:	7013      	strb	r3, [r2, #0]
	return result;
    c2e2:	2008      	movs	r0, #8
    c2e4:	e7ec      	b.n	c2c0 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
    c2e6:	46c0      	nop			; (mov r8, r8)
    c2e8:	200024d0 	.word	0x200024d0

0000c2ec <LORAREG_GetAttr_MaxPayloadT2>:
{
    c2ec:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c2ee:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c2f0:	2124      	movs	r1, #36	; 0x24
    c2f2:	480b      	ldr	r0, [pc, #44]	; (c320 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    c2f4:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c2f6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c2f8:	4299      	cmp	r1, r3
    c2fa:	d200      	bcs.n	c2fe <LORAREG_GetAttr_MaxPayloadT2+0x12>
}
    c2fc:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c2fe:	4c08      	ldr	r4, [pc, #32]	; (c320 <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    c300:	7821      	ldrb	r1, [r4, #0]
    c302:	7860      	ldrb	r0, [r4, #1]
    c304:	0200      	lsls	r0, r0, #8
    c306:	4308      	orrs	r0, r1
    c308:	78a1      	ldrb	r1, [r4, #2]
    c30a:	0409      	lsls	r1, r1, #16
    c30c:	4308      	orrs	r0, r1
    c30e:	78e1      	ldrb	r1, [r4, #3]
    c310:	0609      	lsls	r1, r1, #24
    c312:	4301      	orrs	r1, r0
    c314:	00db      	lsls	r3, r3, #3
    c316:	185b      	adds	r3, r3, r1
    c318:	789b      	ldrb	r3, [r3, #2]
    c31a:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c31c:	2008      	movs	r0, #8
	return result;
    c31e:	e7ed      	b.n	c2fc <LORAREG_GetAttr_MaxPayloadT2+0x10>
    c320:	200024d0 	.word	0x200024d0

0000c324 <LORAREG_GetAttr_ModulationAttrT2>:
{
    c324:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c326:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c328:	2124      	movs	r1, #36	; 0x24
    c32a:	480b      	ldr	r0, [pc, #44]	; (c358 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    c32c:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    c32e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c330:	4299      	cmp	r1, r3
    c332:	d200      	bcs.n	c336 <LORAREG_GetAttr_ModulationAttrT2+0x12>
}
    c334:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    c336:	4c08      	ldr	r4, [pc, #32]	; (c358 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    c338:	7821      	ldrb	r1, [r4, #0]
    c33a:	7860      	ldrb	r0, [r4, #1]
    c33c:	0200      	lsls	r0, r0, #8
    c33e:	4308      	orrs	r0, r1
    c340:	78a1      	ldrb	r1, [r4, #2]
    c342:	0409      	lsls	r1, r1, #16
    c344:	4308      	orrs	r0, r1
    c346:	78e1      	ldrb	r1, [r4, #3]
    c348:	0609      	lsls	r1, r1, #24
    c34a:	4301      	orrs	r1, r0
    c34c:	00db      	lsls	r3, r3, #3
    c34e:	185b      	adds	r3, r3, r1
    c350:	79db      	ldrb	r3, [r3, #7]
    c352:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c354:	2008      	movs	r0, #8
	return result;
    c356:	e7ed      	b.n	c334 <LORAREG_GetAttr_ModulationAttrT2+0x10>
    c358:	200024d0 	.word	0x200024d0

0000c35c <LORAREG_GetAttr_BandwidthAttrT2>:
{
    c35c:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c35e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c360:	2124      	movs	r1, #36	; 0x24
    c362:	480b      	ldr	r0, [pc, #44]	; (c390 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    c364:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    c366:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c368:	4299      	cmp	r1, r3
    c36a:	d200      	bcs.n	c36e <LORAREG_GetAttr_BandwidthAttrT2+0x12>
}
    c36c:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    c36e:	4c08      	ldr	r4, [pc, #32]	; (c390 <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    c370:	7821      	ldrb	r1, [r4, #0]
    c372:	7860      	ldrb	r0, [r4, #1]
    c374:	0200      	lsls	r0, r0, #8
    c376:	4308      	orrs	r0, r1
    c378:	78a1      	ldrb	r1, [r4, #2]
    c37a:	0409      	lsls	r1, r1, #16
    c37c:	4308      	orrs	r0, r1
    c37e:	78e1      	ldrb	r1, [r4, #3]
    c380:	0609      	lsls	r1, r1, #24
    c382:	4301      	orrs	r1, r0
    c384:	00db      	lsls	r3, r3, #3
    c386:	185b      	adds	r3, r3, r1
    c388:	799b      	ldrb	r3, [r3, #6]
    c38a:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c38c:	2008      	movs	r0, #8
	return result;
    c38e:	e7ed      	b.n	c36c <LORAREG_GetAttr_BandwidthAttrT2+0x10>
    c390:	200024d0 	.word	0x200024d0

0000c394 <LORAREG_GetAttr_SpreadFactorT2>:
{
    c394:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    c396:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    c398:	2124      	movs	r1, #36	; 0x24
    c39a:	480b      	ldr	r0, [pc, #44]	; (c3c8 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    c39c:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    c39e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c3a0:	4299      	cmp	r1, r3
    c3a2:	d200      	bcs.n	c3a6 <LORAREG_GetAttr_SpreadFactorT2+0x12>
}
    c3a4:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    c3a6:	4c08      	ldr	r4, [pc, #32]	; (c3c8 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    c3a8:	7821      	ldrb	r1, [r4, #0]
    c3aa:	7860      	ldrb	r0, [r4, #1]
    c3ac:	0200      	lsls	r0, r0, #8
    c3ae:	4308      	orrs	r0, r1
    c3b0:	78a1      	ldrb	r1, [r4, #2]
    c3b2:	0409      	lsls	r1, r1, #16
    c3b4:	4308      	orrs	r0, r1
    c3b6:	78e1      	ldrb	r1, [r4, #3]
    c3b8:	0609      	lsls	r1, r1, #24
    c3ba:	4301      	orrs	r1, r0
    c3bc:	00db      	lsls	r3, r3, #3
    c3be:	185b      	adds	r3, r3, r1
    c3c0:	795b      	ldrb	r3, [r3, #5]
    c3c2:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c3c4:	2008      	movs	r0, #8
	return result;
    c3c6:	e7ed      	b.n	c3a4 <LORAREG_GetAttr_SpreadFactorT2+0x10>
    c3c8:	200024d0 	.word	0x200024d0

0000c3cc <ValidateChMaskChCntl>:
{
    c3cc:	b510      	push	{r4, lr}
    c3ce:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    c3d0:	ac01      	add	r4, sp, #4
    c3d2:	2204      	movs	r2, #4
    c3d4:	0020      	movs	r0, r4
    c3d6:	4b09      	ldr	r3, [pc, #36]	; (c3fc <ValidateChMaskChCntl+0x30>)
    c3d8:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    c3da:	8863      	ldrh	r3, [r4, #2]
    c3dc:	2b00      	cmp	r3, #0
    c3de:	d104      	bne.n	c3ea <ValidateChMaskChCntl+0x1e>
    c3e0:	ab01      	add	r3, sp, #4
    c3e2:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    c3e4:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    c3e6:	2b07      	cmp	r3, #7
    c3e8:	d006      	beq.n	c3f8 <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    c3ea:	a901      	add	r1, sp, #4
    c3ec:	201b      	movs	r0, #27
    c3ee:	4b04      	ldr	r3, [pc, #16]	; (c400 <ValidateChMaskChCntl+0x34>)
    c3f0:	4798      	blx	r3
    c3f2:	2308      	movs	r3, #8
    c3f4:	4318      	orrs	r0, r3
    c3f6:	b2c0      	uxtb	r0, r0
}
    c3f8:	b002      	add	sp, #8
    c3fa:	bd10      	pop	{r4, pc}
    c3fc:	00019d1d 	.word	0x00019d1d
    c400:	00009ad5 	.word	0x00009ad5

0000c404 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    c404:	b5f0      	push	{r4, r5, r6, r7, lr}
    c406:	b083      	sub	sp, #12
    c408:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c40a:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    c40c:	2324      	movs	r3, #36	; 0x24
    c40e:	4a2e      	ldr	r2, [pc, #184]	; (c4c8 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c410:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c412:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    c414:	42a3      	cmp	r3, r4
    c416:	d205      	bcs.n	c424 <LORAREG_GetAttr_NewTxChConfigT2+0x20>
}
    c418:	b003      	add	sp, #12
    c41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    c41c:	2900      	cmp	r1, #0
    c41e:	d10f      	bne.n	c440 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
		currDr = DR2;
    c420:	2402      	movs	r4, #2
    c422:	e00d      	b.n	c440 <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c424:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c426:	232d      	movs	r3, #45	; 0x2d
    c428:	4a27      	ldr	r2, [pc, #156]	; (c4c8 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c42a:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c42c:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c42e:	429e      	cmp	r6, r3
    c430:	dcf2      	bgt.n	c418 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    c432:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    c434:	232e      	movs	r3, #46	; 0x2e
    c436:	5cd2      	ldrb	r2, [r2, r3]
    c438:	4b24      	ldr	r3, [pc, #144]	; (c4cc <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    c43a:	4113      	asrs	r3, r2
    c43c:	07db      	lsls	r3, r3, #31
    c43e:	d4ed      	bmi.n	c41c <LORAREG_GetAttr_NewTxChConfigT2+0x18>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    c440:	232a      	movs	r3, #42	; 0x2a
    c442:	4a21      	ldr	r2, [pc, #132]	; (c4c8 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c444:	5cd0      	ldrb	r0, [r2, r3]
    c446:	466b      	mov	r3, sp
    c448:	3307      	adds	r3, #7
    c44a:	0022      	movs	r2, r4
    c44c:	4f20      	ldr	r7, [pc, #128]	; (c4d0 <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    c44e:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    c450:	2808      	cmp	r0, #8
    c452:	d1e1      	bne.n	c418 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		RegParams.lastUsedChannelIndex = channelIndex;
    c454:	466b      	mov	r3, sp
    c456:	79df      	ldrb	r7, [r3, #7]
    c458:	4b1b      	ldr	r3, [pc, #108]	; (c4c8 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    c45a:	222f      	movs	r2, #47	; 0x2f
    c45c:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    c45e:	7a19      	ldrb	r1, [r3, #8]
    c460:	7a5a      	ldrb	r2, [r3, #9]
    c462:	0212      	lsls	r2, r2, #8
    c464:	430a      	orrs	r2, r1
    c466:	7a99      	ldrb	r1, [r3, #10]
    c468:	0409      	lsls	r1, r1, #16
    c46a:	430a      	orrs	r2, r1
    c46c:	7ad9      	ldrb	r1, [r3, #11]
    c46e:	0609      	lsls	r1, r1, #24
    c470:	4311      	orrs	r1, r2
    c472:	007a      	lsls	r2, r7, #1
    c474:	19d2      	adds	r2, r2, r7
    c476:	0092      	lsls	r2, r2, #2
    c478:	5c57      	ldrb	r7, [r2, r1]
    c47a:	1852      	adds	r2, r2, r1
    c47c:	7851      	ldrb	r1, [r2, #1]
    c47e:	0209      	lsls	r1, r1, #8
    c480:	430f      	orrs	r7, r1
    c482:	7891      	ldrb	r1, [r2, #2]
    c484:	0409      	lsls	r1, r1, #16
    c486:	4339      	orrs	r1, r7
    c488:	78d2      	ldrb	r2, [r2, #3]
    c48a:	0612      	lsls	r2, r2, #24
    c48c:	430a      	orrs	r2, r1
    c48e:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    c490:	0076      	lsls	r6, r6, #1
    c492:	2228      	movs	r2, #40	; 0x28
    c494:	5c9a      	ldrb	r2, [r3, r2]
    c496:	1b96      	subs	r6, r2, r6
    c498:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    c49a:	2200      	movs	r2, #0
    c49c:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    c49e:	7819      	ldrb	r1, [r3, #0]
    c4a0:	785a      	ldrb	r2, [r3, #1]
    c4a2:	0212      	lsls	r2, r2, #8
    c4a4:	4311      	orrs	r1, r2
    c4a6:	789a      	ldrb	r2, [r3, #2]
    c4a8:	0412      	lsls	r2, r2, #16
    c4aa:	430a      	orrs	r2, r1
    c4ac:	78db      	ldrb	r3, [r3, #3]
    c4ae:	061b      	lsls	r3, r3, #24
    c4b0:	4313      	orrs	r3, r2
    c4b2:	00e4      	lsls	r4, r4, #3
    c4b4:	191c      	adds	r4, r3, r4
    c4b6:	79e3      	ldrb	r3, [r4, #7]
    c4b8:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    c4ba:	79a3      	ldrb	r3, [r4, #6]
    c4bc:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    c4be:	7963      	ldrb	r3, [r4, #5]
    c4c0:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    c4c2:	2300      	movs	r3, #0
    c4c4:	71eb      	strb	r3, [r5, #7]
    c4c6:	e7a7      	b.n	c418 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
    c4c8:	200024d0 	.word	0x200024d0
    c4cc:	00007fe0 	.word	0x00007fe0
    c4d0:	0000b1b9 	.word	0x0000b1b9

0000c4d4 <setChannelIdStatus>:
{
    c4d4:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    c4d6:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    c4d8:	232a      	movs	r3, #42	; 0x2a
    c4da:	4a05      	ldr	r2, [pc, #20]	; (c4f0 <setChannelIdStatus+0x1c>)
    c4dc:	56d3      	ldrsb	r3, [r2, r3]
    c4de:	4298      	cmp	r0, r3
    c4e0:	db01      	blt.n	c4e6 <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    c4e2:	200a      	movs	r0, #10
}
    c4e4:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    c4e6:	7849      	ldrb	r1, [r1, #1]
    c4e8:	4b02      	ldr	r3, [pc, #8]	; (c4f4 <setChannelIdStatus+0x20>)
    c4ea:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c4ec:	2008      	movs	r0, #8
	return retVal;
    c4ee:	e7f9      	b.n	c4e4 <setChannelIdStatus+0x10>
    c4f0:	200024d0 	.word	0x200024d0
    c4f4:	0000a181 	.word	0x0000a181

0000c4f8 <ValidateDataRange>:
{
    c4f8:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    c4fa:	23a8      	movs	r3, #168	; 0xa8
    c4fc:	005b      	lsls	r3, r3, #1
    c4fe:	4a17      	ldr	r2, [pc, #92]	; (c55c <ValidateDataRange+0x64>)
    c500:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c502:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    c504:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c506:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c508:	42a3      	cmp	r3, r4
    c50a:	d213      	bcs.n	c534 <ValidateDataRange+0x3c>
}
    c50c:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c50e:	202a      	movs	r0, #42	; 0x2a
    c510:	4d12      	ldr	r5, [pc, #72]	; (c55c <ValidateDataRange+0x64>)
    c512:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c514:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c516:	42a9      	cmp	r1, r5
    c518:	daf8      	bge.n	c50c <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c51a:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    c51c:	4293      	cmp	r3, r2
    c51e:	d1f5      	bne.n	c50c <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    c520:	42a3      	cmp	r3, r4
    c522:	d005      	beq.n	c530 <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c524:	200a      	movs	r0, #10
	return retVal;
    c526:	e7f1      	b.n	c50c <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c528:	200a      	movs	r0, #10
    c52a:	e7ef      	b.n	c50c <ValidateDataRange+0x14>
    c52c:	200a      	movs	r0, #10
    c52e:	e7ed      	b.n	c50c <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c530:	2008      	movs	r0, #8
    c532:	e7eb      	b.n	c50c <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    c534:	200f      	movs	r0, #15
    c536:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    c538:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c53a:	4293      	cmp	r3, r2
    c53c:	d3e6      	bcc.n	c50c <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    c53e:	42a2      	cmp	r2, r4
    c540:	d8e4      	bhi.n	c50c <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    c542:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    c544:	2054      	movs	r0, #84	; 0x54
    c546:	30ff      	adds	r0, #255	; 0xff
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    c548:	4d04      	ldr	r5, [pc, #16]	; (c55c <ValidateDataRange+0x64>)
    c54a:	5c28      	ldrb	r0, [r5, r0]
    c54c:	4288      	cmp	r0, r1
    c54e:	d9de      	bls.n	c50e <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    c550:	4293      	cmp	r3, r2
    c552:	d0e9      	beq.n	c528 <ValidateDataRange+0x30>
    c554:	42a3      	cmp	r3, r4
    c556:	d0e9      	beq.n	c52c <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c558:	2008      	movs	r0, #8
    c55a:	e7d7      	b.n	c50c <ValidateDataRange+0x14>
    c55c:	200024d0 	.word	0x200024d0

0000c560 <setDataRange>:
{
    c560:	b570      	push	{r4, r5, r6, lr}
    c562:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    c564:	2012      	movs	r0, #18
    c566:	4b15      	ldr	r3, [pc, #84]	; (c5bc <setDataRange+0x5c>)
    c568:	4798      	blx	r3
    c56a:	0004      	movs	r4, r0
    c56c:	2808      	cmp	r0, #8
    c56e:	d002      	beq.n	c576 <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    c570:	240a      	movs	r4, #10
}
    c572:	0020      	movs	r0, r4
    c574:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c576:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    c578:	222a      	movs	r2, #42	; 0x2a
    c57a:	4911      	ldr	r1, [pc, #68]	; (c5c0 <setDataRange+0x60>)
    c57c:	568a      	ldrsb	r2, [r1, r2]
    c57e:	4293      	cmp	r3, r2
    c580:	db01      	blt.n	c586 <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    c582:	3402      	adds	r4, #2
    c584:	e7f5      	b.n	c572 <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    c586:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    c588:	4a0d      	ldr	r2, [pc, #52]	; (c5c0 <setDataRange+0x60>)
    c58a:	7911      	ldrb	r1, [r2, #4]
    c58c:	7950      	ldrb	r0, [r2, #5]
    c58e:	0200      	lsls	r0, r0, #8
    c590:	4308      	orrs	r0, r1
    c592:	7991      	ldrb	r1, [r2, #6]
    c594:	0409      	lsls	r1, r1, #16
    c596:	4308      	orrs	r0, r1
    c598:	79d1      	ldrb	r1, [r2, #7]
    c59a:	0609      	lsls	r1, r1, #24
    c59c:	4301      	orrs	r1, r0
    c59e:	005b      	lsls	r3, r3, #1
    c5a0:	185b      	adds	r3, r3, r1
    c5a2:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    c5a4:	4b07      	ldr	r3, [pc, #28]	; (c5c4 <setDataRange+0x64>)
    c5a6:	5cd3      	ldrb	r3, [r2, r3]
    c5a8:	4907      	ldr	r1, [pc, #28]	; (c5c8 <setDataRange+0x68>)
    c5aa:	5c50      	ldrb	r0, [r2, r1]
    c5ac:	0200      	lsls	r0, r0, #8
    c5ae:	4318      	orrs	r0, r3
    c5b0:	b2c1      	uxtb	r1, r0
    c5b2:	0a00      	lsrs	r0, r0, #8
    c5b4:	4b05      	ldr	r3, [pc, #20]	; (c5cc <setDataRange+0x6c>)
    c5b6:	4798      	blx	r3
	return retVal;
    c5b8:	e7db      	b.n	c572 <setDataRange+0x12>
    c5ba:	46c0      	nop			; (mov r8, r8)
    c5bc:	0000c4f9 	.word	0x0000c4f9
    c5c0:	200024d0 	.word	0x200024d0
    c5c4:	0000020e 	.word	0x0000020e
    c5c8:	0000020f 	.word	0x0000020f
    c5cc:	0000e071 	.word	0x0000e071

0000c5d0 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    c5d0:	b570      	push	{r4, r5, r6, lr}
    c5d2:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c5d4:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c5d6:	23a8      	movs	r3, #168	; 0xa8
    c5d8:	005b      	lsls	r3, r3, #1
    c5da:	4a0f      	ldr	r2, [pc, #60]	; (c618 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    c5dc:	5cd3      	ldrb	r3, [r2, r3]
    c5de:	42a3      	cmp	r3, r4
    c5e0:	d205      	bcs.n	c5ee <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c5e2:	200f      	movs	r0, #15
    c5e4:	4b0d      	ldr	r3, [pc, #52]	; (c61c <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    c5e6:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    c5e8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c5ea:	2808      	cmp	r0, #8
    c5ec:	d112      	bne.n	c614 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    c5ee:	490a      	ldr	r1, [pc, #40]	; (c618 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    c5f0:	780b      	ldrb	r3, [r1, #0]
    c5f2:	784a      	ldrb	r2, [r1, #1]
    c5f4:	0212      	lsls	r2, r2, #8
    c5f6:	431a      	orrs	r2, r3
    c5f8:	788b      	ldrb	r3, [r1, #2]
    c5fa:	041b      	lsls	r3, r3, #16
    c5fc:	431a      	orrs	r2, r3
    c5fe:	78cb      	ldrb	r3, [r1, #3]
    c600:	061b      	lsls	r3, r3, #24
    c602:	4313      	orrs	r3, r2
    c604:	00e4      	lsls	r4, r4, #3
    c606:	5ce2      	ldrb	r2, [r4, r3]
    c608:	18e4      	adds	r4, r4, r3
    c60a:	7863      	ldrb	r3, [r4, #1]
    c60c:	021b      	lsls	r3, r3, #8
    c60e:	4313      	orrs	r3, r2
    c610:	802b      	strh	r3, [r5, #0]
	return result;
    c612:	2308      	movs	r3, #8
}
    c614:	0018      	movs	r0, r3
    c616:	bd70      	pop	{r4, r5, r6, pc}
    c618:	200024d0 	.word	0x200024d0
    c61c:	00009965 	.word	0x00009965

0000c620 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    c620:	b570      	push	{r4, r5, r6, lr}
    c622:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c624:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c626:	23a8      	movs	r3, #168	; 0xa8
    c628:	005b      	lsls	r3, r3, #1
    c62a:	4a0e      	ldr	r2, [pc, #56]	; (c664 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    c62c:	5cd3      	ldrb	r3, [r2, r3]
    c62e:	42a3      	cmp	r3, r4
    c630:	d205      	bcs.n	c63e <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c632:	200f      	movs	r0, #15
    c634:	4b0c      	ldr	r3, [pc, #48]	; (c668 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    c636:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    c638:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c63a:	2808      	cmp	r0, #8
    c63c:	d110      	bne.n	c660 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    c63e:	4909      	ldr	r1, [pc, #36]	; (c664 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    c640:	780b      	ldrb	r3, [r1, #0]
    c642:	784a      	ldrb	r2, [r1, #1]
    c644:	0212      	lsls	r2, r2, #8
    c646:	431a      	orrs	r2, r3
    c648:	788b      	ldrb	r3, [r1, #2]
    c64a:	041b      	lsls	r3, r3, #16
    c64c:	431a      	orrs	r2, r3
    c64e:	78cb      	ldrb	r3, [r1, #3]
    c650:	061b      	lsls	r3, r3, #24
    c652:	4313      	orrs	r3, r2
    c654:	00e4      	lsls	r4, r4, #3
    c656:	18e3      	adds	r3, r4, r3
    c658:	791b      	ldrb	r3, [r3, #4]
    c65a:	b25b      	sxtb	r3, r3
    c65c:	702b      	strb	r3, [r5, #0]
	return result;
    c65e:	2308      	movs	r3, #8
}
    c660:	0018      	movs	r0, r3
    c662:	bd70      	pop	{r4, r5, r6, pc}
    c664:	200024d0 	.word	0x200024d0
    c668:	00009965 	.word	0x00009965

0000c66c <LORAREG_GetAttr_MaxPayloadT1>:
{
    c66c:	b570      	push	{r4, r5, r6, lr}
    c66e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c670:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c672:	23a8      	movs	r3, #168	; 0xa8
    c674:	005b      	lsls	r3, r3, #1
    c676:	4a0e      	ldr	r2, [pc, #56]	; (c6b0 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    c678:	5cd3      	ldrb	r3, [r2, r3]
    c67a:	42a3      	cmp	r3, r4
    c67c:	d205      	bcs.n	c68a <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c67e:	200f      	movs	r0, #15
    c680:	4b0c      	ldr	r3, [pc, #48]	; (c6b4 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    c682:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    c684:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c686:	2808      	cmp	r0, #8
    c688:	d10f      	bne.n	c6aa <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    c68a:	4909      	ldr	r1, [pc, #36]	; (c6b0 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    c68c:	780b      	ldrb	r3, [r1, #0]
    c68e:	784a      	ldrb	r2, [r1, #1]
    c690:	0212      	lsls	r2, r2, #8
    c692:	431a      	orrs	r2, r3
    c694:	788b      	ldrb	r3, [r1, #2]
    c696:	041b      	lsls	r3, r3, #16
    c698:	431a      	orrs	r2, r3
    c69a:	78cb      	ldrb	r3, [r1, #3]
    c69c:	061b      	lsls	r3, r3, #24
    c69e:	4313      	orrs	r3, r2
    c6a0:	00e4      	lsls	r4, r4, #3
    c6a2:	18e3      	adds	r3, r4, r3
    c6a4:	789b      	ldrb	r3, [r3, #2]
    c6a6:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c6a8:	2308      	movs	r3, #8
}
    c6aa:	0018      	movs	r0, r3
    c6ac:	bd70      	pop	{r4, r5, r6, pc}
    c6ae:	46c0      	nop			; (mov r8, r8)
    c6b0:	200024d0 	.word	0x200024d0
    c6b4:	00009965 	.word	0x00009965

0000c6b8 <LORAREG_GetAttr_ModulationAttrT1>:
{
    c6b8:	b570      	push	{r4, r5, r6, lr}
    c6ba:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c6bc:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c6be:	23a8      	movs	r3, #168	; 0xa8
    c6c0:	005b      	lsls	r3, r3, #1
    c6c2:	4a0e      	ldr	r2, [pc, #56]	; (c6fc <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    c6c4:	5cd3      	ldrb	r3, [r2, r3]
    c6c6:	42a3      	cmp	r3, r4
    c6c8:	d205      	bcs.n	c6d6 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c6ca:	200f      	movs	r0, #15
    c6cc:	4b0c      	ldr	r3, [pc, #48]	; (c700 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    c6ce:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    c6d0:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c6d2:	2808      	cmp	r0, #8
    c6d4:	d10f      	bne.n	c6f6 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    c6d6:	4909      	ldr	r1, [pc, #36]	; (c6fc <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    c6d8:	780b      	ldrb	r3, [r1, #0]
    c6da:	784a      	ldrb	r2, [r1, #1]
    c6dc:	0212      	lsls	r2, r2, #8
    c6de:	431a      	orrs	r2, r3
    c6e0:	788b      	ldrb	r3, [r1, #2]
    c6e2:	041b      	lsls	r3, r3, #16
    c6e4:	431a      	orrs	r2, r3
    c6e6:	78cb      	ldrb	r3, [r1, #3]
    c6e8:	061b      	lsls	r3, r3, #24
    c6ea:	4313      	orrs	r3, r2
    c6ec:	00e4      	lsls	r4, r4, #3
    c6ee:	18e3      	adds	r3, r4, r3
    c6f0:	79db      	ldrb	r3, [r3, #7]
    c6f2:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c6f4:	2308      	movs	r3, #8
}
    c6f6:	0018      	movs	r0, r3
    c6f8:	bd70      	pop	{r4, r5, r6, pc}
    c6fa:	46c0      	nop			; (mov r8, r8)
    c6fc:	200024d0 	.word	0x200024d0
    c700:	00009965 	.word	0x00009965

0000c704 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    c704:	b570      	push	{r4, r5, r6, lr}
    c706:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c708:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c70a:	23a8      	movs	r3, #168	; 0xa8
    c70c:	005b      	lsls	r3, r3, #1
    c70e:	4a0e      	ldr	r2, [pc, #56]	; (c748 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    c710:	5cd3      	ldrb	r3, [r2, r3]
    c712:	42a3      	cmp	r3, r4
    c714:	d205      	bcs.n	c722 <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c716:	200f      	movs	r0, #15
    c718:	4b0c      	ldr	r3, [pc, #48]	; (c74c <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    c71a:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    c71c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c71e:	2808      	cmp	r0, #8
    c720:	d10f      	bne.n	c742 <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    c722:	4909      	ldr	r1, [pc, #36]	; (c748 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    c724:	780b      	ldrb	r3, [r1, #0]
    c726:	784a      	ldrb	r2, [r1, #1]
    c728:	0212      	lsls	r2, r2, #8
    c72a:	431a      	orrs	r2, r3
    c72c:	788b      	ldrb	r3, [r1, #2]
    c72e:	041b      	lsls	r3, r3, #16
    c730:	431a      	orrs	r2, r3
    c732:	78cb      	ldrb	r3, [r1, #3]
    c734:	061b      	lsls	r3, r3, #24
    c736:	4313      	orrs	r3, r2
    c738:	00e4      	lsls	r4, r4, #3
    c73a:	18e3      	adds	r3, r4, r3
    c73c:	799b      	ldrb	r3, [r3, #6]
    c73e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c740:	2308      	movs	r3, #8
}
    c742:	0018      	movs	r0, r3
    c744:	bd70      	pop	{r4, r5, r6, pc}
    c746:	46c0      	nop			; (mov r8, r8)
    c748:	200024d0 	.word	0x200024d0
    c74c:	00009965 	.word	0x00009965

0000c750 <LORAREG_GetAttr_SpreadFactorT1>:
{
    c750:	b570      	push	{r4, r5, r6, lr}
    c752:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    c754:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c756:	23a8      	movs	r3, #168	; 0xa8
    c758:	005b      	lsls	r3, r3, #1
    c75a:	4a0e      	ldr	r2, [pc, #56]	; (c794 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    c75c:	5cd3      	ldrb	r3, [r2, r3]
    c75e:	42a3      	cmp	r3, r4
    c760:	d205      	bcs.n	c76e <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c762:	200f      	movs	r0, #15
    c764:	4b0c      	ldr	r3, [pc, #48]	; (c798 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    c766:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    c768:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    c76a:	2808      	cmp	r0, #8
    c76c:	d10f      	bne.n	c78e <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    c76e:	4909      	ldr	r1, [pc, #36]	; (c794 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    c770:	780b      	ldrb	r3, [r1, #0]
    c772:	784a      	ldrb	r2, [r1, #1]
    c774:	0212      	lsls	r2, r2, #8
    c776:	431a      	orrs	r2, r3
    c778:	788b      	ldrb	r3, [r1, #2]
    c77a:	041b      	lsls	r3, r3, #16
    c77c:	431a      	orrs	r2, r3
    c77e:	78cb      	ldrb	r3, [r1, #3]
    c780:	061b      	lsls	r3, r3, #24
    c782:	4313      	orrs	r3, r2
    c784:	00e4      	lsls	r4, r4, #3
    c786:	18e3      	adds	r3, r4, r3
    c788:	795b      	ldrb	r3, [r3, #5]
    c78a:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c78c:	2308      	movs	r3, #8
}
    c78e:	0018      	movs	r0, r3
    c790:	bd70      	pop	{r4, r5, r6, pc}
    c792:	46c0      	nop			; (mov r8, r8)
    c794:	200024d0 	.word	0x200024d0
    c798:	00009965 	.word	0x00009965

0000c79c <ValidateTxFreqT1>:
{
    c79c:	b530      	push	{r4, r5, lr}
    c79e:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    c7a0:	2208      	movs	r2, #8
    c7a2:	4668      	mov	r0, sp
    c7a4:	4b20      	ldr	r3, [pc, #128]	; (c828 <ValidateTxFreqT1+0x8c>)
    c7a6:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    c7a8:	466b      	mov	r3, sp
    c7aa:	7919      	ldrb	r1, [r3, #4]
    c7ac:	232a      	movs	r3, #42	; 0x2a
    c7ae:	4a1f      	ldr	r2, [pc, #124]	; (c82c <ValidateTxFreqT1+0x90>)
    c7b0:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    c7b2:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    c7b4:	4299      	cmp	r1, r3
    c7b6:	dd00      	ble.n	c7ba <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    c7b8:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c7ba:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    c7bc:	4d1b      	ldr	r5, [pc, #108]	; (c82c <ValidateTxFreqT1+0x90>)
    c7be:	2344      	movs	r3, #68	; 0x44
    c7c0:	33ff      	adds	r3, #255	; 0xff
    c7c2:	5ceb      	ldrb	r3, [r5, r3]
    c7c4:	22a2      	movs	r2, #162	; 0xa2
    c7c6:	0052      	lsls	r2, r2, #1
    c7c8:	5caa      	ldrb	r2, [r5, r2]
    c7ca:	0212      	lsls	r2, r2, #8
    c7cc:	431a      	orrs	r2, r3
    c7ce:	2346      	movs	r3, #70	; 0x46
    c7d0:	33ff      	adds	r3, #255	; 0xff
    c7d2:	5ceb      	ldrb	r3, [r5, r3]
    c7d4:	041b      	lsls	r3, r3, #16
    c7d6:	431a      	orrs	r2, r3
    c7d8:	23a3      	movs	r3, #163	; 0xa3
    c7da:	005b      	lsls	r3, r3, #1
    c7dc:	5ceb      	ldrb	r3, [r5, r3]
    c7de:	061b      	lsls	r3, r3, #24
    c7e0:	4313      	orrs	r3, r2
    c7e2:	4a13      	ldr	r2, [pc, #76]	; (c830 <ValidateTxFreqT1+0x94>)
    c7e4:	434a      	muls	r2, r1
    c7e6:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c7e8:	429c      	cmp	r4, r3
    c7ea:	d01b      	beq.n	c824 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    c7ec:	2354      	movs	r3, #84	; 0x54
    c7ee:	33ff      	adds	r3, #255	; 0xff
    c7f0:	5ceb      	ldrb	r3, [r5, r3]
    c7f2:	1ac9      	subs	r1, r1, r3
    c7f4:	4b0f      	ldr	r3, [pc, #60]	; (c834 <ValidateTxFreqT1+0x98>)
    c7f6:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    c7f8:	2348      	movs	r3, #72	; 0x48
    c7fa:	33ff      	adds	r3, #255	; 0xff
    c7fc:	5ceb      	ldrb	r3, [r5, r3]
    c7fe:	22a4      	movs	r2, #164	; 0xa4
    c800:	0052      	lsls	r2, r2, #1
    c802:	5caa      	ldrb	r2, [r5, r2]
    c804:	0212      	lsls	r2, r2, #8
    c806:	4313      	orrs	r3, r2
    c808:	224a      	movs	r2, #74	; 0x4a
    c80a:	32ff      	adds	r2, #255	; 0xff
    c80c:	5caa      	ldrb	r2, [r5, r2]
    c80e:	0412      	lsls	r2, r2, #16
    c810:	431a      	orrs	r2, r3
    c812:	23a5      	movs	r3, #165	; 0xa5
    c814:	005b      	lsls	r3, r3, #1
    c816:	5ceb      	ldrb	r3, [r5, r3]
    c818:	061b      	lsls	r3, r3, #24
    c81a:	4313      	orrs	r3, r2
    c81c:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    c81e:	429c      	cmp	r4, r3
    c820:	d000      	beq.n	c824 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    c822:	200a      	movs	r0, #10
}
    c824:	b003      	add	sp, #12
    c826:	bd30      	pop	{r4, r5, pc}
    c828:	00019d1d 	.word	0x00019d1d
    c82c:	200024d0 	.word	0x200024d0
    c830:	00030d40 	.word	0x00030d40
    c834:	00186a00 	.word	0x00186a00

0000c838 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    c838:	b5f0      	push	{r4, r5, r6, r7, lr}
    c83a:	46ce      	mov	lr, r9
    c83c:	4647      	mov	r7, r8
    c83e:	b580      	push	{r7, lr}
    c840:	b083      	sub	sp, #12
    c842:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c844:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c846:	23a8      	movs	r3, #168	; 0xa8
    c848:	005b      	lsls	r3, r3, #1
    c84a:	4a63      	ldr	r2, [pc, #396]	; (c9d8 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c84c:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c84e:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    c850:	42ab      	cmp	r3, r5
    c852:	d300      	bcc.n	c856 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
    c854:	e09a      	b.n	c98c <LORAREG_GetAttr_NewTxChConfigT1+0x154>
}
    c856:	0020      	movs	r0, r4
    c858:	b003      	add	sp, #12
    c85a:	bc0c      	pop	{r2, r3}
    c85c:	4690      	mov	r8, r2
    c85e:	4699      	mov	r9, r3
    c860:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    c862:	4b5d      	ldr	r3, [pc, #372]	; (c9d8 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c864:	4699      	mov	r9, r3
    c866:	232a      	movs	r3, #42	; 0x2a
    c868:	464a      	mov	r2, r9
    c86a:	5cd0      	ldrb	r0, [r2, r3]
    c86c:	466b      	mov	r3, sp
    c86e:	3307      	adds	r3, #7
    c870:	002a      	movs	r2, r5
    c872:	2101      	movs	r1, #1
    c874:	4c59      	ldr	r4, [pc, #356]	; (c9dc <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    c876:	47a0      	blx	r4
    c878:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    c87a:	464b      	mov	r3, r9
    c87c:	781b      	ldrb	r3, [r3, #0]
    c87e:	464a      	mov	r2, r9
    c880:	7852      	ldrb	r2, [r2, #1]
    c882:	0212      	lsls	r2, r2, #8
    c884:	431a      	orrs	r2, r3
    c886:	464b      	mov	r3, r9
    c888:	789b      	ldrb	r3, [r3, #2]
    c88a:	041b      	lsls	r3, r3, #16
    c88c:	431a      	orrs	r2, r3
    c88e:	464b      	mov	r3, r9
    c890:	78db      	ldrb	r3, [r3, #3]
    c892:	061b      	lsls	r3, r3, #24
    c894:	4313      	orrs	r3, r2
    c896:	00ed      	lsls	r5, r5, #3
    c898:	18eb      	adds	r3, r5, r3
    c89a:	795b      	ldrb	r3, [r3, #5]
    c89c:	72f3      	strb	r3, [r6, #11]
	if (result == LORAWAN_SUCCESS)
    c89e:	2c08      	cmp	r4, #8
    c8a0:	d1d9      	bne.n	c856 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    c8a2:	007f      	lsls	r7, r7, #1
    c8a4:	4643      	mov	r3, r8
    c8a6:	1bdb      	subs	r3, r3, r7
    c8a8:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    c8aa:	466a      	mov	r2, sp
    c8ac:	3207      	adds	r2, #7
    c8ae:	7812      	ldrb	r2, [r2, #0]
    c8b0:	2154      	movs	r1, #84	; 0x54
    c8b2:	31ff      	adds	r1, #255	; 0xff
    c8b4:	4848      	ldr	r0, [pc, #288]	; (c9d8 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c8b6:	5c41      	ldrb	r1, [r0, r1]
    c8b8:	4291      	cmp	r1, r2
    c8ba:	d93c      	bls.n	c936 <LORAREG_GetAttr_NewTxChConfigT1+0xfe>
			radioConfig->bandwidth = BW_125KHZ;
    c8bc:	2107      	movs	r1, #7
    c8be:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    c8c0:	2144      	movs	r1, #68	; 0x44
    c8c2:	31ff      	adds	r1, #255	; 0xff
    c8c4:	5c41      	ldrb	r1, [r0, r1]
    c8c6:	25a2      	movs	r5, #162	; 0xa2
    c8c8:	006d      	lsls	r5, r5, #1
    c8ca:	5d45      	ldrb	r5, [r0, r5]
    c8cc:	022d      	lsls	r5, r5, #8
    c8ce:	430d      	orrs	r5, r1
    c8d0:	2146      	movs	r1, #70	; 0x46
    c8d2:	31ff      	adds	r1, #255	; 0xff
    c8d4:	5c41      	ldrb	r1, [r0, r1]
    c8d6:	0409      	lsls	r1, r1, #16
    c8d8:	430d      	orrs	r5, r1
    c8da:	21a3      	movs	r1, #163	; 0xa3
    c8dc:	0049      	lsls	r1, r1, #1
    c8de:	5c41      	ldrb	r1, [r0, r1]
    c8e0:	0609      	lsls	r1, r1, #24
    c8e2:	4329      	orrs	r1, r5
    c8e4:	4d3e      	ldr	r5, [pc, #248]	; (c9e0 <LORAREG_GetAttr_NewTxChConfigT1+0x1a8>)
    c8e6:	436a      	muls	r2, r5
    c8e8:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    c8ea:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    c8ec:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    c8ee:	232e      	movs	r3, #46	; 0x2e
    c8f0:	5cc3      	ldrb	r3, [r0, r3]
    c8f2:	2b02      	cmp	r3, #2
    c8f4:	d01b      	beq.n	c92e <LORAREG_GetAttr_NewTxChConfigT1+0xf6>
		radioConfig->freq_hop_period = DISABLED;
    c8f6:	2300      	movs	r3, #0
    c8f8:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    c8fa:	3301      	adds	r3, #1
    c8fc:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    c8fe:	466b      	mov	r3, sp
    c900:	79d9      	ldrb	r1, [r3, #7]
    c902:	232f      	movs	r3, #47	; 0x2f
    c904:	4a34      	ldr	r2, [pc, #208]	; (c9d8 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c906:	54d1      	strb	r1, [r2, r3]
    c908:	e7a5      	b.n	c856 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
				radioConfig->sf = SF_10;
    c90a:	3308      	adds	r3, #8
    c90c:	72f3      	strb	r3, [r6, #11]
    c90e:	e001      	b.n	c914 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
			radioConfig->sf = SF_8;
    c910:	2308      	movs	r3, #8
    c912:	72f3      	strb	r3, [r6, #11]
		PDS_STORE(RegParams.regParamItems.lastUsedSB);
    c914:	4b30      	ldr	r3, [pc, #192]	; (c9d8 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c916:	2283      	movs	r2, #131	; 0x83
    c918:	0092      	lsls	r2, r2, #2
    c91a:	5c9a      	ldrb	r2, [r3, r2]
    c91c:	4931      	ldr	r1, [pc, #196]	; (c9e4 <LORAREG_GetAttr_NewTxChConfigT1+0x1ac>)
    c91e:	5c58      	ldrb	r0, [r3, r1]
    c920:	0200      	lsls	r0, r0, #8
    c922:	4310      	orrs	r0, r2
    c924:	b2c1      	uxtb	r1, r0
    c926:	0a00      	lsrs	r0, r0, #8
    c928:	4b2f      	ldr	r3, [pc, #188]	; (c9e8 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    c92a:	4798      	blx	r3
    c92c:	e7b7      	b.n	c89e <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    			radioConfig->ecrConfig.override = true;
    c92e:	3b01      	subs	r3, #1
    c930:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    c932:	71b3      	strb	r3, [r6, #6]
    c934:	e7df      	b.n	c8f6 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			radioConfig->bandwidth = BW_500KHZ;
    c936:	2109      	movs	r1, #9
    c938:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    c93a:	4927      	ldr	r1, [pc, #156]	; (c9d8 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c93c:	2054      	movs	r0, #84	; 0x54
    c93e:	30ff      	adds	r0, #255	; 0xff
    c940:	5c08      	ldrb	r0, [r1, r0]
    c942:	1a12      	subs	r2, r2, r0
    c944:	4829      	ldr	r0, [pc, #164]	; (c9ec <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    c946:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    c948:	2048      	movs	r0, #72	; 0x48
    c94a:	30ff      	adds	r0, #255	; 0xff
    c94c:	5c08      	ldrb	r0, [r1, r0]
    c94e:	25a4      	movs	r5, #164	; 0xa4
    c950:	006d      	lsls	r5, r5, #1
    c952:	5d4d      	ldrb	r5, [r1, r5]
    c954:	022d      	lsls	r5, r5, #8
    c956:	4305      	orrs	r5, r0
    c958:	204a      	movs	r0, #74	; 0x4a
    c95a:	30ff      	adds	r0, #255	; 0xff
    c95c:	5c08      	ldrb	r0, [r1, r0]
    c95e:	0400      	lsls	r0, r0, #16
    c960:	4305      	orrs	r5, r0
    c962:	20a5      	movs	r0, #165	; 0xa5
    c964:	0040      	lsls	r0, r0, #1
    c966:	5c08      	ldrb	r0, [r1, r0]
    c968:	0600      	lsls	r0, r0, #24
    c96a:	4328      	orrs	r0, r5
    c96c:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    c96e:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    c970:	222e      	movs	r2, #46	; 0x2e
    c972:	5c8a      	ldrb	r2, [r1, r2]
    c974:	2a02      	cmp	r2, #2
    c976:	d003      	beq.n	c980 <LORAREG_GetAttr_NewTxChConfigT1+0x148>
			if (txPower <= 26)
    c978:	2b1a      	cmp	r3, #26
    c97a:	d804      	bhi.n	c986 <LORAREG_GetAttr_NewTxChConfigT1+0x14e>
				radioConfig->txPower = txPower;
    c97c:	7233      	strb	r3, [r6, #8]
    c97e:	e7ba      	b.n	c8f6 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			    radioConfig->ecrConfig.override = false;
    c980:	2200      	movs	r2, #0
    c982:	71f2      	strb	r2, [r6, #7]
    c984:	e7f8      	b.n	c978 <LORAREG_GetAttr_NewTxChConfigT1+0x140>
				radioConfig->txPower = 26;
    c986:	231a      	movs	r3, #26
    c988:	7233      	strb	r3, [r6, #8]
    c98a:	e7b4      	b.n	c8f6 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    c98c:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c98e:	232d      	movs	r3, #45	; 0x2d
    c990:	4a11      	ldr	r2, [pc, #68]	; (c9d8 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c992:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    c994:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    c996:	429f      	cmp	r7, r3
    c998:	dd00      	ble.n	c99c <LORAREG_GetAttr_NewTxChConfigT1+0x164>
    c99a:	e75c      	b.n	c856 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    c99c:	2328      	movs	r3, #40	; 0x28
    c99e:	5cd3      	ldrb	r3, [r2, r3]
    c9a0:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    c9a2:	780b      	ldrb	r3, [r1, #0]
    c9a4:	2b00      	cmp	r3, #0
    c9a6:	d000      	beq.n	c9aa <LORAREG_GetAttr_NewTxChConfigT1+0x172>
    c9a8:	e75b      	b.n	c862 <LORAREG_GetAttr_NewTxChConfigT1+0x2a>
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    c9aa:	466b      	mov	r3, sp
    c9ac:	1ddd      	adds	r5, r3, #7
    c9ae:	2354      	movs	r3, #84	; 0x54
    c9b0:	33ff      	adds	r3, #255	; 0xff
    c9b2:	4a09      	ldr	r2, [pc, #36]	; (c9d8 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c9b4:	5cd0      	ldrb	r0, [r2, r3]
    c9b6:	002b      	movs	r3, r5
    c9b8:	2200      	movs	r2, #0
    c9ba:	2100      	movs	r1, #0
    c9bc:	4c07      	ldr	r4, [pc, #28]	; (c9dc <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    c9be:	47a0      	blx	r4
    c9c0:	0004      	movs	r4, r0
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    c9c2:	782b      	ldrb	r3, [r5, #0]
    c9c4:	2b3f      	cmp	r3, #63	; 0x3f
    c9c6:	d8a3      	bhi.n	c910 <LORAREG_GetAttr_NewTxChConfigT1+0xd8>
			if( RegParams.band == ISM_NA915)
    c9c8:	232e      	movs	r3, #46	; 0x2e
    c9ca:	4a03      	ldr	r2, [pc, #12]	; (c9d8 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    c9cc:	5cd3      	ldrb	r3, [r2, r3]
    c9ce:	2b02      	cmp	r3, #2
    c9d0:	d09b      	beq.n	c90a <LORAREG_GetAttr_NewTxChConfigT1+0xd2>
				radioConfig->sf = SF_12;
    c9d2:	230c      	movs	r3, #12
    c9d4:	72f3      	strb	r3, [r6, #11]
    c9d6:	e79d      	b.n	c914 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
    c9d8:	200024d0 	.word	0x200024d0
    c9dc:	00009e59 	.word	0x00009e59
    c9e0:	00030d40 	.word	0x00030d40
    c9e4:	0000020d 	.word	0x0000020d
    c9e8:	0000e071 	.word	0x0000e071
    c9ec:	00186a00 	.word	0x00186a00

0000c9f0 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    c9f0:	4b2b      	ldr	r3, [pc, #172]	; (caa0 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    c9f2:	4a2c      	ldr	r2, [pc, #176]	; (caa4 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    c9f4:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    c9f6:	4a2c      	ldr	r2, [pc, #176]	; (caa8 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    c9f8:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    c9fa:	4a2c      	ldr	r2, [pc, #176]	; (caac <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    c9fc:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    c9fe:	4a2c      	ldr	r2, [pc, #176]	; (cab0 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    ca00:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ca02:	4a2c      	ldr	r2, [pc, #176]	; (cab4 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    ca04:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ca06:	4a2c      	ldr	r2, [pc, #176]	; (cab8 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    ca08:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ca0a:	4a2c      	ldr	r2, [pc, #176]	; (cabc <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    ca0c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ca0e:	4a2c      	ldr	r2, [pc, #176]	; (cac0 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    ca10:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ca12:	4a2c      	ldr	r2, [pc, #176]	; (cac4 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    ca14:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ca16:	4a2c      	ldr	r2, [pc, #176]	; (cac8 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    ca18:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ca1a:	4a2c      	ldr	r2, [pc, #176]	; (cacc <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    ca1c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    ca1e:	4a2c      	ldr	r2, [pc, #176]	; (cad0 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    ca20:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ca22:	4a2c      	ldr	r2, [pc, #176]	; (cad4 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    ca24:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ca26:	4a2c      	ldr	r2, [pc, #176]	; (cad8 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    ca28:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    ca2a:	4a2c      	ldr	r2, [pc, #176]	; (cadc <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    ca2c:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ca2e:	492c      	ldr	r1, [pc, #176]	; (cae0 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    ca30:	2280      	movs	r2, #128	; 0x80
    ca32:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    ca34:	4a2b      	ldr	r2, [pc, #172]	; (cae4 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    ca36:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    ca38:	492b      	ldr	r1, [pc, #172]	; (cae8 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    ca3a:	228c      	movs	r2, #140	; 0x8c
    ca3c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    ca3e:	492b      	ldr	r1, [pc, #172]	; (caec <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    ca40:	3204      	adds	r2, #4
    ca42:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    ca44:	492a      	ldr	r1, [pc, #168]	; (caf0 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    ca46:	3204      	adds	r2, #4
    ca48:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    ca4a:	492a      	ldr	r1, [pc, #168]	; (caf4 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    ca4c:	3204      	adds	r2, #4
    ca4e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ca50:	4929      	ldr	r1, [pc, #164]	; (caf8 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    ca52:	3204      	adds	r2, #4
    ca54:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ca56:	4929      	ldr	r1, [pc, #164]	; (cafc <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    ca58:	3204      	adds	r2, #4
    ca5a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ca5c:	4928      	ldr	r1, [pc, #160]	; (cb00 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    ca5e:	3204      	adds	r2, #4
    ca60:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ca62:	4928      	ldr	r1, [pc, #160]	; (cb04 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    ca64:	3204      	adds	r2, #4
    ca66:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    ca68:	4927      	ldr	r1, [pc, #156]	; (cb08 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    ca6a:	3204      	adds	r2, #4
    ca6c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ca6e:	4927      	ldr	r1, [pc, #156]	; (cb0c <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    ca70:	3204      	adds	r2, #4
    ca72:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ca74:	4926      	ldr	r1, [pc, #152]	; (cb10 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    ca76:	3204      	adds	r2, #4
    ca78:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    ca7a:	4926      	ldr	r1, [pc, #152]	; (cb14 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    ca7c:	3204      	adds	r2, #4
    ca7e:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    ca80:	4925      	ldr	r1, [pc, #148]	; (cb18 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    ca82:	3204      	adds	r2, #4
    ca84:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    ca86:	4925      	ldr	r1, [pc, #148]	; (cb1c <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    ca88:	3204      	adds	r2, #4
    ca8a:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    ca8c:	4924      	ldr	r1, [pc, #144]	; (cb20 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    ca8e:	3204      	adds	r2, #4
    ca90:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    ca92:	4924      	ldr	r1, [pc, #144]	; (cb24 <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    ca94:	3214      	adds	r2, #20
    ca96:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ca98:	4923      	ldr	r1, [pc, #140]	; (cb28 <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    ca9a:	3204      	adds	r2, #4
    ca9c:	5099      	str	r1, [r3, r2]
}
    ca9e:	4770      	bx	lr
    caa0:	20000c7c 	.word	0x20000c7c
    caa4:	0000988d 	.word	0x0000988d
    caa8:	0000c5d1 	.word	0x0000c5d1
    caac:	0000c621 	.word	0x0000c621
    cab0:	0000c66d 	.word	0x0000c66d
    cab4:	000096d5 	.word	0x000096d5
    cab8:	000096e5 	.word	0x000096e5
    cabc:	00009701 	.word	0x00009701
    cac0:	00009711 	.word	0x00009711
    cac4:	0000a781 	.word	0x0000a781
    cac8:	00009721 	.word	0x00009721
    cacc:	00009731 	.word	0x00009731
    cad0:	0000a655 	.word	0x0000a655
    cad4:	00009a41 	.word	0x00009a41
    cad8:	00009781 	.word	0x00009781
    cadc:	0000a5a9 	.word	0x0000a5a9
    cae0:	0000a509 	.word	0x0000a509
    cae4:	000097cd 	.word	0x000097cd
    cae8:	0000c6b9 	.word	0x0000c6b9
    caec:	0000c705 	.word	0x0000c705
    caf0:	0000c751 	.word	0x0000c751
    caf4:	000097d7 	.word	0x000097d7
    caf8:	000097e1 	.word	0x000097e1
    cafc:	000097eb 	.word	0x000097eb
    cb00:	000097f5 	.word	0x000097f5
    cb04:	00009801 	.word	0x00009801
    cb08:	0000980d 	.word	0x0000980d
    cb0c:	00009817 	.word	0x00009817
    cb10:	0000981f 	.word	0x0000981f
    cb14:	00009827 	.word	0x00009827
    cb18:	0000c839 	.word	0x0000c839
    cb1c:	0000a065 	.word	0x0000a065
    cb20:	00009851 	.word	0x00009851
    cb24:	00009831 	.word	0x00009831
    cb28:	00009841 	.word	0x00009841

0000cb2c <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    cb2c:	4b2d      	ldr	r3, [pc, #180]	; (cbe4 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    cb2e:	4a2e      	ldr	r2, [pc, #184]	; (cbe8 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    cb30:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cb32:	4a2e      	ldr	r2, [pc, #184]	; (cbec <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    cb34:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cb36:	4a2e      	ldr	r2, [pc, #184]	; (cbf0 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    cb38:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    cb3a:	4a2e      	ldr	r2, [pc, #184]	; (cbf4 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    cb3c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cb3e:	4a2e      	ldr	r2, [pc, #184]	; (cbf8 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    cb40:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cb42:	4a2e      	ldr	r2, [pc, #184]	; (cbfc <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    cb44:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cb46:	4a2e      	ldr	r2, [pc, #184]	; (cc00 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    cb48:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cb4a:	4a2e      	ldr	r2, [pc, #184]	; (cc04 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    cb4c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cb4e:	4a2e      	ldr	r2, [pc, #184]	; (cc08 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    cb50:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cb52:	4a2e      	ldr	r2, [pc, #184]	; (cc0c <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    cb54:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cb56:	4a2e      	ldr	r2, [pc, #184]	; (cc10 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    cb58:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cb5a:	4a2e      	ldr	r2, [pc, #184]	; (cc14 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    cb5c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cb5e:	4a2e      	ldr	r2, [pc, #184]	; (cc18 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    cb60:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cb62:	4a2e      	ldr	r2, [pc, #184]	; (cc1c <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    cb64:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    cb66:	4a2e      	ldr	r2, [pc, #184]	; (cc20 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    cb68:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cb6a:	492e      	ldr	r1, [pc, #184]	; (cc24 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    cb6c:	2280      	movs	r2, #128	; 0x80
    cb6e:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    cb70:	4a2d      	ldr	r2, [pc, #180]	; (cc28 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    cb72:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cb74:	492d      	ldr	r1, [pc, #180]	; (cc2c <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    cb76:	228c      	movs	r2, #140	; 0x8c
    cb78:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cb7a:	492d      	ldr	r1, [pc, #180]	; (cc30 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    cb7c:	3204      	adds	r2, #4
    cb7e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cb80:	492c      	ldr	r1, [pc, #176]	; (cc34 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    cb82:	3204      	adds	r2, #4
    cb84:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    cb86:	492c      	ldr	r1, [pc, #176]	; (cc38 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    cb88:	3204      	adds	r2, #4
    cb8a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cb8c:	492b      	ldr	r1, [pc, #172]	; (cc3c <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    cb8e:	3204      	adds	r2, #4
    cb90:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cb92:	492b      	ldr	r1, [pc, #172]	; (cc40 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    cb94:	3204      	adds	r2, #4
    cb96:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cb98:	492a      	ldr	r1, [pc, #168]	; (cc44 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    cb9a:	3204      	adds	r2, #4
    cb9c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cb9e:	492a      	ldr	r1, [pc, #168]	; (cc48 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    cba0:	3204      	adds	r2, #4
    cba2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cba4:	4929      	ldr	r1, [pc, #164]	; (cc4c <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    cba6:	3204      	adds	r2, #4
    cba8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cbaa:	4929      	ldr	r1, [pc, #164]	; (cc50 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    cbac:	3204      	adds	r2, #4
    cbae:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cbb0:	4928      	ldr	r1, [pc, #160]	; (cc54 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    cbb2:	3204      	adds	r2, #4
    cbb4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cbb6:	4928      	ldr	r1, [pc, #160]	; (cc58 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    cbb8:	3204      	adds	r2, #4
    cbba:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    cbbc:	4927      	ldr	r1, [pc, #156]	; (cc5c <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    cbbe:	3204      	adds	r2, #4
    cbc0:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cbc2:	4927      	ldr	r1, [pc, #156]	; (cc60 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    cbc4:	3204      	adds	r2, #4
    cbc6:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cbc8:	4926      	ldr	r1, [pc, #152]	; (cc64 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    cbca:	3204      	adds	r2, #4
    cbcc:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cbce:	4926      	ldr	r1, [pc, #152]	; (cc68 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    cbd0:	320c      	adds	r2, #12
    cbd2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cbd4:	4925      	ldr	r1, [pc, #148]	; (cc6c <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    cbd6:	3208      	adds	r2, #8
    cbd8:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cbda:	4925      	ldr	r1, [pc, #148]	; (cc70 <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    cbdc:	3204      	adds	r2, #4
    cbde:	5099      	str	r1, [r3, r2]
}
    cbe0:	4770      	bx	lr
    cbe2:	46c0      	nop			; (mov r8, r8)
    cbe4:	20000c7c 	.word	0x20000c7c
    cbe8:	0000aadd 	.word	0x0000aadd
    cbec:	0000c271 	.word	0x0000c271
    cbf0:	0000c2b1 	.word	0x0000c2b1
    cbf4:	0000c2ed 	.word	0x0000c2ed
    cbf8:	000096d5 	.word	0x000096d5
    cbfc:	000096e5 	.word	0x000096e5
    cc00:	00009701 	.word	0x00009701
    cc04:	00009711 	.word	0x00009711
    cc08:	0000a781 	.word	0x0000a781
    cc0c:	00009721 	.word	0x00009721
    cc10:	00009731 	.word	0x00009731
    cc14:	0000a9e1 	.word	0x0000a9e1
    cc18:	00009a41 	.word	0x00009a41
    cc1c:	00009781 	.word	0x00009781
    cc20:	0000a975 	.word	0x0000a975
    cc24:	0000a509 	.word	0x0000a509
    cc28:	000099f9 	.word	0x000099f9
    cc2c:	0000c325 	.word	0x0000c325
    cc30:	0000c35d 	.word	0x0000c35d
    cc34:	0000c395 	.word	0x0000c395
    cc38:	0000a7e1 	.word	0x0000a7e1
    cc3c:	000097e1 	.word	0x000097e1
    cc40:	000097eb 	.word	0x000097eb
    cc44:	000097f5 	.word	0x000097f5
    cc48:	00009801 	.word	0x00009801
    cc4c:	0000980d 	.word	0x0000980d
    cc50:	00009817 	.word	0x00009817
    cc54:	0000981f 	.word	0x0000981f
    cc58:	00009827 	.word	0x00009827
    cc5c:	0000c405 	.word	0x0000c405
    cc60:	0000b371 	.word	0x0000b371
    cc64:	00009851 	.word	0x00009851
    cc68:	0000a799 	.word	0x0000a799
    cc6c:	00009831 	.word	0x00009831
    cc70:	00009841 	.word	0x00009841

0000cc74 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    cc74:	4b2d      	ldr	r3, [pc, #180]	; (cd2c <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    cc76:	4a2e      	ldr	r2, [pc, #184]	; (cd30 <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    cc78:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cc7a:	4a2e      	ldr	r2, [pc, #184]	; (cd34 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    cc7c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cc7e:	4a2e      	ldr	r2, [pc, #184]	; (cd38 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    cc80:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    cc82:	4a2e      	ldr	r2, [pc, #184]	; (cd3c <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    cc84:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cc86:	4a2e      	ldr	r2, [pc, #184]	; (cd40 <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    cc88:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cc8a:	4a2e      	ldr	r2, [pc, #184]	; (cd44 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    cc8c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cc8e:	4a2e      	ldr	r2, [pc, #184]	; (cd48 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    cc90:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cc92:	4a2e      	ldr	r2, [pc, #184]	; (cd4c <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    cc94:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cc96:	4a2e      	ldr	r2, [pc, #184]	; (cd50 <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    cc98:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cc9a:	4a2e      	ldr	r2, [pc, #184]	; (cd54 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    cc9c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cc9e:	4a2e      	ldr	r2, [pc, #184]	; (cd58 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    cca0:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cca2:	4a2e      	ldr	r2, [pc, #184]	; (cd5c <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    cca4:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cca6:	4a2e      	ldr	r2, [pc, #184]	; (cd60 <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    cca8:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ccaa:	4a2e      	ldr	r2, [pc, #184]	; (cd64 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    ccac:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    ccae:	4a2e      	ldr	r2, [pc, #184]	; (cd68 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    ccb0:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    ccb2:	492e      	ldr	r1, [pc, #184]	; (cd6c <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    ccb4:	2280      	movs	r2, #128	; 0x80
    ccb6:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    ccb8:	492d      	ldr	r1, [pc, #180]	; (cd70 <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    ccba:	320c      	adds	r2, #12
    ccbc:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    ccbe:	492d      	ldr	r1, [pc, #180]	; (cd74 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    ccc0:	3204      	adds	r2, #4
    ccc2:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    ccc4:	492c      	ldr	r1, [pc, #176]	; (cd78 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    ccc6:	3204      	adds	r2, #4
    ccc8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ccca:	492c      	ldr	r1, [pc, #176]	; (cd7c <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    cccc:	3208      	adds	r2, #8
    ccce:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ccd0:	492b      	ldr	r1, [pc, #172]	; (cd80 <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    ccd2:	3204      	adds	r2, #4
    ccd4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ccd6:	492b      	ldr	r1, [pc, #172]	; (cd84 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    ccd8:	3204      	adds	r2, #4
    ccda:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ccdc:	492a      	ldr	r1, [pc, #168]	; (cd88 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    ccde:	3204      	adds	r2, #4
    cce0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cce2:	492a      	ldr	r1, [pc, #168]	; (cd8c <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    cce4:	3204      	adds	r2, #4
    cce6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cce8:	4929      	ldr	r1, [pc, #164]	; (cd90 <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    ccea:	3204      	adds	r2, #4
    ccec:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ccee:	4929      	ldr	r1, [pc, #164]	; (cd94 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    ccf0:	3204      	adds	r2, #4
    ccf2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    ccf4:	4928      	ldr	r1, [pc, #160]	; (cd98 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    ccf6:	3204      	adds	r2, #4
    ccf8:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    ccfa:	4928      	ldr	r1, [pc, #160]	; (cd9c <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    ccfc:	3204      	adds	r2, #4
    ccfe:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cd00:	4927      	ldr	r1, [pc, #156]	; (cda0 <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    cd02:	3204      	adds	r2, #4
    cd04:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cd06:	4927      	ldr	r1, [pc, #156]	; (cda4 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    cd08:	3204      	adds	r2, #4
    cd0a:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cd0c:	4926      	ldr	r1, [pc, #152]	; (cda8 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    cd0e:	320c      	adds	r2, #12
    cd10:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cd12:	4926      	ldr	r1, [pc, #152]	; (cdac <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    cd14:	3208      	adds	r2, #8
    cd16:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cd18:	4925      	ldr	r1, [pc, #148]	; (cdb0 <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    cd1a:	3204      	adds	r2, #4
    cd1c:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    cd1e:	4a25      	ldr	r2, [pc, #148]	; (cdb4 <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    cd20:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    cd22:	4925      	ldr	r1, [pc, #148]	; (cdb8 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    cd24:	2298      	movs	r2, #152	; 0x98
    cd26:	5099      	str	r1, [r3, r2]
}
    cd28:	4770      	bx	lr
    cd2a:	46c0      	nop			; (mov r8, r8)
    cd2c:	20000c7c 	.word	0x20000c7c
    cd30:	0000ac19 	.word	0x0000ac19
    cd34:	0000c271 	.word	0x0000c271
    cd38:	0000c2b1 	.word	0x0000c2b1
    cd3c:	0000c20d 	.word	0x0000c20d
    cd40:	000096d5 	.word	0x000096d5
    cd44:	000096e5 	.word	0x000096e5
    cd48:	00009701 	.word	0x00009701
    cd4c:	00009711 	.word	0x00009711
    cd50:	0000a781 	.word	0x0000a781
    cd54:	00009721 	.word	0x00009721
    cd58:	00009731 	.word	0x00009731
    cd5c:	0000a9e1 	.word	0x0000a9e1
    cd60:	00009a41 	.word	0x00009a41
    cd64:	00009781 	.word	0x00009781
    cd68:	0000ab25 	.word	0x0000ab25
    cd6c:	0000a509 	.word	0x0000a509
    cd70:	0000c325 	.word	0x0000c325
    cd74:	0000c35d 	.word	0x0000c35d
    cd78:	0000c395 	.word	0x0000c395
    cd7c:	000097e1 	.word	0x000097e1
    cd80:	000097eb 	.word	0x000097eb
    cd84:	000097f5 	.word	0x000097f5
    cd88:	00009801 	.word	0x00009801
    cd8c:	0000980d 	.word	0x0000980d
    cd90:	00009817 	.word	0x00009817
    cd94:	0000981f 	.word	0x0000981f
    cd98:	00009827 	.word	0x00009827
    cd9c:	0000c405 	.word	0x0000c405
    cda0:	0000b371 	.word	0x0000b371
    cda4:	00009851 	.word	0x00009851
    cda8:	0000a799 	.word	0x0000a799
    cdac:	00009831 	.word	0x00009831
    cdb0:	00009841 	.word	0x00009841
    cdb4:	000099f9 	.word	0x000099f9
    cdb8:	0000a7e1 	.word	0x0000a7e1

0000cdbc <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    cdbc:	4b2b      	ldr	r3, [pc, #172]	; (ce6c <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    cdbe:	4a2c      	ldr	r2, [pc, #176]	; (ce70 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    cdc0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    cdc2:	4a2c      	ldr	r2, [pc, #176]	; (ce74 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    cdc4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    cdc6:	4a2c      	ldr	r2, [pc, #176]	; (ce78 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    cdc8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    cdca:	4a2c      	ldr	r2, [pc, #176]	; (ce7c <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    cdcc:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cdce:	4a2c      	ldr	r2, [pc, #176]	; (ce80 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    cdd0:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cdd2:	4a2c      	ldr	r2, [pc, #176]	; (ce84 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    cdd4:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cdd6:	4a2c      	ldr	r2, [pc, #176]	; (ce88 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    cdd8:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cdda:	4a2c      	ldr	r2, [pc, #176]	; (ce8c <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    cddc:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cdde:	4a2c      	ldr	r2, [pc, #176]	; (ce90 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    cde0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cde2:	4a2c      	ldr	r2, [pc, #176]	; (ce94 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    cde4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cde6:	4a2c      	ldr	r2, [pc, #176]	; (ce98 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    cde8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    cdea:	4a2c      	ldr	r2, [pc, #176]	; (ce9c <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    cdec:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cdee:	4a2c      	ldr	r2, [pc, #176]	; (cea0 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    cdf0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cdf2:	4a2c      	ldr	r2, [pc, #176]	; (cea4 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    cdf4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    cdf6:	4a2c      	ldr	r2, [pc, #176]	; (cea8 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    cdf8:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cdfa:	492c      	ldr	r1, [pc, #176]	; (ceac <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    cdfc:	2280      	movs	r2, #128	; 0x80
    cdfe:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    ce00:	4a2b      	ldr	r2, [pc, #172]	; (ceb0 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    ce02:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    ce04:	4a2b      	ldr	r2, [pc, #172]	; (ceb4 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    ce06:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    ce08:	492b      	ldr	r1, [pc, #172]	; (ceb8 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    ce0a:	228c      	movs	r2, #140	; 0x8c
    ce0c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    ce0e:	492b      	ldr	r1, [pc, #172]	; (cebc <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    ce10:	3204      	adds	r2, #4
    ce12:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    ce14:	492a      	ldr	r1, [pc, #168]	; (cec0 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    ce16:	3204      	adds	r2, #4
    ce18:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ce1a:	492a      	ldr	r1, [pc, #168]	; (cec4 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    ce1c:	3208      	adds	r2, #8
    ce1e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ce20:	4929      	ldr	r1, [pc, #164]	; (cec8 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    ce22:	3204      	adds	r2, #4
    ce24:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ce26:	4929      	ldr	r1, [pc, #164]	; (cecc <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    ce28:	3204      	adds	r2, #4
    ce2a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ce2c:	4928      	ldr	r1, [pc, #160]	; (ced0 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    ce2e:	3204      	adds	r2, #4
    ce30:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    ce32:	4928      	ldr	r1, [pc, #160]	; (ced4 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    ce34:	3204      	adds	r2, #4
    ce36:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ce38:	4927      	ldr	r1, [pc, #156]	; (ced8 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    ce3a:	3204      	adds	r2, #4
    ce3c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ce3e:	4927      	ldr	r1, [pc, #156]	; (cedc <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    ce40:	3204      	adds	r2, #4
    ce42:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    ce44:	4926      	ldr	r1, [pc, #152]	; (cee0 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    ce46:	3204      	adds	r2, #4
    ce48:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    ce4a:	4926      	ldr	r1, [pc, #152]	; (cee4 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    ce4c:	3204      	adds	r2, #4
    ce4e:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    ce50:	4925      	ldr	r1, [pc, #148]	; (cee8 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    ce52:	3204      	adds	r2, #4
    ce54:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    ce56:	4925      	ldr	r1, [pc, #148]	; (ceec <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    ce58:	3204      	adds	r2, #4
    ce5a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    ce5c:	4924      	ldr	r1, [pc, #144]	; (cef0 <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    ce5e:	3214      	adds	r2, #20
    ce60:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ce62:	4924      	ldr	r1, [pc, #144]	; (cef4 <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    ce64:	3204      	adds	r2, #4
    ce66:	5099      	str	r1, [r3, r2]
}
    ce68:	4770      	bx	lr
    ce6a:	46c0      	nop			; (mov r8, r8)
    ce6c:	20000c7c 	.word	0x20000c7c
    ce70:	0000988d 	.word	0x0000988d
    ce74:	0000c5d1 	.word	0x0000c5d1
    ce78:	0000c621 	.word	0x0000c621
    ce7c:	0000c66d 	.word	0x0000c66d
    ce80:	000096d5 	.word	0x000096d5
    ce84:	000096e5 	.word	0x000096e5
    ce88:	00009701 	.word	0x00009701
    ce8c:	00009711 	.word	0x00009711
    ce90:	0000a781 	.word	0x0000a781
    ce94:	00009721 	.word	0x00009721
    ce98:	00009731 	.word	0x00009731
    ce9c:	0000a655 	.word	0x0000a655
    cea0:	00009a41 	.word	0x00009a41
    cea4:	00009781 	.word	0x00009781
    cea8:	0000a5a9 	.word	0x0000a5a9
    ceac:	0000a509 	.word	0x0000a509
    ceb0:	000097cd 	.word	0x000097cd
    ceb4:	000097d7 	.word	0x000097d7
    ceb8:	0000c6b9 	.word	0x0000c6b9
    cebc:	0000c705 	.word	0x0000c705
    cec0:	0000c751 	.word	0x0000c751
    cec4:	000097e1 	.word	0x000097e1
    cec8:	000097eb 	.word	0x000097eb
    cecc:	000097f5 	.word	0x000097f5
    ced0:	00009801 	.word	0x00009801
    ced4:	0000980d 	.word	0x0000980d
    ced8:	00009817 	.word	0x00009817
    cedc:	0000981f 	.word	0x0000981f
    cee0:	00009827 	.word	0x00009827
    cee4:	0000c839 	.word	0x0000c839
    cee8:	0000a065 	.word	0x0000a065
    ceec:	00009851 	.word	0x00009851
    cef0:	00009831 	.word	0x00009831
    cef4:	00009841 	.word	0x00009841

0000cef8 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    cef8:	4b2a      	ldr	r3, [pc, #168]	; (cfa4 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    cefa:	4a2b      	ldr	r2, [pc, #172]	; (cfa8 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    cefc:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    cefe:	4a2b      	ldr	r2, [pc, #172]	; (cfac <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    cf00:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    cf02:	4a2b      	ldr	r2, [pc, #172]	; (cfb0 <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    cf04:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    cf06:	4a2b      	ldr	r2, [pc, #172]	; (cfb4 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    cf08:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    cf0a:	4a2b      	ldr	r2, [pc, #172]	; (cfb8 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    cf0c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    cf0e:	4a2b      	ldr	r2, [pc, #172]	; (cfbc <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    cf10:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    cf12:	4a2b      	ldr	r2, [pc, #172]	; (cfc0 <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    cf14:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    cf16:	4a2b      	ldr	r2, [pc, #172]	; (cfc4 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    cf18:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    cf1a:	4a2b      	ldr	r2, [pc, #172]	; (cfc8 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    cf1c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    cf1e:	4a2b      	ldr	r2, [pc, #172]	; (cfcc <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    cf20:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    cf22:	4a2b      	ldr	r2, [pc, #172]	; (cfd0 <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    cf24:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    cf26:	4a2b      	ldr	r2, [pc, #172]	; (cfd4 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    cf28:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    cf2a:	4a2b      	ldr	r2, [pc, #172]	; (cfd8 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    cf2c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    cf2e:	4a2b      	ldr	r2, [pc, #172]	; (cfdc <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    cf30:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    cf32:	4a2b      	ldr	r2, [pc, #172]	; (cfe0 <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    cf34:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    cf36:	492b      	ldr	r1, [pc, #172]	; (cfe4 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    cf38:	2280      	movs	r2, #128	; 0x80
    cf3a:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    cf3c:	492a      	ldr	r1, [pc, #168]	; (cfe8 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    cf3e:	320c      	adds	r2, #12
    cf40:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    cf42:	492a      	ldr	r1, [pc, #168]	; (cfec <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    cf44:	3204      	adds	r2, #4
    cf46:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    cf48:	4929      	ldr	r1, [pc, #164]	; (cff0 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    cf4a:	3204      	adds	r2, #4
    cf4c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    cf4e:	4929      	ldr	r1, [pc, #164]	; (cff4 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    cf50:	3208      	adds	r2, #8
    cf52:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    cf54:	4928      	ldr	r1, [pc, #160]	; (cff8 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    cf56:	3204      	adds	r2, #4
    cf58:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    cf5a:	4928      	ldr	r1, [pc, #160]	; (cffc <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    cf5c:	3204      	adds	r2, #4
    cf5e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    cf60:	4927      	ldr	r1, [pc, #156]	; (d000 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    cf62:	3204      	adds	r2, #4
    cf64:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    cf66:	4927      	ldr	r1, [pc, #156]	; (d004 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    cf68:	3204      	adds	r2, #4
    cf6a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    cf6c:	4926      	ldr	r1, [pc, #152]	; (d008 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    cf6e:	3204      	adds	r2, #4
    cf70:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    cf72:	4926      	ldr	r1, [pc, #152]	; (d00c <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    cf74:	3204      	adds	r2, #4
    cf76:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    cf78:	4925      	ldr	r1, [pc, #148]	; (d010 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    cf7a:	3204      	adds	r2, #4
    cf7c:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    cf7e:	4925      	ldr	r1, [pc, #148]	; (d014 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    cf80:	3204      	adds	r2, #4
    cf82:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    cf84:	4924      	ldr	r1, [pc, #144]	; (d018 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    cf86:	3204      	adds	r2, #4
    cf88:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    cf8a:	4924      	ldr	r1, [pc, #144]	; (d01c <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    cf8c:	3204      	adds	r2, #4
    cf8e:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    cf90:	4923      	ldr	r1, [pc, #140]	; (d020 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    cf92:	320c      	adds	r2, #12
    cf94:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    cf96:	4923      	ldr	r1, [pc, #140]	; (d024 <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    cf98:	3208      	adds	r2, #8
    cf9a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    cf9c:	4922      	ldr	r1, [pc, #136]	; (d028 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    cf9e:	3204      	adds	r2, #4
    cfa0:	5099      	str	r1, [r3, r2]
}
    cfa2:	4770      	bx	lr
    cfa4:	20000c7c 	.word	0x20000c7c
    cfa8:	0000aadd 	.word	0x0000aadd
    cfac:	0000c271 	.word	0x0000c271
    cfb0:	0000c2b1 	.word	0x0000c2b1
    cfb4:	0000c2ed 	.word	0x0000c2ed
    cfb8:	000096d5 	.word	0x000096d5
    cfbc:	000096e5 	.word	0x000096e5
    cfc0:	00009701 	.word	0x00009701
    cfc4:	00009711 	.word	0x00009711
    cfc8:	0000a781 	.word	0x0000a781
    cfcc:	00009721 	.word	0x00009721
    cfd0:	00009731 	.word	0x00009731
    cfd4:	0000a9e1 	.word	0x0000a9e1
    cfd8:	00009a41 	.word	0x00009a41
    cfdc:	00009781 	.word	0x00009781
    cfe0:	0000ac61 	.word	0x0000ac61
    cfe4:	0000a509 	.word	0x0000a509
    cfe8:	0000c325 	.word	0x0000c325
    cfec:	0000c35d 	.word	0x0000c35d
    cff0:	0000c395 	.word	0x0000c395
    cff4:	000097e1 	.word	0x000097e1
    cff8:	000097eb 	.word	0x000097eb
    cffc:	000097f5 	.word	0x000097f5
    d000:	00009801 	.word	0x00009801
    d004:	0000980d 	.word	0x0000980d
    d008:	00009817 	.word	0x00009817
    d00c:	0000981f 	.word	0x0000981f
    d010:	00009827 	.word	0x00009827
    d014:	0000c405 	.word	0x0000c405
    d018:	0000b371 	.word	0x0000b371
    d01c:	00009851 	.word	0x00009851
    d020:	0000a799 	.word	0x0000a799
    d024:	00009831 	.word	0x00009831
    d028:	00009841 	.word	0x00009841

0000d02c <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    d02c:	4b30      	ldr	r3, [pc, #192]	; (d0f0 <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    d02e:	4a31      	ldr	r2, [pc, #196]	; (d0f4 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    d030:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    d032:	4a31      	ldr	r2, [pc, #196]	; (d0f8 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    d034:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    d036:	4a31      	ldr	r2, [pc, #196]	; (d0fc <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    d038:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    d03a:	4a31      	ldr	r2, [pc, #196]	; (d100 <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    d03c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    d03e:	4a31      	ldr	r2, [pc, #196]	; (d104 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    d040:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    d042:	4a31      	ldr	r2, [pc, #196]	; (d108 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    d044:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    d046:	4a31      	ldr	r2, [pc, #196]	; (d10c <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    d048:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    d04a:	4a31      	ldr	r2, [pc, #196]	; (d110 <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    d04c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    d04e:	4a31      	ldr	r2, [pc, #196]	; (d114 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    d050:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    d052:	4a31      	ldr	r2, [pc, #196]	; (d118 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    d054:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    d056:	4a31      	ldr	r2, [pc, #196]	; (d11c <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    d058:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    d05a:	4a31      	ldr	r2, [pc, #196]	; (d120 <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    d05c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    d05e:	4a31      	ldr	r2, [pc, #196]	; (d124 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    d060:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    d062:	4a31      	ldr	r2, [pc, #196]	; (d128 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    d064:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    d066:	4a31      	ldr	r2, [pc, #196]	; (d12c <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    d068:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    d06a:	4931      	ldr	r1, [pc, #196]	; (d130 <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    d06c:	2280      	movs	r2, #128	; 0x80
    d06e:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    d070:	4930      	ldr	r1, [pc, #192]	; (d134 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    d072:	320c      	adds	r2, #12
    d074:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    d076:	4930      	ldr	r1, [pc, #192]	; (d138 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    d078:	3204      	adds	r2, #4
    d07a:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    d07c:	492f      	ldr	r1, [pc, #188]	; (d13c <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    d07e:	3204      	adds	r2, #4
    d080:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    d082:	492f      	ldr	r1, [pc, #188]	; (d140 <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    d084:	3208      	adds	r2, #8
    d086:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    d088:	492e      	ldr	r1, [pc, #184]	; (d144 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    d08a:	3204      	adds	r2, #4
    d08c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    d08e:	492e      	ldr	r1, [pc, #184]	; (d148 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    d090:	3204      	adds	r2, #4
    d092:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    d094:	492d      	ldr	r1, [pc, #180]	; (d14c <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    d096:	3204      	adds	r2, #4
    d098:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    d09a:	492d      	ldr	r1, [pc, #180]	; (d150 <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    d09c:	3204      	adds	r2, #4
    d09e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    d0a0:	492c      	ldr	r1, [pc, #176]	; (d154 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    d0a2:	3204      	adds	r2, #4
    d0a4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    d0a6:	492c      	ldr	r1, [pc, #176]	; (d158 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    d0a8:	3204      	adds	r2, #4
    d0aa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    d0ac:	492b      	ldr	r1, [pc, #172]	; (d15c <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    d0ae:	3204      	adds	r2, #4
    d0b0:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    d0b2:	492b      	ldr	r1, [pc, #172]	; (d160 <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    d0b4:	3204      	adds	r2, #4
    d0b6:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    d0b8:	492a      	ldr	r1, [pc, #168]	; (d164 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    d0ba:	3204      	adds	r2, #4
    d0bc:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    d0be:	492a      	ldr	r1, [pc, #168]	; (d168 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    d0c0:	3204      	adds	r2, #4
    d0c2:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    d0c4:	4929      	ldr	r1, [pc, #164]	; (d16c <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    d0c6:	3204      	adds	r2, #4
    d0c8:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    d0ca:	4929      	ldr	r1, [pc, #164]	; (d170 <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    d0cc:	3204      	adds	r2, #4
    d0ce:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    d0d0:	4928      	ldr	r1, [pc, #160]	; (d174 <LORAREG_InitGetAttrFnPtrsJP+0x148>)
    d0d2:	3204      	adds	r2, #4
    d0d4:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d0d6:	4928      	ldr	r1, [pc, #160]	; (d178 <LORAREG_InitGetAttrFnPtrsJP+0x14c>)
    d0d8:	3208      	adds	r2, #8
    d0da:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d0dc:	4927      	ldr	r1, [pc, #156]	; (d17c <LORAREG_InitGetAttrFnPtrsJP+0x150>)
    d0de:	3204      	adds	r2, #4
    d0e0:	5099      	str	r1, [r3, r2]
	pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    d0e2:	4a27      	ldr	r2, [pc, #156]	; (d180 <LORAREG_InitGetAttrFnPtrsJP+0x154>)
    d0e4:	679a      	str	r2, [r3, #120]	; 0x78
	pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    d0e6:	4927      	ldr	r1, [pc, #156]	; (d184 <LORAREG_InitGetAttrFnPtrsJP+0x158>)
    d0e8:	2298      	movs	r2, #152	; 0x98
    d0ea:	5099      	str	r1, [r3, r2]
}
    d0ec:	4770      	bx	lr
    d0ee:	46c0      	nop			; (mov r8, r8)
    d0f0:	20000c7c 	.word	0x20000c7c
    d0f4:	0000ac19 	.word	0x0000ac19
    d0f8:	0000c271 	.word	0x0000c271
    d0fc:	0000c2b1 	.word	0x0000c2b1
    d100:	0000c20d 	.word	0x0000c20d
    d104:	000096d5 	.word	0x000096d5
    d108:	000096e5 	.word	0x000096e5
    d10c:	00009701 	.word	0x00009701
    d110:	00009711 	.word	0x00009711
    d114:	0000a781 	.word	0x0000a781
    d118:	00009721 	.word	0x00009721
    d11c:	00009731 	.word	0x00009731
    d120:	0000a9e1 	.word	0x0000a9e1
    d124:	00009a41 	.word	0x00009a41
    d128:	00009781 	.word	0x00009781
    d12c:	0000ab25 	.word	0x0000ab25
    d130:	0000a509 	.word	0x0000a509
    d134:	0000c325 	.word	0x0000c325
    d138:	0000c35d 	.word	0x0000c35d
    d13c:	0000c395 	.word	0x0000c395
    d140:	000097e1 	.word	0x000097e1
    d144:	000097eb 	.word	0x000097eb
    d148:	000097f5 	.word	0x000097f5
    d14c:	00009801 	.word	0x00009801
    d150:	0000980d 	.word	0x0000980d
    d154:	00009817 	.word	0x00009817
    d158:	0000981f 	.word	0x0000981f
    d15c:	00009827 	.word	0x00009827
    d160:	0000c405 	.word	0x0000c405
    d164:	0000b371 	.word	0x0000b371
    d168:	00009851 	.word	0x00009851
    d16c:	00009861 	.word	0x00009861
    d170:	0000ace9 	.word	0x0000ace9
    d174:	0000a799 	.word	0x0000a799
    d178:	00009831 	.word	0x00009831
    d17c:	00009841 	.word	0x00009841
    d180:	000099f9 	.word	0x000099f9
    d184:	0000a7e1 	.word	0x0000a7e1

0000d188 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    d188:	4b2d      	ldr	r3, [pc, #180]	; (d240 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    d18a:	4a2e      	ldr	r2, [pc, #184]	; (d244 <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    d18c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    d18e:	4a2e      	ldr	r2, [pc, #184]	; (d248 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    d190:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    d192:	4a2e      	ldr	r2, [pc, #184]	; (d24c <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    d194:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    d196:	4a2e      	ldr	r2, [pc, #184]	; (d250 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    d198:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    d19a:	4a2e      	ldr	r2, [pc, #184]	; (d254 <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    d19c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    d19e:	4a2e      	ldr	r2, [pc, #184]	; (d258 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    d1a0:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    d1a2:	4a2e      	ldr	r2, [pc, #184]	; (d25c <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    d1a4:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    d1a6:	4a2e      	ldr	r2, [pc, #184]	; (d260 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    d1a8:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    d1aa:	4a2e      	ldr	r2, [pc, #184]	; (d264 <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    d1ac:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    d1ae:	4a2e      	ldr	r2, [pc, #184]	; (d268 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    d1b0:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    d1b2:	4a2e      	ldr	r2, [pc, #184]	; (d26c <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    d1b4:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    d1b6:	4a2e      	ldr	r2, [pc, #184]	; (d270 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    d1b8:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    d1ba:	4a2e      	ldr	r2, [pc, #184]	; (d274 <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    d1bc:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    d1be:	4a2e      	ldr	r2, [pc, #184]	; (d278 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    d1c0:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    d1c2:	4a2e      	ldr	r2, [pc, #184]	; (d27c <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    d1c4:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    d1c6:	492e      	ldr	r1, [pc, #184]	; (d280 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    d1c8:	2280      	movs	r2, #128	; 0x80
    d1ca:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    d1cc:	492d      	ldr	r1, [pc, #180]	; (d284 <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    d1ce:	320c      	adds	r2, #12
    d1d0:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    d1d2:	492d      	ldr	r1, [pc, #180]	; (d288 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    d1d4:	3204      	adds	r2, #4
    d1d6:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    d1d8:	492c      	ldr	r1, [pc, #176]	; (d28c <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    d1da:	3204      	adds	r2, #4
    d1dc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    d1de:	492c      	ldr	r1, [pc, #176]	; (d290 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    d1e0:	3208      	adds	r2, #8
    d1e2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    d1e4:	492b      	ldr	r1, [pc, #172]	; (d294 <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    d1e6:	3204      	adds	r2, #4
    d1e8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    d1ea:	492b      	ldr	r1, [pc, #172]	; (d298 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    d1ec:	3204      	adds	r2, #4
    d1ee:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    d1f0:	492a      	ldr	r1, [pc, #168]	; (d29c <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    d1f2:	3204      	adds	r2, #4
    d1f4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    d1f6:	492a      	ldr	r1, [pc, #168]	; (d2a0 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    d1f8:	3204      	adds	r2, #4
    d1fa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    d1fc:	4929      	ldr	r1, [pc, #164]	; (d2a4 <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    d1fe:	3204      	adds	r2, #4
    d200:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    d202:	4929      	ldr	r1, [pc, #164]	; (d2a8 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    d204:	3204      	adds	r2, #4
    d206:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    d208:	4928      	ldr	r1, [pc, #160]	; (d2ac <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    d20a:	3204      	adds	r2, #4
    d20c:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    d20e:	4928      	ldr	r1, [pc, #160]	; (d2b0 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    d210:	3204      	adds	r2, #4
    d212:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    d214:	4927      	ldr	r1, [pc, #156]	; (d2b4 <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    d216:	3204      	adds	r2, #4
    d218:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    d21a:	4927      	ldr	r1, [pc, #156]	; (d2b8 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    d21c:	3204      	adds	r2, #4
    d21e:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    d220:	4926      	ldr	r1, [pc, #152]	; (d2bc <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    d222:	3204      	adds	r2, #4
    d224:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    d226:	4926      	ldr	r1, [pc, #152]	; (d2c0 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    d228:	3204      	adds	r2, #4
    d22a:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    d22c:	4925      	ldr	r1, [pc, #148]	; (d2c4 <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    d22e:	3204      	adds	r2, #4
    d230:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    d232:	4925      	ldr	r1, [pc, #148]	; (d2c8 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    d234:	3208      	adds	r2, #8
    d236:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    d238:	4924      	ldr	r1, [pc, #144]	; (d2cc <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    d23a:	3204      	adds	r2, #4
    d23c:	5099      	str	r1, [r3, r2]
}
    d23e:	4770      	bx	lr
    d240:	20000c7c 	.word	0x20000c7c
    d244:	0000aadd 	.word	0x0000aadd
    d248:	0000c271 	.word	0x0000c271
    d24c:	0000c2b1 	.word	0x0000c2b1
    d250:	0000c2ed 	.word	0x0000c2ed
    d254:	000096d5 	.word	0x000096d5
    d258:	000096e5 	.word	0x000096e5
    d25c:	00009701 	.word	0x00009701
    d260:	00009711 	.word	0x00009711
    d264:	0000a781 	.word	0x0000a781
    d268:	00009721 	.word	0x00009721
    d26c:	00009731 	.word	0x00009731
    d270:	0000a9e1 	.word	0x0000a9e1
    d274:	00009a41 	.word	0x00009a41
    d278:	00009781 	.word	0x00009781
    d27c:	0000a975 	.word	0x0000a975
    d280:	0000a509 	.word	0x0000a509
    d284:	0000c325 	.word	0x0000c325
    d288:	0000c35d 	.word	0x0000c35d
    d28c:	0000c395 	.word	0x0000c395
    d290:	000097e1 	.word	0x000097e1
    d294:	000097eb 	.word	0x000097eb
    d298:	000097f5 	.word	0x000097f5
    d29c:	00009801 	.word	0x00009801
    d2a0:	0000980d 	.word	0x0000980d
    d2a4:	00009817 	.word	0x00009817
    d2a8:	0000981f 	.word	0x0000981f
    d2ac:	00009827 	.word	0x00009827
    d2b0:	0000c405 	.word	0x0000c405
    d2b4:	0000b371 	.word	0x0000b371
    d2b8:	00009851 	.word	0x00009851
    d2bc:	00009861 	.word	0x00009861
    d2c0:	0000ace9 	.word	0x0000ace9
    d2c4:	0000a799 	.word	0x0000a799
    d2c8:	00009831 	.word	0x00009831
    d2cc:	00009841 	.word	0x00009841

0000d2d0 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    d2d0:	4b0d      	ldr	r3, [pc, #52]	; (d308 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    d2d2:	4a0e      	ldr	r2, [pc, #56]	; (d30c <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    d2d4:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    d2d6:	4a0e      	ldr	r2, [pc, #56]	; (d310 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    d2d8:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    d2da:	4a0e      	ldr	r2, [pc, #56]	; (d314 <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    d2dc:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    d2de:	490e      	ldr	r1, [pc, #56]	; (d318 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    d2e0:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d2e2:	490e      	ldr	r1, [pc, #56]	; (d31c <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    d2e4:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    d2e6:	490e      	ldr	r1, [pc, #56]	; (d320 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    d2e8:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    d2ea:	490e      	ldr	r1, [pc, #56]	; (d324 <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    d2ec:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    d2ee:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d2f0:	4a0d      	ldr	r2, [pc, #52]	; (d328 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    d2f2:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    d2f4:	4a0d      	ldr	r2, [pc, #52]	; (d32c <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    d2f6:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    d2f8:	4a0d      	ldr	r2, [pc, #52]	; (d330 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    d2fa:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    d2fc:	4a0d      	ldr	r2, [pc, #52]	; (d334 <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    d2fe:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    d300:	490d      	ldr	r1, [pc, #52]	; (d338 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    d302:	22e0      	movs	r2, #224	; 0xe0
    d304:	5099      	str	r1, [r3, r2]
}
    d306:	4770      	bx	lr
    d308:	20000e64 	.word	0x20000e64
    d30c:	00009c35 	.word	0x00009c35
    d310:	0000c79d 	.word	0x0000c79d
    d314:	00009965 	.word	0x00009965
    d318:	00009921 	.word	0x00009921
    d31c:	00009bd9 	.word	0x00009bd9
    d320:	0000c4f9 	.word	0x0000c4f9
    d324:	000099b5 	.word	0x000099b5
    d328:	00009c69 	.word	0x00009c69
    d32c:	00009b01 	.word	0x00009b01
    d330:	00009ad5 	.word	0x00009ad5
    d334:	00009ae9 	.word	0x00009ae9
    d338:	0000c3cd 	.word	0x0000c3cd

0000d33c <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    d33c:	4b0d      	ldr	r3, [pc, #52]	; (d374 <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    d33e:	4a0e      	ldr	r2, [pc, #56]	; (d378 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    d340:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d342:	4a0e      	ldr	r2, [pc, #56]	; (d37c <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    d344:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d346:	4a0e      	ldr	r2, [pc, #56]	; (d380 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    d348:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d34a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d34c:	490d      	ldr	r1, [pc, #52]	; (d384 <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    d34e:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d350:	490d      	ldr	r1, [pc, #52]	; (d388 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    d352:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d354:	490d      	ldr	r1, [pc, #52]	; (d38c <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    d356:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d358:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d35a:	4a0d      	ldr	r2, [pc, #52]	; (d390 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    d35c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d35e:	4a0d      	ldr	r2, [pc, #52]	; (d394 <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    d360:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d362:	4a0d      	ldr	r2, [pc, #52]	; (d398 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    d364:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d366:	4a0d      	ldr	r2, [pc, #52]	; (d39c <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    d368:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d36a:	490d      	ldr	r1, [pc, #52]	; (d3a0 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    d36c:	22e0      	movs	r2, #224	; 0xe0
    d36e:	5099      	str	r1, [r3, r2]
}
    d370:	4770      	bx	lr
    d372:	46c0      	nop			; (mov r8, r8)
    d374:	20000e64 	.word	0x20000e64
    d378:	00009cf1 	.word	0x00009cf1
    d37c:	0000adb9 	.word	0x0000adb9
    d380:	00009bc1 	.word	0x00009bc1
    d384:	00009bd9 	.word	0x00009bd9
    d388:	0000c11d 	.word	0x0000c11d
    d38c:	000099cd 	.word	0x000099cd
    d390:	00009c69 	.word	0x00009c69
    d394:	00009b05 	.word	0x00009b05
    d398:	00009b59 	.word	0x00009b59
    d39c:	00009ae9 	.word	0x00009ae9
    d3a0:	00009b6d 	.word	0x00009b6d

0000d3a4 <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    d3a4:	4b0d      	ldr	r3, [pc, #52]	; (d3dc <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    d3a6:	4a0e      	ldr	r2, [pc, #56]	; (d3e0 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    d3a8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d3aa:	4a0e      	ldr	r2, [pc, #56]	; (d3e4 <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    d3ac:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    d3ae:	4a0e      	ldr	r2, [pc, #56]	; (d3e8 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    d3b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    d3b2:	490e      	ldr	r1, [pc, #56]	; (d3ec <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    d3b4:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d3b6:	490e      	ldr	r1, [pc, #56]	; (d3f0 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    d3b8:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d3ba:	490e      	ldr	r1, [pc, #56]	; (d3f4 <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    d3bc:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d3be:	490e      	ldr	r1, [pc, #56]	; (d3f8 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    d3c0:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    d3c2:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d3c4:	4a0d      	ldr	r2, [pc, #52]	; (d3fc <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    d3c6:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d3c8:	4a0d      	ldr	r2, [pc, #52]	; (d400 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    d3ca:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d3cc:	4a0d      	ldr	r2, [pc, #52]	; (d404 <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    d3ce:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d3d0:	4a0d      	ldr	r2, [pc, #52]	; (d408 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    d3d2:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d3d4:	490d      	ldr	r1, [pc, #52]	; (d40c <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    d3d6:	22e0      	movs	r2, #224	; 0xe0
    d3d8:	5099      	str	r1, [r3, r2]
}
    d3da:	4770      	bx	lr
    d3dc:	20000e64 	.word	0x20000e64
    d3e0:	00009d0d 	.word	0x00009d0d
    d3e4:	0000adb9 	.word	0x0000adb9
    d3e8:	00009989 	.word	0x00009989
    d3ec:	00009939 	.word	0x00009939
    d3f0:	00009bd9 	.word	0x00009bd9
    d3f4:	0000c11d 	.word	0x0000c11d
    d3f8:	000099cd 	.word	0x000099cd
    d3fc:	00009c69 	.word	0x00009c69
    d400:	00009b05 	.word	0x00009b05
    d404:	00009b59 	.word	0x00009b59
    d408:	00009ae9 	.word	0x00009ae9
    d40c:	00009b6d 	.word	0x00009b6d

0000d410 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    d410:	4b0d      	ldr	r3, [pc, #52]	; (d448 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    d412:	4a0e      	ldr	r2, [pc, #56]	; (d44c <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    d414:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    d416:	4a0e      	ldr	r2, [pc, #56]	; (d450 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    d418:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    d41a:	4a0e      	ldr	r2, [pc, #56]	; (d454 <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    d41c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    d41e:	490e      	ldr	r1, [pc, #56]	; (d458 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    d420:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d422:	490e      	ldr	r1, [pc, #56]	; (d45c <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    d424:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    d426:	490e      	ldr	r1, [pc, #56]	; (d460 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    d428:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    d42a:	490e      	ldr	r1, [pc, #56]	; (d464 <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    d42c:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    d42e:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d430:	4a0d      	ldr	r2, [pc, #52]	; (d468 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    d432:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    d434:	4a0d      	ldr	r2, [pc, #52]	; (d46c <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    d436:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    d438:	4a0d      	ldr	r2, [pc, #52]	; (d470 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    d43a:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d43c:	4a0d      	ldr	r2, [pc, #52]	; (d474 <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    d43e:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    d440:	490d      	ldr	r1, [pc, #52]	; (d478 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    d442:	22e0      	movs	r2, #224	; 0xe0
    d444:	5099      	str	r1, [r3, r2]
}
    d446:	4770      	bx	lr
    d448:	20000e64 	.word	0x20000e64
    d44c:	00009c35 	.word	0x00009c35
    d450:	0000c79d 	.word	0x0000c79d
    d454:	00009965 	.word	0x00009965
    d458:	00009921 	.word	0x00009921
    d45c:	00009bd9 	.word	0x00009bd9
    d460:	0000c4f9 	.word	0x0000c4f9
    d464:	000099b5 	.word	0x000099b5
    d468:	00009c69 	.word	0x00009c69
    d46c:	00009b01 	.word	0x00009b01
    d470:	00009ad5 	.word	0x00009ad5
    d474:	00009ae9 	.word	0x00009ae9
    d478:	0000c3cd 	.word	0x0000c3cd

0000d47c <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    d47c:	4b0d      	ldr	r3, [pc, #52]	; (d4b4 <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    d47e:	4a0e      	ldr	r2, [pc, #56]	; (d4b8 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    d480:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d482:	4a0e      	ldr	r2, [pc, #56]	; (d4bc <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    d484:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d486:	4a0e      	ldr	r2, [pc, #56]	; (d4c0 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    d488:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d48a:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d48c:	490d      	ldr	r1, [pc, #52]	; (d4c4 <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    d48e:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d490:	490d      	ldr	r1, [pc, #52]	; (d4c8 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    d492:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d494:	490d      	ldr	r1, [pc, #52]	; (d4cc <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    d496:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d498:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d49a:	4a0d      	ldr	r2, [pc, #52]	; (d4d0 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    d49c:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d49e:	4a0d      	ldr	r2, [pc, #52]	; (d4d4 <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    d4a0:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d4a2:	4a0d      	ldr	r2, [pc, #52]	; (d4d8 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    d4a4:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d4a6:	4a0d      	ldr	r2, [pc, #52]	; (d4dc <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    d4a8:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d4aa:	490d      	ldr	r1, [pc, #52]	; (d4e0 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    d4ac:	22e0      	movs	r2, #224	; 0xe0
    d4ae:	5099      	str	r1, [r3, r2]
}
    d4b0:	4770      	bx	lr
    d4b2:	46c0      	nop			; (mov r8, r8)
    d4b4:	20000e64 	.word	0x20000e64
    d4b8:	0000addd 	.word	0x0000addd
    d4bc:	0000adb9 	.word	0x0000adb9
    d4c0:	00009bc1 	.word	0x00009bc1
    d4c4:	00009bd9 	.word	0x00009bd9
    d4c8:	0000c11d 	.word	0x0000c11d
    d4cc:	000099cd 	.word	0x000099cd
    d4d0:	00009c69 	.word	0x00009c69
    d4d4:	00009b05 	.word	0x00009b05
    d4d8:	00009b59 	.word	0x00009b59
    d4dc:	00009ae9 	.word	0x00009ae9
    d4e0:	00009b6d 	.word	0x00009b6d

0000d4e4 <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    d4e4:	4b0d      	ldr	r3, [pc, #52]	; (d51c <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    d4e6:	4a0e      	ldr	r2, [pc, #56]	; (d520 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    d4e8:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d4ea:	4a0e      	ldr	r2, [pc, #56]	; (d524 <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    d4ec:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    d4ee:	4a0e      	ldr	r2, [pc, #56]	; (d528 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    d4f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    d4f2:	490e      	ldr	r1, [pc, #56]	; (d52c <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    d4f4:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d4f6:	490e      	ldr	r1, [pc, #56]	; (d530 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    d4f8:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d4fa:	490e      	ldr	r1, [pc, #56]	; (d534 <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    d4fc:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d4fe:	490e      	ldr	r1, [pc, #56]	; (d538 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    d500:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    d502:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d504:	4a0d      	ldr	r2, [pc, #52]	; (d53c <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    d506:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d508:	4a0d      	ldr	r2, [pc, #52]	; (d540 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    d50a:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d50c:	4a0d      	ldr	r2, [pc, #52]	; (d544 <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    d50e:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d510:	4a0d      	ldr	r2, [pc, #52]	; (d548 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    d512:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d514:	490d      	ldr	r1, [pc, #52]	; (d54c <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    d516:	22e0      	movs	r2, #224	; 0xe0
    d518:	5099      	str	r1, [r3, r2]
}
    d51a:	4770      	bx	lr
    d51c:	20000e64 	.word	0x20000e64
    d520:	0000ae0d 	.word	0x0000ae0d
    d524:	0000adb9 	.word	0x0000adb9
    d528:	00009989 	.word	0x00009989
    d52c:	00009939 	.word	0x00009939
    d530:	00009bd9 	.word	0x00009bd9
    d534:	0000c11d 	.word	0x0000c11d
    d538:	000099cd 	.word	0x000099cd
    d53c:	00009c69 	.word	0x00009c69
    d540:	00009b05 	.word	0x00009b05
    d544:	00009b59 	.word	0x00009b59
    d548:	00009ae9 	.word	0x00009ae9
    d54c:	00009b6d 	.word	0x00009b6d

0000d550 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    d550:	4b0d      	ldr	r3, [pc, #52]	; (d588 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    d552:	4a0e      	ldr	r2, [pc, #56]	; (d58c <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    d554:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    d556:	4a0e      	ldr	r2, [pc, #56]	; (d590 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    d558:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    d55a:	4a0e      	ldr	r2, [pc, #56]	; (d594 <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    d55c:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    d55e:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    d560:	490d      	ldr	r1, [pc, #52]	; (d598 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    d562:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    d564:	490d      	ldr	r1, [pc, #52]	; (d59c <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    d566:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    d568:	490d      	ldr	r1, [pc, #52]	; (d5a0 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    d56a:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    d56c:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    d56e:	4a0d      	ldr	r2, [pc, #52]	; (d5a4 <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    d570:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    d572:	4a0d      	ldr	r2, [pc, #52]	; (d5a8 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    d574:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    d576:	4a0d      	ldr	r2, [pc, #52]	; (d5ac <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    d578:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    d57a:	4a0d      	ldr	r2, [pc, #52]	; (d5b0 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    d57c:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    d57e:	490d      	ldr	r1, [pc, #52]	; (d5b4 <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    d580:	22e0      	movs	r2, #224	; 0xe0
    d582:	5099      	str	r1, [r3, r2]
}
    d584:	4770      	bx	lr
    d586:	46c0      	nop			; (mov r8, r8)
    d588:	20000e64 	.word	0x20000e64
    d58c:	0000ae3d 	.word	0x0000ae3d
    d590:	0000adb9 	.word	0x0000adb9
    d594:	00009bc1 	.word	0x00009bc1
    d598:	00009bd9 	.word	0x00009bd9
    d59c:	0000c11d 	.word	0x0000c11d
    d5a0:	000099cd 	.word	0x000099cd
    d5a4:	00009c69 	.word	0x00009c69
    d5a8:	00009b05 	.word	0x00009b05
    d5ac:	00009b59 	.word	0x00009b59
    d5b0:	00009ae9 	.word	0x00009ae9
    d5b4:	00009b6d 	.word	0x00009b6d

0000d5b8 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    d5b8:	4b0b      	ldr	r3, [pc, #44]	; (d5e8 <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    d5ba:	4a0c      	ldr	r2, [pc, #48]	; (d5ec <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    d5bc:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d5be:	4a0c      	ldr	r2, [pc, #48]	; (d5f0 <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    d5c0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d5c2:	4a0c      	ldr	r2, [pc, #48]	; (d5f4 <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    d5c4:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d5c6:	490c      	ldr	r1, [pc, #48]	; (d5f8 <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    d5c8:	22e8      	movs	r2, #232	; 0xe8
    d5ca:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d5cc:	490b      	ldr	r1, [pc, #44]	; (d5fc <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    d5ce:	3204      	adds	r2, #4
    d5d0:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d5d2:	490b      	ldr	r1, [pc, #44]	; (d600 <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    d5d4:	3a6c      	subs	r2, #108	; 0x6c
    d5d6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d5d8:	490a      	ldr	r1, [pc, #40]	; (d604 <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    d5da:	3204      	adds	r2, #4
    d5dc:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d5de:	490a      	ldr	r1, [pc, #40]	; (d608 <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    d5e0:	3260      	adds	r2, #96	; 0x60
    d5e2:	5099      	str	r1, [r3, r2]
}
    d5e4:	4770      	bx	lr
    d5e6:	46c0      	nop			; (mov r8, r8)
    d5e8:	20000d70 	.word	0x20000d70
    d5ec:	0000c561 	.word	0x0000c561
    d5f0:	0000c4d5 	.word	0x0000c4d5
    d5f4:	0000ae85 	.word	0x0000ae85
    d5f8:	0000a101 	.word	0x0000a101
    d5fc:	0000a091 	.word	0x0000a091
    d600:	0000b4c9 	.word	0x0000b4c9
    d604:	0000b455 	.word	0x0000b455
    d608:	0000b39d 	.word	0x0000b39d

0000d60c <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d60c:	4b0e      	ldr	r3, [pc, #56]	; (d648 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    d60e:	4a0f      	ldr	r2, [pc, #60]	; (d64c <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    d610:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d612:	4a0f      	ldr	r2, [pc, #60]	; (d650 <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    d614:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d616:	4a0f      	ldr	r2, [pc, #60]	; (d654 <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    d618:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d61a:	4a0f      	ldr	r2, [pc, #60]	; (d658 <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    d61c:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    d61e:	4a0f      	ldr	r2, [pc, #60]	; (d65c <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    d620:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d622:	4a0f      	ldr	r2, [pc, #60]	; (d660 <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    d624:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d626:	490f      	ldr	r1, [pc, #60]	; (d664 <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    d628:	2280      	movs	r2, #128	; 0x80
    d62a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d62c:	490e      	ldr	r1, [pc, #56]	; (d668 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    d62e:	3204      	adds	r2, #4
    d630:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d632:	490e      	ldr	r1, [pc, #56]	; (d66c <LORAREG_InitSetAttrFnPtrsEU+0x60>)
    d634:	324c      	adds	r2, #76	; 0x4c
    d636:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d638:	490d      	ldr	r1, [pc, #52]	; (d670 <LORAREG_InitSetAttrFnPtrsEU+0x64>)
    d63a:	3214      	adds	r2, #20
    d63c:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d63e:	490d      	ldr	r1, [pc, #52]	; (d674 <LORAREG_InitSetAttrFnPtrsEU+0x68>)
    d640:	320c      	adds	r2, #12
    d642:	5099      	str	r1, [r3, r2]
}
    d644:	4770      	bx	lr
    d646:	46c0      	nop			; (mov r8, r8)
    d648:	20000d70 	.word	0x20000d70
    d64c:	0000c149 	.word	0x0000c149
    d650:	0000a33d 	.word	0x0000a33d
    d654:	0000b0e5 	.word	0x0000b0e5
    d658:	0000b755 	.word	0x0000b755
    d65c:	0000afc1 	.word	0x0000afc1
    d660:	0000d8cd 	.word	0x0000d8cd
    d664:	0000b4c9 	.word	0x0000b4c9
    d668:	0000b455 	.word	0x0000b455
    d66c:	0000af1d 	.word	0x0000af1d
    d670:	0000b39d 	.word	0x0000b39d
    d674:	00009df1 	.word	0x00009df1

0000d678 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d678:	4b0f      	ldr	r3, [pc, #60]	; (d6b8 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    d67a:	4a10      	ldr	r2, [pc, #64]	; (d6bc <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    d67c:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d67e:	4a10      	ldr	r2, [pc, #64]	; (d6c0 <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    d680:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d682:	4a10      	ldr	r2, [pc, #64]	; (d6c4 <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    d684:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d686:	4910      	ldr	r1, [pc, #64]	; (d6c8 <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    d688:	22d0      	movs	r2, #208	; 0xd0
    d68a:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    d68c:	4a0f      	ldr	r2, [pc, #60]	; (d6cc <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    d68e:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    d690:	490f      	ldr	r1, [pc, #60]	; (d6d0 <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    d692:	2280      	movs	r2, #128	; 0x80
    d694:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d696:	490f      	ldr	r1, [pc, #60]	; (d6d4 <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    d698:	3204      	adds	r2, #4
    d69a:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d69c:	490e      	ldr	r1, [pc, #56]	; (d6d8 <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    d69e:	3250      	adds	r2, #80	; 0x50
    d6a0:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d6a2:	4a0e      	ldr	r2, [pc, #56]	; (d6dc <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    d6a4:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d6a6:	4a0e      	ldr	r2, [pc, #56]	; (d6e0 <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    d6a8:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d6aa:	490e      	ldr	r1, [pc, #56]	; (d6e4 <LORAREG_InitSetAttrFnPtrsAS+0x6c>)
    d6ac:	22e4      	movs	r2, #228	; 0xe4
    d6ae:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d6b0:	490d      	ldr	r1, [pc, #52]	; (d6e8 <LORAREG_InitSetAttrFnPtrsAS+0x70>)
    d6b2:	320c      	adds	r2, #12
    d6b4:	5099      	str	r1, [r3, r2]
}
    d6b6:	4770      	bx	lr
    d6b8:	20000d70 	.word	0x20000d70
    d6bc:	0000c149 	.word	0x0000c149
    d6c0:	0000a4b5 	.word	0x0000a4b5
    d6c4:	0000afc1 	.word	0x0000afc1
    d6c8:	0000af1d 	.word	0x0000af1d
    d6cc:	0000d8cd 	.word	0x0000d8cd
    d6d0:	0000b4c9 	.word	0x0000b4c9
    d6d4:	0000b455 	.word	0x0000b455
    d6d8:	00009d9d 	.word	0x00009d9d
    d6dc:	0000b0e5 	.word	0x0000b0e5
    d6e0:	0000b755 	.word	0x0000b755
    d6e4:	0000b39d 	.word	0x0000b39d
    d6e8:	00009df1 	.word	0x00009df1

0000d6ec <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    d6ec:	4b0b      	ldr	r3, [pc, #44]	; (d71c <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    d6ee:	4a0c      	ldr	r2, [pc, #48]	; (d720 <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    d6f0:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    d6f2:	4a0c      	ldr	r2, [pc, #48]	; (d724 <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    d6f4:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    d6f6:	4a0c      	ldr	r2, [pc, #48]	; (d728 <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    d6f8:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    d6fa:	490c      	ldr	r1, [pc, #48]	; (d72c <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    d6fc:	22e8      	movs	r2, #232	; 0xe8
    d6fe:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    d700:	490b      	ldr	r1, [pc, #44]	; (d730 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    d702:	3204      	adds	r2, #4
    d704:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d706:	490b      	ldr	r1, [pc, #44]	; (d734 <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    d708:	3a6c      	subs	r2, #108	; 0x6c
    d70a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d70c:	490a      	ldr	r1, [pc, #40]	; (d738 <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    d70e:	3204      	adds	r2, #4
    d710:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d712:	490a      	ldr	r1, [pc, #40]	; (d73c <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    d714:	3260      	adds	r2, #96	; 0x60
    d716:	5099      	str	r1, [r3, r2]
}
    d718:	4770      	bx	lr
    d71a:	46c0      	nop			; (mov r8, r8)
    d71c:	20000d70 	.word	0x20000d70
    d720:	0000c561 	.word	0x0000c561
    d724:	0000c4d5 	.word	0x0000c4d5
    d728:	0000ae85 	.word	0x0000ae85
    d72c:	0000a101 	.word	0x0000a101
    d730:	0000a091 	.word	0x0000a091
    d734:	0000b4c9 	.word	0x0000b4c9
    d738:	0000b455 	.word	0x0000b455
    d73c:	0000b39d 	.word	0x0000b39d

0000d740 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d740:	4b0d      	ldr	r3, [pc, #52]	; (d778 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    d742:	4a0e      	ldr	r2, [pc, #56]	; (d77c <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    d744:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    d746:	4a0e      	ldr	r2, [pc, #56]	; (d780 <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    d748:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    d74a:	4a0e      	ldr	r2, [pc, #56]	; (d784 <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    d74c:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d74e:	4a0e      	ldr	r2, [pc, #56]	; (d788 <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    d750:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d752:	490e      	ldr	r1, [pc, #56]	; (d78c <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    d754:	2280      	movs	r2, #128	; 0x80
    d756:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d758:	490d      	ldr	r1, [pc, #52]	; (d790 <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    d75a:	3204      	adds	r2, #4
    d75c:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d75e:	490d      	ldr	r1, [pc, #52]	; (d794 <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    d760:	324c      	adds	r2, #76	; 0x4c
    d762:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d764:	490c      	ldr	r1, [pc, #48]	; (d798 <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    d766:	3204      	adds	r2, #4
    d768:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d76a:	490c      	ldr	r1, [pc, #48]	; (d79c <LORAREG_InitSetAttrFnPtrsIN+0x5c>)
    d76c:	3210      	adds	r2, #16
    d76e:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d770:	490b      	ldr	r1, [pc, #44]	; (d7a0 <LORAREG_InitSetAttrFnPtrsIN+0x60>)
    d772:	320c      	adds	r2, #12
    d774:	5099      	str	r1, [r3, r2]
}
    d776:	4770      	bx	lr
    d778:	20000d70 	.word	0x20000d70
    d77c:	0000c149 	.word	0x0000c149
    d780:	0000a33d 	.word	0x0000a33d
    d784:	0000afc1 	.word	0x0000afc1
    d788:	0000d8cd 	.word	0x0000d8cd
    d78c:	0000b4c9 	.word	0x0000b4c9
    d790:	0000b455 	.word	0x0000b455
    d794:	0000af1d 	.word	0x0000af1d
    d798:	00009d9d 	.word	0x00009d9d
    d79c:	0000b39d 	.word	0x0000b39d
    d7a0:	00009df1 	.word	0x00009df1

0000d7a4 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d7a4:	4b11      	ldr	r3, [pc, #68]	; (d7ec <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    d7a6:	4a12      	ldr	r2, [pc, #72]	; (d7f0 <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    d7a8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d7aa:	4a12      	ldr	r2, [pc, #72]	; (d7f4 <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    d7ac:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d7ae:	4912      	ldr	r1, [pc, #72]	; (d7f8 <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    d7b0:	2288      	movs	r2, #136	; 0x88
    d7b2:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    d7b4:	4a11      	ldr	r2, [pc, #68]	; (d7fc <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    d7b6:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d7b8:	4911      	ldr	r1, [pc, #68]	; (d800 <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    d7ba:	22d0      	movs	r2, #208	; 0xd0
    d7bc:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d7be:	4a11      	ldr	r2, [pc, #68]	; (d804 <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    d7c0:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d7c2:	4911      	ldr	r1, [pc, #68]	; (d808 <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    d7c4:	2280      	movs	r2, #128	; 0x80
    d7c6:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d7c8:	4910      	ldr	r1, [pc, #64]	; (d80c <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    d7ca:	3204      	adds	r2, #4
    d7cc:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d7ce:	4910      	ldr	r1, [pc, #64]	; (d810 <LORAREG_InitSetAttrFnPtrsJP+0x6c>)
    d7d0:	3250      	adds	r2, #80	; 0x50
    d7d2:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    d7d4:	4a0f      	ldr	r2, [pc, #60]	; (d814 <LORAREG_InitSetAttrFnPtrsJP+0x70>)
    d7d6:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    d7d8:	4a0f      	ldr	r2, [pc, #60]	; (d818 <LORAREG_InitSetAttrFnPtrsJP+0x74>)
    d7da:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d7dc:	490f      	ldr	r1, [pc, #60]	; (d81c <LORAREG_InitSetAttrFnPtrsJP+0x78>)
    d7de:	22e4      	movs	r2, #228	; 0xe4
    d7e0:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d7e2:	490f      	ldr	r1, [pc, #60]	; (d820 <LORAREG_InitSetAttrFnPtrsJP+0x7c>)
    d7e4:	320c      	adds	r2, #12
    d7e6:	5099      	str	r1, [r3, r2]
}
    d7e8:	4770      	bx	lr
    d7ea:	46c0      	nop			; (mov r8, r8)
    d7ec:	20000d70 	.word	0x20000d70
    d7f0:	0000c149 	.word	0x0000c149
    d7f4:	0000a4b5 	.word	0x0000a4b5
    d7f8:	0000bcc9 	.word	0x0000bcc9
    d7fc:	0000afc1 	.word	0x0000afc1
    d800:	0000af1d 	.word	0x0000af1d
    d804:	0000d8cd 	.word	0x0000d8cd
    d808:	0000b4c9 	.word	0x0000b4c9
    d80c:	0000b455 	.word	0x0000b455
    d810:	00009d9d 	.word	0x00009d9d
    d814:	0000b0e5 	.word	0x0000b0e5
    d818:	0000b755 	.word	0x0000b755
    d81c:	0000b39d 	.word	0x0000b39d
    d820:	00009df1 	.word	0x00009df1

0000d824 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    d824:	4b0f      	ldr	r3, [pc, #60]	; (d864 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    d826:	4a10      	ldr	r2, [pc, #64]	; (d868 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    d828:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    d82a:	4a10      	ldr	r2, [pc, #64]	; (d86c <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    d82c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    d82e:	4910      	ldr	r1, [pc, #64]	; (d870 <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    d830:	2288      	movs	r2, #136	; 0x88
    d832:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    d834:	4a0f      	ldr	r2, [pc, #60]	; (d874 <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    d836:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    d838:	490f      	ldr	r1, [pc, #60]	; (d878 <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    d83a:	22d0      	movs	r2, #208	; 0xd0
    d83c:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    d83e:	4a0f      	ldr	r2, [pc, #60]	; (d87c <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    d840:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    d842:	490f      	ldr	r1, [pc, #60]	; (d880 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    d844:	2280      	movs	r2, #128	; 0x80
    d846:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    d848:	490e      	ldr	r1, [pc, #56]	; (d884 <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    d84a:	3204      	adds	r2, #4
    d84c:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    d84e:	490e      	ldr	r1, [pc, #56]	; (d888 <LORAREG_InitSetAttrFnPtrsKR+0x64>)
    d850:	3250      	adds	r2, #80	; 0x50
    d852:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    d854:	490d      	ldr	r1, [pc, #52]	; (d88c <LORAREG_InitSetAttrFnPtrsKR+0x68>)
    d856:	3210      	adds	r2, #16
    d858:	5099      	str	r1, [r3, r2]
	pSetAttr[CHLIST_DEFAULTS] = setChlistDefaultState;
    d85a:	490d      	ldr	r1, [pc, #52]	; (d890 <LORAREG_InitSetAttrFnPtrsKR+0x6c>)
    d85c:	320c      	adds	r2, #12
    d85e:	5099      	str	r1, [r3, r2]
}
    d860:	4770      	bx	lr
    d862:	46c0      	nop			; (mov r8, r8)
    d864:	20000d70 	.word	0x20000d70
    d868:	0000c149 	.word	0x0000c149
    d86c:	0000a4b5 	.word	0x0000a4b5
    d870:	0000bcc9 	.word	0x0000bcc9
    d874:	0000afc1 	.word	0x0000afc1
    d878:	0000af1d 	.word	0x0000af1d
    d87c:	0000d8cd 	.word	0x0000d8cd
    d880:	0000b4c9 	.word	0x0000b4c9
    d884:	0000b455 	.word	0x0000b455
    d888:	00009d9d 	.word	0x00009d9d
    d88c:	0000b39d 	.word	0x0000b39d
    d890:	00009df1 	.word	0x00009df1

0000d894 <LORAREG_GetAttr>:
{
    d894:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d896:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d898:	283c      	cmp	r0, #60	; 0x3c
    d89a:	d901      	bls.n	d8a0 <LORAREG_GetAttr+0xc>
}
    d89c:	0018      	movs	r0, r3
    d89e:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    d8a0:	0084      	lsls	r4, r0, #2
    d8a2:	4b02      	ldr	r3, [pc, #8]	; (d8ac <LORAREG_GetAttr+0x18>)
    d8a4:	58e3      	ldr	r3, [r4, r3]
    d8a6:	4798      	blx	r3
    d8a8:	0003      	movs	r3, r0
    d8aa:	e7f7      	b.n	d89c <LORAREG_GetAttr+0x8>
    d8ac:	20000c7c 	.word	0x20000c7c

0000d8b0 <LORAREG_ValidateAttr>:
{
    d8b0:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d8b2:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d8b4:	283c      	cmp	r0, #60	; 0x3c
    d8b6:	d901      	bls.n	d8bc <LORAREG_ValidateAttr+0xc>
}
    d8b8:	0018      	movs	r0, r3
    d8ba:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    d8bc:	0082      	lsls	r2, r0, #2
    d8be:	4b02      	ldr	r3, [pc, #8]	; (d8c8 <LORAREG_ValidateAttr+0x18>)
    d8c0:	58d3      	ldr	r3, [r2, r3]
    d8c2:	4798      	blx	r3
    d8c4:	0003      	movs	r3, r0
    d8c6:	e7f7      	b.n	d8b8 <LORAREG_ValidateAttr+0x8>
    d8c8:	20000e64 	.word	0x20000e64

0000d8cc <setNewChannel>:
{
    d8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8ce:	46d6      	mov	lr, sl
    d8d0:	464f      	mov	r7, r9
    d8d2:	b580      	push	{r7, lr}
    d8d4:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    d8d6:	232e      	movs	r3, #46	; 0x2e
    d8d8:	4a30      	ldr	r2, [pc, #192]	; (d99c <setNewChannel+0xd0>)
    d8da:	5cd2      	ldrb	r2, [r2, r3]
    d8dc:	4b30      	ldr	r3, [pc, #192]	; (d9a0 <setNewChannel+0xd4>)
    d8de:	4113      	asrs	r3, r2
    d8e0:	07db      	lsls	r3, r3, #31
    d8e2:	d407      	bmi.n	d8f4 <setNewChannel+0x28>
    d8e4:	2a05      	cmp	r2, #5
    d8e6:	d020      	beq.n	d92a <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    d8e8:	2a04      	cmp	r2, #4
    d8ea:	d020      	beq.n	d92e <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    d8ec:	2a0f      	cmp	r2, #15
    d8ee:	d020      	beq.n	d932 <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    d8f0:	4e2c      	ldr	r6, [pc, #176]	; (d9a4 <setNewChannel+0xd8>)
    d8f2:	e000      	b.n	d8f6 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    d8f4:	4e2c      	ldr	r6, [pc, #176]	; (d9a8 <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    d8f6:	ac03      	add	r4, sp, #12
    d8f8:	2204      	movs	r2, #4
    d8fa:	0020      	movs	r0, r4
    d8fc:	4b2b      	ldr	r3, [pc, #172]	; (d9ac <setNewChannel+0xe0>)
    d8fe:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    d900:	8823      	ldrh	r3, [r4, #0]
    d902:	aa02      	add	r2, sp, #8
    d904:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    d906:	78a4      	ldrb	r4, [r4, #2]
    d908:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    d90a:	0011      	movs	r1, r2
    d90c:	2038      	movs	r0, #56	; 0x38
    d90e:	4b28      	ldr	r3, [pc, #160]	; (d9b0 <setNewChannel+0xe4>)
    d910:	4798      	blx	r3
    d912:	0003      	movs	r3, r0
    d914:	9001      	str	r0, [sp, #4]
    d916:	2808      	cmp	r0, #8
    d918:	d00d      	beq.n	d936 <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    d91a:	230a      	movs	r3, #10
    d91c:	9301      	str	r3, [sp, #4]
}
    d91e:	9801      	ldr	r0, [sp, #4]
    d920:	b005      	add	sp, #20
    d922:	bc0c      	pop	{r2, r3}
    d924:	4691      	mov	r9, r2
    d926:	469a      	mov	sl, r3
    d928:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    d92a:	4e1f      	ldr	r6, [pc, #124]	; (d9a8 <setNewChannel+0xdc>)
    d92c:	e7e3      	b.n	d8f6 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    d92e:	4e21      	ldr	r6, [pc, #132]	; (d9b4 <setNewChannel+0xe8>)
    d930:	e7e1      	b.n	d8f6 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    d932:	4e21      	ldr	r6, [pc, #132]	; (d9b8 <setNewChannel+0xec>)
    d934:	e7df      	b.n	d8f6 <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    d936:	2c06      	cmp	r4, #6
    d938:	d00b      	beq.n	d952 <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    d93a:	2c00      	cmp	r4, #0
    d93c:	d1ef      	bne.n	d91e <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    d93e:	232a      	movs	r3, #42	; 0x2a
    d940:	4a16      	ldr	r2, [pc, #88]	; (d99c <setNewChannel+0xd0>)
    d942:	56d3      	ldrsb	r3, [r2, r3]
    d944:	2b00      	cmp	r3, #0
    d946:	ddea      	ble.n	d91e <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    d948:	af03      	add	r7, sp, #12
    d94a:	2301      	movs	r3, #1
    d94c:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    d94e:	4692      	mov	sl, r2
    d950:	e01c      	b.n	d98c <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    d952:	3322      	adds	r3, #34	; 0x22
    d954:	4a11      	ldr	r2, [pc, #68]	; (d99c <setNewChannel+0xd0>)
    d956:	56d3      	ldrsb	r3, [r2, r3]
    d958:	2b00      	cmp	r3, #0
    d95a:	dde0      	ble.n	d91e <setNewChannel+0x52>
    d95c:	2400      	movs	r4, #0
    d95e:	0017      	movs	r7, r2
    d960:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    d962:	2101      	movs	r1, #1
    d964:	0020      	movs	r0, r4
    d966:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    d968:	3401      	adds	r4, #1
    d96a:	b2e4      	uxtb	r4, r4
    d96c:	577b      	ldrsb	r3, [r7, r5]
    d96e:	429c      	cmp	r4, r3
    d970:	dbf7      	blt.n	d962 <setNewChannel+0x96>
    d972:	e7d4      	b.n	d91e <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    d974:	2100      	movs	r1, #0
    d976:	0020      	movs	r0, r4
    d978:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    d97a:	086d      	lsrs	r5, r5, #1
    d97c:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    d97e:	3401      	adds	r4, #1
    d980:	b2e4      	uxtb	r4, r4
    d982:	232a      	movs	r3, #42	; 0x2a
    d984:	4652      	mov	r2, sl
    d986:	56d3      	ldrsb	r3, [r2, r3]
    d988:	429c      	cmp	r4, r3
    d98a:	dac8      	bge.n	d91e <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    d98c:	883d      	ldrh	r5, [r7, #0]
    d98e:	464b      	mov	r3, r9
    d990:	422b      	tst	r3, r5
    d992:	d0ef      	beq.n	d974 <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    d994:	4649      	mov	r1, r9
    d996:	0020      	movs	r0, r4
    d998:	47b0      	blx	r6
    d99a:	e7ee      	b.n	d97a <setNewChannel+0xae>
    d99c:	200024d0 	.word	0x200024d0
    d9a0:	00007fc0 	.word	0x00007fc0
    d9a4:	0000a229 	.word	0x0000a229
    d9a8:	0000a43d 	.word	0x0000a43d
    d9ac:	00019d1d 	.word	0x00019d1d
    d9b0:	0000d8b1 	.word	0x0000d8b1
    d9b4:	0000a391 	.word	0x0000a391
    d9b8:	0000a181 	.word	0x0000a181

0000d9bc <LORAREG_SetAttr>:
{
    d9bc:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    d9be:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    d9c0:	283c      	cmp	r0, #60	; 0x3c
    d9c2:	d901      	bls.n	d9c8 <LORAREG_SetAttr+0xc>
}
    d9c4:	0018      	movs	r0, r3
    d9c6:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    d9c8:	0082      	lsls	r2, r0, #2
    d9ca:	4b02      	ldr	r3, [pc, #8]	; (d9d4 <LORAREG_SetAttr+0x18>)
    d9cc:	58d3      	ldr	r3, [r2, r3]
    d9ce:	4798      	blx	r3
    d9d0:	0003      	movs	r3, r0
    d9d2:	e7f7      	b.n	d9c4 <LORAREG_SetAttr+0x8>
    d9d4:	20000d70 	.word	0x20000d70

0000d9d8 <CreateAllRegSoftwareTimers>:
{
    d9d8:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    d9da:	4809      	ldr	r0, [pc, #36]	; (da00 <CreateAllRegSoftwareTimers+0x28>)
    d9dc:	4b09      	ldr	r3, [pc, #36]	; (da04 <CreateAllRegSoftwareTimers+0x2c>)
    d9de:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    d9e0:	2808      	cmp	r0, #8
    d9e2:	d10c      	bne.n	d9fe <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    d9e4:	4808      	ldr	r0, [pc, #32]	; (da08 <CreateAllRegSoftwareTimers+0x30>)
    d9e6:	4b07      	ldr	r3, [pc, #28]	; (da04 <CreateAllRegSoftwareTimers+0x2c>)
    d9e8:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    d9ea:	2808      	cmp	r0, #8
    d9ec:	d107      	bne.n	d9fe <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    d9ee:	4807      	ldr	r0, [pc, #28]	; (da0c <CreateAllRegSoftwareTimers+0x34>)
    d9f0:	4b04      	ldr	r3, [pc, #16]	; (da04 <CreateAllRegSoftwareTimers+0x2c>)
    d9f2:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    d9f4:	2808      	cmp	r0, #8
    d9f6:	d102      	bne.n	d9fe <CreateAllRegSoftwareTimers+0x26>
			status = SwTimerCreate(&regTimerId[i]);
    d9f8:	4805      	ldr	r0, [pc, #20]	; (da10 <CreateAllRegSoftwareTimers+0x38>)
    d9fa:	4b02      	ldr	r3, [pc, #8]	; (da04 <CreateAllRegSoftwareTimers+0x2c>)
    d9fc:	4798      	blx	r3
}
    d9fe:	bd10      	pop	{r4, pc}
    da00:	200024cc 	.word	0x200024cc
    da04:	0000ed6d 	.word	0x0000ed6d
    da08:	200024cd 	.word	0x200024cd
    da0c:	200024ce 	.word	0x200024ce
    da10:	200024cf 	.word	0x200024cf

0000da14 <StopAllRegSoftwareTimers>:
{
    da14:	b570      	push	{r4, r5, r6, lr}
    da16:	2400      	movs	r4, #0
		SwTimerStop(regTimerId[i]);
    da18:	4e03      	ldr	r6, [pc, #12]	; (da28 <StopAllRegSoftwareTimers+0x14>)
    da1a:	4d04      	ldr	r5, [pc, #16]	; (da2c <StopAllRegSoftwareTimers+0x18>)
    da1c:	5d30      	ldrb	r0, [r6, r4]
    da1e:	47a8      	blx	r5
    da20:	3401      	adds	r4, #1
	for (uint8_t i=0; i< REG_PARAMS_TIMERS_COUNT; i++)
    da22:	2c04      	cmp	r4, #4
    da24:	d1fa      	bne.n	da1c <StopAllRegSoftwareTimers+0x8>
}
    da26:	bd70      	pop	{r4, r5, r6, pc}
    da28:	200024cc 	.word	0x200024cc
    da2c:	0000f0b9 	.word	0x0000f0b9

0000da30 <LORAREG_Init>:
{	
    da30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da32:	0007      	movs	r7, r0
	if(!initialized)
    da34:	4b24      	ldr	r3, [pc, #144]	; (dac8 <LORAREG_Init+0x98>)
    da36:	781b      	ldrb	r3, [r3, #0]
    da38:	2b00      	cmp	r3, #0
    da3a:	d109      	bne.n	da50 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    da3c:	4b23      	ldr	r3, [pc, #140]	; (dacc <LORAREG_Init+0x9c>)
    da3e:	4798      	blx	r3
    da40:	2808      	cmp	r0, #8
    da42:	d001      	beq.n	da48 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    da44:	2014      	movs	r0, #20
    da46:	e006      	b.n	da56 <LORAREG_Init+0x26>
			initialized = true;
    da48:	2201      	movs	r2, #1
    da4a:	4b1f      	ldr	r3, [pc, #124]	; (dac8 <LORAREG_Init+0x98>)
    da4c:	701a      	strb	r2, [r3, #0]
    da4e:	e002      	b.n	da56 <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    da50:	4b1f      	ldr	r3, [pc, #124]	; (dad0 <LORAREG_Init+0xa0>)
    da52:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    da54:	2008      	movs	r0, #8
    da56:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    da58:	4e1e      	ldr	r6, [pc, #120]	; (dad4 <LORAREG_Init+0xa4>)
    da5a:	4d1f      	ldr	r5, [pc, #124]	; (dad8 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    da5c:	4c1f      	ldr	r4, [pc, #124]	; (dadc <LORAREG_Init+0xac>)
    da5e:	4a20      	ldr	r2, [pc, #128]	; (dae0 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    da60:	4920      	ldr	r1, [pc, #128]	; (dae4 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    da62:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    da64:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    da66:	505a      	str	r2, [r3, r1]
    da68:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    da6a:	2bf4      	cmp	r3, #244	; 0xf4
    da6c:	d1f9      	bne.n	da62 <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    da6e:	2f02      	cmp	r7, #2
    da70:	d00d      	beq.n	da8e <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    da72:	2f01      	cmp	r7, #1
    da74:	d90f      	bls.n	da96 <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    da76:	1fbb      	subs	r3, r7, #6
    da78:	2b08      	cmp	r3, #8
    da7a:	d910      	bls.n	da9e <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    da7c:	2f03      	cmp	r7, #3
    da7e:	d012      	beq.n	daa6 <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    da80:	2f0f      	cmp	r7, #15
    da82:	d014      	beq.n	daae <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    da84:	2f05      	cmp	r7, #5
    da86:	d016      	beq.n	dab6 <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    da88:	2f04      	cmp	r7, #4
    da8a:	d018      	beq.n	dabe <LORAREG_Init+0x8e>
}
    da8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    da8e:	2002      	movs	r0, #2
    da90:	4b15      	ldr	r3, [pc, #84]	; (dae8 <LORAREG_Init+0xb8>)
    da92:	4798      	blx	r3
    da94:	e7fa      	b.n	da8c <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    da96:	0038      	movs	r0, r7
    da98:	4b14      	ldr	r3, [pc, #80]	; (daec <LORAREG_Init+0xbc>)
    da9a:	4798      	blx	r3
    da9c:	e7f6      	b.n	da8c <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    da9e:	0038      	movs	r0, r7
    daa0:	4b13      	ldr	r3, [pc, #76]	; (daf0 <LORAREG_Init+0xc0>)
    daa2:	4798      	blx	r3
    daa4:	e7f2      	b.n	da8c <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    daa6:	2003      	movs	r0, #3
    daa8:	4b12      	ldr	r3, [pc, #72]	; (daf4 <LORAREG_Init+0xc4>)
    daaa:	4798      	blx	r3
    daac:	e7ee      	b.n	da8c <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    daae:	200f      	movs	r0, #15
    dab0:	4b11      	ldr	r3, [pc, #68]	; (daf8 <LORAREG_Init+0xc8>)
    dab2:	4798      	blx	r3
    dab4:	e7ea      	b.n	da8c <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    dab6:	2005      	movs	r0, #5
    dab8:	4b10      	ldr	r3, [pc, #64]	; (dafc <LORAREG_Init+0xcc>)
    daba:	4798      	blx	r3
    dabc:	e7e6      	b.n	da8c <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    dabe:	2004      	movs	r0, #4
    dac0:	4b0f      	ldr	r3, [pc, #60]	; (db00 <LORAREG_Init+0xd0>)
    dac2:	4798      	blx	r3
    dac4:	e7e2      	b.n	da8c <LORAREG_Init+0x5c>
    dac6:	46c0      	nop			; (mov r8, r8)
    dac8:	20000c79 	.word	0x20000c79
    dacc:	0000d9d9 	.word	0x0000d9d9
    dad0:	0000da15 	.word	0x0000da15
    dad4:	20000c7c 	.word	0x20000c7c
    dad8:	000096cd 	.word	0x000096cd
    dadc:	20000e64 	.word	0x20000e64
    dae0:	000096d1 	.word	0x000096d1
    dae4:	20000d70 	.word	0x20000d70
    dae8:	00009489 	.word	0x00009489
    daec:	000089d9 	.word	0x000089d9
    daf0:	000084e1 	.word	0x000084e1
    daf4:	00008779 	.word	0x00008779
    daf8:	00008cc9 	.word	0x00008cc9
    dafc:	00008edd 	.word	0x00008edd
    db00:	00009191 	.word	0x00009191

0000db04 <LORAREG_SupportedBands>:
	*bands = value;
    db04:	2301      	movs	r3, #1
    db06:	425b      	negs	r3, r3
    db08:	8003      	strh	r3, [r0, #0]
}
    db0a:	2008      	movs	r0, #8
    db0c:	4770      	bx	lr
	...

0000db10 <LORAREG_UnInit>:
{
    db10:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    db12:	4b0d      	ldr	r3, [pc, #52]	; (db48 <LORAREG_UnInit+0x38>)
    db14:	4798      	blx	r3
	if(RegParams.regParamItems.fileid)
    db16:	4b0d      	ldr	r3, [pc, #52]	; (db4c <LORAREG_UnInit+0x3c>)
    db18:	4a0d      	ldr	r2, [pc, #52]	; (db50 <LORAREG_UnInit+0x40>)
    db1a:	5cd0      	ldrb	r0, [r2, r3]
    db1c:	2800      	cmp	r0, #0
    db1e:	d107      	bne.n	db30 <LORAREG_UnInit+0x20>
	memset(&RegParams,0,sizeof(RegParams_t));
    db20:	2285      	movs	r2, #133	; 0x85
    db22:	0092      	lsls	r2, r2, #2
    db24:	2100      	movs	r1, #0
    db26:	480a      	ldr	r0, [pc, #40]	; (db50 <LORAREG_UnInit+0x40>)
    db28:	4b0a      	ldr	r3, [pc, #40]	; (db54 <LORAREG_UnInit+0x44>)
    db2a:	4798      	blx	r3
}
    db2c:	200a      	movs	r0, #10
    db2e:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    db30:	4b09      	ldr	r3, [pc, #36]	; (db58 <LORAREG_UnInit+0x48>)
    db32:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    db34:	232e      	movs	r3, #46	; 0x2e
    db36:	4a06      	ldr	r2, [pc, #24]	; (db50 <LORAREG_UnInit+0x40>)
    db38:	5cd3      	ldrb	r3, [r2, r3]
    db3a:	2b00      	cmp	r3, #0
    db3c:	d1f0      	bne.n	db20 <LORAREG_UnInit+0x10>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    db3e:	200b      	movs	r0, #11
    db40:	4b05      	ldr	r3, [pc, #20]	; (db58 <LORAREG_UnInit+0x48>)
    db42:	4798      	blx	r3
    db44:	e7ec      	b.n	db20 <LORAREG_UnInit+0x10>
    db46:	46c0      	nop			; (mov r8, r8)
    db48:	0000da15 	.word	0x0000da15
    db4c:	0000020b 	.word	0x0000020b
    db50:	200024d0 	.word	0x200024d0
    db54:	00019e41 	.word	0x00019e41
    db58:	0000e395 	.word	0x0000e395

0000db5c <sal_FillSubKey>:
		}
	}
}

static void sal_FillSubKey( uint8_t *source, uint8_t *key, uint8_t size)
{
    db5c:	b530      	push	{r4, r5, lr}
	uint8_t i = 0;
	uint8_t carry = 0;

	i=size;

	while(i--)
    db5e:	1e53      	subs	r3, r2, #1
    db60:	b2db      	uxtb	r3, r3
    db62:	2a00      	cmp	r2, #0
    db64:	d00b      	beq.n	db7e <sal_FillSubKey+0x22>
    db66:	2400      	movs	r4, #0
	{
		key[i] = (source[i] << 1) | carry;
    db68:	18c5      	adds	r5, r0, r3
    db6a:	782a      	ldrb	r2, [r5, #0]
    db6c:	0052      	lsls	r2, r2, #1
    db6e:	4322      	orrs	r2, r4
    db70:	54ca      	strb	r2, [r1, r3]
		carry = !!(source[i] & 0x80);
    db72:	782c      	ldrb	r4, [r5, #0]
    db74:	09e4      	lsrs	r4, r4, #7
	while(i--)
    db76:	3b01      	subs	r3, #1
    db78:	b2db      	uxtb	r3, r3
    db7a:	2bff      	cmp	r3, #255	; 0xff
    db7c:	d1f4      	bne.n	db68 <sal_FillSubKey+0xc>
	}
}
    db7e:	bd30      	pop	{r4, r5, pc}

0000db80 <SAL_Init>:
{
    db80:	b510      	push	{r4, lr}
    db82:	b082      	sub	sp, #8
    db84:	0004      	movs	r4, r0
	useCryptoDev = useECC608 ;
    db86:	4b19      	ldr	r3, [pc, #100]	; (dbec <SAL_Init+0x6c>)
    db88:	7018      	strb	r0, [r3, #0]
	AESInit();
    db8a:	4b19      	ldr	r3, [pc, #100]	; (dbf0 <SAL_Init+0x70>)
    db8c:	4798      	blx	r3
	SalStatus_t sal_status = SAL_SUCCESS;
    db8e:	2000      	movs	r0, #0
	if (true == useECC608)
    db90:	2c00      	cmp	r4, #0
    db92:	d101      	bne.n	db98 <SAL_Init+0x18>
}
    db94:	b002      	add	sp, #8
    db96:	bd10      	pop	{r4, pc}
		cfg_atecc608a_i2c_default .iface_type            = ATCA_I2C_IFACE;
    db98:	4816      	ldr	r0, [pc, #88]	; (dbf4 <SAL_Init+0x74>)
    db9a:	2300      	movs	r3, #0
    db9c:	7003      	strb	r3, [r0, #0]
		cfg_atecc608a_i2c_default.devtype                = ATECC608A;
    db9e:	3303      	adds	r3, #3
    dba0:	7043      	strb	r3, [r0, #1]
		cfg_atecc608a_i2c_default.atcai2c.slave_address  = ATCAD_SLAVE_I2C_ADDRESS;
    dba2:	33af      	adds	r3, #175	; 0xaf
    dba4:	7103      	strb	r3, [r0, #4]
		cfg_atecc608a_i2c_default.atcai2c.bus            = ATCAD_HOST_I2C_SERCOM;
    dba6:	3bb1      	subs	r3, #177	; 0xb1
    dba8:	7143      	strb	r3, [r0, #5]
		cfg_atecc608a_i2c_default.atcai2c.baud           = ATCAD_HOST_I2C_BAUDRATE;
    dbaa:	4b13      	ldr	r3, [pc, #76]	; (dbf8 <SAL_Init+0x78>)
    dbac:	6083      	str	r3, [r0, #8]
		cfg_atecc608a_i2c_default.wake_delay             = 1500;
    dbae:	4b13      	ldr	r3, [pc, #76]	; (dbfc <SAL_Init+0x7c>)
    dbb0:	8483      	strh	r3, [r0, #36]	; 0x24
		cfg_atecc608a_i2c_default.rx_retries             = 20;
    dbb2:	2314      	movs	r3, #20
    dbb4:	6283      	str	r3, [r0, #40]	; 0x28
		status = atcab_init( &cfg_atecc608a_i2c_default );
    dbb6:	4b12      	ldr	r3, [pc, #72]	; (dc00 <SAL_Init+0x80>)
    dbb8:	4798      	blx	r3
    dbba:	0003      	movs	r3, r0
	SalStatus_t sal_status = SAL_SUCCESS;
    dbbc:	2000      	movs	r0, #0
		if (ATCA_SUCCESS == status )
    dbbe:	2b00      	cmp	r3, #0
    dbc0:	d1e8      	bne.n	db94 <SAL_Init+0x14>
	 *
     * \param[out] rand_out  32 bytes of random data is returned here.
     *
     * \return ATCA_SUCCESS on success, otherwise an error code.
     */
	status = atcab_random((uint8_t *)&keyEncryptionKey[0]);
    dbc2:	4810      	ldr	r0, [pc, #64]	; (dc04 <SAL_Init+0x84>)
    dbc4:	4b10      	ldr	r3, [pc, #64]	; (dc08 <SAL_Init+0x88>)
    dbc6:	4798      	blx	r3

	if (ATCA_SUCCESS == status)
    dbc8:	2800      	cmp	r0, #0
    dbca:	d003      	beq.n	dbd4 <SAL_Init+0x54>
	{
		/* Write Key Encryption Key of 32 Bytes in KEK_SLOT */
		status = atcab_write_zone(ATCA_ZONE_DATA, KEK_SLOT, 0, 0, keyEncryptionKey, 32);
	}
	
	if (ATCA_SUCCESS != status)
    dbcc:	1e43      	subs	r3, r0, #1
    dbce:	4198      	sbcs	r0, r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dbd0:	b2c0      	uxtb	r0, r0
    dbd2:	e7df      	b.n	db94 <SAL_Init+0x14>
		status = atcab_write_zone(ATCA_ZONE_DATA, KEK_SLOT, 0, 0, keyEncryptionKey, 32);
    dbd4:	2320      	movs	r3, #32
    dbd6:	9301      	str	r3, [sp, #4]
    dbd8:	4b0a      	ldr	r3, [pc, #40]	; (dc04 <SAL_Init+0x84>)
    dbda:	9300      	str	r3, [sp, #0]
    dbdc:	2300      	movs	r3, #0
    dbde:	2200      	movs	r2, #0
    dbe0:	210e      	movs	r1, #14
    dbe2:	3002      	adds	r0, #2
    dbe4:	4c09      	ldr	r4, [pc, #36]	; (dc0c <SAL_Init+0x8c>)
    dbe6:	47a0      	blx	r4
    dbe8:	e7f0      	b.n	dbcc <SAL_Init+0x4c>
    dbea:	46c0      	nop			; (mov r8, r8)
    dbec:	20000fa8 	.word	0x20000fa8
    dbf0:	0000e021 	.word	0x0000e021
    dbf4:	20000f58 	.word	0x20000f58
    dbf8:	00061a80 	.word	0x00061a80
    dbfc:	000005dc 	.word	0x000005dc
    dc00:	00000129 	.word	0x00000129
    dc04:	20000f88 	.word	0x20000f88
    dc08:	00000501 	.word	0x00000501
    dc0c:	0000090d 	.word	0x0000090d

0000dc10 <SAL_AESEncode>:
{
    dc10:	b530      	push	{r4, r5, lr}
    dc12:	b089      	sub	sp, #36	; 0x24
    dc14:	0004      	movs	r4, r0
    dc16:	0015      	movs	r5, r2
if (!useCryptoDev)
    dc18:	4b18      	ldr	r3, [pc, #96]	; (dc7c <SAL_AESEncode+0x6c>)
    dc1a:	781b      	ldrb	r3, [r3, #0]
    dc1c:	2b00      	cmp	r3, #0
    dc1e:	d010      	beq.n	dc42 <SAL_AESEncode+0x32>
	switch(key_type)
    dc20:	2900      	cmp	r1, #0
    dc22:	d019      	beq.n	dc58 <SAL_AESEncode+0x48>
			sal_status = SAL_INVALID_KEY_TYPE;
    dc24:	2002      	movs	r0, #2
	switch(key_type)
    dc26:	2904      	cmp	r1, #4
    dc28:	d809      	bhi.n	dc3e <SAL_AESEncode+0x2e>
			memcpy(useKey, key, sizeof(useKey));
    dc2a:	2210      	movs	r2, #16
    dc2c:	0029      	movs	r1, r5
    dc2e:	a804      	add	r0, sp, #16
    dc30:	4b13      	ldr	r3, [pc, #76]	; (dc80 <SAL_AESEncode+0x70>)
    dc32:	4798      	blx	r3
			AESEncode(buffer, useKey);
    dc34:	a904      	add	r1, sp, #16
    dc36:	0020      	movs	r0, r4
    dc38:	4b12      	ldr	r3, [pc, #72]	; (dc84 <SAL_AESEncode+0x74>)
    dc3a:	4798      	blx	r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dc3c:	2000      	movs	r0, #0
}
    dc3e:	b009      	add	sp, #36	; 0x24
    dc40:	bd30      	pop	{r4, r5, pc}
	memcpy(useKey, key, sizeof(useKey));
    dc42:	2210      	movs	r2, #16
    dc44:	0029      	movs	r1, r5
    dc46:	a804      	add	r0, sp, #16
    dc48:	4b0d      	ldr	r3, [pc, #52]	; (dc80 <SAL_AESEncode+0x70>)
    dc4a:	4798      	blx	r3
	AESEncode(buffer, useKey);
    dc4c:	a904      	add	r1, sp, #16
    dc4e:	0020      	movs	r0, r4
    dc50:	4b0c      	ldr	r3, [pc, #48]	; (dc84 <SAL_AESEncode+0x74>)
    dc52:	4798      	blx	r3
	SalStatus_t sal_status = SAL_SUCCESS;
    dc54:	2000      	movs	r0, #0
    dc56:	e7f2      	b.n	dc3e <SAL_AESEncode+0x2e>
			atcab_status = atcab_aes_encrypt(keySlot, APP_KEY_SLOT_BLOCK, buffer, encData);
    dc58:	466b      	mov	r3, sp
    dc5a:	0002      	movs	r2, r0
    dc5c:	2101      	movs	r1, #1
    dc5e:	2000      	movs	r0, #0
    dc60:	4d09      	ldr	r5, [pc, #36]	; (dc88 <SAL_AESEncode+0x78>)
    dc62:	47a8      	blx	r5
    dc64:	0003      	movs	r3, r0
				sal_status = SAL_FAILURE;
    dc66:	2001      	movs	r0, #1
			if (atcab_status == ATCA_SUCCESS)
    dc68:	2b00      	cmp	r3, #0
    dc6a:	d1e8      	bne.n	dc3e <SAL_AESEncode+0x2e>
				memcpy(buffer, encData, sizeof(encData));
    dc6c:	2210      	movs	r2, #16
    dc6e:	4669      	mov	r1, sp
    dc70:	0020      	movs	r0, r4
    dc72:	4b03      	ldr	r3, [pc, #12]	; (dc80 <SAL_AESEncode+0x70>)
    dc74:	4798      	blx	r3
				sal_status = SAL_SUCCESS;
    dc76:	2000      	movs	r0, #0
    dc78:	e7e1      	b.n	dc3e <SAL_AESEncode+0x2e>
    dc7a:	46c0      	nop			; (mov r8, r8)
    dc7c:	20000fa8 	.word	0x20000fa8
    dc80:	00019d1d 	.word	0x00019d1d
    dc84:	0000df45 	.word	0x0000df45
    dc88:	000002e9 	.word	0x000002e9

0000dc8c <SAL_DeriveSessionKey>:
{
    dc8c:	b510      	push	{r4, lr}
    dc8e:	b082      	sub	sp, #8
if (!useCryptoDev)
    dc90:	4c0c      	ldr	r4, [pc, #48]	; (dcc4 <SAL_DeriveSessionKey+0x38>)
    dc92:	7824      	ldrb	r4, [r4, #0]
    dc94:	2c00      	cmp	r4, #0
    dc96:	d012      	beq.n	dcbe <SAL_DeriveSessionKey+0x32>
	if (SAL_APP_KEY == src_key)
    dc98:	424a      	negs	r2, r1
    dc9a:	414a      	adcs	r2, r1
	uint8_t target_slot = keySlots[target_key];// Slot of Target Session Key which is being derived
    dc9c:	4c0a      	ldr	r4, [pc, #40]	; (dcc8 <SAL_DeriveSessionKey+0x3c>)
	uint16_t key_id = (target_slot << 8) | source_slot; //2 Byte key_id denotes Source and Target slot values (Target Slot(1 Byte) | Source Slot (1Byte))
    dc9e:	5ce3      	ldrb	r3, [r4, r3]
    dca0:	021b      	lsls	r3, r3, #8
    dca2:	5c61      	ldrb	r1, [r4, r1]
	 atcad_status = atcab_kdf(derive_mode, key_id, aes_details, block, NULL, NULL);
    dca4:	4319      	orrs	r1, r3
    dca6:	2300      	movs	r3, #0
    dca8:	9301      	str	r3, [sp, #4]
    dcaa:	9300      	str	r3, [sp, #0]
    dcac:	0003      	movs	r3, r0
    dcae:	202a      	movs	r0, #42	; 0x2a
    dcb0:	4c06      	ldr	r4, [pc, #24]	; (dccc <SAL_DeriveSessionKey+0x40>)
    dcb2:	47a0      	blx	r4
	 if(ATCA_SUCCESS != atcad_status)
    dcb4:	1e43      	subs	r3, r0, #1
    dcb6:	4198      	sbcs	r0, r3
	sal_status = SAL_AESEncode(block, src_key, key);
    dcb8:	b2c0      	uxtb	r0, r0
}
    dcba:	b002      	add	sp, #8
    dcbc:	bd10      	pop	{r4, pc}
	sal_status = SAL_AESEncode(block, src_key, key);
    dcbe:	4b04      	ldr	r3, [pc, #16]	; (dcd0 <SAL_DeriveSessionKey+0x44>)
    dcc0:	4798      	blx	r3
    dcc2:	e7fa      	b.n	dcba <SAL_DeriveSessionKey+0x2e>
    dcc4:	20000fa8 	.word	0x20000fa8
    dcc8:	00020148 	.word	0x00020148
    dccc:	0000038d 	.word	0x0000038d
    dcd0:	0000dc11 	.word	0x0000dc11

0000dcd4 <SAL_Read>:
{
    dcd4:	b530      	push	{r4, r5, lr}
    dcd6:	b089      	sub	sp, #36	; 0x24
    dcd8:	000c      	movs	r4, r1
if (useCryptoDev)
    dcda:	4b21      	ldr	r3, [pc, #132]	; (dd60 <SAL_Read+0x8c>)
    dcdc:	781a      	ldrb	r2, [r3, #0]
	SalStatus_t sal_status = SAL_SUCCESS;
    dcde:	2300      	movs	r3, #0
if (useCryptoDev)
    dce0:	2a00      	cmp	r2, #0
    dce2:	d014      	beq.n	dd0e <SAL_Read+0x3a>
	uint8_t keyId = keySlots[key_type];
    dce4:	4b1f      	ldr	r3, [pc, #124]	; (dd64 <SAL_Read+0x90>)
    dce6:	5c19      	ldrb	r1, [r3, r0]
	switch(key_type)
    dce8:	2806      	cmp	r0, #6
    dcea:	d02b      	beq.n	dd44 <SAL_Read+0x70>
    dcec:	d812      	bhi.n	dd14 <SAL_Read+0x40>
    dcee:	3801      	subs	r0, #1
    dcf0:	2803      	cmp	r0, #3
    dcf2:	d832      	bhi.n	dd5a <SAL_Read+0x86>
			status = atcab_read_enc(keyId, block, key, &keyEncryptionKey[0], KEK_SLOT);
    dcf4:	b288      	uxth	r0, r1
    dcf6:	230e      	movs	r3, #14
    dcf8:	9300      	str	r3, [sp, #0]
    dcfa:	4b1b      	ldr	r3, [pc, #108]	; (dd68 <SAL_Read+0x94>)
    dcfc:	0022      	movs	r2, r4
    dcfe:	2100      	movs	r1, #0
    dd00:	4c1a      	ldr	r4, [pc, #104]	; (dd6c <SAL_Read+0x98>)
    dd02:	47a0      	blx	r4
    dd04:	0005      	movs	r5, r0
	SalStatus_t sal_status = SAL_SUCCESS;
    dd06:	2300      	movs	r3, #0
	if (ATCA_SUCCESS != status)
    dd08:	2d00      	cmp	r5, #0
    dd0a:	d000      	beq.n	dd0e <SAL_Read+0x3a>
		sal_status = SAL_FAILURE;
    dd0c:	2301      	movs	r3, #1
}
    dd0e:	0018      	movs	r0, r3
    dd10:	b009      	add	sp, #36	; 0x24
    dd12:	bd30      	pop	{r4, r5, pc}
	switch(key_type)
    dd14:	2807      	cmp	r0, #7
    dd16:	d120      	bne.n	dd5a <SAL_Read+0x86>
			size_t bin_size = SAL_EUI_LEN ;
    dd18:	2308      	movs	r3, #8
    dd1a:	9303      	str	r3, [sp, #12]
			status = atcab_read_bytes_zone(ATCA_ZONE_DATA, DEV_EUI_SLOT, 0, devEUIascii, 16) ;
    dd1c:	3308      	adds	r3, #8
    dd1e:	9300      	str	r3, [sp, #0]
    dd20:	ab04      	add	r3, sp, #16
    dd22:	2200      	movs	r2, #0
    dd24:	210a      	movs	r1, #10
    dd26:	2002      	movs	r0, #2
    dd28:	4d11      	ldr	r5, [pc, #68]	; (dd70 <SAL_Read+0x9c>)
    dd2a:	47a8      	blx	r5
    dd2c:	0005      	movs	r5, r0
			atcab_hex2bin((char*)devEUIascii, strlen((char*)devEUIascii), key, &bin_size) ;		
    dd2e:	a804      	add	r0, sp, #16
    dd30:	4b10      	ldr	r3, [pc, #64]	; (dd74 <SAL_Read+0xa0>)
    dd32:	4798      	blx	r3
    dd34:	0001      	movs	r1, r0
    dd36:	ab03      	add	r3, sp, #12
    dd38:	0022      	movs	r2, r4
    dd3a:	a804      	add	r0, sp, #16
    dd3c:	4c0e      	ldr	r4, [pc, #56]	; (dd78 <SAL_Read+0xa4>)
    dd3e:	47a0      	blx	r4
	SalStatus_t sal_status = SAL_SUCCESS;
    dd40:	2300      	movs	r3, #0
		break;
    dd42:	e7e1      	b.n	dd08 <SAL_Read+0x34>
			status = atcab_read_bytes_zone(ATCA_ZONE_DATA, keyId, 0, key, SAL_EUI_LEN);
    dd44:	b289      	uxth	r1, r1
    dd46:	2308      	movs	r3, #8
    dd48:	9300      	str	r3, [sp, #0]
    dd4a:	0023      	movs	r3, r4
    dd4c:	2200      	movs	r2, #0
    dd4e:	2002      	movs	r0, #2
    dd50:	4c07      	ldr	r4, [pc, #28]	; (dd70 <SAL_Read+0x9c>)
    dd52:	47a0      	blx	r4
    dd54:	0005      	movs	r5, r0
	SalStatus_t sal_status = SAL_SUCCESS;
    dd56:	2300      	movs	r3, #0
		break;
    dd58:	e7d6      	b.n	dd08 <SAL_Read+0x34>
	ATCA_STATUS status = ATCA_SUCCESS;
    dd5a:	2500      	movs	r5, #0
			sal_status = SAL_INVALID_KEY_TYPE;
    dd5c:	2302      	movs	r3, #2
    dd5e:	e7d3      	b.n	dd08 <SAL_Read+0x34>
    dd60:	20000fa8 	.word	0x20000fa8
    dd64:	00020148 	.word	0x00020148
    dd68:	20000f88 	.word	0x20000f88
    dd6c:	00000659 	.word	0x00000659
    dd70:	0000077d 	.word	0x0000077d
    dd74:	0001a275 	.word	0x0001a275
    dd78:	00000df9 	.word	0x00000df9

0000dd7c <SAL_AESCmac>:
{
    dd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd7e:	46d6      	mov	lr, sl
    dd80:	464f      	mov	r7, r9
    dd82:	4646      	mov	r6, r8
    dd84:	b5c0      	push	{r6, r7, lr}
    dd86:	b0a4      	sub	sp, #144	; 0x90
    dd88:	9001      	str	r0, [sp, #4]
    dd8a:	000f      	movs	r7, r1
    dd8c:	9102      	str	r1, [sp, #8]
    dd8e:	9203      	str	r2, [sp, #12]
    dd90:	469a      	mov	sl, r3
    dd92:	ab2c      	add	r3, sp, #176	; 0xb0
    dd94:	881c      	ldrh	r4, [r3, #0]
	uint8_t const_Rb[16] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    dd96:	ae08      	add	r6, sp, #32
    dd98:	2210      	movs	r2, #16
    dd9a:	2100      	movs	r1, #0
    dd9c:	0030      	movs	r0, r6
    dd9e:	4d64      	ldr	r5, [pc, #400]	; (df30 <SAL_AESCmac+0x1b4>)
    dda0:	47a8      	blx	r5
    dda2:	2387      	movs	r3, #135	; 0x87
    dda4:	73f3      	strb	r3, [r6, #15]
	memset(l, 0, sizeof(l));
    dda6:	2210      	movs	r2, #16
    dda8:	2100      	movs	r1, #0
    ddaa:	a804      	add	r0, sp, #16
    ddac:	47a8      	blx	r5
	SAL_AESEncode(l, key_type, key);
    ddae:	9a01      	ldr	r2, [sp, #4]
    ddb0:	0039      	movs	r1, r7
    ddb2:	a804      	add	r0, sp, #16
    ddb4:	4b5f      	ldr	r3, [pc, #380]	; (df34 <SAL_AESCmac+0x1b8>)
    ddb6:	4798      	blx	r3
	if ( (l[0] & 0x80) == 0x00 )  // MSB( bufferLocal[0] ) is '0'
    ddb8:	ab04      	add	r3, sp, #16
    ddba:	781b      	ldrb	r3, [r3, #0]
    ddbc:	2b7f      	cmp	r3, #127	; 0x7f
    ddbe:	d82d      	bhi.n	de1c <SAL_AESCmac+0xa0>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    ddc0:	2210      	movs	r2, #16
    ddc2:	a920      	add	r1, sp, #128	; 0x80
    ddc4:	a804      	add	r0, sp, #16
    ddc6:	4b5c      	ldr	r3, [pc, #368]	; (df38 <SAL_AESCmac+0x1bc>)
    ddc8:	4798      	blx	r3
	if ( (k1[0] & 0x80) == 0x00 )   // MSB( k1[0] ) is '0'
    ddca:	ab20      	add	r3, sp, #128	; 0x80
    ddcc:	781b      	ldrb	r3, [r3, #0]
    ddce:	2b7f      	cmp	r3, #127	; 0x7f
    ddd0:	d834      	bhi.n	de3c <SAL_AESCmac+0xc0>
		sal_FillSubKey( k1, k2, (sizeof(l)) );
    ddd2:	2210      	movs	r2, #16
    ddd4:	a91c      	add	r1, sp, #112	; 0x70
    ddd6:	a820      	add	r0, sp, #128	; 0x80
    ddd8:	4b57      	ldr	r3, [pc, #348]	; (df38 <SAL_AESCmac+0x1bc>)
    ddda:	4798      	blx	r3
	n = (size + 15) >> 4;
    dddc:	0023      	movs	r3, r4
    ddde:	330f      	adds	r3, #15
    dde0:	111d      	asrs	r5, r3, #4
    dde2:	b2aa      	uxth	r2, r5
    dde4:	4690      	mov	r8, r2
	if (n == 0)
    dde6:	2a00      	cmp	r2, #0
    dde8:	d038      	beq.n	de5c <SAL_AESCmac+0xe0>
	if ( flag == 1 )
    ddea:	0722      	lsls	r2, r4, #28
    ddec:	d138      	bne.n	de60 <SAL_AESCmac+0xe4>
		for (i=((n-1) << 4); i<(n << 4); i++)
    ddee:	4642      	mov	r2, r8
    ddf0:	3a01      	subs	r2, #1
    ddf2:	0112      	lsls	r2, r2, #4
    ddf4:	b296      	uxth	r6, r2
    ddf6:	4f51      	ldr	r7, [pc, #324]	; (df3c <SAL_AESCmac+0x1c0>)
    ddf8:	401f      	ands	r7, r3
    ddfa:	42be      	cmp	r6, r7
    ddfc:	da54      	bge.n	dea8 <SAL_AESCmac+0x12c>
    ddfe:	0033      	movs	r3, r6
			mLast[j] = input[i] ^ k1[j];
    de00:	a910      	add	r1, sp, #64	; 0x40
    de02:	aa20      	add	r2, sp, #128	; 0x80
    de04:	1b98      	subs	r0, r3, r6
    de06:	b280      	uxth	r0, r0
    de08:	4654      	mov	r4, sl
    de0a:	5ce4      	ldrb	r4, [r4, r3]
    de0c:	5c15      	ldrb	r5, [r2, r0]
    de0e:	406c      	eors	r4, r5
    de10:	540c      	strb	r4, [r1, r0]
		for (i=((n-1) << 4); i<(n << 4); i++)
    de12:	3301      	adds	r3, #1
    de14:	b29b      	uxth	r3, r3
    de16:	42bb      	cmp	r3, r7
    de18:	dbf4      	blt.n	de04 <SAL_AESCmac+0x88>
    de1a:	e045      	b.n	dea8 <SAL_AESCmac+0x12c>
		sal_FillSubKey( l, k1, (sizeof(l) ) );
    de1c:	2210      	movs	r2, #16
    de1e:	a920      	add	r1, sp, #128	; 0x80
    de20:	a804      	add	r0, sp, #16
    de22:	4b45      	ldr	r3, [pc, #276]	; (df38 <SAL_AESCmac+0x1bc>)
    de24:	4798      	blx	r3
    de26:	2300      	movs	r3, #0
			k1[i] ^= const_Rb[i];
    de28:	aa20      	add	r2, sp, #128	; 0x80
    de2a:	a908      	add	r1, sp, #32
    de2c:	5c98      	ldrb	r0, [r3, r2]
    de2e:	5c5d      	ldrb	r5, [r3, r1]
    de30:	4068      	eors	r0, r5
    de32:	5498      	strb	r0, [r3, r2]
    de34:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    de36:	2b10      	cmp	r3, #16
    de38:	d1f8      	bne.n	de2c <SAL_AESCmac+0xb0>
    de3a:	e7c6      	b.n	ddca <SAL_AESCmac+0x4e>
		sal_FillSubKey( k1, k2, (sizeof(l) ) );
    de3c:	2210      	movs	r2, #16
    de3e:	a91c      	add	r1, sp, #112	; 0x70
    de40:	a820      	add	r0, sp, #128	; 0x80
    de42:	4b3d      	ldr	r3, [pc, #244]	; (df38 <SAL_AESCmac+0x1bc>)
    de44:	4798      	blx	r3
    de46:	2300      	movs	r3, #0
			k2[i] = k2[i] ^ const_Rb[i];
    de48:	aa1c      	add	r2, sp, #112	; 0x70
    de4a:	a908      	add	r1, sp, #32
    de4c:	5c98      	ldrb	r0, [r3, r2]
    de4e:	5c5d      	ldrb	r5, [r3, r1]
    de50:	4068      	eors	r0, r5
    de52:	5498      	strb	r0, [r3, r2]
    de54:	3301      	adds	r3, #1
		for (i=0; i<sizeof(l); i++)
    de56:	2b10      	cmp	r3, #16
    de58:	d1f8      	bne.n	de4c <SAL_AESCmac+0xd0>
    de5a:	e7bf      	b.n	dddc <SAL_AESCmac+0x60>
		n = 1;
    de5c:	2301      	movs	r3, #1
    de5e:	4698      	mov	r8, r3
		ptr = &input[size - (size%16)];
    de60:	230f      	movs	r3, #15
    de62:	0020      	movs	r0, r4
    de64:	4398      	bics	r0, r3
    de66:	2300      	movs	r3, #0
			if ( i < (size%16) )
    de68:	220f      	movs	r2, #15
    de6a:	4014      	ands	r4, r2
					padded[i] = 0x00;
    de6c:	a90c      	add	r1, sp, #48	; 0x30
    de6e:	2700      	movs	r7, #0
					padded[i] = 0x80;
    de70:	2680      	movs	r6, #128	; 0x80
				padded[i] = ptr[i];
    de72:	4450      	add	r0, sl
    de74:	e005      	b.n	de82 <SAL_AESCmac+0x106>
				if ( i == (size%16) )
    de76:	4294      	cmp	r4, r2
    de78:	d009      	beq.n	de8e <SAL_AESCmac+0x112>
					padded[i] = 0x00;
    de7a:	545f      	strb	r7, [r3, r1]
    de7c:	3301      	adds	r3, #1
		for (i=0; i<16; i++)
    de7e:	2b10      	cmp	r3, #16
    de80:	d007      	beq.n	de92 <SAL_AESCmac+0x116>
    de82:	b29a      	uxth	r2, r3
			if ( i < (size%16) )
    de84:	4294      	cmp	r4, r2
    de86:	d9f6      	bls.n	de76 <SAL_AESCmac+0xfa>
				padded[i] = ptr[i];
    de88:	5cc2      	ldrb	r2, [r0, r3]
    de8a:	545a      	strb	r2, [r3, r1]
    de8c:	e7f6      	b.n	de7c <SAL_AESCmac+0x100>
					padded[i] = 0x80;
    de8e:	545e      	strb	r6, [r3, r1]
    de90:	e7f4      	b.n	de7c <SAL_AESCmac+0x100>
    de92:	2300      	movs	r3, #0
			mLast[i] = padded[i] ^ k2[i];
    de94:	a810      	add	r0, sp, #64	; 0x40
    de96:	a90c      	add	r1, sp, #48	; 0x30
    de98:	aa1c      	add	r2, sp, #112	; 0x70
    de9a:	5c5c      	ldrb	r4, [r3, r1]
    de9c:	5c9d      	ldrb	r5, [r3, r2]
    de9e:	406c      	eors	r4, r5
    dea0:	541c      	strb	r4, [r3, r0]
    dea2:	3301      	adds	r3, #1
		for (i=0; i<sizeof(mLast); i++)
    dea4:	2b10      	cmp	r3, #16
    dea6:	d1f8      	bne.n	de9a <SAL_AESCmac+0x11e>
	memset(x, 0, sizeof(x));
    dea8:	2210      	movs	r2, #16
    deaa:	2100      	movs	r1, #0
    deac:	a818      	add	r0, sp, #96	; 0x60
    deae:	4b20      	ldr	r3, [pc, #128]	; (df30 <SAL_AESCmac+0x1b4>)
    deb0:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    deb2:	2301      	movs	r3, #1
    deb4:	425b      	negs	r3, r3
    deb6:	4443      	add	r3, r8
    deb8:	4699      	mov	r9, r3
    deba:	2000      	movs	r0, #0
    debc:	2700      	movs	r7, #0
    debe:	2b00      	cmp	r3, #0
    dec0:	dd1a      	ble.n	def8 <SAL_AESCmac+0x17c>
			y[j] = x[j] ^ input[(i << 4)+j];
    dec2:	ad14      	add	r5, sp, #80	; 0x50
    dec4:	ac18      	add	r4, sp, #96	; 0x60
		memcpy(x, y, sizeof(y));
    dec6:	4e1e      	ldr	r6, [pc, #120]	; (df40 <SAL_AESCmac+0x1c4>)
			y[j] = x[j] ^ input[(i << 4)+j];
    dec8:	0100      	lsls	r0, r0, #4
    deca:	2300      	movs	r3, #0
    decc:	4450      	add	r0, sl
    dece:	5cc2      	ldrb	r2, [r0, r3]
    ded0:	5d19      	ldrb	r1, [r3, r4]
    ded2:	404a      	eors	r2, r1
    ded4:	555a      	strb	r2, [r3, r5]
    ded6:	3301      	adds	r3, #1
		for (j=0; j<16; j++)
    ded8:	2b10      	cmp	r3, #16
    deda:	d1f8      	bne.n	dece <SAL_AESCmac+0x152>
		memcpy(x, y, sizeof(y));
    dedc:	2210      	movs	r2, #16
    dede:	0029      	movs	r1, r5
    dee0:	0020      	movs	r0, r4
    dee2:	47b0      	blx	r6
		SAL_AESEncode(x, key_type, key);
    dee4:	9a01      	ldr	r2, [sp, #4]
    dee6:	9902      	ldr	r1, [sp, #8]
    dee8:	0020      	movs	r0, r4
    deea:	4b12      	ldr	r3, [pc, #72]	; (df34 <SAL_AESCmac+0x1b8>)
    deec:	4798      	blx	r3
	for (i=0; i<(n-1); i++)
    deee:	3701      	adds	r7, #1
    def0:	b2bf      	uxth	r7, r7
    def2:	0038      	movs	r0, r7
    def4:	454f      	cmp	r7, r9
    def6:	dbe7      	blt.n	dec8 <SAL_AESCmac+0x14c>
    def8:	2300      	movs	r3, #0
		y[i] = x[i] ^ mLast[i];
    defa:	ac14      	add	r4, sp, #80	; 0x50
    defc:	a818      	add	r0, sp, #96	; 0x60
    defe:	a910      	add	r1, sp, #64	; 0x40
    df00:	5c1a      	ldrb	r2, [r3, r0]
    df02:	5c5d      	ldrb	r5, [r3, r1]
    df04:	406a      	eors	r2, r5
    df06:	551a      	strb	r2, [r3, r4]
    df08:	3301      	adds	r3, #1
	for (i=0; i<sizeof(x); i++)
    df0a:	2b10      	cmp	r3, #16
    df0c:	d1f8      	bne.n	df00 <SAL_AESCmac+0x184>
	SAL_AESEncode(y, key_type, key);
    df0e:	9a01      	ldr	r2, [sp, #4]
    df10:	9902      	ldr	r1, [sp, #8]
    df12:	a814      	add	r0, sp, #80	; 0x50
    df14:	4b07      	ldr	r3, [pc, #28]	; (df34 <SAL_AESCmac+0x1b8>)
    df16:	4798      	blx	r3
	memcpy(output, y, sizeof(y));
    df18:	2210      	movs	r2, #16
    df1a:	a914      	add	r1, sp, #80	; 0x50
    df1c:	9803      	ldr	r0, [sp, #12]
    df1e:	4b08      	ldr	r3, [pc, #32]	; (df40 <SAL_AESCmac+0x1c4>)
    df20:	4798      	blx	r3
}
    df22:	2000      	movs	r0, #0
    df24:	b024      	add	sp, #144	; 0x90
    df26:	bc1c      	pop	{r2, r3, r4}
    df28:	4690      	mov	r8, r2
    df2a:	4699      	mov	r9, r3
    df2c:	46a2      	mov	sl, r4
    df2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df30:	00019e41 	.word	0x00019e41
    df34:	0000dc11 	.word	0x0000dc11
    df38:	0000db5d 	.word	0x0000db5d
    df3c:	000ffff0 	.word	0x000ffff0
    df40:	00019d1d 	.word	0x00019d1d

0000df44 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    df44:	b5f0      	push	{r4, r5, r6, r7, lr}
    df46:	b083      	sub	sp, #12
    df48:	0004      	movs	r4, r0
    df4a:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    df4c:	4a2b      	ldr	r2, [pc, #172]	; (dffc <AESEncode+0xb8>)
    df4e:	2101      	movs	r1, #1
    df50:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    df52:	2300      	movs	r3, #0
    df54:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    df56:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    df58:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    df5a:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    df5c:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    df5e:	4928      	ldr	r1, [pc, #160]	; (e000 <AESEncode+0xbc>)
    df60:	4828      	ldr	r0, [pc, #160]	; (e004 <AESEncode+0xc0>)
    df62:	4b29      	ldr	r3, [pc, #164]	; (e008 <AESEncode+0xc4>)
    df64:	4798      	blx	r3
    df66:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    df68:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    df6a:	4f28      	ldr	r7, [pc, #160]	; (e00c <AESEncode+0xc8>)
    df6c:	1870      	adds	r0, r6, r1
    df6e:	2300      	movs	r3, #0
    df70:	5cc2      	ldrb	r2, [r0, r3]
    df72:	555a      	strb	r2, [r3, r5]
    df74:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    df76:	2b04      	cmp	r3, #4
    df78:	d1fa      	bne.n	df70 <AESEncode+0x2c>
    df7a:	9b01      	ldr	r3, [sp, #4]
    df7c:	51cb      	str	r3, [r1, r7]
    df7e:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    df80:	2910      	cmp	r1, #16
    df82:	d1f3      	bne.n	df6c <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    df84:	4d1f      	ldr	r5, [pc, #124]	; (e004 <AESEncode+0xc0>)
    df86:	4921      	ldr	r1, [pc, #132]	; (e00c <AESEncode+0xc8>)
    df88:	0028      	movs	r0, r5
    df8a:	4b21      	ldr	r3, [pc, #132]	; (e010 <AESEncode+0xcc>)
    df8c:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    df8e:	682a      	ldr	r2, [r5, #0]
    df90:	7913      	ldrb	r3, [r2, #4]
    df92:	2102      	movs	r1, #2
    df94:	430b      	orrs	r3, r1
    df96:	7113      	strb	r3, [r2, #4]
    df98:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    df9a:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    df9c:	4e1b      	ldr	r6, [pc, #108]	; (e00c <AESEncode+0xc8>)
    df9e:	1860      	adds	r0, r4, r1
    dfa0:	2300      	movs	r3, #0
    dfa2:	5cc2      	ldrb	r2, [r0, r3]
    dfa4:	555a      	strb	r2, [r3, r5]
    dfa6:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    dfa8:	2b04      	cmp	r3, #4
    dfaa:	d1fa      	bne.n	dfa2 <AESEncode+0x5e>
    dfac:	9b01      	ldr	r3, [sp, #4]
    dfae:	518b      	str	r3, [r1, r6]
    dfb0:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    dfb2:	2910      	cmp	r1, #16
    dfb4:	d1f3      	bne.n	df9e <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    dfb6:	4d13      	ldr	r5, [pc, #76]	; (e004 <AESEncode+0xc0>)
    dfb8:	4914      	ldr	r1, [pc, #80]	; (e00c <AESEncode+0xc8>)
    dfba:	0028      	movs	r0, r5
    dfbc:	4b15      	ldr	r3, [pc, #84]	; (e014 <AESEncode+0xd0>)
    dfbe:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    dfc0:	682d      	ldr	r5, [r5, #0]
    dfc2:	792b      	ldrb	r3, [r5, #4]
    dfc4:	2202      	movs	r2, #2
    dfc6:	4393      	bics	r3, r2
    dfc8:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    dfca:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    dfcc:	2002      	movs	r0, #2
    dfce:	e001      	b.n	dfd4 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    dfd0:	4211      	tst	r1, r2
    dfd2:	d107      	bne.n	dfe4 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    dfd4:	79eb      	ldrb	r3, [r5, #7]
    dfd6:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    dfd8:	000a      	movs	r2, r1
    dfda:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    dfdc:	4218      	tst	r0, r3
    dfde:	d0f7      	beq.n	dfd0 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    dfe0:	4302      	orrs	r2, r0
    dfe2:	e7f5      	b.n	dfd0 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    dfe4:	4d09      	ldr	r5, [pc, #36]	; (e00c <AESEncode+0xc8>)
    dfe6:	0029      	movs	r1, r5
    dfe8:	4806      	ldr	r0, [pc, #24]	; (e004 <AESEncode+0xc0>)
    dfea:	4b0b      	ldr	r3, [pc, #44]	; (e018 <AESEncode+0xd4>)
    dfec:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    dfee:	2210      	movs	r2, #16
    dff0:	0029      	movs	r1, r5
    dff2:	0020      	movs	r0, r4
    dff4:	4b09      	ldr	r3, [pc, #36]	; (e01c <AESEncode+0xd8>)
    dff6:	4798      	blx	r3
#endif	
}
    dff8:	b003      	add	sp, #12
    dffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dffc:	200026e4 	.word	0x200026e4
    e000:	42003400 	.word	0x42003400
    e004:	200026f0 	.word	0x200026f0
    e008:	0000479d 	.word	0x0000479d
    e00c:	20000fac 	.word	0x20000fac
    e010:	00004831 	.word	0x00004831
    e014:	00004865 	.word	0x00004865
    e018:	000048b5 	.word	0x000048b5
    e01c:	00019d1d 	.word	0x00019d1d

0000e020 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    e020:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    e022:	4d07      	ldr	r5, [pc, #28]	; (e040 <AESInit+0x20>)
    e024:	0028      	movs	r0, r5
    e026:	4b07      	ldr	r3, [pc, #28]	; (e044 <AESInit+0x24>)
    e028:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    e02a:	4c07      	ldr	r4, [pc, #28]	; (e048 <AESInit+0x28>)
    e02c:	002a      	movs	r2, r5
    e02e:	4907      	ldr	r1, [pc, #28]	; (e04c <AESInit+0x2c>)
    e030:	0020      	movs	r0, r4
    e032:	4b07      	ldr	r3, [pc, #28]	; (e050 <AESInit+0x30>)
    e034:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    e036:	0020      	movs	r0, r4
    e038:	4b06      	ldr	r3, [pc, #24]	; (e054 <AESInit+0x34>)
    e03a:	4798      	blx	r3
#endif	
}
    e03c:	bd70      	pop	{r4, r5, r6, pc}
    e03e:	46c0      	nop			; (mov r8, r8)
    e040:	200026e4 	.word	0x200026e4
    e044:	00004761 	.word	0x00004761
    e048:	200026f0 	.word	0x200026f0
    e04c:	42003400 	.word	0x42003400
    e050:	00004811 	.word	0x00004811
    e054:	0000477b 	.word	0x0000477b

0000e058 <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    e058:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    e05a:	4b03      	ldr	r3, [pc, #12]	; (e068 <PDS_Init+0x10>)
    e05c:	4798      	blx	r3
	pdsUnInitFlag = false;
    e05e:	2200      	movs	r2, #0
    e060:	4b02      	ldr	r3, [pc, #8]	; (e06c <PDS_Init+0x14>)
    e062:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    e064:	bd10      	pop	{r4, pc}
    e066:	46c0      	nop			; (mov r8, r8)
    e068:	0000e895 	.word	0x0000e895
    e06c:	20000fbc 	.word	0x20000fbc

0000e070 <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    e070:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e072:	4b14      	ldr	r3, [pc, #80]	; (e0c4 <PDS_Store+0x54>)
    e074:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e076:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    e078:	2a00      	cmp	r2, #0
    e07a:	d106      	bne.n	e08a <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e07c:	0102      	lsls	r2, r0, #4
    e07e:	4b12      	ldr	r3, [pc, #72]	; (e0c8 <PDS_Store+0x58>)
    e080:	189b      	adds	r3, r3, r2
    e082:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e084:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e086:	2a00      	cmp	r2, #0
    e088:	d101      	bne.n	e08e <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    e08a:	0018      	movs	r0, r3
    e08c:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e08e:	0103      	lsls	r3, r0, #4
    e090:	4a0d      	ldr	r2, [pc, #52]	; (e0c8 <PDS_Store+0x58>)
    e092:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e094:	2c00      	cmp	r4, #0
    e096:	d011      	beq.n	e0bc <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    e098:	001a      	movs	r2, r3
    e09a:	4b0b      	ldr	r3, [pc, #44]	; (e0c8 <PDS_Store+0x58>)
    e09c:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e09e:	689b      	ldr	r3, [r3, #8]
    e0a0:	2b00      	cmp	r3, #0
    e0a2:	d00d      	beq.n	e0c0 <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    e0a4:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    e0a6:	280c      	cmp	r0, #12
    e0a8:	d8ef      	bhi.n	e08a <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    e0aa:	3b04      	subs	r3, #4
    e0ac:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    e0ae:	4a07      	ldr	r2, [pc, #28]	; (e0cc <PDS_Store+0x5c>)
    e0b0:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    e0b2:	2001      	movs	r0, #1
    e0b4:	4b06      	ldr	r3, [pc, #24]	; (e0d0 <PDS_Store+0x60>)
    e0b6:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    e0b8:	2300      	movs	r3, #0
    e0ba:	e7e6      	b.n	e08a <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    e0bc:	2305      	movs	r3, #5
    e0be:	e7e4      	b.n	e08a <PDS_Store+0x1a>
    e0c0:	2305      	movs	r3, #5
    e0c2:	e7e2      	b.n	e08a <PDS_Store+0x1a>
    e0c4:	20000fbc 	.word	0x20000fbc
    e0c8:	20002708 	.word	0x20002708
    e0cc:	200026f8 	.word	0x200026f8
    e0d0:	0000e56d 	.word	0x0000e56d

0000e0d4 <PDS_Restore>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Restore(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    e0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0d6:	b0c3      	sub	sp, #268	; 0x10c
    e0d8:	0006      	movs	r6, r0
    e0da:	000d      	movs	r5, r1
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e0dc:	4b2a      	ldr	r3, [pc, #168]	; (e188 <PDS_Restore+0xb4>)
    e0de:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e0e0:	2400      	movs	r4, #0
	if (false == pdsUnInitFlag)
    e0e2:	2b00      	cmp	r3, #0
    e0e4:	d106      	bne.n	e0f4 <PDS_Restore+0x20>
		uint8_t *ptr;
		ItemMap_t itemInfo;
		ItemHeader_t itemHeader;
		uint16_t size;
		
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e0e6:	0102      	lsls	r2, r0, #4
    e0e8:	4b28      	ldr	r3, [pc, #160]	; (e18c <PDS_Restore+0xb8>)
    e0ea:	189b      	adds	r3, r3, r2
    e0ec:	791c      	ldrb	r4, [r3, #4]
    e0ee:	2c00      	cmp	r4, #0
    e0f0:	d103      	bne.n	e0fa <PDS_Restore+0x26>
			
			return status;
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e0f2:	2405      	movs	r4, #5
		}
	}
#endif	
	return status;
}
    e0f4:	0020      	movs	r0, r4
    e0f6:	b043      	add	sp, #268	; 0x10c
    e0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e0fa:	0013      	movs	r3, r2
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    e0fc:	4a23      	ldr	r2, [pc, #140]	; (e18c <PDS_Restore+0xb8>)
    e0fe:	589b      	ldr	r3, [r3, r2]
    e100:	2b00      	cmp	r3, #0
    e102:	d0f6      	beq.n	e0f2 <PDS_Restore+0x1e>
		(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    e104:	0102      	lsls	r2, r0, #4
    e106:	4b21      	ldr	r3, [pc, #132]	; (e18c <PDS_Restore+0xb8>)
    e108:	189b      	adds	r3, r3, r2
    e10a:	689f      	ldr	r7, [r3, #8]
		(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e10c:	2f00      	cmp	r7, #0
    e10e:	d0f0      	beq.n	e0f2 <PDS_Restore+0x1e>
			memset(&buffer, 0, sizeof(PdsMem_t));
    e110:	2280      	movs	r2, #128	; 0x80
    e112:	0052      	lsls	r2, r2, #1
    e114:	2100      	movs	r1, #0
    e116:	a802      	add	r0, sp, #8
    e118:	4b1d      	ldr	r3, [pc, #116]	; (e190 <PDS_Restore+0xbc>)
    e11a:	4798      	blx	r3
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    e11c:	4b1d      	ldr	r3, [pc, #116]	; (e194 <PDS_Restore+0xc0>)
    e11e:	469c      	mov	ip, r3
    e120:	4464      	add	r4, ip
    e122:	00e4      	lsls	r4, r4, #3
    e124:	1939      	adds	r1, r7, r4
    e126:	2208      	movs	r2, #8
    e128:	4668      	mov	r0, sp
    e12a:	4b1b      	ldr	r3, [pc, #108]	; (e198 <PDS_Restore+0xc4>)
    e12c:	4798      	blx	r3
			size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    e12e:	466b      	mov	r3, sp
    e130:	79da      	ldrb	r2, [r3, #7]
    e132:	799b      	ldrb	r3, [r3, #6]
    e134:	18d2      	adds	r2, r2, r3
			status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    e136:	3205      	adds	r2, #5
    e138:	a902      	add	r1, sp, #8
    e13a:	0030      	movs	r0, r6
    e13c:	4b17      	ldr	r3, [pc, #92]	; (e19c <PDS_Restore+0xc8>)
    e13e:	4798      	blx	r3
    e140:	1e04      	subs	r4, r0, #0
			if (status != PDS_OK)
    e142:	d1d7      	bne.n	e0f4 <PDS_Restore+0x20>
			memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + item), sizeof(ItemMap_t));
    e144:	0136      	lsls	r6, r6, #4
    e146:	4b11      	ldr	r3, [pc, #68]	; (e18c <PDS_Restore+0xb8>)
    e148:	199e      	adds	r6, r3, r6
    e14a:	00eb      	lsls	r3, r5, #3
    e14c:	68b1      	ldr	r1, [r6, #8]
    e14e:	18c9      	adds	r1, r1, r3
    e150:	2208      	movs	r2, #8
    e152:	4668      	mov	r0, sp
    e154:	4b10      	ldr	r3, [pc, #64]	; (e198 <PDS_Restore+0xc4>)
    e156:	4798      	blx	r3
			if (item == itemInfo.itemId)
    e158:	466b      	mov	r3, sp
    e15a:	795b      	ldrb	r3, [r3, #5]
    e15c:	42ab      	cmp	r3, r5
    e15e:	d001      	beq.n	e164 <PDS_Restore+0x90>
				return PDS_NOT_FOUND;
    e160:	2403      	movs	r4, #3
    e162:	e7c7      	b.n	e0f4 <PDS_Restore+0x20>
			ptr += itemInfo.itemOffset;
    e164:	466b      	mov	r3, sp
    e166:	79d9      	ldrb	r1, [r3, #7]
    e168:	2315      	movs	r3, #21
    e16a:	446b      	add	r3, sp
    e16c:	469c      	mov	ip, r3
    e16e:	4461      	add	r1, ip
				if (false == itemHeader.delete)
    e170:	790b      	ldrb	r3, [r1, #4]
    e172:	2b00      	cmp	r3, #0
    e174:	d001      	beq.n	e17a <PDS_Restore+0xa6>
					return PDS_ITEM_DELETED;
    e176:	2406      	movs	r4, #6
    e178:	e7bc      	b.n	e0f4 <PDS_Restore+0x20>
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    e17a:	466b      	mov	r3, sp
    e17c:	799a      	ldrb	r2, [r3, #6]
					ptr += sizeof(ItemHeader_t);
    e17e:	3105      	adds	r1, #5
					memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemInfo.size);
    e180:	9800      	ldr	r0, [sp, #0]
    e182:	4b05      	ldr	r3, [pc, #20]	; (e198 <PDS_Restore+0xc4>)
    e184:	4798      	blx	r3
			return status;
    e186:	e7b5      	b.n	e0f4 <PDS_Restore+0x20>
    e188:	20000fbc 	.word	0x20000fbc
    e18c:	20002708 	.word	0x20002708
    e190:	00019e41 	.word	0x00019e41
    e194:	1fffffff 	.word	0x1fffffff
    e198:	00019d1d 	.word	0x00019d1d
    e19c:	0000ea31 	.word	0x0000ea31

0000e1a0 <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
    e1a0:	b570      	push	{r4, r5, r6, lr}
	bool return_status = false;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e1a2:	4b0e      	ldr	r3, [pc, #56]	; (e1dc <PDS_IsRestorable+0x3c>)
    e1a4:	7818      	ldrb	r0, [r3, #0]
    e1a6:	2800      	cmp	r0, #0
    e1a8:	d117      	bne.n	e1da <PDS_IsRestorable+0x3a>
    e1aa:	4d0d      	ldr	r5, [pc, #52]	; (e1e0 <PDS_IsRestorable+0x40>)
    e1ac:	2400      	movs	r4, #0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
    e1ae:	4e0d      	ldr	r6, [pc, #52]	; (e1e4 <PDS_IsRestorable+0x44>)
    e1b0:	e004      	b.n	e1bc <PDS_IsRestorable+0x1c>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    e1b2:	3401      	adds	r4, #1
    e1b4:	b2e4      	uxtb	r4, r4
    e1b6:	3510      	adds	r5, #16
    e1b8:	2c0d      	cmp	r4, #13
    e1ba:	d00d      	beq.n	e1d8 <PDS_IsRestorable+0x38>
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    e1bc:	792b      	ldrb	r3, [r5, #4]
    e1be:	2b00      	cmp	r3, #0
    e1c0:	d0f7      	beq.n	e1b2 <PDS_IsRestorable+0x12>
    e1c2:	682b      	ldr	r3, [r5, #0]
    e1c4:	2b00      	cmp	r3, #0
    e1c6:	d0f4      	beq.n	e1b2 <PDS_IsRestorable+0x12>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e1c8:	68ab      	ldr	r3, [r5, #8]
    e1ca:	2b00      	cmp	r3, #0
    e1cc:	d0f1      	beq.n	e1b2 <PDS_IsRestorable+0x12>
				if ( !(isFileFound(pdsFileItemIdx)) )
    e1ce:	0020      	movs	r0, r4
    e1d0:	47b0      	blx	r6
    e1d2:	2800      	cmp	r0, #0
    e1d4:	d1ed      	bne.n	e1b2 <PDS_IsRestorable+0x12>
    e1d6:	e000      	b.n	e1da <PDS_IsRestorable+0x3a>
			}
		}
	}
	return_status = true;
#endif
	return return_status;
    e1d8:	2001      	movs	r0, #1
}
    e1da:	bd70      	pop	{r4, r5, r6, pc}
    e1dc:	20000fbc 	.word	0x20000fbc
    e1e0:	20002708 	.word	0x20002708
    e1e4:	0000ea5d 	.word	0x0000ea5d

0000e1e8 <PDS_DeleteAll>:
\brief This function will erase all the items stored in the PDS.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_DeleteAll(void)
{
    e1e8:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e1ea:	4b04      	ldr	r3, [pc, #16]	; (e1fc <PDS_DeleteAll+0x14>)
    e1ec:	781b      	ldrb	r3, [r3, #0]
    e1ee:	2b00      	cmp	r3, #0
    e1f0:	d001      	beq.n	e1f6 <PDS_DeleteAll+0xe>
	{
		pdsWlDeleteAll();
	}
#endif
	return PDS_OK;
}
    e1f2:	2000      	movs	r0, #0
    e1f4:	bd10      	pop	{r4, pc}
		pdsWlDeleteAll();
    e1f6:	4b02      	ldr	r3, [pc, #8]	; (e200 <PDS_DeleteAll+0x18>)
    e1f8:	4798      	blx	r3
    e1fa:	e7fa      	b.n	e1f2 <PDS_DeleteAll+0xa>
    e1fc:	20000fbc 	.word	0x20000fbc
    e200:	0000ea79 	.word	0x0000ea79

0000e204 <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
    e204:	b5f0      	push	{r4, r5, r6, r7, lr}
    e206:	46ce      	mov	lr, r9
    e208:	4647      	mov	r7, r8
    e20a:	b580      	push	{r7, lr}
    e20c:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e20e:	4b32      	ldr	r3, [pc, #200]	; (e2d8 <PDS_RestoreAll+0xd4>)
    e210:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e212:	2000      	movs	r0, #0
	if (false == pdsUnInitFlag)
    e214:	2b00      	cmp	r3, #0
    e216:	d159      	bne.n	e2cc <PDS_RestoreAll+0xc8>
    e218:	4e30      	ldr	r6, [pc, #192]	; (e2dc <PDS_RestoreAll+0xd8>)
    e21a:	2700      	movs	r7, #0
					ptr += itemInfo.itemOffset;
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
					ptr += sizeof(ItemHeader_t);
					if (false == itemHeader.delete)
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    e21c:	4b30      	ldr	r3, [pc, #192]	; (e2e0 <PDS_RestoreAll+0xdc>)
    e21e:	4698      	mov	r8, r3
    e220:	e026      	b.n	e270 <PDS_RestoreAll+0x6c>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e222:	3401      	adds	r4, #1
    e224:	b2e4      	uxtb	r4, r4
    e226:	792b      	ldrb	r3, [r5, #4]
    e228:	42a3      	cmp	r3, r4
    e22a:	d918      	bls.n	e25e <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    e22c:	00e1      	lsls	r1, r4, #3
    e22e:	68ab      	ldr	r3, [r5, #8]
    e230:	469c      	mov	ip, r3
    e232:	4461      	add	r1, ip
    e234:	2208      	movs	r2, #8
    e236:	a802      	add	r0, sp, #8
    e238:	47c8      	blx	r9
					ptr += itemInfo.itemOffset;
    e23a:	ab02      	add	r3, sp, #8
    e23c:	79d9      	ldrb	r1, [r3, #7]
    e23e:	2315      	movs	r3, #21
    e240:	aa02      	add	r2, sp, #8
    e242:	4694      	mov	ip, r2
    e244:	4463      	add	r3, ip
    e246:	469c      	mov	ip, r3
    e248:	4461      	add	r1, ip
					if (false == itemHeader.delete)
    e24a:	790b      	ldrb	r3, [r1, #4]
    e24c:	2b00      	cmp	r3, #0
    e24e:	d1e8      	bne.n	e222 <PDS_RestoreAll+0x1e>
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    e250:	9b02      	ldr	r3, [sp, #8]
    e252:	9301      	str	r3, [sp, #4]
    e254:	788a      	ldrb	r2, [r1, #2]
					ptr += sizeof(ItemHeader_t);
    e256:	3105      	adds	r1, #5
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    e258:	0018      	movs	r0, r3
    e25a:	47c0      	blx	r8
    e25c:	e7e1      	b.n	e222 <PDS_RestoreAll+0x1e>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
    e25e:	68eb      	ldr	r3, [r5, #12]
    e260:	2b00      	cmp	r3, #0
    e262:	d000      	beq.n	e266 <PDS_RestoreAll+0x62>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
    e264:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    e266:	3701      	adds	r7, #1
    e268:	b2ff      	uxtb	r7, r7
    e26a:	3610      	adds	r6, #16
    e26c:	2f0d      	cmp	r7, #13
    e26e:	d02c      	beq.n	e2ca <PDS_RestoreAll+0xc6>
    e270:	0035      	movs	r5, r6
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    e272:	7934      	ldrb	r4, [r6, #4]
    e274:	2c00      	cmp	r4, #0
    e276:	d0f6      	beq.n	e266 <PDS_RestoreAll+0x62>
    e278:	6833      	ldr	r3, [r6, #0]
    e27a:	2b00      	cmp	r3, #0
    e27c:	d0f3      	beq.n	e266 <PDS_RestoreAll+0x62>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    e27e:	68b3      	ldr	r3, [r6, #8]
    e280:	4699      	mov	r9, r3
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e282:	2b00      	cmp	r3, #0
    e284:	d0ef      	beq.n	e266 <PDS_RestoreAll+0x62>
				memset(&buffer, 0, sizeof(PdsMem_t));
    e286:	2280      	movs	r2, #128	; 0x80
    e288:	0052      	lsls	r2, r2, #1
    e28a:	2100      	movs	r1, #0
    e28c:	a804      	add	r0, sp, #16
    e28e:	4b15      	ldr	r3, [pc, #84]	; (e2e4 <PDS_RestoreAll+0xe0>)
    e290:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    e292:	4b15      	ldr	r3, [pc, #84]	; (e2e8 <PDS_RestoreAll+0xe4>)
    e294:	469c      	mov	ip, r3
    e296:	4464      	add	r4, ip
    e298:	00e4      	lsls	r4, r4, #3
    e29a:	0021      	movs	r1, r4
    e29c:	4449      	add	r1, r9
    e29e:	2208      	movs	r2, #8
    e2a0:	a802      	add	r0, sp, #8
    e2a2:	4b0f      	ldr	r3, [pc, #60]	; (e2e0 <PDS_RestoreAll+0xdc>)
    e2a4:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    e2a6:	ab02      	add	r3, sp, #8
    e2a8:	79da      	ldrb	r2, [r3, #7]
    e2aa:	799b      	ldrb	r3, [r3, #6]
    e2ac:	18d2      	adds	r2, r2, r3
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    e2ae:	3205      	adds	r2, #5
    e2b0:	a904      	add	r1, sp, #16
    e2b2:	0038      	movs	r0, r7
    e2b4:	4b0d      	ldr	r3, [pc, #52]	; (e2ec <PDS_RestoreAll+0xe8>)
    e2b6:	4798      	blx	r3
				if (status != PDS_OK)
    e2b8:	2800      	cmp	r0, #0
    e2ba:	d107      	bne.n	e2cc <PDS_RestoreAll+0xc8>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e2bc:	7933      	ldrb	r3, [r6, #4]
    e2be:	2400      	movs	r4, #0
    e2c0:	2b00      	cmp	r3, #0
    e2c2:	d0cc      	beq.n	e25e <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    e2c4:	4b06      	ldr	r3, [pc, #24]	; (e2e0 <PDS_RestoreAll+0xdc>)
    e2c6:	4699      	mov	r9, r3
    e2c8:	e7b0      	b.n	e22c <PDS_RestoreAll+0x28>
    e2ca:	2000      	movs	r0, #0
			}
		}
	}
#endif	
	return status;
}
    e2cc:	b045      	add	sp, #276	; 0x114
    e2ce:	bc0c      	pop	{r2, r3}
    e2d0:	4690      	mov	r8, r2
    e2d2:	4699      	mov	r9, r3
    e2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2d6:	46c0      	nop			; (mov r8, r8)
    e2d8:	20000fbc 	.word	0x20000fbc
    e2dc:	20002708 	.word	0x20002708
    e2e0:	00019d1d 	.word	0x00019d1d
    e2e4:	00019e41 	.word	0x00019e41
    e2e8:	1fffffff 	.word	0x1fffffff
    e2ec:	0000ea31 	.word	0x0000ea31

0000e2f0 <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
    e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e2f2:	4b14      	ldr	r3, [pc, #80]	; (e344 <PDS_StoreAll+0x54>)
    e2f4:	781b      	ldrb	r3, [r3, #0]
    e2f6:	2b00      	cmp	r3, #0
    e2f8:	d121      	bne.n	e33e <PDS_StoreAll+0x4e>
    e2fa:	4813      	ldr	r0, [pc, #76]	; (e348 <PDS_StoreAll+0x58>)
    e2fc:	4d13      	ldr	r5, [pc, #76]	; (e34c <PDS_StoreAll+0x5c>)
    e2fe:	0007      	movs	r7, r0
    e300:	37d0      	adds	r7, #208	; 0xd0
    e302:	2600      	movs	r6, #0
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    e304:	2401      	movs	r4, #1
    e306:	e004      	b.n	e312 <PDS_StoreAll+0x22>
				}
				isFileSet[pdsFileItemIdx] = true;
    e308:	702c      	strb	r4, [r5, #0]
    e30a:	3010      	adds	r0, #16
    e30c:	3501      	adds	r5, #1
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    e30e:	4287      	cmp	r7, r0
    e310:	d012      	beq.n	e338 <PDS_StoreAll+0x48>
    e312:	0002      	movs	r2, r0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    e314:	7903      	ldrb	r3, [r0, #4]
    e316:	2b00      	cmp	r3, #0
    e318:	d0f7      	beq.n	e30a <PDS_StoreAll+0x1a>
    e31a:	6803      	ldr	r3, [r0, #0]
    e31c:	2b00      	cmp	r3, #0
    e31e:	d0f4      	beq.n	e30a <PDS_StoreAll+0x1a>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    e320:	6883      	ldr	r3, [r0, #8]
    e322:	2b00      	cmp	r3, #0
    e324:	d0f1      	beq.n	e30a <PDS_StoreAll+0x1a>
    e326:	0033      	movs	r3, r6
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    e328:	6811      	ldr	r1, [r2, #0]
    e32a:	54cc      	strb	r4, [r1, r3]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e32c:	3301      	adds	r3, #1
    e32e:	b2db      	uxtb	r3, r3
    e330:	7911      	ldrb	r1, [r2, #4]
    e332:	4299      	cmp	r1, r3
    e334:	d8f8      	bhi.n	e328 <PDS_StoreAll+0x38>
    e336:	e7e7      	b.n	e308 <PDS_StoreAll+0x18>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    e338:	2001      	movs	r0, #1
    e33a:	4b05      	ldr	r3, [pc, #20]	; (e350 <PDS_StoreAll+0x60>)
    e33c:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
}
    e33e:	2000      	movs	r0, #0
    e340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e342:	46c0      	nop			; (mov r8, r8)
    e344:	20000fbc 	.word	0x20000fbc
    e348:	20002708 	.word	0x20002708
    e34c:	200026f8 	.word	0x200026f8
    e350:	0000e56d 	.word	0x0000e56d

0000e354 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    e354:	b084      	sub	sp, #16
    e356:	b510      	push	{r4, lr}
    e358:	9103      	str	r1, [sp, #12]
    e35a:	9204      	str	r2, [sp, #16]
    e35c:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e35e:	4b0b      	ldr	r3, [pc, #44]	; (e38c <PDS_RegFile+0x38>)
    e360:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e362:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    e364:	2a00      	cmp	r2, #0
    e366:	d102      	bne.n	e36e <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e368:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    e36a:	280c      	cmp	r0, #12
    e36c:	d904      	bls.n	e378 <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    e36e:	0018      	movs	r0, r3
    e370:	bc10      	pop	{r4}
    e372:	bc08      	pop	{r3}
    e374:	b004      	add	sp, #16
    e376:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    e378:	0100      	lsls	r0, r0, #4
    e37a:	aa03      	add	r2, sp, #12
    e37c:	4b04      	ldr	r3, [pc, #16]	; (e390 <PDS_RegFile+0x3c>)
    e37e:	1818      	adds	r0, r3, r0
    e380:	ca1a      	ldmia	r2!, {r1, r3, r4}
    e382:	c01a      	stmia	r0!, {r1, r3, r4}
    e384:	6813      	ldr	r3, [r2, #0]
    e386:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    e388:	2300      	movs	r3, #0
    e38a:	e7f0      	b.n	e36e <PDS_RegFile+0x1a>
    e38c:	20000fbc 	.word	0x20000fbc
    e390:	20002708 	.word	0x20002708

0000e394 <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    e394:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    e396:	4b09      	ldr	r3, [pc, #36]	; (e3bc <PDS_UnRegFile+0x28>)
    e398:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    e39a:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    e39c:	2a00      	cmp	r2, #0
    e39e:	d102      	bne.n	e3a6 <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    e3a0:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    e3a2:	280c      	cmp	r0, #12
    e3a4:	d901      	bls.n	e3aa <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    e3a6:	0018      	movs	r0, r3
    e3a8:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    e3aa:	0100      	lsls	r0, r0, #4
    e3ac:	4b04      	ldr	r3, [pc, #16]	; (e3c0 <PDS_UnRegFile+0x2c>)
    e3ae:	18c0      	adds	r0, r0, r3
    e3b0:	3210      	adds	r2, #16
    e3b2:	2100      	movs	r1, #0
    e3b4:	4b03      	ldr	r3, [pc, #12]	; (e3c4 <PDS_UnRegFile+0x30>)
    e3b6:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    e3b8:	2300      	movs	r3, #0
    e3ba:	e7f4      	b.n	e3a6 <PDS_UnRegFile+0x12>
    e3bc:	20000fbc 	.word	0x20000fbc
    e3c0:	20002708 	.word	0x20002708
    e3c4:	00019e41 	.word	0x00019e41

0000e3c8 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    e3c8:	b500      	push	{lr}
    e3ca:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    e3cc:	4668      	mov	r0, sp
    e3ce:	4b0b      	ldr	r3, [pc, #44]	; (e3fc <pdsNvmInit+0x34>)
    e3d0:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    e3d2:	2000      	movs	r0, #0
    e3d4:	4b0a      	ldr	r3, [pc, #40]	; (e400 <pdsNvmInit+0x38>)
    e3d6:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    e3d8:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    e3da:	2800      	cmp	r0, #0
    e3dc:	d002      	beq.n	e3e4 <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    e3de:	0018      	movs	r0, r3
    e3e0:	b005      	add	sp, #20
    e3e2:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    e3e4:	466b      	mov	r3, sp
    e3e6:	899a      	ldrh	r2, [r3, #12]
    e3e8:	0892      	lsrs	r2, r2, #2
    e3ea:	0212      	lsls	r2, r2, #8
    e3ec:	4905      	ldr	r1, [pc, #20]	; (e404 <pdsNvmInit+0x3c>)
	return status;
    e3ee:	0fd3      	lsrs	r3, r2, #31
    e3f0:	17c8      	asrs	r0, r1, #31
    e3f2:	4291      	cmp	r1, r2
    e3f4:	4143      	adcs	r3, r0
    e3f6:	009b      	lsls	r3, r3, #2
    e3f8:	e7f1      	b.n	e3de <pdsNvmInit+0x16>
    e3fa:	46c0      	nop			; (mov r8, r8)
    e3fc:	00004e4d 	.word	0x00004e4d
    e400:	0000f9dd 	.word	0x0000f9dd
    e404:	00001fff 	.word	0x00001fff

0000e408 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e40a:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    e40c:	2380      	movs	r3, #128	; 0x80
    e40e:	01db      	lsls	r3, r3, #7
    e410:	469c      	mov	ip, r3
    e412:	4460      	add	r0, ip
    e414:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    e416:	2380      	movs	r3, #128	; 0x80
    e418:	005b      	lsls	r3, r3, #1
    e41a:	429a      	cmp	r2, r3
    e41c:	d00e      	beq.n	e43c <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    e41e:	3204      	adds	r2, #4
    e420:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    e422:	4f1e      	ldr	r7, [pc, #120]	; (e49c <pdsNvmRead+0x94>)
    e424:	0033      	movs	r3, r6
    e426:	0022      	movs	r2, r4
    e428:	0029      	movs	r1, r5
    e42a:	2000      	movs	r0, #0
    e42c:	47b8      	blx	r7
    e42e:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    e430:	2b05      	cmp	r3, #5
    e432:	d0f7      	beq.n	e424 <pdsNvmRead+0x1c>
		return PDS_ERROR;
    e434:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    e436:	2b00      	cmp	r3, #0
    e438:	d00b      	beq.n	e452 <pdsNvmRead+0x4a>
}
    e43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    e43c:	001e      	movs	r6, r3
    e43e:	4f17      	ldr	r7, [pc, #92]	; (e49c <pdsNvmRead+0x94>)
    e440:	0033      	movs	r3, r6
    e442:	0022      	movs	r2, r4
    e444:	0029      	movs	r1, r5
    e446:	2000      	movs	r0, #0
    e448:	47b8      	blx	r7
    e44a:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    e44c:	2b05      	cmp	r3, #5
    e44e:	d0f7      	beq.n	e440 <pdsNvmRead+0x38>
    e450:	e7f0      	b.n	e434 <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    e452:	7823      	ldrb	r3, [r4, #0]
    e454:	7860      	ldrb	r0, [r4, #1]
    e456:	0200      	lsls	r0, r0, #8
    e458:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    e45a:	78a6      	ldrb	r6, [r4, #2]
    e45c:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    e45e:	2e00      	cmp	r6, #0
    e460:	d017      	beq.n	e492 <pdsNvmRead+0x8a>
    e462:	0025      	movs	r5, r4
    e464:	3e01      	subs	r6, #1
    e466:	b2b6      	uxth	r6, r6
    e468:	3601      	adds	r6, #1
    e46a:	19a4      	adds	r4, r4, r6
    e46c:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    e46e:	782b      	ldrb	r3, [r5, #0]
    e470:	4073      	eors	r3, r6
    e472:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    e474:	010b      	lsls	r3, r1, #4
    e476:	404b      	eors	r3, r1
    e478:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e47a:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e47c:	091b      	lsrs	r3, r3, #4
    e47e:	00d1      	lsls	r1, r2, #3
    e480:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e482:	0212      	lsls	r2, r2, #8
    e484:	0a36      	lsrs	r6, r6, #8
    e486:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e488:	4053      	eors	r3, r2
    e48a:	b29e      	uxth	r6, r3
    e48c:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    e48e:	42a5      	cmp	r5, r4
    e490:	d1ed      	bne.n	e46e <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    e492:	1b80      	subs	r0, r0, r6
    e494:	1e46      	subs	r6, r0, #1
    e496:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    e498:	b2c0      	uxtb	r0, r0
    e49a:	e7ce      	b.n	e43a <pdsNvmRead+0x32>
    e49c:	0000f86d 	.word	0x0000f86d

0000e4a0 <pdsNvmWrite>:
{
    e4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4a2:	46c6      	mov	lr, r8
    e4a4:	b500      	push	{lr}
    e4a6:	4680      	mov	r8, r0
    e4a8:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    e4aa:	2301      	movs	r3, #1
    e4ac:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    e4ae:	708a      	strb	r2, [r1, #2]
    e4b0:	27ff      	movs	r7, #255	; 0xff
    e4b2:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    e4b4:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    e4b6:	2f00      	cmp	r7, #0
    e4b8:	d017      	beq.n	e4ea <pdsNvmWrite+0x4a>
    e4ba:	0030      	movs	r0, r6
    e4bc:	3f01      	subs	r7, #1
    e4be:	b2bf      	uxth	r7, r7
    e4c0:	3701      	adds	r7, #1
    e4c2:	19f6      	adds	r6, r6, r7
    e4c4:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    e4c6:	7803      	ldrb	r3, [r0, #0]
    e4c8:	407b      	eors	r3, r7
    e4ca:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    e4cc:	010b      	lsls	r3, r1, #4
    e4ce:	404b      	eors	r3, r1
    e4d0:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e4d2:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e4d4:	091b      	lsrs	r3, r3, #4
    e4d6:	00cd      	lsls	r5, r1, #3
    e4d8:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    e4da:	0209      	lsls	r1, r1, #8
    e4dc:	0a3f      	lsrs	r7, r7, #8
    e4de:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    e4e0:	404b      	eors	r3, r1
    e4e2:	b29f      	uxth	r7, r3
    e4e4:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    e4e6:	42b0      	cmp	r0, r6
    e4e8:	d1ed      	bne.n	e4c6 <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    e4ea:	7027      	strb	r7, [r4, #0]
    e4ec:	0a3f      	lsrs	r7, r7, #8
    e4ee:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    e4f0:	3204      	adds	r2, #4
    e4f2:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    e4f4:	2180      	movs	r1, #128	; 0x80
    e4f6:	01c9      	lsls	r1, r1, #7
    e4f8:	4441      	add	r1, r8
    e4fa:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    e4fc:	0033      	movs	r3, r6
    e4fe:	0022      	movs	r2, r4
    e500:	2000      	movs	r0, #0
    e502:	4f08      	ldr	r7, [pc, #32]	; (e524 <pdsNvmWrite+0x84>)
    e504:	47b8      	blx	r7
		return PDS_ERROR;
    e506:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    e508:	2800      	cmp	r0, #0
    e50a:	d003      	beq.n	e514 <pdsNvmWrite+0x74>
}
    e50c:	0018      	movs	r0, r3
    e50e:	bc04      	pop	{r2}
    e510:	4690      	mov	r8, r2
    e512:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    e514:	0032      	movs	r2, r6
    e516:	0021      	movs	r1, r4
    e518:	4640      	mov	r0, r8
    e51a:	4b03      	ldr	r3, [pc, #12]	; (e528 <pdsNvmWrite+0x88>)
    e51c:	4798      	blx	r3
    e51e:	0003      	movs	r3, r0
	return status;
    e520:	e7f4      	b.n	e50c <pdsNvmWrite+0x6c>
    e522:	46c0      	nop			; (mov r8, r8)
    e524:	0000f8c9 	.word	0x0000f8c9
    e528:	0000e409 	.word	0x0000e409

0000e52c <pdsNvmErase>:
{
    e52c:	b570      	push	{r4, r5, r6, lr}
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    e52e:	2380      	movs	r3, #128	; 0x80
    e530:	01db      	lsls	r3, r3, #7
    e532:	18c4      	adds	r4, r0, r3
    e534:	0224      	lsls	r4, r4, #8
		statusCode = nvm_erase_row(addr);
    e536:	4d05      	ldr	r5, [pc, #20]	; (e54c <pdsNvmErase+0x20>)
    e538:	0020      	movs	r0, r4
    e53a:	47a8      	blx	r5
    e53c:	b240      	sxtb	r0, r0
	} while (statusCode == ERR_BUSY);
    e53e:	0003      	movs	r3, r0
    e540:	330a      	adds	r3, #10
    e542:	d0f9      	beq.n	e538 <pdsNvmErase+0xc>
	return status;
    e544:	1e43      	subs	r3, r0, #1
    e546:	4198      	sbcs	r0, r3
    e548:	0040      	lsls	r0, r0, #1
}
    e54a:	bd70      	pop	{r4, r5, r6, pc}
    e54c:	00004da5 	.word	0x00004da5

0000e550 <pdsNvmEraseAll>:
{
    e550:	b570      	push	{r4, r5, r6, lr}
    e552:	2400      	movs	r4, #0
		statusCode = pdsNvmErase(row_idx);
    e554:	4d04      	ldr	r5, [pc, #16]	; (e568 <pdsNvmEraseAll+0x18>)
    e556:	b2a0      	uxth	r0, r4
    e558:	47a8      	blx	r5
		if (PDS_OK != statusCode)
    e55a:	2800      	cmp	r0, #0
    e55c:	d102      	bne.n	e564 <pdsNvmEraseAll+0x14>
    e55e:	3401      	adds	r4, #1
	for(uint8_t row_idx = 0; row_idx< EEPROM_NUM_ROWS; row_idx++)
    e560:	2c20      	cmp	r4, #32
    e562:	d1f8      	bne.n	e556 <pdsNvmEraseAll+0x6>
}
    e564:	bd70      	pop	{r4, r5, r6, pc}
    e566:	46c0      	nop			; (mov r8, r8)
    e568:	0000e52d 	.word	0x0000e52d

0000e56c <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    e56c:	b510      	push	{r4, lr}
    e56e:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    e570:	4b05      	ldr	r3, [pc, #20]	; (e588 <pdsPostTask+0x1c>)
    e572:	4798      	blx	r3
    pdsTaskFlags |= id;
    e574:	4b05      	ldr	r3, [pc, #20]	; (e58c <pdsPostTask+0x20>)
    e576:	7818      	ldrb	r0, [r3, #0]
    e578:	4320      	orrs	r0, r4
    e57a:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    e57c:	4b04      	ldr	r3, [pc, #16]	; (e590 <pdsPostTask+0x24>)
    e57e:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    e580:	2008      	movs	r0, #8
    e582:	4b04      	ldr	r3, [pc, #16]	; (e594 <pdsPostTask+0x28>)
    e584:	4798      	blx	r3
}
    e586:	bd10      	pop	{r4, pc}
    e588:	00008349 	.word	0x00008349
    e58c:	20000fbd 	.word	0x20000fbd
    e590:	00008355 	.word	0x00008355
    e594:	0000f435 	.word	0x0000f435

0000e598 <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    e598:	b5f0      	push	{r4, r5, r6, r7, lr}
    e59a:	46de      	mov	lr, fp
    e59c:	4657      	mov	r7, sl
    e59e:	464e      	mov	r6, r9
    e5a0:	4645      	mov	r5, r8
    e5a2:	b5e0      	push	{r5, r6, r7, lr}
    e5a4:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    e5a6:	2280      	movs	r2, #128	; 0x80
    e5a8:	0052      	lsls	r2, r2, #1
    e5aa:	2100      	movs	r1, #0
    e5ac:	a804      	add	r0, sp, #16
    e5ae:	4b54      	ldr	r3, [pc, #336]	; (e700 <pdsStoreDeleteHandler+0x168>)
    e5b0:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    e5b2:	4b54      	ldr	r3, [pc, #336]	; (e704 <pdsStoreDeleteHandler+0x16c>)
    e5b4:	781b      	ldrb	r3, [r3, #0]
    e5b6:	2b00      	cmp	r3, #0
    e5b8:	d112      	bne.n	e5e0 <pdsStoreDeleteHandler+0x48>
    e5ba:	2401      	movs	r4, #1
    e5bc:	4a51      	ldr	r2, [pc, #324]	; (e704 <pdsStoreDeleteHandler+0x16c>)
    e5be:	9400      	str	r4, [sp, #0]
    e5c0:	5d13      	ldrb	r3, [r2, r4]
    e5c2:	2b00      	cmp	r3, #0
    e5c4:	d10f      	bne.n	e5e6 <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    e5c6:	3401      	adds	r4, #1
    e5c8:	b2e4      	uxtb	r4, r4
    e5ca:	2c0c      	cmp	r4, #12
    e5cc:	d9f7      	bls.n	e5be <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    e5ce:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    e5d0:	0028      	movs	r0, r5
    e5d2:	b045      	add	sp, #276	; 0x114
    e5d4:	bc3c      	pop	{r2, r3, r4, r5}
    e5d6:	4690      	mov	r8, r2
    e5d8:	4699      	mov	r9, r3
    e5da:	46a2      	mov	sl, r4
    e5dc:	46ab      	mov	fp, r5
    e5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    e5e0:	2300      	movs	r3, #0
    e5e2:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    e5e4:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    e5e6:	9b00      	ldr	r3, [sp, #0]
    e5e8:	011a      	lsls	r2, r3, #4
    e5ea:	4b47      	ldr	r3, [pc, #284]	; (e708 <pdsStoreDeleteHandler+0x170>)
    e5ec:	189b      	adds	r3, r3, r2
    e5ee:	7919      	ldrb	r1, [r3, #4]
    e5f0:	4a46      	ldr	r2, [pc, #280]	; (e70c <pdsStoreDeleteHandler+0x174>)
    e5f2:	4694      	mov	ip, r2
    e5f4:	4461      	add	r1, ip
    e5f6:	00c9      	lsls	r1, r1, #3
    e5f8:	689b      	ldr	r3, [r3, #8]
    e5fa:	1859      	adds	r1, r3, r1
    e5fc:	2208      	movs	r2, #8
    e5fe:	a802      	add	r0, sp, #8
    e600:	4b43      	ldr	r3, [pc, #268]	; (e710 <pdsStoreDeleteHandler+0x178>)
    e602:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    e604:	ab02      	add	r3, sp, #8
    e606:	79da      	ldrb	r2, [r3, #7]
    e608:	799b      	ldrb	r3, [r3, #6]
    e60a:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    e60c:	3205      	adds	r2, #5
    e60e:	a904      	add	r1, sp, #16
    e610:	0020      	movs	r0, r4
    e612:	4b40      	ldr	r3, [pc, #256]	; (e714 <pdsStoreDeleteHandler+0x17c>)
    e614:	4798      	blx	r3
    e616:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    e618:	d111      	bne.n	e63e <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e61a:	9b00      	ldr	r3, [sp, #0]
    e61c:	011a      	lsls	r2, r3, #4
    e61e:	4b3a      	ldr	r3, [pc, #232]	; (e708 <pdsStoreDeleteHandler+0x170>)
    e620:	189b      	adds	r3, r3, r2
    e622:	791b      	ldrb	r3, [r3, #4]
    e624:	2500      	movs	r5, #0
    e626:	2b00      	cmp	r3, #0
    e628:	d04a      	beq.n	e6c0 <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    e62a:	4b37      	ldr	r3, [pc, #220]	; (e708 <pdsStoreDeleteHandler+0x170>)
    e62c:	4699      	mov	r9, r3
    e62e:	9b00      	ldr	r3, [sp, #0]
    e630:	011e      	lsls	r6, r3, #4
    e632:	46b3      	mov	fp, r6
    e634:	44cb      	add	fp, r9
    e636:	4b36      	ldr	r3, [pc, #216]	; (e710 <pdsStoreDeleteHandler+0x178>)
    e638:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e63a:	465f      	mov	r7, fp
    e63c:	e01b      	b.n	e676 <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    e63e:	2803      	cmp	r0, #3
    e640:	d144      	bne.n	e6cc <pdsStoreDeleteHandler+0x134>
    e642:	e7ea      	b.n	e61a <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    e644:	2100      	movs	r1, #0
    e646:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    e648:	ab02      	add	r3, sp, #8
    e64a:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    e64c:	795b      	ldrb	r3, [r3, #5]
    e64e:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    e650:	23a5      	movs	r3, #165	; 0xa5
    e652:	7003      	strb	r3, [r0, #0]
    e654:	2301      	movs	r3, #1
    e656:	7043      	strb	r3, [r0, #1]
    e658:	7082      	strb	r2, [r0, #2]
    e65a:	4643      	mov	r3, r8
    e65c:	70c3      	strb	r3, [r0, #3]
    e65e:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    e660:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    e662:	9b02      	ldr	r3, [sp, #8]
    e664:	9301      	str	r3, [sp, #4]
    e666:	0019      	movs	r1, r3
    e668:	4b29      	ldr	r3, [pc, #164]	; (e710 <pdsStoreDeleteHandler+0x178>)
    e66a:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    e66c:	3501      	adds	r5, #1
    e66e:	b2ed      	uxtb	r5, r5
    e670:	793b      	ldrb	r3, [r7, #4]
    e672:	42ab      	cmp	r3, r5
    e674:	d924      	bls.n	e6c0 <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    e676:	00e9      	lsls	r1, r5, #3
    e678:	465b      	mov	r3, fp
    e67a:	689b      	ldr	r3, [r3, #8]
    e67c:	469c      	mov	ip, r3
    e67e:	4461      	add	r1, ip
    e680:	2208      	movs	r2, #8
    e682:	a802      	add	r0, sp, #8
    e684:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    e686:	ab02      	add	r3, sp, #8
    e688:	79d8      	ldrb	r0, [r3, #7]
    e68a:	2315      	movs	r3, #21
    e68c:	aa02      	add	r2, sp, #8
    e68e:	4694      	mov	ip, r2
    e690:	4463      	add	r3, ip
    e692:	469c      	mov	ip, r3
    e694:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    e696:	464b      	mov	r3, r9
    e698:	58f3      	ldr	r3, [r6, r3]
    e69a:	195b      	adds	r3, r3, r5
    e69c:	781a      	ldrb	r2, [r3, #0]
    e69e:	2a01      	cmp	r2, #1
    e6a0:	d0d0      	beq.n	e644 <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    e6a2:	2a02      	cmp	r2, #2
    e6a4:	d1e2      	bne.n	e66c <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    e6a6:	2200      	movs	r2, #0
    e6a8:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    e6aa:	ab02      	add	r3, sp, #8
    e6ac:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    e6ae:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    e6b0:	23a5      	movs	r3, #165	; 0xa5
    e6b2:	7003      	strb	r3, [r0, #0]
    e6b4:	3ba4      	subs	r3, #164	; 0xa4
    e6b6:	7043      	strb	r3, [r0, #1]
    e6b8:	7081      	strb	r1, [r0, #2]
    e6ba:	70c2      	strb	r2, [r0, #3]
    e6bc:	7103      	strb	r3, [r0, #4]
    e6be:	e7d5      	b.n	e66c <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    e6c0:	22f3      	movs	r2, #243	; 0xf3
    e6c2:	a904      	add	r1, sp, #16
    e6c4:	0020      	movs	r0, r4
    e6c6:	4b14      	ldr	r3, [pc, #80]	; (e718 <pdsStoreDeleteHandler+0x180>)
    e6c8:	4798      	blx	r3
    e6ca:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    e6cc:	2200      	movs	r2, #0
    e6ce:	4b0d      	ldr	r3, [pc, #52]	; (e704 <pdsStoreDeleteHandler+0x16c>)
    e6d0:	9900      	ldr	r1, [sp, #0]
    e6d2:	545a      	strb	r2, [r3, r1]
			fileId++;
    e6d4:	3401      	adds	r4, #1
    e6d6:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    e6d8:	2b0c      	cmp	r3, #12
    e6da:	d900      	bls.n	e6de <pdsStoreDeleteHandler+0x146>
    e6dc:	e778      	b.n	e5d0 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    e6de:	4a09      	ldr	r2, [pc, #36]	; (e704 <pdsStoreDeleteHandler+0x16c>)
    e6e0:	5cd2      	ldrb	r2, [r2, r3]
    e6e2:	2a00      	cmp	r2, #0
    e6e4:	d108      	bne.n	e6f8 <pdsStoreDeleteHandler+0x160>
    e6e6:	4907      	ldr	r1, [pc, #28]	; (e704 <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    e6e8:	3301      	adds	r3, #1
    e6ea:	b2db      	uxtb	r3, r3
    e6ec:	2b0c      	cmp	r3, #12
    e6ee:	d900      	bls.n	e6f2 <pdsStoreDeleteHandler+0x15a>
    e6f0:	e76e      	b.n	e5d0 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    e6f2:	5cca      	ldrb	r2, [r1, r3]
    e6f4:	2a00      	cmp	r2, #0
    e6f6:	d0f7      	beq.n	e6e8 <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    e6f8:	2001      	movs	r0, #1
    e6fa:	4b08      	ldr	r3, [pc, #32]	; (e71c <pdsStoreDeleteHandler+0x184>)
    e6fc:	4798      	blx	r3
			break;
    e6fe:	e767      	b.n	e5d0 <pdsStoreDeleteHandler+0x38>
    e700:	00019e41 	.word	0x00019e41
    e704:	200026f8 	.word	0x200026f8
    e708:	20002708 	.word	0x20002708
    e70c:	1fffffff 	.word	0x1fffffff
    e710:	00019d1d 	.word	0x00019d1d
    e714:	0000ea31 	.word	0x0000ea31
    e718:	0000e941 	.word	0x0000e941
    e71c:	0000e56d 	.word	0x0000e56d

0000e720 <PDS_TaskHandler>:
{
    e720:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    e722:	4b0e      	ldr	r3, [pc, #56]	; (e75c <PDS_TaskHandler+0x3c>)
    e724:	781b      	ldrb	r3, [r3, #0]
    e726:	2b00      	cmp	r3, #0
    e728:	d003      	beq.n	e732 <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    e72a:	4b0c      	ldr	r3, [pc, #48]	; (e75c <PDS_TaskHandler+0x3c>)
    e72c:	781b      	ldrb	r3, [r3, #0]
    e72e:	07db      	lsls	r3, r3, #31
    e730:	d401      	bmi.n	e736 <PDS_TaskHandler+0x16>
}
    e732:	2000      	movs	r0, #0
    e734:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    e736:	4b0a      	ldr	r3, [pc, #40]	; (e760 <PDS_TaskHandler+0x40>)
    e738:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    e73a:	4c08      	ldr	r4, [pc, #32]	; (e75c <PDS_TaskHandler+0x3c>)
    e73c:	7823      	ldrb	r3, [r4, #0]
    e73e:	2201      	movs	r2, #1
    e740:	4393      	bics	r3, r2
    e742:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    e744:	4b07      	ldr	r3, [pc, #28]	; (e764 <PDS_TaskHandler+0x44>)
    e746:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    e748:	4b07      	ldr	r3, [pc, #28]	; (e768 <PDS_TaskHandler+0x48>)
    e74a:	4798      	blx	r3
				if (pdsTaskFlags)
    e74c:	7823      	ldrb	r3, [r4, #0]
    e74e:	2b00      	cmp	r3, #0
    e750:	d0ef      	beq.n	e732 <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    e752:	2008      	movs	r0, #8
    e754:	4b05      	ldr	r3, [pc, #20]	; (e76c <PDS_TaskHandler+0x4c>)
    e756:	4798      	blx	r3
    e758:	e7eb      	b.n	e732 <PDS_TaskHandler+0x12>
    e75a:	46c0      	nop			; (mov r8, r8)
    e75c:	20000fbd 	.word	0x20000fbd
    e760:	00008349 	.word	0x00008349
    e764:	00008355 	.word	0x00008355
    e768:	0000e599 	.word	0x0000e599
    e76c:	0000f435 	.word	0x0000f435

0000e770 <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    e770:	b5f0      	push	{r4, r5, r6, r7, lr}
    e772:	4e12      	ldr	r6, [pc, #72]	; (e7bc <pdsUpdateRowMap+0x4c>)
    e774:	0037      	movs	r7, r6
    e776:	371a      	adds	r7, #26
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    e778:	4d11      	ldr	r5, [pc, #68]	; (e7c0 <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    e77a:	4b12      	ldr	r3, [pc, #72]	; (e7c4 <pdsUpdateRowMap+0x54>)
    e77c:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    e77e:	2101      	movs	r1, #1
    e780:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    e782:	0018      	movs	r0, r3
    e784:	e002      	b.n	e78c <pdsUpdateRowMap+0x1c>
    e786:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    e788:	42be      	cmp	r6, r7
    e78a:	d015      	beq.n	e7b8 <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    e78c:	8833      	ldrh	r3, [r6, #0]
    e78e:	42ab      	cmp	r3, r5
    e790:	d0f9      	beq.n	e786 <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    e792:	00db      	lsls	r3, r3, #3
    e794:	4463      	add	r3, ip
    e796:	001a      	movs	r2, r3
    e798:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    e79a:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    e79c:	42ab      	cmp	r3, r5
    e79e:	d0f2      	beq.n	e786 <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    e7a0:	001a      	movs	r2, r3
    e7a2:	00db      	lsls	r3, r3, #3
    e7a4:	18c3      	adds	r3, r0, r3
    e7a6:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    e7a8:	00d2      	lsls	r2, r2, #3
    e7aa:	1884      	adds	r4, r0, r2
    e7ac:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    e7ae:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    e7b0:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    e7b2:	42ab      	cmp	r3, r5
    e7b4:	d1f4      	bne.n	e7a0 <pdsUpdateRowMap+0x30>
    e7b6:	e7e6      	b.n	e786 <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    e7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7ba:	46c0      	nop			; (mov r8, r8)
    e7bc:	20000fc0 	.word	0x20000fc0
    e7c0:	0000ffff 	.word	0x0000ffff
    e7c4:	20000fdc 	.word	0x20000fdc

0000e7c8 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    e7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7ca:	46c6      	mov	lr, r8
    e7cc:	b500      	push	{lr}
    e7ce:	b082      	sub	sp, #8
    e7d0:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    e7d2:	8881      	ldrh	r1, [r0, #4]
    e7d4:	004a      	lsls	r2, r1, #1
    e7d6:	4b2c      	ldr	r3, [pc, #176]	; (e888 <pdsUpdateFileMap+0xc0>)
    e7d8:	5ad3      	ldrh	r3, [r2, r3]
    e7da:	4a2c      	ldr	r2, [pc, #176]	; (e88c <pdsUpdateFileMap+0xc4>)
    e7dc:	4293      	cmp	r3, r2
    e7de:	d02c      	beq.n	e83a <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    e7e0:	4a2b      	ldr	r2, [pc, #172]	; (e890 <pdsUpdateFileMap+0xc8>)
    e7e2:	00d8      	lsls	r0, r3, #3
    e7e4:	5880      	ldr	r0, [r0, r2]
    e7e6:	4664      	mov	r4, ip
    e7e8:	88e4      	ldrh	r4, [r4, #6]
    e7ea:	46a0      	mov	r8, r4
    e7ec:	00e4      	lsls	r4, r4, #3
    e7ee:	58a6      	ldr	r6, [r4, r2]
    e7f0:	42b0      	cmp	r0, r6
    e7f2:	d327      	bcc.n	e844 <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    e7f4:	d02f      	beq.n	e856 <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    e7f6:	4a26      	ldr	r2, [pc, #152]	; (e890 <pdsUpdateFileMap+0xc8>)
    e7f8:	00dd      	lsls	r5, r3, #3
    e7fa:	3506      	adds	r5, #6
    e7fc:	1950      	adds	r0, r2, r5
    e7fe:	9001      	str	r0, [sp, #4]
    e800:	00db      	lsls	r3, r3, #3
    e802:	18d3      	adds	r3, r2, r3
    e804:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    e806:	4b21      	ldr	r3, [pc, #132]	; (e88c <pdsUpdateFileMap+0xc4>)
    e808:	429a      	cmp	r2, r3
    e80a:	d028      	beq.n	e85e <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    e80c:	0013      	movs	r3, r2
    e80e:	00d0      	lsls	r0, r2, #3
    e810:	4c1f      	ldr	r4, [pc, #124]	; (e890 <pdsUpdateFileMap+0xc8>)
    e812:	5900      	ldr	r0, [r0, r4]
    e814:	4286      	cmp	r6, r0
    e816:	d226      	bcs.n	e866 <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    e818:	4c1d      	ldr	r4, [pc, #116]	; (e890 <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    e81a:	4f1c      	ldr	r7, [pc, #112]	; (e88c <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    e81c:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    e81e:	00db      	lsls	r3, r3, #3
    e820:	1d99      	adds	r1, r3, #6
    e822:	1861      	adds	r1, r4, r1
    e824:	18e3      	adds	r3, r4, r3
    e826:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    e828:	42ba      	cmp	r2, r7
    e82a:	d019      	beq.n	e860 <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    e82c:	0013      	movs	r3, r2
    e82e:	00d5      	lsls	r5, r2, #3
    e830:	582d      	ldr	r5, [r5, r0]
    e832:	42ae      	cmp	r6, r5
    e834:	d21b      	bcs.n	e86e <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    e836:	9101      	str	r1, [sp, #4]
    e838:	e7f1      	b.n	e81e <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    e83a:	88c2      	ldrh	r2, [r0, #6]
    e83c:	0049      	lsls	r1, r1, #1
    e83e:	4b12      	ldr	r3, [pc, #72]	; (e888 <pdsUpdateFileMap+0xc0>)
    e840:	52ca      	strh	r2, [r1, r3]
    e842:	e008      	b.n	e856 <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    e844:	4a12      	ldr	r2, [pc, #72]	; (e890 <pdsUpdateFileMap+0xc8>)
    e846:	1912      	adds	r2, r2, r4
    e848:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    e84a:	4663      	mov	r3, ip
    e84c:	88d9      	ldrh	r1, [r3, #6]
    e84e:	889b      	ldrh	r3, [r3, #4]
    e850:	005b      	lsls	r3, r3, #1
    e852:	4a0d      	ldr	r2, [pc, #52]	; (e888 <pdsUpdateFileMap+0xc0>)
    e854:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    e856:	b002      	add	sp, #8
    e858:	bc04      	pop	{r2}
    e85a:	4690      	mov	r8, r2
    e85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    e85e:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    e860:	4643      	mov	r3, r8
    e862:	800b      	strh	r3, [r1, #0]
				break;
    e864:	e7f7      	b.n	e856 <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    e866:	0049      	lsls	r1, r1, #1
    e868:	4d07      	ldr	r5, [pc, #28]	; (e888 <pdsUpdateFileMap+0xc0>)
    e86a:	186b      	adds	r3, r5, r1
    e86c:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    e86e:	4908      	ldr	r1, [pc, #32]	; (e890 <pdsUpdateFileMap+0xc8>)
    e870:	9b01      	ldr	r3, [sp, #4]
    e872:	881b      	ldrh	r3, [r3, #0]
    e874:	00db      	lsls	r3, r3, #3
    e876:	18cb      	adds	r3, r1, r3
    e878:	4640      	mov	r0, r8
    e87a:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    e87c:	4663      	mov	r3, ip
    e87e:	88db      	ldrh	r3, [r3, #6]
    e880:	00db      	lsls	r3, r3, #3
    e882:	18c9      	adds	r1, r1, r3
    e884:	80ca      	strh	r2, [r1, #6]
				break;
    e886:	e7e6      	b.n	e856 <pdsUpdateFileMap+0x8e>
    e888:	20000fc0 	.word	0x20000fc0
    e88c:	0000ffff 	.word	0x0000ffff
    e890:	20000fdc 	.word	0x20000fdc

0000e894 <pdsWlInit>:
{
    e894:	b5f0      	push	{r4, r5, r6, r7, lr}
    e896:	46c6      	mov	lr, r8
    e898:	b500      	push	{lr}
    e89a:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    e89c:	4b21      	ldr	r3, [pc, #132]	; (e924 <pdsWlInit+0x90>)
    e89e:	4798      	blx	r3
    e8a0:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    e8a2:	2800      	cmp	r0, #0
    e8a4:	d004      	beq.n	e8b0 <pdsWlInit+0x1c>
}
    e8a6:	9801      	ldr	r0, [sp, #4]
    e8a8:	b044      	add	sp, #272	; 0x110
    e8aa:	bc04      	pop	{r2}
    e8ac:	4690      	mov	r8, r2
    e8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    e8b0:	2680      	movs	r6, #128	; 0x80
    e8b2:	0076      	lsls	r6, r6, #1
    e8b4:	4d1c      	ldr	r5, [pc, #112]	; (e928 <pdsWlInit+0x94>)
    e8b6:	0032      	movs	r2, r6
    e8b8:	21ff      	movs	r1, #255	; 0xff
    e8ba:	0028      	movs	r0, r5
    e8bc:	4c1b      	ldr	r4, [pc, #108]	; (e92c <pdsWlInit+0x98>)
    e8be:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    e8c0:	221a      	movs	r2, #26
    e8c2:	21ff      	movs	r1, #255	; 0xff
    e8c4:	481a      	ldr	r0, [pc, #104]	; (e930 <pdsWlInit+0x9c>)
    e8c6:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    e8c8:	0032      	movs	r2, r6
    e8ca:	2100      	movs	r1, #0
    e8cc:	a804      	add	r0, sp, #16
    e8ce:	47a0      	blx	r4
    e8d0:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    e8d2:	4e18      	ldr	r6, [pc, #96]	; (e934 <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    e8d4:	4b18      	ldr	r3, [pc, #96]	; (e938 <pdsWlInit+0xa4>)
    e8d6:	4698      	mov	r8, r3
    e8d8:	e003      	b.n	e8e2 <pdsWlInit+0x4e>
    e8da:	3401      	adds	r4, #1
    e8dc:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    e8de:	2c20      	cmp	r4, #32
    e8e0:	d01d      	beq.n	e91e <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    e8e2:	b2a7      	uxth	r7, r4
    e8e4:	2280      	movs	r2, #128	; 0x80
    e8e6:	0052      	lsls	r2, r2, #1
    e8e8:	a904      	add	r1, sp, #16
    e8ea:	0038      	movs	r0, r7
    e8ec:	47b0      	blx	r6
		if (PDS_OK == status)
    e8ee:	2800      	cmp	r0, #0
    e8f0:	d1f3      	bne.n	e8da <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    e8f2:	a904      	add	r1, sp, #16
    e8f4:	9b06      	ldr	r3, [sp, #24]
    e8f6:	0a1b      	lsrs	r3, r3, #8
    e8f8:	7b0a      	ldrb	r2, [r1, #12]
    e8fa:	0612      	lsls	r2, r2, #24
    e8fc:	431a      	orrs	r2, r3
    e8fe:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    e900:	79c8      	ldrb	r0, [r1, #7]
    e902:	7a0b      	ldrb	r3, [r1, #8]
    e904:	021b      	lsls	r3, r3, #8
    e906:	4303      	orrs	r3, r0
    e908:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    e90a:	2101      	movs	r1, #1
    e90c:	4249      	negs	r1, r1
    e90e:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    e910:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    e912:	aa02      	add	r2, sp, #8
    e914:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    e916:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    e918:	0010      	movs	r0, r2
    e91a:	47c0      	blx	r8
    e91c:	e7dd      	b.n	e8da <pdsWlInit+0x46>
    pdsUpdateRowMap();
    e91e:	4b07      	ldr	r3, [pc, #28]	; (e93c <pdsWlInit+0xa8>)
    e920:	4798      	blx	r3
	return PDS_OK;
    e922:	e7c0      	b.n	e8a6 <pdsWlInit+0x12>
    e924:	0000e3c9 	.word	0x0000e3c9
    e928:	20000fdc 	.word	0x20000fdc
    e92c:	00019e41 	.word	0x00019e41
    e930:	20000fc0 	.word	0x20000fc0
    e934:	0000e409 	.word	0x0000e409
    e938:	0000e7c9 	.word	0x0000e7c9
    e93c:	0000e771 	.word	0x0000e771

0000e940 <pdsWlWrite>:
{
    e940:	b5f0      	push	{r4, r5, r6, r7, lr}
    e942:	46ce      	mov	lr, r9
    e944:	4647      	mov	r7, r8
    e946:	b580      	push	{r7, lr}
    e948:	b083      	sub	sp, #12
    e94a:	0005      	movs	r5, r0
    e94c:	000f      	movs	r7, r1
    e94e:	4690      	mov	r8, r2
    e950:	4e32      	ldr	r6, [pc, #200]	; (ea1c <pdsWlWrite+0xdc>)
    e952:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    e954:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    e956:	4832      	ldr	r0, [pc, #200]	; (ea20 <pdsWlWrite+0xe0>)
    e958:	e004      	b.n	e964 <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    e95a:	3401      	adds	r4, #1
    e95c:	b2e4      	uxtb	r4, r4
    e95e:	3308      	adds	r3, #8
    e960:	2c20      	cmp	r4, #32
    e962:	d055      	beq.n	ea10 <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    e964:	6819      	ldr	r1, [r3, #0]
    e966:	3101      	adds	r1, #1
    e968:	d1f7      	bne.n	e95a <pdsWlWrite+0x1a>
    e96a:	88d9      	ldrh	r1, [r3, #6]
    e96c:	4281      	cmp	r1, r0
    e96e:	d1f4      	bne.n	e95a <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    e970:	889a      	ldrh	r2, [r3, #4]
    e972:	4282      	cmp	r2, r0
    e974:	d1f1      	bne.n	e95a <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    e976:	b2a3      	uxth	r3, r4
    e978:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    e97a:	7a7e      	ldrb	r6, [r7, #9]
    e97c:	7abb      	ldrb	r3, [r7, #10]
    e97e:	021b      	lsls	r3, r3, #8
    e980:	4333      	orrs	r3, r6
    e982:	7afe      	ldrb	r6, [r7, #11]
    e984:	0436      	lsls	r6, r6, #16
    e986:	4333      	orrs	r3, r6
    e988:	7b3e      	ldrb	r6, [r7, #12]
    e98a:	0636      	lsls	r6, r6, #24
    e98c:	431e      	orrs	r6, r3
    e98e:	3601      	adds	r6, #1
    e990:	727e      	strb	r6, [r7, #9]
    e992:	0a32      	lsrs	r2, r6, #8
    e994:	72ba      	strb	r2, [r7, #10]
    e996:	0c32      	lsrs	r2, r6, #16
    e998:	72fa      	strb	r2, [r7, #11]
    e99a:	0e32      	lsrs	r2, r6, #24
    e99c:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    e99e:	b2ad      	uxth	r5, r5
    e9a0:	71fd      	strb	r5, [r7, #7]
    e9a2:	2200      	movs	r2, #0
    e9a4:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    e9a6:	23a5      	movs	r3, #165	; 0xa5
    e9a8:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    e9aa:	3ba4      	subs	r3, #164	; 0xa4
    e9ac:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    e9ae:	4643      	mov	r3, r8
    e9b0:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    e9b2:	4642      	mov	r2, r8
    e9b4:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    e9b6:	b292      	uxth	r2, r2
    e9b8:	0039      	movs	r1, r7
    e9ba:	4648      	mov	r0, r9
    e9bc:	4b19      	ldr	r3, [pc, #100]	; (ea24 <pdsWlWrite+0xe4>)
    e9be:	4798      	blx	r3
    e9c0:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    e9c2:	d014      	beq.n	e9ee <pdsWlWrite+0xae>
}
    e9c4:	0038      	movs	r0, r7
    e9c6:	b003      	add	sp, #12
    e9c8:	bc0c      	pop	{r2, r3}
    e9ca:	4690      	mov	r8, r2
    e9cc:	4699      	mov	r9, r3
    e9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    e9d0:	3401      	adds	r4, #1
    e9d2:	b2e4      	uxtb	r4, r4
    e9d4:	3608      	adds	r6, #8
    e9d6:	2c20      	cmp	r4, #32
    e9d8:	d0cd      	beq.n	e976 <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    e9da:	6832      	ldr	r2, [r6, #0]
    e9dc:	3201      	adds	r2, #1
    e9de:	d1f7      	bne.n	e9d0 <pdsWlWrite+0x90>
    e9e0:	88f2      	ldrh	r2, [r6, #6]
    e9e2:	428a      	cmp	r2, r1
    e9e4:	d1f4      	bne.n	e9d0 <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    e9e6:	88b3      	ldrh	r3, [r6, #4]
    e9e8:	428b      	cmp	r3, r1
    e9ea:	d1f1      	bne.n	e9d0 <pdsWlWrite+0x90>
    e9ec:	e7c3      	b.n	e976 <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    e9ee:	4b0b      	ldr	r3, [pc, #44]	; (ea1c <pdsWlWrite+0xdc>)
    e9f0:	00e4      	lsls	r4, r4, #3
    e9f2:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    e9f4:	191c      	adds	r4, r3, r4
    e9f6:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    e9f8:	2301      	movs	r3, #1
    e9fa:	425b      	negs	r3, r3
    e9fc:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    e9fe:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    ea00:	466b      	mov	r3, sp
    ea02:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    ea04:	464a      	mov	r2, r9
    ea06:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    ea08:	4668      	mov	r0, sp
    ea0a:	4b07      	ldr	r3, [pc, #28]	; (ea28 <pdsWlWrite+0xe8>)
    ea0c:	4798      	blx	r3
	return status;
    ea0e:	e7d9      	b.n	e9c4 <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    ea10:	4b06      	ldr	r3, [pc, #24]	; (ea2c <pdsWlWrite+0xec>)
    ea12:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    ea14:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    ea16:	4902      	ldr	r1, [pc, #8]	; (ea20 <pdsWlWrite+0xe0>)
    ea18:	e7df      	b.n	e9da <pdsWlWrite+0x9a>
    ea1a:	46c0      	nop			; (mov r8, r8)
    ea1c:	20000fdc 	.word	0x20000fdc
    ea20:	0000ffff 	.word	0x0000ffff
    ea24:	0000e4a1 	.word	0x0000e4a1
    ea28:	0000e7c9 	.word	0x0000e7c9
    ea2c:	0000e771 	.word	0x0000e771

0000ea30 <pdsWlRead>:
{
    ea30:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    ea32:	0040      	lsls	r0, r0, #1
    ea34:	4b06      	ldr	r3, [pc, #24]	; (ea50 <pdsWlRead+0x20>)
    ea36:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    ea38:	4c06      	ldr	r4, [pc, #24]	; (ea54 <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    ea3a:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    ea3c:	42a3      	cmp	r3, r4
    ea3e:	d100      	bne.n	ea42 <pdsWlRead+0x12>
}
    ea40:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    ea42:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    ea44:	b292      	uxth	r2, r2
    ea46:	0018      	movs	r0, r3
    ea48:	4b03      	ldr	r3, [pc, #12]	; (ea58 <pdsWlRead+0x28>)
    ea4a:	4798      	blx	r3
	return status;
    ea4c:	e7f8      	b.n	ea40 <pdsWlRead+0x10>
    ea4e:	46c0      	nop			; (mov r8, r8)
    ea50:	20000fc0 	.word	0x20000fc0
    ea54:	0000ffff 	.word	0x0000ffff
    ea58:	0000e409 	.word	0x0000e409

0000ea5c <isFileFound>:

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    ea5c:	0040      	lsls	r0, r0, #1
	if (USHRT_MAX == rowIdx)
    ea5e:	4b04      	ldr	r3, [pc, #16]	; (ea70 <isFileFound+0x14>)
    ea60:	5ac0      	ldrh	r0, [r0, r3]
    ea62:	4b04      	ldr	r3, [pc, #16]	; (ea74 <isFileFound+0x18>)
    ea64:	469c      	mov	ip, r3
    ea66:	4460      	add	r0, ip
    ea68:	1e43      	subs	r3, r0, #1
    ea6a:	4198      	sbcs	r0, r3
    ea6c:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}
}
    ea6e:	4770      	bx	lr
    ea70:	20000fc0 	.word	0x20000fc0
    ea74:	ffff0001 	.word	0xffff0001

0000ea78 <pdsWlDeleteAll>:

void pdsWlDeleteAll(void)
{
    ea78:	b510      	push	{r4, lr}
	/* Clear Filemap array */
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    ea7a:	2280      	movs	r2, #128	; 0x80
    ea7c:	0052      	lsls	r2, r2, #1
    ea7e:	21ff      	movs	r1, #255	; 0xff
    ea80:	4804      	ldr	r0, [pc, #16]	; (ea94 <pdsWlDeleteAll+0x1c>)
    ea82:	4c05      	ldr	r4, [pc, #20]	; (ea98 <pdsWlDeleteAll+0x20>)
    ea84:	47a0      	blx	r4
	/* Clear Row Map Array */
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    ea86:	221a      	movs	r2, #26
    ea88:	21ff      	movs	r1, #255	; 0xff
    ea8a:	4804      	ldr	r0, [pc, #16]	; (ea9c <pdsWlDeleteAll+0x24>)
    ea8c:	47a0      	blx	r4
	/* Call NVM Erase All */
	pdsNvmEraseAll();
    ea8e:	4b04      	ldr	r3, [pc, #16]	; (eaa0 <pdsWlDeleteAll+0x28>)
    ea90:	4798      	blx	r3
}
    ea92:	bd10      	pop	{r4, pc}
    ea94:	20000fdc 	.word	0x20000fdc
    ea98:	00019e41 	.word	0x00019e41
    ea9c:	20000fc0 	.word	0x20000fc0
    eaa0:	0000e551 	.word	0x0000e551

0000eaa4 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    eaa4:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    eaa6:	4b06      	ldr	r3, [pc, #24]	; (eac0 <hwTimerExpiryCallback+0x1c>)
    eaa8:	781b      	ldrb	r3, [r3, #0]
    eaaa:	2b00      	cmp	r3, #0
    eaac:	d100      	bne.n	eab0 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    eaae:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    eab0:	2201      	movs	r2, #1
    eab2:	4b04      	ldr	r3, [pc, #16]	; (eac4 <hwTimerExpiryCallback+0x20>)
    eab4:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    eab6:	2001      	movs	r0, #1
    eab8:	4b03      	ldr	r3, [pc, #12]	; (eac8 <hwTimerExpiryCallback+0x24>)
    eaba:	4798      	blx	r3
}
    eabc:	e7f7      	b.n	eaae <hwTimerExpiryCallback+0xa>
    eabe:	46c0      	nop			; (mov r8, r8)
    eac0:	200010ec 	.word	0x200010ec
    eac4:	2000297a 	.word	0x2000297a
    eac8:	0000f435 	.word	0x0000f435

0000eacc <hwTimerOverflowCallback>:
{
    eacc:	b510      	push	{r4, lr}
    eace:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    ead0:	4924      	ldr	r1, [pc, #144]	; (eb64 <hwTimerOverflowCallback+0x98>)
    ead2:	880a      	ldrh	r2, [r1, #0]
    ead4:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    ead6:	880b      	ldrh	r3, [r1, #0]
    ead8:	3301      	adds	r3, #1
    eada:	b29b      	uxth	r3, r3
    eadc:	800b      	strh	r3, [r1, #0]
    eade:	429a      	cmp	r2, r3
    eae0:	d903      	bls.n	eaea <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    eae2:	4a21      	ldr	r2, [pc, #132]	; (eb68 <hwTimerOverflowCallback+0x9c>)
    eae4:	6813      	ldr	r3, [r2, #0]
    eae6:	3301      	adds	r3, #1
    eae8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    eaea:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    eaee:	425a      	negs	r2, r3
    eaf0:	4153      	adcs	r3, r2
    eaf2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    eaf4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    eaf6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    eafa:	2200      	movs	r2, #0
    eafc:	4b1b      	ldr	r3, [pc, #108]	; (eb6c <hwTimerOverflowCallback+0xa0>)
    eafe:	701a      	strb	r2, [r3, #0]
	return flags;
    eb00:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    eb02:	4b1b      	ldr	r3, [pc, #108]	; (eb70 <hwTimerOverflowCallback+0xa4>)
    eb04:	681b      	ldr	r3, [r3, #0]
    eb06:	2bff      	cmp	r3, #255	; 0xff
    eb08:	d00d      	beq.n	eb26 <hwTimerOverflowCallback+0x5a>
    eb0a:	0119      	lsls	r1, r3, #4
    eb0c:	4a19      	ldr	r2, [pc, #100]	; (eb74 <hwTimerOverflowCallback+0xa8>)
    eb0e:	1852      	adds	r2, r2, r1
    eb10:	7b52      	ldrb	r2, [r2, #13]
    eb12:	2a00      	cmp	r2, #0
    eb14:	d107      	bne.n	eb26 <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    eb16:	4a17      	ldr	r2, [pc, #92]	; (eb74 <hwTimerOverflowCallback+0xa8>)
    eb18:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    eb1a:	4b12      	ldr	r3, [pc, #72]	; (eb64 <hwTimerOverflowCallback+0x98>)
    eb1c:	881b      	ldrh	r3, [r3, #0]
    eb1e:	b29b      	uxth	r3, r3
    eb20:	0c02      	lsrs	r2, r0, #16
    eb22:	429a      	cmp	r2, r3
    eb24:	d00a      	beq.n	eb3c <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    eb26:	23ff      	movs	r3, #255	; 0xff
    eb28:	4223      	tst	r3, r4
    eb2a:	d005      	beq.n	eb38 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    eb2c:	2201      	movs	r2, #1
    eb2e:	4b0f      	ldr	r3, [pc, #60]	; (eb6c <hwTimerOverflowCallback+0xa0>)
    eb30:	701a      	strb	r2, [r3, #0]
    eb32:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    eb36:	b662      	cpsie	i
}
    eb38:	b002      	add	sp, #8
    eb3a:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    eb3c:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    eb3e:	28ff      	cmp	r0, #255	; 0xff
    eb40:	d909      	bls.n	eb56 <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    eb42:	4b0d      	ldr	r3, [pc, #52]	; (eb78 <hwTimerOverflowCallback+0xac>)
    eb44:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    eb46:	4b0a      	ldr	r3, [pc, #40]	; (eb70 <hwTimerOverflowCallback+0xa4>)
    eb48:	681a      	ldr	r2, [r3, #0]
    eb4a:	0112      	lsls	r2, r2, #4
    eb4c:	4b09      	ldr	r3, [pc, #36]	; (eb74 <hwTimerOverflowCallback+0xa8>)
    eb4e:	189b      	adds	r3, r3, r2
    eb50:	2201      	movs	r2, #1
    eb52:	735a      	strb	r2, [r3, #13]
    eb54:	e7e7      	b.n	eb26 <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    eb56:	2201      	movs	r2, #1
    eb58:	4b08      	ldr	r3, [pc, #32]	; (eb7c <hwTimerOverflowCallback+0xb0>)
    eb5a:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    eb5c:	2001      	movs	r0, #1
    eb5e:	4b08      	ldr	r3, [pc, #32]	; (eb80 <hwTimerOverflowCallback+0xb4>)
    eb60:	4798      	blx	r3
    eb62:	e7e0      	b.n	eb26 <hwTimerOverflowCallback+0x5a>
    eb64:	20002978 	.word	0x20002978
    eb68:	2000297c 	.word	0x2000297c
    eb6c:	20000014 	.word	0x20000014
    eb70:	200010e8 	.word	0x200010e8
    eb74:	200027e8 	.word	0x200027e8
    eb78:	0000fc11 	.word	0x0000fc11
    eb7c:	2000297a 	.word	0x2000297a
    eb80:	0000f435 	.word	0x0000f435

0000eb84 <loadHwTimer>:
{
    eb84:	b570      	push	{r4, r5, r6, lr}
    eb86:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    eb88:	28ff      	cmp	r0, #255	; 0xff
    eb8a:	d030      	beq.n	ebee <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    eb8c:	4b19      	ldr	r3, [pc, #100]	; (ebf4 <loadHwTimer+0x70>)
    eb8e:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    eb90:	4b19      	ldr	r3, [pc, #100]	; (ebf8 <loadHwTimer+0x74>)
    eb92:	881d      	ldrh	r5, [r3, #0]
    eb94:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    eb96:	4b19      	ldr	r3, [pc, #100]	; (ebfc <loadHwTimer+0x78>)
    eb98:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    eb9a:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    eb9c:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    eb9e:	4a18      	ldr	r2, [pc, #96]	; (ec00 <loadHwTimer+0x7c>)
    eba0:	589b      	ldr	r3, [r3, r2]
    eba2:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    eba4:	4b17      	ldr	r3, [pc, #92]	; (ec04 <loadHwTimer+0x80>)
    eba6:	4298      	cmp	r0, r3
    eba8:	d81a      	bhi.n	ebe0 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    ebaa:	0122      	lsls	r2, r4, #4
    ebac:	4b14      	ldr	r3, [pc, #80]	; (ec00 <loadHwTimer+0x7c>)
    ebae:	189b      	adds	r3, r3, r2
    ebb0:	7b5b      	ldrb	r3, [r3, #13]
    ebb2:	2b00      	cmp	r3, #0
    ebb4:	d11d      	bne.n	ebf2 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    ebb6:	28ff      	cmp	r0, #255	; 0xff
    ebb8:	d90b      	bls.n	ebd2 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    ebba:	4b13      	ldr	r3, [pc, #76]	; (ec08 <loadHwTimer+0x84>)
    ebbc:	4298      	cmp	r0, r3
    ebbe:	d818      	bhi.n	ebf2 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    ebc0:	b280      	uxth	r0, r0
    ebc2:	4b12      	ldr	r3, [pc, #72]	; (ec0c <loadHwTimer+0x88>)
    ebc4:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    ebc6:	0124      	lsls	r4, r4, #4
    ebc8:	4b0d      	ldr	r3, [pc, #52]	; (ec00 <loadHwTimer+0x7c>)
    ebca:	191c      	adds	r4, r3, r4
    ebcc:	2301      	movs	r3, #1
    ebce:	7363      	strb	r3, [r4, #13]
    ebd0:	e00f      	b.n	ebf2 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    ebd2:	2201      	movs	r2, #1
    ebd4:	4b0e      	ldr	r3, [pc, #56]	; (ec10 <loadHwTimer+0x8c>)
    ebd6:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    ebd8:	2001      	movs	r0, #1
    ebda:	4b0e      	ldr	r3, [pc, #56]	; (ec14 <loadHwTimer+0x90>)
    ebdc:	4798      	blx	r3
    ebde:	e008      	b.n	ebf2 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    ebe0:	2201      	movs	r2, #1
    ebe2:	4b0b      	ldr	r3, [pc, #44]	; (ec10 <loadHwTimer+0x8c>)
    ebe4:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    ebe6:	2001      	movs	r0, #1
    ebe8:	4b0a      	ldr	r3, [pc, #40]	; (ec14 <loadHwTimer+0x90>)
    ebea:	4798      	blx	r3
    ebec:	e001      	b.n	ebf2 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    ebee:	4b0a      	ldr	r3, [pc, #40]	; (ec18 <loadHwTimer+0x94>)
    ebf0:	4798      	blx	r3
}
    ebf2:	bd70      	pop	{r4, r5, r6, pc}
    ebf4:	2000297c 	.word	0x2000297c
    ebf8:	20002978 	.word	0x20002978
    ebfc:	0000fb69 	.word	0x0000fb69
    ec00:	200027e8 	.word	0x200027e8
    ec04:	7ffffffe 	.word	0x7ffffffe
    ec08:	0000ffff 	.word	0x0000ffff
    ec0c:	0000fc11 	.word	0x0000fc11
    ec10:	2000297a 	.word	0x2000297a
    ec14:	0000f435 	.word	0x0000f435
    ec18:	0000fbb5 	.word	0x0000fbb5

0000ec1c <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    ec1c:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    ec1e:	4b1d      	ldr	r3, [pc, #116]	; (ec94 <swtimerInternalHandler+0x78>)
    ec20:	781b      	ldrb	r3, [r3, #0]
    ec22:	2b00      	cmp	r3, #0
    ec24:	d027      	beq.n	ec76 <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    ec26:	2200      	movs	r2, #0
    ec28:	4b1a      	ldr	r3, [pc, #104]	; (ec94 <swtimerInternalHandler+0x78>)
    ec2a:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    ec2c:	4b1a      	ldr	r3, [pc, #104]	; (ec98 <swtimerInternalHandler+0x7c>)
    ec2e:	781b      	ldrb	r3, [r3, #0]
    ec30:	2b00      	cmp	r3, #0
    ec32:	d020      	beq.n	ec76 <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    ec34:	4b19      	ldr	r3, [pc, #100]	; (ec9c <swtimerInternalHandler+0x80>)
    ec36:	681b      	ldr	r3, [r3, #0]
    ec38:	2bff      	cmp	r3, #255	; 0xff
    ec3a:	d01d      	beq.n	ec78 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    ec3c:	4b18      	ldr	r3, [pc, #96]	; (eca0 <swtimerInternalHandler+0x84>)
    ec3e:	6818      	ldr	r0, [r3, #0]
    ec40:	4918      	ldr	r1, [pc, #96]	; (eca4 <swtimerInternalHandler+0x88>)
    ec42:	680b      	ldr	r3, [r1, #0]
    ec44:	011a      	lsls	r2, r3, #4
    ec46:	4b18      	ldr	r3, [pc, #96]	; (eca8 <swtimerInternalHandler+0x8c>)
    ec48:	189b      	adds	r3, r3, r2
    ec4a:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    ec4c:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    ec4e:	4a16      	ldr	r2, [pc, #88]	; (eca8 <swtimerInternalHandler+0x8c>)
    ec50:	4913      	ldr	r1, [pc, #76]	; (eca0 <swtimerInternalHandler+0x84>)
    ec52:	680b      	ldr	r3, [r1, #0]
    ec54:	011b      	lsls	r3, r3, #4
    ec56:	18d3      	adds	r3, r2, r3
    ec58:	7b18      	ldrb	r0, [r3, #12]
    ec5a:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    ec5c:	4b11      	ldr	r3, [pc, #68]	; (eca4 <swtimerInternalHandler+0x88>)
    ec5e:	681b      	ldr	r3, [r3, #0]
    ec60:	011b      	lsls	r3, r3, #4
    ec62:	18d2      	adds	r2, r2, r3
    ec64:	23ff      	movs	r3, #255	; 0xff
    ec66:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    ec68:	4a0b      	ldr	r2, [pc, #44]	; (ec98 <swtimerInternalHandler+0x7c>)
    ec6a:	7813      	ldrb	r3, [r2, #0]
    ec6c:	3b01      	subs	r3, #1
    ec6e:	b2db      	uxtb	r3, r3
    ec70:	7013      	strb	r3, [r2, #0]
    ec72:	2b00      	cmp	r3, #0
    ec74:	d10b      	bne.n	ec8e <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    ec76:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    ec78:	4b0a      	ldr	r3, [pc, #40]	; (eca4 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    ec7a:	681b      	ldr	r3, [r3, #0]
    ec7c:	2bff      	cmp	r3, #255	; 0xff
    ec7e:	d1dd      	bne.n	ec3c <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    ec80:	4b07      	ldr	r3, [pc, #28]	; (eca0 <swtimerInternalHandler+0x84>)
    ec82:	681b      	ldr	r3, [r3, #0]
    ec84:	4a05      	ldr	r2, [pc, #20]	; (ec9c <swtimerInternalHandler+0x80>)
    ec86:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    ec88:	4a06      	ldr	r2, [pc, #24]	; (eca4 <swtimerInternalHandler+0x88>)
    ec8a:	6013      	str	r3, [r2, #0]
    ec8c:	e7df      	b.n	ec4e <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    ec8e:	4b07      	ldr	r3, [pc, #28]	; (ecac <swtimerInternalHandler+0x90>)
    ec90:	4798      	blx	r3
}
    ec92:	e7f0      	b.n	ec76 <swtimerInternalHandler+0x5a>
    ec94:	2000297a 	.word	0x2000297a
    ec98:	200010ec 	.word	0x200010ec
    ec9c:	200010e0 	.word	0x200010e0
    eca0:	200010e8 	.word	0x200010e8
    eca4:	200010e4 	.word	0x200010e4
    eca8:	200027e8 	.word	0x200027e8
    ecac:	0000eb85 	.word	0x0000eb85

0000ecb0 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    ecb0:	2300      	movs	r3, #0
    ecb2:	4a0d      	ldr	r2, [pc, #52]	; (ece8 <SwTimerReset+0x38>)
    ecb4:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    ecb6:	4a0d      	ldr	r2, [pc, #52]	; (ecec <SwTimerReset+0x3c>)
    ecb8:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    ecba:	33ff      	adds	r3, #255	; 0xff
    ecbc:	4a0c      	ldr	r2, [pc, #48]	; (ecf0 <SwTimerReset+0x40>)
    ecbe:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    ecc0:	4a0c      	ldr	r2, [pc, #48]	; (ecf4 <SwTimerReset+0x44>)
    ecc2:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    ecc4:	4a0c      	ldr	r2, [pc, #48]	; (ecf8 <SwTimerReset+0x48>)
    ecc6:	6013      	str	r3, [r2, #0]
    ecc8:	4b0c      	ldr	r3, [pc, #48]	; (ecfc <SwTimerReset+0x4c>)
    ecca:	0018      	movs	r0, r3
    eccc:	3091      	adds	r0, #145	; 0x91
    ecce:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    ecd0:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    ecd2:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    ecd4:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    ecd6:	601a      	str	r2, [r3, #0]
    ecd8:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    ecda:	4283      	cmp	r3, r0
    ecdc:	d1fa      	bne.n	ecd4 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    ecde:	2200      	movs	r2, #0
    ece0:	4b07      	ldr	r3, [pc, #28]	; (ed00 <SwTimerReset+0x50>)
    ece2:	701a      	strb	r2, [r3, #0]
}
    ece4:	4770      	bx	lr
    ece6:	46c0      	nop			; (mov r8, r8)
    ece8:	200010ec 	.word	0x200010ec
    ecec:	2000297a 	.word	0x2000297a
    ecf0:	200010e8 	.word	0x200010e8
    ecf4:	200010e0 	.word	0x200010e0
    ecf8:	200010e4 	.word	0x200010e4
    ecfc:	200027ec 	.word	0x200027ec
    ed00:	200010dc 	.word	0x200010dc

0000ed04 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    ed04:	b510      	push	{r4, lr}
    SwTimerReset();
    ed06:	4b08      	ldr	r3, [pc, #32]	; (ed28 <SystemTimerInit+0x24>)
    ed08:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = 0x00000000;
    ed0a:	2300      	movs	r3, #0
    ed0c:	4a07      	ldr	r2, [pc, #28]	; (ed2c <SystemTimerInit+0x28>)
    ed0e:	6013      	str	r3, [r2, #0]
    sysTime = 0x0000;
    ed10:	4a07      	ldr	r2, [pc, #28]	; (ed30 <SystemTimerInit+0x2c>)
    ed12:	8013      	strh	r3, [r2, #0]

    common_tc_init();
    ed14:	4b07      	ldr	r3, [pc, #28]	; (ed34 <SystemTimerInit+0x30>)
    ed16:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    ed18:	4807      	ldr	r0, [pc, #28]	; (ed38 <SystemTimerInit+0x34>)
    ed1a:	4b08      	ldr	r3, [pc, #32]	; (ed3c <SystemTimerInit+0x38>)
    ed1c:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    ed1e:	4808      	ldr	r0, [pc, #32]	; (ed40 <SystemTimerInit+0x3c>)
    ed20:	4b08      	ldr	r3, [pc, #32]	; (ed44 <SystemTimerInit+0x40>)
    ed22:	4798      	blx	r3
}
    ed24:	bd10      	pop	{r4, pc}
    ed26:	46c0      	nop			; (mov r8, r8)
    ed28:	0000ecb1 	.word	0x0000ecb1
    ed2c:	2000297c 	.word	0x2000297c
    ed30:	20002978 	.word	0x20002978
    ed34:	0000fc7d 	.word	0x0000fc7d
    ed38:	0000eacd 	.word	0x0000eacd
    ed3c:	0000fd01 	.word	0x0000fd01
    ed40:	0000eaa5 	.word	0x0000eaa5
    ed44:	0000fd0d 	.word	0x0000fd0d

0000ed48 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    ed48:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    ed4a:	4b05      	ldr	r3, [pc, #20]	; (ed60 <SwTimerGetTime+0x18>)
    ed4c:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ed4e:	4b05      	ldr	r3, [pc, #20]	; (ed64 <SwTimerGetTime+0x1c>)
    ed50:	881d      	ldrh	r5, [r3, #0]
    ed52:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    ed54:	4b04      	ldr	r3, [pc, #16]	; (ed68 <SwTimerGetTime+0x20>)
    ed56:	4798      	blx	r3
    ed58:	4328      	orrs	r0, r5
    return gettime();
}
    ed5a:	0021      	movs	r1, r4
    ed5c:	bd70      	pop	{r4, r5, r6, pc}
    ed5e:	46c0      	nop			; (mov r8, r8)
    ed60:	2000297c 	.word	0x2000297c
    ed64:	20002978 	.word	0x20002978
    ed68:	0000fb69 	.word	0x0000fb69

0000ed6c <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    ed6c:	b510      	push	{r4, lr}
    ed6e:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    ed70:	4b08      	ldr	r3, [pc, #32]	; (ed94 <SwTimerCreate+0x28>)
    ed72:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    ed74:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    ed76:	2b18      	cmp	r3, #24
    ed78:	d900      	bls.n	ed7c <SwTimerCreate+0x10>
    }

    return retVal;
}
    ed7a:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    ed7c:	4b06      	ldr	r3, [pc, #24]	; (ed98 <SwTimerCreate+0x2c>)
    ed7e:	4798      	blx	r3
        *timerId = allocatedTimerId;
    ed80:	4a04      	ldr	r2, [pc, #16]	; (ed94 <SwTimerCreate+0x28>)
    ed82:	7813      	ldrb	r3, [r2, #0]
    ed84:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    ed86:	3301      	adds	r3, #1
    ed88:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    ed8a:	4b04      	ldr	r3, [pc, #16]	; (ed9c <SwTimerCreate+0x30>)
    ed8c:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    ed8e:	2008      	movs	r0, #8
    ed90:	e7f3      	b.n	ed7a <SwTimerCreate+0xe>
    ed92:	46c0      	nop			; (mov r8, r8)
    ed94:	200010dc 	.word	0x200010dc
    ed98:	00008349 	.word	0x00008349
    ed9c:	00008355 	.word	0x00008355

0000eda0 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    eda0:	b5f0      	push	{r4, r5, r6, r7, lr}
    eda2:	46d6      	mov	lr, sl
    eda4:	464f      	mov	r7, r9
    eda6:	4646      	mov	r6, r8
    eda8:	b5c0      	push	{r6, r7, lr}
    edaa:	b084      	sub	sp, #16
    edac:	0007      	movs	r7, r0
    edae:	000d      	movs	r5, r1
    edb0:	0016      	movs	r6, r2
    edb2:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    edb4:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    edb6:	2f18      	cmp	r7, #24
    edb8:	d809      	bhi.n	edce <SwTimerStart+0x2e>
    edba:	2b00      	cmp	r3, #0
    edbc:	d100      	bne.n	edc0 <SwTimerStart+0x20>
    edbe:	e08c      	b.n	eeda <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    edc0:	013a      	lsls	r2, r7, #4
    edc2:	4b52      	ldr	r3, [pc, #328]	; (ef0c <SwTimerStart+0x16c>)
    edc4:	189b      	adds	r3, r3, r2
    edc6:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    edc8:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    edca:	2b00      	cmp	r3, #0
    edcc:	d005      	beq.n	edda <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    edce:	b004      	add	sp, #16
    edd0:	bc1c      	pop	{r2, r3, r4}
    edd2:	4690      	mov	r8, r2
    edd4:	4699      	mov	r9, r3
    edd6:	46a2      	mov	sl, r4
    edd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    edda:	4b4d      	ldr	r3, [pc, #308]	; (ef10 <SwTimerStart+0x170>)
    eddc:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    edde:	4b4d      	ldr	r3, [pc, #308]	; (ef14 <SwTimerStart+0x174>)
    ede0:	8818      	ldrh	r0, [r3, #0]
    ede2:	0403      	lsls	r3, r0, #16
    ede4:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    ede6:	4b4c      	ldr	r3, [pc, #304]	; (ef18 <SwTimerStart+0x178>)
    ede8:	4798      	blx	r3
    edea:	4643      	mov	r3, r8
    edec:	4303      	orrs	r3, r0
    switch (timeoutType)
    edee:	2e00      	cmp	r6, #0
    edf0:	d003      	beq.n	edfa <SwTimerStart+0x5a>
    edf2:	2e01      	cmp	r6, #1
    edf4:	d038      	beq.n	ee68 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    edf6:	200a      	movs	r0, #10
    edf8:	e7e9      	b.n	edce <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    edfa:	4948      	ldr	r1, [pc, #288]	; (ef1c <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    edfc:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    edfe:	002a      	movs	r2, r5
    ee00:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    ee02:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    ee04:	428a      	cmp	r2, r1
    ee06:	d8e2      	bhi.n	edce <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    ee08:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    ee0c:	425a      	negs	r2, r3
    ee0e:	4153      	adcs	r3, r2
    ee10:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    ee12:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    ee14:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ee18:	2600      	movs	r6, #0
    ee1a:	4b41      	ldr	r3, [pc, #260]	; (ef20 <SwTimerStart+0x180>)
    ee1c:	701e      	strb	r6, [r3, #0]
	return flags;
    ee1e:	9b03      	ldr	r3, [sp, #12]
    ee20:	4699      	mov	r9, r3
    swtimerInternalHandler();
    ee22:	4b40      	ldr	r3, [pc, #256]	; (ef24 <SwTimerStart+0x184>)
    ee24:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    ee26:	4b39      	ldr	r3, [pc, #228]	; (ef0c <SwTimerStart+0x16c>)
    ee28:	013a      	lsls	r2, r7, #4
    ee2a:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    ee2c:	189b      	adds	r3, r3, r2
    ee2e:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    ee30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ee32:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    ee34:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    ee36:	4a3c      	ldr	r2, [pc, #240]	; (ef28 <SwTimerStart+0x188>)
    ee38:	7813      	ldrb	r3, [r2, #0]
    ee3a:	3301      	adds	r3, #1
    ee3c:	b2db      	uxtb	r3, r3
    ee3e:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    ee40:	4b3a      	ldr	r3, [pc, #232]	; (ef2c <SwTimerStart+0x18c>)
    ee42:	681b      	ldr	r3, [r3, #0]
    ee44:	469a      	mov	sl, r3
    ee46:	2bff      	cmp	r3, #255	; 0xff
    ee48:	d016      	beq.n	ee78 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    ee4a:	466a      	mov	r2, sp
    ee4c:	7013      	strb	r3, [r2, #0]
    ee4e:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    ee50:	4b35      	ldr	r3, [pc, #212]	; (ef28 <SwTimerStart+0x188>)
    ee52:	781b      	ldrb	r3, [r3, #0]
    ee54:	2b00      	cmp	r3, #0
    ee56:	d042      	beq.n	eede <SwTimerStart+0x13e>
    ee58:	9200      	str	r2, [sp, #0]
    ee5a:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    ee5c:	492b      	ldr	r1, [pc, #172]	; (ef0c <SwTimerStart+0x16c>)
    ee5e:	4688      	mov	r8, r1
    ee60:	4833      	ldr	r0, [pc, #204]	; (ef30 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    ee62:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    ee64:	4c30      	ldr	r4, [pc, #192]	; (ef28 <SwTimerStart+0x188>)
    ee66:	e02a      	b.n	eebe <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    ee68:	0028      	movs	r0, r5
    ee6a:	38ff      	subs	r0, #255	; 0xff
    ee6c:	1ac3      	subs	r3, r0, r3
    ee6e:	4a2b      	ldr	r2, [pc, #172]	; (ef1c <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    ee70:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    ee72:	4293      	cmp	r3, r2
    ee74:	d9c8      	bls.n	ee08 <SwTimerStart+0x68>
    ee76:	e7aa      	b.n	edce <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    ee78:	4b2c      	ldr	r3, [pc, #176]	; (ef2c <SwTimerStart+0x18c>)
    ee7a:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    ee7c:	0038      	movs	r0, r7
    ee7e:	4b2d      	ldr	r3, [pc, #180]	; (ef34 <SwTimerStart+0x194>)
    ee80:	4798      	blx	r3
    ee82:	e036      	b.n	eef2 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    ee84:	4b21      	ldr	r3, [pc, #132]	; (ef0c <SwTimerStart+0x16c>)
    ee86:	013c      	lsls	r4, r7, #4
    ee88:	191c      	adds	r4, r3, r4
    ee8a:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    ee8c:	9901      	ldr	r1, [sp, #4]
    ee8e:	0109      	lsls	r1, r1, #4
    ee90:	1859      	adds	r1, r3, r1
    ee92:	2300      	movs	r3, #0
    ee94:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    ee96:	4592      	cmp	sl, r2
    ee98:	d005      	beq.n	eea6 <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    ee9a:	9b00      	ldr	r3, [sp, #0]
    ee9c:	0118      	lsls	r0, r3, #4
    ee9e:	4b1b      	ldr	r3, [pc, #108]	; (ef0c <SwTimerStart+0x16c>)
    eea0:	1818      	adds	r0, r3, r0
    eea2:	7307      	strb	r7, [r0, #12]
    eea4:	e025      	b.n	eef2 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    eea6:	4b21      	ldr	r3, [pc, #132]	; (ef2c <SwTimerStart+0x18c>)
    eea8:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    eeaa:	0038      	movs	r0, r7
    eeac:	4b21      	ldr	r3, [pc, #132]	; (ef34 <SwTimerStart+0x194>)
    eeae:	4798      	blx	r3
    eeb0:	e01f      	b.n	eef2 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    eeb2:	3301      	adds	r3, #1
    eeb4:	b2db      	uxtb	r3, r3
    eeb6:	7821      	ldrb	r1, [r4, #0]
    eeb8:	b2c9      	uxtb	r1, r1
    eeba:	428b      	cmp	r3, r1
    eebc:	d210      	bcs.n	eee0 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    eebe:	2aff      	cmp	r2, #255	; 0xff
    eec0:	d0f7      	beq.n	eeb2 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    eec2:	9201      	str	r2, [sp, #4]
    eec4:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    eec6:	4646      	mov	r6, r8
    eec8:	5989      	ldr	r1, [r1, r6]
    eeca:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    eecc:	4281      	cmp	r1, r0
    eece:	d8d9      	bhi.n	ee84 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    eed0:	0111      	lsls	r1, r2, #4
    eed2:	4461      	add	r1, ip
    eed4:	9200      	str	r2, [sp, #0]
    eed6:	7b0a      	ldrb	r2, [r1, #12]
    eed8:	e7eb      	b.n	eeb2 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    eeda:	200a      	movs	r0, #10
    eedc:	e777      	b.n	edce <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    eede:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    eee0:	4b0a      	ldr	r3, [pc, #40]	; (ef0c <SwTimerStart+0x16c>)
    eee2:	9a00      	ldr	r2, [sp, #0]
    eee4:	0110      	lsls	r0, r2, #4
    eee6:	1818      	adds	r0, r3, r0
    eee8:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    eeea:	013f      	lsls	r7, r7, #4
    eeec:	19df      	adds	r7, r3, r7
    eeee:	23ff      	movs	r3, #255	; 0xff
    eef0:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    eef2:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    eef4:	2008      	movs	r0, #8
    eef6:	464a      	mov	r2, r9
    eef8:	4213      	tst	r3, r2
    eefa:	d100      	bne.n	eefe <SwTimerStart+0x15e>
    eefc:	e767      	b.n	edce <SwTimerStart+0x2e>
		cpu_irq_enable();
    eefe:	2201      	movs	r2, #1
    ef00:	4b07      	ldr	r3, [pc, #28]	; (ef20 <SwTimerStart+0x180>)
    ef02:	701a      	strb	r2, [r3, #0]
    ef04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ef08:	b662      	cpsie	i
    ef0a:	e760      	b.n	edce <SwTimerStart+0x2e>
    ef0c:	200027e8 	.word	0x200027e8
    ef10:	2000297c 	.word	0x2000297c
    ef14:	20002978 	.word	0x20002978
    ef18:	0000fb69 	.word	0x0000fb69
    ef1c:	7fffff00 	.word	0x7fffff00
    ef20:	20000014 	.word	0x20000014
    ef24:	0000ec1d 	.word	0x0000ec1d
    ef28:	200010ec 	.word	0x200010ec
    ef2c:	200010e8 	.word	0x200010e8
    ef30:	7ffffffe 	.word	0x7ffffffe
    ef34:	0000eb85 	.word	0x0000eb85

0000ef38 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    ef38:	0103      	lsls	r3, r0, #4
    ef3a:	4803      	ldr	r0, [pc, #12]	; (ef48 <SwTimerIsRunning+0x10>)
    ef3c:	18c0      	adds	r0, r0, r3
    ef3e:	6840      	ldr	r0, [r0, #4]
    ef40:	1e43      	subs	r3, r0, #1
    ef42:	4198      	sbcs	r0, r3
    ef44:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    ef46:	4770      	bx	lr
    ef48:	200027e8 	.word	0x200027e8

0000ef4c <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    ef4c:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    if ( NULL != swTimers[timerId].timerCb )
    ef4e:	0102      	lsls	r2, r0, #4
    ef50:	4b0d      	ldr	r3, [pc, #52]	; (ef88 <SwTimerReadValue+0x3c>)
    ef52:	189b      	adds	r3, r3, r2
    ef54:	685b      	ldr	r3, [r3, #4]
    ef56:	2b00      	cmp	r3, #0
    ef58:	d014      	beq.n	ef84 <SwTimerReadValue+0x38>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    ef5a:	4b0b      	ldr	r3, [pc, #44]	; (ef88 <SwTimerReadValue+0x3c>)
    ef5c:	58d5      	ldr	r5, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    ef5e:	4b0b      	ldr	r3, [pc, #44]	; (ef8c <SwTimerReadValue+0x40>)
    ef60:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    ef62:	4b0b      	ldr	r3, [pc, #44]	; (ef90 <SwTimerReadValue+0x44>)
    ef64:	881c      	ldrh	r4, [r3, #0]
    ef66:	0424      	lsls	r4, r4, #16
    time |= (uint64_t) common_tc_read_count();
    ef68:	4b0a      	ldr	r3, [pc, #40]	; (ef94 <SwTimerReadValue+0x48>)
    ef6a:	4798      	blx	r3
    ef6c:	4320      	orrs	r0, r4
	    currentSysTime = (uint32_t) gettime();
	    if ( currentSysTime <= timerExpiryTime )
    ef6e:	4285      	cmp	r5, r0
    ef70:	d305      	bcc.n	ef7e <SwTimerReadValue+0x32>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
    ef72:	1a28      	subs	r0, r5, r0
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
	    }

        if (remainingTime >= SWTIMER_MAX_TIMEOUT)
    ef74:	4b08      	ldr	r3, [pc, #32]	; (ef98 <SwTimerReadValue+0x4c>)
    ef76:	4298      	cmp	r0, r3
    ef78:	d900      	bls.n	ef7c <SwTimerReadValue+0x30>
        {
            /* Diff cannot be more than max timeout */
            remainingTime = 0;
    ef7a:	2000      	movs	r0, #0
        }
    }
    return remainingTime;
}
    ef7c:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    ef7e:	3d01      	subs	r5, #1
    ef80:	1a28      	subs	r0, r5, r0
    ef82:	e7f7      	b.n	ef74 <SwTimerReadValue+0x28>
    uint32_t remainingTime = 0u;
    ef84:	2000      	movs	r0, #0
    return remainingTime;
    ef86:	e7f9      	b.n	ef7c <SwTimerReadValue+0x30>
    ef88:	200027e8 	.word	0x200027e8
    ef8c:	2000297c 	.word	0x2000297c
    ef90:	20002978 	.word	0x20002978
    ef94:	0000fb69 	.word	0x0000fb69
    ef98:	7ffffffe 	.word	0x7ffffffe

0000ef9c <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    ef9c:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    ef9e:	4b05      	ldr	r3, [pc, #20]	; (efb4 <SwTimerNextExpiryDuration+0x18>)
    efa0:	6818      	ldr	r0, [r3, #0]
    efa2:	28ff      	cmp	r0, #255	; 0xff
    efa4:	d102      	bne.n	efac <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    efa6:	2001      	movs	r0, #1
    efa8:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    efaa:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    efac:	b2c0      	uxtb	r0, r0
    efae:	4b02      	ldr	r3, [pc, #8]	; (efb8 <SwTimerNextExpiryDuration+0x1c>)
    efb0:	4798      	blx	r3
    efb2:	e7fa      	b.n	efaa <SwTimerNextExpiryDuration+0xe>
    efb4:	200010e8 	.word	0x200010e8
    efb8:	0000ef4d 	.word	0x0000ef4d

0000efbc <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    efbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    efbe:	46de      	mov	lr, fp
    efc0:	4657      	mov	r7, sl
    efc2:	464e      	mov	r6, r9
    efc4:	4645      	mov	r5, r8
    efc6:	b5e0      	push	{r5, r6, r7, lr}
    efc8:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    efca:	4b2f      	ldr	r3, [pc, #188]	; (f088 <SwTimersExecute+0xcc>)
    efcc:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    efce:	4b2f      	ldr	r3, [pc, #188]	; (f08c <SwTimersExecute+0xd0>)
    efd0:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    efd2:	4b2f      	ldr	r3, [pc, #188]	; (f090 <SwTimersExecute+0xd4>)
    efd4:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    efd6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    efda:	4253      	negs	r3, r2
    efdc:	4153      	adcs	r3, r2
    efde:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    efe0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    efe2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    efe6:	2200      	movs	r2, #0
    efe8:	4b2a      	ldr	r3, [pc, #168]	; (f094 <SwTimersExecute+0xd8>)
    efea:	701a      	strb	r2, [r3, #0]
	return flags;
    efec:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    efee:	4b2a      	ldr	r3, [pc, #168]	; (f098 <SwTimersExecute+0xdc>)
    eff0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    eff2:	23ff      	movs	r3, #255	; 0xff
    eff4:	4223      	tst	r3, r4
    eff6:	d005      	beq.n	f004 <SwTimersExecute+0x48>
		cpu_irq_enable();
    eff8:	2201      	movs	r2, #1
    effa:	4b26      	ldr	r3, [pc, #152]	; (f094 <SwTimersExecute+0xd8>)
    effc:	701a      	strb	r2, [r3, #0]
    effe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f002:	b662      	cpsie	i
	cpu_irq_disable();
    f004:	4b23      	ldr	r3, [pc, #140]	; (f094 <SwTimersExecute+0xd8>)
    f006:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    f008:	4c24      	ldr	r4, [pc, #144]	; (f09c <SwTimersExecute+0xe0>)
    f00a:	4b25      	ldr	r3, [pc, #148]	; (f0a0 <SwTimersExecute+0xe4>)
    f00c:	4699      	mov	r9, r3
    f00e:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    f010:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    f012:	4b24      	ldr	r3, [pc, #144]	; (f0a4 <SwTimersExecute+0xe8>)
    f014:	4698      	mov	r8, r3
		cpu_irq_enable();
    f016:	4b1f      	ldr	r3, [pc, #124]	; (f094 <SwTimersExecute+0xd8>)
    f018:	469c      	mov	ip, r3
    f01a:	e004      	b.n	f026 <SwTimersExecute+0x6a>
    f01c:	4643      	mov	r3, r8
    f01e:	6018      	str	r0, [r3, #0]
    f020:	e01e      	b.n	f060 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    f022:	2e00      	cmp	r6, #0
    f024:	d125      	bne.n	f072 <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    f026:	4b1d      	ldr	r3, [pc, #116]	; (f09c <SwTimersExecute+0xe0>)
    f028:	681b      	ldr	r3, [r3, #0]
    f02a:	2bff      	cmp	r3, #255	; 0xff
    f02c:	d024      	beq.n	f078 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f02e:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f032:	424b      	negs	r3, r1
    f034:	414b      	adcs	r3, r1
    f036:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    f038:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f03a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f03e:	4653      	mov	r3, sl
    f040:	701a      	strb	r2, [r3, #0]
	return flags;
    f042:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    f044:	6823      	ldr	r3, [r4, #0]
    f046:	011b      	lsls	r3, r3, #4
    f048:	444b      	add	r3, r9
    f04a:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    f04c:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    f04e:	689d      	ldr	r5, [r3, #8]
    f050:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    f052:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    f054:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    f056:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    f058:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    f05a:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    f05c:	29ff      	cmp	r1, #255	; 0xff
    f05e:	d0dd      	beq.n	f01c <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    f060:	4238      	tst	r0, r7
    f062:	d0de      	beq.n	f022 <SwTimersExecute+0x66>
		cpu_irq_enable();
    f064:	2301      	movs	r3, #1
    f066:	4661      	mov	r1, ip
    f068:	700b      	strb	r3, [r1, #0]
    f06a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f06e:	b662      	cpsie	i
    f070:	e7d7      	b.n	f022 <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    f072:	4658      	mov	r0, fp
    f074:	47b0      	blx	r6
    f076:	e7ca      	b.n	f00e <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    f078:	b003      	add	sp, #12
    f07a:	bc3c      	pop	{r2, r3, r4, r5}
    f07c:	4690      	mov	r8, r2
    f07e:	4699      	mov	r9, r3
    f080:	46a2      	mov	sl, r4
    f082:	46ab      	mov	fp, r5
    f084:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f086:	46c0      	nop			; (mov r8, r8)
    f088:	2000297c 	.word	0x2000297c
    f08c:	20002978 	.word	0x20002978
    f090:	0000fb69 	.word	0x0000fb69
    f094:	20000014 	.word	0x20000014
    f098:	0000ec1d 	.word	0x0000ec1d
    f09c:	200010e0 	.word	0x200010e0
    f0a0:	200027e8 	.word	0x200027e8
    f0a4:	200010e4 	.word	0x200010e4

0000f0a8 <TIMER_TaskHandler>:
{
    f0a8:	b510      	push	{r4, lr}
    SwTimersExecute();
    f0aa:	4b02      	ldr	r3, [pc, #8]	; (f0b4 <TIMER_TaskHandler+0xc>)
    f0ac:	4798      	blx	r3
}
    f0ae:	2000      	movs	r0, #0
    f0b0:	bd10      	pop	{r4, pc}
    f0b2:	46c0      	nop			; (mov r8, r8)
    f0b4:	0000efbd 	.word	0x0000efbd

0000f0b8 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    f0b8:	b570      	push	{r4, r5, r6, lr}
    f0ba:	b082      	sub	sp, #8
    f0bc:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    f0be:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    f0c0:	2c18      	cmp	r4, #24
    f0c2:	d901      	bls.n	f0c8 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    f0c4:	b002      	add	sp, #8
    f0c6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f0c8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f0cc:	425a      	negs	r2, r3
    f0ce:	4153      	adcs	r3, r2
    f0d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    f0d2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f0d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f0d8:	2200      	movs	r2, #0
    f0da:	4b47      	ldr	r3, [pc, #284]	; (f1f8 <SwTimerStop+0x140>)
    f0dc:	701a      	strb	r2, [r3, #0]
	return flags;
    f0de:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    f0e0:	4b46      	ldr	r3, [pc, #280]	; (f1fc <SwTimerStop+0x144>)
    f0e2:	4798      	blx	r3
    if (runningTimers > 0)
    f0e4:	4b46      	ldr	r3, [pc, #280]	; (f200 <SwTimerStop+0x148>)
    f0e6:	781b      	ldrb	r3, [r3, #0]
    f0e8:	2b00      	cmp	r3, #0
    f0ea:	d040      	beq.n	f16e <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    f0ec:	4b44      	ldr	r3, [pc, #272]	; (f200 <SwTimerStop+0x148>)
    f0ee:	781b      	ldrb	r3, [r3, #0]
    f0f0:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    f0f2:	4a44      	ldr	r2, [pc, #272]	; (f204 <SwTimerStop+0x14c>)
    f0f4:	6816      	ldr	r6, [r2, #0]
    f0f6:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    f0f8:	2b00      	cmp	r3, #0
    f0fa:	d038      	beq.n	f16e <SwTimerStop+0xb6>
            if (timerId == currIndex)
    f0fc:	428c      	cmp	r4, r1
    f0fe:	d00b      	beq.n	f118 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    f100:	4841      	ldr	r0, [pc, #260]	; (f208 <SwTimerStop+0x150>)
    f102:	010a      	lsls	r2, r1, #4
    f104:	1882      	adds	r2, r0, r2
    f106:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    f108:	3b01      	subs	r3, #1
    f10a:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    f10c:	2b00      	cmp	r3, #0
    f10e:	d02e      	beq.n	f16e <SwTimerStop+0xb6>
            if (timerId == currIndex)
    f110:	4294      	cmp	r4, r2
    f112:	d001      	beq.n	f118 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    f114:	0011      	movs	r1, r2
    f116:	e7f4      	b.n	f102 <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    f118:	42a6      	cmp	r6, r4
    f11a:	d01d      	beq.n	f158 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    f11c:	4b3a      	ldr	r3, [pc, #232]	; (f208 <SwTimerStop+0x150>)
    f11e:	0122      	lsls	r2, r4, #4
    f120:	189a      	adds	r2, r3, r2
    f122:	7b12      	ldrb	r2, [r2, #12]
    f124:	0109      	lsls	r1, r1, #4
    f126:	1859      	adds	r1, r3, r1
    f128:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    f12a:	0122      	lsls	r2, r4, #4
    f12c:	4b36      	ldr	r3, [pc, #216]	; (f208 <SwTimerStop+0x150>)
    f12e:	189b      	adds	r3, r3, r2
    f130:	22ff      	movs	r2, #255	; 0xff
    f132:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    f134:	4a32      	ldr	r2, [pc, #200]	; (f200 <SwTimerStop+0x148>)
    f136:	7813      	ldrb	r3, [r2, #0]
    f138:	3b01      	subs	r3, #1
    f13a:	b2db      	uxtb	r3, r3
    f13c:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    f13e:	0124      	lsls	r4, r4, #4
    f140:	4b31      	ldr	r3, [pc, #196]	; (f208 <SwTimerStop+0x150>)
    f142:	191c      	adds	r4, r3, r4
    f144:	2300      	movs	r3, #0
    f146:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    f148:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    f14a:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    f14c:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    f14e:	2008      	movs	r0, #8
    f150:	422b      	tst	r3, r5
    f152:	d0b7      	beq.n	f0c4 <SwTimerStop+0xc>
    f154:	2301      	movs	r3, #1
    f156:	e040      	b.n	f1da <SwTimerStop+0x122>
                    common_tc_compare_stop();
    f158:	4b2c      	ldr	r3, [pc, #176]	; (f20c <SwTimerStop+0x154>)
    f15a:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    f15c:	0122      	lsls	r2, r4, #4
    f15e:	4b2a      	ldr	r3, [pc, #168]	; (f208 <SwTimerStop+0x150>)
    f160:	189b      	adds	r3, r3, r2
    f162:	7b18      	ldrb	r0, [r3, #12]
    f164:	4b27      	ldr	r3, [pc, #156]	; (f204 <SwTimerStop+0x14c>)
    f166:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    f168:	4b29      	ldr	r3, [pc, #164]	; (f210 <SwTimerStop+0x158>)
    f16a:	4798      	blx	r3
    f16c:	e7dd      	b.n	f12a <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    f16e:	4b29      	ldr	r3, [pc, #164]	; (f214 <SwTimerStop+0x15c>)
    f170:	6818      	ldr	r0, [r3, #0]
    f172:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    f174:	2aff      	cmp	r2, #255	; 0xff
    f176:	d02c      	beq.n	f1d2 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    f178:	4294      	cmp	r4, r2
    f17a:	d009      	beq.n	f190 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    f17c:	4922      	ldr	r1, [pc, #136]	; (f208 <SwTimerStop+0x150>)
    f17e:	0113      	lsls	r3, r2, #4
    f180:	18cb      	adds	r3, r1, r3
    f182:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    f184:	2bff      	cmp	r3, #255	; 0xff
    f186:	d024      	beq.n	f1d2 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    f188:	429c      	cmp	r4, r3
    f18a:	d001      	beq.n	f190 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    f18c:	001a      	movs	r2, r3
    f18e:	e7f6      	b.n	f17e <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    f190:	42a0      	cmp	r0, r4
    f192:	d00d      	beq.n	f1b0 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    f194:	4b1c      	ldr	r3, [pc, #112]	; (f208 <SwTimerStop+0x150>)
    f196:	0121      	lsls	r1, r4, #4
    f198:	1859      	adds	r1, r3, r1
    f19a:	7b09      	ldrb	r1, [r1, #12]
    f19c:	0110      	lsls	r0, r2, #4
    f19e:	181b      	adds	r3, r3, r0
    f1a0:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    f1a2:	4b1d      	ldr	r3, [pc, #116]	; (f218 <SwTimerStop+0x160>)
    f1a4:	681b      	ldr	r3, [r3, #0]
    f1a6:	429c      	cmp	r4, r3
    f1a8:	d1c9      	bne.n	f13e <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    f1aa:	4b1b      	ldr	r3, [pc, #108]	; (f218 <SwTimerStop+0x160>)
    f1ac:	601a      	str	r2, [r3, #0]
    f1ae:	e7c6      	b.n	f13e <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    f1b0:	4b19      	ldr	r3, [pc, #100]	; (f218 <SwTimerStop+0x160>)
    f1b2:	681b      	ldr	r3, [r3, #0]
    f1b4:	4298      	cmp	r0, r3
    f1b6:	d006      	beq.n	f1c6 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    f1b8:	0100      	lsls	r0, r0, #4
    f1ba:	4b13      	ldr	r3, [pc, #76]	; (f208 <SwTimerStop+0x150>)
    f1bc:	1818      	adds	r0, r3, r0
    f1be:	7b02      	ldrb	r2, [r0, #12]
    f1c0:	4b14      	ldr	r3, [pc, #80]	; (f214 <SwTimerStop+0x15c>)
    f1c2:	601a      	str	r2, [r3, #0]
    f1c4:	e7bb      	b.n	f13e <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    f1c6:	23ff      	movs	r3, #255	; 0xff
    f1c8:	4a13      	ldr	r2, [pc, #76]	; (f218 <SwTimerStop+0x160>)
    f1ca:	6013      	str	r3, [r2, #0]
    f1cc:	4a11      	ldr	r2, [pc, #68]	; (f214 <SwTimerStop+0x15c>)
    f1ce:	6013      	str	r3, [r2, #0]
    f1d0:	e7b5      	b.n	f13e <SwTimerStop+0x86>
    f1d2:	23ff      	movs	r3, #255	; 0xff
    f1d4:	422b      	tst	r3, r5
    f1d6:	d00a      	beq.n	f1ee <SwTimerStop+0x136>
    f1d8:	2300      	movs	r3, #0
		cpu_irq_enable();
    f1da:	2101      	movs	r1, #1
    f1dc:	4a06      	ldr	r2, [pc, #24]	; (f1f8 <SwTimerStop+0x140>)
    f1de:	7011      	strb	r1, [r2, #0]
    f1e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f1e4:	b662      	cpsie	i
    if (timerStopReqStatus)
    f1e6:	2b00      	cmp	r3, #0
    f1e8:	d103      	bne.n	f1f2 <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    f1ea:	2015      	movs	r0, #21
    f1ec:	e76a      	b.n	f0c4 <SwTimerStop+0xc>
    f1ee:	2015      	movs	r0, #21
    f1f0:	e768      	b.n	f0c4 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    f1f2:	2008      	movs	r0, #8
    f1f4:	e766      	b.n	f0c4 <SwTimerStop+0xc>
    f1f6:	46c0      	nop			; (mov r8, r8)
    f1f8:	20000014 	.word	0x20000014
    f1fc:	0000ec1d 	.word	0x0000ec1d
    f200:	200010ec 	.word	0x200010ec
    f204:	200010e8 	.word	0x200010e8
    f208:	200027e8 	.word	0x200027e8
    f20c:	0000fbb5 	.word	0x0000fbb5
    f210:	0000eb85 	.word	0x0000eb85
    f214:	200010e0 	.word	0x200010e0
    f218:	200010e4 	.word	0x200010e4

0000f21c <SwTimerRunRemainingTime>:
{
    f21c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f21e:	b083      	sub	sp, #12
    f220:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    f222:	4b0b      	ldr	r3, [pc, #44]	; (f250 <SwTimerRunRemainingTime+0x34>)
    f224:	681c      	ldr	r4, [r3, #0]
    f226:	0122      	lsls	r2, r4, #4
    f228:	4b0a      	ldr	r3, [pc, #40]	; (f254 <SwTimerRunRemainingTime+0x38>)
    f22a:	189b      	adds	r3, r3, r2
    f22c:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    f22e:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    f230:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    f232:	0020      	movs	r0, r4
    f234:	4b08      	ldr	r3, [pc, #32]	; (f258 <SwTimerRunRemainingTime+0x3c>)
    f236:	4798      	blx	r3
    f238:	2808      	cmp	r0, #8
    f23a:	d001      	beq.n	f240 <SwTimerRunRemainingTime+0x24>
}
    f23c:	b003      	add	sp, #12
    f23e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    f240:	9700      	str	r7, [sp, #0]
    f242:	0033      	movs	r3, r6
    f244:	2200      	movs	r2, #0
    f246:	0029      	movs	r1, r5
    f248:	0020      	movs	r0, r4
    f24a:	4c04      	ldr	r4, [pc, #16]	; (f25c <SwTimerRunRemainingTime+0x40>)
    f24c:	47a0      	blx	r4
}
    f24e:	e7f5      	b.n	f23c <SwTimerRunRemainingTime+0x20>
    f250:	200010e8 	.word	0x200010e8
    f254:	200027e8 	.word	0x200027e8
    f258:	0000f0b9 	.word	0x0000f0b9
    f25c:	0000eda1 	.word	0x0000eda1

0000f260 <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    f260:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    f262:	4b07      	ldr	r3, [pc, #28]	; (f280 <SystemTimerSuspend+0x20>)
    f264:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    f266:	4b07      	ldr	r3, [pc, #28]	; (f284 <SystemTimerSuspend+0x24>)
    f268:	881d      	ldrh	r5, [r3, #0]
    f26a:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    f26c:	4b06      	ldr	r3, [pc, #24]	; (f288 <SystemTimerSuspend+0x28>)
    f26e:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    f270:	4b06      	ldr	r3, [pc, #24]	; (f28c <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    f272:	4328      	orrs	r0, r5
    f274:	6018      	str	r0, [r3, #0]
    f276:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    f278:	4b05      	ldr	r3, [pc, #20]	; (f290 <SystemTimerSuspend+0x30>)
    f27a:	4798      	blx	r3
}
    f27c:	bd70      	pop	{r4, r5, r6, pc}
    f27e:	46c0      	nop			; (mov r8, r8)
    f280:	2000297c 	.word	0x2000297c
    f284:	20002978 	.word	0x20002978
    f288:	0000fb69 	.word	0x0000fb69
    f28c:	200010f0 	.word	0x200010f0
    f290:	0000fbf5 	.word	0x0000fbf5

0000f294 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    f294:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    f296:	4b22      	ldr	r3, [pc, #136]	; (f320 <SystemTimerSync+0x8c>)
    f298:	681c      	ldr	r4, [r3, #0]
    f29a:	685d      	ldr	r5, [r3, #4]
    f29c:	1900      	adds	r0, r0, r4
    f29e:	4169      	adcs	r1, r5
    f2a0:	6018      	str	r0, [r3, #0]
    f2a2:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    f2a4:	4b1f      	ldr	r3, [pc, #124]	; (f324 <SystemTimerSync+0x90>)
    f2a6:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    f2a8:	0c02      	lsrs	r2, r0, #16
    f2aa:	4b1f      	ldr	r3, [pc, #124]	; (f328 <SystemTimerSync+0x94>)
    f2ac:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    f2ae:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    f2b0:	4b1e      	ldr	r3, [pc, #120]	; (f32c <SystemTimerSync+0x98>)
    f2b2:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    f2b4:	4a1e      	ldr	r2, [pc, #120]	; (f330 <SystemTimerSync+0x9c>)
    f2b6:	7812      	ldrb	r2, [r2, #0]
    f2b8:	2a00      	cmp	r2, #0
    f2ba:	d012      	beq.n	f2e2 <SystemTimerSync+0x4e>
    f2bc:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    f2be:	4c1d      	ldr	r4, [pc, #116]	; (f334 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    f2c0:	4d1b      	ldr	r5, [pc, #108]	; (f330 <SystemTimerSync+0x9c>)
    f2c2:	e005      	b.n	f2d0 <SystemTimerSync+0x3c>
    f2c4:	3201      	adds	r2, #1
    f2c6:	b2d2      	uxtb	r2, r2
    f2c8:	7829      	ldrb	r1, [r5, #0]
    f2ca:	b2c9      	uxtb	r1, r1
    f2cc:	4291      	cmp	r1, r2
    f2ce:	d908      	bls.n	f2e2 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    f2d0:	2bff      	cmp	r3, #255	; 0xff
    f2d2:	d0f7      	beq.n	f2c4 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    f2d4:	011b      	lsls	r3, r3, #4
    f2d6:	5919      	ldr	r1, [r3, r4]
    f2d8:	1a09      	subs	r1, r1, r0
    f2da:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    f2dc:	18e3      	adds	r3, r4, r3
    f2de:	7b1b      	ldrb	r3, [r3, #12]
    f2e0:	e7f0      	b.n	f2c4 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    f2e2:	4b15      	ldr	r3, [pc, #84]	; (f338 <SystemTimerSync+0xa4>)
    f2e4:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    f2e6:	4815      	ldr	r0, [pc, #84]	; (f33c <SystemTimerSync+0xa8>)
    f2e8:	4b15      	ldr	r3, [pc, #84]	; (f340 <SystemTimerSync+0xac>)
    f2ea:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    f2ec:	4815      	ldr	r0, [pc, #84]	; (f344 <SystemTimerSync+0xb0>)
    f2ee:	4b16      	ldr	r3, [pc, #88]	; (f348 <SystemTimerSync+0xb4>)
    f2f0:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    f2f2:	4b0f      	ldr	r3, [pc, #60]	; (f330 <SystemTimerSync+0x9c>)
    f2f4:	781b      	ldrb	r3, [r3, #0]
    f2f6:	2b00      	cmp	r3, #0
    f2f8:	d009      	beq.n	f30e <SystemTimerSync+0x7a>
    f2fa:	4b0c      	ldr	r3, [pc, #48]	; (f32c <SystemTimerSync+0x98>)
    f2fc:	681b      	ldr	r3, [r3, #0]
    f2fe:	2bff      	cmp	r3, #255	; 0xff
    f300:	d005      	beq.n	f30e <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    f302:	4b12      	ldr	r3, [pc, #72]	; (f34c <SystemTimerSync+0xb8>)
    f304:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    f306:	28fe      	cmp	r0, #254	; 0xfe
    f308:	d902      	bls.n	f310 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    f30a:	4b11      	ldr	r3, [pc, #68]	; (f350 <SystemTimerSync+0xbc>)
    f30c:	4798      	blx	r3
        }
    }
}
    f30e:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    f310:	2201      	movs	r2, #1
    f312:	4b10      	ldr	r3, [pc, #64]	; (f354 <SystemTimerSync+0xc0>)
    f314:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    f316:	2001      	movs	r0, #1
    f318:	4b0f      	ldr	r3, [pc, #60]	; (f358 <SystemTimerSync+0xc4>)
    f31a:	4798      	blx	r3
    f31c:	e7f7      	b.n	f30e <SystemTimerSync+0x7a>
    f31e:	46c0      	nop			; (mov r8, r8)
    f320:	200010f0 	.word	0x200010f0
    f324:	2000297c 	.word	0x2000297c
    f328:	20002978 	.word	0x20002978
    f32c:	200010e8 	.word	0x200010e8
    f330:	200010ec 	.word	0x200010ec
    f334:	200027e8 	.word	0x200027e8
    f338:	0000fc7d 	.word	0x0000fc7d
    f33c:	0000eacd 	.word	0x0000eacd
    f340:	0000fd01 	.word	0x0000fd01
    f344:	0000eaa5 	.word	0x0000eaa5
    f348:	0000fd0d 	.word	0x0000fd0d
    f34c:	0000ef9d 	.word	0x0000ef9d
    f350:	0000f21d 	.word	0x0000f21d
    f354:	2000297a 	.word	0x2000297a
    f358:	0000f435 	.word	0x0000f435

0000f35c <SwTimerTimestampCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerTimestampCreate(uint8_t *timestampId)
{
    f35c:	b510      	push	{r4, lr}
    f35e:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    f360:	4b08      	ldr	r3, [pc, #32]	; (f384 <SwTimerTimestampCreate+0x28>)
    f362:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_SW_TIMESTAMPS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerTimestampCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMESTAMPID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    f364:	2014      	movs	r0, #20
    if (allocatedTimestampId < TOTAL_NUMBER_SW_TIMESTAMPS)
    f366:	2b01      	cmp	r3, #1
    f368:	d900      	bls.n	f36c <SwTimerTimestampCreate+0x10>
    }

    return retVal;
}
    f36a:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    f36c:	4b06      	ldr	r3, [pc, #24]	; (f388 <SwTimerTimestampCreate+0x2c>)
    f36e:	4798      	blx	r3
        *timestampId = allocatedTimestampId;
    f370:	4a04      	ldr	r2, [pc, #16]	; (f384 <SwTimerTimestampCreate+0x28>)
    f372:	7813      	ldrb	r3, [r2, #0]
    f374:	7023      	strb	r3, [r4, #0]
        allocatedTimestampId++;
    f376:	3301      	adds	r3, #1
    f378:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    f37a:	4b04      	ldr	r3, [pc, #16]	; (f38c <SwTimerTimestampCreate+0x30>)
    f37c:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    f37e:	2008      	movs	r0, #8
    f380:	e7f3      	b.n	f36a <SwTimerTimestampCreate+0xe>
    f382:	46c0      	nop			; (mov r8, r8)
    f384:	200010dd 	.word	0x200010dd
    f388:	00008349 	.word	0x00008349
    f38c:	00008355 	.word	0x00008355

0000f390 <SwTimerReadTimestamp>:
\param[in] index Index of the system timestamp
\param[out] *timestamp Pointer-to-timestamp to be read from the given index
******************************************************************************/
void SwTimerReadTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
	*timestamp = swTimestamp[index];
    f390:	00c3      	lsls	r3, r0, #3
    f392:	4803      	ldr	r0, [pc, #12]	; (f3a0 <SwTimerReadTimestamp+0x10>)
    f394:	18c0      	adds	r0, r0, r3
    f396:	6802      	ldr	r2, [r0, #0]
    f398:	6843      	ldr	r3, [r0, #4]
    f39a:	600a      	str	r2, [r1, #0]
    f39c:	604b      	str	r3, [r1, #4]
}
    f39e:	4770      	bx	lr
    f3a0:	200027d8 	.word	0x200027d8

0000f3a4 <SwTimerWriteTimestamp>:
\param[in] index Index of the system timestamp
\param[in] *timestamp Pointer-to-timestamp to be stored in the given index
******************************************************************************/
void SwTimerWriteTimestamp(uint8_t index, SwTimestamp_t *timestamp)
{
    swTimestamp[index] = *timestamp;
    f3a4:	680a      	ldr	r2, [r1, #0]
    f3a6:	684b      	ldr	r3, [r1, #4]
    f3a8:	00c1      	lsls	r1, r0, #3
    f3aa:	4802      	ldr	r0, [pc, #8]	; (f3b4 <SwTimerWriteTimestamp+0x10>)
    f3ac:	1840      	adds	r0, r0, r1
    f3ae:	6002      	str	r2, [r0, #0]
    f3b0:	6043      	str	r3, [r0, #4]
}
    f3b2:	4770      	bx	lr
    f3b4:	200027d8 	.word	0x200027d8

0000f3b8 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    f3b8:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    f3ba:	2010      	movs	r0, #16
    f3bc:	4b01      	ldr	r3, [pc, #4]	; (f3c4 <Stack_Init+0xc>)
    f3be:	4798      	blx	r3
}
    f3c0:	bd10      	pop	{r4, pc}
    f3c2:	46c0      	nop			; (mov r8, r8)
    f3c4:	0000f435 	.word	0x0000f435

0000f3c8 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    f3ca:	4b16      	ldr	r3, [pc, #88]	; (f424 <SYSTEM_RunTasks+0x5c>)
    f3cc:	881b      	ldrh	r3, [r3, #0]
    f3ce:	b29b      	uxth	r3, r3
    f3d0:	2b1f      	cmp	r3, #31
    f3d2:	d922      	bls.n	f41a <SYSTEM_RunTasks+0x52>
    f3d4:	e7fe      	b.n	f3d4 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    f3d6:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    f3d8:	4b13      	ldr	r3, [pc, #76]	; (f428 <SYSTEM_RunTasks+0x60>)
    f3da:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    f3dc:	4911      	ldr	r1, [pc, #68]	; (f424 <SYSTEM_RunTasks+0x5c>)
    f3de:	880b      	ldrh	r3, [r1, #0]
    f3e0:	2201      	movs	r2, #1
    f3e2:	40aa      	lsls	r2, r5
    f3e4:	4393      	bics	r3, r2
    f3e6:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    f3e8:	4b10      	ldr	r3, [pc, #64]	; (f42c <SYSTEM_RunTasks+0x64>)
    f3ea:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    f3ec:	00ad      	lsls	r5, r5, #2
    f3ee:	4b10      	ldr	r3, [pc, #64]	; (f430 <SYSTEM_RunTasks+0x68>)
    f3f0:	58eb      	ldr	r3, [r5, r3]
    f3f2:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    f3f4:	2101      	movs	r1, #1
        while (sysTaskFlag)
    f3f6:	883b      	ldrh	r3, [r7, #0]
    f3f8:	b29b      	uxth	r3, r3
    f3fa:	2b00      	cmp	r3, #0
    f3fc:	d011      	beq.n	f422 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    f3fe:	8823      	ldrh	r3, [r4, #0]
    f400:	420b      	tst	r3, r1
    f402:	d1e8      	bne.n	f3d6 <SYSTEM_RunTasks+0xe>
    f404:	2201      	movs	r2, #1
    f406:	8833      	ldrh	r3, [r6, #0]
    f408:	b29b      	uxth	r3, r3
    f40a:	0015      	movs	r5, r2
    f40c:	4113      	asrs	r3, r2
    f40e:	4219      	tst	r1, r3
    f410:	d1e2      	bne.n	f3d8 <SYSTEM_RunTasks+0x10>
    f412:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    f414:	2a05      	cmp	r2, #5
    f416:	d1f6      	bne.n	f406 <SYSTEM_RunTasks+0x3e>
    f418:	e7ed      	b.n	f3f6 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    f41a:	4f02      	ldr	r7, [pc, #8]	; (f424 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    f41c:	003c      	movs	r4, r7
    f41e:	003e      	movs	r6, r7
    f420:	e7e8      	b.n	f3f4 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    f422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f424:	200010f8 	.word	0x200010f8
    f428:	00008349 	.word	0x00008349
    f42c:	00008355 	.word	0x00008355
    f430:	00020150 	.word	0x00020150

0000f434 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    f434:	b510      	push	{r4, lr}
    f436:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    f438:	4b04      	ldr	r3, [pc, #16]	; (f44c <SYSTEM_PostTask+0x18>)
    f43a:	4798      	blx	r3
    sysTaskFlag |= task;
    f43c:	4b04      	ldr	r3, [pc, #16]	; (f450 <SYSTEM_PostTask+0x1c>)
    f43e:	8818      	ldrh	r0, [r3, #0]
    f440:	4320      	orrs	r0, r4
    f442:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    f444:	4b03      	ldr	r3, [pc, #12]	; (f454 <SYSTEM_PostTask+0x20>)
    f446:	4798      	blx	r3
}
    f448:	bd10      	pop	{r4, pc}
    f44a:	46c0      	nop			; (mov r8, r8)
    f44c:	00008349 	.word	0x00008349
    f450:	200010f8 	.word	0x200010f8
    f454:	00008355 	.word	0x00008355

0000f458 <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    f458:	4b03      	ldr	r3, [pc, #12]	; (f468 <SYSTEM_ReadyToSleep+0x10>)
    f45a:	8818      	ldrh	r0, [r3, #0]
    f45c:	b280      	uxth	r0, r0
    f45e:	4243      	negs	r3, r0
    f460:	4158      	adcs	r0, r3
    f462:	b2c0      	uxtb	r0, r0
}
    f464:	4770      	bx	lr
    f466:	46c0      	nop			; (mov r8, r8)
    f468:	200010f8 	.word	0x200010f8

0000f46c <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    f46c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f46e:	46d6      	mov	lr, sl
    f470:	464f      	mov	r7, r9
    f472:	b580      	push	{r7, lr}
    f474:	b083      	sub	sp, #12
    f476:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    f478:	2900      	cmp	r1, #0
    f47a:	d102      	bne.n	f482 <Radio_WriteMode+0x16>
    f47c:	1f83      	subs	r3, r0, #6
    f47e:	2b01      	cmp	r3, #1
    f480:	d92a      	bls.n	f4d8 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    f482:	2307      	movs	r3, #7
    f484:	4699      	mov	r9, r3
    f486:	001c      	movs	r4, r3
    f488:	4004      	ands	r4, r0
    newModulation &= 0x01;
    f48a:	2601      	movs	r6, #1
    f48c:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    f48e:	2001      	movs	r0, #1
    f490:	4b2b      	ldr	r3, [pc, #172]	; (f540 <Radio_WriteMode+0xd4>)
    f492:	4798      	blx	r3
    f494:	0005      	movs	r5, r0
    f496:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    f498:	b243      	sxtb	r3, r0
    f49a:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    f49c:	464b      	mov	r3, r9
    f49e:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    f4a0:	4652      	mov	r2, sl
    f4a2:	0fd2      	lsrs	r2, r2, #31
    f4a4:	4296      	cmp	r6, r2
    f4a6:	d00a      	beq.n	f4be <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    f4a8:	2b00      	cmp	r3, #0
    f4aa:	d11a      	bne.n	f4e2 <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    f4ac:	2e00      	cmp	r6, #0
    f4ae:	d11e      	bne.n	f4ee <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    f4b0:	2778      	movs	r7, #120	; 0x78
    f4b2:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f4b4:	0039      	movs	r1, r7
    f4b6:	2001      	movs	r0, #1
    f4b8:	4b22      	ldr	r3, [pc, #136]	; (f544 <Radio_WriteMode+0xd8>)
    f4ba:	4798      	blx	r3
    f4bc:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    f4be:	42a3      	cmp	r3, r4
    f4c0:	d00a      	beq.n	f4d8 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    f4c2:	2c00      	cmp	r4, #0
    f4c4:	d030      	beq.n	f528 <Radio_WriteMode+0xbc>
    f4c6:	9b01      	ldr	r3, [sp, #4]
    f4c8:	2b01      	cmp	r3, #1
    f4ca:	d016      	beq.n	f4fa <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    f4cc:	21f8      	movs	r1, #248	; 0xf8
    f4ce:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f4d0:	4321      	orrs	r1, r4
    f4d2:	2001      	movs	r0, #1
    f4d4:	4b1b      	ldr	r3, [pc, #108]	; (f544 <Radio_WriteMode+0xd8>)
    f4d6:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    f4d8:	b003      	add	sp, #12
    f4da:	bc0c      	pop	{r2, r3}
    f4dc:	4691      	mov	r9, r2
    f4de:	469a      	mov	sl, r3
    f4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    f4e2:	21f8      	movs	r1, #248	; 0xf8
    f4e4:	4001      	ands	r1, r0
    f4e6:	2001      	movs	r0, #1
    f4e8:	4b16      	ldr	r3, [pc, #88]	; (f544 <Radio_WriteMode+0xd8>)
    f4ea:	4798      	blx	r3
    f4ec:	e7de      	b.n	f4ac <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    f4ee:	2778      	movs	r7, #120	; 0x78
    f4f0:	4653      	mov	r3, sl
    f4f2:	401f      	ands	r7, r3
    f4f4:	2180      	movs	r1, #128	; 0x80
    f4f6:	430f      	orrs	r7, r1
    f4f8:	e7dc      	b.n	f4b4 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    f4fa:	2041      	movs	r0, #65	; 0x41
    f4fc:	4b10      	ldr	r3, [pc, #64]	; (f540 <Radio_WriteMode+0xd4>)
    f4fe:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    f500:	2e00      	cmp	r6, #0
    f502:	d10e      	bne.n	f522 <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    f504:	2130      	movs	r1, #48	; 0x30
    f506:	4301      	orrs	r1, r0
    f508:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    f50a:	2041      	movs	r0, #65	; 0x41
    f50c:	4d0d      	ldr	r5, [pc, #52]	; (f544 <Radio_WriteMode+0xd8>)
    f50e:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    f510:	21f8      	movs	r1, #248	; 0xf8
    f512:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f514:	4321      	orrs	r1, r4
    f516:	2001      	movs	r0, #1
    f518:	47a8      	blx	r5
			   delay_ms(1);
    f51a:	2001      	movs	r0, #1
    f51c:	4b0a      	ldr	r3, [pc, #40]	; (f548 <Radio_WriteMode+0xdc>)
    f51e:	4798      	blx	r3
    f520:	e7da      	b.n	f4d8 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    f522:	21cf      	movs	r1, #207	; 0xcf
    f524:	4001      	ands	r1, r0
    f526:	e7f0      	b.n	f50a <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    f528:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    f52a:	4039      	ands	r1, r7
    f52c:	2001      	movs	r0, #1
    f52e:	4b05      	ldr	r3, [pc, #20]	; (f544 <Radio_WriteMode+0xd8>)
    f530:	4798      	blx	r3
        if (1 == blocking)
    f532:	9b01      	ldr	r3, [sp, #4]
    f534:	2b01      	cmp	r3, #1
    f536:	d1cf      	bne.n	f4d8 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    f538:	2001      	movs	r0, #1
    f53a:	4b04      	ldr	r3, [pc, #16]	; (f54c <Radio_WriteMode+0xe0>)
    f53c:	4798      	blx	r3
    f53e:	e7cb      	b.n	f4d8 <Radio_WriteMode+0x6c>
    f540:	000080c1 	.word	0x000080c1
    f544:	00008099 	.word	0x00008099
    f548:	00004551 	.word	0x00004551
    f54c:	000082f5 	.word	0x000082f5

0000f550 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    f550:	b500      	push	{lr}
    f552:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    f554:	2012      	movs	r0, #18
    f556:	4b0d      	ldr	r3, [pc, #52]	; (f58c <RADIO_FHSSChangeChannel+0x3c>)
    f558:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    f55a:	4b0d      	ldr	r3, [pc, #52]	; (f590 <RADIO_FHSSChangeChannel+0x40>)
    f55c:	8adb      	ldrh	r3, [r3, #22]
    f55e:	2b00      	cmp	r3, #0
    f560:	d007      	beq.n	f572 <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    f562:	4b0b      	ldr	r3, [pc, #44]	; (f590 <RADIO_FHSSChangeChannel+0x40>)
    f564:	691b      	ldr	r3, [r3, #16]
    f566:	2b00      	cmp	r3, #0
    f568:	d003      	beq.n	f572 <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    f56a:	4a0a      	ldr	r2, [pc, #40]	; (f594 <RADIO_FHSSChangeChannel+0x44>)
    f56c:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    f56e:	0692      	lsls	r2, r2, #26
    f570:	d405      	bmi.n	f57e <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    f572:	2102      	movs	r1, #2
    f574:	2012      	movs	r0, #18
    f576:	4b08      	ldr	r3, [pc, #32]	; (f598 <RADIO_FHSSChangeChannel+0x48>)
    f578:	4798      	blx	r3
}
    f57a:	b003      	add	sp, #12
    f57c:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    f57e:	a901      	add	r1, sp, #4
    f580:	2020      	movs	r0, #32
    f582:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    f584:	9801      	ldr	r0, [sp, #4]
    f586:	4b05      	ldr	r3, [pc, #20]	; (f59c <RADIO_FHSSChangeChannel+0x4c>)
    f588:	4798      	blx	r3
    f58a:	e7f2      	b.n	f572 <RADIO_FHSSChangeChannel+0x22>
    f58c:	000080c1 	.word	0x000080c1
    f590:	20002980 	.word	0x20002980
    f594:	20002fbe 	.word	0x20002fbe
    f598:	00008099 	.word	0x00008099
    f59c:	00014e35 	.word	0x00014e35

0000f5a0 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    f5a2:	2000      	movs	r0, #0
    f5a4:	4b1a      	ldr	r3, [pc, #104]	; (f610 <RADIO_ReadRandom+0x70>)
    f5a6:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    f5a8:	4b1a      	ldr	r3, [pc, #104]	; (f614 <RADIO_ReadRandom+0x74>)
    f5aa:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    f5ac:	2201      	movs	r2, #1
    f5ae:	2101      	movs	r1, #1
    f5b0:	2000      	movs	r0, #0
    f5b2:	4c19      	ldr	r4, [pc, #100]	; (f618 <RADIO_ReadRandom+0x78>)
    f5b4:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    f5b6:	21ff      	movs	r1, #255	; 0xff
    f5b8:	2011      	movs	r0, #17
    f5ba:	4b18      	ldr	r3, [pc, #96]	; (f61c <RADIO_ReadRandom+0x7c>)
    f5bc:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    f5be:	2201      	movs	r2, #1
    f5c0:	2101      	movs	r1, #1
    f5c2:	2005      	movs	r0, #5
    f5c4:	47a0      	blx	r4
    f5c6:	2410      	movs	r4, #16
    retVal = 0;
    f5c8:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    f5ca:	4f15      	ldr	r7, [pc, #84]	; (f620 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    f5cc:	4e15      	ldr	r6, [pc, #84]	; (f624 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    f5ce:	2001      	movs	r0, #1
    f5d0:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    f5d2:	202c      	movs	r0, #44	; 0x2c
    f5d4:	47b0      	blx	r6
    f5d6:	2301      	movs	r3, #1
    f5d8:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    f5da:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    f5dc:	4305      	orrs	r5, r0
    f5de:	b2ad      	uxth	r5, r5
    f5e0:	3c01      	subs	r4, #1
    f5e2:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    f5e4:	2c00      	cmp	r4, #0
    f5e6:	d1f2      	bne.n	f5ce <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    f5e8:	2000      	movs	r0, #0
    f5ea:	4b0f      	ldr	r3, [pc, #60]	; (f628 <RADIO_ReadRandom+0x88>)
    f5ec:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    f5ee:	2201      	movs	r2, #1
    f5f0:	2101      	movs	r1, #1
    f5f2:	2000      	movs	r0, #0
    f5f4:	4b08      	ldr	r3, [pc, #32]	; (f618 <RADIO_ReadRandom+0x78>)
    f5f6:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    f5f8:	21ff      	movs	r1, #255	; 0xff
    f5fa:	2012      	movs	r0, #18
    f5fc:	4c07      	ldr	r4, [pc, #28]	; (f61c <RADIO_ReadRandom+0x7c>)
    f5fe:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    f600:	2100      	movs	r1, #0
    f602:	2011      	movs	r0, #17
    f604:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    f606:	4b09      	ldr	r3, [pc, #36]	; (f62c <RADIO_ReadRandom+0x8c>)
    f608:	4798      	blx	r3
	
    return retVal;
}
    f60a:	0028      	movs	r0, r5
    f60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f60e:	46c0      	nop			; (mov r8, r8)
    f610:	000156f1 	.word	0x000156f1
    f614:	00015ba1 	.word	0x00015ba1
    f618:	0000f46d 	.word	0x0000f46d
    f61c:	00008099 	.word	0x00008099
    f620:	000082f5 	.word	0x000082f5
    f624:	000080c1 	.word	0x000080c1
    f628:	00015819 	.word	0x00015819
    f62c:	00015bd5 	.word	0x00015bd5

0000f630 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    f630:	b510      	push	{r4, lr}
    f632:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    f634:	2011      	movs	r0, #17
    f636:	4b04      	ldr	r3, [pc, #16]	; (f648 <Radio_ReadFSKRssi+0x18>)
    f638:	4798      	blx	r3
    f63a:	0840      	lsrs	r0, r0, #1
    f63c:	b2c0      	uxtb	r0, r0
    f63e:	4240      	negs	r0, r0
    f640:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    f642:	2000      	movs	r0, #0
    f644:	bd10      	pop	{r4, pc}
    f646:	46c0      	nop			; (mov r8, r8)
    f648:	000080c1 	.word	0x000080c1

0000f64c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    f64c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    f64e:	4b01      	ldr	r3, [pc, #4]	; (f654 <tc_cca_callback+0x8>)
    f650:	4798      	blx	r3
}
    f652:	bd10      	pop	{r4, pc}
    f654:	0000fce5 	.word	0x0000fce5

0000f658 <tc_ovf_callback>:
{
    f658:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    f65a:	4b01      	ldr	r3, [pc, #4]	; (f660 <tc_ovf_callback+0x8>)
    f65c:	4798      	blx	r3
}
    f65e:	bd10      	pop	{r4, pc}
    f660:	0000fc9d 	.word	0x0000fc9d

0000f664 <tmr_read_count>:
{
    f664:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    f666:	4802      	ldr	r0, [pc, #8]	; (f670 <tmr_read_count+0xc>)
    f668:	4b02      	ldr	r3, [pc, #8]	; (f674 <tmr_read_count+0x10>)
    f66a:	4798      	blx	r3
    f66c:	b280      	uxth	r0, r0
}
    f66e:	bd10      	pop	{r4, pc}
    f670:	20002a14 	.word	0x20002a14
    f674:	000077dd 	.word	0x000077dd

0000f678 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    f678:	4b03      	ldr	r3, [pc, #12]	; (f688 <tmr_disable_cc_interrupt+0x10>)
    f67a:	2110      	movs	r1, #16
    f67c:	681a      	ldr	r2, [r3, #0]
    f67e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    f680:	7e5a      	ldrb	r2, [r3, #25]
    f682:	438a      	bics	r2, r1
    f684:	765a      	strb	r2, [r3, #25]
}
    f686:	4770      	bx	lr
    f688:	20002a14 	.word	0x20002a14

0000f68c <tmr_enable_cc_interrupt>:
{
    f68c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f68e:	4c0b      	ldr	r4, [pc, #44]	; (f6bc <tmr_enable_cc_interrupt+0x30>)
	if (status_flags & TC_STATUS_COUNT_OVERFLOW) {
		int_flags |= TC_INTFLAG_OVF;
	}

	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = int_flags;
    f690:	2510      	movs	r5, #16
    f692:	6823      	ldr	r3, [r4, #0]
    f694:	729d      	strb	r5, [r3, #10]
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f696:	0018      	movs	r0, r3
    f698:	4b09      	ldr	r3, [pc, #36]	; (f6c0 <tmr_enable_cc_interrupt+0x34>)
    f69a:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f69c:	4b09      	ldr	r3, [pc, #36]	; (f6c4 <tmr_enable_cc_interrupt+0x38>)
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    f69e:	5c1b      	ldrb	r3, [r3, r0]
    f6a0:	221f      	movs	r2, #31
    f6a2:	401a      	ands	r2, r3
    f6a4:	2301      	movs	r3, #1
    f6a6:	4093      	lsls	r3, r2
    f6a8:	4a07      	ldr	r2, [pc, #28]	; (f6c8 <tmr_enable_cc_interrupt+0x3c>)
    f6aa:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    f6ac:	7e63      	ldrb	r3, [r4, #25]
    f6ae:	2210      	movs	r2, #16
    f6b0:	4313      	orrs	r3, r2
    f6b2:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    f6b4:	6823      	ldr	r3, [r4, #0]
    f6b6:	725d      	strb	r5, [r3, #9]
}
    f6b8:	bd70      	pop	{r4, r5, r6, pc}
    f6ba:	46c0      	nop			; (mov r8, r8)
    f6bc:	20002a14 	.word	0x20002a14
    f6c0:	000074b1 	.word	0x000074b1
    f6c4:	00020164 	.word	0x00020164
    f6c8:	e000e100 	.word	0xe000e100

0000f6cc <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    f6cc:	4b03      	ldr	r3, [pc, #12]	; (f6dc <tmr_disable_ovf_interrupt+0x10>)
    f6ce:	2101      	movs	r1, #1
    f6d0:	681a      	ldr	r2, [r3, #0]
    f6d2:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    f6d4:	7e5a      	ldrb	r2, [r3, #25]
    f6d6:	438a      	bics	r2, r1
    f6d8:	765a      	strb	r2, [r3, #25]
}
    f6da:	4770      	bx	lr
    f6dc:	20002a14 	.word	0x20002a14

0000f6e0 <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    f6e0:	4b06      	ldr	r3, [pc, #24]	; (f6fc <tmr_stop+0x1c>)
    f6e2:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    f6e4:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    f6e6:	2b00      	cmp	r3, #0
    f6e8:	d1fc      	bne.n	f6e4 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    f6ea:	3333      	adds	r3, #51	; 0x33
    f6ec:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    f6ee:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    f6f0:	6813      	ldr	r3, [r2, #0]
    f6f2:	2102      	movs	r1, #2
    f6f4:	438b      	bics	r3, r1
    f6f6:	6013      	str	r3, [r2, #0]
}
    f6f8:	4770      	bx	lr
    f6fa:	46c0      	nop			; (mov r8, r8)
    f6fc:	20002a14 	.word	0x20002a14

0000f700 <tmr_write_cmpreg>:
{
    f700:	b510      	push	{r4, lr}
    f702:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    f704:	2100      	movs	r1, #0
    f706:	4802      	ldr	r0, [pc, #8]	; (f710 <tmr_write_cmpreg+0x10>)
    f708:	4b02      	ldr	r3, [pc, #8]	; (f714 <tmr_write_cmpreg+0x14>)
    f70a:	4798      	blx	r3
}
    f70c:	bd10      	pop	{r4, pc}
    f70e:	46c0      	nop			; (mov r8, r8)
    f710:	20002a14 	.word	0x20002a14
    f714:	0000781d 	.word	0x0000781d

0000f718 <save_cpu_interrupt>:
{
    f718:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    f71a:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    f71e:	425a      	negs	r2, r3
    f720:	4153      	adcs	r3, r2
    f722:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    f724:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    f726:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    f72a:	2200      	movs	r2, #0
    f72c:	4b02      	ldr	r3, [pc, #8]	; (f738 <save_cpu_interrupt+0x20>)
    f72e:	701a      	strb	r2, [r3, #0]
	return flags;
    f730:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    f732:	b2c0      	uxtb	r0, r0
}
    f734:	b002      	add	sp, #8
    f736:	4770      	bx	lr
    f738:	20000014 	.word	0x20000014

0000f73c <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    f73c:	2800      	cmp	r0, #0
    f73e:	d005      	beq.n	f74c <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    f740:	2201      	movs	r2, #1
    f742:	4b03      	ldr	r3, [pc, #12]	; (f750 <restore_cpu_interrupt+0x14>)
    f744:	701a      	strb	r2, [r3, #0]
    f746:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    f74a:	b662      	cpsie	i
}
    f74c:	4770      	bx	lr
    f74e:	46c0      	nop			; (mov r8, r8)
    f750:	20000014 	.word	0x20000014

0000f754 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    f754:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    f756:	4a33      	ldr	r2, [pc, #204]	; (f824 <tmr_init+0xd0>)
    f758:	2100      	movs	r1, #0
    f75a:	2300      	movs	r3, #0
    f75c:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    f75e:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    f760:	2000      	movs	r0, #0
    f762:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    f764:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    f766:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    f768:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    f76a:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    f76c:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f76e:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f770:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    f772:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    f774:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    f776:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    f778:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    f77a:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    f77c:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    f77e:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    f780:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    f782:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    f784:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    f786:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    f788:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    f78a:	2334      	movs	r3, #52	; 0x34
    f78c:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    f78e:	3b35      	subs	r3, #53	; 0x35
    f790:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    f792:	4c25      	ldr	r4, [pc, #148]	; (f828 <tmr_init+0xd4>)
    f794:	4925      	ldr	r1, [pc, #148]	; (f82c <tmr_init+0xd8>)
    f796:	0020      	movs	r0, r4
    f798:	4b25      	ldr	r3, [pc, #148]	; (f830 <tmr_init+0xdc>)
    f79a:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    f79c:	2200      	movs	r2, #0
    f79e:	4925      	ldr	r1, [pc, #148]	; (f834 <tmr_init+0xe0>)
    f7a0:	0020      	movs	r0, r4
    f7a2:	4d25      	ldr	r5, [pc, #148]	; (f838 <tmr_init+0xe4>)
    f7a4:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    f7a6:	2202      	movs	r2, #2
    f7a8:	4924      	ldr	r1, [pc, #144]	; (f83c <tmr_init+0xe8>)
    f7aa:	0020      	movs	r0, r4
    f7ac:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    f7ae:	6820      	ldr	r0, [r4, #0]
    f7b0:	4b23      	ldr	r3, [pc, #140]	; (f840 <tmr_init+0xec>)
    f7b2:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    f7b4:	4b23      	ldr	r3, [pc, #140]	; (f844 <tmr_init+0xf0>)
    f7b6:	5c1a      	ldrb	r2, [r3, r0]
    f7b8:	231f      	movs	r3, #31
    f7ba:	4013      	ands	r3, r2
    f7bc:	2101      	movs	r1, #1
    f7be:	000a      	movs	r2, r1
    f7c0:	409a      	lsls	r2, r3
    f7c2:	4b21      	ldr	r3, [pc, #132]	; (f848 <tmr_init+0xf4>)
    f7c4:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    f7c6:	7e63      	ldrb	r3, [r4, #25]
    f7c8:	2201      	movs	r2, #1
    f7ca:	4313      	orrs	r3, r2
    f7cc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    f7ce:	6822      	ldr	r2, [r4, #0]
    f7d0:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    f7d2:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    f7d4:	2b00      	cmp	r3, #0
    f7d6:	d1fc      	bne.n	f7d2 <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    f7d8:	6813      	ldr	r3, [r2, #0]
    f7da:	2102      	movs	r1, #2
    f7dc:	430b      	orrs	r3, r1
    f7de:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    f7e0:	2000      	movs	r0, #0
    f7e2:	4b1a      	ldr	r3, [pc, #104]	; (f84c <tmr_init+0xf8>)
    f7e4:	4798      	blx	r3
    f7e6:	4d1a      	ldr	r5, [pc, #104]	; (f850 <tmr_init+0xfc>)
    f7e8:	47a8      	blx	r5
    f7ea:	491a      	ldr	r1, [pc, #104]	; (f854 <tmr_init+0x100>)
    f7ec:	4b1a      	ldr	r3, [pc, #104]	; (f858 <tmr_init+0x104>)
    f7ee:	4798      	blx	r3
    f7f0:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    f7f2:	4b1a      	ldr	r3, [pc, #104]	; (f85c <tmr_init+0x108>)
    f7f4:	4798      	blx	r3
    f7f6:	47a8      	blx	r5
    f7f8:	1c01      	adds	r1, r0, #0
    f7fa:	1c20      	adds	r0, r4, #0
    f7fc:	4b18      	ldr	r3, [pc, #96]	; (f860 <tmr_init+0x10c>)
    f7fe:	4798      	blx	r3
    f800:	21fc      	movs	r1, #252	; 0xfc
    f802:	0589      	lsls	r1, r1, #22
    f804:	4b17      	ldr	r3, [pc, #92]	; (f864 <tmr_init+0x110>)
    f806:	4798      	blx	r3
    f808:	2800      	cmp	r0, #0
    f80a:	d005      	beq.n	f818 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    f80c:	21fe      	movs	r1, #254	; 0xfe
    f80e:	0589      	lsls	r1, r1, #22
    f810:	1c20      	adds	r0, r4, #0
    f812:	4b15      	ldr	r3, [pc, #84]	; (f868 <tmr_init+0x114>)
    f814:	4798      	blx	r3
    f816:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    f818:	1c20      	adds	r0, r4, #0
    f81a:	4b10      	ldr	r3, [pc, #64]	; (f85c <tmr_init+0x108>)
    f81c:	4798      	blx	r3
    f81e:	b2c0      	uxtb	r0, r0
}
    f820:	bd70      	pop	{r4, r5, r6, pc}
    f822:	46c0      	nop			; (mov r8, r8)
    f824:	200029dc 	.word	0x200029dc
    f828:	20002a14 	.word	0x20002a14
    f82c:	42002000 	.word	0x42002000
    f830:	000074ed 	.word	0x000074ed
    f834:	0000f659 	.word	0x0000f659
    f838:	000073c9 	.word	0x000073c9
    f83c:	0000f64d 	.word	0x0000f64d
    f840:	000074b1 	.word	0x000074b1
    f844:	00020164 	.word	0x00020164
    f848:	e000e100 	.word	0xe000e100
    f84c:	00007161 	.word	0x00007161
    f850:	000179b1 	.word	0x000179b1
    f854:	49742400 	.word	0x49742400
    f858:	00016f79 	.word	0x00016f79
    f85c:	00016a29 	.word	0x00016a29
    f860:	00017599 	.word	0x00017599
    f864:	00016981 	.word	0x00016981
    f868:	00016c55 	.word	0x00016c55

0000f86c <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    f86c:	b570      	push	{r4, r5, r6, lr}

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
	switch (mem) {
    f86e:	2800      	cmp	r0, #0
    f870:	d122      	bne.n	f8b8 <nvm_read+0x4c>
    f872:	4814      	ldr	r0, [pc, #80]	; (f8c4 <nvm_read+0x58>)
    f874:	7d04      	ldrb	r4, [r0, #20]
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    f876:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    f878:	07e4      	lsls	r4, r4, #31
    f87a:	d400      	bmi.n	f87e <nvm_read+0x12>
}
    f87c:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    f87e:	2420      	movs	r4, #32
    f880:	34ff      	adds	r4, #255	; 0xff
    f882:	4810      	ldr	r0, [pc, #64]	; (f8c4 <nvm_read+0x58>)
    f884:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    f886:	2b00      	cmp	r3, #0
    f888:	d019      	beq.n	f8be <nvm_read+0x52>
    f88a:	2001      	movs	r0, #1
    f88c:	4381      	bics	r1, r0
    f88e:	2000      	movs	r0, #0
    f890:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    f892:	1e5e      	subs	r6, r3, #1
    f894:	e005      	b.n	f8a2 <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    f896:	3002      	adds	r0, #2
    f898:	b280      	uxth	r0, r0
    f89a:	0005      	movs	r5, r0
    f89c:	3102      	adds	r1, #2
    f89e:	4283      	cmp	r3, r0
    f8a0:	d908      	bls.n	f8b4 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    f8a2:	880c      	ldrh	r4, [r1, #0]
    f8a4:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    f8a6:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    f8a8:	42ae      	cmp	r6, r5
    f8aa:	d9f4      	bls.n	f896 <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    f8ac:	1955      	adds	r5, r2, r5
    f8ae:	0a24      	lsrs	r4, r4, #8
    f8b0:	706c      	strb	r4, [r5, #1]
    f8b2:	e7f0      	b.n	f896 <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    f8b4:	2000      	movs	r0, #0
    f8b6:	e7e1      	b.n	f87c <nvm_read+0x10>
		return ERR_INVALID_ARG;
    f8b8:	2008      	movs	r0, #8
    f8ba:	4240      	negs	r0, r0
    f8bc:	e7de      	b.n	f87c <nvm_read+0x10>
	return STATUS_OK;
    f8be:	2000      	movs	r0, #0
    f8c0:	e7dc      	b.n	f87c <nvm_read+0x10>
    f8c2:	46c0      	nop			; (mov r8, r8)
    f8c4:	41004000 	.word	0x41004000

0000f8c8 <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    f8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f8ca:	46de      	mov	lr, fp
    f8cc:	4657      	mov	r7, sl
    f8ce:	464e      	mov	r6, r9
    f8d0:	4645      	mov	r5, r8
    f8d2:	b5e0      	push	{r5, r6, r7, lr}
    f8d4:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    f8d6:	2800      	cmp	r0, #0
    f8d8:	d168      	bne.n	f9ac <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    f8da:	b29b      	uxth	r3, r3
    f8dc:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    f8de:	4688      	mov	r8, r1
	uint32_t row_start_address
    f8e0:	23ff      	movs	r3, #255	; 0xff
    f8e2:	4399      	bics	r1, r3
    f8e4:	9100      	str	r1, [sp, #0]
	while (length) {
    f8e6:	4653      	mov	r3, sl
    f8e8:	2b00      	cmp	r3, #0
    f8ea:	d06b      	beq.n	f9c4 <nvm_write+0xfc>
    f8ec:	ab04      	add	r3, sp, #16
    f8ee:	1a5b      	subs	r3, r3, r1
    f8f0:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    f8f2:	4e35      	ldr	r6, [pc, #212]	; (f9c8 <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    f8f4:	4b35      	ldr	r3, [pc, #212]	; (f9cc <nvm_write+0x104>)
    f8f6:	469b      	mov	fp, r3
    f8f8:	9203      	str	r2, [sp, #12]
    f8fa:	e03a      	b.n	f972 <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    f8fc:	3301      	adds	r3, #1
		for (i = row_start_address;
    f8fe:	42bb      	cmp	r3, r7
    f900:	d20e      	bcs.n	f920 <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    f902:	2a00      	cmp	r2, #0
    f904:	d0fa      	beq.n	f8fc <nvm_write+0x34>
    f906:	4299      	cmp	r1, r3
    f908:	d1f8      	bne.n	f8fc <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    f90a:	9d03      	ldr	r5, [sp, #12]
    f90c:	7828      	ldrb	r0, [r5, #0]
    f90e:	9c02      	ldr	r4, [sp, #8]
    f910:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    f912:	3101      	adds	r1, #1
				length--;
    f914:	3a01      	subs	r2, #1
    f916:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    f918:	0028      	movs	r0, r5
    f91a:	3001      	adds	r0, #1
    f91c:	9003      	str	r0, [sp, #12]
    f91e:	e7ed      	b.n	f8fc <nvm_write+0x34>
    f920:	4692      	mov	sl, r2
    f922:	4688      	mov	r8, r1
    f924:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    f926:	4b2a      	ldr	r3, [pc, #168]	; (f9d0 <nvm_write+0x108>)
    f928:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    f92a:	9800      	ldr	r0, [sp, #0]
    f92c:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    f92e:	2805      	cmp	r0, #5
    f930:	d0fb      	beq.n	f92a <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    f932:	2800      	cmp	r0, #0
    f934:	d13d      	bne.n	f9b2 <nvm_write+0xea>
    f936:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    f938:	4f26      	ldr	r7, [pc, #152]	; (f9d4 <nvm_write+0x10c>)
    f93a:	9401      	str	r4, [sp, #4]
    f93c:	9b00      	ldr	r3, [sp, #0]
    f93e:	1aec      	subs	r4, r5, r3
    f940:	ab04      	add	r3, sp, #16
    f942:	469c      	mov	ip, r3
    f944:	4464      	add	r4, ip
    f946:	2240      	movs	r2, #64	; 0x40
    f948:	0021      	movs	r1, r4
    f94a:	0028      	movs	r0, r5
    f94c:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    f94e:	2805      	cmp	r0, #5
    f950:	d0f9      	beq.n	f946 <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    f952:	2800      	cmp	r0, #0
    f954:	d12d      	bne.n	f9b2 <nvm_write+0xea>
    f956:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    f958:	9b01      	ldr	r3, [sp, #4]
    f95a:	42ab      	cmp	r3, r5
    f95c:	d1ee      	bne.n	f93c <nvm_write+0x74>
	cpu_irq_leave_critical();
    f95e:	4b1e      	ldr	r3, [pc, #120]	; (f9d8 <nvm_write+0x110>)
    f960:	4798      	blx	r3
    f962:	9b02      	ldr	r3, [sp, #8]
    f964:	3b01      	subs	r3, #1
    f966:	3bff      	subs	r3, #255	; 0xff
    f968:	9302      	str	r3, [sp, #8]
    f96a:	9500      	str	r5, [sp, #0]
	while (length) {
    f96c:	4653      	mov	r3, sl
    f96e:	2b00      	cmp	r3, #0
    f970:	d028      	beq.n	f9c4 <nvm_write+0xfc>
    f972:	9b00      	ldr	r3, [sp, #0]
    f974:	1c5f      	adds	r7, r3, #1
    f976:	37ff      	adds	r7, #255	; 0xff
{
    f978:	001c      	movs	r4, r3
    f97a:	46b9      	mov	r9, r7
    f97c:	001f      	movs	r7, r3
    f97e:	1be5      	subs	r5, r4, r7
    f980:	ab04      	add	r3, sp, #16
    f982:	469c      	mov	ip, r3
    f984:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    f986:	2240      	movs	r2, #64	; 0x40
    f988:	0029      	movs	r1, r5
    f98a:	0020      	movs	r0, r4
    f98c:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    f98e:	2805      	cmp	r0, #5
    f990:	d0f9      	beq.n	f986 <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    f992:	2800      	cmp	r0, #0
    f994:	d10d      	bne.n	f9b2 <nvm_write+0xea>
    f996:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    f998:	454c      	cmp	r4, r9
    f99a:	d1f0      	bne.n	f97e <nvm_write+0xb6>
    f99c:	464f      	mov	r7, r9
		for (i = row_start_address;
    f99e:	9b00      	ldr	r3, [sp, #0]
    f9a0:	429f      	cmp	r7, r3
    f9a2:	d9c0      	bls.n	f926 <nvm_write+0x5e>
    f9a4:	4652      	mov	r2, sl
    f9a6:	4641      	mov	r1, r8
    f9a8:	9401      	str	r4, [sp, #4]
    f9aa:	e7aa      	b.n	f902 <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    f9ac:	2008      	movs	r0, #8
    f9ae:	4240      	negs	r0, r0
    f9b0:	e001      	b.n	f9b6 <nvm_write+0xee>
			return ERR_INVALID_ARG;
    f9b2:	2008      	movs	r0, #8
    f9b4:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    f9b6:	b045      	add	sp, #276	; 0x114
    f9b8:	bc3c      	pop	{r2, r3, r4, r5}
    f9ba:	4690      	mov	r8, r2
    f9bc:	4699      	mov	r9, r3
    f9be:	46a2      	mov	sl, r4
    f9c0:	46ab      	mov	fp, r5
    f9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    f9c4:	2000      	movs	r0, #0
    f9c6:	e7f6      	b.n	f9b6 <nvm_write+0xee>
    f9c8:	00004d25 	.word	0x00004d25
    f9cc:	00004da5 	.word	0x00004da5
    f9d0:	0000457d 	.word	0x0000457d
    f9d4:	00004c4d 	.word	0x00004c4d
    f9d8:	000045bd 	.word	0x000045bd

0000f9dc <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    f9dc:	b500      	push	{lr}
    f9de:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    f9e0:	2800      	cmp	r0, #0
    f9e2:	d110      	bne.n	fa06 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    f9e4:	2300      	movs	r3, #0
    f9e6:	466a      	mov	r2, sp
    f9e8:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    f9ea:	4a08      	ldr	r2, [pc, #32]	; (fa0c <nvm_init+0x30>)
    f9ec:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    f9ee:	466a      	mov	r2, sp
    f9f0:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    f9f2:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    f9f4:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    f9f6:	3302      	adds	r3, #2
    f9f8:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    f9fa:	4668      	mov	r0, sp
    f9fc:	4b04      	ldr	r3, [pc, #16]	; (fa10 <nvm_init+0x34>)
    f9fe:	4798      	blx	r3

		return STATUS_OK;
    fa00:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    fa02:	b003      	add	sp, #12
    fa04:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    fa06:	2008      	movs	r0, #8
    fa08:	4240      	negs	r0, r0
    fa0a:	e7fa      	b.n	fa02 <nvm_init+0x26>
    fa0c:	41004000 	.word	0x41004000
    fa10:	00004ae5 	.word	0x00004ae5

0000fa14 <main>:
 * \section preface Preface
 * This is the reference manual for the LORAWAN Parser Application of EU Band
 */

int main(void)
{
    fa14:	b570      	push	{r4, r5, r6, lr}
	system_init();
    fa16:	4b30      	ldr	r3, [pc, #192]	; (fad8 <main+0xc4>)
    fa18:	4798      	blx	r3
	delay_init();
    fa1a:	4b30      	ldr	r3, [pc, #192]	; (fadc <main+0xc8>)
    fa1c:	4798      	blx	r3
	board_init();
    fa1e:	4b30      	ldr	r3, [pc, #192]	; (fae0 <main+0xcc>)
    fa20:	4798      	blx	r3
	INTERRUPT_GlobalInterruptEnable();
    fa22:	2201      	movs	r2, #1
    fa24:	4b2f      	ldr	r3, [pc, #188]	; (fae4 <main+0xd0>)
    fa26:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    fa28:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    fa2c:	b662      	cpsie	i
	sio2host_init();
    fa2e:	4b2e      	ldr	r3, [pc, #184]	; (fae8 <main+0xd4>)
    fa30:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    fa32:	4b2e      	ldr	r3, [pc, #184]	; (faec <main+0xd8>)
    fa34:	781c      	ldrb	r4, [r3, #0]
    fa36:	b2e4      	uxtb	r4, r4
	printf("\r\nLast reset cause: ");
    fa38:	482d      	ldr	r0, [pc, #180]	; (faf0 <main+0xdc>)
    fa3a:	4b2e      	ldr	r3, [pc, #184]	; (faf4 <main+0xe0>)
    fa3c:	4798      	blx	r3
	if(rcause & (1 << 6)) {
    fa3e:	0663      	lsls	r3, r4, #25
    fa40:	d432      	bmi.n	faa8 <main+0x94>
	if(rcause & (1 << 5)) {
    fa42:	06a3      	lsls	r3, r4, #26
    fa44:	d434      	bmi.n	fab0 <main+0x9c>
	if(rcause & (1 << 4)) {
    fa46:	06e3      	lsls	r3, r4, #27
    fa48:	d436      	bmi.n	fab8 <main+0xa4>
	if(rcause & (1 << 2)) {
    fa4a:	0763      	lsls	r3, r4, #29
    fa4c:	d438      	bmi.n	fac0 <main+0xac>
	if(rcause & (1 << 1)) {
    fa4e:	07a3      	lsls	r3, r4, #30
    fa50:	d43a      	bmi.n	fac8 <main+0xb4>
	if(rcause & (1 << 0)) {
    fa52:	07e3      	lsls	r3, r4, #31
    fa54:	d43c      	bmi.n	fad0 <main+0xbc>
#if (_DEBUG_ == 1)
	SYSTEM_AssertSubscribe(assertHandler);
#endif

	/* Configure board button as external interrupt pin */
	configure_extint();	
    fa56:	4b28      	ldr	r3, [pc, #160]	; (faf8 <main+0xe4>)
    fa58:	4798      	blx	r3
	/* Register External Interrupt callback */
	configure_eic_callback();
    fa5a:	4b28      	ldr	r3, [pc, #160]	; (fafc <main+0xe8>)
    fa5c:	4798      	blx	r3
	printf("LoRaWAN Stack UP\r\n");
    fa5e:	4828      	ldr	r0, [pc, #160]	; (fb00 <main+0xec>)
    fa60:	4b28      	ldr	r3, [pc, #160]	; (fb04 <main+0xf0>)
    fa62:	4798      	blx	r3
	HAL_RadioInit();
    fa64:	4b28      	ldr	r3, [pc, #160]	; (fb08 <main+0xf4>)
    fa66:	4798      	blx	r3
	// Initialize AES only (crypto is on-demand)
	SAL_Init(false) ;
    fa68:	2000      	movs	r0, #0
    fa6a:	4b28      	ldr	r3, [pc, #160]	; (fb0c <main+0xf8>)
    fa6c:	4798      	blx	r3
	// Initialize Timers
	SystemTimerInit();
    fa6e:	4b28      	ldr	r3, [pc, #160]	; (fb10 <main+0xfc>)
    fa70:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
	SleepTimerInit();
    fa72:	4b28      	ldr	r3, [pc, #160]	; (fb14 <main+0x100>)
    fa74:	4798      	blx	r3
#endif /* CONF_PMM_ENABLE */

#if (ENABLE_PDS == 1)	
 	PDS_Init();
    fa76:	4b28      	ldr	r3, [pc, #160]	; (fb18 <main+0x104>)
    fa78:	4798      	blx	r3
#endif	
	Stack_Init();
    fa7a:	4b28      	ldr	r3, [pc, #160]	; (fb1c <main+0x108>)
    fa7c:	4798      	blx	r3
	Parser_Init();
    fa7e:	4b28      	ldr	r3, [pc, #160]	; (fb20 <main+0x10c>)
    fa80:	4798      	blx	r3
    Parser_SetConfiguredJoinParameters(0x01);
    fa82:	2001      	movs	r0, #1
    fa84:	4b27      	ldr	r3, [pc, #156]	; (fb24 <main+0x110>)
    fa86:	4798      	blx	r3
    Parser_GetSwVersion(aParserData);
    fa88:	4c27      	ldr	r4, [pc, #156]	; (fb28 <main+0x114>)
    fa8a:	0020      	movs	r0, r4
    fa8c:	4b27      	ldr	r3, [pc, #156]	; (fb2c <main+0x118>)
    fa8e:	4798      	blx	r3
    Parser_TxAddReply((char *)aParserData, (uint16_t)strlen((char *)aParserData));
    fa90:	0020      	movs	r0, r4
    fa92:	4b27      	ldr	r3, [pc, #156]	; (fb30 <main+0x11c>)
    fa94:	4798      	blx	r3
    fa96:	b281      	uxth	r1, r0
    fa98:	0020      	movs	r0, r4
    fa9a:	4b26      	ldr	r3, [pc, #152]	; (fb34 <main+0x120>)
    fa9c:	4798      	blx	r3
	//port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
	*/
	
    while (1)
    {
		parser_serial_data_handler();
    fa9e:	4d26      	ldr	r5, [pc, #152]	; (fb38 <main+0x124>)
		SYSTEM_RunTasks();
    faa0:	4c26      	ldr	r4, [pc, #152]	; (fb3c <main+0x128>)
		parser_serial_data_handler();
    faa2:	47a8      	blx	r5
		SYSTEM_RunTasks();
    faa4:	47a0      	blx	r4
    faa6:	e7fc      	b.n	faa2 <main+0x8e>
		printf("System Reset Request\r\n");
    faa8:	4825      	ldr	r0, [pc, #148]	; (fb40 <main+0x12c>)
    faaa:	4b16      	ldr	r3, [pc, #88]	; (fb04 <main+0xf0>)
    faac:	4798      	blx	r3
    faae:	e7c8      	b.n	fa42 <main+0x2e>
		printf("Watchdog Reset\r\n");
    fab0:	4824      	ldr	r0, [pc, #144]	; (fb44 <main+0x130>)
    fab2:	4b14      	ldr	r3, [pc, #80]	; (fb04 <main+0xf0>)
    fab4:	4798      	blx	r3
    fab6:	e7c6      	b.n	fa46 <main+0x32>
		printf("External Reset\r\n");
    fab8:	4823      	ldr	r0, [pc, #140]	; (fb48 <main+0x134>)
    faba:	4b12      	ldr	r3, [pc, #72]	; (fb04 <main+0xf0>)
    fabc:	4798      	blx	r3
    fabe:	e7c4      	b.n	fa4a <main+0x36>
		printf("Brown Out 33 Detector Reset\r\n");
    fac0:	4822      	ldr	r0, [pc, #136]	; (fb4c <main+0x138>)
    fac2:	4b10      	ldr	r3, [pc, #64]	; (fb04 <main+0xf0>)
    fac4:	4798      	blx	r3
    fac6:	e7c2      	b.n	fa4e <main+0x3a>
		printf("Brown Out 12 Detector Reset\r\n");
    fac8:	4821      	ldr	r0, [pc, #132]	; (fb50 <main+0x13c>)
    faca:	4b0e      	ldr	r3, [pc, #56]	; (fb04 <main+0xf0>)
    facc:	4798      	blx	r3
    face:	e7c0      	b.n	fa52 <main+0x3e>
		printf("Power-On Reset\r\n");
    fad0:	4820      	ldr	r0, [pc, #128]	; (fb54 <main+0x140>)
    fad2:	4b0c      	ldr	r3, [pc, #48]	; (fb04 <main+0xf0>)
    fad4:	4798      	blx	r3
    fad6:	e7be      	b.n	fa56 <main+0x42>
    fad8:	0000739d 	.word	0x0000739d
    fadc:	000044e5 	.word	0x000044e5
    fae0:	000045ed 	.word	0x000045ed
    fae4:	20000014 	.word	0x20000014
    fae8:	00007ab5 	.word	0x00007ab5
    faec:	40000800 	.word	0x40000800
    faf0:	0002016c 	.word	0x0002016c
    faf4:	00019ef5 	.word	0x00019ef5
    faf8:	00003edd 	.word	0x00003edd
    fafc:	00003f0d 	.word	0x00003f0d
    fb00:	0002020c 	.word	0x0002020c
    fb04:	00019fb9 	.word	0x00019fb9
    fb08:	00007e5d 	.word	0x00007e5d
    fb0c:	0000db81 	.word	0x0000db81
    fb10:	0000ed05 	.word	0x0000ed05
    fb14:	00008249 	.word	0x00008249
    fb18:	0000e059 	.word	0x0000e059
    fb1c:	0000f3b9 	.word	0x0000f3b9
    fb20:	00001bc9 	.word	0x00001bc9
    fb24:	00002235 	.word	0x00002235
    fb28:	2000116c 	.word	0x2000116c
    fb2c:	00001e85 	.word	0x00001e85
    fb30:	0001a275 	.word	0x0001a275
    fb34:	00003f7d 	.word	0x00003f7d
    fb38:	00001ba5 	.word	0x00001ba5
    fb3c:	0000f3c9 	.word	0x0000f3c9
    fb40:	00020184 	.word	0x00020184
    fb44:	0002019c 	.word	0x0002019c
    fb48:	000201ac 	.word	0x000201ac
    fb4c:	000201bc 	.word	0x000201bc
    fb50:	000201dc 	.word	0x000201dc
    fb54:	000201fc 	.word	0x000201fc

0000fb58 <APP_TaskHandler>:
    }
}

SYSTEM_TaskStatus_t APP_TaskHandler(void)
{
    fb58:	b510      	push	{r4, lr}
	Parser_Main();
    fb5a:	4b02      	ldr	r3, [pc, #8]	; (fb64 <APP_TaskHandler+0xc>)
    fb5c:	4798      	blx	r3
	return SYSTEM_TASK_SUCCESS;
}
    fb5e:	2000      	movs	r0, #0
    fb60:	bd10      	pop	{r4, pc}
    fb62:	46c0      	nop			; (mov r8, r8)
    fb64:	00001c05 	.word	0x00001c05

0000fb68 <common_tc_read_count>:
    fb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb6a:	4b0d      	ldr	r3, [pc, #52]	; (fba0 <common_tc_read_count+0x38>)
    fb6c:	4798      	blx	r3
    fb6e:	4b0d      	ldr	r3, [pc, #52]	; (fba4 <common_tc_read_count+0x3c>)
    fb70:	781b      	ldrb	r3, [r3, #0]
    fb72:	2b00      	cmp	r3, #0
    fb74:	d00e      	beq.n	fb94 <common_tc_read_count+0x2c>
    fb76:	4b0c      	ldr	r3, [pc, #48]	; (fba8 <common_tc_read_count+0x40>)
    fb78:	781d      	ldrb	r5, [r3, #0]
    fb7a:	4b0a      	ldr	r3, [pc, #40]	; (fba4 <common_tc_read_count+0x3c>)
    fb7c:	781f      	ldrb	r7, [r3, #0]
    fb7e:	4c0b      	ldr	r4, [pc, #44]	; (fbac <common_tc_read_count+0x44>)
    fb80:	1c29      	adds	r1, r5, #0
    fb82:	47a0      	blx	r4
    fb84:	1c06      	adds	r6, r0, #0
    fb86:	480a      	ldr	r0, [pc, #40]	; (fbb0 <common_tc_read_count+0x48>)
    fb88:	1c29      	adds	r1, r5, #0
    fb8a:	47a0      	blx	r4
    fb8c:	4378      	muls	r0, r7
    fb8e:	1830      	adds	r0, r6, r0
    fb90:	b280      	uxth	r0, r0
    fb92:	e004      	b.n	fb9e <common_tc_read_count+0x36>
    fb94:	4b04      	ldr	r3, [pc, #16]	; (fba8 <common_tc_read_count+0x40>)
    fb96:	7819      	ldrb	r1, [r3, #0]
    fb98:	4b04      	ldr	r3, [pc, #16]	; (fbac <common_tc_read_count+0x44>)
    fb9a:	4798      	blx	r3
    fb9c:	b280      	uxth	r0, r0
    fb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fba0:	0000f665 	.word	0x0000f665
    fba4:	200010fc 	.word	0x200010fc
    fba8:	20002a30 	.word	0x20002a30
    fbac:	000166cd 	.word	0x000166cd
    fbb0:	0000ffff 	.word	0x0000ffff

0000fbb4 <common_tc_compare_stop>:
    fbb4:	b508      	push	{r3, lr}
    fbb6:	4b05      	ldr	r3, [pc, #20]	; (fbcc <common_tc_compare_stop+0x18>)
    fbb8:	4798      	blx	r3
    fbba:	4b05      	ldr	r3, [pc, #20]	; (fbd0 <common_tc_compare_stop+0x1c>)
    fbbc:	4798      	blx	r3
    fbbe:	4b05      	ldr	r3, [pc, #20]	; (fbd4 <common_tc_compare_stop+0x20>)
    fbc0:	2200      	movs	r2, #0
    fbc2:	605a      	str	r2, [r3, #4]
    fbc4:	811a      	strh	r2, [r3, #8]
    fbc6:	4b04      	ldr	r3, [pc, #16]	; (fbd8 <common_tc_compare_stop+0x24>)
    fbc8:	4798      	blx	r3
    fbca:	bd08      	pop	{r3, pc}
    fbcc:	0000f679 	.word	0x0000f679
    fbd0:	0000f719 	.word	0x0000f719
    fbd4:	200010fc 	.word	0x200010fc
    fbd8:	0000f73d 	.word	0x0000f73d

0000fbdc <common_tc_overflow_stop>:
    fbdc:	b508      	push	{r3, lr}
    fbde:	4b03      	ldr	r3, [pc, #12]	; (fbec <common_tc_overflow_stop+0x10>)
    fbe0:	4798      	blx	r3
    fbe2:	2200      	movs	r2, #0
    fbe4:	4b02      	ldr	r3, [pc, #8]	; (fbf0 <common_tc_overflow_stop+0x14>)
    fbe6:	701a      	strb	r2, [r3, #0]
    fbe8:	bd08      	pop	{r3, pc}
    fbea:	46c0      	nop			; (mov r8, r8)
    fbec:	0000f6cd 	.word	0x0000f6cd
    fbf0:	200010fc 	.word	0x200010fc

0000fbf4 <common_tc_stop>:
    fbf4:	b508      	push	{r3, lr}
    fbf6:	4b03      	ldr	r3, [pc, #12]	; (fc04 <common_tc_stop+0x10>)
    fbf8:	4798      	blx	r3
    fbfa:	4b03      	ldr	r3, [pc, #12]	; (fc08 <common_tc_stop+0x14>)
    fbfc:	4798      	blx	r3
    fbfe:	4b03      	ldr	r3, [pc, #12]	; (fc0c <common_tc_stop+0x18>)
    fc00:	4798      	blx	r3
    fc02:	bd08      	pop	{r3, pc}
    fc04:	0000fbb5 	.word	0x0000fbb5
    fc08:	0000fbdd 	.word	0x0000fbdd
    fc0c:	0000f6e1 	.word	0x0000f6e1

0000fc10 <common_tc_delay>:
    fc10:	b510      	push	{r4, lr}
    fc12:	1c04      	adds	r4, r0, #0
    fc14:	4b13      	ldr	r3, [pc, #76]	; (fc64 <common_tc_delay+0x54>)
    fc16:	4798      	blx	r3
    fc18:	4b13      	ldr	r3, [pc, #76]	; (fc68 <common_tc_delay+0x58>)
    fc1a:	781a      	ldrb	r2, [r3, #0]
    fc1c:	4362      	muls	r2, r4
    fc1e:	1881      	adds	r1, r0, r2
    fc20:	4b12      	ldr	r3, [pc, #72]	; (fc6c <common_tc_delay+0x5c>)
    fc22:	6059      	str	r1, [r3, #4]
    fc24:	6859      	ldr	r1, [r3, #4]
    fc26:	0c09      	lsrs	r1, r1, #16
    fc28:	6059      	str	r1, [r3, #4]
    fc2a:	685b      	ldr	r3, [r3, #4]
    fc2c:	2b00      	cmp	r3, #0
    fc2e:	d007      	beq.n	fc40 <common_tc_delay+0x30>
    fc30:	4b0e      	ldr	r3, [pc, #56]	; (fc6c <common_tc_delay+0x5c>)
    fc32:	6859      	ldr	r1, [r3, #4]
    fc34:	3201      	adds	r2, #1
    fc36:	1880      	adds	r0, r0, r2
    fc38:	8118      	strh	r0, [r3, #8]
    fc3a:	4b0d      	ldr	r3, [pc, #52]	; (fc70 <common_tc_delay+0x60>)
    fc3c:	4798      	blx	r3
    fc3e:	e004      	b.n	fc4a <common_tc_delay+0x3a>
    fc40:	1882      	adds	r2, r0, r2
    fc42:	4b0a      	ldr	r3, [pc, #40]	; (fc6c <common_tc_delay+0x5c>)
    fc44:	811a      	strh	r2, [r3, #8]
    fc46:	4b0b      	ldr	r3, [pc, #44]	; (fc74 <common_tc_delay+0x64>)
    fc48:	4798      	blx	r3
    fc4a:	4b08      	ldr	r3, [pc, #32]	; (fc6c <common_tc_delay+0x5c>)
    fc4c:	891b      	ldrh	r3, [r3, #8]
    fc4e:	2b63      	cmp	r3, #99	; 0x63
    fc50:	d802      	bhi.n	fc58 <common_tc_delay+0x48>
    fc52:	3364      	adds	r3, #100	; 0x64
    fc54:	4a05      	ldr	r2, [pc, #20]	; (fc6c <common_tc_delay+0x5c>)
    fc56:	8113      	strh	r3, [r2, #8]
    fc58:	4b04      	ldr	r3, [pc, #16]	; (fc6c <common_tc_delay+0x5c>)
    fc5a:	8918      	ldrh	r0, [r3, #8]
    fc5c:	4b06      	ldr	r3, [pc, #24]	; (fc78 <common_tc_delay+0x68>)
    fc5e:	4798      	blx	r3
    fc60:	bd10      	pop	{r4, pc}
    fc62:	46c0      	nop			; (mov r8, r8)
    fc64:	0000f665 	.word	0x0000f665
    fc68:	20002a30 	.word	0x20002a30
    fc6c:	200010fc 	.word	0x200010fc
    fc70:	0000f679 	.word	0x0000f679
    fc74:	0000f68d 	.word	0x0000f68d
    fc78:	0000f701 	.word	0x0000f701

0000fc7c <common_tc_init>:
    fc7c:	b508      	push	{r3, lr}
    fc7e:	2200      	movs	r2, #0
    fc80:	4b03      	ldr	r3, [pc, #12]	; (fc90 <common_tc_init+0x14>)
    fc82:	701a      	strb	r2, [r3, #0]
    fc84:	4b03      	ldr	r3, [pc, #12]	; (fc94 <common_tc_init+0x18>)
    fc86:	4798      	blx	r3
    fc88:	4b03      	ldr	r3, [pc, #12]	; (fc98 <common_tc_init+0x1c>)
    fc8a:	7018      	strb	r0, [r3, #0]
    fc8c:	bd08      	pop	{r3, pc}
    fc8e:	46c0      	nop			; (mov r8, r8)
    fc90:	200010fc 	.word	0x200010fc
    fc94:	0000f755 	.word	0x0000f755
    fc98:	20002a30 	.word	0x20002a30

0000fc9c <tmr_ovf_callback>:
    fc9c:	b508      	push	{r3, lr}
    fc9e:	4b0e      	ldr	r3, [pc, #56]	; (fcd8 <tmr_ovf_callback+0x3c>)
    fca0:	685b      	ldr	r3, [r3, #4]
    fca2:	2b00      	cmp	r3, #0
    fca4:	d007      	beq.n	fcb6 <tmr_ovf_callback+0x1a>
    fca6:	4a0c      	ldr	r2, [pc, #48]	; (fcd8 <tmr_ovf_callback+0x3c>)
    fca8:	6853      	ldr	r3, [r2, #4]
    fcaa:	3b01      	subs	r3, #1
    fcac:	6053      	str	r3, [r2, #4]
    fcae:	2b00      	cmp	r3, #0
    fcb0:	d101      	bne.n	fcb6 <tmr_ovf_callback+0x1a>
    fcb2:	4b0a      	ldr	r3, [pc, #40]	; (fcdc <tmr_ovf_callback+0x40>)
    fcb4:	4798      	blx	r3
    fcb6:	4a08      	ldr	r2, [pc, #32]	; (fcd8 <tmr_ovf_callback+0x3c>)
    fcb8:	7813      	ldrb	r3, [r2, #0]
    fcba:	3301      	adds	r3, #1
    fcbc:	b2db      	uxtb	r3, r3
    fcbe:	7013      	strb	r3, [r2, #0]
    fcc0:	4a07      	ldr	r2, [pc, #28]	; (fce0 <tmr_ovf_callback+0x44>)
    fcc2:	7812      	ldrb	r2, [r2, #0]
    fcc4:	429a      	cmp	r2, r3
    fcc6:	d806      	bhi.n	fcd6 <tmr_ovf_callback+0x3a>
    fcc8:	4b03      	ldr	r3, [pc, #12]	; (fcd8 <tmr_ovf_callback+0x3c>)
    fcca:	2200      	movs	r2, #0
    fccc:	701a      	strb	r2, [r3, #0]
    fcce:	68db      	ldr	r3, [r3, #12]
    fcd0:	2b00      	cmp	r3, #0
    fcd2:	d000      	beq.n	fcd6 <tmr_ovf_callback+0x3a>
    fcd4:	4798      	blx	r3
    fcd6:	bd08      	pop	{r3, pc}
    fcd8:	200010fc 	.word	0x200010fc
    fcdc:	0000f68d 	.word	0x0000f68d
    fce0:	20002a30 	.word	0x20002a30

0000fce4 <tmr_cca_callback>:
    fce4:	b508      	push	{r3, lr}
    fce6:	4b04      	ldr	r3, [pc, #16]	; (fcf8 <tmr_cca_callback+0x14>)
    fce8:	4798      	blx	r3
    fcea:	4b04      	ldr	r3, [pc, #16]	; (fcfc <tmr_cca_callback+0x18>)
    fcec:	691b      	ldr	r3, [r3, #16]
    fcee:	2b00      	cmp	r3, #0
    fcf0:	d000      	beq.n	fcf4 <tmr_cca_callback+0x10>
    fcf2:	4798      	blx	r3
    fcf4:	bd08      	pop	{r3, pc}
    fcf6:	46c0      	nop			; (mov r8, r8)
    fcf8:	0000f679 	.word	0x0000f679
    fcfc:	200010fc 	.word	0x200010fc

0000fd00 <set_common_tc_overflow_callback>:
    fd00:	4b01      	ldr	r3, [pc, #4]	; (fd08 <set_common_tc_overflow_callback+0x8>)
    fd02:	60d8      	str	r0, [r3, #12]
    fd04:	4770      	bx	lr
    fd06:	46c0      	nop			; (mov r8, r8)
    fd08:	200010fc 	.word	0x200010fc

0000fd0c <set_common_tc_expiry_callback>:
    fd0c:	4b01      	ldr	r3, [pc, #4]	; (fd14 <set_common_tc_expiry_callback+0x8>)
    fd0e:	6118      	str	r0, [r3, #16]
    fd10:	4770      	bx	lr
    fd12:	46c0      	nop			; (mov r8, r8)
    fd14:	200010fc 	.word	0x200010fc

0000fd18 <MacClearCommands>:
    fd18:	490e      	ldr	r1, [pc, #56]	; (fd54 <MacClearCommands+0x3c>)
    fd1a:	b570      	push	{r4, r5, r6, lr}
    fd1c:	000b      	movs	r3, r1
    fd1e:	33d8      	adds	r3, #216	; 0xd8
    fd20:	7818      	ldrb	r0, [r3, #0]
    fd22:	2303      	movs	r3, #3
    fd24:	25a4      	movs	r5, #164	; 0xa4
    fd26:	4343      	muls	r3, r0
    fd28:	2401      	movs	r4, #1
    fd2a:	20ff      	movs	r0, #255	; 0xff
    fd2c:	3391      	adds	r3, #145	; 0x91
    fd2e:	4a0a      	ldr	r2, [pc, #40]	; (fd58 <MacClearCommands+0x40>)
    fd30:	185b      	adds	r3, r3, r1
    fd32:	00ed      	lsls	r5, r5, #3
    fd34:	429a      	cmp	r2, r3
    fd36:	d100      	bne.n	fd3a <MacClearCommands+0x22>
    fd38:	bd70      	pop	{r4, r5, r6, pc}
    fd3a:	7811      	ldrb	r1, [r2, #0]
    fd3c:	29ff      	cmp	r1, #255	; 0xff
    fd3e:	d006      	beq.n	fd4e <MacClearCommands+0x36>
    fd40:	290a      	cmp	r1, #10
    fd42:	d803      	bhi.n	fd4c <MacClearCommands+0x34>
    fd44:	0026      	movs	r6, r4
    fd46:	408e      	lsls	r6, r1
    fd48:	422e      	tst	r6, r5
    fd4a:	d100      	bne.n	fd4e <MacClearCommands+0x36>
    fd4c:	7010      	strb	r0, [r2, #0]
    fd4e:	3203      	adds	r2, #3
    fd50:	e7f0      	b.n	fd34 <MacClearCommands+0x1c>
    fd52:	46c0      	nop			; (mov r8, r8)
    fd54:	20002b5c 	.word	0x20002b5c
    fd58:	20002bed 	.word	0x20002bed

0000fd5c <CountfOptsLength>:
    fd5c:	2200      	movs	r2, #0
    fd5e:	490d      	ldr	r1, [pc, #52]	; (fd94 <CountfOptsLength+0x38>)
    fd60:	b570      	push	{r4, r5, r6, lr}
    fd62:	000b      	movs	r3, r1
    fd64:	0010      	movs	r0, r2
    fd66:	2503      	movs	r5, #3
    fd68:	33d8      	adds	r3, #216	; 0xd8
    fd6a:	781c      	ldrb	r4, [r3, #0]
    fd6c:	4e0a      	ldr	r6, [pc, #40]	; (fd98 <CountfOptsLength+0x3c>)
    fd6e:	b2d3      	uxtb	r3, r2
    fd70:	429c      	cmp	r4, r3
    fd72:	d800      	bhi.n	fd76 <CountfOptsLength+0x1a>
    fd74:	bd70      	pop	{r4, r5, r6, pc}
    fd76:	002b      	movs	r3, r5
    fd78:	4353      	muls	r3, r2
    fd7a:	3391      	adds	r3, #145	; 0x91
    fd7c:	5ccb      	ldrb	r3, [r1, r3]
    fd7e:	2bff      	cmp	r3, #255	; 0xff
    fd80:	d006      	beq.n	fd90 <CountfOptsLength+0x34>
    fd82:	18f3      	adds	r3, r6, r3
    fd84:	3b02      	subs	r3, #2
    fd86:	781b      	ldrb	r3, [r3, #0]
    fd88:	18c3      	adds	r3, r0, r3
    fd8a:	2b0f      	cmp	r3, #15
    fd8c:	dcf2      	bgt.n	fd74 <CountfOptsLength+0x18>
    fd8e:	b2d8      	uxtb	r0, r3
    fd90:	3201      	adds	r2, #1
    fd92:	e7ec      	b.n	fd6e <CountfOptsLength+0x12>
    fd94:	20002b5c 	.word	0x20002b5c
    fd98:	0002023b 	.word	0x0002023b

0000fd9c <StopAllSoftwareTimers>:
    fd9c:	b570      	push	{r4, r5, r6, lr}
    fd9e:	4c17      	ldr	r4, [pc, #92]	; (fdfc <StopAllSoftwareTimers+0x60>)
    fda0:	4d17      	ldr	r5, [pc, #92]	; (fe00 <StopAllSoftwareTimers+0x64>)
    fda2:	0023      	movs	r3, r4
    fda4:	33e2      	adds	r3, #226	; 0xe2
    fda6:	7818      	ldrb	r0, [r3, #0]
    fda8:	47a8      	blx	r5
    fdaa:	0023      	movs	r3, r4
    fdac:	33e3      	adds	r3, #227	; 0xe3
    fdae:	7818      	ldrb	r0, [r3, #0]
    fdb0:	47a8      	blx	r5
    fdb2:	0023      	movs	r3, r4
    fdb4:	33e7      	adds	r3, #231	; 0xe7
    fdb6:	7818      	ldrb	r0, [r3, #0]
    fdb8:	47a8      	blx	r5
    fdba:	0023      	movs	r3, r4
    fdbc:	33e4      	adds	r3, #228	; 0xe4
    fdbe:	7818      	ldrb	r0, [r3, #0]
    fdc0:	47a8      	blx	r5
    fdc2:	0023      	movs	r3, r4
    fdc4:	33e5      	adds	r3, #229	; 0xe5
    fdc6:	7818      	ldrb	r0, [r3, #0]
    fdc8:	47a8      	blx	r5
    fdca:	0023      	movs	r3, r4
    fdcc:	33e8      	adds	r3, #232	; 0xe8
    fdce:	7818      	ldrb	r0, [r3, #0]
    fdd0:	47a8      	blx	r5
    fdd2:	0023      	movs	r3, r4
    fdd4:	33e6      	adds	r3, #230	; 0xe6
    fdd6:	7818      	ldrb	r0, [r3, #0]
    fdd8:	47a8      	blx	r5
    fdda:	0023      	movs	r3, r4
    fddc:	33e9      	adds	r3, #233	; 0xe9
    fdde:	7818      	ldrb	r0, [r3, #0]
    fde0:	47a8      	blx	r5
    fde2:	0023      	movs	r3, r4
    fde4:	33f2      	adds	r3, #242	; 0xf2
    fde6:	7818      	ldrb	r0, [r3, #0]
    fde8:	47a8      	blx	r5
    fdea:	0023      	movs	r3, r4
    fdec:	33f3      	adds	r3, #243	; 0xf3
    fdee:	7818      	ldrb	r0, [r3, #0]
    fdf0:	34ff      	adds	r4, #255	; 0xff
    fdf2:	47a8      	blx	r5
    fdf4:	7f60      	ldrb	r0, [r4, #29]
    fdf6:	47a8      	blx	r5
    fdf8:	bd70      	pop	{r4, r5, r6, pc}
    fdfa:	46c0      	nop			; (mov r8, r8)
    fdfc:	20002b5c 	.word	0x20002b5c
    fe00:	0000f0b9 	.word	0x0000f0b9

0000fe04 <LorawanGetMaxPayloadSize>:
    fe04:	b513      	push	{r0, r1, r4, lr}
    fe06:	466b      	mov	r3, sp
    fe08:	1ddc      	adds	r4, r3, #7
    fe0a:	2300      	movs	r3, #0
    fe0c:	0022      	movs	r2, r4
    fe0e:	7023      	strb	r3, [r4, #0]
    fe10:	4902      	ldr	r1, [pc, #8]	; (fe1c <LorawanGetMaxPayloadSize+0x18>)
    fe12:	4b03      	ldr	r3, [pc, #12]	; (fe20 <LorawanGetMaxPayloadSize+0x1c>)
    fe14:	2005      	movs	r0, #5
    fe16:	4798      	blx	r3
    fe18:	7820      	ldrb	r0, [r4, #0]
    fe1a:	bd16      	pop	{r1, r2, r4, pc}
    fe1c:	20002c3b 	.word	0x20002c3b
    fe20:	0000d895 	.word	0x0000d895

0000fe24 <UpdateReceiveDelays>:
    fe24:	23fa      	movs	r3, #250	; 0xfa
    fe26:	b570      	push	{r4, r5, r6, lr}
    fe28:	009b      	lsls	r3, r3, #2
    fe2a:	4c0b      	ldr	r4, [pc, #44]	; (fe58 <UpdateReceiveDelays+0x34>)
    fe2c:	2800      	cmp	r0, #0
    fe2e:	d000      	beq.n	fe32 <UpdateReceiveDelays+0xe>
    fe30:	4343      	muls	r3, r0
    fe32:	0022      	movs	r2, r4
    fe34:	4d09      	ldr	r5, [pc, #36]	; (fe5c <UpdateReceiveDelays+0x38>)
    fe36:	32c8      	adds	r2, #200	; 0xc8
    fe38:	210c      	movs	r1, #12
    fe3a:	2000      	movs	r0, #0
    fe3c:	8013      	strh	r3, [r2, #0]
    fe3e:	47a8      	blx	r5
    fe40:	0023      	movs	r3, r4
    fe42:	22fa      	movs	r2, #250	; 0xfa
    fe44:	33c8      	adds	r3, #200	; 0xc8
    fe46:	881b      	ldrh	r3, [r3, #0]
    fe48:	0092      	lsls	r2, r2, #2
    fe4a:	189b      	adds	r3, r3, r2
    fe4c:	34ca      	adds	r4, #202	; 0xca
    fe4e:	210d      	movs	r1, #13
    fe50:	2000      	movs	r0, #0
    fe52:	8023      	strh	r3, [r4, #0]
    fe54:	47a8      	blx	r5
    fe56:	bd70      	pop	{r4, r5, r6, pc}
    fe58:	20002b5c 	.word	0x20002b5c
    fe5c:	0000e071 	.word	0x0000e071

0000fe60 <IncludeMacCommandsResponse>:
    fe60:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe62:	0005      	movs	r5, r0
    fe64:	2600      	movs	r6, #0
    fe66:	b087      	sub	sp, #28
    fe68:	880c      	ldrh	r4, [r1, #0]
    fe6a:	9101      	str	r1, [sp, #4]
    fe6c:	9203      	str	r2, [sp, #12]
    fe6e:	4f77      	ldr	r7, [pc, #476]	; (1004c <IncludeMacCommandsResponse+0x1ec>)
    fe70:	003b      	movs	r3, r7
    fe72:	33d8      	adds	r3, #216	; 0xd8
    fe74:	781b      	ldrb	r3, [r3, #0]
    fe76:	42b3      	cmp	r3, r6
    fe78:	d913      	bls.n	fea2 <IncludeMacCommandsResponse+0x42>
    fe7a:	9b03      	ldr	r3, [sp, #12]
    fe7c:	2b00      	cmp	r3, #0
    fe7e:	d019      	beq.n	feb4 <IncludeMacCommandsResponse+0x54>
    fe80:	2303      	movs	r3, #3
    fe82:	4373      	muls	r3, r6
    fe84:	18fb      	adds	r3, r7, r3
    fe86:	3391      	adds	r3, #145	; 0x91
    fe88:	7819      	ldrb	r1, [r3, #0]
    fe8a:	29ff      	cmp	r1, #255	; 0xff
    fe8c:	d012      	beq.n	feb4 <IncludeMacCommandsResponse+0x54>
    fe8e:	9b01      	ldr	r3, [sp, #4]
    fe90:	881a      	ldrh	r2, [r3, #0]
    fe92:	4b6f      	ldr	r3, [pc, #444]	; (10050 <IncludeMacCommandsResponse+0x1f0>)
    fe94:	1aa2      	subs	r2, r4, r2
    fe96:	185b      	adds	r3, r3, r1
    fe98:	3b02      	subs	r3, #2
    fe9a:	781b      	ldrb	r3, [r3, #0]
    fe9c:	18d3      	adds	r3, r2, r3
    fe9e:	2b0f      	cmp	r3, #15
    fea0:	dd08      	ble.n	feb4 <IncludeMacCommandsResponse+0x54>
    fea2:	2207      	movs	r2, #7
    fea4:	2100      	movs	r1, #0
    fea6:	4b6b      	ldr	r3, [pc, #428]	; (10054 <IncludeMacCommandsResponse+0x1f4>)
    fea8:	486b      	ldr	r0, [pc, #428]	; (10058 <IncludeMacCommandsResponse+0x1f8>)
    feaa:	4798      	blx	r3
    feac:	9b01      	ldr	r3, [sp, #4]
    feae:	801c      	strh	r4, [r3, #0]
    feb0:	b007      	add	sp, #28
    feb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    feb4:	2303      	movs	r3, #3
    feb6:	4373      	muls	r3, r6
    feb8:	18fb      	adds	r3, r7, r3
    feba:	3391      	adds	r3, #145	; 0x91
    febc:	781b      	ldrb	r3, [r3, #0]
    febe:	1e98      	subs	r0, r3, #2
    fec0:	280b      	cmp	r0, #11
    fec2:	d862      	bhi.n	ff8a <IncludeMacCommandsResponse+0x12a>
    fec4:	f006 fb64 	bl	16590 <__gnu_thumb1_case_uqi>
    fec8:	27a20698 	.word	0x27a20698
    fecc:	7da26748 	.word	0x7da26748
    fed0:	a6616182 	.word	0xa6616182
    fed4:	2303      	movs	r3, #3
    fed6:	2200      	movs	r2, #0
    fed8:	552b      	strb	r3, [r5, r4]
    feda:	1c63      	adds	r3, r4, #1
    fedc:	b29b      	uxth	r3, r3
    fede:	18eb      	adds	r3, r5, r3
    fee0:	4f5a      	ldr	r7, [pc, #360]	; (1004c <IncludeMacCommandsResponse+0x1ec>)
    fee2:	485e      	ldr	r0, [pc, #376]	; (1005c <IncludeMacCommandsResponse+0x1fc>)
    fee4:	701a      	strb	r2, [r3, #0]
    fee6:	5c39      	ldrb	r1, [r7, r0]
    fee8:	3201      	adds	r2, #1
    feea:	4011      	ands	r1, r2
    feec:	466a      	mov	r2, sp
    feee:	9102      	str	r1, [sp, #8]
    fef0:	7a12      	ldrb	r2, [r2, #8]
    fef2:	701a      	strb	r2, [r3, #0]
    fef4:	5c3a      	ldrb	r2, [r7, r0]
    fef6:	4694      	mov	ip, r2
    fef8:	2202      	movs	r2, #2
    fefa:	4661      	mov	r1, ip
    fefc:	4211      	tst	r1, r2
    fefe:	d002      	beq.n	ff06 <IncludeMacCommandsResponse+0xa6>
    ff00:	9902      	ldr	r1, [sp, #8]
    ff02:	430a      	orrs	r2, r1
    ff04:	701a      	strb	r2, [r3, #0]
    ff06:	2204      	movs	r2, #4
    ff08:	5c39      	ldrb	r1, [r7, r0]
    ff0a:	4211      	tst	r1, r2
    ff0c:	d071      	beq.n	fff2 <IncludeMacCommandsResponse+0x192>
    ff0e:	7819      	ldrb	r1, [r3, #0]
    ff10:	430a      	orrs	r2, r1
    ff12:	701a      	strb	r2, [r3, #0]
    ff14:	e06d      	b.n	fff2 <IncludeMacCommandsResponse+0x192>
    ff16:	2305      	movs	r3, #5
    ff18:	2103      	movs	r1, #3
    ff1a:	2200      	movs	r2, #0
    ff1c:	552b      	strb	r3, [r5, r4]
    ff1e:	1c63      	adds	r3, r4, #1
    ff20:	b29b      	uxth	r3, r3
    ff22:	4371      	muls	r1, r6
    ff24:	18eb      	adds	r3, r5, r3
    ff26:	701a      	strb	r2, [r3, #0]
    ff28:	4a48      	ldr	r2, [pc, #288]	; (1004c <IncludeMacCommandsResponse+0x1ec>)
    ff2a:	1851      	adds	r1, r2, r1
    ff2c:	3190      	adds	r1, #144	; 0x90
    ff2e:	7888      	ldrb	r0, [r1, #2]
    ff30:	0700      	lsls	r0, r0, #28
    ff32:	0fc0      	lsrs	r0, r0, #31
    ff34:	7018      	strb	r0, [r3, #0]
    ff36:	7889      	ldrb	r1, [r1, #2]
    ff38:	b2c7      	uxtb	r7, r0
    ff3a:	06c9      	lsls	r1, r1, #27
    ff3c:	d502      	bpl.n	ff44 <IncludeMacCommandsResponse+0xe4>
    ff3e:	2102      	movs	r1, #2
    ff40:	4339      	orrs	r1, r7
    ff42:	7019      	strb	r1, [r3, #0]
    ff44:	2103      	movs	r1, #3
    ff46:	4371      	muls	r1, r6
    ff48:	1852      	adds	r2, r2, r1
    ff4a:	3290      	adds	r2, #144	; 0x90
    ff4c:	7892      	ldrb	r2, [r2, #2]
    ff4e:	0692      	lsls	r2, r2, #26
    ff50:	d54f      	bpl.n	fff2 <IncludeMacCommandsResponse+0x192>
    ff52:	7819      	ldrb	r1, [r3, #0]
    ff54:	2204      	movs	r2, #4
    ff56:	e7db      	b.n	ff10 <IncludeMacCommandsResponse+0xb0>
    ff58:	a904      	add	r1, sp, #16
    ff5a:	4b41      	ldr	r3, [pc, #260]	; (10060 <IncludeMacCommandsResponse+0x200>)
    ff5c:	200e      	movs	r0, #14
    ff5e:	4798      	blx	r3
    ff60:	2306      	movs	r3, #6
    ff62:	4a3a      	ldr	r2, [pc, #232]	; (1004c <IncludeMacCommandsResponse+0x1ec>)
    ff64:	552b      	strb	r3, [r5, r4]
    ff66:	32e0      	adds	r2, #224	; 0xe0
    ff68:	7811      	ldrb	r1, [r2, #0]
    ff6a:	1c62      	adds	r2, r4, #1
    ff6c:	b292      	uxth	r2, r2
    ff6e:	54a9      	strb	r1, [r5, r2]
    ff70:	aa04      	add	r2, sp, #16
    ff72:	7812      	ldrb	r2, [r2, #0]
    ff74:	1ca3      	adds	r3, r4, #2
    ff76:	0011      	movs	r1, r2
    ff78:	3120      	adds	r1, #32
    ff7a:	3403      	adds	r4, #3
    ff7c:	b2c9      	uxtb	r1, r1
    ff7e:	b29b      	uxth	r3, r3
    ff80:	b2a4      	uxth	r4, r4
    ff82:	293f      	cmp	r1, #63	; 0x3f
    ff84:	d904      	bls.n	ff90 <IncludeMacCommandsResponse+0x130>
    ff86:	2220      	movs	r2, #32
    ff88:	54ea      	strb	r2, [r5, r3]
    ff8a:	3601      	adds	r6, #1
    ff8c:	b2f6      	uxtb	r6, r6
    ff8e:	e76e      	b.n	fe6e <IncludeMacCommandsResponse+0xe>
    ff90:	213f      	movs	r1, #63	; 0x3f
    ff92:	400a      	ands	r2, r1
    ff94:	e7f8      	b.n	ff88 <IncludeMacCommandsResponse+0x128>
    ff96:	2307      	movs	r3, #7
    ff98:	2103      	movs	r1, #3
    ff9a:	2200      	movs	r2, #0
    ff9c:	552b      	strb	r3, [r5, r4]
    ff9e:	1c63      	adds	r3, r4, #1
    ffa0:	4371      	muls	r1, r6
    ffa2:	b29b      	uxth	r3, r3
    ffa4:	18eb      	adds	r3, r5, r3
    ffa6:	701a      	strb	r2, [r3, #0]
    ffa8:	4a28      	ldr	r2, [pc, #160]	; (1004c <IncludeMacCommandsResponse+0x1ec>)
    ffaa:	1852      	adds	r2, r2, r1
    ffac:	3290      	adds	r2, #144	; 0x90
    ffae:	7891      	ldrb	r1, [r2, #2]
    ffb0:	09c9      	lsrs	r1, r1, #7
    ffb2:	7019      	strb	r1, [r3, #0]
    ffb4:	7892      	ldrb	r2, [r2, #2]
    ffb6:	b2c8      	uxtb	r0, r1
    ffb8:	0652      	lsls	r2, r2, #25
    ffba:	d51a      	bpl.n	fff2 <IncludeMacCommandsResponse+0x192>
    ffbc:	2202      	movs	r2, #2
    ffbe:	4302      	orrs	r2, r0
    ffc0:	e7a7      	b.n	ff12 <IncludeMacCommandsResponse+0xb2>
    ffc2:	2209      	movs	r2, #9
    ffc4:	1c63      	adds	r3, r4, #1
    ffc6:	552a      	strb	r2, [r5, r4]
    ffc8:	b29c      	uxth	r4, r3
    ffca:	e7de      	b.n	ff8a <IncludeMacCommandsResponse+0x12a>
    ffcc:	230a      	movs	r3, #10
    ffce:	2103      	movs	r1, #3
    ffd0:	2200      	movs	r2, #0
    ffd2:	552b      	strb	r3, [r5, r4]
    ffd4:	1c63      	adds	r3, r4, #1
    ffd6:	4371      	muls	r1, r6
    ffd8:	b29b      	uxth	r3, r3
    ffda:	18eb      	adds	r3, r5, r3
    ffdc:	701a      	strb	r2, [r3, #0]
    ffde:	4a1b      	ldr	r2, [pc, #108]	; (1004c <IncludeMacCommandsResponse+0x1ec>)
    ffe0:	1852      	adds	r2, r2, r1
    ffe2:	3290      	adds	r2, #144	; 0x90
    ffe4:	7891      	ldrb	r1, [r2, #2]
    ffe6:	09c9      	lsrs	r1, r1, #7
    ffe8:	7019      	strb	r1, [r3, #0]
    ffea:	78d2      	ldrb	r2, [r2, #3]
    ffec:	b2c8      	uxtb	r0, r1
    ffee:	07d2      	lsls	r2, r2, #31
    fff0:	d4e4      	bmi.n	ffbc <IncludeMacCommandsResponse+0x15c>
    fff2:	3402      	adds	r4, #2
    fff4:	b2a4      	uxth	r4, r4
    fff6:	e7c8      	b.n	ff8a <IncludeMacCommandsResponse+0x12a>
    fff8:	003b      	movs	r3, r7
    fffa:	22ff      	movs	r2, #255	; 0xff
    fffc:	33dd      	adds	r3, #221	; 0xdd
    fffe:	701a      	strb	r2, [r3, #0]
   10000:	2300      	movs	r3, #0
   10002:	37de      	adds	r7, #222	; 0xde
   10004:	703b      	strb	r3, [r7, #0]
   10006:	3afd      	subs	r2, #253	; 0xfd
   10008:	1c63      	adds	r3, r4, #1
   1000a:	e7dc      	b.n	ffc6 <IncludeMacCommandsResponse+0x166>
   1000c:	1c62      	adds	r2, r4, #1
   1000e:	552b      	strb	r3, [r5, r4]
   10010:	b294      	uxth	r4, r2
   10012:	e7ba      	b.n	ff8a <IncludeMacCommandsResponse+0x12a>
   10014:	2201      	movs	r2, #1
   10016:	4252      	negs	r2, r2
   10018:	17d3      	asrs	r3, r2, #31
   1001a:	9204      	str	r2, [sp, #16]
   1001c:	9305      	str	r3, [sp, #20]
   1001e:	4b11      	ldr	r3, [pc, #68]	; (10064 <IncludeMacCommandsResponse+0x204>)
   10020:	a904      	add	r1, sp, #16
   10022:	5cf8      	ldrb	r0, [r7, r3]
   10024:	4b10      	ldr	r3, [pc, #64]	; (10068 <IncludeMacCommandsResponse+0x208>)
   10026:	4798      	blx	r3
   10028:	2301      	movs	r3, #1
   1002a:	228a      	movs	r2, #138	; 0x8a
   1002c:	425b      	negs	r3, r3
   1002e:	0092      	lsls	r2, r2, #2
   10030:	50bb      	str	r3, [r7, r2]
   10032:	3204      	adds	r2, #4
   10034:	54bb      	strb	r3, [r7, r2]
   10036:	2389      	movs	r3, #137	; 0x89
   10038:	2201      	movs	r2, #1
   1003a:	009b      	lsls	r3, r3, #2
   1003c:	54fa      	strb	r2, [r7, r3]
   1003e:	2303      	movs	r3, #3
   10040:	4373      	muls	r3, r6
   10042:	18ff      	adds	r7, r7, r3
   10044:	3791      	adds	r7, #145	; 0x91
   10046:	18a2      	adds	r2, r4, r2
   10048:	783b      	ldrb	r3, [r7, #0]
   1004a:	e7e0      	b.n	1000e <IncludeMacCommandsResponse+0x1ae>
   1004c:	20002b5c 	.word	0x20002b5c
   10050:	0002023b 	.word	0x0002023b
   10054:	00019e41 	.word	0x00019e41
   10058:	20002d73 	.word	0x20002d73
   1005c:	00000217 	.word	0x00000217
   10060:	00014af1 	.word	0x00014af1
   10064:	00000225 	.word	0x00000225
   10068:	0000f3a5 	.word	0x0000f3a5

0001006c <UpdateJoinSuccessState>:
   1006c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1006e:	4c35      	ldr	r4, [pc, #212]	; (10144 <UpdateJoinSuccessState+0xd8>)
   10070:	2104      	movs	r1, #4
   10072:	0022      	movs	r2, r4
   10074:	328c      	adds	r2, #140	; 0x8c
   10076:	7813      	ldrb	r3, [r2, #0]
   10078:	2001      	movs	r0, #1
   1007a:	438b      	bics	r3, r1
   1007c:	7013      	strb	r3, [r2, #0]
   1007e:	0022      	movs	r2, r4
   10080:	2500      	movs	r5, #0
   10082:	327c      	adds	r2, #124	; 0x7c
   10084:	7813      	ldrb	r3, [r2, #0]
   10086:	b087      	sub	sp, #28
   10088:	4303      	orrs	r3, r0
   1008a:	3107      	adds	r1, #7
   1008c:	4f2e      	ldr	r7, [pc, #184]	; (10148 <UpdateJoinSuccessState+0xdc>)
   1008e:	7013      	strb	r3, [r2, #0]
   10090:	47b8      	blx	r7
   10092:	1d23      	adds	r3, r4, #4
   10094:	2116      	movs	r1, #22
   10096:	0028      	movs	r0, r5
   10098:	67dd      	str	r5, [r3, #124]	; 0x7c
   1009a:	47b8      	blx	r7
   1009c:	0023      	movs	r3, r4
   1009e:	2020      	movs	r0, #32
   100a0:	33ff      	adds	r3, #255	; 0xff
   100a2:	7c5b      	ldrb	r3, [r3, #17]
   100a4:	4e29      	ldr	r6, [pc, #164]	; (1014c <UpdateJoinSuccessState+0xe0>)
   100a6:	4203      	tst	r3, r0
   100a8:	d014      	beq.n	100d4 <UpdateJoinSuccessState+0x68>
   100aa:	0023      	movs	r3, r4
   100ac:	337b      	adds	r3, #123	; 0x7b
   100ae:	701d      	strb	r5, [r3, #0]
   100b0:	0023      	movs	r3, r4
   100b2:	a904      	add	r1, sp, #16
   100b4:	336f      	adds	r3, #111	; 0x6f
   100b6:	710d      	strb	r5, [r1, #4]
   100b8:	701d      	strb	r5, [r3, #0]
   100ba:	705d      	strb	r5, [r3, #1]
   100bc:	709d      	strb	r5, [r3, #2]
   100be:	70dd      	strb	r5, [r3, #3]
   100c0:	711d      	strb	r5, [r3, #4]
   100c2:	715d      	strb	r5, [r3, #5]
   100c4:	719d      	strb	r5, [r3, #6]
   100c6:	71dd      	strb	r5, [r3, #7]
   100c8:	47b0      	blx	r6
   100ca:	210f      	movs	r1, #15
   100cc:	2021      	movs	r0, #33	; 0x21
   100ce:	4469      	add	r1, sp
   100d0:	700d      	strb	r5, [r1, #0]
   100d2:	47b0      	blx	r6
   100d4:	0023      	movs	r3, r4
   100d6:	2500      	movs	r5, #0
   100d8:	3308      	adds	r3, #8
   100da:	210a      	movs	r1, #10
   100dc:	2001      	movs	r0, #1
   100de:	67dd      	str	r5, [r3, #124]	; 0x7c
   100e0:	47b8      	blx	r7
   100e2:	0023      	movs	r3, r4
   100e4:	33c2      	adds	r3, #194	; 0xc2
   100e6:	801d      	strh	r5, [r3, #0]
   100e8:	0022      	movs	r2, r4
   100ea:	0023      	movs	r3, r4
   100ec:	210e      	movs	r1, #14
   100ee:	327c      	adds	r2, #124	; 0x7c
   100f0:	33ed      	adds	r3, #237	; 0xed
   100f2:	701d      	strb	r5, [r3, #0]
   100f4:	7813      	ldrb	r3, [r2, #0]
   100f6:	203a      	movs	r0, #58	; 0x3a
   100f8:	438b      	bics	r3, r1
   100fa:	0029      	movs	r1, r5
   100fc:	7013      	strb	r3, [r2, #0]
   100fe:	47b0      	blx	r6
   10100:	0023      	movs	r3, r4
   10102:	337d      	adds	r3, #125	; 0x7d
   10104:	781b      	ldrb	r3, [r3, #0]
   10106:	079b      	lsls	r3, r3, #30
   10108:	d50c      	bpl.n	10124 <UpdateJoinSuccessState+0xb8>
   1010a:	0023      	movs	r3, r4
   1010c:	21fa      	movs	r1, #250	; 0xfa
   1010e:	3388      	adds	r3, #136	; 0x88
   10110:	681b      	ldr	r3, [r3, #0]
   10112:	34e7      	adds	r4, #231	; 0xe7
   10114:	0089      	lsls	r1, r1, #2
   10116:	7820      	ldrb	r0, [r4, #0]
   10118:	4359      	muls	r1, r3
   1011a:	9500      	str	r5, [sp, #0]
   1011c:	4b0c      	ldr	r3, [pc, #48]	; (10150 <UpdateJoinSuccessState+0xe4>)
   1011e:	002a      	movs	r2, r5
   10120:	4c0c      	ldr	r4, [pc, #48]	; (10154 <UpdateJoinSuccessState+0xe8>)
   10122:	47a0      	blx	r4
   10124:	490c      	ldr	r1, [pc, #48]	; (10158 <UpdateJoinSuccessState+0xec>)
   10126:	794a      	ldrb	r2, [r1, #5]
   10128:	790b      	ldrb	r3, [r1, #4]
   1012a:	0212      	lsls	r2, r2, #8
   1012c:	431a      	orrs	r2, r3
   1012e:	798b      	ldrb	r3, [r1, #6]
   10130:	041b      	lsls	r3, r3, #16
   10132:	431a      	orrs	r2, r3
   10134:	79cb      	ldrb	r3, [r1, #7]
   10136:	061b      	lsls	r3, r3, #24
   10138:	4313      	orrs	r3, r2
   1013a:	d001      	beq.n	10140 <UpdateJoinSuccessState+0xd4>
   1013c:	2008      	movs	r0, #8
   1013e:	4798      	blx	r3
   10140:	b007      	add	sp, #28
   10142:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10144:	20002b5c 	.word	0x20002b5c
   10148:	0000e071 	.word	0x0000e071
   1014c:	0000d9bd 	.word	0x0000d9bd
   10150:	00010299 	.word	0x00010299
   10154:	0000eda1 	.word	0x0000eda1
   10158:	20002ea4 	.word	0x20002ea4

0001015c <PrepareSessionKeys>:
   1015c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1015e:	0004      	movs	r4, r0
   10160:	2603      	movs	r6, #3
   10162:	000d      	movs	r5, r1
   10164:	0017      	movs	r7, r2
   10166:	4b09      	ldr	r3, [pc, #36]	; (1018c <PrepareSessionKeys+0x30>)
   10168:	2210      	movs	r2, #16
   1016a:	2100      	movs	r1, #0
   1016c:	4798      	blx	r3
   1016e:	0032      	movs	r2, r6
   10170:	0029      	movs	r1, r5
   10172:	1c60      	adds	r0, r4, #1
   10174:	4d06      	ldr	r5, [pc, #24]	; (10190 <PrepareSessionKeys+0x34>)
   10176:	47a8      	blx	r5
   10178:	0032      	movs	r2, r6
   1017a:	0039      	movs	r1, r7
   1017c:	1d20      	adds	r0, r4, #4
   1017e:	47a8      	blx	r5
   10180:	1de0      	adds	r0, r4, #7
   10182:	2202      	movs	r2, #2
   10184:	4903      	ldr	r1, [pc, #12]	; (10194 <PrepareSessionKeys+0x38>)
   10186:	47a8      	blx	r5
   10188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1018a:	46c0      	nop			; (mov r8, r8)
   1018c:	00019e41 	.word	0x00019e41
   10190:	00019d1d 	.word	0x00019d1d
   10194:	20002c20 	.word	0x20002c20

00010198 <AssembleEncryptionBlock>:
   10198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1019a:	001e      	movs	r6, r3
   1019c:	4c0b      	ldr	r4, [pc, #44]	; (101cc <AssembleEncryptionBlock+0x34>)
   1019e:	0017      	movs	r7, r2
   101a0:	4b0b      	ldr	r3, [pc, #44]	; (101d0 <AssembleEncryptionBlock+0x38>)
   101a2:	0005      	movs	r5, r0
   101a4:	9101      	str	r1, [sp, #4]
   101a6:	2210      	movs	r2, #16
   101a8:	2100      	movs	r1, #0
   101aa:	0020      	movs	r0, r4
   101ac:	4798      	blx	r3
   101ae:	7026      	strb	r6, [r4, #0]
   101b0:	2604      	movs	r6, #4
   101b2:	7165      	strb	r5, [r4, #5]
   101b4:	0032      	movs	r2, r6
   101b6:	4d07      	ldr	r5, [pc, #28]	; (101d4 <AssembleEncryptionBlock+0x3c>)
   101b8:	a908      	add	r1, sp, #32
   101ba:	1da0      	adds	r0, r4, #6
   101bc:	47a8      	blx	r5
   101be:	0020      	movs	r0, r4
   101c0:	0032      	movs	r2, r6
   101c2:	a901      	add	r1, sp, #4
   101c4:	300a      	adds	r0, #10
   101c6:	47a8      	blx	r5
   101c8:	73e7      	strb	r7, [r4, #15]
   101ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   101cc:	20001110 	.word	0x20001110
   101d0:	00019e41 	.word	0x00019e41
   101d4:	00019d1d 	.word	0x00019d1d

000101d8 <ConfigureRadio>:
   101d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   101da:	0001      	movs	r1, r0
   101dc:	0005      	movs	r5, r0
   101de:	4c11      	ldr	r4, [pc, #68]	; (10224 <ConfigureRadio+0x4c>)
   101e0:	3109      	adds	r1, #9
   101e2:	2009      	movs	r0, #9
   101e4:	47a0      	blx	r4
   101e6:	0029      	movs	r1, r5
   101e8:	2001      	movs	r0, #1
   101ea:	47a0      	blx	r4
   101ec:	1d29      	adds	r1, r5, #4
   101ee:	200a      	movs	r0, #10
   101f0:	47a0      	blx	r4
   101f2:	7a6b      	ldrb	r3, [r5, #9]
   101f4:	2b01      	cmp	r3, #1
   101f6:	d10b      	bne.n	10210 <ConfigureRadio+0x38>
   101f8:	0029      	movs	r1, r5
   101fa:	2016      	movs	r0, #22
   101fc:	310b      	adds	r1, #11
   101fe:	47a0      	blx	r4
   10200:	0029      	movs	r1, r5
   10202:	2007      	movs	r0, #7
   10204:	310a      	adds	r1, #10
   10206:	47a0      	blx	r4
   10208:	2000      	movs	r0, #0
   1020a:	4907      	ldr	r1, [pc, #28]	; (10228 <ConfigureRadio+0x50>)
   1020c:	47a0      	blx	r4
   1020e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10210:	466b      	mov	r3, sp
   10212:	1dd9      	adds	r1, r3, #7
   10214:	2303      	movs	r3, #3
   10216:	2013      	movs	r0, #19
   10218:	700b      	strb	r3, [r1, #0]
   1021a:	47a0      	blx	r4
   1021c:	4903      	ldr	r1, [pc, #12]	; (1022c <ConfigureRadio+0x54>)
   1021e:	2012      	movs	r0, #18
   10220:	e7f4      	b.n	1020c <ConfigureRadio+0x34>
   10222:	46c0      	nop			; (mov r8, r8)
   10224:	00014be1 	.word	0x00014be1
   10228:	20002c53 	.word	0x20002c53
   1022c:	00020238 	.word	0x00020238

00010230 <StopReceiveWindow2Timer>:
   10230:	b510      	push	{r4, lr}
   10232:	4c0b      	ldr	r4, [pc, #44]	; (10260 <StopReceiveWindow2Timer+0x30>)
   10234:	0022      	movs	r2, r4
   10236:	32f4      	adds	r2, #244	; 0xf4
   10238:	7812      	ldrb	r2, [r2, #0]
   1023a:	2a01      	cmp	r2, #1
   1023c:	d10e      	bne.n	1025c <StopReceiveWindow2Timer+0x2c>
   1023e:	0021      	movs	r1, r4
   10240:	200e      	movs	r0, #14
   10242:	317c      	adds	r1, #124	; 0x7c
   10244:	780a      	ldrb	r2, [r1, #0]
   10246:	34e5      	adds	r4, #229	; 0xe5
   10248:	4382      	bics	r2, r0
   1024a:	700a      	strb	r2, [r1, #0]
   1024c:	7820      	ldrb	r0, [r4, #0]
   1024e:	4b05      	ldr	r3, [pc, #20]	; (10264 <StopReceiveWindow2Timer+0x34>)
   10250:	4798      	blx	r3
   10252:	2800      	cmp	r0, #0
   10254:	d002      	beq.n	1025c <StopReceiveWindow2Timer+0x2c>
   10256:	7820      	ldrb	r0, [r4, #0]
   10258:	4b03      	ldr	r3, [pc, #12]	; (10268 <StopReceiveWindow2Timer+0x38>)
   1025a:	4798      	blx	r3
   1025c:	bd10      	pop	{r4, pc}
   1025e:	46c0      	nop			; (mov r8, r8)
   10260:	20002b5c 	.word	0x20002b5c
   10264:	0000ef39 	.word	0x0000ef39
   10268:	0000f0b9 	.word	0x0000f0b9

0001026c <LorawanLinkCheckCallback.part.1>:
   1026c:	4b07      	ldr	r3, [pc, #28]	; (1028c <LorawanLinkCheckCallback.part.1+0x20>)
   1026e:	b513      	push	{r0, r1, r4, lr}
   10270:	001a      	movs	r2, r3
   10272:	21fa      	movs	r1, #250	; 0xfa
   10274:	3288      	adds	r2, #136	; 0x88
   10276:	6812      	ldr	r2, [r2, #0]
   10278:	0089      	lsls	r1, r1, #2
   1027a:	4351      	muls	r1, r2
   1027c:	2200      	movs	r2, #0
   1027e:	33e7      	adds	r3, #231	; 0xe7
   10280:	7818      	ldrb	r0, [r3, #0]
   10282:	4c03      	ldr	r4, [pc, #12]	; (10290 <LorawanLinkCheckCallback.part.1+0x24>)
   10284:	9200      	str	r2, [sp, #0]
   10286:	4b03      	ldr	r3, [pc, #12]	; (10294 <LorawanLinkCheckCallback.part.1+0x28>)
   10288:	47a0      	blx	r4
   1028a:	bd13      	pop	{r0, r1, r4, pc}
   1028c:	20002b5c 	.word	0x20002b5c
   10290:	0000eda1 	.word	0x0000eda1
   10294:	00010299 	.word	0x00010299

00010298 <LorawanLinkCheckCallback>:
   10298:	4b17      	ldr	r3, [pc, #92]	; (102f8 <LorawanLinkCheckCallback+0x60>)
   1029a:	20a0      	movs	r0, #160	; 0xa0
   1029c:	001a      	movs	r2, r3
   1029e:	2180      	movs	r1, #128	; 0x80
   102a0:	b510      	push	{r4, lr}
   102a2:	327c      	adds	r2, #124	; 0x7c
   102a4:	8812      	ldrh	r2, [r2, #0]
   102a6:	0080      	lsls	r0, r0, #2
   102a8:	0089      	lsls	r1, r1, #2
   102aa:	4002      	ands	r2, r0
   102ac:	428a      	cmp	r2, r1
   102ae:	d11c      	bne.n	102ea <LorawanLinkCheckCallback+0x52>
   102b0:	001a      	movs	r2, r3
   102b2:	32d8      	adds	r2, #216	; 0xd8
   102b4:	7810      	ldrb	r0, [r2, #0]
   102b6:	2403      	movs	r4, #3
   102b8:	2200      	movs	r2, #0
   102ba:	b2d1      	uxtb	r1, r2
   102bc:	4281      	cmp	r1, r0
   102be:	d30d      	bcc.n	102dc <LorawanLinkCheckCallback+0x44>
   102c0:	d113      	bne.n	102ea <LorawanLinkCheckCallback+0x52>
   102c2:	2203      	movs	r2, #3
   102c4:	434a      	muls	r2, r1
   102c6:	2102      	movs	r1, #2
   102c8:	189a      	adds	r2, r3, r2
   102ca:	3291      	adds	r2, #145	; 0x91
   102cc:	7011      	strb	r1, [r2, #0]
   102ce:	280f      	cmp	r0, #15
   102d0:	d80b      	bhi.n	102ea <LorawanLinkCheckCallback+0x52>
   102d2:	001a      	movs	r2, r3
   102d4:	3001      	adds	r0, #1
   102d6:	32d8      	adds	r2, #216	; 0xd8
   102d8:	7010      	strb	r0, [r2, #0]
   102da:	e006      	b.n	102ea <LorawanLinkCheckCallback+0x52>
   102dc:	0021      	movs	r1, r4
   102de:	3201      	adds	r2, #1
   102e0:	4351      	muls	r1, r2
   102e2:	318e      	adds	r1, #142	; 0x8e
   102e4:	5c59      	ldrb	r1, [r3, r1]
   102e6:	2902      	cmp	r1, #2
   102e8:	d1e7      	bne.n	102ba <LorawanLinkCheckCallback+0x22>
   102ea:	337d      	adds	r3, #125	; 0x7d
   102ec:	781b      	ldrb	r3, [r3, #0]
   102ee:	079b      	lsls	r3, r3, #30
   102f0:	d501      	bpl.n	102f6 <LorawanLinkCheckCallback+0x5e>
   102f2:	4b02      	ldr	r3, [pc, #8]	; (102fc <LorawanLinkCheckCallback+0x64>)
   102f4:	4798      	blx	r3
   102f6:	bd10      	pop	{r4, pc}
   102f8:	20002b5c 	.word	0x20002b5c
   102fc:	0001026d 	.word	0x0001026d

00010300 <LORAWAN_Init>:
   10300:	2270      	movs	r2, #112	; 0x70
   10302:	b5f0      	push	{r4, r5, r6, r7, lr}
   10304:	4b52      	ldr	r3, [pc, #328]	; (10450 <LORAWAN_Init+0x150>)
   10306:	b087      	sub	sp, #28
   10308:	781b      	ldrb	r3, [r3, #0]
   1030a:	0006      	movs	r6, r0
   1030c:	011b      	lsls	r3, r3, #4
   1030e:	4013      	ands	r3, r2
   10310:	4a50      	ldr	r2, [pc, #320]	; (10454 <LORAWAN_Init+0x154>)
   10312:	000f      	movs	r7, r1
   10314:	7812      	ldrb	r2, [r2, #0]
   10316:	0912      	lsrs	r2, r2, #4
   10318:	4313      	orrs	r3, r2
   1031a:	2b1f      	cmp	r3, #31
   1031c:	d000      	beq.n	10320 <LORAWAN_Init+0x20>
   1031e:	e7fe      	b.n	1031e <LORAWAN_Init+0x1e>
   10320:	4d4d      	ldr	r5, [pc, #308]	; (10458 <LORAWAN_Init+0x158>)
   10322:	002b      	movs	r3, r5
   10324:	33ef      	adds	r3, #239	; 0xef
   10326:	781b      	ldrb	r3, [r3, #0]
   10328:	2b00      	cmp	r3, #0
   1032a:	d000      	beq.n	1032e <LORAWAN_Init+0x2e>
   1032c:	e08c      	b.n	10448 <LORAWAN_Init+0x148>
   1032e:	484b      	ldr	r0, [pc, #300]	; (1045c <LORAWAN_Init+0x15c>)
   10330:	4c4b      	ldr	r4, [pc, #300]	; (10460 <LORAWAN_Init+0x160>)
   10332:	47a0      	blx	r4
   10334:	2808      	cmp	r0, #8
   10336:	d050      	beq.n	103da <LORAWAN_Init+0xda>
   10338:	4b4a      	ldr	r3, [pc, #296]	; (10464 <LORAWAN_Init+0x164>)
   1033a:	4798      	blx	r3
   1033c:	002b      	movs	r3, r5
   1033e:	33ef      	adds	r3, #239	; 0xef
   10340:	781b      	ldrb	r3, [r3, #0]
   10342:	2b00      	cmp	r3, #0
   10344:	d018      	beq.n	10378 <LORAWAN_Init+0x78>
   10346:	4b48      	ldr	r3, [pc, #288]	; (10468 <LORAWAN_Init+0x168>)
   10348:	0a32      	lsrs	r2, r6, #8
   1034a:	705a      	strb	r2, [r3, #1]
   1034c:	0c32      	lsrs	r2, r6, #16
   1034e:	709a      	strb	r2, [r3, #2]
   10350:	0a3a      	lsrs	r2, r7, #8
   10352:	701e      	strb	r6, [r3, #0]
   10354:	711f      	strb	r7, [r3, #4]
   10356:	715a      	strb	r2, [r3, #5]
   10358:	0e36      	lsrs	r6, r6, #24
   1035a:	0c3a      	lsrs	r2, r7, #16
   1035c:	0e3f      	lsrs	r7, r7, #24
   1035e:	719a      	strb	r2, [r3, #6]
   10360:	70de      	strb	r6, [r3, #3]
   10362:	71df      	strb	r7, [r3, #7]
   10364:	4b41      	ldr	r3, [pc, #260]	; (1046c <LORAWAN_Init+0x16c>)
   10366:	4798      	blx	r3
   10368:	4941      	ldr	r1, [pc, #260]	; (10470 <LORAWAN_Init+0x170>)
   1036a:	4b42      	ldr	r3, [pc, #264]	; (10474 <LORAWAN_Init+0x174>)
   1036c:	201a      	movs	r0, #26
   1036e:	4798      	blx	r3
   10370:	4b41      	ldr	r3, [pc, #260]	; (10478 <LORAWAN_Init+0x178>)
   10372:	4798      	blx	r3
   10374:	4b41      	ldr	r3, [pc, #260]	; (1047c <LORAWAN_Init+0x17c>)
   10376:	4798      	blx	r3
   10378:	2317      	movs	r3, #23
   1037a:	ac02      	add	r4, sp, #8
   1037c:	4a40      	ldr	r2, [pc, #256]	; (10480 <LORAWAN_Init+0x180>)
   1037e:	7123      	strb	r3, [r4, #4]
   10380:	4940      	ldr	r1, [pc, #256]	; (10484 <LORAWAN_Init+0x184>)
   10382:	4b41      	ldr	r3, [pc, #260]	; (10488 <LORAWAN_Init+0x188>)
   10384:	9205      	str	r2, [sp, #20]
   10386:	9200      	str	r2, [sp, #0]
   10388:	4e40      	ldr	r6, [pc, #256]	; (1048c <LORAWAN_Init+0x18c>)
   1038a:	9a03      	ldr	r2, [sp, #12]
   1038c:	2000      	movs	r0, #0
   1038e:	9102      	str	r1, [sp, #8]
   10390:	9304      	str	r3, [sp, #16]
   10392:	47b0      	blx	r6
   10394:	230f      	movs	r3, #15
   10396:	4a3e      	ldr	r2, [pc, #248]	; (10490 <LORAWAN_Init+0x190>)
   10398:	7123      	strb	r3, [r4, #4]
   1039a:	4b3e      	ldr	r3, [pc, #248]	; (10494 <LORAWAN_Init+0x194>)
   1039c:	60e2      	str	r2, [r4, #12]
   1039e:	60a3      	str	r3, [r4, #8]
   103a0:	493d      	ldr	r1, [pc, #244]	; (10498 <LORAWAN_Init+0x198>)
   103a2:	9200      	str	r2, [sp, #0]
   103a4:	6862      	ldr	r2, [r4, #4]
   103a6:	2001      	movs	r0, #1
   103a8:	9102      	str	r1, [sp, #8]
   103aa:	47b0      	blx	r6
   103ac:	2201      	movs	r2, #1
   103ae:	4252      	negs	r2, r2
   103b0:	17d3      	asrs	r3, r2, #31
   103b2:	9202      	str	r2, [sp, #8]
   103b4:	9303      	str	r3, [sp, #12]
   103b6:	4b39      	ldr	r3, [pc, #228]	; (1049c <LORAWAN_Init+0x19c>)
   103b8:	0021      	movs	r1, r4
   103ba:	5ce8      	ldrb	r0, [r5, r3]
   103bc:	4b38      	ldr	r3, [pc, #224]	; (104a0 <LORAWAN_Init+0x1a0>)
   103be:	4798      	blx	r3
   103c0:	238b      	movs	r3, #139	; 0x8b
   103c2:	22ff      	movs	r2, #255	; 0xff
   103c4:	009b      	lsls	r3, r3, #2
   103c6:	54ea      	strb	r2, [r5, r3]
   103c8:	3a01      	subs	r2, #1
   103ca:	3aff      	subs	r2, #255	; 0xff
   103cc:	3b04      	subs	r3, #4
   103ce:	50ea      	str	r2, [r5, r3]
   103d0:	2200      	movs	r2, #0
   103d2:	3b04      	subs	r3, #4
   103d4:	54ea      	strb	r2, [r5, r3]
   103d6:	b007      	add	sp, #28
   103d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   103da:	4832      	ldr	r0, [pc, #200]	; (104a4 <LORAWAN_Init+0x1a4>)
   103dc:	47a0      	blx	r4
   103de:	2808      	cmp	r0, #8
   103e0:	d1aa      	bne.n	10338 <LORAWAN_Init+0x38>
   103e2:	4831      	ldr	r0, [pc, #196]	; (104a8 <LORAWAN_Init+0x1a8>)
   103e4:	47a0      	blx	r4
   103e6:	2808      	cmp	r0, #8
   103e8:	d1a6      	bne.n	10338 <LORAWAN_Init+0x38>
   103ea:	4830      	ldr	r0, [pc, #192]	; (104ac <LORAWAN_Init+0x1ac>)
   103ec:	47a0      	blx	r4
   103ee:	2808      	cmp	r0, #8
   103f0:	d1a2      	bne.n	10338 <LORAWAN_Init+0x38>
   103f2:	482f      	ldr	r0, [pc, #188]	; (104b0 <LORAWAN_Init+0x1b0>)
   103f4:	47a0      	blx	r4
   103f6:	2808      	cmp	r0, #8
   103f8:	d19e      	bne.n	10338 <LORAWAN_Init+0x38>
   103fa:	482e      	ldr	r0, [pc, #184]	; (104b4 <LORAWAN_Init+0x1b4>)
   103fc:	47a0      	blx	r4
   103fe:	2808      	cmp	r0, #8
   10400:	d19a      	bne.n	10338 <LORAWAN_Init+0x38>
   10402:	482d      	ldr	r0, [pc, #180]	; (104b8 <LORAWAN_Init+0x1b8>)
   10404:	47a0      	blx	r4
   10406:	2808      	cmp	r0, #8
   10408:	d196      	bne.n	10338 <LORAWAN_Init+0x38>
   1040a:	482c      	ldr	r0, [pc, #176]	; (104bc <LORAWAN_Init+0x1bc>)
   1040c:	47a0      	blx	r4
   1040e:	2808      	cmp	r0, #8
   10410:	d000      	beq.n	10414 <LORAWAN_Init+0x114>
   10412:	e791      	b.n	10338 <LORAWAN_Init+0x38>
   10414:	482a      	ldr	r0, [pc, #168]	; (104c0 <LORAWAN_Init+0x1c0>)
   10416:	47a0      	blx	r4
   10418:	2808      	cmp	r0, #8
   1041a:	d000      	beq.n	1041e <LORAWAN_Init+0x11e>
   1041c:	e78c      	b.n	10338 <LORAWAN_Init+0x38>
   1041e:	4829      	ldr	r0, [pc, #164]	; (104c4 <LORAWAN_Init+0x1c4>)
   10420:	47a0      	blx	r4
   10422:	2808      	cmp	r0, #8
   10424:	d000      	beq.n	10428 <LORAWAN_Init+0x128>
   10426:	e787      	b.n	10338 <LORAWAN_Init+0x38>
   10428:	4827      	ldr	r0, [pc, #156]	; (104c8 <LORAWAN_Init+0x1c8>)
   1042a:	47a0      	blx	r4
   1042c:	2808      	cmp	r0, #8
   1042e:	d000      	beq.n	10432 <LORAWAN_Init+0x132>
   10430:	e782      	b.n	10338 <LORAWAN_Init+0x38>
   10432:	4826      	ldr	r0, [pc, #152]	; (104cc <LORAWAN_Init+0x1cc>)
   10434:	4b26      	ldr	r3, [pc, #152]	; (104d0 <LORAWAN_Init+0x1d0>)
   10436:	4798      	blx	r3
   10438:	2808      	cmp	r0, #8
   1043a:	d000      	beq.n	1043e <LORAWAN_Init+0x13e>
   1043c:	e77c      	b.n	10338 <LORAWAN_Init+0x38>
   1043e:	002b      	movs	r3, r5
   10440:	2201      	movs	r2, #1
   10442:	33ef      	adds	r3, #239	; 0xef
   10444:	701a      	strb	r2, [r3, #0]
   10446:	e779      	b.n	1033c <LORAWAN_Init+0x3c>
   10448:	4b22      	ldr	r3, [pc, #136]	; (104d4 <LORAWAN_Init+0x1d4>)
   1044a:	4798      	blx	r3
   1044c:	e776      	b.n	1033c <LORAWAN_Init+0x3c>
   1044e:	46c0      	nop			; (mov r8, r8)
   10450:	41003fe8 	.word	0x41003fe8
   10454:	41003fe4 	.word	0x41003fe4
   10458:	20002b5c 	.word	0x20002b5c
   1045c:	20002c3e 	.word	0x20002c3e
   10460:	0000ed6d 	.word	0x0000ed6d
   10464:	0000ecb1 	.word	0x0000ecb1
   10468:	20002ea4 	.word	0x20002ea4
   1046c:	00014ddd 	.word	0x00014ddd
   10470:	00012441 	.word	0x00012441
   10474:	00014be1 	.word	0x00014be1
   10478:	0000f5a1 	.word	0x0000f5a1
   1047c:	00019fcd 	.word	0x00019fcd
   10480:	00014785 	.word	0x00014785
   10484:	20002b43 	.word	0x20002b43
   10488:	00020258 	.word	0x00020258
   1048c:	0000e355 	.word	0x0000e355
   10490:	00014789 	.word	0x00014789
   10494:	00020310 	.word	0x00020310
   10498:	20002a34 	.word	0x20002a34
   1049c:	00000225 	.word	0x00000225
   104a0:	0000f3a5 	.word	0x0000f3a5
   104a4:	20002c3f 	.word	0x20002c3f
   104a8:	20002c40 	.word	0x20002c40
   104ac:	20002c41 	.word	0x20002c41
   104b0:	20002c43 	.word	0x20002c43
   104b4:	20002c44 	.word	0x20002c44
   104b8:	20002c42 	.word	0x20002c42
   104bc:	20002c45 	.word	0x20002c45
   104c0:	20002c4e 	.word	0x20002c4e
   104c4:	20002c4f 	.word	0x20002c4f
   104c8:	20002c78 	.word	0x20002c78
   104cc:	20002d81 	.word	0x20002d81
   104d0:	0000f35d 	.word	0x0000f35d
   104d4:	0000fd9d 	.word	0x0000fd9d

000104d8 <LORAWAN_Send>:
   104d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   104da:	4c37      	ldr	r4, [pc, #220]	; (105b8 <LORAWAN_Send+0xe0>)
   104dc:	0006      	movs	r6, r0
   104de:	0023      	movs	r3, r4
   104e0:	337c      	adds	r3, #124	; 0x7c
   104e2:	781b      	ldrb	r3, [r3, #0]
   104e4:	250f      	movs	r5, #15
   104e6:	b25a      	sxtb	r2, r3
   104e8:	2a00      	cmp	r2, #0
   104ea:	db0b      	blt.n	10504 <LORAWAN_Send+0x2c>
   104ec:	3d03      	subs	r5, #3
   104ee:	065a      	lsls	r2, r3, #25
   104f0:	d408      	bmi.n	10504 <LORAWAN_Send+0x2c>
   104f2:	3d03      	subs	r5, #3
   104f4:	07db      	lsls	r3, r3, #31
   104f6:	d505      	bpl.n	10504 <LORAWAN_Send+0x2c>
   104f8:	2385      	movs	r3, #133	; 0x85
   104fa:	009b      	lsls	r3, r3, #2
   104fc:	5ce7      	ldrb	r7, [r4, r3]
   104fe:	2f00      	cmp	r7, #0
   10500:	d102      	bne.n	10508 <LORAWAN_Send+0x30>
   10502:	2511      	movs	r5, #17
   10504:	0028      	movs	r0, r5
   10506:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10508:	2800      	cmp	r0, #0
   1050a:	d10e      	bne.n	1052a <LORAWAN_Send+0x52>
   1050c:	2700      	movs	r7, #0
   1050e:	1d23      	adds	r3, r4, #4
   10510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   10512:	3301      	adds	r3, #1
   10514:	d123      	bne.n	1055e <LORAWAN_Send+0x86>
   10516:	2001      	movs	r0, #1
   10518:	347c      	adds	r4, #124	; 0x7c
   1051a:	78a3      	ldrb	r3, [r4, #2]
   1051c:	210b      	movs	r1, #11
   1051e:	4303      	orrs	r3, r0
   10520:	70a3      	strb	r3, [r4, #2]
   10522:	4b26      	ldr	r3, [pc, #152]	; (105bc <LORAWAN_Send+0xe4>)
   10524:	4798      	blx	r3
   10526:	250d      	movs	r5, #13
   10528:	e7ec      	b.n	10504 <LORAWAN_Send+0x2c>
   1052a:	7843      	ldrb	r3, [r0, #1]
   1052c:	7a02      	ldrb	r2, [r0, #8]
   1052e:	3b01      	subs	r3, #1
   10530:	b2db      	uxtb	r3, r3
   10532:	9201      	str	r2, [sp, #4]
   10534:	2bdf      	cmp	r3, #223	; 0xdf
   10536:	d902      	bls.n	1053e <LORAWAN_Send+0x66>
   10538:	250a      	movs	r5, #10
   1053a:	2a00      	cmp	r2, #0
   1053c:	d1e2      	bne.n	10504 <LORAWAN_Send+0x2c>
   1053e:	4b20      	ldr	r3, [pc, #128]	; (105c0 <LORAWAN_Send+0xe8>)
   10540:	4798      	blx	r3
   10542:	4684      	mov	ip, r0
   10544:	9b01      	ldr	r3, [sp, #4]
   10546:	9000      	str	r0, [sp, #0]
   10548:	4463      	add	r3, ip
   1054a:	001d      	movs	r5, r3
   1054c:	4b1d      	ldr	r3, [pc, #116]	; (105c4 <LORAWAN_Send+0xec>)
   1054e:	4798      	blx	r3
   10550:	4285      	cmp	r5, r0
   10552:	dddb      	ble.n	1050c <LORAWAN_Send+0x34>
   10554:	9b00      	ldr	r3, [sp, #0]
   10556:	250e      	movs	r5, #14
   10558:	2b00      	cmp	r3, #0
   1055a:	d0d3      	beq.n	10504 <LORAWAN_Send+0x2c>
   1055c:	e7d7      	b.n	1050e <LORAWAN_Send+0x36>
   1055e:	0023      	movs	r3, r4
   10560:	33f4      	adds	r3, #244	; 0xf4
   10562:	781b      	ldrb	r3, [r3, #0]
   10564:	2b04      	cmp	r3, #4
   10566:	d01d      	beq.n	105a4 <LORAWAN_Send+0xcc>
   10568:	0023      	movs	r3, r4
   1056a:	33f4      	adds	r3, #244	; 0xf4
   1056c:	781b      	ldrb	r3, [r3, #0]
   1056e:	2b01      	cmp	r3, #1
   10570:	d105      	bne.n	1057e <LORAWAN_Send+0xa6>
   10572:	0023      	movs	r3, r4
   10574:	337c      	adds	r3, #124	; 0x7c
   10576:	781a      	ldrb	r2, [r3, #0]
   10578:	230e      	movs	r3, #14
   1057a:	421a      	tst	r2, r3
   1057c:	d1c1      	bne.n	10502 <LORAWAN_Send+0x2a>
   1057e:	0023      	movs	r3, r4
   10580:	33fc      	adds	r3, #252	; 0xfc
   10582:	2f00      	cmp	r7, #0
   10584:	d113      	bne.n	105ae <LORAWAN_Send+0xd6>
   10586:	2508      	movs	r5, #8
   10588:	601e      	str	r6, [r3, #0]
   1058a:	2385      	movs	r3, #133	; 0x85
   1058c:	2200      	movs	r2, #0
   1058e:	009b      	lsls	r3, r3, #2
   10590:	54e2      	strb	r2, [r4, r3]
   10592:	2001      	movs	r0, #1
   10594:	4b0c      	ldr	r3, [pc, #48]	; (105c8 <LORAWAN_Send+0xf0>)
   10596:	4798      	blx	r3
   10598:	2320      	movs	r3, #32
   1059a:	348c      	adds	r4, #140	; 0x8c
   1059c:	7822      	ldrb	r2, [r4, #0]
   1059e:	4313      	orrs	r3, r2
   105a0:	7023      	strb	r3, [r4, #0]
   105a2:	e7af      	b.n	10504 <LORAWAN_Send+0x2c>
   105a4:	4b09      	ldr	r3, [pc, #36]	; (105cc <LORAWAN_Send+0xf4>)
   105a6:	4798      	blx	r3
   105a8:	2808      	cmp	r0, #8
   105aa:	d1aa      	bne.n	10502 <LORAWAN_Send+0x2a>
   105ac:	e7dc      	b.n	10568 <LORAWAN_Send+0x90>
   105ae:	2200      	movs	r2, #0
   105b0:	2511      	movs	r5, #17
   105b2:	601a      	str	r2, [r3, #0]
   105b4:	e7e9      	b.n	1058a <LORAWAN_Send+0xb2>
   105b6:	46c0      	nop			; (mov r8, r8)
   105b8:	20002b5c 	.word	0x20002b5c
   105bc:	0000e071 	.word	0x0000e071
   105c0:	0000fd5d 	.word	0x0000fd5d
   105c4:	0000fe05 	.word	0x0000fe05
   105c8:	00014a6d 	.word	0x00014a6d
   105cc:	00014171 	.word	0x00014171

000105d0 <AutomaticReplyCallback>:
   105d0:	b510      	push	{r4, lr}
   105d2:	4c0d      	ldr	r4, [pc, #52]	; (10608 <AutomaticReplyCallback+0x38>)
   105d4:	0023      	movs	r3, r4
   105d6:	33f4      	adds	r3, #244	; 0xf4
   105d8:	781b      	ldrb	r3, [r3, #0]
   105da:	2b01      	cmp	r3, #1
   105dc:	d10e      	bne.n	105fc <AutomaticReplyCallback+0x2c>
   105de:	0022      	movs	r2, r4
   105e0:	210e      	movs	r1, #14
   105e2:	327c      	adds	r2, #124	; 0x7c
   105e4:	7813      	ldrb	r3, [r2, #0]
   105e6:	438b      	bics	r3, r1
   105e8:	7013      	strb	r3, [r2, #0]
   105ea:	4b08      	ldr	r3, [pc, #32]	; (1060c <AutomaticReplyCallback+0x3c>)
   105ec:	2000      	movs	r0, #0
   105ee:	4798      	blx	r3
   105f0:	2208      	movs	r2, #8
   105f2:	348c      	adds	r4, #140	; 0x8c
   105f4:	7823      	ldrb	r3, [r4, #0]
   105f6:	4393      	bics	r3, r2
   105f8:	7023      	strb	r3, [r4, #0]
   105fa:	bd10      	pop	{r4, pc}
   105fc:	2b04      	cmp	r3, #4
   105fe:	d1f4      	bne.n	105ea <AutomaticReplyCallback+0x1a>
   10600:	4b03      	ldr	r3, [pc, #12]	; (10610 <AutomaticReplyCallback+0x40>)
   10602:	4798      	blx	r3
   10604:	e7f1      	b.n	105ea <AutomaticReplyCallback+0x1a>
   10606:	46c0      	nop			; (mov r8, r8)
   10608:	20002b5c 	.word	0x20002b5c
   1060c:	000104d9 	.word	0x000104d9
   10610:	000154f5 	.word	0x000154f5

00010614 <LORAWAN_Pause>:
   10614:	b510      	push	{r4, lr}
   10616:	4c2c      	ldr	r4, [pc, #176]	; (106c8 <LORAWAN_Pause+0xb4>)
   10618:	0023      	movs	r3, r4
   1061a:	33f4      	adds	r3, #244	; 0xf4
   1061c:	781b      	ldrb	r3, [r3, #0]
   1061e:	2b04      	cmp	r3, #4
   10620:	d110      	bne.n	10644 <LORAWAN_Pause+0x30>
   10622:	0023      	movs	r3, r4
   10624:	337c      	adds	r3, #124	; 0x7c
   10626:	781b      	ldrb	r3, [r3, #0]
   10628:	07db      	lsls	r3, r3, #31
   1062a:	d50b      	bpl.n	10644 <LORAWAN_Pause+0x30>
   1062c:	4b27      	ldr	r3, [pc, #156]	; (106cc <LORAWAN_Pause+0xb8>)
   1062e:	4798      	blx	r3
   10630:	28c7      	cmp	r0, #199	; 0xc7
   10632:	d942      	bls.n	106ba <LORAWAN_Pause+0xa6>
   10634:	2380      	movs	r3, #128	; 0x80
   10636:	347c      	adds	r4, #124	; 0x7c
   10638:	7822      	ldrb	r2, [r4, #0]
   1063a:	425b      	negs	r3, r3
   1063c:	4313      	orrs	r3, r2
   1063e:	3832      	subs	r0, #50	; 0x32
   10640:	7023      	strb	r3, [r4, #0]
   10642:	bd10      	pop	{r4, pc}
   10644:	0023      	movs	r3, r4
   10646:	337c      	adds	r3, #124	; 0x7c
   10648:	7818      	ldrb	r0, [r3, #0]
   1064a:	0700      	lsls	r0, r0, #28
   1064c:	0f40      	lsrs	r0, r0, #29
   1064e:	2806      	cmp	r0, #6
   10650:	d833      	bhi.n	106ba <LORAWAN_Pause+0xa6>
   10652:	f005 ff9d 	bl	16590 <__gnu_thumb1_case_uqi>
   10656:	322f      	.short	0x322f
   10658:	321b3204 	.word	0x321b3204
   1065c:	2c          	.byte	0x2c
   1065d:	00          	.byte	0x00
   1065e:	0023      	movs	r3, r4
   10660:	338c      	adds	r3, #140	; 0x8c
   10662:	781b      	ldrb	r3, [r3, #0]
   10664:	075b      	lsls	r3, r3, #29
   10666:	d509      	bpl.n	1067c <LORAWAN_Pause+0x68>
   10668:	0023      	movs	r3, r4
   1066a:	33e2      	adds	r3, #226	; 0xe2
   1066c:	7818      	ldrb	r0, [r3, #0]
   1066e:	4b18      	ldr	r3, [pc, #96]	; (106d0 <LORAWAN_Pause+0xbc>)
   10670:	4798      	blx	r3
   10672:	21fa      	movs	r1, #250	; 0xfa
   10674:	4b17      	ldr	r3, [pc, #92]	; (106d4 <LORAWAN_Pause+0xc0>)
   10676:	0089      	lsls	r1, r1, #2
   10678:	4798      	blx	r3
   1067a:	e7d9      	b.n	10630 <LORAWAN_Pause+0x1c>
   1067c:	0023      	movs	r3, r4
   1067e:	337c      	adds	r3, #124	; 0x7c
   10680:	781b      	ldrb	r3, [r3, #0]
   10682:	07db      	lsls	r3, r3, #31
   10684:	d519      	bpl.n	106ba <LORAWAN_Pause+0xa6>
   10686:	0023      	movs	r3, r4
   10688:	33e4      	adds	r3, #228	; 0xe4
   1068a:	e7ef      	b.n	1066c <LORAWAN_Pause+0x58>
   1068c:	0023      	movs	r3, r4
   1068e:	338c      	adds	r3, #140	; 0x8c
   10690:	7818      	ldrb	r0, [r3, #0]
   10692:	2304      	movs	r3, #4
   10694:	4018      	ands	r0, r3
   10696:	0023      	movs	r3, r4
   10698:	2800      	cmp	r0, #0
   1069a:	d001      	beq.n	106a0 <LORAWAN_Pause+0x8c>
   1069c:	33e3      	adds	r3, #227	; 0xe3
   1069e:	e7e5      	b.n	1066c <LORAWAN_Pause+0x58>
   106a0:	337c      	adds	r3, #124	; 0x7c
   106a2:	781b      	ldrb	r3, [r3, #0]
   106a4:	07db      	lsls	r3, r3, #31
   106a6:	d5e4      	bpl.n	10672 <LORAWAN_Pause+0x5e>
   106a8:	0023      	movs	r3, r4
   106aa:	33e5      	adds	r3, #229	; 0xe5
   106ac:	e7de      	b.n	1066c <LORAWAN_Pause+0x58>
   106ae:	0023      	movs	r3, r4
   106b0:	33e8      	adds	r3, #232	; 0xe8
   106b2:	e7db      	b.n	1066c <LORAWAN_Pause+0x58>
   106b4:	2001      	movs	r0, #1
   106b6:	4240      	negs	r0, r0
   106b8:	e7bc      	b.n	10634 <LORAWAN_Pause+0x20>
   106ba:	227f      	movs	r2, #127	; 0x7f
   106bc:	347c      	adds	r4, #124	; 0x7c
   106be:	7823      	ldrb	r3, [r4, #0]
   106c0:	2000      	movs	r0, #0
   106c2:	4013      	ands	r3, r2
   106c4:	7023      	strb	r3, [r4, #0]
   106c6:	e7bc      	b.n	10642 <LORAWAN_Pause+0x2e>
   106c8:	20002b5c 	.word	0x20002b5c
   106cc:	000141a9 	.word	0x000141a9
   106d0:	0000ef4d 	.word	0x0000ef4d
   106d4:	000165b9 	.word	0x000165b9

000106d8 <LORAWAN_Resume>:
   106d8:	217f      	movs	r1, #127	; 0x7f
   106da:	4b03      	ldr	r3, [pc, #12]	; (106e8 <LORAWAN_Resume+0x10>)
   106dc:	337c      	adds	r3, #124	; 0x7c
   106de:	781a      	ldrb	r2, [r3, #0]
   106e0:	400a      	ands	r2, r1
   106e2:	701a      	strb	r2, [r3, #0]
   106e4:	4770      	bx	lr
   106e6:	46c0      	nop			; (mov r8, r8)
   106e8:	20002b5c 	.word	0x20002b5c

000106ec <LorawanLinkCheckConfigure>:
   106ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106ee:	23fa      	movs	r3, #250	; 0xfa
   106f0:	4c21      	ldr	r4, [pc, #132]	; (10778 <LorawanLinkCheckConfigure+0x8c>)
   106f2:	009b      	lsls	r3, r3, #2
   106f4:	0022      	movs	r2, r4
   106f6:	0025      	movs	r5, r4
   106f8:	4343      	muls	r3, r0
   106fa:	3288      	adds	r2, #136	; 0x88
   106fc:	0006      	movs	r6, r0
   106fe:	2102      	movs	r1, #2
   10700:	2000      	movs	r0, #0
   10702:	4f1e      	ldr	r7, [pc, #120]	; (1077c <LorawanLinkCheckConfigure+0x90>)
   10704:	6013      	str	r3, [r2, #0]
   10706:	357c      	adds	r5, #124	; 0x7c
   10708:	47b8      	blx	r7
   1070a:	2e00      	cmp	r6, #0
   1070c:	d127      	bne.n	1075e <LorawanLinkCheckConfigure+0x72>
   1070e:	0023      	movs	r3, r4
   10710:	33e7      	adds	r3, #231	; 0xe7
   10712:	7818      	ldrb	r0, [r3, #0]
   10714:	4b1a      	ldr	r3, [pc, #104]	; (10780 <LorawanLinkCheckConfigure+0x94>)
   10716:	4798      	blx	r3
   10718:	2202      	movs	r2, #2
   1071a:	786b      	ldrb	r3, [r5, #1]
   1071c:	210b      	movs	r1, #11
   1071e:	4393      	bics	r3, r2
   10720:	706b      	strb	r3, [r5, #1]
   10722:	2001      	movs	r0, #1
   10724:	47b8      	blx	r7
   10726:	0023      	movs	r3, r4
   10728:	2701      	movs	r7, #1
   1072a:	33d8      	adds	r3, #216	; 0xd8
   1072c:	781b      	ldrb	r3, [r3, #0]
   1072e:	0030      	movs	r0, r6
   10730:	0032      	movs	r2, r6
   10732:	36ff      	adds	r6, #255	; 0xff
   10734:	429a      	cmp	r2, r3
   10736:	d304      	bcc.n	10742 <LorawanLinkCheckConfigure+0x56>
   10738:	2800      	cmp	r0, #0
   1073a:	d001      	beq.n	10740 <LorawanLinkCheckConfigure+0x54>
   1073c:	34d8      	adds	r4, #216	; 0xd8
   1073e:	7023      	strb	r3, [r4, #0]
   10740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10742:	2103      	movs	r1, #3
   10744:	4351      	muls	r1, r2
   10746:	1861      	adds	r1, r4, r1
   10748:	3191      	adds	r1, #145	; 0x91
   1074a:	780d      	ldrb	r5, [r1, #0]
   1074c:	2d02      	cmp	r5, #2
   1074e:	d103      	bne.n	10758 <LorawanLinkCheckConfigure+0x6c>
   10750:	0038      	movs	r0, r7
   10752:	3b01      	subs	r3, #1
   10754:	700e      	strb	r6, [r1, #0]
   10756:	b2db      	uxtb	r3, r3
   10758:	3201      	adds	r2, #1
   1075a:	b2d2      	uxtb	r2, r2
   1075c:	e7ea      	b.n	10734 <LorawanLinkCheckConfigure+0x48>
   1075e:	2302      	movs	r3, #2
   10760:	786a      	ldrb	r2, [r5, #1]
   10762:	210b      	movs	r1, #11
   10764:	4313      	orrs	r3, r2
   10766:	706b      	strb	r3, [r5, #1]
   10768:	2001      	movs	r0, #1
   1076a:	47b8      	blx	r7
   1076c:	782b      	ldrb	r3, [r5, #0]
   1076e:	07db      	lsls	r3, r3, #31
   10770:	d5e6      	bpl.n	10740 <LorawanLinkCheckConfigure+0x54>
   10772:	4b04      	ldr	r3, [pc, #16]	; (10784 <LorawanLinkCheckConfigure+0x98>)
   10774:	4798      	blx	r3
   10776:	e7e3      	b.n	10740 <LorawanLinkCheckConfigure+0x54>
   10778:	20002b5c 	.word	0x20002b5c
   1077c:	0000e071 	.word	0x0000e071
   10780:	0000f0b9 	.word	0x0000f0b9
   10784:	0001026d 	.word	0x0001026d

00010788 <EncodeDeviceTimeReq>:
   10788:	4b08      	ldr	r3, [pc, #32]	; (107ac <EncodeDeviceTimeReq+0x24>)
   1078a:	b510      	push	{r4, lr}
   1078c:	001c      	movs	r4, r3
   1078e:	34d8      	adds	r4, #216	; 0xd8
   10790:	7822      	ldrb	r2, [r4, #0]
   10792:	2015      	movs	r0, #21
   10794:	2a0f      	cmp	r2, #15
   10796:	d808      	bhi.n	107aa <EncodeDeviceTimeReq+0x22>
   10798:	2103      	movs	r1, #3
   1079a:	4351      	muls	r1, r2
   1079c:	185b      	adds	r3, r3, r1
   1079e:	210d      	movs	r1, #13
   107a0:	3391      	adds	r3, #145	; 0x91
   107a2:	3201      	adds	r2, #1
   107a4:	7019      	strb	r1, [r3, #0]
   107a6:	7022      	strb	r2, [r4, #0]
   107a8:	380d      	subs	r0, #13
   107aa:	bd10      	pop	{r4, pc}
   107ac:	20002b5c 	.word	0x20002b5c

000107b0 <LORAWAN_ForceEnable>:
   107b0:	2140      	movs	r1, #64	; 0x40
   107b2:	4b03      	ldr	r3, [pc, #12]	; (107c0 <LORAWAN_ForceEnable+0x10>)
   107b4:	337c      	adds	r3, #124	; 0x7c
   107b6:	781a      	ldrb	r2, [r3, #0]
   107b8:	438a      	bics	r2, r1
   107ba:	701a      	strb	r2, [r3, #0]
   107bc:	4770      	bx	lr
   107be:	46c0      	nop			; (mov r8, r8)
   107c0:	20002b5c 	.word	0x20002b5c

000107c4 <UpdateCurrentDataRate>:
   107c4:	b510      	push	{r4, lr}
   107c6:	4b04      	ldr	r3, [pc, #16]	; (107d8 <UpdateCurrentDataRate+0x14>)
   107c8:	210c      	movs	r1, #12
   107ca:	33df      	adds	r3, #223	; 0xdf
   107cc:	7018      	strb	r0, [r3, #0]
   107ce:	2001      	movs	r0, #1
   107d0:	4b02      	ldr	r3, [pc, #8]	; (107dc <UpdateCurrentDataRate+0x18>)
   107d2:	4798      	blx	r3
   107d4:	bd10      	pop	{r4, pc}
   107d6:	46c0      	nop			; (mov r8, r8)
   107d8:	20002b5c 	.word	0x20002b5c
   107dc:	0000e071 	.word	0x0000e071

000107e0 <UpdateDLSettings>:
   107e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   107e2:	466b      	mov	r3, sp
   107e4:	1dde      	adds	r6, r3, #7
   107e6:	1d9c      	adds	r4, r3, #6
   107e8:	71d8      	strb	r0, [r3, #7]
   107ea:	7021      	strb	r1, [r4, #0]
   107ec:	2017      	movs	r0, #23
   107ee:	0031      	movs	r1, r6
   107f0:	4d0c      	ldr	r5, [pc, #48]	; (10824 <UpdateDLSettings+0x44>)
   107f2:	47a8      	blx	r5
   107f4:	2808      	cmp	r0, #8
   107f6:	d107      	bne.n	10808 <UpdateDLSettings+0x28>
   107f8:	4b0b      	ldr	r3, [pc, #44]	; (10828 <UpdateDLSettings+0x48>)
   107fa:	7832      	ldrb	r2, [r6, #0]
   107fc:	336e      	adds	r3, #110	; 0x6e
   107fe:	701a      	strb	r2, [r3, #0]
   10800:	2100      	movs	r1, #0
   10802:	3807      	subs	r0, #7
   10804:	4b09      	ldr	r3, [pc, #36]	; (1082c <UpdateDLSettings+0x4c>)
   10806:	4798      	blx	r3
   10808:	0021      	movs	r1, r4
   1080a:	2018      	movs	r0, #24
   1080c:	47a8      	blx	r5
   1080e:	2808      	cmp	r0, #8
   10810:	d107      	bne.n	10822 <UpdateDLSettings+0x42>
   10812:	2101      	movs	r1, #1
   10814:	4b04      	ldr	r3, [pc, #16]	; (10828 <UpdateDLSettings+0x48>)
   10816:	7822      	ldrb	r2, [r4, #0]
   10818:	33ee      	adds	r3, #238	; 0xee
   1081a:	701a      	strb	r2, [r3, #0]
   1081c:	0008      	movs	r0, r1
   1081e:	4b03      	ldr	r3, [pc, #12]	; (1082c <UpdateDLSettings+0x4c>)
   10820:	4798      	blx	r3
   10822:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   10824:	0000d8b1 	.word	0x0000d8b1
   10828:	20002b5c 	.word	0x20002b5c
   1082c:	0000e071 	.word	0x0000e071

00010830 <UpdateTxPower>:
   10830:	b510      	push	{r4, lr}
   10832:	4b04      	ldr	r3, [pc, #16]	; (10844 <UpdateTxPower+0x14>)
   10834:	210a      	movs	r1, #10
   10836:	33e1      	adds	r3, #225	; 0xe1
   10838:	7018      	strb	r0, [r3, #0]
   1083a:	2000      	movs	r0, #0
   1083c:	4b02      	ldr	r3, [pc, #8]	; (10848 <UpdateTxPower+0x18>)
   1083e:	4798      	blx	r3
   10840:	bd10      	pop	{r4, pc}
   10842:	46c0      	nop			; (mov r8, r8)
   10844:	20002b5c 	.word	0x20002b5c
   10848:	0000e071 	.word	0x0000e071

0001084c <UpdateRetransmissionAckTimeoutState>:
   1084c:	4b10      	ldr	r3, [pc, #64]	; (10890 <UpdateRetransmissionAckTimeoutState+0x44>)
   1084e:	b513      	push	{r0, r1, r4, lr}
   10850:	001a      	movs	r2, r3
   10852:	32f4      	adds	r2, #244	; 0xf4
   10854:	7812      	ldrb	r2, [r2, #0]
   10856:	2a01      	cmp	r2, #1
   10858:	d108      	bne.n	1086c <UpdateRetransmissionAckTimeoutState+0x20>
   1085a:	0018      	movs	r0, r3
   1085c:	210e      	movs	r1, #14
   1085e:	307c      	adds	r0, #124	; 0x7c
   10860:	7802      	ldrb	r2, [r0, #0]
   10862:	438a      	bics	r2, r1
   10864:	0011      	movs	r1, r2
   10866:	220c      	movs	r2, #12
   10868:	430a      	orrs	r2, r1
   1086a:	7002      	strb	r2, [r0, #0]
   1086c:	001a      	movs	r2, r3
   1086e:	32d2      	adds	r2, #210	; 0xd2
   10870:	8811      	ldrh	r1, [r2, #0]
   10872:	4a08      	ldr	r2, [pc, #32]	; (10894 <UpdateRetransmissionAckTimeoutState+0x48>)
   10874:	4c08      	ldr	r4, [pc, #32]	; (10898 <UpdateRetransmissionAckTimeoutState+0x4c>)
   10876:	5c9a      	ldrb	r2, [r3, r2]
   10878:	33e8      	adds	r3, #232	; 0xe8
   1087a:	1a8a      	subs	r2, r1, r2
   1087c:	21fa      	movs	r1, #250	; 0xfa
   1087e:	0089      	lsls	r1, r1, #2
   10880:	4351      	muls	r1, r2
   10882:	2200      	movs	r2, #0
   10884:	7818      	ldrb	r0, [r3, #0]
   10886:	9200      	str	r2, [sp, #0]
   10888:	4b04      	ldr	r3, [pc, #16]	; (1089c <UpdateRetransmissionAckTimeoutState+0x50>)
   1088a:	47a0      	blx	r4
   1088c:	bd13      	pop	{r0, r1, r4, pc}
   1088e:	46c0      	nop			; (mov r8, r8)
   10890:	20002b5c 	.word	0x20002b5c
   10894:	0000021f 	.word	0x0000021f
   10898:	0000eda1 	.word	0x0000eda1
   1089c:	00012599 	.word	0x00012599

000108a0 <UpdateReceiveWindow2Parameters>:
   108a0:	4b06      	ldr	r3, [pc, #24]	; (108bc <UpdateReceiveWindow2Parameters+0x1c>)
   108a2:	b510      	push	{r4, lr}
   108a4:	001a      	movs	r2, r3
   108a6:	336a      	adds	r3, #106	; 0x6a
   108a8:	8018      	strh	r0, [r3, #0]
   108aa:	326e      	adds	r2, #110	; 0x6e
   108ac:	0c00      	lsrs	r0, r0, #16
   108ae:	8058      	strh	r0, [r3, #2]
   108b0:	7011      	strb	r1, [r2, #0]
   108b2:	2001      	movs	r0, #1
   108b4:	2100      	movs	r1, #0
   108b6:	4b02      	ldr	r3, [pc, #8]	; (108c0 <UpdateReceiveWindow2Parameters+0x20>)
   108b8:	4798      	blx	r3
   108ba:	bd10      	pop	{r4, pc}
   108bc:	20002b5c 	.word	0x20002b5c
   108c0:	0000e071 	.word	0x0000e071

000108c4 <ResetParametersForConfirmedTransmission>:
   108c4:	4b0a      	ldr	r3, [pc, #40]	; (108f0 <ResetParametersForConfirmedTransmission+0x2c>)
   108c6:	001a      	movs	r2, r3
   108c8:	32f4      	adds	r2, #244	; 0xf4
   108ca:	7812      	ldrb	r2, [r2, #0]
   108cc:	2a01      	cmp	r2, #1
   108ce:	d105      	bne.n	108dc <ResetParametersForConfirmedTransmission+0x18>
   108d0:	0019      	movs	r1, r3
   108d2:	200e      	movs	r0, #14
   108d4:	317c      	adds	r1, #124	; 0x7c
   108d6:	780a      	ldrb	r2, [r1, #0]
   108d8:	4382      	bics	r2, r0
   108da:	700a      	strb	r2, [r1, #0]
   108dc:	001a      	movs	r2, r3
   108de:	2100      	movs	r1, #0
   108e0:	338c      	adds	r3, #140	; 0x8c
   108e2:	32dc      	adds	r2, #220	; 0xdc
   108e4:	7011      	strb	r1, [r2, #0]
   108e6:	781a      	ldrb	r2, [r3, #0]
   108e8:	3101      	adds	r1, #1
   108ea:	438a      	bics	r2, r1
   108ec:	701a      	strb	r2, [r3, #0]
   108ee:	4770      	bx	lr
   108f0:	20002b5c 	.word	0x20002b5c

000108f4 <ResetParametersForUnconfirmedTransmission>:
   108f4:	4b07      	ldr	r3, [pc, #28]	; (10914 <ResetParametersForUnconfirmedTransmission+0x20>)
   108f6:	001a      	movs	r2, r3
   108f8:	32f4      	adds	r2, #244	; 0xf4
   108fa:	7812      	ldrb	r2, [r2, #0]
   108fc:	2a01      	cmp	r2, #1
   108fe:	d105      	bne.n	1090c <ResetParametersForUnconfirmedTransmission+0x18>
   10900:	0019      	movs	r1, r3
   10902:	200e      	movs	r0, #14
   10904:	317c      	adds	r1, #124	; 0x7c
   10906:	780a      	ldrb	r2, [r1, #0]
   10908:	4382      	bics	r2, r0
   1090a:	700a      	strb	r2, [r1, #0]
   1090c:	2200      	movs	r2, #0
   1090e:	33db      	adds	r3, #219	; 0xdb
   10910:	701a      	strb	r2, [r3, #0]
   10912:	4770      	bx	lr
   10914:	20002b5c 	.word	0x20002b5c

00010918 <SetJoinFailState>:
   10918:	b570      	push	{r4, r5, r6, lr}
   1091a:	4c15      	ldr	r4, [pc, #84]	; (10970 <SetJoinFailState+0x58>)
   1091c:	2604      	movs	r6, #4
   1091e:	0025      	movs	r5, r4
   10920:	358c      	adds	r5, #140	; 0x8c
   10922:	782a      	ldrb	r2, [r5, #0]
   10924:	0021      	movs	r1, r4
   10926:	43b2      	bics	r2, r6
   10928:	702a      	strb	r2, [r5, #0]
   1092a:	22f0      	movs	r2, #240	; 0xf0
   1092c:	317c      	adds	r1, #124	; 0x7c
   1092e:	780b      	ldrb	r3, [r1, #0]
   10930:	4013      	ands	r3, r2
   10932:	700b      	strb	r3, [r1, #0]
   10934:	0023      	movs	r3, r4
   10936:	33ff      	adds	r3, #255	; 0xff
   10938:	7c5b      	ldrb	r3, [r3, #17]
   1093a:	069b      	lsls	r3, r3, #26
   1093c:	d503      	bpl.n	10946 <SetJoinFailState+0x2e>
   1093e:	0023      	movs	r3, r4
   10940:	2200      	movs	r2, #0
   10942:	337b      	adds	r3, #123	; 0x7b
   10944:	701a      	strb	r2, [r3, #0]
   10946:	490b      	ldr	r1, [pc, #44]	; (10974 <SetJoinFailState+0x5c>)
   10948:	794a      	ldrb	r2, [r1, #5]
   1094a:	790b      	ldrb	r3, [r1, #4]
   1094c:	0212      	lsls	r2, r2, #8
   1094e:	431a      	orrs	r2, r3
   10950:	798b      	ldrb	r3, [r1, #6]
   10952:	041b      	lsls	r3, r3, #16
   10954:	431a      	orrs	r2, r3
   10956:	79cb      	ldrb	r3, [r1, #7]
   10958:	061b      	lsls	r3, r3, #24
   1095a:	4313      	orrs	r3, r2
   1095c:	d000      	beq.n	10960 <SetJoinFailState+0x48>
   1095e:	4798      	blx	r3
   10960:	2300      	movs	r3, #0
   10962:	34f0      	adds	r4, #240	; 0xf0
   10964:	7023      	strb	r3, [r4, #0]
   10966:	210b      	movs	r1, #11
   10968:	4b03      	ldr	r3, [pc, #12]	; (10978 <SetJoinFailState+0x60>)
   1096a:	2001      	movs	r0, #1
   1096c:	4798      	blx	r3
   1096e:	bd70      	pop	{r4, r5, r6, pc}
   10970:	20002b5c 	.word	0x20002b5c
   10974:	20002ea4 	.word	0x20002ea4
   10978:	0000e071 	.word	0x0000e071

0001097c <ExecuteRxParamSetupReq>:
   1097c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1097e:	b085      	sub	sp, #20
   10980:	7805      	ldrb	r5, [r0, #0]
   10982:	0004      	movs	r4, r0
   10984:	1c41      	adds	r1, r0, #1
   10986:	2204      	movs	r2, #4
   10988:	4b36      	ldr	r3, [pc, #216]	; (10a64 <ExecuteRxParamSetupReq+0xe8>)
   1098a:	a803      	add	r0, sp, #12
   1098c:	4798      	blx	r3
   1098e:	2264      	movs	r2, #100	; 0x64
   10990:	9b03      	ldr	r3, [sp, #12]
   10992:	a903      	add	r1, sp, #12
   10994:	021b      	lsls	r3, r3, #8
   10996:	0a1b      	lsrs	r3, r3, #8
   10998:	4353      	muls	r3, r2
   1099a:	9303      	str	r3, [sp, #12]
   1099c:	1d23      	adds	r3, r4, #4
   1099e:	9301      	str	r3, [sp, #4]
   109a0:	072b      	lsls	r3, r5, #28
   109a2:	0f1b      	lsrs	r3, r3, #28
   109a4:	b2da      	uxtb	r2, r3
   109a6:	9200      	str	r2, [sp, #0]
   109a8:	aa02      	add	r2, sp, #8
   109aa:	1c96      	adds	r6, r2, #2
   109ac:	066d      	lsls	r5, r5, #25
   109ae:	7033      	strb	r3, [r6, #0]
   109b0:	1cd7      	adds	r7, r2, #3
   109b2:	0f6d      	lsrs	r5, r5, #29
   109b4:	2001      	movs	r0, #1
   109b6:	4b2c      	ldr	r3, [pc, #176]	; (10a68 <ExecuteRxParamSetupReq+0xec>)
   109b8:	703d      	strb	r5, [r7, #0]
   109ba:	4798      	blx	r3
   109bc:	4c2b      	ldr	r4, [pc, #172]	; (10a6c <ExecuteRxParamSetupReq+0xf0>)
   109be:	2808      	cmp	r0, #8
   109c0:	d109      	bne.n	109d6 <ExecuteRxParamSetupReq+0x5a>
   109c2:	0023      	movs	r3, r4
   109c4:	33d8      	adds	r3, #216	; 0xd8
   109c6:	781a      	ldrb	r2, [r3, #0]
   109c8:	2303      	movs	r3, #3
   109ca:	4353      	muls	r3, r2
   109cc:	18e3      	adds	r3, r4, r3
   109ce:	3390      	adds	r3, #144	; 0x90
   109d0:	789a      	ldrb	r2, [r3, #2]
   109d2:	4310      	orrs	r0, r2
   109d4:	7098      	strb	r0, [r3, #2]
   109d6:	0031      	movs	r1, r6
   109d8:	200f      	movs	r0, #15
   109da:	4e23      	ldr	r6, [pc, #140]	; (10a68 <ExecuteRxParamSetupReq+0xec>)
   109dc:	47b0      	blx	r6
   109de:	2808      	cmp	r0, #8
   109e0:	d10a      	bne.n	109f8 <ExecuteRxParamSetupReq+0x7c>
   109e2:	0023      	movs	r3, r4
   109e4:	33d8      	adds	r3, #216	; 0xd8
   109e6:	781a      	ldrb	r2, [r3, #0]
   109e8:	2303      	movs	r3, #3
   109ea:	4353      	muls	r3, r2
   109ec:	2210      	movs	r2, #16
   109ee:	18e3      	adds	r3, r4, r3
   109f0:	3390      	adds	r3, #144	; 0x90
   109f2:	7899      	ldrb	r1, [r3, #2]
   109f4:	430a      	orrs	r2, r1
   109f6:	709a      	strb	r2, [r3, #2]
   109f8:	0039      	movs	r1, r7
   109fa:	2018      	movs	r0, #24
   109fc:	47b0      	blx	r6
   109fe:	2808      	cmp	r0, #8
   10a00:	d10a      	bne.n	10a18 <ExecuteRxParamSetupReq+0x9c>
   10a02:	0023      	movs	r3, r4
   10a04:	33d8      	adds	r3, #216	; 0xd8
   10a06:	781a      	ldrb	r2, [r3, #0]
   10a08:	2303      	movs	r3, #3
   10a0a:	4353      	muls	r3, r2
   10a0c:	2220      	movs	r2, #32
   10a0e:	18e3      	adds	r3, r4, r3
   10a10:	3390      	adds	r3, #144	; 0x90
   10a12:	7899      	ldrb	r1, [r3, #2]
   10a14:	430a      	orrs	r2, r1
   10a16:	709a      	strb	r2, [r3, #2]
   10a18:	0023      	movs	r3, r4
   10a1a:	33d8      	adds	r3, #216	; 0xd8
   10a1c:	781a      	ldrb	r2, [r3, #0]
   10a1e:	2303      	movs	r3, #3
   10a20:	4353      	muls	r3, r2
   10a22:	18e3      	adds	r3, r4, r3
   10a24:	3390      	adds	r3, #144	; 0x90
   10a26:	789e      	ldrb	r6, [r3, #2]
   10a28:	06f3      	lsls	r3, r6, #27
   10a2a:	d518      	bpl.n	10a5e <ExecuteRxParamSetupReq+0xe2>
   10a2c:	0733      	lsls	r3, r6, #28
   10a2e:	d516      	bpl.n	10a5e <ExecuteRxParamSetupReq+0xe2>
   10a30:	06b6      	lsls	r6, r6, #26
   10a32:	0ff6      	lsrs	r6, r6, #31
   10a34:	2e01      	cmp	r6, #1
   10a36:	d112      	bne.n	10a5e <ExecuteRxParamSetupReq+0xe2>
   10a38:	0023      	movs	r3, r4
   10a3a:	33ee      	adds	r3, #238	; 0xee
   10a3c:	701d      	strb	r5, [r3, #0]
   10a3e:	0031      	movs	r1, r6
   10a40:	0030      	movs	r0, r6
   10a42:	4d0b      	ldr	r5, [pc, #44]	; (10a70 <ExecuteRxParamSetupReq+0xf4>)
   10a44:	47a8      	blx	r5
   10a46:	9900      	ldr	r1, [sp, #0]
   10a48:	9803      	ldr	r0, [sp, #12]
   10a4a:	4b0a      	ldr	r3, [pc, #40]	; (10a74 <ExecuteRxParamSetupReq+0xf8>)
   10a4c:	4798      	blx	r3
   10a4e:	2340      	movs	r3, #64	; 0x40
   10a50:	347c      	adds	r4, #124	; 0x7c
   10a52:	7862      	ldrb	r2, [r4, #1]
   10a54:	210b      	movs	r1, #11
   10a56:	4313      	orrs	r3, r2
   10a58:	7063      	strb	r3, [r4, #1]
   10a5a:	0030      	movs	r0, r6
   10a5c:	47a8      	blx	r5
   10a5e:	9801      	ldr	r0, [sp, #4]
   10a60:	b005      	add	sp, #20
   10a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a64:	00019d1d 	.word	0x00019d1d
   10a68:	0000d8b1 	.word	0x0000d8b1
   10a6c:	20002b5c 	.word	0x20002b5c
   10a70:	0000e071 	.word	0x0000e071
   10a74:	000108a1 	.word	0x000108a1

00010a78 <ExecuteDutyCycle>:
   10a78:	b570      	push	{r4, r5, r6, lr}
   10a7a:	7803      	ldrb	r3, [r0, #0]
   10a7c:	1c46      	adds	r6, r0, #1
   10a7e:	2b0f      	cmp	r3, #15
   10a80:	d80f      	bhi.n	10aa2 <ExecuteDutyCycle+0x2a>
   10a82:	4c09      	ldr	r4, [pc, #36]	; (10aa8 <ExecuteDutyCycle+0x30>)
   10a84:	210b      	movs	r1, #11
   10a86:	0022      	movs	r2, r4
   10a88:	2000      	movs	r0, #0
   10a8a:	3290      	adds	r2, #144	; 0x90
   10a8c:	4d07      	ldr	r5, [pc, #28]	; (10aac <ExecuteDutyCycle+0x34>)
   10a8e:	7013      	strb	r3, [r2, #0]
   10a90:	47a8      	blx	r5
   10a92:	2320      	movs	r3, #32
   10a94:	347c      	adds	r4, #124	; 0x7c
   10a96:	7862      	ldrb	r2, [r4, #1]
   10a98:	210b      	movs	r1, #11
   10a9a:	4313      	orrs	r3, r2
   10a9c:	7063      	strb	r3, [r4, #1]
   10a9e:	2001      	movs	r0, #1
   10aa0:	47a8      	blx	r5
   10aa2:	0030      	movs	r0, r6
   10aa4:	bd70      	pop	{r4, r5, r6, pc}
   10aa6:	46c0      	nop			; (mov r8, r8)
   10aa8:	20002b5c 	.word	0x20002b5c
   10aac:	0000e071 	.word	0x0000e071

00010ab0 <ExecuteDlChannel>:
   10ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10ab2:	b089      	sub	sp, #36	; 0x24
   10ab4:	7805      	ldrb	r5, [r0, #0]
   10ab6:	ab02      	add	r3, sp, #8
   10ab8:	1c41      	adds	r1, r0, #1
   10aba:	0007      	movs	r7, r0
   10abc:	719d      	strb	r5, [r3, #6]
   10abe:	1d9e      	adds	r6, r3, #6
   10ac0:	2204      	movs	r2, #4
   10ac2:	4b23      	ldr	r3, [pc, #140]	; (10b50 <ExecuteDlChannel+0xa0>)
   10ac4:	a805      	add	r0, sp, #20
   10ac6:	4798      	blx	r3
   10ac8:	9b05      	ldr	r3, [sp, #20]
   10aca:	a904      	add	r1, sp, #16
   10acc:	021c      	lsls	r4, r3, #8
   10ace:	2364      	movs	r3, #100	; 0x64
   10ad0:	0a24      	lsrs	r4, r4, #8
   10ad2:	435c      	muls	r4, r3
   10ad4:	1d3b      	adds	r3, r7, #4
   10ad6:	9301      	str	r3, [sp, #4]
   10ad8:	2301      	movs	r3, #1
   10ada:	2015      	movs	r0, #21
   10adc:	704b      	strb	r3, [r1, #1]
   10ade:	4b1d      	ldr	r3, [pc, #116]	; (10b54 <ExecuteDlChannel+0xa4>)
   10ae0:	9405      	str	r4, [sp, #20]
   10ae2:	700d      	strb	r5, [r1, #0]
   10ae4:	4798      	blx	r3
   10ae6:	2808      	cmp	r0, #8
   10ae8:	d12f      	bne.n	10b4a <ExecuteDlChannel+0x9a>
   10aea:	ab02      	add	r3, sp, #8
   10aec:	1ddd      	adds	r5, r3, #7
   10aee:	2300      	movs	r3, #0
   10af0:	702b      	strb	r3, [r5, #0]
   10af2:	7833      	ldrb	r3, [r6, #0]
   10af4:	af06      	add	r7, sp, #24
   10af6:	713b      	strb	r3, [r7, #4]
   10af8:	002a      	movs	r2, r5
   10afa:	0031      	movs	r1, r6
   10afc:	300e      	adds	r0, #14
   10afe:	4b16      	ldr	r3, [pc, #88]	; (10b58 <ExecuteDlChannel+0xa8>)
   10b00:	9406      	str	r4, [sp, #24]
   10b02:	4798      	blx	r3
   10b04:	280a      	cmp	r0, #10
   10b06:	d00d      	beq.n	10b24 <ExecuteDlChannel+0x74>
   10b08:	782a      	ldrb	r2, [r5, #0]
   10b0a:	2a01      	cmp	r2, #1
   10b0c:	d10a      	bne.n	10b24 <ExecuteDlChannel+0x74>
   10b0e:	4b13      	ldr	r3, [pc, #76]	; (10b5c <ExecuteDlChannel+0xac>)
   10b10:	0019      	movs	r1, r3
   10b12:	31d8      	adds	r1, #216	; 0xd8
   10b14:	7808      	ldrb	r0, [r1, #0]
   10b16:	2103      	movs	r1, #3
   10b18:	4341      	muls	r1, r0
   10b1a:	185b      	adds	r3, r3, r1
   10b1c:	3390      	adds	r3, #144	; 0x90
   10b1e:	78d9      	ldrb	r1, [r3, #3]
   10b20:	430a      	orrs	r2, r1
   10b22:	70da      	strb	r2, [r3, #3]
   10b24:	0039      	movs	r1, r7
   10b26:	2034      	movs	r0, #52	; 0x34
   10b28:	4b0d      	ldr	r3, [pc, #52]	; (10b60 <ExecuteDlChannel+0xb0>)
   10b2a:	4798      	blx	r3
   10b2c:	2808      	cmp	r0, #8
   10b2e:	d10c      	bne.n	10b4a <ExecuteDlChannel+0x9a>
   10b30:	4b0a      	ldr	r3, [pc, #40]	; (10b5c <ExecuteDlChannel+0xac>)
   10b32:	001a      	movs	r2, r3
   10b34:	32d8      	adds	r2, #216	; 0xd8
   10b36:	7811      	ldrb	r1, [r2, #0]
   10b38:	2203      	movs	r2, #3
   10b3a:	434a      	muls	r2, r1
   10b3c:	189b      	adds	r3, r3, r2
   10b3e:	2280      	movs	r2, #128	; 0x80
   10b40:	3390      	adds	r3, #144	; 0x90
   10b42:	7899      	ldrb	r1, [r3, #2]
   10b44:	4252      	negs	r2, r2
   10b46:	430a      	orrs	r2, r1
   10b48:	709a      	strb	r2, [r3, #2]
   10b4a:	9801      	ldr	r0, [sp, #4]
   10b4c:	b009      	add	sp, #36	; 0x24
   10b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b50:	00019d1d 	.word	0x00019d1d
   10b54:	0000d8b1 	.word	0x0000d8b1
   10b58:	0000d895 	.word	0x0000d895
   10b5c:	20002b5c 	.word	0x20002b5c
   10b60:	0000d9bd 	.word	0x0000d9bd

00010b64 <ExecuteTxParamSetup>:
   10b64:	220f      	movs	r2, #15
   10b66:	b513      	push	{r0, r1, r4, lr}
   10b68:	7803      	ldrb	r3, [r0, #0]
   10b6a:	4c0f      	ldr	r4, [pc, #60]	; (10ba8 <ExecuteTxParamSetup+0x44>)
   10b6c:	401a      	ands	r2, r3
   10b6e:	5ca2      	ldrb	r2, [r4, r2]
   10b70:	2401      	movs	r4, #1
   10b72:	a901      	add	r1, sp, #4
   10b74:	700a      	strb	r2, [r1, #0]
   10b76:	111a      	asrs	r2, r3, #4
   10b78:	115b      	asrs	r3, r3, #5
   10b7a:	4023      	ands	r3, r4
   10b7c:	40a3      	lsls	r3, r4
   10b7e:	4022      	ands	r2, r4
   10b80:	4313      	orrs	r3, r2
   10b82:	704b      	strb	r3, [r1, #1]
   10b84:	1904      	adds	r4, r0, r4
   10b86:	4b09      	ldr	r3, [pc, #36]	; (10bac <ExecuteTxParamSetup+0x48>)
   10b88:	2035      	movs	r0, #53	; 0x35
   10b8a:	4798      	blx	r3
   10b8c:	2808      	cmp	r0, #8
   10b8e:	d009      	beq.n	10ba4 <ExecuteTxParamSetup+0x40>
   10b90:	4b07      	ldr	r3, [pc, #28]	; (10bb0 <ExecuteTxParamSetup+0x4c>)
   10b92:	001a      	movs	r2, r3
   10b94:	32d8      	adds	r2, #216	; 0xd8
   10b96:	7811      	ldrb	r1, [r2, #0]
   10b98:	2203      	movs	r2, #3
   10b9a:	434a      	muls	r2, r1
   10b9c:	189b      	adds	r3, r3, r2
   10b9e:	22ff      	movs	r2, #255	; 0xff
   10ba0:	3391      	adds	r3, #145	; 0x91
   10ba2:	701a      	strb	r2, [r3, #0]
   10ba4:	0020      	movs	r0, r4
   10ba6:	bd16      	pop	{r1, r2, r4, pc}
   10ba8:	00020247 	.word	0x00020247
   10bac:	0000d9bd 	.word	0x0000d9bd
   10bb0:	20002b5c 	.word	0x20002b5c

00010bb4 <ExecuteLinkAdr>:
   10bb4:	220f      	movs	r2, #15
   10bb6:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bb8:	0005      	movs	r5, r0
   10bba:	7803      	ldrb	r3, [r0, #0]
   10bbc:	b089      	sub	sp, #36	; 0x24
   10bbe:	401a      	ands	r2, r3
   10bc0:	a905      	add	r1, sp, #20
   10bc2:	700a      	strb	r2, [r1, #0]
   10bc4:	aa04      	add	r2, sp, #16
   10bc6:	1d96      	adds	r6, r2, #6
   10bc8:	091b      	lsrs	r3, r3, #4
   10bca:	7153      	strb	r3, [r2, #5]
   10bcc:	1c41      	adds	r1, r0, #1
   10bce:	2202      	movs	r2, #2
   10bd0:	0030      	movs	r0, r6
   10bd2:	4b35      	ldr	r3, [pc, #212]	; (10ca8 <ExecuteLinkAdr+0xf4>)
   10bd4:	4798      	blx	r3
   10bd6:	2201      	movs	r2, #1
   10bd8:	1d2b      	adds	r3, r5, #4
   10bda:	9303      	str	r3, [sp, #12]
   10bdc:	78eb      	ldrb	r3, [r5, #3]
   10bde:	4f33      	ldr	r7, [pc, #204]	; (10cac <ExecuteLinkAdr+0xf8>)
   10be0:	4c33      	ldr	r4, [pc, #204]	; (10cb0 <ExecuteLinkAdr+0xfc>)
   10be2:	065b      	lsls	r3, r3, #25
   10be4:	0f5b      	lsrs	r3, r3, #29
   10be6:	9300      	str	r3, [sp, #0]
   10be8:	5d3b      	ldrb	r3, [r7, r4]
   10bea:	a906      	add	r1, sp, #24
   10bec:	4393      	bics	r3, r2
   10bee:	1892      	adds	r2, r2, r2
   10bf0:	4393      	bics	r3, r2
   10bf2:	3202      	adds	r2, #2
   10bf4:	4393      	bics	r3, r2
   10bf6:	553b      	strb	r3, [r7, r4]
   10bf8:	466b      	mov	r3, sp
   10bfa:	781b      	ldrb	r3, [r3, #0]
   10bfc:	8836      	ldrh	r6, [r6, #0]
   10bfe:	700b      	strb	r3, [r1, #0]
   10c00:	2038      	movs	r0, #56	; 0x38
   10c02:	4b2c      	ldr	r3, [pc, #176]	; (10cb4 <ExecuteLinkAdr+0x100>)
   10c04:	804e      	strh	r6, [r1, #2]
   10c06:	4798      	blx	r3
   10c08:	2808      	cmp	r0, #8
   10c0a:	d116      	bne.n	10c3a <ExecuteLinkAdr+0x86>
   10c0c:	466b      	mov	r3, sp
   10c0e:	781b      	ldrb	r3, [r3, #0]
   10c10:	a907      	add	r1, sp, #28
   10c12:	708b      	strb	r3, [r1, #2]
   10c14:	3014      	adds	r0, #20
   10c16:	4b28      	ldr	r3, [pc, #160]	; (10cb8 <ExecuteLinkAdr+0x104>)
   10c18:	800e      	strh	r6, [r1, #0]
   10c1a:	4798      	blx	r3
   10c1c:	2201      	movs	r2, #1
   10c1e:	5d3b      	ldrb	r3, [r7, r4]
   10c20:	2010      	movs	r0, #16
   10c22:	4313      	orrs	r3, r2
   10c24:	553b      	strb	r3, [r7, r4]
   10c26:	ab04      	add	r3, sp, #16
   10c28:	1d59      	adds	r1, r3, #5
   10c2a:	4b22      	ldr	r3, [pc, #136]	; (10cb4 <ExecuteLinkAdr+0x100>)
   10c2c:	4798      	blx	r3
   10c2e:	2808      	cmp	r0, #8
   10c30:	d103      	bne.n	10c3a <ExecuteLinkAdr+0x86>
   10c32:	2202      	movs	r2, #2
   10c34:	5d3b      	ldrb	r3, [r7, r4]
   10c36:	4313      	orrs	r3, r2
   10c38:	553b      	strb	r3, [r7, r4]
   10c3a:	af05      	add	r7, sp, #20
   10c3c:	4b1d      	ldr	r3, [pc, #116]	; (10cb4 <ExecuteLinkAdr+0x100>)
   10c3e:	0039      	movs	r1, r7
   10c40:	201d      	movs	r0, #29
   10c42:	4798      	blx	r3
   10c44:	4b19      	ldr	r3, [pc, #100]	; (10cac <ExecuteLinkAdr+0xf8>)
   10c46:	2808      	cmp	r0, #8
   10c48:	d103      	bne.n	10c52 <ExecuteLinkAdr+0x9e>
   10c4a:	2204      	movs	r2, #4
   10c4c:	5d19      	ldrb	r1, [r3, r4]
   10c4e:	430a      	orrs	r2, r1
   10c50:	551a      	strb	r2, [r3, r4]
   10c52:	2207      	movs	r2, #7
   10c54:	5d19      	ldrb	r1, [r3, r4]
   10c56:	4011      	ands	r1, r2
   10c58:	4291      	cmp	r1, r2
   10c5a:	d11d      	bne.n	10c98 <ExecuteLinkAdr+0xe4>
   10c5c:	4a17      	ldr	r2, [pc, #92]	; (10cbc <ExecuteLinkAdr+0x108>)
   10c5e:	2470      	movs	r4, #112	; 0x70
   10c60:	549e      	strb	r6, [r3, r2]
   10c62:	189a      	adds	r2, r3, r2
   10c64:	0a36      	lsrs	r6, r6, #8
   10c66:	7056      	strb	r6, [r2, #1]
   10c68:	aa04      	add	r2, sp, #16
   10c6a:	7950      	ldrb	r0, [r2, #5]
   10c6c:	2286      	movs	r2, #134	; 0x86
   10c6e:	0092      	lsls	r2, r2, #2
   10c70:	5498      	strb	r0, [r3, r2]
   10c72:	78ea      	ldrb	r2, [r5, #3]
   10c74:	4812      	ldr	r0, [pc, #72]	; (10cc0 <ExecuteLinkAdr+0x10c>)
   10c76:	0912      	lsrs	r2, r2, #4
   10c78:	400a      	ands	r2, r1
   10c7a:	5c19      	ldrb	r1, [r3, r0]
   10c7c:	0112      	lsls	r2, r2, #4
   10c7e:	43a1      	bics	r1, r4
   10c80:	430a      	orrs	r2, r1
   10c82:	541a      	strb	r2, [r3, r0]
   10c84:	78e9      	ldrb	r1, [r5, #3]
   10c86:	3c61      	subs	r4, #97	; 0x61
   10c88:	b2d2      	uxtb	r2, r2
   10c8a:	4021      	ands	r1, r4
   10c8c:	43a2      	bics	r2, r4
   10c8e:	430a      	orrs	r2, r1
   10c90:	541a      	strb	r2, [r3, r0]
   10c92:	7839      	ldrb	r1, [r7, #0]
   10c94:	4a0b      	ldr	r2, [pc, #44]	; (10cc4 <ExecuteLinkAdr+0x110>)
   10c96:	5499      	strb	r1, [r3, r2]
   10c98:	4904      	ldr	r1, [pc, #16]	; (10cac <ExecuteLinkAdr+0xf8>)
   10c9a:	4a0b      	ldr	r2, [pc, #44]	; (10cc8 <ExecuteLinkAdr+0x114>)
   10c9c:	9803      	ldr	r0, [sp, #12]
   10c9e:	5c8b      	ldrb	r3, [r1, r2]
   10ca0:	3301      	adds	r3, #1
   10ca2:	548b      	strb	r3, [r1, r2]
   10ca4:	b009      	add	sp, #36	; 0x24
   10ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10ca8:	00019d1d 	.word	0x00019d1d
   10cac:	20002b5c 	.word	0x20002b5c
   10cb0:	00000217 	.word	0x00000217
   10cb4:	0000d8b1 	.word	0x0000d8b1
   10cb8:	0000d9bd 	.word	0x0000d9bd
   10cbc:	0000021b 	.word	0x0000021b
   10cc0:	0000021d 	.word	0x0000021d
   10cc4:	00000219 	.word	0x00000219
   10cc8:	0000021a 	.word	0x0000021a

00010ccc <ExecuteDevTimeAns>:
   10ccc:	b510      	push	{r4, lr}
   10cce:	0001      	movs	r1, r0
   10cd0:	0004      	movs	r4, r0
   10cd2:	2204      	movs	r2, #4
   10cd4:	4b04      	ldr	r3, [pc, #16]	; (10ce8 <ExecuteDevTimeAns+0x1c>)
   10cd6:	4805      	ldr	r0, [pc, #20]	; (10cec <ExecuteDevTimeAns+0x20>)
   10cd8:	4798      	blx	r3
   10cda:	238b      	movs	r3, #139	; 0x8b
   10cdc:	7921      	ldrb	r1, [r4, #4]
   10cde:	4a04      	ldr	r2, [pc, #16]	; (10cf0 <ExecuteDevTimeAns+0x24>)
   10ce0:	009b      	lsls	r3, r3, #2
   10ce2:	1d60      	adds	r0, r4, #5
   10ce4:	54d1      	strb	r1, [r2, r3]
   10ce6:	bd10      	pop	{r4, pc}
   10ce8:	00019d1d 	.word	0x00019d1d
   10cec:	20002d84 	.word	0x20002d84
   10cf0:	20002b5c 	.word	0x20002b5c

00010cf4 <PrepareJoinRequestFrame>:
   10cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   10cf6:	2210      	movs	r2, #16
   10cf8:	4d22      	ldr	r5, [pc, #136]	; (10d84 <PrepareJoinRequestFrame+0x90>)
   10cfa:	4b23      	ldr	r3, [pc, #140]	; (10d88 <PrepareJoinRequestFrame+0x94>)
   10cfc:	32ff      	adds	r2, #255	; 0xff
   10cfe:	2100      	movs	r1, #0
   10d00:	0028      	movs	r0, r5
   10d02:	4798      	blx	r3
   10d04:	2300      	movs	r3, #0
   10d06:	4c21      	ldr	r4, [pc, #132]	; (10d8c <PrepareJoinRequestFrame+0x98>)
   10d08:	702b      	strb	r3, [r5, #0]
   10d0a:	4b21      	ldr	r3, [pc, #132]	; (10d90 <PrepareJoinRequestFrame+0x9c>)
   10d0c:	5ce3      	ldrb	r3, [r4, r3]
   10d0e:	2b00      	cmp	r3, #0
   10d10:	d006      	beq.n	10d20 <PrepareJoinRequestFrame+0x2c>
   10d12:	4920      	ldr	r1, [pc, #128]	; (10d94 <PrepareJoinRequestFrame+0xa0>)
   10d14:	2006      	movs	r0, #6
   10d16:	4e20      	ldr	r6, [pc, #128]	; (10d98 <PrepareJoinRequestFrame+0xa4>)
   10d18:	47b0      	blx	r6
   10d1a:	4920      	ldr	r1, [pc, #128]	; (10d9c <PrepareJoinRequestFrame+0xa8>)
   10d1c:	2007      	movs	r0, #7
   10d1e:	47b0      	blx	r6
   10d20:	2300      	movs	r3, #0
   10d22:	205c      	movs	r0, #92	; 0x5c
   10d24:	1ac1      	subs	r1, r0, r3
   10d26:	5c61      	ldrb	r1, [r4, r1]
   10d28:	18ea      	adds	r2, r5, r3
   10d2a:	3301      	adds	r3, #1
   10d2c:	7051      	strb	r1, [r2, #1]
   10d2e:	2b08      	cmp	r3, #8
   10d30:	d1f8      	bne.n	10d24 <PrepareJoinRequestFrame+0x30>
   10d32:	2300      	movs	r3, #0
   10d34:	2064      	movs	r0, #100	; 0x64
   10d36:	1ac1      	subs	r1, r0, r3
   10d38:	5c61      	ldrb	r1, [r4, r1]
   10d3a:	18ea      	adds	r2, r5, r3
   10d3c:	3301      	adds	r3, #1
   10d3e:	7251      	strb	r1, [r2, #9]
   10d40:	2b08      	cmp	r3, #8
   10d42:	d1f8      	bne.n	10d36 <PrepareJoinRequestFrame+0x42>
   10d44:	4b16      	ldr	r3, [pc, #88]	; (10da0 <PrepareJoinRequestFrame+0xac>)
   10d46:	4798      	blx	r3
   10d48:	4b16      	ldr	r3, [pc, #88]	; (10da4 <PrepareJoinRequestFrame+0xb0>)
   10d4a:	4917      	ldr	r1, [pc, #92]	; (10da8 <PrepareJoinRequestFrame+0xb4>)
   10d4c:	4798      	blx	r3
   10d4e:	34c4      	adds	r4, #196	; 0xc4
   10d50:	8021      	strh	r1, [r4, #0]
   10d52:	2202      	movs	r2, #2
   10d54:	0021      	movs	r1, r4
   10d56:	4815      	ldr	r0, [pc, #84]	; (10dac <PrepareJoinRequestFrame+0xb8>)
   10d58:	4c15      	ldr	r4, [pc, #84]	; (10db0 <PrepareJoinRequestFrame+0xbc>)
   10d5a:	47a0      	blx	r4
   10d5c:	2313      	movs	r3, #19
   10d5e:	4e15      	ldr	r6, [pc, #84]	; (10db4 <PrepareJoinRequestFrame+0xc0>)
   10d60:	9300      	str	r3, [sp, #0]
   10d62:	0032      	movs	r2, r6
   10d64:	002b      	movs	r3, r5
   10d66:	2100      	movs	r1, #0
   10d68:	4d13      	ldr	r5, [pc, #76]	; (10db8 <PrepareJoinRequestFrame+0xc4>)
   10d6a:	4814      	ldr	r0, [pc, #80]	; (10dbc <PrepareJoinRequestFrame+0xc8>)
   10d6c:	47a8      	blx	r5
   10d6e:	0031      	movs	r1, r6
   10d70:	2204      	movs	r2, #4
   10d72:	a803      	add	r0, sp, #12
   10d74:	47a0      	blx	r4
   10d76:	2204      	movs	r2, #4
   10d78:	a903      	add	r1, sp, #12
   10d7a:	4811      	ldr	r0, [pc, #68]	; (10dc0 <PrepareJoinRequestFrame+0xcc>)
   10d7c:	47a0      	blx	r4
   10d7e:	2017      	movs	r0, #23
   10d80:	b004      	add	sp, #16
   10d82:	bd70      	pop	{r4, r5, r6, pc}
   10d84:	20002d91 	.word	0x20002d91
   10d88:	00019e41 	.word	0x00019e41
   10d8c:	20002b5c 	.word	0x20002b5c
   10d90:	00000221 	.word	0x00000221
   10d94:	20002bb1 	.word	0x20002bb1
   10d98:	0000dcd5 	.word	0x0000dcd5
   10d9c:	20002bb9 	.word	0x20002bb9
   10da0:	00019fe1 	.word	0x00019fe1
   10da4:	00016899 	.word	0x00016899
   10da8:	0000ffff 	.word	0x0000ffff
   10dac:	20002da2 	.word	0x20002da2
   10db0:	00019d1d 	.word	0x00019d1d
   10db4:	20001110 	.word	0x20001110
   10db8:	0000dd7d 	.word	0x0000dd7d
   10dbc:	20002ba1 	.word	0x20002ba1
   10dc0:	20002da4 	.word	0x20002da4

00010dc4 <ConfigureRadioRx>:
   10dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dc6:	b087      	sub	sp, #28
   10dc8:	466b      	mov	r3, sp
   10dca:	2600      	movs	r6, #0
   10dcc:	1ddc      	adds	r4, r3, #7
   10dce:	71d8      	strb	r0, [r3, #7]
   10dd0:	729e      	strb	r6, [r3, #10]
   10dd2:	466a      	mov	r2, sp
   10dd4:	2301      	movs	r3, #1
   10dd6:	72d3      	strb	r3, [r2, #11]
   10dd8:	2215      	movs	r2, #21
   10dda:	ad03      	add	r5, sp, #12
   10ddc:	4f11      	ldr	r7, [pc, #68]	; (10e24 <ConfigureRadioRx+0x60>)
   10dde:	9100      	str	r1, [sp, #0]
   10de0:	446a      	add	r2, sp
   10de2:	0021      	movs	r1, r4
   10de4:	2023      	movs	r0, #35	; 0x23
   10de6:	80ae      	strh	r6, [r5, #4]
   10de8:	47b8      	blx	r7
   10dea:	2216      	movs	r2, #22
   10dec:	0021      	movs	r1, r4
   10dee:	446a      	add	r2, sp
   10df0:	2024      	movs	r0, #36	; 0x24
   10df2:	47b8      	blx	r7
   10df4:	2217      	movs	r2, #23
   10df6:	0021      	movs	r1, r4
   10df8:	446a      	add	r2, sp
   10dfa:	2025      	movs	r0, #37	; 0x25
   10dfc:	47b8      	blx	r7
   10dfe:	9b00      	ldr	r3, [sp, #0]
   10e00:	0028      	movs	r0, r5
   10e02:	9303      	str	r3, [sp, #12]
   10e04:	4b08      	ldr	r3, [pc, #32]	; (10e28 <ConfigureRadioRx+0x64>)
   10e06:	80ae      	strh	r6, [r5, #4]
   10e08:	4798      	blx	r3
   10e0a:	230a      	movs	r3, #10
   10e0c:	446b      	add	r3, sp
   10e0e:	0019      	movs	r1, r3
   10e10:	4c06      	ldr	r4, [pc, #24]	; (10e2c <ConfigureRadioRx+0x68>)
   10e12:	2014      	movs	r0, #20
   10e14:	47a0      	blx	r4
   10e16:	230b      	movs	r3, #11
   10e18:	446b      	add	r3, sp
   10e1a:	0019      	movs	r1, r3
   10e1c:	2006      	movs	r0, #6
   10e1e:	47a0      	blx	r4
   10e20:	b007      	add	sp, #28
   10e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e24:	0000d895 	.word	0x0000d895
   10e28:	000101d9 	.word	0x000101d9
   10e2c:	00014be1 	.word	0x00014be1

00010e30 <LorawanReceiveWindow1Callback>:
   10e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10e32:	4c18      	ldr	r4, [pc, #96]	; (10e94 <LorawanReceiveWindow1Callback+0x64>)
   10e34:	0023      	movs	r3, r4
   10e36:	337c      	adds	r3, #124	; 0x7c
   10e38:	781b      	ldrb	r3, [r3, #0]
   10e3a:	b25a      	sxtb	r2, r3
   10e3c:	2a00      	cmp	r2, #0
   10e3e:	db28      	blt.n	10e92 <LorawanReceiveWindow1Callback+0x62>
   10e40:	0022      	movs	r2, r4
   10e42:	32f4      	adds	r2, #244	; 0xf4
   10e44:	7812      	ldrb	r2, [r2, #0]
   10e46:	2a04      	cmp	r2, #4
   10e48:	d103      	bne.n	10e52 <LorawanReceiveWindow1Callback+0x22>
   10e4a:	07db      	lsls	r3, r3, #31
   10e4c:	d501      	bpl.n	10e52 <LorawanReceiveWindow1Callback+0x22>
   10e4e:	4b12      	ldr	r3, [pc, #72]	; (10e98 <LorawanReceiveWindow1Callback+0x68>)
   10e50:	4798      	blx	r3
   10e52:	0021      	movs	r1, r4
   10e54:	220e      	movs	r2, #14
   10e56:	317c      	adds	r1, #124	; 0x7c
   10e58:	780b      	ldrb	r3, [r1, #0]
   10e5a:	ad01      	add	r5, sp, #4
   10e5c:	4393      	bics	r3, r2
   10e5e:	001a      	movs	r2, r3
   10e60:	2306      	movs	r3, #6
   10e62:	4313      	orrs	r3, r2
   10e64:	0022      	movs	r2, r4
   10e66:	700b      	strb	r3, [r1, #0]
   10e68:	3268      	adds	r2, #104	; 0x68
   10e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10e6c:	7811      	ldrb	r1, [r2, #0]
   10e6e:	0a1b      	lsrs	r3, r3, #8
   10e70:	3469      	adds	r4, #105	; 0x69
   10e72:	0609      	lsls	r1, r1, #24
   10e74:	4319      	orrs	r1, r3
   10e76:	7820      	ldrb	r0, [r4, #0]
   10e78:	4b08      	ldr	r3, [pc, #32]	; (10e9c <LorawanReceiveWindow1Callback+0x6c>)
   10e7a:	4798      	blx	r3
   10e7c:	2300      	movs	r3, #0
   10e7e:	702b      	strb	r3, [r5, #0]
   10e80:	466b      	mov	r3, sp
   10e82:	0021      	movs	r1, r4
   10e84:	1d9a      	adds	r2, r3, #6
   10e86:	2003      	movs	r0, #3
   10e88:	4b05      	ldr	r3, [pc, #20]	; (10ea0 <LorawanReceiveWindow1Callback+0x70>)
   10e8a:	4798      	blx	r3
   10e8c:	0028      	movs	r0, r5
   10e8e:	4b05      	ldr	r3, [pc, #20]	; (10ea4 <LorawanReceiveWindow1Callback+0x74>)
   10e90:	4798      	blx	r3
   10e92:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10e94:	20002b5c 	.word	0x20002b5c
   10e98:	00014211 	.word	0x00014211
   10e9c:	00010dc5 	.word	0x00010dc5
   10ea0:	0000d895 	.word	0x0000d895
   10ea4:	00015de5 	.word	0x00015de5

00010ea8 <ConfigureRadioTx>:
   10ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10eaa:	2517      	movs	r5, #23
   10eac:	2300      	movs	r3, #0
   10eae:	2616      	movs	r6, #22
   10eb0:	2701      	movs	r7, #1
   10eb2:	b087      	sub	sp, #28
   10eb4:	ac01      	add	r4, sp, #4
   10eb6:	446d      	add	r5, sp
   10eb8:	9001      	str	r0, [sp, #4]
   10eba:	702b      	strb	r3, [r5, #0]
   10ebc:	0020      	movs	r0, r4
   10ebe:	4b10      	ldr	r3, [pc, #64]	; (10f00 <ConfigureRadioTx+0x58>)
   10ec0:	446e      	add	r6, sp
   10ec2:	9102      	str	r1, [sp, #8]
   10ec4:	9203      	str	r2, [sp, #12]
   10ec6:	7037      	strb	r7, [r6, #0]
   10ec8:	4798      	blx	r3
   10eca:	79e3      	ldrb	r3, [r4, #7]
   10ecc:	4c0d      	ldr	r4, [pc, #52]	; (10f04 <ConfigureRadioTx+0x5c>)
   10ece:	2b00      	cmp	r3, #0
   10ed0:	d00a      	beq.n	10ee8 <ConfigureRadioTx+0x40>
   10ed2:	4b0d      	ldr	r3, [pc, #52]	; (10f08 <ConfigureRadioTx+0x60>)
   10ed4:	4a0d      	ldr	r2, [pc, #52]	; (10f0c <ConfigureRadioTx+0x64>)
   10ed6:	490e      	ldr	r1, [pc, #56]	; (10f10 <ConfigureRadioTx+0x68>)
   10ed8:	54d7      	strb	r7, [r2, r3]
   10eda:	200b      	movs	r0, #11
   10edc:	4b0d      	ldr	r3, [pc, #52]	; (10f14 <ConfigureRadioTx+0x6c>)
   10ede:	4798      	blx	r3
   10ee0:	210a      	movs	r1, #10
   10ee2:	200b      	movs	r0, #11
   10ee4:	4469      	add	r1, sp
   10ee6:	47a0      	blx	r4
   10ee8:	a903      	add	r1, sp, #12
   10eea:	2004      	movs	r0, #4
   10eec:	47a0      	blx	r4
   10eee:	0031      	movs	r1, r6
   10ef0:	2014      	movs	r0, #20
   10ef2:	47a0      	blx	r4
   10ef4:	0029      	movs	r1, r5
   10ef6:	2006      	movs	r0, #6
   10ef8:	47a0      	blx	r4
   10efa:	b007      	add	sp, #28
   10efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10efe:	46c0      	nop			; (mov r8, r8)
   10f00:	000101d9 	.word	0x000101d9
   10f04:	00014be1 	.word	0x00014be1
   10f08:	00000216 	.word	0x00000216
   10f0c:	20002b5c 	.word	0x20002b5c
   10f10:	20002d71 	.word	0x20002d71
   10f14:	00014af1 	.word	0x00014af1

00010f18 <LorawanGetChAndInitiateRadioTransmit>:
   10f18:	2301      	movs	r3, #1
   10f1a:	b530      	push	{r4, r5, lr}
   10f1c:	4c44      	ldr	r4, [pc, #272]	; (11030 <LorawanGetChAndInitiateRadioTransmit+0x118>)
   10f1e:	b089      	sub	sp, #36	; 0x24
   10f20:	a902      	add	r1, sp, #8
   10f22:	700b      	strb	r3, [r1, #0]
   10f24:	0023      	movs	r3, r4
   10f26:	33e1      	adds	r3, #225	; 0xe1
   10f28:	781b      	ldrb	r3, [r3, #0]
   10f2a:	704b      	strb	r3, [r1, #1]
   10f2c:	0023      	movs	r3, r4
   10f2e:	33df      	adds	r3, #223	; 0xdf
   10f30:	781b      	ldrb	r3, [r3, #0]
   10f32:	708b      	strb	r3, [r1, #2]
   10f34:	0023      	movs	r3, r4
   10f36:	33f4      	adds	r3, #244	; 0xf4
   10f38:	781b      	ldrb	r3, [r3, #0]
   10f3a:	2b01      	cmp	r3, #1
   10f3c:	d108      	bne.n	10f50 <LorawanGetChAndInitiateRadioTransmit+0x38>
   10f3e:	0020      	movs	r0, r4
   10f40:	220e      	movs	r2, #14
   10f42:	307c      	adds	r0, #124	; 0x7c
   10f44:	7803      	ldrb	r3, [r0, #0]
   10f46:	4393      	bics	r3, r2
   10f48:	001a      	movs	r2, r3
   10f4a:	230c      	movs	r3, #12
   10f4c:	4313      	orrs	r3, r2
   10f4e:	7003      	strb	r3, [r0, #0]
   10f50:	aa05      	add	r2, sp, #20
   10f52:	202f      	movs	r0, #47	; 0x2f
   10f54:	4d37      	ldr	r5, [pc, #220]	; (11034 <LorawanGetChAndInitiateRadioTransmit+0x11c>)
   10f56:	47a8      	blx	r5
   10f58:	0023      	movs	r3, r4
   10f5a:	2808      	cmp	r0, #8
   10f5c:	d131      	bne.n	10fc2 <LorawanGetChAndInitiateRadioTransmit+0xaa>
   10f5e:	33f4      	adds	r3, #244	; 0xf4
   10f60:	781b      	ldrb	r3, [r3, #0]
   10f62:	ad03      	add	r5, sp, #12
   10f64:	2b04      	cmp	r3, #4
   10f66:	d104      	bne.n	10f72 <LorawanGetChAndInitiateRadioTransmit+0x5a>
   10f68:	3b03      	subs	r3, #3
   10f6a:	702b      	strb	r3, [r5, #0]
   10f6c:	0028      	movs	r0, r5
   10f6e:	4b32      	ldr	r3, [pc, #200]	; (11038 <LorawanGetChAndInitiateRadioTransmit+0x120>)
   10f70:	4798      	blx	r3
   10f72:	9805      	ldr	r0, [sp, #20]
   10f74:	4b31      	ldr	r3, [pc, #196]	; (1103c <LorawanGetChAndInitiateRadioTransmit+0x124>)
   10f76:	9906      	ldr	r1, [sp, #24]
   10f78:	9a07      	ldr	r2, [sp, #28]
   10f7a:	4798      	blx	r3
   10f7c:	0023      	movs	r3, r4
   10f7e:	33c6      	adds	r3, #198	; 0xc6
   10f80:	881b      	ldrh	r3, [r3, #0]
   10f82:	0028      	movs	r0, r5
   10f84:	702b      	strb	r3, [r5, #0]
   10f86:	4b2e      	ldr	r3, [pc, #184]	; (11040 <LorawanGetChAndInitiateRadioTransmit+0x128>)
   10f88:	606b      	str	r3, [r5, #4]
   10f8a:	4b2e      	ldr	r3, [pc, #184]	; (11044 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
   10f8c:	4798      	blx	r3
   10f8e:	2800      	cmp	r0, #0
   10f90:	d109      	bne.n	10fa6 <LorawanGetChAndInitiateRadioTransmit+0x8e>
   10f92:	220e      	movs	r2, #14
   10f94:	347c      	adds	r4, #124	; 0x7c
   10f96:	7823      	ldrb	r3, [r4, #0]
   10f98:	4393      	bics	r3, r2
   10f9a:	001a      	movs	r2, r3
   10f9c:	2302      	movs	r3, #2
   10f9e:	4313      	orrs	r3, r2
   10fa0:	7023      	strb	r3, [r4, #0]
   10fa2:	b009      	add	sp, #36	; 0x24
   10fa4:	bd30      	pop	{r4, r5, pc}
   10fa6:	2200      	movs	r2, #0
   10fa8:	4b27      	ldr	r3, [pc, #156]	; (11048 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10faa:	4928      	ldr	r1, [pc, #160]	; (1104c <LorawanGetChAndInitiateRadioTransmit+0x134>)
   10fac:	5ce3      	ldrb	r3, [r4, r3]
   10fae:	34f3      	adds	r4, #243	; 0xf3
   10fb0:	4359      	muls	r1, r3
   10fb2:	4b27      	ldr	r3, [pc, #156]	; (11050 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   10fb4:	7820      	ldrb	r0, [r4, #0]
   10fb6:	18c9      	adds	r1, r1, r3
   10fb8:	4b26      	ldr	r3, [pc, #152]	; (11054 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
   10fba:	9200      	str	r2, [sp, #0]
   10fbc:	4c26      	ldr	r4, [pc, #152]	; (11058 <LorawanGetChAndInitiateRadioTransmit+0x140>)
   10fbe:	47a0      	blx	r4
   10fc0:	e7ef      	b.n	10fa2 <LorawanGetChAndInitiateRadioTransmit+0x8a>
   10fc2:	33ff      	adds	r3, #255	; 0xff
   10fc4:	7c5b      	ldrb	r3, [r3, #17]
   10fc6:	079a      	lsls	r2, r3, #30
   10fc8:	d515      	bpl.n	10ff6 <LorawanGetChAndInitiateRadioTransmit+0xde>
   10fca:	aa03      	add	r2, sp, #12
   10fcc:	4923      	ldr	r1, [pc, #140]	; (1105c <LorawanGetChAndInitiateRadioTransmit+0x144>)
   10fce:	2026      	movs	r0, #38	; 0x26
   10fd0:	47a8      	blx	r5
   10fd2:	9b03      	ldr	r3, [sp, #12]
   10fd4:	1c5a      	adds	r2, r3, #1
   10fd6:	d001      	beq.n	10fdc <LorawanGetChAndInitiateRadioTransmit+0xc4>
   10fd8:	3314      	adds	r3, #20
   10fda:	9303      	str	r3, [sp, #12]
   10fdc:	21fa      	movs	r1, #250	; 0xfa
   10fde:	4b1a      	ldr	r3, [pc, #104]	; (11048 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   10fe0:	9a03      	ldr	r2, [sp, #12]
   10fe2:	5ce3      	ldrb	r3, [r4, r3]
   10fe4:	0089      	lsls	r1, r1, #2
   10fe6:	1ad3      	subs	r3, r2, r3
   10fe8:	2200      	movs	r2, #0
   10fea:	4359      	muls	r1, r3
   10fec:	34e9      	adds	r4, #233	; 0xe9
   10fee:	7820      	ldrb	r0, [r4, #0]
   10ff0:	9200      	str	r2, [sp, #0]
   10ff2:	4b1b      	ldr	r3, [pc, #108]	; (11060 <LorawanGetChAndInitiateRadioTransmit+0x148>)
   10ff4:	e7e2      	b.n	10fbc <LorawanGetChAndInitiateRadioTransmit+0xa4>
   10ff6:	075b      	lsls	r3, r3, #29
   10ff8:	d508      	bpl.n	1100c <LorawanGetChAndInitiateRadioTransmit+0xf4>
   10ffa:	aa03      	add	r2, sp, #12
   10ffc:	4917      	ldr	r1, [pc, #92]	; (1105c <LorawanGetChAndInitiateRadioTransmit+0x144>)
   10ffe:	2033      	movs	r0, #51	; 0x33
   11000:	47a8      	blx	r5
   11002:	9b03      	ldr	r3, [sp, #12]
   11004:	1c5a      	adds	r2, r3, #1
   11006:	d0e9      	beq.n	10fdc <LorawanGetChAndInitiateRadioTransmit+0xc4>
   11008:	3301      	adds	r3, #1
   1100a:	e7e6      	b.n	10fda <LorawanGetChAndInitiateRadioTransmit+0xc2>
   1100c:	0023      	movs	r3, r4
   1100e:	2201      	movs	r2, #1
   11010:	338c      	adds	r3, #140	; 0x8c
   11012:	781b      	ldrb	r3, [r3, #0]
   11014:	401a      	ands	r2, r3
   11016:	d108      	bne.n	1102a <LorawanGetChAndInitiateRadioTransmit+0x112>
   11018:	4b0b      	ldr	r3, [pc, #44]	; (11048 <LorawanGetChAndInitiateRadioTransmit+0x130>)
   1101a:	490c      	ldr	r1, [pc, #48]	; (1104c <LorawanGetChAndInitiateRadioTransmit+0x134>)
   1101c:	5ce3      	ldrb	r3, [r4, r3]
   1101e:	34e9      	adds	r4, #233	; 0xe9
   11020:	4359      	muls	r1, r3
   11022:	4b0b      	ldr	r3, [pc, #44]	; (11050 <LorawanGetChAndInitiateRadioTransmit+0x138>)
   11024:	7820      	ldrb	r0, [r4, #0]
   11026:	18c9      	adds	r1, r1, r3
   11028:	e7e2      	b.n	10ff0 <LorawanGetChAndInitiateRadioTransmit+0xd8>
   1102a:	4b0e      	ldr	r3, [pc, #56]	; (11064 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
   1102c:	4798      	blx	r3
   1102e:	e7b8      	b.n	10fa2 <LorawanGetChAndInitiateRadioTransmit+0x8a>
   11030:	20002b5c 	.word	0x20002b5c
   11034:	0000d895 	.word	0x0000d895
   11038:	00015de5 	.word	0x00015de5
   1103c:	00010ea9 	.word	0x00010ea9
   11040:	20002da1 	.word	0x20002da1
   11044:	00015511 	.word	0x00015511
   11048:	0000021f 	.word	0x0000021f
   1104c:	fffffc18 	.word	0xfffffc18
   11050:	001e8480 	.word	0x001e8480
   11054:	00011069 	.word	0x00011069
   11058:	0000eda1 	.word	0x0000eda1
   1105c:	20002c3b 	.word	0x20002c3b
   11060:	00011121 	.word	0x00011121
   11064:	0001084d 	.word	0x0001084d

00011068 <TransmissionErrorCallback>:
   11068:	b530      	push	{r4, r5, lr}
   1106a:	4c22      	ldr	r4, [pc, #136]	; (110f4 <TransmissionErrorCallback+0x8c>)
   1106c:	2501      	movs	r5, #1
   1106e:	0023      	movs	r3, r4
   11070:	b08b      	sub	sp, #44	; 0x2c
   11072:	a903      	add	r1, sp, #12
   11074:	700d      	strb	r5, [r1, #0]
   11076:	33e1      	adds	r3, #225	; 0xe1
   11078:	781b      	ldrb	r3, [r3, #0]
   1107a:	aa07      	add	r2, sp, #28
   1107c:	704b      	strb	r3, [r1, #1]
   1107e:	0023      	movs	r3, r4
   11080:	33df      	adds	r3, #223	; 0xdf
   11082:	781b      	ldrb	r3, [r3, #0]
   11084:	202f      	movs	r0, #47	; 0x2f
   11086:	708b      	strb	r3, [r1, #2]
   11088:	4b1b      	ldr	r3, [pc, #108]	; (110f8 <TransmissionErrorCallback+0x90>)
   1108a:	4798      	blx	r3
   1108c:	2808      	cmp	r0, #8
   1108e:	d121      	bne.n	110d4 <TransmissionErrorCallback+0x6c>
   11090:	a804      	add	r0, sp, #16
   11092:	4b1a      	ldr	r3, [pc, #104]	; (110fc <TransmissionErrorCallback+0x94>)
   11094:	7005      	strb	r5, [r0, #0]
   11096:	4798      	blx	r3
   11098:	9807      	ldr	r0, [sp, #28]
   1109a:	4b19      	ldr	r3, [pc, #100]	; (11100 <TransmissionErrorCallback+0x98>)
   1109c:	9908      	ldr	r1, [sp, #32]
   1109e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   110a0:	4798      	blx	r3
   110a2:	0023      	movs	r3, r4
   110a4:	33c6      	adds	r3, #198	; 0xc6
   110a6:	881b      	ldrh	r3, [r3, #0]
   110a8:	a805      	add	r0, sp, #20
   110aa:	7003      	strb	r3, [r0, #0]
   110ac:	4b15      	ldr	r3, [pc, #84]	; (11104 <TransmissionErrorCallback+0x9c>)
   110ae:	6043      	str	r3, [r0, #4]
   110b0:	4b15      	ldr	r3, [pc, #84]	; (11108 <TransmissionErrorCallback+0xa0>)
   110b2:	4798      	blx	r3
   110b4:	2800      	cmp	r0, #0
   110b6:	d01a      	beq.n	110ee <TransmissionErrorCallback+0x86>
   110b8:	0023      	movs	r3, r4
   110ba:	33f4      	adds	r3, #244	; 0xf4
   110bc:	781b      	ldrb	r3, [r3, #0]
   110be:	42ab      	cmp	r3, r5
   110c0:	d108      	bne.n	110d4 <TransmissionErrorCallback+0x6c>
   110c2:	0021      	movs	r1, r4
   110c4:	220e      	movs	r2, #14
   110c6:	317c      	adds	r1, #124	; 0x7c
   110c8:	780b      	ldrb	r3, [r1, #0]
   110ca:	4393      	bics	r3, r2
   110cc:	001a      	movs	r2, r3
   110ce:	230c      	movs	r3, #12
   110d0:	4313      	orrs	r3, r2
   110d2:	700b      	strb	r3, [r1, #0]
   110d4:	2200      	movs	r2, #0
   110d6:	4b0d      	ldr	r3, [pc, #52]	; (1110c <TransmissionErrorCallback+0xa4>)
   110d8:	490d      	ldr	r1, [pc, #52]	; (11110 <TransmissionErrorCallback+0xa8>)
   110da:	5ce3      	ldrb	r3, [r4, r3]
   110dc:	34f3      	adds	r4, #243	; 0xf3
   110de:	4359      	muls	r1, r3
   110e0:	4b0c      	ldr	r3, [pc, #48]	; (11114 <TransmissionErrorCallback+0xac>)
   110e2:	7820      	ldrb	r0, [r4, #0]
   110e4:	18c9      	adds	r1, r1, r3
   110e6:	9200      	str	r2, [sp, #0]
   110e8:	4b0b      	ldr	r3, [pc, #44]	; (11118 <TransmissionErrorCallback+0xb0>)
   110ea:	4c0c      	ldr	r4, [pc, #48]	; (1111c <TransmissionErrorCallback+0xb4>)
   110ec:	47a0      	blx	r4
   110ee:	b00b      	add	sp, #44	; 0x2c
   110f0:	bd30      	pop	{r4, r5, pc}
   110f2:	46c0      	nop			; (mov r8, r8)
   110f4:	20002b5c 	.word	0x20002b5c
   110f8:	0000d895 	.word	0x0000d895
   110fc:	00015de5 	.word	0x00015de5
   11100:	00010ea9 	.word	0x00010ea9
   11104:	20002da1 	.word	0x20002da1
   11108:	00015511 	.word	0x00015511
   1110c:	0000021f 	.word	0x0000021f
   11110:	fffffc18 	.word	0xfffffc18
   11114:	001e8480 	.word	0x001e8480
   11118:	00011069 	.word	0x00011069
   1111c:	0000eda1 	.word	0x0000eda1

00011120 <UnconfirmedTransmissionCallback>:
   11120:	b5f0      	push	{r4, r5, r6, r7, lr}
   11122:	4c37      	ldr	r4, [pc, #220]	; (11200 <UnconfirmedTransmissionCallback+0xe0>)
   11124:	b08b      	sub	sp, #44	; 0x2c
   11126:	0023      	movs	r3, r4
   11128:	33c6      	adds	r3, #198	; 0xc6
   1112a:	881b      	ldrh	r3, [r3, #0]
   1112c:	af05      	add	r7, sp, #20
   1112e:	703b      	strb	r3, [r7, #0]
   11130:	4b34      	ldr	r3, [pc, #208]	; (11204 <UnconfirmedTransmissionCallback+0xe4>)
   11132:	a903      	add	r1, sp, #12
   11134:	9306      	str	r3, [sp, #24]
   11136:	2301      	movs	r3, #1
   11138:	700b      	strb	r3, [r1, #0]
   1113a:	0023      	movs	r3, r4
   1113c:	0026      	movs	r6, r4
   1113e:	33e1      	adds	r3, #225	; 0xe1
   11140:	781b      	ldrb	r3, [r3, #0]
   11142:	36df      	adds	r6, #223	; 0xdf
   11144:	704b      	strb	r3, [r1, #1]
   11146:	7833      	ldrb	r3, [r6, #0]
   11148:	aa07      	add	r2, sp, #28
   1114a:	202f      	movs	r0, #47	; 0x2f
   1114c:	4d2e      	ldr	r5, [pc, #184]	; (11208 <UnconfirmedTransmissionCallback+0xe8>)
   1114e:	708b      	strb	r3, [r1, #2]
   11150:	47a8      	blx	r5
   11152:	2808      	cmp	r0, #8
   11154:	d12b      	bne.n	111ae <UnconfirmedTransmissionCallback+0x8e>
   11156:	2301      	movs	r3, #1
   11158:	a804      	add	r0, sp, #16
   1115a:	7003      	strb	r3, [r0, #0]
   1115c:	4b2b      	ldr	r3, [pc, #172]	; (1120c <UnconfirmedTransmissionCallback+0xec>)
   1115e:	4798      	blx	r3
   11160:	9807      	ldr	r0, [sp, #28]
   11162:	4b2b      	ldr	r3, [pc, #172]	; (11210 <UnconfirmedTransmissionCallback+0xf0>)
   11164:	9908      	ldr	r1, [sp, #32]
   11166:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11168:	4798      	blx	r3
   1116a:	0038      	movs	r0, r7
   1116c:	4b29      	ldr	r3, [pc, #164]	; (11214 <UnconfirmedTransmissionCallback+0xf4>)
   1116e:	4798      	blx	r3
   11170:	2800      	cmp	r0, #0
   11172:	d01a      	beq.n	111aa <UnconfirmedTransmissionCallback+0x8a>
   11174:	0023      	movs	r3, r4
   11176:	33f4      	adds	r3, #244	; 0xf4
   11178:	781b      	ldrb	r3, [r3, #0]
   1117a:	2b01      	cmp	r3, #1
   1117c:	d108      	bne.n	11190 <UnconfirmedTransmissionCallback+0x70>
   1117e:	0021      	movs	r1, r4
   11180:	220e      	movs	r2, #14
   11182:	317c      	adds	r1, #124	; 0x7c
   11184:	780b      	ldrb	r3, [r1, #0]
   11186:	4393      	bics	r3, r2
   11188:	001a      	movs	r2, r3
   1118a:	230c      	movs	r3, #12
   1118c:	4313      	orrs	r3, r2
   1118e:	700b      	strb	r3, [r1, #0]
   11190:	2200      	movs	r2, #0
   11192:	4b21      	ldr	r3, [pc, #132]	; (11218 <UnconfirmedTransmissionCallback+0xf8>)
   11194:	4921      	ldr	r1, [pc, #132]	; (1121c <UnconfirmedTransmissionCallback+0xfc>)
   11196:	5ce3      	ldrb	r3, [r4, r3]
   11198:	34f3      	adds	r4, #243	; 0xf3
   1119a:	4359      	muls	r1, r3
   1119c:	4b20      	ldr	r3, [pc, #128]	; (11220 <UnconfirmedTransmissionCallback+0x100>)
   1119e:	7820      	ldrb	r0, [r4, #0]
   111a0:	18c9      	adds	r1, r1, r3
   111a2:	4b20      	ldr	r3, [pc, #128]	; (11224 <UnconfirmedTransmissionCallback+0x104>)
   111a4:	9200      	str	r2, [sp, #0]
   111a6:	4c20      	ldr	r4, [pc, #128]	; (11228 <UnconfirmedTransmissionCallback+0x108>)
   111a8:	47a0      	blx	r4
   111aa:	b00b      	add	sp, #44	; 0x2c
   111ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111ae:	23fa      	movs	r3, #250	; 0xfa
   111b0:	00db      	lsls	r3, r3, #3
   111b2:	9304      	str	r3, [sp, #16]
   111b4:	0023      	movs	r3, r4
   111b6:	33ff      	adds	r3, #255	; 0xff
   111b8:	7c5b      	ldrb	r3, [r3, #17]
   111ba:	079a      	lsls	r2, r3, #30
   111bc:	d515      	bpl.n	111ea <UnconfirmedTransmissionCallback+0xca>
   111be:	aa04      	add	r2, sp, #16
   111c0:	0031      	movs	r1, r6
   111c2:	2026      	movs	r0, #38	; 0x26
   111c4:	47a8      	blx	r5
   111c6:	9b04      	ldr	r3, [sp, #16]
   111c8:	1c5a      	adds	r2, r3, #1
   111ca:	d001      	beq.n	111d0 <UnconfirmedTransmissionCallback+0xb0>
   111cc:	3314      	adds	r3, #20
   111ce:	9304      	str	r3, [sp, #16]
   111d0:	4b11      	ldr	r3, [pc, #68]	; (11218 <UnconfirmedTransmissionCallback+0xf8>)
   111d2:	9a04      	ldr	r2, [sp, #16]
   111d4:	5ce3      	ldrb	r3, [r4, r3]
   111d6:	21fa      	movs	r1, #250	; 0xfa
   111d8:	1ad3      	subs	r3, r2, r3
   111da:	2200      	movs	r2, #0
   111dc:	0089      	lsls	r1, r1, #2
   111de:	34e9      	adds	r4, #233	; 0xe9
   111e0:	4359      	muls	r1, r3
   111e2:	7820      	ldrb	r0, [r4, #0]
   111e4:	4b11      	ldr	r3, [pc, #68]	; (1122c <UnconfirmedTransmissionCallback+0x10c>)
   111e6:	9200      	str	r2, [sp, #0]
   111e8:	e7dd      	b.n	111a6 <UnconfirmedTransmissionCallback+0x86>
   111ea:	075b      	lsls	r3, r3, #29
   111ec:	d5f0      	bpl.n	111d0 <UnconfirmedTransmissionCallback+0xb0>
   111ee:	aa04      	add	r2, sp, #16
   111f0:	0031      	movs	r1, r6
   111f2:	2033      	movs	r0, #51	; 0x33
   111f4:	47a8      	blx	r5
   111f6:	9b04      	ldr	r3, [sp, #16]
   111f8:	1c5a      	adds	r2, r3, #1
   111fa:	d0e9      	beq.n	111d0 <UnconfirmedTransmissionCallback+0xb0>
   111fc:	3301      	adds	r3, #1
   111fe:	e7e6      	b.n	111ce <UnconfirmedTransmissionCallback+0xae>
   11200:	20002b5c 	.word	0x20002b5c
   11204:	20002da1 	.word	0x20002da1
   11208:	0000d895 	.word	0x0000d895
   1120c:	00015de5 	.word	0x00015de5
   11210:	00010ea9 	.word	0x00010ea9
   11214:	00015511 	.word	0x00015511
   11218:	0000021f 	.word	0x0000021f
   1121c:	fffffc18 	.word	0xfffffc18
   11220:	001e8480 	.word	0x001e8480
   11224:	00011069 	.word	0x00011069
   11228:	0000eda1 	.word	0x0000eda1
   1122c:	00011121 	.word	0x00011121

00011230 <UpdateJoinInProgress>:
   11230:	b570      	push	{r4, r5, r6, lr}
   11232:	2504      	movs	r5, #4
   11234:	4c0a      	ldr	r4, [pc, #40]	; (11260 <UpdateJoinInProgress+0x30>)
   11236:	0002      	movs	r2, r0
   11238:	0021      	movs	r1, r4
   1123a:	348c      	adds	r4, #140	; 0x8c
   1123c:	7826      	ldrb	r6, [r4, #0]
   1123e:	2001      	movs	r0, #1
   11240:	4335      	orrs	r5, r6
   11242:	7025      	strb	r5, [r4, #0]
   11244:	2407      	movs	r4, #7
   11246:	4022      	ands	r2, r4
   11248:	4082      	lsls	r2, r0
   1124a:	317c      	adds	r1, #124	; 0x7c
   1124c:	780b      	ldrb	r3, [r1, #0]
   1124e:	1924      	adds	r4, r4, r4
   11250:	4383      	bics	r3, r0
   11252:	43a3      	bics	r3, r4
   11254:	4313      	orrs	r3, r2
   11256:	700b      	strb	r3, [r1, #0]
   11258:	210b      	movs	r1, #11
   1125a:	4b02      	ldr	r3, [pc, #8]	; (11264 <UpdateJoinInProgress+0x34>)
   1125c:	4798      	blx	r3
   1125e:	bd70      	pop	{r4, r5, r6, pc}
   11260:	20002b5c 	.word	0x20002b5c
   11264:	0000e071 	.word	0x0000e071

00011268 <LORAWAN_Join>:
   11268:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1126a:	4c33      	ldr	r4, [pc, #204]	; (11338 <LORAWAN_Join+0xd0>)
   1126c:	0006      	movs	r6, r0
   1126e:	0023      	movs	r3, r4
   11270:	337c      	adds	r3, #124	; 0x7c
   11272:	781b      	ldrb	r3, [r3, #0]
   11274:	200f      	movs	r0, #15
   11276:	b25a      	sxtb	r2, r3
   11278:	2a00      	cmp	r2, #0
   1127a:	db4a      	blt.n	11312 <LORAWAN_Join+0xaa>
   1127c:	3803      	subs	r0, #3
   1127e:	065b      	lsls	r3, r3, #25
   11280:	d447      	bmi.n	11312 <LORAWAN_Join+0xaa>
   11282:	0023      	movs	r3, r4
   11284:	338c      	adds	r3, #140	; 0x8c
   11286:	781b      	ldrb	r3, [r3, #0]
   11288:	3007      	adds	r0, #7
   1128a:	075b      	lsls	r3, r3, #29
   1128c:	d441      	bmi.n	11312 <LORAWAN_Join+0xaa>
   1128e:	0023      	movs	r3, r4
   11290:	33f4      	adds	r3, #244	; 0xf4
   11292:	781b      	ldrb	r3, [r3, #0]
   11294:	2b04      	cmp	r3, #4
   11296:	d037      	beq.n	11308 <LORAWAN_Join+0xa0>
   11298:	0023      	movs	r3, r4
   1129a:	33f4      	adds	r3, #244	; 0xf4
   1129c:	781b      	ldrb	r3, [r3, #0]
   1129e:	2b01      	cmp	r3, #1
   112a0:	d105      	bne.n	112ae <LORAWAN_Join+0x46>
   112a2:	0023      	movs	r3, r4
   112a4:	337c      	adds	r3, #124	; 0x7c
   112a6:	781a      	ldrb	r2, [r3, #0]
   112a8:	230e      	movs	r3, #14
   112aa:	421a      	tst	r2, r3
   112ac:	d130      	bne.n	11310 <LORAWAN_Join+0xa8>
   112ae:	2102      	movs	r1, #2
   112b0:	2001      	movs	r0, #1
   112b2:	4d22      	ldr	r5, [pc, #136]	; (1133c <LORAWAN_Join+0xd4>)
   112b4:	7026      	strb	r6, [r4, #0]
   112b6:	47a8      	blx	r5
   112b8:	0023      	movs	r3, r4
   112ba:	33d6      	adds	r3, #214	; 0xd6
   112bc:	781b      	ldrb	r3, [r3, #0]
   112be:	2e00      	cmp	r6, #0
   112c0:	d128      	bne.n	11314 <LORAWAN_Join+0xac>
   112c2:	200b      	movs	r0, #11
   112c4:	4003      	ands	r3, r0
   112c6:	4283      	cmp	r3, r0
   112c8:	d003      	beq.n	112d2 <LORAWAN_Join+0x6a>
   112ca:	4b1d      	ldr	r3, [pc, #116]	; (11340 <LORAWAN_Join+0xd8>)
   112cc:	5ce3      	ldrb	r3, [r4, r3]
   112ce:	2b00      	cmp	r3, #0
   112d0:	d01f      	beq.n	11312 <LORAWAN_Join+0xaa>
   112d2:	0023      	movs	r3, r4
   112d4:	337c      	adds	r3, #124	; 0x7c
   112d6:	781b      	ldrb	r3, [r3, #0]
   112d8:	07db      	lsls	r3, r3, #31
   112da:	d503      	bpl.n	112e4 <LORAWAN_Join+0x7c>
   112dc:	2100      	movs	r1, #0
   112de:	203b      	movs	r0, #59	; 0x3b
   112e0:	4b18      	ldr	r3, [pc, #96]	; (11344 <LORAWAN_Join+0xdc>)
   112e2:	4798      	blx	r3
   112e4:	0022      	movs	r2, r4
   112e6:	2001      	movs	r0, #1
   112e8:	327c      	adds	r2, #124	; 0x7c
   112ea:	7813      	ldrb	r3, [r2, #0]
   112ec:	348c      	adds	r4, #140	; 0x8c
   112ee:	4383      	bics	r3, r0
   112f0:	7013      	strb	r3, [r2, #0]
   112f2:	2304      	movs	r3, #4
   112f4:	7822      	ldrb	r2, [r4, #0]
   112f6:	210b      	movs	r1, #11
   112f8:	4313      	orrs	r3, r2
   112fa:	7023      	strb	r3, [r4, #0]
   112fc:	47a8      	blx	r5
   112fe:	2000      	movs	r0, #0
   11300:	4b11      	ldr	r3, [pc, #68]	; (11348 <LORAWAN_Join+0xe0>)
   11302:	4798      	blx	r3
   11304:	2008      	movs	r0, #8
   11306:	e004      	b.n	11312 <LORAWAN_Join+0xaa>
   11308:	4b10      	ldr	r3, [pc, #64]	; (1134c <LORAWAN_Join+0xe4>)
   1130a:	4798      	blx	r3
   1130c:	2808      	cmp	r0, #8
   1130e:	d0c3      	beq.n	11298 <LORAWAN_Join+0x30>
   11310:	2011      	movs	r0, #17
   11312:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   11314:	2234      	movs	r2, #52	; 0x34
   11316:	200b      	movs	r0, #11
   11318:	4013      	ands	r3, r2
   1131a:	4293      	cmp	r3, r2
   1131c:	d1f9      	bne.n	11312 <LORAWAN_Join+0xaa>
   1131e:	3804      	subs	r0, #4
   11320:	4b0b      	ldr	r3, [pc, #44]	; (11350 <LORAWAN_Join+0xe8>)
   11322:	4798      	blx	r3
   11324:	2200      	movs	r2, #0
   11326:	34f2      	adds	r4, #242	; 0xf2
   11328:	7820      	ldrb	r0, [r4, #0]
   1132a:	4b0a      	ldr	r3, [pc, #40]	; (11354 <LORAWAN_Join+0xec>)
   1132c:	9200      	str	r2, [sp, #0]
   1132e:	490a      	ldr	r1, [pc, #40]	; (11358 <LORAWAN_Join+0xf0>)
   11330:	4c0a      	ldr	r4, [pc, #40]	; (1135c <LORAWAN_Join+0xf4>)
   11332:	47a0      	blx	r4
   11334:	e7e6      	b.n	11304 <LORAWAN_Join+0x9c>
   11336:	46c0      	nop			; (mov r8, r8)
   11338:	20002b5c 	.word	0x20002b5c
   1133c:	0000e071 	.word	0x0000e071
   11340:	00000221 	.word	0x00000221
   11344:	0000d9bd 	.word	0x0000d9bd
   11348:	00014a6d 	.word	0x00014a6d
   1134c:	00014171 	.word	0x00014171
   11350:	00011231 	.word	0x00011231
   11354:	0001006d 	.word	0x0001006d
   11358:	0000c350 	.word	0x0000c350
   1135c:	0000eda1 	.word	0x0000eda1

00011360 <EncryptFRMPayload>:
   11360:	b5f0      	push	{r4, r5, r6, r7, lr}
   11362:	0007      	movs	r7, r0
   11364:	2401      	movs	r4, #1
   11366:	b089      	sub	sp, #36	; 0x24
   11368:	9306      	str	r3, [sp, #24]
   1136a:	ab10      	add	r3, sp, #64	; 0x40
   1136c:	781d      	ldrb	r5, [r3, #0]
   1136e:	090b      	lsrs	r3, r1, #4
   11370:	9104      	str	r1, [sp, #16]
   11372:	9205      	str	r2, [sp, #20]
   11374:	9303      	str	r3, [sp, #12]
   11376:	9b03      	ldr	r3, [sp, #12]
   11378:	429c      	cmp	r4, r3
   1137a:	d907      	bls.n	1138c <EncryptFRMPayload+0x2c>
   1137c:	260f      	movs	r6, #15
   1137e:	9b04      	ldr	r3, [sp, #16]
   11380:	4033      	ands	r3, r6
   11382:	1e1e      	subs	r6, r3, #0
   11384:	d126      	bne.n	113d4 <EncryptFRMPayload+0x74>
   11386:	2000      	movs	r0, #0
   11388:	b009      	add	sp, #36	; 0x24
   1138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1138c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1138e:	0022      	movs	r2, r4
   11390:	9300      	str	r3, [sp, #0]
   11392:	9906      	ldr	r1, [sp, #24]
   11394:	2301      	movs	r3, #1
   11396:	9805      	ldr	r0, [sp, #20]
   11398:	4e1e      	ldr	r6, [pc, #120]	; (11414 <EncryptFRMPayload+0xb4>)
   1139a:	47b0      	blx	r6
   1139c:	4e1e      	ldr	r6, [pc, #120]	; (11418 <EncryptFRMPayload+0xb8>)
   1139e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   113a0:	2101      	movs	r1, #1
   113a2:	0030      	movs	r0, r6
   113a4:	4b1d      	ldr	r3, [pc, #116]	; (1141c <EncryptFRMPayload+0xbc>)
   113a6:	4798      	blx	r3
   113a8:	2800      	cmp	r0, #0
   113aa:	d1ed      	bne.n	11388 <EncryptFRMPayload+0x28>
   113ac:	1e63      	subs	r3, r4, #1
   113ae:	011b      	lsls	r3, r3, #4
   113b0:	18fb      	adds	r3, r7, r3
   113b2:	9307      	str	r3, [sp, #28]
   113b4:	9b07      	ldr	r3, [sp, #28]
   113b6:	182a      	adds	r2, r5, r0
   113b8:	5c19      	ldrb	r1, [r3, r0]
   113ba:	5d83      	ldrb	r3, [r0, r6]
   113bc:	b2d2      	uxtb	r2, r2
   113be:	4059      	eors	r1, r3
   113c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   113c2:	3001      	adds	r0, #1
   113c4:	5499      	strb	r1, [r3, r2]
   113c6:	2810      	cmp	r0, #16
   113c8:	d1f4      	bne.n	113b4 <EncryptFRMPayload+0x54>
   113ca:	3510      	adds	r5, #16
   113cc:	3401      	adds	r4, #1
   113ce:	b2ed      	uxtb	r5, r5
   113d0:	b2e4      	uxtb	r4, r4
   113d2:	e7d0      	b.n	11376 <EncryptFRMPayload+0x16>
   113d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   113d6:	0022      	movs	r2, r4
   113d8:	9300      	str	r3, [sp, #0]
   113da:	9906      	ldr	r1, [sp, #24]
   113dc:	2301      	movs	r3, #1
   113de:	9805      	ldr	r0, [sp, #20]
   113e0:	4c0c      	ldr	r4, [pc, #48]	; (11414 <EncryptFRMPayload+0xb4>)
   113e2:	47a0      	blx	r4
   113e4:	4c0c      	ldr	r4, [pc, #48]	; (11418 <EncryptFRMPayload+0xb8>)
   113e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   113e8:	2101      	movs	r1, #1
   113ea:	0020      	movs	r0, r4
   113ec:	4b0b      	ldr	r3, [pc, #44]	; (1141c <EncryptFRMPayload+0xbc>)
   113ee:	4798      	blx	r3
   113f0:	2800      	cmp	r0, #0
   113f2:	d1c9      	bne.n	11388 <EncryptFRMPayload+0x28>
   113f4:	9b03      	ldr	r3, [sp, #12]
   113f6:	011b      	lsls	r3, r3, #4
   113f8:	18fb      	adds	r3, r7, r3
   113fa:	5d07      	ldrb	r7, [r0, r4]
   113fc:	5c19      	ldrb	r1, [r3, r0]
   113fe:	182a      	adds	r2, r5, r0
   11400:	4079      	eors	r1, r7
   11402:	9f11      	ldr	r7, [sp, #68]	; 0x44
   11404:	b2d2      	uxtb	r2, r2
   11406:	3001      	adds	r0, #1
   11408:	54b9      	strb	r1, [r7, r2]
   1140a:	b2c2      	uxtb	r2, r0
   1140c:	4296      	cmp	r6, r2
   1140e:	d8f4      	bhi.n	113fa <EncryptFRMPayload+0x9a>
   11410:	e7b9      	b.n	11386 <EncryptFRMPayload+0x26>
   11412:	46c0      	nop			; (mov r8, r8)
   11414:	00010199 	.word	0x00010199
   11418:	20001110 	.word	0x20001110
   1141c:	0000dc11 	.word	0x0000dc11

00011420 <UpdateTransactionCompleteCbParams>:
   11420:	2385      	movs	r3, #133	; 0x85
   11422:	2201      	movs	r2, #1
   11424:	b570      	push	{r4, r5, r6, lr}
   11426:	0001      	movs	r1, r0
   11428:	4c14      	ldr	r4, [pc, #80]	; (1147c <UpdateTransactionCompleteCbParams+0x5c>)
   1142a:	4815      	ldr	r0, [pc, #84]	; (11480 <UpdateTransactionCompleteCbParams+0x60>)
   1142c:	009b      	lsls	r3, r3, #2
   1142e:	54e2      	strb	r2, [r4, r3]
   11430:	7842      	ldrb	r2, [r0, #1]
   11432:	7803      	ldrb	r3, [r0, #0]
   11434:	0212      	lsls	r2, r2, #8
   11436:	431a      	orrs	r2, r3
   11438:	7883      	ldrb	r3, [r0, #2]
   1143a:	041b      	lsls	r3, r3, #16
   1143c:	431a      	orrs	r2, r3
   1143e:	78c3      	ldrb	r3, [r0, #3]
   11440:	061b      	lsls	r3, r3, #24
   11442:	4313      	orrs	r3, r2
   11444:	d010      	beq.n	11468 <UpdateTransactionCompleteCbParams+0x48>
   11446:	0022      	movs	r2, r4
   11448:	2504      	movs	r5, #4
   1144a:	32f8      	adds	r2, #248	; 0xf8
   1144c:	6812      	ldr	r2, [r2, #0]
   1144e:	422a      	tst	r2, r5
   11450:	d00a      	beq.n	11468 <UpdateTransactionCompleteCbParams+0x48>
   11452:	0022      	movs	r2, r4
   11454:	32fc      	adds	r2, #252	; 0xfc
   11456:	6810      	ldr	r0, [r2, #0]
   11458:	2800      	cmp	r0, #0
   1145a:	d005      	beq.n	11468 <UpdateTransactionCompleteCbParams+0x48>
   1145c:	0022      	movs	r2, r4
   1145e:	32ff      	adds	r2, #255	; 0xff
   11460:	7151      	strb	r1, [r2, #5]
   11462:	7055      	strb	r5, [r2, #1]
   11464:	4907      	ldr	r1, [pc, #28]	; (11484 <UpdateTransactionCompleteCbParams+0x64>)
   11466:	4798      	blx	r3
   11468:	2385      	movs	r3, #133	; 0x85
   1146a:	009b      	lsls	r3, r3, #2
   1146c:	5ce3      	ldrb	r3, [r4, r3]
   1146e:	2b00      	cmp	r3, #0
   11470:	d002      	beq.n	11478 <UpdateTransactionCompleteCbParams+0x58>
   11472:	2300      	movs	r3, #0
   11474:	34fc      	adds	r4, #252	; 0xfc
   11476:	6023      	str	r3, [r4, #0]
   11478:	bd70      	pop	{r4, r5, r6, pc}
   1147a:	46c0      	nop			; (mov r8, r8)
   1147c:	20002b5c 	.word	0x20002b5c
   11480:	20002ea4 	.word	0x20002ea4
   11484:	20002c5c 	.word	0x20002c5c

00011488 <AssemblePacket>:
   11488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1148a:	2710      	movs	r7, #16
   1148c:	b08d      	sub	sp, #52	; 0x34
   1148e:	9306      	str	r3, [sp, #24]
   11490:	ab04      	add	r3, sp, #16
   11492:	839f      	strh	r7, [r3, #28]
   11494:	231e      	movs	r3, #30
   11496:	9208      	str	r2, [sp, #32]
   11498:	aa04      	add	r2, sp, #16
   1149a:	189b      	adds	r3, r3, r2
   1149c:	2500      	movs	r5, #0
   1149e:	2210      	movs	r2, #16
   114a0:	ac0a      	add	r4, sp, #40	; 0x28
   114a2:	9007      	str	r0, [sp, #28]
   114a4:	9109      	str	r1, [sp, #36]	; 0x24
   114a6:	32ff      	adds	r2, #255	; 0xff
   114a8:	0029      	movs	r1, r5
   114aa:	4eb5      	ldr	r6, [pc, #724]	; (11780 <AssemblePacket+0x2f8>)
   114ac:	7025      	strb	r5, [r4, #0]
   114ae:	48b5      	ldr	r0, [pc, #724]	; (11784 <AssemblePacket+0x2fc>)
   114b0:	801d      	strh	r5, [r3, #0]
   114b2:	47b0      	blx	r6
   114b4:	003a      	movs	r2, r7
   114b6:	0029      	movs	r1, r5
   114b8:	48b3      	ldr	r0, [pc, #716]	; (11788 <AssemblePacket+0x300>)
   114ba:	47b0      	blx	r6
   114bc:	221f      	movs	r2, #31
   114be:	7823      	ldrb	r3, [r4, #0]
   114c0:	9907      	ldr	r1, [sp, #28]
   114c2:	4013      	ands	r3, r2
   114c4:	42a9      	cmp	r1, r5
   114c6:	d043      	beq.n	11550 <AssemblePacket+0xc8>
   114c8:	3a9f      	subs	r2, #159	; 0x9f
   114ca:	4313      	orrs	r3, r2
   114cc:	7023      	strb	r3, [r4, #0]
   114ce:	4baf      	ldr	r3, [pc, #700]	; (1178c <AssemblePacket+0x304>)
   114d0:	3281      	adds	r2, #129	; 0x81
   114d2:	338c      	adds	r3, #140	; 0x8c
   114d4:	7819      	ldrb	r1, [r3, #0]
   114d6:	430a      	orrs	r2, r1
   114d8:	701a      	strb	r2, [r3, #0]
   114da:	22e0      	movs	r2, #224	; 0xe0
   114dc:	7823      	ldrb	r3, [r4, #0]
   114de:	48a9      	ldr	r0, [pc, #676]	; (11784 <AssemblePacket+0x2fc>)
   114e0:	4013      	ands	r3, r2
   114e2:	7023      	strb	r3, [r4, #0]
   114e4:	4ca9      	ldr	r4, [pc, #676]	; (1178c <AssemblePacket+0x304>)
   114e6:	7403      	strb	r3, [r0, #16]
   114e8:	3adc      	subs	r2, #220	; 0xdc
   114ea:	4ba9      	ldr	r3, [pc, #676]	; (11790 <AssemblePacket+0x308>)
   114ec:	3011      	adds	r0, #17
   114ee:	1c61      	adds	r1, r4, #1
   114f0:	4798      	blx	r3
   114f2:	2315      	movs	r3, #21
   114f4:	aa04      	add	r2, sp, #16
   114f6:	8393      	strh	r3, [r2, #28]
   114f8:	0023      	movs	r3, r4
   114fa:	337c      	adds	r3, #124	; 0x7c
   114fc:	781b      	ldrb	r3, [r3, #0]
   114fe:	2700      	movs	r7, #0
   11500:	069b      	lsls	r3, r3, #26
   11502:	d400      	bmi.n	11506 <AssemblePacket+0x7e>
   11504:	e0fd      	b.n	11702 <AssemblePacket+0x27a>
   11506:	0023      	movs	r3, r4
   11508:	33df      	adds	r3, #223	; 0xdf
   1150a:	781a      	ldrb	r2, [r3, #0]
   1150c:	23ea      	movs	r3, #234	; 0xea
   1150e:	469c      	mov	ip, r3
   11510:	44a4      	add	ip, r4
   11512:	4663      	mov	r3, ip
   11514:	781d      	ldrb	r5, [r3, #0]
   11516:	42aa      	cmp	r2, r5
   11518:	d200      	bcs.n	1151c <AssemblePacket+0x94>
   1151a:	e0f2      	b.n	11702 <AssemblePacket+0x27a>
   1151c:	0021      	movs	r1, r4
   1151e:	0026      	movs	r6, r4
   11520:	4b9c      	ldr	r3, [pc, #624]	; (11794 <AssemblePacket+0x30c>)
   11522:	31c2      	adds	r1, #194	; 0xc2
   11524:	7818      	ldrb	r0, [r3, #0]
   11526:	880b      	ldrh	r3, [r1, #0]
   11528:	36d4      	adds	r6, #212	; 0xd4
   1152a:	3301      	adds	r3, #1
   1152c:	b29b      	uxth	r3, r3
   1152e:	800b      	strh	r3, [r1, #0]
   11530:	7836      	ldrb	r6, [r6, #0]
   11532:	42b3      	cmp	r3, r6
   11534:	d110      	bne.n	11558 <AssemblePacket+0xd0>
   11536:	0023      	movs	r3, r4
   11538:	33ed      	adds	r3, #237	; 0xed
   1153a:	701f      	strb	r7, [r3, #0]
   1153c:	2380      	movs	r3, #128	; 0x80
   1153e:	2040      	movs	r0, #64	; 0x40
   11540:	348c      	adds	r4, #140	; 0x8c
   11542:	425b      	negs	r3, r3
   11544:	7822      	ldrb	r2, [r4, #0]
   11546:	4318      	orrs	r0, r3
   11548:	3390      	adds	r3, #144	; 0x90
   1154a:	4313      	orrs	r3, r2
   1154c:	7023      	strb	r3, [r4, #0]
   1154e:	e02f      	b.n	115b0 <AssemblePacket+0x128>
   11550:	2240      	movs	r2, #64	; 0x40
   11552:	4313      	orrs	r3, r2
   11554:	7023      	strb	r3, [r4, #0]
   11556:	e7c0      	b.n	114da <AssemblePacket+0x52>
   11558:	42b3      	cmp	r3, r6
   1155a:	d929      	bls.n	115b0 <AssemblePacket+0x128>
   1155c:	42aa      	cmp	r2, r5
   1155e:	d100      	bne.n	11562 <AssemblePacket+0xda>
   11560:	e0c9      	b.n	116f6 <AssemblePacket+0x26e>
   11562:	0021      	movs	r1, r4
   11564:	0020      	movs	r0, r4
   11566:	31ed      	adds	r1, #237	; 0xed
   11568:	780b      	ldrb	r3, [r1, #0]
   1156a:	30d5      	adds	r0, #213	; 0xd5
   1156c:	3301      	adds	r3, #1
   1156e:	b2db      	uxtb	r3, r3
   11570:	700b      	strb	r3, [r1, #0]
   11572:	7800      	ldrb	r0, [r0, #0]
   11574:	3801      	subs	r0, #1
   11576:	4283      	cmp	r3, r0
   11578:	dbe0      	blt.n	1153c <AssemblePacket+0xb4>
   1157a:	700f      	strb	r7, [r1, #0]
   1157c:	42aa      	cmp	r2, r5
   1157e:	d90d      	bls.n	1159c <AssemblePacket+0x114>
   11580:	231b      	movs	r3, #27
   11582:	4666      	mov	r6, ip
   11584:	a904      	add	r1, sp, #16
   11586:	3a01      	subs	r2, #1
   11588:	185b      	adds	r3, r3, r1
   1158a:	701a      	strb	r2, [r3, #0]
   1158c:	251b      	movs	r5, #27
   1158e:	ab04      	add	r3, sp, #16
   11590:	18ed      	adds	r5, r5, r3
   11592:	7832      	ldrb	r2, [r6, #0]
   11594:	782b      	ldrb	r3, [r5, #0]
   11596:	429a      	cmp	r2, r3
   11598:	d800      	bhi.n	1159c <AssemblePacket+0x114>
   1159a:	e098      	b.n	116ce <AssemblePacket+0x246>
   1159c:	2380      	movs	r3, #128	; 0x80
   1159e:	2040      	movs	r0, #64	; 0x40
   115a0:	2210      	movs	r2, #16
   115a2:	425b      	negs	r3, r3
   115a4:	4318      	orrs	r0, r3
   115a6:	4b79      	ldr	r3, [pc, #484]	; (1178c <AssemblePacket+0x304>)
   115a8:	338c      	adds	r3, #140	; 0x8c
   115aa:	7819      	ldrb	r1, [r3, #0]
   115ac:	430a      	orrs	r2, r1
   115ae:	701a      	strb	r2, [r3, #0]
   115b0:	4d76      	ldr	r5, [pc, #472]	; (1178c <AssemblePacket+0x304>)
   115b2:	2102      	movs	r1, #2
   115b4:	002a      	movs	r2, r5
   115b6:	328c      	adds	r2, #140	; 0x8c
   115b8:	7813      	ldrb	r3, [r2, #0]
   115ba:	420b      	tst	r3, r1
   115bc:	d003      	beq.n	115c6 <AssemblePacket+0x13e>
   115be:	2420      	movs	r4, #32
   115c0:	438b      	bics	r3, r1
   115c2:	4320      	orrs	r0, r4
   115c4:	7013      	strb	r3, [r2, #0]
   115c6:	2310      	movs	r3, #16
   115c8:	0004      	movs	r4, r0
   115ca:	439c      	bics	r4, r3
   115cc:	002b      	movs	r3, r5
   115ce:	33d8      	adds	r3, #216	; 0xd8
   115d0:	781b      	ldrb	r3, [r3, #0]
   115d2:	9307      	str	r3, [sp, #28]
   115d4:	2b00      	cmp	r3, #0
   115d6:	d003      	beq.n	115e0 <AssemblePacket+0x158>
   115d8:	9b06      	ldr	r3, [sp, #24]
   115da:	2b00      	cmp	r3, #0
   115dc:	d000      	beq.n	115e0 <AssemblePacket+0x158>
   115de:	e092      	b.n	11706 <AssemblePacket+0x27e>
   115e0:	230f      	movs	r3, #15
   115e2:	439c      	bics	r4, r3
   115e4:	0020      	movs	r0, r4
   115e6:	ac0b      	add	r4, sp, #44	; 0x2c
   115e8:	8826      	ldrh	r6, [r4, #0]
   115ea:	4f66      	ldr	r7, [pc, #408]	; (11784 <AssemblePacket+0x2fc>)
   115ec:	4b68      	ldr	r3, [pc, #416]	; (11790 <AssemblePacket+0x308>)
   115ee:	55b8      	strb	r0, [r7, r6]
   115f0:	1c70      	adds	r0, r6, #1
   115f2:	b280      	uxth	r0, r0
   115f4:	19c0      	adds	r0, r0, r7
   115f6:	2202      	movs	r2, #2
   115f8:	4967      	ldr	r1, [pc, #412]	; (11798 <AssemblePacket+0x310>)
   115fa:	4798      	blx	r3
   115fc:	9b07      	ldr	r3, [sp, #28]
   115fe:	3603      	adds	r6, #3
   11600:	8026      	strh	r6, [r4, #0]
   11602:	2b00      	cmp	r3, #0
   11604:	d100      	bne.n	11608 <AssemblePacket+0x180>
   11606:	e087      	b.n	11718 <AssemblePacket+0x290>
   11608:	9b06      	ldr	r3, [sp, #24]
   1160a:	2b00      	cmp	r3, #0
   1160c:	d004      	beq.n	11618 <AssemblePacket+0x190>
   1160e:	2201      	movs	r2, #1
   11610:	0021      	movs	r1, r4
   11612:	0038      	movs	r0, r7
   11614:	4b61      	ldr	r3, [pc, #388]	; (1179c <AssemblePacket+0x314>)
   11616:	4798      	blx	r3
   11618:	466a      	mov	r2, sp
   1161a:	2124      	movs	r1, #36	; 0x24
   1161c:	1852      	adds	r2, r2, r1
   1161e:	8823      	ldrh	r3, [r4, #0]
   11620:	7812      	ldrb	r2, [r2, #0]
   11622:	1c5e      	adds	r6, r3, #1
   11624:	54fa      	strb	r2, [r7, r3]
   11626:	9b06      	ldr	r3, [sp, #24]
   11628:	b2b6      	uxth	r6, r6
   1162a:	8026      	strh	r6, [r4, #0]
   1162c:	2b00      	cmp	r3, #0
   1162e:	d100      	bne.n	11632 <AssemblePacket+0x1aa>
   11630:	e076      	b.n	11720 <AssemblePacket+0x298>
   11632:	001a      	movs	r2, r3
   11634:	19b8      	adds	r0, r7, r6
   11636:	9908      	ldr	r1, [sp, #32]
   11638:	4b55      	ldr	r3, [pc, #340]	; (11790 <AssemblePacket+0x308>)
   1163a:	4798      	blx	r3
   1163c:	466b      	mov	r3, sp
   1163e:	7e19      	ldrb	r1, [r3, #24]
   11640:	682b      	ldr	r3, [r5, #0]
   11642:	b2f6      	uxtb	r6, r6
   11644:	0a18      	lsrs	r0, r3, #8
   11646:	792b      	ldrb	r3, [r5, #4]
   11648:	1d2a      	adds	r2, r5, #4
   1164a:	061b      	lsls	r3, r3, #24
   1164c:	4303      	orrs	r3, r0
   1164e:	9304      	str	r3, [sp, #16]
   11650:	2301      	movs	r3, #1
   11652:	9301      	str	r3, [sp, #4]
   11654:	4b52      	ldr	r3, [pc, #328]	; (117a0 <AssemblePacket+0x318>)
   11656:	9703      	str	r7, [sp, #12]
   11658:	9602      	str	r6, [sp, #8]
   1165a:	9300      	str	r3, [sp, #0]
   1165c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1165e:	9808      	ldr	r0, [sp, #32]
   11660:	2200      	movs	r2, #0
   11662:	4c50      	ldr	r4, [pc, #320]	; (117a4 <AssemblePacket+0x31c>)
   11664:	47a0      	blx	r4
   11666:	2800      	cmp	r0, #0
   11668:	d002      	beq.n	11670 <AssemblePacket+0x1e8>
   1166a:	2020      	movs	r0, #32
   1166c:	4b4e      	ldr	r3, [pc, #312]	; (117a8 <AssemblePacket+0x320>)
   1166e:	4798      	blx	r3
   11670:	aa0b      	add	r2, sp, #44	; 0x2c
   11672:	8813      	ldrh	r3, [r2, #0]
   11674:	9906      	ldr	r1, [sp, #24]
   11676:	18cb      	adds	r3, r1, r3
   11678:	8013      	strh	r3, [r2, #0]
   1167a:	4c44      	ldr	r4, [pc, #272]	; (1178c <AssemblePacket+0x304>)
   1167c:	ae0b      	add	r6, sp, #44	; 0x2c
   1167e:	6823      	ldr	r3, [r4, #0]
   11680:	8832      	ldrh	r2, [r6, #0]
   11682:	0a18      	lsrs	r0, r3, #8
   11684:	7923      	ldrb	r3, [r4, #4]
   11686:	1d21      	adds	r1, r4, #4
   11688:	061b      	lsls	r3, r3, #24
   1168a:	4303      	orrs	r3, r0
   1168c:	9300      	str	r3, [sp, #0]
   1168e:	3a10      	subs	r2, #16
   11690:	b2d2      	uxtb	r2, r2
   11692:	2349      	movs	r3, #73	; 0x49
   11694:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
   11696:	2000      	movs	r0, #0
   11698:	4d44      	ldr	r5, [pc, #272]	; (117ac <AssemblePacket+0x324>)
   1169a:	47a8      	blx	r5
   1169c:	4f39      	ldr	r7, [pc, #228]	; (11784 <AssemblePacket+0x2fc>)
   1169e:	2210      	movs	r2, #16
   116a0:	4939      	ldr	r1, [pc, #228]	; (11788 <AssemblePacket+0x300>)
   116a2:	0038      	movs	r0, r7
   116a4:	4b3a      	ldr	r3, [pc, #232]	; (11790 <AssemblePacket+0x308>)
   116a6:	4798      	blx	r3
   116a8:	8833      	ldrh	r3, [r6, #0]
   116aa:	4a37      	ldr	r2, [pc, #220]	; (11788 <AssemblePacket+0x300>)
   116ac:	9300      	str	r3, [sp, #0]
   116ae:	2102      	movs	r1, #2
   116b0:	003b      	movs	r3, r7
   116b2:	4d3f      	ldr	r5, [pc, #252]	; (117b0 <AssemblePacket+0x328>)
   116b4:	483f      	ldr	r0, [pc, #252]	; (117b4 <AssemblePacket+0x32c>)
   116b6:	47a8      	blx	r5
   116b8:	8836      	ldrh	r6, [r6, #0]
   116ba:	2204      	movs	r2, #4
   116bc:	19f0      	adds	r0, r6, r7
   116be:	4932      	ldr	r1, [pc, #200]	; (11788 <AssemblePacket+0x300>)
   116c0:	4b33      	ldr	r3, [pc, #204]	; (11790 <AssemblePacket+0x308>)
   116c2:	4798      	blx	r3
   116c4:	3e0c      	subs	r6, #12
   116c6:	34c6      	adds	r4, #198	; 0xc6
   116c8:	8026      	strh	r6, [r4, #0]
   116ca:	b00d      	add	sp, #52	; 0x34
   116cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   116ce:	0029      	movs	r1, r5
   116d0:	2010      	movs	r0, #16
   116d2:	4f39      	ldr	r7, [pc, #228]	; (117b8 <AssemblePacket+0x330>)
   116d4:	47b8      	blx	r7
   116d6:	2808      	cmp	r0, #8
   116d8:	d000      	beq.n	116dc <AssemblePacket+0x254>
   116da:	e75f      	b.n	1159c <AssemblePacket+0x114>
   116dc:	0029      	movs	r1, r5
   116de:	3009      	adds	r0, #9
   116e0:	47b8      	blx	r7
   116e2:	782b      	ldrb	r3, [r5, #0]
   116e4:	2808      	cmp	r0, #8
   116e6:	d047      	beq.n	11778 <AssemblePacket+0x2f0>
   116e8:	7832      	ldrb	r2, [r6, #0]
   116ea:	429a      	cmp	r2, r3
   116ec:	d300      	bcc.n	116f0 <AssemblePacket+0x268>
   116ee:	e74d      	b.n	1158c <AssemblePacket+0x104>
   116f0:	3b01      	subs	r3, #1
   116f2:	702b      	strb	r3, [r5, #0]
   116f4:	e74a      	b.n	1158c <AssemblePacket+0x104>
   116f6:	800f      	strh	r7, [r1, #0]
   116f8:	2210      	movs	r2, #16
   116fa:	348c      	adds	r4, #140	; 0x8c
   116fc:	7823      	ldrb	r3, [r4, #0]
   116fe:	4393      	bics	r3, r2
   11700:	e724      	b.n	1154c <AssemblePacket+0xc4>
   11702:	2000      	movs	r0, #0
   11704:	e7f8      	b.n	116f8 <AssemblePacket+0x270>
   11706:	4b2d      	ldr	r3, [pc, #180]	; (117bc <AssemblePacket+0x334>)
   11708:	4798      	blx	r3
   1170a:	220f      	movs	r2, #15
   1170c:	0003      	movs	r3, r0
   1170e:	0020      	movs	r0, r4
   11710:	4013      	ands	r3, r2
   11712:	4390      	bics	r0, r2
   11714:	4318      	orrs	r0, r3
   11716:	e766      	b.n	115e6 <AssemblePacket+0x15e>
   11718:	9b06      	ldr	r3, [sp, #24]
   1171a:	2b00      	cmp	r3, #0
   1171c:	d000      	beq.n	11720 <AssemblePacket+0x298>
   1171e:	e77b      	b.n	11618 <AssemblePacket+0x190>
   11720:	4d1a      	ldr	r5, [pc, #104]	; (1178c <AssemblePacket+0x304>)
   11722:	002b      	movs	r3, r5
   11724:	33d8      	adds	r3, #216	; 0xd8
   11726:	781b      	ldrb	r3, [r3, #0]
   11728:	2b00      	cmp	r3, #0
   1172a:	d0a6      	beq.n	1167a <AssemblePacket+0x1f2>
   1172c:	261e      	movs	r6, #30
   1172e:	ab04      	add	r3, sp, #16
   11730:	18f6      	adds	r6, r6, r3
   11732:	2200      	movs	r2, #0
   11734:	0031      	movs	r1, r6
   11736:	4822      	ldr	r0, [pc, #136]	; (117c0 <AssemblePacket+0x338>)
   11738:	4b18      	ldr	r3, [pc, #96]	; (1179c <AssemblePacket+0x314>)
   1173a:	4798      	blx	r3
   1173c:	682b      	ldr	r3, [r5, #0]
   1173e:	7831      	ldrb	r1, [r6, #0]
   11740:	0a18      	lsrs	r0, r3, #8
   11742:	792b      	ldrb	r3, [r5, #4]
   11744:	9703      	str	r7, [sp, #12]
   11746:	061b      	lsls	r3, r3, #24
   11748:	4303      	orrs	r3, r0
   1174a:	9304      	str	r3, [sp, #16]
   1174c:	7823      	ldrb	r3, [r4, #0]
   1174e:	1d2a      	adds	r2, r5, #4
   11750:	9302      	str	r3, [sp, #8]
   11752:	2302      	movs	r3, #2
   11754:	9301      	str	r3, [sp, #4]
   11756:	4b17      	ldr	r3, [pc, #92]	; (117b4 <AssemblePacket+0x32c>)
   11758:	4819      	ldr	r0, [pc, #100]	; (117c0 <AssemblePacket+0x338>)
   1175a:	9300      	str	r3, [sp, #0]
   1175c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   1175e:	4d11      	ldr	r5, [pc, #68]	; (117a4 <AssemblePacket+0x31c>)
   11760:	2200      	movs	r2, #0
   11762:	47a8      	blx	r5
   11764:	2800      	cmp	r0, #0
   11766:	d002      	beq.n	1176e <AssemblePacket+0x2e6>
   11768:	2020      	movs	r0, #32
   1176a:	4b0f      	ldr	r3, [pc, #60]	; (117a8 <AssemblePacket+0x320>)
   1176c:	4798      	blx	r3
   1176e:	8823      	ldrh	r3, [r4, #0]
   11770:	8832      	ldrh	r2, [r6, #0]
   11772:	189b      	adds	r3, r3, r2
   11774:	8023      	strh	r3, [r4, #0]
   11776:	e780      	b.n	1167a <AssemblePacket+0x1f2>
   11778:	34df      	adds	r4, #223	; 0xdf
   1177a:	7023      	strb	r3, [r4, #0]
   1177c:	e70e      	b.n	1159c <AssemblePacket+0x114>
   1177e:	46c0      	nop			; (mov r8, r8)
   11780:	00019e41 	.word	0x00019e41
   11784:	20002d91 	.word	0x20002d91
   11788:	20001110 	.word	0x20001110
   1178c:	20002b5c 	.word	0x20002b5c
   11790:	00019d1d 	.word	0x00019d1d
   11794:	0002021e 	.word	0x0002021e
   11798:	20002bdc 	.word	0x20002bdc
   1179c:	0000fe61 	.word	0x0000fe61
   117a0:	20002b91 	.word	0x20002b91
   117a4:	00011361 	.word	0x00011361
   117a8:	00011421 	.word	0x00011421
   117ac:	00010199 	.word	0x00010199
   117b0:	0000dd7d 	.word	0x0000dd7d
   117b4:	20002b81 	.word	0x20002b81
   117b8:	0000d8b1 	.word	0x0000d8b1
   117bc:	0000fd5d 	.word	0x0000fd5d
   117c0:	20002eac 	.word	0x20002eac

000117c4 <UpdateRxDataAvailableCbParams>:
   117c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117c6:	4e0f      	ldr	r6, [pc, #60]	; (11804 <UpdateRxDataAvailableCbParams+0x40>)
   117c8:	7874      	ldrb	r4, [r6, #1]
   117ca:	7835      	ldrb	r5, [r6, #0]
   117cc:	0224      	lsls	r4, r4, #8
   117ce:	432c      	orrs	r4, r5
   117d0:	78b5      	ldrb	r5, [r6, #2]
   117d2:	042d      	lsls	r5, r5, #16
   117d4:	432c      	orrs	r4, r5
   117d6:	78f5      	ldrb	r5, [r6, #3]
   117d8:	062d      	lsls	r5, r5, #24
   117da:	4325      	orrs	r5, r4
   117dc:	d011      	beq.n	11802 <UpdateRxDataAvailableCbParams+0x3e>
   117de:	4c0a      	ldr	r4, [pc, #40]	; (11808 <UpdateRxDataAvailableCbParams+0x44>)
   117e0:	2702      	movs	r7, #2
   117e2:	0026      	movs	r6, r4
   117e4:	36f8      	adds	r6, #248	; 0xf8
   117e6:	6836      	ldr	r6, [r6, #0]
   117e8:	423e      	tst	r6, r7
   117ea:	d00a      	beq.n	11802 <UpdateRxDataAvailableCbParams+0x3e>
   117ec:	0026      	movs	r6, r4
   117ee:	34fc      	adds	r4, #252	; 0xfc
   117f0:	36ff      	adds	r6, #255	; 0xff
   117f2:	60a0      	str	r0, [r4, #8]
   117f4:	60e1      	str	r1, [r4, #12]
   117f6:	7077      	strb	r7, [r6, #1]
   117f8:	7372      	strb	r2, [r6, #13]
   117fa:	73b3      	strb	r3, [r6, #14]
   117fc:	4903      	ldr	r1, [pc, #12]	; (1180c <UpdateRxDataAvailableCbParams+0x48>)
   117fe:	6820      	ldr	r0, [r4, #0]
   11800:	47a8      	blx	r5
   11802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11804:	20002ea4 	.word	0x20002ea4
   11808:	20002b5c 	.word	0x20002b5c
   1180c:	20002c5c 	.word	0x20002c5c

00011810 <LorawanNotifyAppOnRxdone>:
   11810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11812:	4c25      	ldr	r4, [pc, #148]	; (118a8 <LorawanNotifyAppOnRxdone+0x98>)
   11814:	0007      	movs	r7, r0
   11816:	0023      	movs	r3, r4
   11818:	33f4      	adds	r3, #244	; 0xf4
   1181a:	781b      	ldrb	r3, [r3, #0]
   1181c:	000d      	movs	r5, r1
   1181e:	0016      	movs	r6, r2
   11820:	2b01      	cmp	r3, #1
   11822:	d136      	bne.n	11892 <LorawanNotifyAppOnRxdone+0x82>
   11824:	0022      	movs	r2, r4
   11826:	210e      	movs	r1, #14
   11828:	327c      	adds	r2, #124	; 0x7c
   1182a:	7813      	ldrb	r3, [r2, #0]
   1182c:	438b      	bics	r3, r1
   1182e:	7013      	strb	r3, [r2, #0]
   11830:	491e      	ldr	r1, [pc, #120]	; (118ac <LorawanNotifyAppOnRxdone+0x9c>)
   11832:	784a      	ldrb	r2, [r1, #1]
   11834:	780b      	ldrb	r3, [r1, #0]
   11836:	0212      	lsls	r2, r2, #8
   11838:	431a      	orrs	r2, r3
   1183a:	788b      	ldrb	r3, [r1, #2]
   1183c:	041b      	lsls	r3, r3, #16
   1183e:	431a      	orrs	r2, r3
   11840:	78cb      	ldrb	r3, [r1, #3]
   11842:	061b      	lsls	r3, r3, #24
   11844:	4313      	orrs	r3, r2
   11846:	d023      	beq.n	11890 <LorawanNotifyAppOnRxdone+0x80>
   11848:	0022      	movs	r2, r4
   1184a:	2120      	movs	r1, #32
   1184c:	328c      	adds	r2, #140	; 0x8c
   1184e:	7813      	ldrb	r3, [r2, #0]
   11850:	438b      	bics	r3, r1
   11852:	7013      	strb	r3, [r2, #0]
   11854:	0023      	movs	r3, r4
   11856:	33f4      	adds	r3, #244	; 0xf4
   11858:	781b      	ldrb	r3, [r3, #0]
   1185a:	7878      	ldrb	r0, [r7, #1]
   1185c:	469c      	mov	ip, r3
   1185e:	78fa      	ldrb	r2, [r7, #3]
   11860:	78b9      	ldrb	r1, [r7, #2]
   11862:	793b      	ldrb	r3, [r7, #4]
   11864:	4667      	mov	r7, ip
   11866:	0209      	lsls	r1, r1, #8
   11868:	4301      	orrs	r1, r0
   1186a:	0410      	lsls	r0, r2, #16
   1186c:	4308      	orrs	r0, r1
   1186e:	061b      	lsls	r3, r3, #24
   11870:	4318      	orrs	r0, r3
   11872:	0032      	movs	r2, r6
   11874:	2308      	movs	r3, #8
   11876:	0029      	movs	r1, r5
   11878:	2f04      	cmp	r7, #4
   1187a:	d112      	bne.n	118a2 <LorawanNotifyAppOnRxdone+0x92>
   1187c:	4d0c      	ldr	r5, [pc, #48]	; (118b0 <LorawanNotifyAppOnRxdone+0xa0>)
   1187e:	47a8      	blx	r5
   11880:	2385      	movs	r3, #133	; 0x85
   11882:	009b      	lsls	r3, r3, #2
   11884:	5ce3      	ldrb	r3, [r4, r3]
   11886:	2b00      	cmp	r3, #0
   11888:	d102      	bne.n	11890 <LorawanNotifyAppOnRxdone+0x80>
   1188a:	2008      	movs	r0, #8
   1188c:	4b09      	ldr	r3, [pc, #36]	; (118b4 <LorawanNotifyAppOnRxdone+0xa4>)
   1188e:	4798      	blx	r3
   11890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11892:	2b04      	cmp	r3, #4
   11894:	d1cc      	bne.n	11830 <LorawanNotifyAppOnRxdone+0x20>
   11896:	0023      	movs	r3, r4
   11898:	33e8      	adds	r3, #232	; 0xe8
   1189a:	7818      	ldrb	r0, [r3, #0]
   1189c:	4b06      	ldr	r3, [pc, #24]	; (118b8 <LorawanNotifyAppOnRxdone+0xa8>)
   1189e:	4798      	blx	r3
   118a0:	e7c6      	b.n	11830 <LorawanNotifyAppOnRxdone+0x20>
   118a2:	4d06      	ldr	r5, [pc, #24]	; (118bc <LorawanNotifyAppOnRxdone+0xac>)
   118a4:	47a8      	blx	r5
   118a6:	e7eb      	b.n	11880 <LorawanNotifyAppOnRxdone+0x70>
   118a8:	20002b5c 	.word	0x20002b5c
   118ac:	20002ea4 	.word	0x20002ea4
   118b0:	00014341 	.word	0x00014341
   118b4:	00011421 	.word	0x00011421
   118b8:	0000f0b9 	.word	0x0000f0b9
   118bc:	000117c5 	.word	0x000117c5

000118c0 <LorawanSetReceiveWindow2Parameters>:
   118c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   118c2:	466b      	mov	r3, sp
   118c4:	1cdd      	adds	r5, r3, #3
   118c6:	9001      	str	r0, [sp, #4]
   118c8:	7029      	strb	r1, [r5, #0]
   118ca:	2001      	movs	r0, #1
   118cc:	a901      	add	r1, sp, #4
   118ce:	4c09      	ldr	r4, [pc, #36]	; (118f4 <LorawanSetReceiveWindow2Parameters+0x34>)
   118d0:	47a0      	blx	r4
   118d2:	2808      	cmp	r0, #8
   118d4:	d002      	beq.n	118dc <LorawanSetReceiveWindow2Parameters+0x1c>
   118d6:	240a      	movs	r4, #10
   118d8:	0020      	movs	r0, r4
   118da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   118dc:	0029      	movs	r1, r5
   118de:	200f      	movs	r0, #15
   118e0:	47a0      	blx	r4
   118e2:	0004      	movs	r4, r0
   118e4:	2808      	cmp	r0, #8
   118e6:	d1f6      	bne.n	118d6 <LorawanSetReceiveWindow2Parameters+0x16>
   118e8:	7829      	ldrb	r1, [r5, #0]
   118ea:	9801      	ldr	r0, [sp, #4]
   118ec:	4b02      	ldr	r3, [pc, #8]	; (118f8 <LorawanSetReceiveWindow2Parameters+0x38>)
   118ee:	4798      	blx	r3
   118f0:	e7f2      	b.n	118d8 <LorawanSetReceiveWindow2Parameters+0x18>
   118f2:	46c0      	nop			; (mov r8, r8)
   118f4:	0000d8b1 	.word	0x0000d8b1
   118f8:	000108a1 	.word	0x000108a1

000118fc <LorawanSetFrequency>:
   118fc:	b507      	push	{r0, r1, r2, lr}
   118fe:	466b      	mov	r3, sp
   11900:	9100      	str	r1, [sp, #0]
   11902:	7118      	strb	r0, [r3, #4]
   11904:	4669      	mov	r1, sp
   11906:	2000      	movs	r0, #0
   11908:	4b01      	ldr	r3, [pc, #4]	; (11910 <LorawanSetFrequency+0x14>)
   1190a:	4798      	blx	r3
   1190c:	bd0e      	pop	{r1, r2, r3, pc}
   1190e:	46c0      	nop			; (mov r8, r8)
   11910:	0000d9bd 	.word	0x0000d9bd

00011914 <LorawanGetReceiveWindow2Parameters>:
   11914:	4a06      	ldr	r2, [pc, #24]	; (11930 <LorawanGetReceiveWindow2Parameters+0x1c>)
   11916:	0013      	movs	r3, r2
   11918:	336e      	adds	r3, #110	; 0x6e
   1191a:	781b      	ldrb	r3, [r3, #0]
   1191c:	7103      	strb	r3, [r0, #4]
   1191e:	0013      	movs	r3, r2
   11920:	326c      	adds	r2, #108	; 0x6c
   11922:	336a      	adds	r3, #106	; 0x6a
   11924:	8819      	ldrh	r1, [r3, #0]
   11926:	8813      	ldrh	r3, [r2, #0]
   11928:	041b      	lsls	r3, r3, #16
   1192a:	430b      	orrs	r3, r1
   1192c:	6003      	str	r3, [r0, #0]
   1192e:	4770      	bx	lr
   11930:	20002b5c 	.word	0x20002b5c

00011934 <LORAWAN_GetAttr>:
   11934:	b5f0      	push	{r4, r5, r6, r7, lr}
   11936:	000b      	movs	r3, r1
   11938:	b093      	sub	sp, #76	; 0x4c
   1193a:	0016      	movs	r6, r2
   1193c:	2842      	cmp	r0, #66	; 0x42
   1193e:	d844      	bhi.n	119ca <LORAWAN_GetAttr+0x96>
   11940:	f004 fe30 	bl	165a4 <__gnu_thumb1_case_uhi>
   11944:	00620046 	.word	0x00620046
   11948:	00760066 	.word	0x00760066
   1194c:	0072006e 	.word	0x0072006e
   11950:	007f007a 	.word	0x007f007a
   11954:	00870084 	.word	0x00870084
   11958:	008e008a 	.word	0x008e008a
   1195c:	00990091 	.word	0x00990091
   11960:	009f009c 	.word	0x009f009c
   11964:	00a600a3 	.word	0x00a600a3
   11968:	00ac00a9 	.word	0x00ac00a9
   1196c:	00d800af 	.word	0x00d800af
   11970:	00b200b5 	.word	0x00b200b5
   11974:	00df00e5 	.word	0x00df00e5
   11978:	00ce00d3 	.word	0x00ce00d3
   1197c:	004300c7 	.word	0x004300c7
   11980:	00c10096 	.word	0x00c10096
   11984:	00be00c5 	.word	0x00be00c5
   11988:	00dc00bb 	.word	0x00dc00bb
   1198c:	004c00e2 	.word	0x004c00e2
   11990:	004e004c 	.word	0x004e004c
   11994:	011500ee 	.word	0x011500ee
   11998:	00ff010c 	.word	0x00ff010c
   1199c:	01300122 	.word	0x01300122
   119a0:	0148013c 	.word	0x0148013c
   119a4:	01610154 	.word	0x01610154
   119a8:	01940043 	.word	0x01940043
   119ac:	0170016c 	.word	0x0170016c
   119b0:	017a0175 	.word	0x017a0175
   119b4:	0183017f 	.word	0x0183017f
   119b8:	01890186 	.word	0x01890186
   119bc:	00430191 	.word	0x00430191
   119c0:	00430043 	.word	0x00430043
   119c4:	019d0198 	.word	0x019d0198
   119c8:	01ee      	.short	0x01ee
   119ca:	200a      	movs	r0, #10
   119cc:	b013      	add	sp, #76	; 0x4c
   119ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   119d0:	2208      	movs	r2, #8
   119d2:	49c4      	ldr	r1, [pc, #784]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   119d4:	315d      	adds	r1, #93	; 0x5d
   119d6:	0030      	movs	r0, r6
   119d8:	4bc3      	ldr	r3, [pc, #780]	; (11ce8 <LORAWAN_GetAttr+0x3b4>)
   119da:	4798      	blx	r3
   119dc:	2008      	movs	r0, #8
   119de:	e7f5      	b.n	119cc <LORAWAN_GetAttr+0x98>
   119e0:	ac0e      	add	r4, sp, #56	; 0x38
   119e2:	0021      	movs	r1, r4
   119e4:	4bc1      	ldr	r3, [pc, #772]	; (11cec <LORAWAN_GetAttr+0x3b8>)
   119e6:	201d      	movs	r0, #29
   119e8:	4798      	blx	r3
   119ea:	4bbe      	ldr	r3, [pc, #760]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   119ec:	a910      	add	r1, sp, #64	; 0x40
   119ee:	33fe      	adds	r3, #254	; 0xfe
   119f0:	8adb      	ldrh	r3, [r3, #22]
   119f2:	2208      	movs	r2, #8
   119f4:	808b      	strh	r3, [r1, #4]
   119f6:	7923      	ldrb	r3, [r4, #4]
   119f8:	718b      	strb	r3, [r1, #6]
   119fa:	8823      	ldrh	r3, [r4, #0]
   119fc:	800b      	strh	r3, [r1, #0]
   119fe:	8863      	ldrh	r3, [r4, #2]
   11a00:	804b      	strh	r3, [r1, #2]
   11a02:	7963      	ldrb	r3, [r4, #5]
   11a04:	71cb      	strb	r3, [r1, #7]
   11a06:	e7e6      	b.n	119d6 <LORAWAN_GetAttr+0xa2>
   11a08:	49b6      	ldr	r1, [pc, #728]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a0a:	2208      	movs	r2, #8
   11a0c:	3155      	adds	r1, #85	; 0x55
   11a0e:	e7e2      	b.n	119d6 <LORAWAN_GetAttr+0xa2>
   11a10:	4bb4      	ldr	r3, [pc, #720]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a12:	681a      	ldr	r2, [r3, #0]
   11a14:	791b      	ldrb	r3, [r3, #4]
   11a16:	0a12      	lsrs	r2, r2, #8
   11a18:	061b      	lsls	r3, r3, #24
   11a1a:	4313      	orrs	r3, r2
   11a1c:	6033      	str	r3, [r6, #0]
   11a1e:	e7dd      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11a20:	49b0      	ldr	r1, [pc, #704]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a22:	2210      	movs	r2, #16
   11a24:	3105      	adds	r1, #5
   11a26:	e7d6      	b.n	119d6 <LORAWAN_GetAttr+0xa2>
   11a28:	49ae      	ldr	r1, [pc, #696]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a2a:	2210      	movs	r2, #16
   11a2c:	3115      	adds	r1, #21
   11a2e:	e7d2      	b.n	119d6 <LORAWAN_GetAttr+0xa2>
   11a30:	49ac      	ldr	r1, [pc, #688]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a32:	2210      	movs	r2, #16
   11a34:	3145      	adds	r1, #69	; 0x45
   11a36:	e7ce      	b.n	119d6 <LORAWAN_GetAttr+0xa2>
   11a38:	4baa      	ldr	r3, [pc, #680]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a3a:	337c      	adds	r3, #124	; 0x7c
   11a3c:	781b      	ldrb	r3, [r3, #0]
   11a3e:	069b      	lsls	r3, r3, #26
   11a40:	e039      	b.n	11ab6 <LORAWAN_GetAttr+0x182>
   11a42:	4ba8      	ldr	r3, [pc, #672]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a44:	33df      	adds	r3, #223	; 0xdf
   11a46:	781b      	ldrb	r3, [r3, #0]
   11a48:	7033      	strb	r3, [r6, #0]
   11a4a:	e7c7      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11a4c:	4ba5      	ldr	r3, [pc, #660]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a4e:	33e1      	adds	r3, #225	; 0xe1
   11a50:	e7f9      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11a52:	4ba4      	ldr	r3, [pc, #656]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a54:	33f7      	adds	r3, #247	; 0xf7
   11a56:	e7f6      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11a58:	4ba2      	ldr	r3, [pc, #648]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a5a:	3304      	adds	r3, #4
   11a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   11a5e:	e7dd      	b.n	11a1c <LORAWAN_GetAttr+0xe8>
   11a60:	4ba0      	ldr	r3, [pc, #640]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a62:	3308      	adds	r3, #8
   11a64:	e7fa      	b.n	11a5c <LORAWAN_GetAttr+0x128>
   11a66:	4b9f      	ldr	r3, [pc, #636]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a68:	33c8      	adds	r3, #200	; 0xc8
   11a6a:	881b      	ldrh	r3, [r3, #0]
   11a6c:	8033      	strh	r3, [r6, #0]
   11a6e:	e7b5      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11a70:	4b9c      	ldr	r3, [pc, #624]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a72:	33ca      	adds	r3, #202	; 0xca
   11a74:	e7f9      	b.n	11a6a <LORAWAN_GetAttr+0x136>
   11a76:	4b9b      	ldr	r3, [pc, #620]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a78:	33cc      	adds	r3, #204	; 0xcc
   11a7a:	e7f6      	b.n	11a6a <LORAWAN_GetAttr+0x136>
   11a7c:	4b99      	ldr	r3, [pc, #612]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a7e:	33ce      	adds	r3, #206	; 0xce
   11a80:	e7f3      	b.n	11a6a <LORAWAN_GetAttr+0x136>
   11a82:	4b98      	ldr	r3, [pc, #608]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a84:	33d0      	adds	r3, #208	; 0xd0
   11a86:	881b      	ldrh	r3, [r3, #0]
   11a88:	e7de      	b.n	11a48 <LORAWAN_GetAttr+0x114>
   11a8a:	4b96      	ldr	r3, [pc, #600]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a8c:	33d4      	adds	r3, #212	; 0xd4
   11a8e:	e7da      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11a90:	4b94      	ldr	r3, [pc, #592]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a92:	33d5      	adds	r3, #213	; 0xd5
   11a94:	e7d7      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11a96:	4b93      	ldr	r3, [pc, #588]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a98:	33d2      	adds	r3, #210	; 0xd2
   11a9a:	e7e6      	b.n	11a6a <LORAWAN_GetAttr+0x136>
   11a9c:	4b91      	ldr	r3, [pc, #580]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11a9e:	33da      	adds	r3, #218	; 0xda
   11aa0:	e7d1      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11aa2:	4b90      	ldr	r3, [pc, #576]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11aa4:	33d9      	adds	r3, #217	; 0xd9
   11aa6:	e7ce      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11aa8:	4b8e      	ldr	r3, [pc, #568]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11aaa:	33e0      	adds	r3, #224	; 0xe0
   11aac:	e7cb      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11aae:	4b8d      	ldr	r3, [pc, #564]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11ab0:	337c      	adds	r3, #124	; 0x7c
   11ab2:	781b      	ldrb	r3, [r3, #0]
   11ab4:	06db      	lsls	r3, r3, #27
   11ab6:	0fdb      	lsrs	r3, r3, #31
   11ab8:	e7c6      	b.n	11a48 <LORAWAN_GetAttr+0x114>
   11aba:	4b8a      	ldr	r3, [pc, #552]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11abc:	33de      	adds	r3, #222	; 0xde
   11abe:	e7c2      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11ac0:	4b88      	ldr	r3, [pc, #544]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11ac2:	33dd      	adds	r3, #221	; 0xdd
   11ac4:	e7bf      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11ac6:	4b87      	ldr	r3, [pc, #540]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11ac8:	3390      	adds	r3, #144	; 0x90
   11aca:	781b      	ldrb	r3, [r3, #0]
   11acc:	e7ce      	b.n	11a6c <LORAWAN_GetAttr+0x138>
   11ace:	4b85      	ldr	r3, [pc, #532]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11ad0:	e7c4      	b.n	11a5c <LORAWAN_GetAttr+0x128>
   11ad2:	2016      	movs	r0, #22
   11ad4:	781b      	ldrb	r3, [r3, #0]
   11ad6:	a910      	add	r1, sp, #64	; 0x40
   11ad8:	700b      	strb	r3, [r1, #0]
   11ada:	4b85      	ldr	r3, [pc, #532]	; (11cf0 <LORAWAN_GetAttr+0x3bc>)
   11adc:	4798      	blx	r3
   11ade:	e77d      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11ae0:	781b      	ldrb	r3, [r3, #0]
   11ae2:	a910      	add	r1, sp, #64	; 0x40
   11ae4:	700b      	strb	r3, [r1, #0]
   11ae6:	2012      	movs	r0, #18
   11ae8:	e7f7      	b.n	11ada <LORAWAN_GetAttr+0x1a6>
   11aea:	781b      	ldrb	r3, [r3, #0]
   11aec:	a910      	add	r1, sp, #64	; 0x40
   11aee:	700b      	strb	r3, [r1, #0]
   11af0:	2000      	movs	r0, #0
   11af2:	e7f2      	b.n	11ada <LORAWAN_GetAttr+0x1a6>
   11af4:	0010      	movs	r0, r2
   11af6:	4b7f      	ldr	r3, [pc, #508]	; (11cf4 <LORAWAN_GetAttr+0x3c0>)
   11af8:	4798      	blx	r3
   11afa:	e76f      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11afc:	4b79      	ldr	r3, [pc, #484]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11afe:	33f6      	adds	r3, #246	; 0xf6
   11b00:	e7a1      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11b02:	4b78      	ldr	r3, [pc, #480]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11b04:	33f4      	adds	r3, #244	; 0xf4
   11b06:	e79e      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11b08:	4b76      	ldr	r3, [pc, #472]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11b0a:	33f5      	adds	r3, #245	; 0xf5
   11b0c:	e79b      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11b0e:	21fa      	movs	r1, #250	; 0xfa
   11b10:	4b74      	ldr	r3, [pc, #464]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11b12:	0089      	lsls	r1, r1, #2
   11b14:	3388      	adds	r3, #136	; 0x88
   11b16:	6818      	ldr	r0, [r3, #0]
   11b18:	4b77      	ldr	r3, [pc, #476]	; (11cf8 <LORAWAN_GetAttr+0x3c4>)
   11b1a:	4798      	blx	r3
   11b1c:	8030      	strh	r0, [r6, #0]
   11b1e:	e75d      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11b20:	780a      	ldrb	r2, [r1, #0]
   11b22:	200a      	movs	r0, #10
   11b24:	2a03      	cmp	r2, #3
   11b26:	d900      	bls.n	11b2a <LORAWAN_GetAttr+0x1f6>
   11b28:	e750      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11b2a:	2322      	movs	r3, #34	; 0x22
   11b2c:	496d      	ldr	r1, [pc, #436]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11b2e:	33ff      	adds	r3, #255	; 0xff
   11b30:	5cc9      	ldrb	r1, [r1, r3]
   11b32:	3b21      	subs	r3, #33	; 0x21
   11b34:	3bff      	subs	r3, #255	; 0xff
   11b36:	4093      	lsls	r3, r2
   11b38:	400b      	ands	r3, r1
   11b3a:	1e5a      	subs	r2, r3, #1
   11b3c:	4193      	sbcs	r3, r2
   11b3e:	7033      	strb	r3, [r6, #0]
   11b40:	e02e      	b.n	11ba0 <LORAWAN_GetAttr+0x26c>
   11b42:	780b      	ldrb	r3, [r1, #0]
   11b44:	200a      	movs	r0, #10
   11b46:	2b03      	cmp	r3, #3
   11b48:	d900      	bls.n	11b4c <LORAWAN_GetAttr+0x218>
   11b4a:	e73f      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11b4c:	213c      	movs	r1, #60	; 0x3c
   11b4e:	4359      	muls	r1, r3
   11b50:	3139      	adds	r1, #57	; 0x39
   11b52:	4b64      	ldr	r3, [pc, #400]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11b54:	31ff      	adds	r1, #255	; 0xff
   11b56:	18c9      	adds	r1, r1, r3
   11b58:	2210      	movs	r2, #16
   11b5a:	e73c      	b.n	119d6 <LORAWAN_GetAttr+0xa2>
   11b5c:	780b      	ldrb	r3, [r1, #0]
   11b5e:	200a      	movs	r0, #10
   11b60:	2b03      	cmp	r3, #3
   11b62:	d900      	bls.n	11b66 <LORAWAN_GetAttr+0x232>
   11b64:	e732      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11b66:	213c      	movs	r1, #60	; 0x3c
   11b68:	4359      	muls	r1, r3
   11b6a:	3129      	adds	r1, #41	; 0x29
   11b6c:	e7f1      	b.n	11b52 <LORAWAN_GetAttr+0x21e>
   11b6e:	780b      	ldrb	r3, [r1, #0]
   11b70:	200a      	movs	r0, #10
   11b72:	2b03      	cmp	r3, #3
   11b74:	d900      	bls.n	11b78 <LORAWAN_GetAttr+0x244>
   11b76:	e729      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11b78:	213c      	movs	r1, #60	; 0x3c
   11b7a:	4359      	muls	r1, r3
   11b7c:	4b59      	ldr	r3, [pc, #356]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11b7e:	3125      	adds	r1, #37	; 0x25
   11b80:	31ff      	adds	r1, #255	; 0xff
   11b82:	18c9      	adds	r1, r1, r3
   11b84:	2204      	movs	r2, #4
   11b86:	e726      	b.n	119d6 <LORAWAN_GetAttr+0xa2>
   11b88:	780a      	ldrb	r2, [r1, #0]
   11b8a:	200a      	movs	r0, #10
   11b8c:	2a03      	cmp	r2, #3
   11b8e:	d900      	bls.n	11b92 <LORAWAN_GetAttr+0x25e>
   11b90:	e71c      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11b92:	233c      	movs	r3, #60	; 0x3c
   11b94:	435a      	muls	r2, r3
   11b96:	4b53      	ldr	r3, [pc, #332]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11b98:	189b      	adds	r3, r3, r2
   11b9a:	33fc      	adds	r3, #252	; 0xfc
   11b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11b9e:	6033      	str	r3, [r6, #0]
   11ba0:	3802      	subs	r0, #2
   11ba2:	e713      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11ba4:	780a      	ldrb	r2, [r1, #0]
   11ba6:	200a      	movs	r0, #10
   11ba8:	2a03      	cmp	r2, #3
   11baa:	d900      	bls.n	11bae <LORAWAN_GetAttr+0x27a>
   11bac:	e70e      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11bae:	233c      	movs	r3, #60	; 0x3c
   11bb0:	435a      	muls	r2, r3
   11bb2:	4b4c      	ldr	r3, [pc, #304]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11bb4:	189b      	adds	r3, r3, r2
   11bb6:	33fc      	adds	r3, #252	; 0xfc
   11bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   11bba:	e7f0      	b.n	11b9e <LORAWAN_GetAttr+0x26a>
   11bbc:	780a      	ldrb	r2, [r1, #0]
   11bbe:	200a      	movs	r0, #10
   11bc0:	2a03      	cmp	r2, #3
   11bc2:	d900      	bls.n	11bc6 <LORAWAN_GetAttr+0x292>
   11bc4:	e702      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11bc6:	233c      	movs	r3, #60	; 0x3c
   11bc8:	435a      	muls	r2, r3
   11bca:	4b46      	ldr	r3, [pc, #280]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11bcc:	189b      	adds	r3, r3, r2
   11bce:	33fc      	adds	r3, #252	; 0xfc
   11bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   11bd2:	e7e4      	b.n	11b9e <LORAWAN_GetAttr+0x26a>
   11bd4:	780a      	ldrb	r2, [r1, #0]
   11bd6:	200a      	movs	r0, #10
   11bd8:	2a03      	cmp	r2, #3
   11bda:	d900      	bls.n	11bde <LORAWAN_GetAttr+0x2aa>
   11bdc:	e6f6      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11bde:	233c      	movs	r3, #60	; 0x3c
   11be0:	435a      	muls	r2, r3
   11be2:	4b40      	ldr	r3, [pc, #256]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11be4:	189b      	adds	r3, r3, r2
   11be6:	33fc      	adds	r3, #252	; 0xfc
   11be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   11bea:	e7d8      	b.n	11b9e <LORAWAN_GetAttr+0x26a>
   11bec:	780a      	ldrb	r2, [r1, #0]
   11bee:	200a      	movs	r0, #10
   11bf0:	2a03      	cmp	r2, #3
   11bf2:	d900      	bls.n	11bf6 <LORAWAN_GetAttr+0x2c2>
   11bf4:	e6ea      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11bf6:	233c      	movs	r3, #60	; 0x3c
   11bf8:	435a      	muls	r2, r3
   11bfa:	4b3a      	ldr	r3, [pc, #232]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11bfc:	189b      	adds	r3, r3, r2
   11bfe:	335d      	adds	r3, #93	; 0x5d
   11c00:	33ff      	adds	r3, #255	; 0xff
   11c02:	781b      	ldrb	r3, [r3, #0]
   11c04:	e79b      	b.n	11b3e <LORAWAN_GetAttr+0x20a>
   11c06:	780a      	ldrb	r2, [r1, #0]
   11c08:	200a      	movs	r0, #10
   11c0a:	2a03      	cmp	r2, #3
   11c0c:	d900      	bls.n	11c10 <LORAWAN_GetAttr+0x2dc>
   11c0e:	e6dd      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11c10:	233c      	movs	r3, #60	; 0x3c
   11c12:	435a      	muls	r2, r3
   11c14:	4b33      	ldr	r3, [pc, #204]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11c16:	189b      	adds	r3, r3, r2
   11c18:	335e      	adds	r3, #94	; 0x5e
   11c1a:	e7f1      	b.n	11c00 <LORAWAN_GetAttr+0x2cc>
   11c1c:	0010      	movs	r0, r2
   11c1e:	4b37      	ldr	r3, [pc, #220]	; (11cfc <LORAWAN_GetAttr+0x3c8>)
   11c20:	4798      	blx	r3
   11c22:	e6d3      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11c24:	0011      	movs	r1, r2
   11c26:	4b31      	ldr	r3, [pc, #196]	; (11cec <LORAWAN_GetAttr+0x3b8>)
   11c28:	201f      	movs	r0, #31
   11c2a:	4798      	blx	r3
   11c2c:	e6d6      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11c2e:	4b2d      	ldr	r3, [pc, #180]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11c30:	338c      	adds	r3, #140	; 0x8c
   11c32:	781b      	ldrb	r3, [r3, #0]
   11c34:	071b      	lsls	r3, r3, #28
   11c36:	e73e      	b.n	11ab6 <LORAWAN_GetAttr+0x182>
   11c38:	4b2a      	ldr	r3, [pc, #168]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11c3a:	338c      	adds	r3, #140	; 0x8c
   11c3c:	781b      	ldrb	r3, [r3, #0]
   11c3e:	07db      	lsls	r3, r3, #31
   11c40:	e739      	b.n	11ab6 <LORAWAN_GetAttr+0x182>
   11c42:	2031      	movs	r0, #49	; 0x31
   11c44:	4b2a      	ldr	r3, [pc, #168]	; (11cf0 <LORAWAN_GetAttr+0x3bc>)
   11c46:	4798      	blx	r3
   11c48:	e6c0      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11c4a:	492d      	ldr	r1, [pc, #180]	; (11d00 <LORAWAN_GetAttr+0x3cc>)
   11c4c:	2026      	movs	r0, #38	; 0x26
   11c4e:	e7f9      	b.n	11c44 <LORAWAN_GetAttr+0x310>
   11c50:	4b24      	ldr	r3, [pc, #144]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11c52:	33dc      	adds	r3, #220	; 0xdc
   11c54:	e6f7      	b.n	11a46 <LORAWAN_GetAttr+0x112>
   11c56:	4b2b      	ldr	r3, [pc, #172]	; (11d04 <LORAWAN_GetAttr+0x3d0>)
   11c58:	4798      	blx	r3
   11c5a:	4b2b      	ldr	r3, [pc, #172]	; (11d08 <LORAWAN_GetAttr+0x3d4>)
   11c5c:	0004      	movs	r4, r0
   11c5e:	4798      	blx	r3
   11c60:	1b00      	subs	r0, r0, r4
   11c62:	7030      	strb	r0, [r6, #0]
   11c64:	e6ba      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11c66:	2100      	movs	r1, #0
   11c68:	2020      	movs	r0, #32
   11c6a:	e7eb      	b.n	11c44 <LORAWAN_GetAttr+0x310>
   11c6c:	4b1d      	ldr	r3, [pc, #116]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11c6e:	33ff      	adds	r3, #255	; 0xff
   11c70:	7c5b      	ldrb	r3, [r3, #17]
   11c72:	e6e4      	b.n	11a3e <LORAWAN_GetAttr+0x10a>
   11c74:	238c      	movs	r3, #140	; 0x8c
   11c76:	4a1b      	ldr	r2, [pc, #108]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11c78:	009b      	lsls	r3, r3, #2
   11c7a:	58d3      	ldr	r3, [r2, r3]
   11c7c:	e6ce      	b.n	11a1c <LORAWAN_GetAttr+0xe8>
   11c7e:	258a      	movs	r5, #138	; 0x8a
   11c80:	4c18      	ldr	r4, [pc, #96]	; (11ce4 <LORAWAN_GetAttr+0x3b0>)
   11c82:	00ad      	lsls	r5, r5, #2
   11c84:	5963      	ldr	r3, [r4, r5]
   11c86:	2015      	movs	r0, #21
   11c88:	3301      	adds	r3, #1
   11c8a:	d100      	bne.n	11c8e <LORAWAN_GetAttr+0x35a>
   11c8c:	e69e      	b.n	119cc <LORAWAN_GetAttr+0x98>
   11c8e:	4b1f      	ldr	r3, [pc, #124]	; (11d0c <LORAWAN_GetAttr+0x3d8>)
   11c90:	a910      	add	r1, sp, #64	; 0x40
   11c92:	5ce0      	ldrb	r0, [r4, r3]
   11c94:	4b1e      	ldr	r3, [pc, #120]	; (11d10 <LORAWAN_GetAttr+0x3dc>)
   11c96:	4798      	blx	r3
   11c98:	4b1e      	ldr	r3, [pc, #120]	; (11d14 <LORAWAN_GetAttr+0x3e0>)
   11c9a:	4798      	blx	r3
   11c9c:	22fa      	movs	r2, #250	; 0xfa
   11c9e:	9000      	str	r0, [sp, #0]
   11ca0:	9101      	str	r1, [sp, #4]
   11ca2:	0092      	lsls	r2, r2, #2
   11ca4:	5960      	ldr	r0, [r4, r5]
   11ca6:	2300      	movs	r3, #0
   11ca8:	4d1b      	ldr	r5, [pc, #108]	; (11d18 <LORAWAN_GetAttr+0x3e4>)
   11caa:	2100      	movs	r1, #0
   11cac:	47a8      	blx	r5
   11cae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   11cb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11cb2:	9002      	str	r0, [sp, #8]
   11cb4:	9103      	str	r1, [sp, #12]
   11cb6:	9800      	ldr	r0, [sp, #0]
   11cb8:	9901      	ldr	r1, [sp, #4]
   11cba:	1a80      	subs	r0, r0, r2
   11cbc:	4199      	sbcs	r1, r3
   11cbe:	22fa      	movs	r2, #250	; 0xfa
   11cc0:	2300      	movs	r3, #0
   11cc2:	0092      	lsls	r2, r2, #2
   11cc4:	4d15      	ldr	r5, [pc, #84]	; (11d1c <LORAWAN_GetAttr+0x3e8>)
   11cc6:	47a8      	blx	r5
   11cc8:	238b      	movs	r3, #139	; 0x8b
   11cca:	009b      	lsls	r3, r3, #2
   11ccc:	5ce4      	ldrb	r4, [r4, r3]
   11cce:	2300      	movs	r3, #0
   11cd0:	00a2      	lsls	r2, r4, #2
   11cd2:	9c02      	ldr	r4, [sp, #8]
   11cd4:	9d03      	ldr	r5, [sp, #12]
   11cd6:	1912      	adds	r2, r2, r4
   11cd8:	416b      	adcs	r3, r5
   11cda:	1812      	adds	r2, r2, r0
   11cdc:	414b      	adcs	r3, r1
   11cde:	6032      	str	r2, [r6, #0]
   11ce0:	6073      	str	r3, [r6, #4]
   11ce2:	e67b      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11ce4:	20002b5c 	.word	0x20002b5c
   11ce8:	00019d1d 	.word	0x00019d1d
   11cec:	00014af1 	.word	0x00014af1
   11cf0:	0000d895 	.word	0x0000d895
   11cf4:	00011915 	.word	0x00011915
   11cf8:	000165b9 	.word	0x000165b9
   11cfc:	0000db05 	.word	0x0000db05
   11d00:	20002c3b 	.word	0x20002c3b
   11d04:	0000fd5d 	.word	0x0000fd5d
   11d08:	0000fe05 	.word	0x0000fe05
   11d0c:	00000225 	.word	0x00000225
   11d10:	0000f391 	.word	0x0000f391
   11d14:	0000ed49 	.word	0x0000ed49
   11d18:	000169d5 	.word	0x000169d5
   11d1c:	00016995 	.word	0x00016995
   11d20:	88ca      	ldrh	r2, [r1, #6]
   11d22:	780b      	ldrb	r3, [r1, #0]
   11d24:	9206      	str	r2, [sp, #24]
   11d26:	784a      	ldrb	r2, [r1, #1]
   11d28:	af0e      	add	r7, sp, #56	; 0x38
   11d2a:	9209      	str	r2, [sp, #36]	; 0x24
   11d2c:	788a      	ldrb	r2, [r1, #2]
   11d2e:	2025      	movs	r0, #37	; 0x25
   11d30:	920a      	str	r2, [sp, #40]	; 0x28
   11d32:	78ca      	ldrb	r2, [r1, #3]
   11d34:	920b      	str	r2, [sp, #44]	; 0x2c
   11d36:	790a      	ldrb	r2, [r1, #4]
   11d38:	9208      	str	r2, [sp, #32]
   11d3a:	aa0c      	add	r2, sp, #48	; 0x30
   11d3c:	1d94      	adds	r4, r2, #6
   11d3e:	7193      	strb	r3, [r2, #6]
   11d40:	0021      	movs	r1, r4
   11d42:	003a      	movs	r2, r7
   11d44:	4b5b      	ldr	r3, [pc, #364]	; (11eb4 <LORAWAN_GetAttr+0x580>)
   11d46:	4798      	blx	r3
   11d48:	ab0c      	add	r3, sp, #48	; 0x30
   11d4a:	1ddd      	adds	r5, r3, #7
   11d4c:	002a      	movs	r2, r5
   11d4e:	0021      	movs	r1, r4
   11d50:	2023      	movs	r0, #35	; 0x23
   11d52:	4b58      	ldr	r3, [pc, #352]	; (11eb4 <LORAWAN_GetAttr+0x580>)
   11d54:	4798      	blx	r3
   11d56:	782d      	ldrb	r5, [r5, #0]
   11d58:	2d01      	cmp	r5, #1
   11d5a:	d000      	beq.n	11d5e <LORAWAN_GetAttr+0x42a>
   11d5c:	e0a1      	b.n	11ea2 <LORAWAN_GetAttr+0x56e>
   11d5e:	ac10      	add	r4, sp, #64	; 0x40
   11d60:	4b55      	ldr	r3, [pc, #340]	; (11eb8 <LORAWAN_GetAttr+0x584>)
   11d62:	0021      	movs	r1, r4
   11d64:	2007      	movs	r0, #7
   11d66:	4798      	blx	r3
   11d68:	783b      	ldrb	r3, [r7, #0]
   11d6a:	2b0c      	cmp	r3, #12
   11d6c:	d000      	beq.n	11d70 <LORAWAN_GetAttr+0x43c>
   11d6e:	e08a      	b.n	11e86 <LORAWAN_GetAttr+0x552>
   11d70:	2700      	movs	r7, #0
   11d72:	7823      	ldrb	r3, [r4, #0]
   11d74:	3b07      	subs	r3, #7
   11d76:	b2db      	uxtb	r3, r3
   11d78:	429d      	cmp	r5, r3
   11d7a:	417f      	adcs	r7, r7
   11d7c:	b2fb      	uxtb	r3, r7
   11d7e:	9302      	str	r3, [sp, #8]
   11d80:	ac10      	add	r4, sp, #64	; 0x40
   11d82:	ab0c      	add	r3, sp, #48	; 0x30
   11d84:	1d99      	adds	r1, r3, #6
   11d86:	0022      	movs	r2, r4
   11d88:	4b4a      	ldr	r3, [pc, #296]	; (11eb4 <LORAWAN_GetAttr+0x580>)
   11d8a:	2024      	movs	r0, #36	; 0x24
   11d8c:	4798      	blx	r3
   11d8e:	7823      	ldrb	r3, [r4, #0]
   11d90:	3b07      	subs	r3, #7
   11d92:	b2db      	uxtb	r3, r3
   11d94:	2b02      	cmp	r3, #2
   11d96:	d900      	bls.n	11d9a <LORAWAN_GetAttr+0x466>
   11d98:	e080      	b.n	11e9c <LORAWAN_GetAttr+0x568>
   11d9a:	4a48      	ldr	r2, [pc, #288]	; (11ebc <LORAWAN_GetAttr+0x588>)
   11d9c:	00db      	lsls	r3, r3, #3
   11d9e:	18d3      	adds	r3, r2, r3
   11da0:	681c      	ldr	r4, [r3, #0]
   11da2:	685d      	ldr	r5, [r3, #4]
   11da4:	2001      	movs	r0, #1
   11da6:	ab0e      	add	r3, sp, #56	; 0x38
   11da8:	781b      	ldrb	r3, [r3, #0]
   11daa:	4f45      	ldr	r7, [pc, #276]	; (11ec0 <LORAWAN_GetAttr+0x58c>)
   11dac:	9300      	str	r3, [sp, #0]
   11dae:	4098      	lsls	r0, r3
   11db0:	47b8      	blx	r7
   11db2:	0002      	movs	r2, r0
   11db4:	000b      	movs	r3, r1
   11db6:	0020      	movs	r0, r4
   11db8:	0029      	movs	r1, r5
   11dba:	4c42      	ldr	r4, [pc, #264]	; (11ec4 <LORAWAN_GetAttr+0x590>)
   11dbc:	47a0      	blx	r4
   11dbe:	0002      	movs	r2, r0
   11dc0:	000b      	movs	r3, r1
   11dc2:	2000      	movs	r0, #0
   11dc4:	4940      	ldr	r1, [pc, #256]	; (11ec8 <LORAWAN_GetAttr+0x594>)
   11dc6:	47a0      	blx	r4
   11dc8:	466b      	mov	r3, sp
   11dca:	9004      	str	r0, [sp, #16]
   11dcc:	9105      	str	r1, [sp, #20]
   11dce:	7e18      	ldrb	r0, [r3, #24]
   11dd0:	47b8      	blx	r7
   11dd2:	4c3e      	ldr	r4, [pc, #248]	; (11ecc <LORAWAN_GetAttr+0x598>)
   11dd4:	2200      	movs	r2, #0
   11dd6:	4b3e      	ldr	r3, [pc, #248]	; (11ed0 <LORAWAN_GetAttr+0x59c>)
   11dd8:	47a0      	blx	r4
   11dda:	9a04      	ldr	r2, [sp, #16]
   11ddc:	9b05      	ldr	r3, [sp, #20]
   11dde:	4c3d      	ldr	r4, [pc, #244]	; (11ed4 <LORAWAN_GetAttr+0x5a0>)
   11de0:	47a0      	blx	r4
   11de2:	9b08      	ldr	r3, [sp, #32]
   11de4:	9006      	str	r0, [sp, #24]
   11de6:	9107      	str	r1, [sp, #28]
   11de8:	0058      	lsls	r0, r3, #1
   11dea:	9b00      	ldr	r3, [sp, #0]
   11dec:	2214      	movs	r2, #20
   11dee:	1ac0      	subs	r0, r0, r3
   11df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11df2:	3007      	adds	r0, #7
   11df4:	009b      	lsls	r3, r3, #2
   11df6:	18c0      	adds	r0, r0, r3
   11df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11dfa:	0080      	lsls	r0, r0, #2
   11dfc:	1e59      	subs	r1, r3, #1
   11dfe:	418b      	sbcs	r3, r1
   11e00:	425b      	negs	r3, r3
   11e02:	401a      	ands	r2, r3
   11e04:	1a80      	subs	r0, r0, r2
   11e06:	47b8      	blx	r7
   11e08:	0004      	movs	r4, r0
   11e0a:	9802      	ldr	r0, [sp, #8]
   11e0c:	000d      	movs	r5, r1
   11e0e:	1e43      	subs	r3, r0, #1
   11e10:	4198      	sbcs	r0, r3
   11e12:	9b00      	ldr	r3, [sp, #0]
   11e14:	0040      	lsls	r0, r0, #1
   11e16:	1a18      	subs	r0, r3, r0
   11e18:	0080      	lsls	r0, r0, #2
   11e1a:	47b8      	blx	r7
   11e1c:	0002      	movs	r2, r0
   11e1e:	000b      	movs	r3, r1
   11e20:	0020      	movs	r0, r4
   11e22:	0029      	movs	r1, r5
   11e24:	4c27      	ldr	r4, [pc, #156]	; (11ec4 <LORAWAN_GetAttr+0x590>)
   11e26:	47a0      	blx	r4
   11e28:	4b2b      	ldr	r3, [pc, #172]	; (11ed8 <LORAWAN_GetAttr+0x5a4>)
   11e2a:	0004      	movs	r4, r0
   11e2c:	000d      	movs	r5, r1
   11e2e:	4798      	blx	r3
   11e30:	4b2a      	ldr	r3, [pc, #168]	; (11edc <LORAWAN_GetAttr+0x5a8>)
   11e32:	0007      	movs	r7, r0
   11e34:	4798      	blx	r3
   11e36:	0002      	movs	r2, r0
   11e38:	000b      	movs	r3, r1
   11e3a:	0020      	movs	r0, r4
   11e3c:	0029      	movs	r1, r5
   11e3e:	4c28      	ldr	r4, [pc, #160]	; (11ee0 <LORAWAN_GetAttr+0x5ac>)
   11e40:	47a0      	blx	r4
   11e42:	2200      	movs	r2, #0
   11e44:	2300      	movs	r3, #0
   11e46:	4c27      	ldr	r4, [pc, #156]	; (11ee4 <LORAWAN_GetAttr+0x5b0>)
   11e48:	47a0      	blx	r4
   11e4a:	1e43      	subs	r3, r0, #1
   11e4c:	4198      	sbcs	r0, r3
   11e4e:	183f      	adds	r7, r7, r0
   11e50:	003b      	movs	r3, r7
   11e52:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11e54:	3004      	adds	r0, #4
   11e56:	4343      	muls	r3, r0
   11e58:	3308      	adds	r3, #8
   11e5a:	0018      	movs	r0, r3
   11e5c:	4b1f      	ldr	r3, [pc, #124]	; (11edc <LORAWAN_GetAttr+0x5a8>)
   11e5e:	4798      	blx	r3
   11e60:	9a04      	ldr	r2, [sp, #16]
   11e62:	9b05      	ldr	r3, [sp, #20]
   11e64:	4c1b      	ldr	r4, [pc, #108]	; (11ed4 <LORAWAN_GetAttr+0x5a0>)
   11e66:	47a0      	blx	r4
   11e68:	9a06      	ldr	r2, [sp, #24]
   11e6a:	9b07      	ldr	r3, [sp, #28]
   11e6c:	4c17      	ldr	r4, [pc, #92]	; (11ecc <LORAWAN_GetAttr+0x598>)
   11e6e:	47a0      	blx	r4
   11e70:	2200      	movs	r2, #0
   11e72:	4b1d      	ldr	r3, [pc, #116]	; (11ee8 <LORAWAN_GetAttr+0x5b4>)
   11e74:	4c17      	ldr	r4, [pc, #92]	; (11ed4 <LORAWAN_GetAttr+0x5a0>)
   11e76:	47a0      	blx	r4
   11e78:	2200      	movs	r2, #0
   11e7a:	4b1b      	ldr	r3, [pc, #108]	; (11ee8 <LORAWAN_GetAttr+0x5b4>)
   11e7c:	47a0      	blx	r4
   11e7e:	4b16      	ldr	r3, [pc, #88]	; (11ed8 <LORAWAN_GetAttr+0x5a4>)
   11e80:	4798      	blx	r3
   11e82:	6030      	str	r0, [r6, #0]
   11e84:	e5aa      	b.n	119dc <LORAWAN_GetAttr+0xa8>
   11e86:	2200      	movs	r2, #0
   11e88:	9202      	str	r2, [sp, #8]
   11e8a:	2b0b      	cmp	r3, #11
   11e8c:	d000      	beq.n	11e90 <LORAWAN_GetAttr+0x55c>
   11e8e:	e777      	b.n	11d80 <LORAWAN_GetAttr+0x44c>
   11e90:	7827      	ldrb	r7, [r4, #0]
   11e92:	3f07      	subs	r7, #7
   11e94:	427a      	negs	r2, r7
   11e96:	417a      	adcs	r2, r7
   11e98:	b2d3      	uxtb	r3, r2
   11e9a:	e770      	b.n	11d7e <LORAWAN_GetAttr+0x44a>
   11e9c:	2400      	movs	r4, #0
   11e9e:	2500      	movs	r5, #0
   11ea0:	e780      	b.n	11da4 <LORAWAN_GetAttr+0x470>
   11ea2:	20a0      	movs	r0, #160	; 0xa0
   11ea4:	9b08      	ldr	r3, [sp, #32]
   11ea6:	4358      	muls	r0, r3
   11ea8:	23c8      	movs	r3, #200	; 0xc8
   11eaa:	009b      	lsls	r3, r3, #2
   11eac:	18c0      	adds	r0, r0, r3
   11eae:	4b0b      	ldr	r3, [pc, #44]	; (11edc <LORAWAN_GetAttr+0x5a8>)
   11eb0:	4798      	blx	r3
   11eb2:	e7e4      	b.n	11e7e <LORAWAN_GetAttr+0x54a>
   11eb4:	0000d895 	.word	0x0000d895
   11eb8:	00014af1 	.word	0x00014af1
   11ebc:	00020220 	.word	0x00020220
   11ec0:	00019459 	.word	0x00019459
   11ec4:	0001805d 	.word	0x0001805d
   11ec8:	3ff00000 	.word	0x3ff00000
   11ecc:	00017a3d 	.word	0x00017a3d
   11ed0:	40110000 	.word	0x40110000
   11ed4:	000188c5 	.word	0x000188c5
   11ed8:	00016a59 	.word	0x00016a59
   11edc:	000194dd 	.word	0x000194dd
   11ee0:	00018dc5 	.word	0x00018dc5
   11ee4:	000168f9 	.word	0x000168f9
   11ee8:	408f4000 	.word	0x408f4000

00011eec <LORAWAN_TxDone>:
   11eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   11eee:	6843      	ldr	r3, [r0, #4]
   11ef0:	b091      	sub	sp, #68	; 0x44
   11ef2:	ad08      	add	r5, sp, #32
   11ef4:	7804      	ldrb	r4, [r0, #0]
   11ef6:	9302      	str	r3, [sp, #8]
   11ef8:	2100      	movs	r1, #0
   11efa:	4b83      	ldr	r3, [pc, #524]	; (12108 <LORAWAN_TxDone+0x21c>)
   11efc:	002a      	movs	r2, r5
   11efe:	2027      	movs	r0, #39	; 0x27
   11f00:	4798      	blx	r3
   11f02:	4f82      	ldr	r7, [pc, #520]	; (1210c <LORAWAN_TxDone+0x220>)
   11f04:	0039      	movs	r1, r7
   11f06:	317c      	adds	r1, #124	; 0x7c
   11f08:	780b      	ldrb	r3, [r1, #0]
   11f0a:	2b7f      	cmp	r3, #127	; 0x7f
   11f0c:	d900      	bls.n	11f10 <LORAWAN_TxDone+0x24>
   11f0e:	e259      	b.n	123c4 <LORAWAN_TxDone+0x4d8>
   11f10:	4a7f      	ldr	r2, [pc, #508]	; (12110 <LORAWAN_TxDone+0x224>)
   11f12:	7810      	ldrb	r0, [r2, #0]
   11f14:	2804      	cmp	r0, #4
   11f16:	d10b      	bne.n	11f30 <LORAWAN_TxDone+0x44>
   11f18:	220e      	movs	r2, #14
   11f1a:	4393      	bics	r3, r2
   11f1c:	700b      	strb	r3, [r1, #0]
   11f1e:	3017      	adds	r0, #23
   11f20:	07db      	lsls	r3, r3, #31
   11f22:	d500      	bpl.n	11f26 <LORAWAN_TxDone+0x3a>
   11f24:	e0b0      	b.n	12088 <LORAWAN_TxDone+0x19c>
   11f26:	201b      	movs	r0, #27
   11f28:	4b7a      	ldr	r3, [pc, #488]	; (12114 <LORAWAN_TxDone+0x228>)
   11f2a:	4798      	blx	r3
   11f2c:	b011      	add	sp, #68	; 0x44
   11f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f30:	7813      	ldrb	r3, [r2, #0]
   11f32:	2b02      	cmp	r3, #2
   11f34:	d1fa      	bne.n	11f2c <LORAWAN_TxDone+0x40>
   11f36:	4b78      	ldr	r3, [pc, #480]	; (12118 <LORAWAN_TxDone+0x22c>)
   11f38:	5cfa      	ldrb	r2, [r7, r3]
   11f3a:	2a00      	cmp	r2, #0
   11f3c:	d005      	beq.n	11f4a <LORAWAN_TxDone+0x5e>
   11f3e:	2200      	movs	r2, #0
   11f40:	4976      	ldr	r1, [pc, #472]	; (1211c <LORAWAN_TxDone+0x230>)
   11f42:	54fa      	strb	r2, [r7, r3]
   11f44:	200b      	movs	r0, #11
   11f46:	4b76      	ldr	r3, [pc, #472]	; (12120 <LORAWAN_TxDone+0x234>)
   11f48:	4798      	blx	r3
   11f4a:	2c07      	cmp	r4, #7
   11f4c:	d000      	beq.n	11f50 <LORAWAN_TxDone+0x64>
   11f4e:	e09f      	b.n	12090 <LORAWAN_TxDone+0x1a4>
   11f50:	79eb      	ldrb	r3, [r5, #7]
   11f52:	2b00      	cmp	r3, #0
   11f54:	d0ea      	beq.n	11f2c <LORAWAN_TxDone+0x40>
   11f56:	003b      	movs	r3, r7
   11f58:	338c      	adds	r3, #140	; 0x8c
   11f5a:	7818      	ldrb	r0, [r3, #0]
   11f5c:	003e      	movs	r6, r7
   11f5e:	2304      	movs	r3, #4
   11f60:	36fe      	adds	r6, #254	; 0xfe
   11f62:	4018      	ands	r0, r3
   11f64:	4d6f      	ldr	r5, [pc, #444]	; (12124 <LORAWAN_TxDone+0x238>)
   11f66:	d005      	beq.n	11f74 <LORAWAN_TxDone+0x88>
   11f68:	2000      	movs	r0, #0
   11f6a:	2109      	movs	r1, #9
   11f6c:	82b0      	strh	r0, [r6, #20]
   11f6e:	47a8      	blx	r5
   11f70:	0020      	movs	r0, r4
   11f72:	e7d9      	b.n	11f28 <LORAWAN_TxDone+0x3c>
   11f74:	8ab3      	ldrh	r3, [r6, #20]
   11f76:	2109      	movs	r1, #9
   11f78:	3301      	adds	r3, #1
   11f7a:	82b3      	strh	r3, [r6, #20]
   11f7c:	47a8      	blx	r5
   11f7e:	8af3      	ldrh	r3, [r6, #22]
   11f80:	4a69      	ldr	r2, [pc, #420]	; (12128 <LORAWAN_TxDone+0x23c>)
   11f82:	4293      	cmp	r3, r2
   11f84:	d002      	beq.n	11f8c <LORAWAN_TxDone+0xa0>
   11f86:	8ab2      	ldrh	r2, [r6, #20]
   11f88:	429a      	cmp	r2, r3
   11f8a:	d265      	bcs.n	12058 <LORAWAN_TxDone+0x16c>
   11f8c:	4b67      	ldr	r3, [pc, #412]	; (1212c <LORAWAN_TxDone+0x240>)
   11f8e:	5cfb      	ldrb	r3, [r7, r3]
   11f90:	2b00      	cmp	r3, #0
   11f92:	d061      	beq.n	12058 <LORAWAN_TxDone+0x16c>
   11f94:	2601      	movs	r6, #1
   11f96:	003b      	movs	r3, r7
   11f98:	a906      	add	r1, sp, #24
   11f9a:	700e      	strb	r6, [r1, #0]
   11f9c:	33e1      	adds	r3, #225	; 0xe1
   11f9e:	781b      	ldrb	r3, [r3, #0]
   11fa0:	aa0c      	add	r2, sp, #48	; 0x30
   11fa2:	704b      	strb	r3, [r1, #1]
   11fa4:	003b      	movs	r3, r7
   11fa6:	33df      	adds	r3, #223	; 0xdf
   11fa8:	781b      	ldrb	r3, [r3, #0]
   11faa:	202f      	movs	r0, #47	; 0x2f
   11fac:	708b      	strb	r3, [r1, #2]
   11fae:	4b60      	ldr	r3, [pc, #384]	; (12130 <LORAWAN_TxDone+0x244>)
   11fb0:	4798      	blx	r3
   11fb2:	2808      	cmp	r0, #8
   11fb4:	d135      	bne.n	12022 <LORAWAN_TxDone+0x136>
   11fb6:	a807      	add	r0, sp, #28
   11fb8:	4b5e      	ldr	r3, [pc, #376]	; (12134 <LORAWAN_TxDone+0x248>)
   11fba:	7006      	strb	r6, [r0, #0]
   11fbc:	4798      	blx	r3
   11fbe:	980c      	ldr	r0, [sp, #48]	; 0x30
   11fc0:	990d      	ldr	r1, [sp, #52]	; 0x34
   11fc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11fc4:	4b5c      	ldr	r3, [pc, #368]	; (12138 <LORAWAN_TxDone+0x24c>)
   11fc6:	4798      	blx	r3
   11fc8:	003b      	movs	r3, r7
   11fca:	33c6      	adds	r3, #198	; 0xc6
   11fcc:	881b      	ldrh	r3, [r3, #0]
   11fce:	a80a      	add	r0, sp, #40	; 0x28
   11fd0:	7003      	strb	r3, [r0, #0]
   11fd2:	4b5a      	ldr	r3, [pc, #360]	; (1213c <LORAWAN_TxDone+0x250>)
   11fd4:	6043      	str	r3, [r0, #4]
   11fd6:	4b5a      	ldr	r3, [pc, #360]	; (12140 <LORAWAN_TxDone+0x254>)
   11fd8:	4798      	blx	r3
   11fda:	1e04      	subs	r4, r0, #0
   11fdc:	d108      	bne.n	11ff0 <LORAWAN_TxDone+0x104>
   11fde:	220e      	movs	r2, #14
   11fe0:	377c      	adds	r7, #124	; 0x7c
   11fe2:	783b      	ldrb	r3, [r7, #0]
   11fe4:	4393      	bics	r3, r2
   11fe6:	001a      	movs	r2, r3
   11fe8:	2302      	movs	r3, #2
   11fea:	4313      	orrs	r3, r2
   11fec:	703b      	strb	r3, [r7, #0]
   11fee:	e79d      	b.n	11f2c <LORAWAN_TxDone+0x40>
   11ff0:	003b      	movs	r3, r7
   11ff2:	338c      	adds	r3, #140	; 0x8c
   11ff4:	7818      	ldrb	r0, [r3, #0]
   11ff6:	003b      	movs	r3, r7
   11ff8:	4030      	ands	r0, r6
   11ffa:	33fe      	adds	r3, #254	; 0xfe
   11ffc:	4e51      	ldr	r6, [pc, #324]	; (12144 <LORAWAN_TxDone+0x258>)
   11ffe:	4f52      	ldr	r7, [pc, #328]	; (12148 <LORAWAN_TxDone+0x25c>)
   12000:	2800      	cmp	r0, #0
   12002:	d009      	beq.n	12018 <LORAWAN_TxDone+0x12c>
   12004:	2000      	movs	r0, #0
   12006:	2109      	movs	r1, #9
   12008:	8298      	strh	r0, [r3, #20]
   1200a:	47a8      	blx	r5
   1200c:	4b4f      	ldr	r3, [pc, #316]	; (1214c <LORAWAN_TxDone+0x260>)
   1200e:	4798      	blx	r3
   12010:	47b8      	blx	r7
   12012:	0020      	movs	r0, r4
   12014:	47b0      	blx	r6
   12016:	e789      	b.n	11f2c <LORAWAN_TxDone+0x40>
   12018:	2109      	movs	r1, #9
   1201a:	8298      	strh	r0, [r3, #20]
   1201c:	47a8      	blx	r5
   1201e:	4b4c      	ldr	r3, [pc, #304]	; (12150 <LORAWAN_TxDone+0x264>)
   12020:	e7f5      	b.n	1200e <LORAWAN_TxDone+0x122>
   12022:	003b      	movs	r3, r7
   12024:	338c      	adds	r3, #140	; 0x8c
   12026:	7818      	ldrb	r0, [r3, #0]
   12028:	003b      	movs	r3, r7
   1202a:	4006      	ands	r6, r0
   1202c:	4c45      	ldr	r4, [pc, #276]	; (12144 <LORAWAN_TxDone+0x258>)
   1202e:	33fe      	adds	r3, #254	; 0xfe
   12030:	4f45      	ldr	r7, [pc, #276]	; (12148 <LORAWAN_TxDone+0x25c>)
   12032:	2e00      	cmp	r6, #0
   12034:	d00a      	beq.n	1204c <LORAWAN_TxDone+0x160>
   12036:	2600      	movs	r6, #0
   12038:	2109      	movs	r1, #9
   1203a:	0030      	movs	r0, r6
   1203c:	829e      	strh	r6, [r3, #20]
   1203e:	47a8      	blx	r5
   12040:	4b42      	ldr	r3, [pc, #264]	; (1214c <LORAWAN_TxDone+0x260>)
   12042:	4798      	blx	r3
   12044:	47b8      	blx	r7
   12046:	0030      	movs	r0, r6
   12048:	47a0      	blx	r4
   1204a:	e76f      	b.n	11f2c <LORAWAN_TxDone+0x40>
   1204c:	2109      	movs	r1, #9
   1204e:	0030      	movs	r0, r6
   12050:	829e      	strh	r6, [r3, #20]
   12052:	47a8      	blx	r5
   12054:	4b3e      	ldr	r3, [pc, #248]	; (12150 <LORAWAN_TxDone+0x264>)
   12056:	e7f4      	b.n	12042 <LORAWAN_TxDone+0x156>
   12058:	003b      	movs	r3, r7
   1205a:	2000      	movs	r0, #0
   1205c:	33fe      	adds	r3, #254	; 0xfe
   1205e:	2109      	movs	r1, #9
   12060:	8298      	strh	r0, [r3, #20]
   12062:	47a8      	blx	r5
   12064:	003a      	movs	r2, r7
   12066:	210e      	movs	r1, #14
   12068:	327c      	adds	r2, #124	; 0x7c
   1206a:	7813      	ldrb	r3, [r2, #0]
   1206c:	378c      	adds	r7, #140	; 0x8c
   1206e:	438b      	bics	r3, r1
   12070:	7013      	strb	r3, [r2, #0]
   12072:	2220      	movs	r2, #32
   12074:	783b      	ldrb	r3, [r7, #0]
   12076:	4c34      	ldr	r4, [pc, #208]	; (12148 <LORAWAN_TxDone+0x25c>)
   12078:	4393      	bics	r3, r2
   1207a:	703b      	strb	r3, [r7, #0]
   1207c:	07db      	lsls	r3, r3, #31
   1207e:	d505      	bpl.n	1208c <LORAWAN_TxDone+0x1a0>
   12080:	4b32      	ldr	r3, [pc, #200]	; (1214c <LORAWAN_TxDone+0x260>)
   12082:	4798      	blx	r3
   12084:	47a0      	blx	r4
   12086:	2007      	movs	r0, #7
   12088:	4b2e      	ldr	r3, [pc, #184]	; (12144 <LORAWAN_TxDone+0x258>)
   1208a:	e74e      	b.n	11f2a <LORAWAN_TxDone+0x3e>
   1208c:	4b30      	ldr	r3, [pc, #192]	; (12150 <LORAWAN_TxDone+0x264>)
   1208e:	e7f8      	b.n	12082 <LORAWAN_TxDone+0x196>
   12090:	2c00      	cmp	r4, #0
   12092:	d000      	beq.n	12096 <LORAWAN_TxDone+0x1aa>
   12094:	e74a      	b.n	11f2c <LORAWAN_TxDone+0x40>
   12096:	003b      	movs	r3, r7
   12098:	33fc      	adds	r3, #252	; 0xfc
   1209a:	681d      	ldr	r5, [r3, #0]
   1209c:	003b      	movs	r3, r7
   1209e:	33fe      	adds	r3, #254	; 0xfe
   120a0:	829c      	strh	r4, [r3, #20]
   120a2:	0020      	movs	r0, r4
   120a4:	2109      	movs	r1, #9
   120a6:	4c1f      	ldr	r4, [pc, #124]	; (12124 <LORAWAN_TxDone+0x238>)
   120a8:	47a0      	blx	r4
   120aa:	003b      	movs	r3, r7
   120ac:	003e      	movs	r6, r7
   120ae:	33db      	adds	r3, #219	; 0xdb
   120b0:	781b      	ldrb	r3, [r3, #0]
   120b2:	367c      	adds	r6, #124	; 0x7c
   120b4:	2b00      	cmp	r3, #0
   120b6:	d14d      	bne.n	12154 <LORAWAN_TxDone+0x268>
   120b8:	003a      	movs	r2, r7
   120ba:	32dc      	adds	r2, #220	; 0xdc
   120bc:	7812      	ldrb	r2, [r2, #0]
   120be:	2a00      	cmp	r2, #0
   120c0:	d148      	bne.n	12154 <LORAWAN_TxDone+0x268>
   120c2:	7832      	ldrb	r2, [r6, #0]
   120c4:	3301      	adds	r3, #1
   120c6:	421a      	tst	r2, r3
   120c8:	d053      	beq.n	12172 <LORAWAN_TxDone+0x286>
   120ca:	1d39      	adds	r1, r7, #4
   120cc:	6fca      	ldr	r2, [r1, #124]	; 0x7c
   120ce:	18d2      	adds	r2, r2, r3
   120d0:	67ca      	str	r2, [r1, #124]	; 0x7c
   120d2:	2188      	movs	r1, #136	; 0x88
   120d4:	0089      	lsls	r1, r1, #2
   120d6:	5c79      	ldrb	r1, [r7, r1]
   120d8:	2900      	cmp	r1, #0
   120da:	d003      	beq.n	120e4 <LORAWAN_TxDone+0x1f8>
   120dc:	408b      	lsls	r3, r1
   120de:	3b01      	subs	r3, #1
   120e0:	421a      	tst	r2, r3
   120e2:	d102      	bne.n	120ea <LORAWAN_TxDone+0x1fe>
   120e4:	2116      	movs	r1, #22
   120e6:	2000      	movs	r0, #0
   120e8:	47a0      	blx	r4
   120ea:	782b      	ldrb	r3, [r5, #0]
   120ec:	003a      	movs	r2, r7
   120ee:	2b01      	cmp	r3, #1
   120f0:	d106      	bne.n	12100 <LORAWAN_TxDone+0x214>
   120f2:	328c      	adds	r2, #140	; 0x8c
   120f4:	7811      	ldrb	r1, [r2, #0]
   120f6:	430b      	orrs	r3, r1
   120f8:	7013      	strb	r3, [r2, #0]
   120fa:	003a      	movs	r2, r7
   120fc:	32dc      	adds	r2, #220	; 0xdc
   120fe:	e000      	b.n	12102 <LORAWAN_TxDone+0x216>
   12100:	32db      	adds	r2, #219	; 0xdb
   12102:	7813      	ldrb	r3, [r2, #0]
   12104:	3301      	adds	r3, #1
   12106:	e033      	b.n	12170 <LORAWAN_TxDone+0x284>
   12108:	00011935 	.word	0x00011935
   1210c:	20002b5c 	.word	0x20002b5c
   12110:	20002d90 	.word	0x20002d90
   12114:	00010919 	.word	0x00010919
   12118:	00000216 	.word	0x00000216
   1211c:	20002d71 	.word	0x20002d71
   12120:	00014be1 	.word	0x00014be1
   12124:	0000e071 	.word	0x0000e071
   12128:	0000ffff 	.word	0x0000ffff
   1212c:	0000021e 	.word	0x0000021e
   12130:	0000d895 	.word	0x0000d895
   12134:	00015de5 	.word	0x00015de5
   12138:	00010ea9 	.word	0x00010ea9
   1213c:	20002da1 	.word	0x20002da1
   12140:	00015511 	.word	0x00015511
   12144:	00011421 	.word	0x00011421
   12148:	0000fd19 	.word	0x0000fd19
   1214c:	000108c5 	.word	0x000108c5
   12150:	000108f5 	.word	0x000108f5
   12154:	003a      	movs	r2, r7
   12156:	327c      	adds	r2, #124	; 0x7c
   12158:	7811      	ldrb	r1, [r2, #0]
   1215a:	2201      	movs	r2, #1
   1215c:	4211      	tst	r1, r2
   1215e:	d008      	beq.n	12172 <LORAWAN_TxDone+0x286>
   12160:	0039      	movs	r1, r7
   12162:	318c      	adds	r1, #140	; 0x8c
   12164:	7809      	ldrb	r1, [r1, #0]
   12166:	4211      	tst	r1, r2
   12168:	d1c7      	bne.n	120fa <LORAWAN_TxDone+0x20e>
   1216a:	189b      	adds	r3, r3, r2
   1216c:	003a      	movs	r2, r7
   1216e:	32db      	adds	r2, #219	; 0xdb
   12170:	7013      	strb	r3, [r2, #0]
   12172:	003b      	movs	r3, r7
   12174:	2200      	movs	r2, #0
   12176:	33f0      	adds	r3, #240	; 0xf0
   12178:	701a      	strb	r2, [r3, #0]
   1217a:	003a      	movs	r2, r7
   1217c:	210e      	movs	r1, #14
   1217e:	2504      	movs	r5, #4
   12180:	327c      	adds	r2, #124	; 0x7c
   12182:	7813      	ldrb	r3, [r2, #0]
   12184:	003e      	movs	r6, r7
   12186:	438b      	bics	r3, r1
   12188:	432b      	orrs	r3, r5
   1218a:	7013      	strb	r3, [r2, #0]
   1218c:	003b      	movs	r3, r7
   1218e:	33df      	adds	r3, #223	; 0xdf
   12190:	781b      	ldrb	r3, [r3, #0]
   12192:	a907      	add	r1, sp, #28
   12194:	708b      	strb	r3, [r1, #2]
   12196:	003b      	movs	r3, r7
   12198:	33ee      	adds	r3, #238	; 0xee
   1219a:	781b      	ldrb	r3, [r3, #0]
   1219c:	368c      	adds	r6, #140	; 0x8c
   1219e:	704b      	strb	r3, [r1, #1]
   121a0:	7833      	ldrb	r3, [r6, #0]
   121a2:	ac0a      	add	r4, sp, #40	; 0x28
   121a4:	075b      	lsls	r3, r3, #29
   121a6:	0fdb      	lsrs	r3, r3, #31
   121a8:	700b      	strb	r3, [r1, #0]
   121aa:	0022      	movs	r2, r4
   121ac:	4b95      	ldr	r3, [pc, #596]	; (12404 <LORAWAN_TxDone+0x518>)
   121ae:	2019      	movs	r0, #25
   121b0:	4798      	blx	r3
   121b2:	7833      	ldrb	r3, [r6, #0]
   121b4:	422b      	tst	r3, r5
   121b6:	d100      	bne.n	121ba <LORAWAN_TxDone+0x2ce>
   121b8:	e0cd      	b.n	12356 <LORAWAN_TxDone+0x46a>
   121ba:	2300      	movs	r3, #0
   121bc:	ae0c      	add	r6, sp, #48	; 0x30
   121be:	7033      	strb	r3, [r6, #0]
   121c0:	0032      	movs	r2, r6
   121c2:	2100      	movs	r1, #0
   121c4:	2009      	movs	r0, #9
   121c6:	4b8f      	ldr	r3, [pc, #572]	; (12404 <LORAWAN_TxDone+0x518>)
   121c8:	4798      	blx	r3
   121ca:	0031      	movs	r1, r6
   121cc:	aa06      	add	r2, sp, #24
   121ce:	0028      	movs	r0, r5
   121d0:	4b8c      	ldr	r3, [pc, #560]	; (12404 <LORAWAN_TxDone+0x518>)
   121d2:	4798      	blx	r3
   121d4:	0039      	movs	r1, r7
   121d6:	7923      	ldrb	r3, [r4, #4]
   121d8:	3169      	adds	r1, #105	; 0x69
   121da:	700b      	strb	r3, [r1, #0]
   121dc:	003b      	movs	r3, r7
   121de:	260f      	movs	r6, #15
   121e0:	7822      	ldrb	r2, [r4, #0]
   121e2:	3365      	adds	r3, #101	; 0x65
   121e4:	701a      	strb	r2, [r3, #0]
   121e6:	7862      	ldrb	r2, [r4, #1]
   121e8:	2004      	movs	r0, #4
   121ea:	705a      	strb	r2, [r3, #1]
   121ec:	78a2      	ldrb	r2, [r4, #2]
   121ee:	2500      	movs	r5, #0
   121f0:	709a      	strb	r2, [r3, #2]
   121f2:	78e2      	ldrb	r2, [r4, #3]
   121f4:	70da      	strb	r2, [r3, #3]
   121f6:	ab02      	add	r3, sp, #8
   121f8:	18f6      	adds	r6, r6, r3
   121fa:	0032      	movs	r2, r6
   121fc:	4b81      	ldr	r3, [pc, #516]	; (12404 <LORAWAN_TxDone+0x518>)
   121fe:	4798      	blx	r3
   12200:	003b      	movs	r3, r7
   12202:	338c      	adds	r3, #140	; 0x8c
   12204:	781c      	ldrb	r4, [r3, #0]
   12206:	2304      	movs	r3, #4
   12208:	401c      	ands	r4, r3
   1220a:	2300      	movs	r3, #0
   1220c:	003a      	movs	r2, r7
   1220e:	56f3      	ldrsb	r3, [r6, r3]
   12210:	42ac      	cmp	r4, r5
   12212:	d100      	bne.n	12216 <LORAWAN_TxDone+0x32a>
   12214:	e0a2      	b.n	1235c <LORAWAN_TxDone+0x470>
   12216:	2100      	movs	r1, #0
   12218:	32ce      	adds	r2, #206	; 0xce
   1221a:	8816      	ldrh	r6, [r2, #0]
   1221c:	aa06      	add	r2, sp, #24
   1221e:	5651      	ldrsb	r1, [r2, r1]
   12220:	4c79      	ldr	r4, [pc, #484]	; (12408 <LORAWAN_TxDone+0x51c>)
   12222:	1872      	adds	r2, r6, r1
   12224:	9203      	str	r2, [sp, #12]
   12226:	003a      	movs	r2, r7
   12228:	32cc      	adds	r2, #204	; 0xcc
   1222a:	8811      	ldrh	r1, [r2, #0]
   1222c:	26fa      	movs	r6, #250	; 0xfa
   1222e:	18c9      	adds	r1, r1, r3
   12230:	4b76      	ldr	r3, [pc, #472]	; (1240c <LORAWAN_TxDone+0x520>)
   12232:	00b6      	lsls	r6, r6, #2
   12234:	5cfb      	ldrb	r3, [r7, r3]
   12236:	002a      	movs	r2, r5
   12238:	1ac9      	subs	r1, r1, r3
   1223a:	003b      	movs	r3, r7
   1223c:	33e2      	adds	r3, #226	; 0xe2
   1223e:	7818      	ldrb	r0, [r3, #0]
   12240:	4371      	muls	r1, r6
   12242:	4b73      	ldr	r3, [pc, #460]	; (12410 <LORAWAN_TxDone+0x524>)
   12244:	9500      	str	r5, [sp, #0]
   12246:	47a0      	blx	r4
   12248:	4b70      	ldr	r3, [pc, #448]	; (1240c <LORAWAN_TxDone+0x520>)
   1224a:	002a      	movs	r2, r5
   1224c:	5cf9      	ldrb	r1, [r7, r3]
   1224e:	9b03      	ldr	r3, [sp, #12]
   12250:	1a59      	subs	r1, r3, r1
   12252:	003b      	movs	r3, r7
   12254:	33e3      	adds	r3, #227	; 0xe3
   12256:	7818      	ldrb	r0, [r3, #0]
   12258:	4371      	muls	r1, r6
   1225a:	4b6e      	ldr	r3, [pc, #440]	; (12414 <LORAWAN_TxDone+0x528>)
   1225c:	9500      	str	r5, [sp, #0]
   1225e:	47a0      	blx	r4
   12260:	003b      	movs	r3, r7
   12262:	33ff      	adds	r3, #255	; 0xff
   12264:	7c5b      	ldrb	r3, [r3, #17]
   12266:	069b      	lsls	r3, r3, #26
   12268:	d549      	bpl.n	122fe <LORAWAN_TxDone+0x412>
   1226a:	466a      	mov	r2, sp
   1226c:	003b      	movs	r3, r7
   1226e:	7a12      	ldrb	r2, [r2, #8]
   12270:	3377      	adds	r3, #119	; 0x77
   12272:	701a      	strb	r2, [r3, #0]
   12274:	9a02      	ldr	r2, [sp, #8]
   12276:	ad0c      	add	r5, sp, #48	; 0x30
   12278:	0a12      	lsrs	r2, r2, #8
   1227a:	705a      	strb	r2, [r3, #1]
   1227c:	9a02      	ldr	r2, [sp, #8]
   1227e:	0c12      	lsrs	r2, r2, #16
   12280:	709a      	strb	r2, [r3, #2]
   12282:	9a02      	ldr	r2, [sp, #8]
   12284:	0e12      	lsrs	r2, r2, #24
   12286:	70da      	strb	r2, [r3, #3]
   12288:	003b      	movs	r3, r7
   1228a:	337b      	adds	r3, #123	; 0x7b
   1228c:	781b      	ldrb	r3, [r3, #0]
   1228e:	2b00      	cmp	r3, #0
   12290:	d027      	beq.n	122e2 <LORAWAN_TxDone+0x3f6>
   12292:	003c      	movs	r4, r7
   12294:	6f3a      	ldr	r2, [r7, #112]	; 0x70
   12296:	346f      	adds	r4, #111	; 0x6f
   12298:	0216      	lsls	r6, r2, #8
   1229a:	003a      	movs	r2, r7
   1229c:	7823      	ldrb	r3, [r4, #0]
   1229e:	3273      	adds	r2, #115	; 0x73
   122a0:	4333      	orrs	r3, r6
   122a2:	6f7e      	ldr	r6, [r7, #116]	; 0x74
   122a4:	7812      	ldrb	r2, [r2, #0]
   122a6:	0236      	lsls	r6, r6, #8
   122a8:	4316      	orrs	r6, r2
   122aa:	431e      	orrs	r6, r3
   122ac:	d119      	bne.n	122e2 <LORAWAN_TxDone+0x3f6>
   122ae:	2301      	movs	r3, #1
   122b0:	0029      	movs	r1, r5
   122b2:	702b      	strb	r3, [r5, #0]
   122b4:	2021      	movs	r0, #33	; 0x21
   122b6:	4b58      	ldr	r3, [pc, #352]	; (12418 <LORAWAN_TxDone+0x52c>)
   122b8:	4798      	blx	r3
   122ba:	4b58      	ldr	r3, [pc, #352]	; (1241c <LORAWAN_TxDone+0x530>)
   122bc:	4798      	blx	r3
   122be:	0033      	movs	r3, r6
   122c0:	9a02      	ldr	r2, [sp, #8]
   122c2:	1a80      	subs	r0, r0, r2
   122c4:	4199      	sbcs	r1, r3
   122c6:	0a03      	lsrs	r3, r0, #8
   122c8:	7063      	strb	r3, [r4, #1]
   122ca:	0c03      	lsrs	r3, r0, #16
   122cc:	70a3      	strb	r3, [r4, #2]
   122ce:	0e03      	lsrs	r3, r0, #24
   122d0:	70e3      	strb	r3, [r4, #3]
   122d2:	0a0b      	lsrs	r3, r1, #8
   122d4:	7163      	strb	r3, [r4, #5]
   122d6:	0c0b      	lsrs	r3, r1, #16
   122d8:	71a3      	strb	r3, [r4, #6]
   122da:	0e0b      	lsrs	r3, r1, #24
   122dc:	7020      	strb	r0, [r4, #0]
   122de:	7121      	strb	r1, [r4, #4]
   122e0:	71e3      	strb	r3, [r4, #7]
   122e2:	4a4f      	ldr	r2, [pc, #316]	; (12420 <LORAWAN_TxDone+0x534>)
   122e4:	2020      	movs	r0, #32
   122e6:	0013      	movs	r3, r2
   122e8:	3377      	adds	r3, #119	; 0x77
   122ea:	7819      	ldrb	r1, [r3, #0]
   122ec:	6f93      	ldr	r3, [r2, #120]	; 0x78
   122ee:	021b      	lsls	r3, r3, #8
   122f0:	430b      	orrs	r3, r1
   122f2:	930c      	str	r3, [sp, #48]	; 0x30
   122f4:	2301      	movs	r3, #1
   122f6:	0029      	movs	r1, r5
   122f8:	712b      	strb	r3, [r5, #4]
   122fa:	4b47      	ldr	r3, [pc, #284]	; (12418 <LORAWAN_TxDone+0x52c>)
   122fc:	4798      	blx	r3
   122fe:	4c48      	ldr	r4, [pc, #288]	; (12420 <LORAWAN_TxDone+0x534>)
   12300:	2102      	movs	r1, #2
   12302:	0023      	movs	r3, r4
   12304:	33ff      	adds	r3, #255	; 0xff
   12306:	7c5b      	ldrb	r3, [r3, #17]
   12308:	4019      	ands	r1, r3
   1230a:	d057      	beq.n	123bc <LORAWAN_TxDone+0x4d0>
   1230c:	466b      	mov	r3, sp
   1230e:	891b      	ldrh	r3, [r3, #8]
   12310:	a90c      	add	r1, sp, #48	; 0x30
   12312:	800b      	strh	r3, [r1, #0]
   12314:	0023      	movs	r3, r4
   12316:	338c      	adds	r3, #140	; 0x8c
   12318:	781b      	ldrb	r3, [r3, #0]
   1231a:	201f      	movs	r0, #31
   1231c:	075b      	lsls	r3, r3, #29
   1231e:	0fdb      	lsrs	r3, r3, #31
   12320:	710b      	strb	r3, [r1, #4]
   12322:	0023      	movs	r3, r4
   12324:	3390      	adds	r3, #144	; 0x90
   12326:	781a      	ldrb	r2, [r3, #0]
   12328:	2301      	movs	r3, #1
   1232a:	4093      	lsls	r3, r2
   1232c:	804b      	strh	r3, [r1, #2]
   1232e:	4b3a      	ldr	r3, [pc, #232]	; (12418 <LORAWAN_TxDone+0x52c>)
   12330:	4798      	blx	r3
   12332:	2589      	movs	r5, #137	; 0x89
   12334:	00ad      	lsls	r5, r5, #2
   12336:	5d63      	ldrb	r3, [r4, r5]
   12338:	2b00      	cmp	r3, #0
   1233a:	d100      	bne.n	1233e <LORAWAN_TxDone+0x452>
   1233c:	e5f6      	b.n	11f2c <LORAWAN_TxDone+0x40>
   1233e:	4b37      	ldr	r3, [pc, #220]	; (1241c <LORAWAN_TxDone+0x530>)
   12340:	4798      	blx	r3
   12342:	2300      	movs	r3, #0
   12344:	900c      	str	r0, [sp, #48]	; 0x30
   12346:	910d      	str	r1, [sp, #52]	; 0x34
   12348:	5563      	strb	r3, [r4, r5]
   1234a:	4b36      	ldr	r3, [pc, #216]	; (12424 <LORAWAN_TxDone+0x538>)
   1234c:	a90c      	add	r1, sp, #48	; 0x30
   1234e:	5ce0      	ldrb	r0, [r4, r3]
   12350:	4b35      	ldr	r3, [pc, #212]	; (12428 <LORAWAN_TxDone+0x53c>)
   12352:	4798      	blx	r3
   12354:	e5ea      	b.n	11f2c <LORAWAN_TxDone+0x40>
   12356:	aa06      	add	r2, sp, #24
   12358:	4934      	ldr	r1, [pc, #208]	; (1242c <LORAWAN_TxDone+0x540>)
   1235a:	e738      	b.n	121ce <LORAWAN_TxDone+0x2e2>
   1235c:	32c8      	adds	r2, #200	; 0xc8
   1235e:	8811      	ldrh	r1, [r2, #0]
   12360:	25fa      	movs	r5, #250	; 0xfa
   12362:	18c9      	adds	r1, r1, r3
   12364:	4b29      	ldr	r3, [pc, #164]	; (1240c <LORAWAN_TxDone+0x520>)
   12366:	00ad      	lsls	r5, r5, #2
   12368:	5cfb      	ldrb	r3, [r7, r3]
   1236a:	0022      	movs	r2, r4
   1236c:	1ac9      	subs	r1, r1, r3
   1236e:	003b      	movs	r3, r7
   12370:	33e4      	adds	r3, #228	; 0xe4
   12372:	7818      	ldrb	r0, [r3, #0]
   12374:	4369      	muls	r1, r5
   12376:	4b26      	ldr	r3, [pc, #152]	; (12410 <LORAWAN_TxDone+0x524>)
   12378:	9400      	str	r4, [sp, #0]
   1237a:	4e23      	ldr	r6, [pc, #140]	; (12408 <LORAWAN_TxDone+0x51c>)
   1237c:	47b0      	blx	r6
   1237e:	003b      	movs	r3, r7
   12380:	33f4      	adds	r3, #244	; 0xf4
   12382:	781b      	ldrb	r3, [r3, #0]
   12384:	2b04      	cmp	r3, #4
   12386:	d105      	bne.n	12394 <LORAWAN_TxDone+0x4a8>
   12388:	2000      	movs	r0, #0
   1238a:	ab06      	add	r3, sp, #24
   1238c:	5618      	ldrsb	r0, [r3, r0]
   1238e:	4b28      	ldr	r3, [pc, #160]	; (12430 <LORAWAN_TxDone+0x544>)
   12390:	4798      	blx	r3
   12392:	e7b4      	b.n	122fe <LORAWAN_TxDone+0x412>
   12394:	2b01      	cmp	r3, #1
   12396:	d1b2      	bne.n	122fe <LORAWAN_TxDone+0x412>
   12398:	003b      	movs	r3, r7
   1239a:	33ca      	adds	r3, #202	; 0xca
   1239c:	8819      	ldrh	r1, [r3, #0]
   1239e:	ab06      	add	r3, sp, #24
   123a0:	781b      	ldrb	r3, [r3, #0]
   123a2:	0022      	movs	r2, r4
   123a4:	b25b      	sxtb	r3, r3
   123a6:	18c9      	adds	r1, r1, r3
   123a8:	4b18      	ldr	r3, [pc, #96]	; (1240c <LORAWAN_TxDone+0x520>)
   123aa:	5cfb      	ldrb	r3, [r7, r3]
   123ac:	37e5      	adds	r7, #229	; 0xe5
   123ae:	1ac9      	subs	r1, r1, r3
   123b0:	7838      	ldrb	r0, [r7, #0]
   123b2:	4369      	muls	r1, r5
   123b4:	9400      	str	r4, [sp, #0]
   123b6:	4b17      	ldr	r3, [pc, #92]	; (12414 <LORAWAN_TxDone+0x528>)
   123b8:	47b0      	blx	r6
   123ba:	e7a0      	b.n	122fe <LORAWAN_TxDone+0x412>
   123bc:	075b      	lsls	r3, r3, #29
   123be:	d5b8      	bpl.n	12332 <LORAWAN_TxDone+0x446>
   123c0:	2022      	movs	r0, #34	; 0x22
   123c2:	e7b4      	b.n	1232e <LORAWAN_TxDone+0x442>
   123c4:	491b      	ldr	r1, [pc, #108]	; (12434 <LORAWAN_TxDone+0x548>)
   123c6:	784a      	ldrb	r2, [r1, #1]
   123c8:	780b      	ldrb	r3, [r1, #0]
   123ca:	0212      	lsls	r2, r2, #8
   123cc:	431a      	orrs	r2, r3
   123ce:	788b      	ldrb	r3, [r1, #2]
   123d0:	041b      	lsls	r3, r3, #16
   123d2:	431a      	orrs	r2, r3
   123d4:	78cb      	ldrb	r3, [r1, #3]
   123d6:	061b      	lsls	r3, r3, #24
   123d8:	4313      	orrs	r3, r2
   123da:	d100      	bne.n	123de <LORAWAN_TxDone+0x4f2>
   123dc:	e5a6      	b.n	11f2c <LORAWAN_TxDone+0x40>
   123de:	4a16      	ldr	r2, [pc, #88]	; (12438 <LORAWAN_TxDone+0x54c>)
   123e0:	7811      	ldrb	r1, [r2, #0]
   123e2:	221c      	movs	r2, #28
   123e4:	2904      	cmp	r1, #4
   123e6:	d003      	beq.n	123f0 <LORAWAN_TxDone+0x504>
   123e8:	2200      	movs	r2, #0
   123ea:	2c07      	cmp	r4, #7
   123ec:	d100      	bne.n	123f0 <LORAWAN_TxDone+0x504>
   123ee:	0022      	movs	r2, r4
   123f0:	0039      	movs	r1, r7
   123f2:	2004      	movs	r0, #4
   123f4:	31ff      	adds	r1, #255	; 0xff
   123f6:	37fc      	adds	r7, #252	; 0xfc
   123f8:	7048      	strb	r0, [r1, #1]
   123fa:	714a      	strb	r2, [r1, #5]
   123fc:	6838      	ldr	r0, [r7, #0]
   123fe:	490f      	ldr	r1, [pc, #60]	; (1243c <LORAWAN_TxDone+0x550>)
   12400:	4798      	blx	r3
   12402:	e593      	b.n	11f2c <LORAWAN_TxDone+0x40>
   12404:	0000d895 	.word	0x0000d895
   12408:	0000eda1 	.word	0x0000eda1
   1240c:	0000021f 	.word	0x0000021f
   12410:	00010e31 	.word	0x00010e31
   12414:	0001277d 	.word	0x0001277d
   12418:	0000d9bd 	.word	0x0000d9bd
   1241c:	0000ed49 	.word	0x0000ed49
   12420:	20002b5c 	.word	0x20002b5c
   12424:	00000225 	.word	0x00000225
   12428:	0000f3a5 	.word	0x0000f3a5
   1242c:	20002bca 	.word	0x20002bca
   12430:	00014291 	.word	0x00014291
   12434:	20002ea4 	.word	0x20002ea4
   12438:	20002d90 	.word	0x20002d90
   1243c:	20002c5c 	.word	0x20002c5c

00012440 <radioCallback>:
   12440:	4b10      	ldr	r3, [pc, #64]	; (12484 <radioCallback+0x44>)
   12442:	b510      	push	{r4, lr}
   12444:	7018      	strb	r0, [r3, #0]
   12446:	3801      	subs	r0, #1
   12448:	b2c0      	uxtb	r0, r0
   1244a:	000c      	movs	r4, r1
   1244c:	281f      	cmp	r0, #31
   1244e:	d809      	bhi.n	12464 <radioCallback+0x24>
   12450:	2301      	movs	r3, #1
   12452:	4083      	lsls	r3, r0
   12454:	4a0c      	ldr	r2, [pc, #48]	; (12488 <radioCallback+0x48>)
   12456:	4213      	tst	r3, r2
   12458:	d109      	bne.n	1246e <radioCallback+0x2e>
   1245a:	220a      	movs	r2, #10
   1245c:	4213      	tst	r3, r2
   1245e:	d102      	bne.n	12466 <radioCallback+0x26>
   12460:	2b00      	cmp	r3, #0
   12462:	db08      	blt.n	12476 <radioCallback+0x36>
   12464:	bd10      	pop	{r4, pc}
   12466:	0008      	movs	r0, r1
   12468:	4b08      	ldr	r3, [pc, #32]	; (1248c <radioCallback+0x4c>)
   1246a:	4798      	blx	r3
   1246c:	e7fa      	b.n	12464 <radioCallback+0x24>
   1246e:	2002      	movs	r0, #2
   12470:	4b07      	ldr	r3, [pc, #28]	; (12490 <radioCallback+0x50>)
   12472:	4798      	blx	r3
   12474:	e7f6      	b.n	12464 <radioCallback+0x24>
   12476:	4b07      	ldr	r3, [pc, #28]	; (12494 <radioCallback+0x54>)
   12478:	681b      	ldr	r3, [r3, #0]
   1247a:	2b00      	cmp	r3, #0
   1247c:	d0f2      	beq.n	12464 <radioCallback+0x24>
   1247e:	4798      	blx	r3
   12480:	6020      	str	r0, [r4, #0]
   12482:	e7ef      	b.n	12464 <radioCallback+0x24>
   12484:	20002d90 	.word	0x20002d90
   12488:	00008081 	.word	0x00008081
   1248c:	00011eed 	.word	0x00011eed
   12490:	00014a6d 	.word	0x00014a6d
   12494:	20002ea0 	.word	0x20002ea0

00012498 <LorawanCheckAndDoRetryOnTimeout>:
   12498:	b513      	push	{r0, r1, r4, lr}
   1249a:	4c33      	ldr	r4, [pc, #204]	; (12568 <LorawanCheckAndDoRetryOnTimeout+0xd0>)
   1249c:	0023      	movs	r3, r4
   1249e:	338c      	adds	r3, #140	; 0x8c
   124a0:	781b      	ldrb	r3, [r3, #0]
   124a2:	0022      	movs	r2, r4
   124a4:	07db      	lsls	r3, r3, #31
   124a6:	d54b      	bpl.n	12540 <LorawanCheckAndDoRetryOnTimeout+0xa8>
   124a8:	0023      	movs	r3, r4
   124aa:	32dc      	adds	r2, #220	; 0xdc
   124ac:	33da      	adds	r3, #218	; 0xda
   124ae:	7812      	ldrb	r2, [r2, #0]
   124b0:	781b      	ldrb	r3, [r3, #0]
   124b2:	429a      	cmp	r2, r3
   124b4:	d836      	bhi.n	12524 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   124b6:	4b2d      	ldr	r3, [pc, #180]	; (1256c <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   124b8:	5ce3      	ldrb	r3, [r4, r3]
   124ba:	2b00      	cmp	r3, #0
   124bc:	d032      	beq.n	12524 <LorawanCheckAndDoRetryOnTimeout+0x8c>
   124be:	0023      	movs	r3, r4
   124c0:	33f4      	adds	r3, #244	; 0xf4
   124c2:	781b      	ldrb	r3, [r3, #0]
   124c4:	2b01      	cmp	r3, #1
   124c6:	d119      	bne.n	124fc <LorawanCheckAndDoRetryOnTimeout+0x64>
   124c8:	0021      	movs	r1, r4
   124ca:	220e      	movs	r2, #14
   124cc:	317c      	adds	r1, #124	; 0x7c
   124ce:	780b      	ldrb	r3, [r1, #0]
   124d0:	4393      	bics	r3, r2
   124d2:	001a      	movs	r2, r3
   124d4:	230c      	movs	r3, #12
   124d6:	4313      	orrs	r3, r2
   124d8:	700b      	strb	r3, [r1, #0]
   124da:	0023      	movs	r3, r4
   124dc:	33d2      	adds	r3, #210	; 0xd2
   124de:	8819      	ldrh	r1, [r3, #0]
   124e0:	4b23      	ldr	r3, [pc, #140]	; (12570 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   124e2:	2200      	movs	r2, #0
   124e4:	5ce3      	ldrb	r3, [r4, r3]
   124e6:	34e8      	adds	r4, #232	; 0xe8
   124e8:	1acb      	subs	r3, r1, r3
   124ea:	21fa      	movs	r1, #250	; 0xfa
   124ec:	0089      	lsls	r1, r1, #2
   124ee:	7820      	ldrb	r0, [r4, #0]
   124f0:	4359      	muls	r1, r3
   124f2:	9200      	str	r2, [sp, #0]
   124f4:	4b1f      	ldr	r3, [pc, #124]	; (12574 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   124f6:	4c20      	ldr	r4, [pc, #128]	; (12578 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   124f8:	47a0      	blx	r4
   124fa:	bd13      	pop	{r0, r1, r4, pc}
   124fc:	2b04      	cmp	r3, #4
   124fe:	d1fc      	bne.n	124fa <LorawanCheckAndDoRetryOnTimeout+0x62>
   12500:	4b1e      	ldr	r3, [pc, #120]	; (1257c <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   12502:	4798      	blx	r3
   12504:	34c6      	adds	r4, #198	; 0xc6
   12506:	300d      	adds	r0, #13
   12508:	8823      	ldrh	r3, [r4, #0]
   1250a:	b280      	uxth	r0, r0
   1250c:	4283      	cmp	r3, r0
   1250e:	d802      	bhi.n	12516 <LorawanCheckAndDoRetryOnTimeout+0x7e>
   12510:	4b1b      	ldr	r3, [pc, #108]	; (12580 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   12512:	4798      	blx	r3
   12514:	e7f1      	b.n	124fa <LorawanCheckAndDoRetryOnTimeout+0x62>
   12516:	200e      	movs	r0, #14
   12518:	4b1a      	ldr	r3, [pc, #104]	; (12584 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1251a:	4798      	blx	r3
   1251c:	4b1a      	ldr	r3, [pc, #104]	; (12588 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1251e:	4798      	blx	r3
   12520:	4b1a      	ldr	r3, [pc, #104]	; (1258c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   12522:	e7f6      	b.n	12512 <LorawanCheckAndDoRetryOnTimeout+0x7a>
   12524:	2012      	movs	r0, #18
   12526:	4b17      	ldr	r3, [pc, #92]	; (12584 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12528:	4798      	blx	r3
   1252a:	4b17      	ldr	r3, [pc, #92]	; (12588 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1252c:	4798      	blx	r3
   1252e:	34f4      	adds	r4, #244	; 0xf4
   12530:	4b16      	ldr	r3, [pc, #88]	; (1258c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   12532:	4798      	blx	r3
   12534:	7823      	ldrb	r3, [r4, #0]
   12536:	2b04      	cmp	r3, #4
   12538:	d1df      	bne.n	124fa <LorawanCheckAndDoRetryOnTimeout+0x62>
   1253a:	4b15      	ldr	r3, [pc, #84]	; (12590 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   1253c:	4798      	blx	r3
   1253e:	e7dc      	b.n	124fa <LorawanCheckAndDoRetryOnTimeout+0x62>
   12540:	0023      	movs	r3, r4
   12542:	32db      	adds	r2, #219	; 0xdb
   12544:	33d9      	adds	r3, #217	; 0xd9
   12546:	7812      	ldrb	r2, [r2, #0]
   12548:	781b      	ldrb	r3, [r3, #0]
   1254a:	429a      	cmp	r2, r3
   1254c:	d803      	bhi.n	12556 <LorawanCheckAndDoRetryOnTimeout+0xbe>
   1254e:	4b07      	ldr	r3, [pc, #28]	; (1256c <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   12550:	5ce3      	ldrb	r3, [r4, r3]
   12552:	2b00      	cmp	r3, #0
   12554:	d1dc      	bne.n	12510 <LorawanCheckAndDoRetryOnTimeout+0x78>
   12556:	4b0f      	ldr	r3, [pc, #60]	; (12594 <LorawanCheckAndDoRetryOnTimeout+0xfc>)
   12558:	4798      	blx	r3
   1255a:	4b0c      	ldr	r3, [pc, #48]	; (1258c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1255c:	4798      	blx	r3
   1255e:	2008      	movs	r0, #8
   12560:	4b08      	ldr	r3, [pc, #32]	; (12584 <LorawanCheckAndDoRetryOnTimeout+0xec>)
   12562:	4798      	blx	r3
   12564:	e7c9      	b.n	124fa <LorawanCheckAndDoRetryOnTimeout+0x62>
   12566:	46c0      	nop			; (mov r8, r8)
   12568:	20002b5c 	.word	0x20002b5c
   1256c:	0000021e 	.word	0x0000021e
   12570:	0000021f 	.word	0x0000021f
   12574:	00012599 	.word	0x00012599
   12578:	0000eda1 	.word	0x0000eda1
   1257c:	0000fe05 	.word	0x0000fe05
   12580:	00010f19 	.word	0x00010f19
   12584:	00011421 	.word	0x00011421
   12588:	000108c5 	.word	0x000108c5
   1258c:	0000fd19 	.word	0x0000fd19
   12590:	000154f5 	.word	0x000154f5
   12594:	000108f5 	.word	0x000108f5

00012598 <AckRetransmissionCallback>:
   12598:	b510      	push	{r4, lr}
   1259a:	4c1c      	ldr	r4, [pc, #112]	; (1260c <AckRetransmissionCallback+0x74>)
   1259c:	0023      	movs	r3, r4
   1259e:	337c      	adds	r3, #124	; 0x7c
   125a0:	781b      	ldrb	r3, [r3, #0]
   125a2:	2b7f      	cmp	r3, #127	; 0x7f
   125a4:	d82d      	bhi.n	12602 <AckRetransmissionCallback+0x6a>
   125a6:	0023      	movs	r3, r4
   125a8:	33f4      	adds	r3, #244	; 0xf4
   125aa:	781b      	ldrb	r3, [r3, #0]
   125ac:	2b04      	cmp	r3, #4
   125ae:	d102      	bne.n	125b6 <AckRetransmissionCallback+0x1e>
   125b0:	4b17      	ldr	r3, [pc, #92]	; (12610 <AckRetransmissionCallback+0x78>)
   125b2:	4798      	blx	r3
   125b4:	e01e      	b.n	125f4 <AckRetransmissionCallback+0x5c>
   125b6:	2b01      	cmp	r3, #1
   125b8:	d11c      	bne.n	125f4 <AckRetransmissionCallback+0x5c>
   125ba:	0022      	movs	r2, r4
   125bc:	0023      	movs	r3, r4
   125be:	32dc      	adds	r2, #220	; 0xdc
   125c0:	33da      	adds	r3, #218	; 0xda
   125c2:	7812      	ldrb	r2, [r2, #0]
   125c4:	781b      	ldrb	r3, [r3, #0]
   125c6:	429a      	cmp	r2, r3
   125c8:	d815      	bhi.n	125f6 <AckRetransmissionCallback+0x5e>
   125ca:	4b12      	ldr	r3, [pc, #72]	; (12614 <AckRetransmissionCallback+0x7c>)
   125cc:	5ce3      	ldrb	r3, [r4, r3]
   125ce:	2b00      	cmp	r3, #0
   125d0:	d011      	beq.n	125f6 <AckRetransmissionCallback+0x5e>
   125d2:	4b11      	ldr	r3, [pc, #68]	; (12618 <AckRetransmissionCallback+0x80>)
   125d4:	4798      	blx	r3
   125d6:	34c6      	adds	r4, #198	; 0xc6
   125d8:	300d      	adds	r0, #13
   125da:	8823      	ldrh	r3, [r4, #0]
   125dc:	b280      	uxth	r0, r0
   125de:	4283      	cmp	r3, r0
   125e0:	d801      	bhi.n	125e6 <AckRetransmissionCallback+0x4e>
   125e2:	4b0e      	ldr	r3, [pc, #56]	; (1261c <AckRetransmissionCallback+0x84>)
   125e4:	e7e5      	b.n	125b2 <AckRetransmissionCallback+0x1a>
   125e6:	4b0e      	ldr	r3, [pc, #56]	; (12620 <AckRetransmissionCallback+0x88>)
   125e8:	4798      	blx	r3
   125ea:	4b0e      	ldr	r3, [pc, #56]	; (12624 <AckRetransmissionCallback+0x8c>)
   125ec:	4798      	blx	r3
   125ee:	200e      	movs	r0, #14
   125f0:	4b0d      	ldr	r3, [pc, #52]	; (12628 <AckRetransmissionCallback+0x90>)
   125f2:	4798      	blx	r3
   125f4:	bd10      	pop	{r4, pc}
   125f6:	4b0a      	ldr	r3, [pc, #40]	; (12620 <AckRetransmissionCallback+0x88>)
   125f8:	4798      	blx	r3
   125fa:	4b0a      	ldr	r3, [pc, #40]	; (12624 <AckRetransmissionCallback+0x8c>)
   125fc:	4798      	blx	r3
   125fe:	2012      	movs	r0, #18
   12600:	e7f6      	b.n	125f0 <AckRetransmissionCallback+0x58>
   12602:	4b07      	ldr	r3, [pc, #28]	; (12620 <AckRetransmissionCallback+0x88>)
   12604:	4798      	blx	r3
   12606:	4b07      	ldr	r3, [pc, #28]	; (12624 <AckRetransmissionCallback+0x8c>)
   12608:	e7d3      	b.n	125b2 <AckRetransmissionCallback+0x1a>
   1260a:	46c0      	nop			; (mov r8, r8)
   1260c:	20002b5c 	.word	0x20002b5c
   12610:	00012499 	.word	0x00012499
   12614:	0000021e 	.word	0x0000021e
   12618:	0000fe05 	.word	0x0000fe05
   1261c:	00010f19 	.word	0x00010f19
   12620:	000108c5 	.word	0x000108c5
   12624:	0000fd19 	.word	0x0000fd19
   12628:	00011421 	.word	0x00011421

0001262c <LORAWAN_RxTimeout>:
   1262c:	4b22      	ldr	r3, [pc, #136]	; (126b8 <LORAWAN_RxTimeout+0x8c>)
   1262e:	b510      	push	{r4, lr}
   12630:	001a      	movs	r2, r3
   12632:	327c      	adds	r2, #124	; 0x7c
   12634:	7812      	ldrb	r2, [r2, #0]
   12636:	b251      	sxtb	r1, r2
   12638:	2900      	cmp	r1, #0
   1263a:	db23      	blt.n	12684 <LORAWAN_RxTimeout+0x58>
   1263c:	0019      	movs	r1, r3
   1263e:	31f4      	adds	r1, #244	; 0xf4
   12640:	7809      	ldrb	r1, [r1, #0]
   12642:	2904      	cmp	r1, #4
   12644:	d104      	bne.n	12650 <LORAWAN_RxTimeout+0x24>
   12646:	07d1      	lsls	r1, r2, #31
   12648:	d502      	bpl.n	12650 <LORAWAN_RxTimeout+0x24>
   1264a:	4b1c      	ldr	r3, [pc, #112]	; (126bc <LORAWAN_RxTimeout+0x90>)
   1264c:	4798      	blx	r3
   1264e:	bd10      	pop	{r4, pc}
   12650:	210e      	movs	r1, #14
   12652:	0010      	movs	r0, r2
   12654:	4008      	ands	r0, r1
   12656:	2806      	cmp	r0, #6
   12658:	d107      	bne.n	1266a <LORAWAN_RxTimeout+0x3e>
   1265a:	337c      	adds	r3, #124	; 0x7c
   1265c:	781a      	ldrb	r2, [r3, #0]
   1265e:	438a      	bics	r2, r1
   12660:	0011      	movs	r1, r2
   12662:	2208      	movs	r2, #8
   12664:	430a      	orrs	r2, r1
   12666:	701a      	strb	r2, [r3, #0]
   12668:	e7f1      	b.n	1264e <LORAWAN_RxTimeout+0x22>
   1266a:	2004      	movs	r0, #4
   1266c:	338c      	adds	r3, #140	; 0x8c
   1266e:	781b      	ldrb	r3, [r3, #0]
   12670:	4203      	tst	r3, r0
   12672:	d002      	beq.n	1267a <LORAWAN_RxTimeout+0x4e>
   12674:	4b12      	ldr	r3, [pc, #72]	; (126c0 <LORAWAN_RxTimeout+0x94>)
   12676:	4798      	blx	r3
   12678:	e7e9      	b.n	1264e <LORAWAN_RxTimeout+0x22>
   1267a:	07d3      	lsls	r3, r2, #31
   1267c:	d5e7      	bpl.n	1264e <LORAWAN_RxTimeout+0x22>
   1267e:	4b11      	ldr	r3, [pc, #68]	; (126c4 <LORAWAN_RxTimeout+0x98>)
   12680:	4798      	blx	r3
   12682:	e7e4      	b.n	1264e <LORAWAN_RxTimeout+0x22>
   12684:	4810      	ldr	r0, [pc, #64]	; (126c8 <LORAWAN_RxTimeout+0x9c>)
   12686:	7841      	ldrb	r1, [r0, #1]
   12688:	7802      	ldrb	r2, [r0, #0]
   1268a:	0209      	lsls	r1, r1, #8
   1268c:	4311      	orrs	r1, r2
   1268e:	7882      	ldrb	r2, [r0, #2]
   12690:	0412      	lsls	r2, r2, #16
   12692:	4311      	orrs	r1, r2
   12694:	78c2      	ldrb	r2, [r0, #3]
   12696:	0612      	lsls	r2, r2, #24
   12698:	430a      	orrs	r2, r1
   1269a:	d0d8      	beq.n	1264e <LORAWAN_RxTimeout+0x22>
   1269c:	2185      	movs	r1, #133	; 0x85
   1269e:	2001      	movs	r0, #1
   126a0:	0089      	lsls	r1, r1, #2
   126a2:	5458      	strb	r0, [r3, r1]
   126a4:	0019      	movs	r1, r3
   126a6:	2404      	movs	r4, #4
   126a8:	31ff      	adds	r1, #255	; 0xff
   126aa:	33fc      	adds	r3, #252	; 0xfc
   126ac:	704c      	strb	r4, [r1, #1]
   126ae:	7148      	strb	r0, [r1, #5]
   126b0:	4906      	ldr	r1, [pc, #24]	; (126cc <LORAWAN_RxTimeout+0xa0>)
   126b2:	6818      	ldr	r0, [r3, #0]
   126b4:	4790      	blx	r2
   126b6:	e7ca      	b.n	1264e <LORAWAN_RxTimeout+0x22>
   126b8:	20002b5c 	.word	0x20002b5c
   126bc:	00014315 	.word	0x00014315
   126c0:	00010919 	.word	0x00010919
   126c4:	00012499 	.word	0x00012499
   126c8:	20002ea4 	.word	0x20002ea4
   126cc:	20002c5c 	.word	0x20002c5c

000126d0 <LorawanConfigureRadioForRX2>:
   126d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   126d2:	466b      	mov	r3, sp
   126d4:	4c21      	ldr	r4, [pc, #132]	; (1275c <LorawanConfigureRadioForRX2+0x8c>)
   126d6:	1cdd      	adds	r5, r3, #3
   126d8:	0023      	movs	r3, r4
   126da:	2100      	movs	r1, #0
   126dc:	338c      	adds	r3, #140	; 0x8c
   126de:	781b      	ldrb	r3, [r3, #0]
   126e0:	0007      	movs	r7, r0
   126e2:	7029      	strb	r1, [r5, #0]
   126e4:	075b      	lsls	r3, r3, #29
   126e6:	d52c      	bpl.n	12742 <LorawanConfigureRadioForRX2+0x72>
   126e8:	002a      	movs	r2, r5
   126ea:	2009      	movs	r0, #9
   126ec:	4b1c      	ldr	r3, [pc, #112]	; (12760 <LorawanConfigureRadioForRX2+0x90>)
   126ee:	4798      	blx	r3
   126f0:	0022      	movs	r2, r4
   126f2:	0023      	movs	r3, r4
   126f4:	326c      	adds	r2, #108	; 0x6c
   126f6:	8811      	ldrh	r1, [r2, #0]
   126f8:	336a      	adds	r3, #106	; 0x6a
   126fa:	881b      	ldrh	r3, [r3, #0]
   126fc:	0409      	lsls	r1, r1, #16
   126fe:	4319      	orrs	r1, r3
   12700:	7828      	ldrb	r0, [r5, #0]
   12702:	4b18      	ldr	r3, [pc, #96]	; (12764 <LorawanConfigureRadioForRX2+0x94>)
   12704:	4798      	blx	r3
   12706:	2300      	movs	r3, #0
   12708:	0022      	movs	r2, r4
   1270a:	ae01      	add	r6, sp, #4
   1270c:	7033      	strb	r3, [r6, #0]
   1270e:	32f4      	adds	r2, #244	; 0xf4
   12710:	7812      	ldrb	r2, [r2, #0]
   12712:	2a04      	cmp	r2, #4
   12714:	d11a      	bne.n	1274c <LorawanConfigureRadioForRX2+0x7c>
   12716:	347c      	adds	r4, #124	; 0x7c
   12718:	7822      	ldrb	r2, [r4, #0]
   1271a:	07d2      	lsls	r2, r2, #31
   1271c:	d516      	bpl.n	1274c <LorawanConfigureRadioForRX2+0x7c>
   1271e:	8073      	strh	r3, [r6, #2]
   12720:	0030      	movs	r0, r6
   12722:	4b11      	ldr	r3, [pc, #68]	; (12768 <LorawanConfigureRadioForRX2+0x98>)
   12724:	4798      	blx	r3
   12726:	1e04      	subs	r4, r0, #0
   12728:	d00a      	beq.n	12740 <LorawanConfigureRadioForRX2+0x70>
   1272a:	4b10      	ldr	r3, [pc, #64]	; (1276c <LorawanConfigureRadioForRX2+0x9c>)
   1272c:	4798      	blx	r3
   1272e:	4b10      	ldr	r3, [pc, #64]	; (12770 <LorawanConfigureRadioForRX2+0xa0>)
   12730:	4798      	blx	r3
   12732:	4b10      	ldr	r3, [pc, #64]	; (12774 <LorawanConfigureRadioForRX2+0xa4>)
   12734:	4798      	blx	r3
   12736:	2f00      	cmp	r7, #0
   12738:	d002      	beq.n	12740 <LorawanConfigureRadioForRX2+0x70>
   1273a:	0020      	movs	r0, r4
   1273c:	4b0e      	ldr	r3, [pc, #56]	; (12778 <LorawanConfigureRadioForRX2+0xa8>)
   1273e:	4798      	blx	r3
   12740:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   12742:	0023      	movs	r3, r4
   12744:	336e      	adds	r3, #110	; 0x6e
   12746:	781b      	ldrb	r3, [r3, #0]
   12748:	702b      	strb	r3, [r5, #0]
   1274a:	e7d1      	b.n	126f0 <LorawanConfigureRadioForRX2+0x20>
   1274c:	466b      	mov	r3, sp
   1274e:	0029      	movs	r1, r5
   12750:	1d9a      	adds	r2, r3, #6
   12752:	2003      	movs	r0, #3
   12754:	4b02      	ldr	r3, [pc, #8]	; (12760 <LorawanConfigureRadioForRX2+0x90>)
   12756:	4798      	blx	r3
   12758:	e7e2      	b.n	12720 <LorawanConfigureRadioForRX2+0x50>
   1275a:	46c0      	nop			; (mov r8, r8)
   1275c:	20002b5c 	.word	0x20002b5c
   12760:	0000d895 	.word	0x0000d895
   12764:	00010dc5 	.word	0x00010dc5
   12768:	00015de5 	.word	0x00015de5
   1276c:	000108c5 	.word	0x000108c5
   12770:	000108f5 	.word	0x000108f5
   12774:	0000fd19 	.word	0x0000fd19
   12778:	00011421 	.word	0x00011421

0001277c <LorawanReceiveWindow2Callback>:
   1277c:	b570      	push	{r4, r5, r6, lr}
   1277e:	4c16      	ldr	r4, [pc, #88]	; (127d8 <LorawanReceiveWindow2Callback+0x5c>)
   12780:	0025      	movs	r5, r4
   12782:	357c      	adds	r5, #124	; 0x7c
   12784:	782b      	ldrb	r3, [r5, #0]
   12786:	2b7f      	cmp	r3, #127	; 0x7f
   12788:	d811      	bhi.n	127ae <LorawanReceiveWindow2Callback+0x32>
   1278a:	4b14      	ldr	r3, [pc, #80]	; (127dc <LorawanReceiveWindow2Callback+0x60>)
   1278c:	4798      	blx	r3
   1278e:	2801      	cmp	r0, #1
   12790:	d109      	bne.n	127a6 <LorawanReceiveWindow2Callback+0x2a>
   12792:	220e      	movs	r2, #14
   12794:	782b      	ldrb	r3, [r5, #0]
   12796:	4393      	bics	r3, r2
   12798:	001a      	movs	r2, r3
   1279a:	230a      	movs	r3, #10
   1279c:	4313      	orrs	r3, r2
   1279e:	702b      	strb	r3, [r5, #0]
   127a0:	4b0f      	ldr	r3, [pc, #60]	; (127e0 <LorawanReceiveWindow2Callback+0x64>)
   127a2:	4798      	blx	r3
   127a4:	bd70      	pop	{r4, r5, r6, pc}
   127a6:	2301      	movs	r3, #1
   127a8:	34f0      	adds	r4, #240	; 0xf0
   127aa:	7023      	strb	r3, [r4, #0]
   127ac:	e7fa      	b.n	127a4 <LorawanReceiveWindow2Callback+0x28>
   127ae:	2104      	movs	r1, #4
   127b0:	348c      	adds	r4, #140	; 0x8c
   127b2:	7822      	ldrb	r2, [r4, #0]
   127b4:	420a      	tst	r2, r1
   127b6:	d007      	beq.n	127c8 <LorawanReceiveWindow2Callback+0x4c>
   127b8:	2001      	movs	r0, #1
   127ba:	4383      	bics	r3, r0
   127bc:	438a      	bics	r2, r1
   127be:	702b      	strb	r3, [r5, #0]
   127c0:	3107      	adds	r1, #7
   127c2:	4b08      	ldr	r3, [pc, #32]	; (127e4 <LorawanReceiveWindow2Callback+0x68>)
   127c4:	7022      	strb	r2, [r4, #0]
   127c6:	4798      	blx	r3
   127c8:	4b07      	ldr	r3, [pc, #28]	; (127e8 <LorawanReceiveWindow2Callback+0x6c>)
   127ca:	4798      	blx	r3
   127cc:	4b07      	ldr	r3, [pc, #28]	; (127ec <LorawanReceiveWindow2Callback+0x70>)
   127ce:	4798      	blx	r3
   127d0:	4b07      	ldr	r3, [pc, #28]	; (127f0 <LorawanReceiveWindow2Callback+0x74>)
   127d2:	4798      	blx	r3
   127d4:	e7e6      	b.n	127a4 <LorawanReceiveWindow2Callback+0x28>
   127d6:	46c0      	nop			; (mov r8, r8)
   127d8:	20002b5c 	.word	0x20002b5c
   127dc:	000154f5 	.word	0x000154f5
   127e0:	000126d1 	.word	0x000126d1
   127e4:	0000e071 	.word	0x0000e071
   127e8:	000108f5 	.word	0x000108f5
   127ec:	000108c5 	.word	0x000108c5
   127f0:	0000fd19 	.word	0x0000fd19

000127f4 <SetReceptionNotOkState>:
   127f4:	2285      	movs	r2, #133	; 0x85
   127f6:	2101      	movs	r1, #1
   127f8:	4b1c      	ldr	r3, [pc, #112]	; (1286c <SetReceptionNotOkState+0x78>)
   127fa:	0092      	lsls	r2, r2, #2
   127fc:	b510      	push	{r4, lr}
   127fe:	5499      	strb	r1, [r3, r2]
   12800:	001a      	movs	r2, r3
   12802:	0019      	movs	r1, r3
   12804:	32f4      	adds	r2, #244	; 0xf4
   12806:	7812      	ldrb	r2, [r2, #0]
   12808:	317c      	adds	r1, #124	; 0x7c
   1280a:	200e      	movs	r0, #14
   1280c:	2a01      	cmp	r2, #1
   1280e:	d124      	bne.n	1285a <SetReceptionNotOkState+0x66>
   12810:	780a      	ldrb	r2, [r1, #0]
   12812:	4002      	ands	r2, r0
   12814:	2a0a      	cmp	r2, #10
   12816:	d006      	beq.n	12826 <SetReceptionNotOkState+0x32>
   12818:	2a06      	cmp	r2, #6
   1281a:	d11a      	bne.n	12852 <SetReceptionNotOkState+0x5e>
   1281c:	001a      	movs	r2, r3
   1281e:	32f0      	adds	r2, #240	; 0xf0
   12820:	7812      	ldrb	r2, [r2, #0]
   12822:	2a00      	cmp	r2, #0
   12824:	d015      	beq.n	12852 <SetReceptionNotOkState+0x5e>
   12826:	0019      	movs	r1, r3
   12828:	2001      	movs	r0, #1
   1282a:	318c      	adds	r1, #140	; 0x8c
   1282c:	780a      	ldrb	r2, [r1, #0]
   1282e:	240e      	movs	r4, #14
   12830:	4382      	bics	r2, r0
   12832:	700a      	strb	r2, [r1, #0]
   12834:	0019      	movs	r1, r3
   12836:	2200      	movs	r2, #0
   12838:	31db      	adds	r1, #219	; 0xdb
   1283a:	700a      	strb	r2, [r1, #0]
   1283c:	0019      	movs	r1, r3
   1283e:	31dc      	adds	r1, #220	; 0xdc
   12840:	700a      	strb	r2, [r1, #0]
   12842:	001a      	movs	r2, r3
   12844:	327c      	adds	r2, #124	; 0x7c
   12846:	7811      	ldrb	r1, [r2, #0]
   12848:	43a1      	bics	r1, r4
   1284a:	7011      	strb	r1, [r2, #0]
   1284c:	7851      	ldrb	r1, [r2, #1]
   1284e:	4381      	bics	r1, r0
   12850:	7051      	strb	r1, [r2, #1]
   12852:	2200      	movs	r2, #0
   12854:	33f0      	adds	r3, #240	; 0xf0
   12856:	701a      	strb	r2, [r3, #0]
   12858:	bd10      	pop	{r4, pc}
   1285a:	230a      	movs	r3, #10
   1285c:	780a      	ldrb	r2, [r1, #0]
   1285e:	4382      	bics	r2, r0
   12860:	4313      	orrs	r3, r2
   12862:	700b      	strb	r3, [r1, #0]
   12864:	2000      	movs	r0, #0
   12866:	4b02      	ldr	r3, [pc, #8]	; (12870 <SetReceptionNotOkState+0x7c>)
   12868:	4798      	blx	r3
   1286a:	e7f5      	b.n	12858 <SetReceptionNotOkState+0x64>
   1286c:	20002b5c 	.word	0x20002b5c
   12870:	000126d1 	.word	0x000126d1

00012874 <LorawanProcessFcntDown>:
   12874:	b570      	push	{r4, r5, r6, lr}
   12876:	4c54      	ldr	r4, [pc, #336]	; (129c8 <LorawanProcessFcntDown+0x154>)
   12878:	79c3      	ldrb	r3, [r0, #7]
   1287a:	0021      	movs	r1, r4
   1287c:	7982      	ldrb	r2, [r0, #6]
   1287e:	021b      	lsls	r3, r3, #8
   12880:	3184      	adds	r1, #132	; 0x84
   12882:	4313      	orrs	r3, r2
   12884:	880a      	ldrh	r2, [r1, #0]
   12886:	4293      	cmp	r3, r2
   12888:	d352      	bcc.n	12930 <LorawanProcessFcntDown+0xbc>
   1288a:	0020      	movs	r0, r4
   1288c:	30d0      	adds	r0, #208	; 0xd0
   1288e:	8800      	ldrh	r0, [r0, #0]
   12890:	1a9a      	subs	r2, r3, r2
   12892:	4282      	cmp	r2, r0
   12894:	dd38      	ble.n	12908 <LorawanProcessFcntDown+0x94>
   12896:	0022      	movs	r2, r4
   12898:	2101      	movs	r1, #1
   1289a:	328c      	adds	r2, #140	; 0x8c
   1289c:	7813      	ldrb	r3, [r2, #0]
   1289e:	438b      	bics	r3, r1
   128a0:	7013      	strb	r3, [r2, #0]
   128a2:	0023      	movs	r3, r4
   128a4:	33f4      	adds	r3, #244	; 0xf4
   128a6:	781b      	ldrb	r3, [r3, #0]
   128a8:	428b      	cmp	r3, r1
   128aa:	d108      	bne.n	128be <LorawanProcessFcntDown+0x4a>
   128ac:	0023      	movs	r3, r4
   128ae:	220e      	movs	r2, #14
   128b0:	337c      	adds	r3, #124	; 0x7c
   128b2:	781b      	ldrb	r3, [r3, #0]
   128b4:	4013      	ands	r3, r2
   128b6:	2b06      	cmp	r3, #6
   128b8:	d101      	bne.n	128be <LorawanProcessFcntDown+0x4a>
   128ba:	4b44      	ldr	r3, [pc, #272]	; (129cc <LorawanProcessFcntDown+0x158>)
   128bc:	4798      	blx	r3
   128be:	4944      	ldr	r1, [pc, #272]	; (129d0 <LorawanProcessFcntDown+0x15c>)
   128c0:	784a      	ldrb	r2, [r1, #1]
   128c2:	780b      	ldrb	r3, [r1, #0]
   128c4:	0212      	lsls	r2, r2, #8
   128c6:	431a      	orrs	r2, r3
   128c8:	788b      	ldrb	r3, [r1, #2]
   128ca:	041b      	lsls	r3, r3, #16
   128cc:	431a      	orrs	r2, r3
   128ce:	78cb      	ldrb	r3, [r1, #3]
   128d0:	061b      	lsls	r3, r3, #24
   128d2:	4313      	orrs	r3, r2
   128d4:	d008      	beq.n	128e8 <LorawanProcessFcntDown+0x74>
   128d6:	0022      	movs	r2, r4
   128d8:	2120      	movs	r1, #32
   128da:	328c      	adds	r2, #140	; 0x8c
   128dc:	7813      	ldrb	r3, [r2, #0]
   128de:	2017      	movs	r0, #23
   128e0:	438b      	bics	r3, r1
   128e2:	7013      	strb	r3, [r2, #0]
   128e4:	4b3b      	ldr	r3, [pc, #236]	; (129d4 <LorawanProcessFcntDown+0x160>)
   128e6:	4798      	blx	r3
   128e8:	2501      	movs	r5, #1
   128ea:	347c      	adds	r4, #124	; 0x7c
   128ec:	7863      	ldrb	r3, [r4, #1]
   128ee:	43ab      	bics	r3, r5
   128f0:	7063      	strb	r3, [r4, #1]
   128f2:	78a3      	ldrb	r3, [r4, #2]
   128f4:	432b      	orrs	r3, r5
   128f6:	70a3      	strb	r3, [r4, #2]
   128f8:	4b37      	ldr	r3, [pc, #220]	; (129d8 <LorawanProcessFcntDown+0x164>)
   128fa:	4798      	blx	r3
   128fc:	210b      	movs	r1, #11
   128fe:	0028      	movs	r0, r5
   12900:	4b36      	ldr	r3, [pc, #216]	; (129dc <LorawanProcessFcntDown+0x168>)
   12902:	4798      	blx	r3
   12904:	200d      	movs	r0, #13
   12906:	e00d      	b.n	12924 <LorawanProcessFcntDown+0xb0>
   12908:	800b      	strh	r3, [r1, #0]
   1290a:	2388      	movs	r3, #136	; 0x88
   1290c:	009b      	lsls	r3, r3, #2
   1290e:	5ce2      	ldrb	r2, [r4, r3]
   12910:	2a00      	cmp	r2, #0
   12912:	d008      	beq.n	12926 <LorawanProcessFcntDown+0xb2>
   12914:	2301      	movs	r3, #1
   12916:	4093      	lsls	r3, r2
   12918:	3408      	adds	r4, #8
   1291a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   1291c:	3b01      	subs	r3, #1
   1291e:	421a      	tst	r2, r3
   12920:	d001      	beq.n	12926 <LorawanProcessFcntDown+0xb2>
   12922:	2008      	movs	r0, #8
   12924:	bd70      	pop	{r4, r5, r6, pc}
   12926:	210a      	movs	r1, #10
   12928:	4b2c      	ldr	r3, [pc, #176]	; (129dc <LorawanProcessFcntDown+0x168>)
   1292a:	2001      	movs	r0, #1
   1292c:	4798      	blx	r3
   1292e:	e7f8      	b.n	12922 <LorawanProcessFcntDown+0xae>
   12930:	482b      	ldr	r0, [pc, #172]	; (129e0 <LorawanProcessFcntDown+0x16c>)
   12932:	1a9a      	subs	r2, r3, r2
   12934:	1812      	adds	r2, r2, r0
   12936:	482b      	ldr	r0, [pc, #172]	; (129e4 <LorawanProcessFcntDown+0x170>)
   12938:	4282      	cmp	r2, r0
   1293a:	dc1f      	bgt.n	1297c <LorawanProcessFcntDown+0x108>
   1293c:	0022      	movs	r2, r4
   1293e:	800b      	strh	r3, [r1, #0]
   12940:	3286      	adds	r2, #134	; 0x86
   12942:	8813      	ldrh	r3, [r2, #0]
   12944:	3301      	adds	r3, #1
   12946:	8013      	strh	r3, [r2, #0]
   12948:	2388      	movs	r3, #136	; 0x88
   1294a:	009b      	lsls	r3, r3, #2
   1294c:	5ce2      	ldrb	r2, [r4, r3]
   1294e:	2a00      	cmp	r2, #0
   12950:	d007      	beq.n	12962 <LorawanProcessFcntDown+0xee>
   12952:	2301      	movs	r3, #1
   12954:	4093      	lsls	r3, r2
   12956:	0022      	movs	r2, r4
   12958:	3208      	adds	r2, #8
   1295a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
   1295c:	3b01      	subs	r3, #1
   1295e:	421a      	tst	r2, r3
   12960:	d103      	bne.n	1296a <LorawanProcessFcntDown+0xf6>
   12962:	210a      	movs	r1, #10
   12964:	2001      	movs	r0, #1
   12966:	4b1d      	ldr	r3, [pc, #116]	; (129dc <LorawanProcessFcntDown+0x168>)
   12968:	4798      	blx	r3
   1296a:	0023      	movs	r3, r4
   1296c:	3308      	adds	r3, #8
   1296e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   12970:	3301      	adds	r3, #1
   12972:	d1d6      	bne.n	12922 <LorawanProcessFcntDown+0xae>
   12974:	347c      	adds	r4, #124	; 0x7c
   12976:	78a3      	ldrb	r3, [r4, #2]
   12978:	2501      	movs	r5, #1
   1297a:	e7bb      	b.n	128f4 <LorawanProcessFcntDown+0x80>
   1297c:	0023      	movs	r3, r4
   1297e:	33f4      	adds	r3, #244	; 0xf4
   12980:	781b      	ldrb	r3, [r3, #0]
   12982:	2b01      	cmp	r3, #1
   12984:	d108      	bne.n	12998 <LorawanProcessFcntDown+0x124>
   12986:	0023      	movs	r3, r4
   12988:	220e      	movs	r2, #14
   1298a:	337c      	adds	r3, #124	; 0x7c
   1298c:	781b      	ldrb	r3, [r3, #0]
   1298e:	4013      	ands	r3, r2
   12990:	2b06      	cmp	r3, #6
   12992:	d101      	bne.n	12998 <LorawanProcessFcntDown+0x124>
   12994:	4b0d      	ldr	r3, [pc, #52]	; (129cc <LorawanProcessFcntDown+0x158>)
   12996:	4798      	blx	r3
   12998:	490d      	ldr	r1, [pc, #52]	; (129d0 <LorawanProcessFcntDown+0x15c>)
   1299a:	784a      	ldrb	r2, [r1, #1]
   1299c:	780b      	ldrb	r3, [r1, #0]
   1299e:	0212      	lsls	r2, r2, #8
   129a0:	431a      	orrs	r2, r3
   129a2:	788b      	ldrb	r3, [r1, #2]
   129a4:	041b      	lsls	r3, r3, #16
   129a6:	431a      	orrs	r2, r3
   129a8:	78cb      	ldrb	r3, [r1, #3]
   129aa:	061b      	lsls	r3, r3, #24
   129ac:	4313      	orrs	r3, r2
   129ae:	d007      	beq.n	129c0 <LorawanProcessFcntDown+0x14c>
   129b0:	2220      	movs	r2, #32
   129b2:	348c      	adds	r4, #140	; 0x8c
   129b4:	7823      	ldrb	r3, [r4, #0]
   129b6:	2017      	movs	r0, #23
   129b8:	4393      	bics	r3, r2
   129ba:	7023      	strb	r3, [r4, #0]
   129bc:	4b05      	ldr	r3, [pc, #20]	; (129d4 <LorawanProcessFcntDown+0x160>)
   129be:	4798      	blx	r3
   129c0:	4b05      	ldr	r3, [pc, #20]	; (129d8 <LorawanProcessFcntDown+0x164>)
   129c2:	4798      	blx	r3
   129c4:	200a      	movs	r0, #10
   129c6:	e7ad      	b.n	12924 <LorawanProcessFcntDown+0xb0>
   129c8:	20002b5c 	.word	0x20002b5c
   129cc:	00010231 	.word	0x00010231
   129d0:	20002ea4 	.word	0x20002ea4
   129d4:	00011421 	.word	0x00011421
   129d8:	000127f5 	.word	0x000127f5
   129dc:	0000e071 	.word	0x0000e071
   129e0:	0000ffff 	.word	0x0000ffff
   129e4:	00003fff 	.word	0x00003fff

000129e8 <UpdateCurrentDataRateAfterDataRangeChanges>:
   129e8:	4b09      	ldr	r3, [pc, #36]	; (12a10 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   129ea:	001a      	movs	r2, r3
   129ec:	32eb      	adds	r2, #235	; 0xeb
   129ee:	7811      	ldrb	r1, [r2, #0]
   129f0:	001a      	movs	r2, r3
   129f2:	32df      	adds	r2, #223	; 0xdf
   129f4:	7810      	ldrb	r0, [r2, #0]
   129f6:	4288      	cmp	r0, r1
   129f8:	d900      	bls.n	129fc <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   129fa:	7011      	strb	r1, [r2, #0]
   129fc:	001a      	movs	r2, r3
   129fe:	33df      	adds	r3, #223	; 0xdf
   12a00:	32ea      	adds	r2, #234	; 0xea
   12a02:	7812      	ldrb	r2, [r2, #0]
   12a04:	7819      	ldrb	r1, [r3, #0]
   12a06:	4291      	cmp	r1, r2
   12a08:	d200      	bcs.n	12a0c <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   12a0a:	701a      	strb	r2, [r3, #0]
   12a0c:	4770      	bx	lr
   12a0e:	46c0      	nop			; (mov r8, r8)
   12a10:	20002b5c 	.word	0x20002b5c

00012a14 <ExecuteNewChannel>:
   12a14:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a16:	b08d      	sub	sp, #52	; 0x34
   12a18:	7807      	ldrb	r7, [r0, #0]
   12a1a:	ab02      	add	r3, sp, #8
   12a1c:	0006      	movs	r6, r0
   12a1e:	71df      	strb	r7, [r3, #7]
   12a20:	1c41      	adds	r1, r0, #1
   12a22:	4b59      	ldr	r3, [pc, #356]	; (12b88 <ExecuteNewChannel+0x174>)
   12a24:	2204      	movs	r2, #4
   12a26:	a808      	add	r0, sp, #32
   12a28:	4798      	blx	r3
   12a2a:	9b08      	ldr	r3, [sp, #32]
   12a2c:	4c57      	ldr	r4, [pc, #348]	; (12b8c <ExecuteNewChannel+0x178>)
   12a2e:	021d      	lsls	r5, r3, #8
   12a30:	2364      	movs	r3, #100	; 0x64
   12a32:	0a2d      	lsrs	r5, r5, #8
   12a34:	435d      	muls	r5, r3
   12a36:	1d73      	adds	r3, r6, #5
   12a38:	9301      	str	r3, [sp, #4]
   12a3a:	0023      	movs	r3, r4
   12a3c:	9508      	str	r5, [sp, #32]
   12a3e:	33f6      	adds	r3, #246	; 0xf6
   12a40:	781b      	ldrb	r3, [r3, #0]
   12a42:	3b02      	subs	r3, #2
   12a44:	2b01      	cmp	r3, #1
   12a46:	d800      	bhi.n	12a4a <ExecuteNewChannel+0x36>
   12a48:	e092      	b.n	12b70 <ExecuteNewChannel+0x15c>
   12a4a:	7933      	ldrb	r3, [r6, #4]
   12a4c:	a904      	add	r1, sp, #16
   12a4e:	9300      	str	r3, [sp, #0]
   12a50:	2300      	movs	r3, #0
   12a52:	2015      	movs	r0, #21
   12a54:	4e4e      	ldr	r6, [pc, #312]	; (12b90 <ExecuteNewChannel+0x17c>)
   12a56:	700f      	strb	r7, [r1, #0]
   12a58:	704b      	strb	r3, [r1, #1]
   12a5a:	47b0      	blx	r6
   12a5c:	2808      	cmp	r0, #8
   12a5e:	d12b      	bne.n	12ab8 <ExecuteNewChannel+0xa4>
   12a60:	466a      	mov	r2, sp
   12a62:	ab02      	add	r3, sp, #8
   12a64:	79db      	ldrb	r3, [r3, #7]
   12a66:	7812      	ldrb	r2, [r2, #0]
   12a68:	af06      	add	r7, sp, #24
   12a6a:	a90a      	add	r1, sp, #40	; 0x28
   12a6c:	3806      	subs	r0, #6
   12a6e:	703b      	strb	r3, [r7, #0]
   12a70:	707a      	strb	r2, [r7, #1]
   12a72:	710b      	strb	r3, [r1, #4]
   12a74:	950a      	str	r5, [sp, #40]	; 0x28
   12a76:	47b0      	blx	r6
   12a78:	2808      	cmp	r0, #8
   12a7a:	d001      	beq.n	12a80 <ExecuteNewChannel+0x6c>
   12a7c:	2d00      	cmp	r5, #0
   12a7e:	d10b      	bne.n	12a98 <ExecuteNewChannel+0x84>
   12a80:	0023      	movs	r3, r4
   12a82:	33d8      	adds	r3, #216	; 0xd8
   12a84:	781a      	ldrb	r2, [r3, #0]
   12a86:	2303      	movs	r3, #3
   12a88:	4353      	muls	r3, r2
   12a8a:	2280      	movs	r2, #128	; 0x80
   12a8c:	18e3      	adds	r3, r4, r3
   12a8e:	3390      	adds	r3, #144	; 0x90
   12a90:	7899      	ldrb	r1, [r3, #2]
   12a92:	4252      	negs	r2, r2
   12a94:	430a      	orrs	r2, r1
   12a96:	709a      	strb	r2, [r3, #2]
   12a98:	0039      	movs	r1, r7
   12a9a:	2012      	movs	r0, #18
   12a9c:	47b0      	blx	r6
   12a9e:	2808      	cmp	r0, #8
   12aa0:	d10a      	bne.n	12ab8 <ExecuteNewChannel+0xa4>
   12aa2:	0023      	movs	r3, r4
   12aa4:	33d8      	adds	r3, #216	; 0xd8
   12aa6:	781a      	ldrb	r2, [r3, #0]
   12aa8:	2303      	movs	r3, #3
   12aaa:	4353      	muls	r3, r2
   12aac:	2240      	movs	r2, #64	; 0x40
   12aae:	18e3      	adds	r3, r4, r3
   12ab0:	3390      	adds	r3, #144	; 0x90
   12ab2:	7899      	ldrb	r1, [r3, #2]
   12ab4:	430a      	orrs	r2, r1
   12ab6:	709a      	strb	r2, [r3, #2]
   12ab8:	0023      	movs	r3, r4
   12aba:	33d8      	adds	r3, #216	; 0xd8
   12abc:	781a      	ldrb	r2, [r3, #0]
   12abe:	2303      	movs	r3, #3
   12ac0:	4353      	muls	r3, r2
   12ac2:	18e3      	adds	r3, r4, r3
   12ac4:	3390      	adds	r3, #144	; 0x90
   12ac6:	789b      	ldrb	r3, [r3, #2]
   12ac8:	09da      	lsrs	r2, r3, #7
   12aca:	2a01      	cmp	r2, #1
   12acc:	d150      	bne.n	12b70 <ExecuteNewChannel+0x15c>
   12ace:	065b      	lsls	r3, r3, #25
   12ad0:	d54e      	bpl.n	12b70 <ExecuteNewChannel+0x15c>
   12ad2:	4e30      	ldr	r6, [pc, #192]	; (12b94 <ExecuteNewChannel+0x180>)
   12ad4:	2d00      	cmp	r5, #0
   12ad6:	d04e      	beq.n	12b76 <ExecuteNewChannel+0x162>
   12ad8:	a906      	add	r1, sp, #24
   12ada:	2012      	movs	r0, #18
   12adc:	47b0      	blx	r6
   12ade:	ad07      	add	r5, sp, #28
   12ae0:	a90a      	add	r1, sp, #40	; 0x28
   12ae2:	2000      	movs	r0, #0
   12ae4:	47b0      	blx	r6
   12ae6:	002a      	movs	r2, r5
   12ae8:	2100      	movs	r1, #0
   12aea:	2014      	movs	r0, #20
   12aec:	4f2a      	ldr	r7, [pc, #168]	; (12b98 <ExecuteNewChannel+0x184>)
   12aee:	47b8      	blx	r7
   12af0:	0023      	movs	r3, r4
   12af2:	782a      	ldrb	r2, [r5, #0]
   12af4:	33ea      	adds	r3, #234	; 0xea
   12af6:	701a      	strb	r2, [r3, #0]
   12af8:	0023      	movs	r3, r4
   12afa:	786a      	ldrb	r2, [r5, #1]
   12afc:	33eb      	adds	r3, #235	; 0xeb
   12afe:	701a      	strb	r2, [r3, #0]
   12b00:	34ff      	adds	r4, #255	; 0xff
   12b02:	4b26      	ldr	r3, [pc, #152]	; (12b9c <ExecuteNewChannel+0x188>)
   12b04:	4798      	blx	r3
   12b06:	7c63      	ldrb	r3, [r4, #17]
   12b08:	079b      	lsls	r3, r3, #30
   12b0a:	d50e      	bpl.n	12b2a <ExecuteNewChannel+0x116>
   12b0c:	2416      	movs	r4, #22
   12b0e:	ab02      	add	r3, sp, #8
   12b10:	18e4      	adds	r4, r4, r3
   12b12:	1dd9      	adds	r1, r3, #7
   12b14:	0022      	movs	r2, r4
   12b16:	201e      	movs	r0, #30
   12b18:	47b8      	blx	r7
   12b1a:	ab02      	add	r3, sp, #8
   12b1c:	79db      	ldrb	r3, [r3, #7]
   12b1e:	a909      	add	r1, sp, #36	; 0x24
   12b20:	708b      	strb	r3, [r1, #2]
   12b22:	8823      	ldrh	r3, [r4, #0]
   12b24:	201e      	movs	r0, #30
   12b26:	800b      	strh	r3, [r1, #0]
   12b28:	47b0      	blx	r6
   12b2a:	ab02      	add	r3, sp, #8
   12b2c:	79db      	ldrb	r3, [r3, #7]
   12b2e:	a905      	add	r1, sp, #20
   12b30:	700b      	strb	r3, [r1, #0]
   12b32:	2301      	movs	r3, #1
   12b34:	2016      	movs	r0, #22
   12b36:	704b      	strb	r3, [r1, #1]
   12b38:	4b16      	ldr	r3, [pc, #88]	; (12b94 <ExecuteNewChannel+0x180>)
   12b3a:	4798      	blx	r3
   12b3c:	ad09      	add	r5, sp, #36	; 0x24
   12b3e:	2100      	movs	r1, #0
   12b40:	002a      	movs	r2, r5
   12b42:	4b15      	ldr	r3, [pc, #84]	; (12b98 <ExecuteNewChannel+0x184>)
   12b44:	2014      	movs	r0, #20
   12b46:	4798      	blx	r3
   12b48:	4c10      	ldr	r4, [pc, #64]	; (12b8c <ExecuteNewChannel+0x178>)
   12b4a:	782a      	ldrb	r2, [r5, #0]
   12b4c:	0023      	movs	r3, r4
   12b4e:	33ea      	adds	r3, #234	; 0xea
   12b50:	701a      	strb	r2, [r3, #0]
   12b52:	0023      	movs	r3, r4
   12b54:	786a      	ldrb	r2, [r5, #1]
   12b56:	33eb      	adds	r3, #235	; 0xeb
   12b58:	701a      	strb	r2, [r3, #0]
   12b5a:	4b10      	ldr	r3, [pc, #64]	; (12b9c <ExecuteNewChannel+0x188>)
   12b5c:	4798      	blx	r3
   12b5e:	2304      	movs	r3, #4
   12b60:	347c      	adds	r4, #124	; 0x7c
   12b62:	7862      	ldrb	r2, [r4, #1]
   12b64:	210b      	movs	r1, #11
   12b66:	4313      	orrs	r3, r2
   12b68:	7063      	strb	r3, [r4, #1]
   12b6a:	2001      	movs	r0, #1
   12b6c:	4b0c      	ldr	r3, [pc, #48]	; (12ba0 <ExecuteNewChannel+0x18c>)
   12b6e:	4798      	blx	r3
   12b70:	9801      	ldr	r0, [sp, #4]
   12b72:	b00d      	add	sp, #52	; 0x34
   12b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b76:	ab02      	add	r3, sp, #8
   12b78:	79db      	ldrb	r3, [r3, #7]
   12b7a:	a905      	add	r1, sp, #20
   12b7c:	2016      	movs	r0, #22
   12b7e:	700b      	strb	r3, [r1, #0]
   12b80:	704d      	strb	r5, [r1, #1]
   12b82:	47b0      	blx	r6
   12b84:	e7da      	b.n	12b3c <ExecuteNewChannel+0x128>
   12b86:	46c0      	nop			; (mov r8, r8)
   12b88:	00019d1d 	.word	0x00019d1d
   12b8c:	20002b5c 	.word	0x20002b5c
   12b90:	0000d8b1 	.word	0x0000d8b1
   12b94:	0000d9bd 	.word	0x0000d9bd
   12b98:	0000d895 	.word	0x0000d895
   12b9c:	000129e9 	.word	0x000129e9
   12ba0:	0000e071 	.word	0x0000e071

00012ba4 <MacExecuteCommands>:
   12ba4:	2300      	movs	r3, #0
   12ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ba8:	0007      	movs	r7, r0
   12baa:	2503      	movs	r5, #3
   12bac:	b087      	sub	sp, #28
   12bae:	9002      	str	r0, [sp, #8]
   12bb0:	9103      	str	r1, [sp, #12]
   12bb2:	9300      	str	r3, [sp, #0]
   12bb4:	9a03      	ldr	r2, [sp, #12]
   12bb6:	9b02      	ldr	r3, [sp, #8]
   12bb8:	4694      	mov	ip, r2
   12bba:	4463      	add	r3, ip
   12bbc:	9301      	str	r3, [sp, #4]
   12bbe:	4e65      	ldr	r6, [pc, #404]	; (12d54 <MacExecuteCommands+0x1b0>)
   12bc0:	429f      	cmp	r7, r3
   12bc2:	d35c      	bcc.n	12c7e <MacExecuteCommands+0xda>
   12bc4:	4b64      	ldr	r3, [pc, #400]	; (12d58 <MacExecuteCommands+0x1b4>)
   12bc6:	5cf3      	ldrb	r3, [r6, r3]
   12bc8:	2b00      	cmp	r3, #0
   12bca:	d000      	beq.n	12bce <MacExecuteCommands+0x2a>
   12bcc:	e07a      	b.n	12cc4 <MacExecuteCommands+0x120>
   12bce:	0038      	movs	r0, r7
   12bd0:	b007      	add	sp, #28
   12bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12bd4:	0032      	movs	r2, r6
   12bd6:	7879      	ldrb	r1, [r7, #1]
   12bd8:	32dd      	adds	r2, #221	; 0xdd
   12bda:	7011      	strb	r1, [r2, #0]
   12bdc:	0032      	movs	r2, r6
   12bde:	78b9      	ldrb	r1, [r7, #2]
   12be0:	32de      	adds	r2, #222	; 0xde
   12be2:	1cfc      	adds	r4, r7, #3
   12be4:	7011      	strb	r1, [r2, #0]
   12be6:	22ff      	movs	r2, #255	; 0xff
   12be8:	436b      	muls	r3, r5
   12bea:	18f3      	adds	r3, r6, r3
   12bec:	3391      	adds	r3, #145	; 0x91
   12bee:	701a      	strb	r2, [r3, #0]
   12bf0:	e003      	b.n	12bfa <MacExecuteCommands+0x56>
   12bf2:	0020      	movs	r0, r4
   12bf4:	4b59      	ldr	r3, [pc, #356]	; (12d5c <MacExecuteCommands+0x1b8>)
   12bf6:	4798      	blx	r3
   12bf8:	0004      	movs	r4, r0
   12bfa:	0032      	movs	r2, r6
   12bfc:	0029      	movs	r1, r5
   12bfe:	32d8      	adds	r2, #216	; 0xd8
   12c00:	7813      	ldrb	r3, [r2, #0]
   12c02:	4359      	muls	r1, r3
   12c04:	1876      	adds	r6, r6, r1
   12c06:	3691      	adds	r6, #145	; 0x91
   12c08:	7831      	ldrb	r1, [r6, #0]
   12c0a:	29ff      	cmp	r1, #255	; 0xff
   12c0c:	d003      	beq.n	12c16 <MacExecuteCommands+0x72>
   12c0e:	2b0f      	cmp	r3, #15
   12c10:	d801      	bhi.n	12c16 <MacExecuteCommands+0x72>
   12c12:	3301      	adds	r3, #1
   12c14:	7013      	strb	r3, [r2, #0]
   12c16:	0027      	movs	r7, r4
   12c18:	e7cc      	b.n	12bb4 <MacExecuteCommands+0x10>
   12c1a:	0020      	movs	r0, r4
   12c1c:	4b50      	ldr	r3, [pc, #320]	; (12d60 <MacExecuteCommands+0x1bc>)
   12c1e:	e7ea      	b.n	12bf6 <MacExecuteCommands+0x52>
   12c20:	0020      	movs	r0, r4
   12c22:	4b50      	ldr	r3, [pc, #320]	; (12d64 <MacExecuteCommands+0x1c0>)
   12c24:	e7e7      	b.n	12bf6 <MacExecuteCommands+0x52>
   12c26:	0020      	movs	r0, r4
   12c28:	4b4f      	ldr	r3, [pc, #316]	; (12d68 <MacExecuteCommands+0x1c4>)
   12c2a:	e7e4      	b.n	12bf6 <MacExecuteCommands+0x52>
   12c2c:	230f      	movs	r3, #15
   12c2e:	7878      	ldrb	r0, [r7, #1]
   12c30:	1cbc      	adds	r4, r7, #2
   12c32:	4018      	ands	r0, r3
   12c34:	4b4d      	ldr	r3, [pc, #308]	; (12d6c <MacExecuteCommands+0x1c8>)
   12c36:	4798      	blx	r3
   12c38:	0032      	movs	r2, r6
   12c3a:	2380      	movs	r3, #128	; 0x80
   12c3c:	327c      	adds	r2, #124	; 0x7c
   12c3e:	7851      	ldrb	r1, [r2, #1]
   12c40:	425b      	negs	r3, r3
   12c42:	430b      	orrs	r3, r1
   12c44:	7053      	strb	r3, [r2, #1]
   12c46:	210b      	movs	r1, #11
   12c48:	4b49      	ldr	r3, [pc, #292]	; (12d70 <MacExecuteCommands+0x1cc>)
   12c4a:	2001      	movs	r0, #1
   12c4c:	4798      	blx	r3
   12c4e:	e7d4      	b.n	12bfa <MacExecuteCommands+0x56>
   12c50:	0020      	movs	r0, r4
   12c52:	4b48      	ldr	r3, [pc, #288]	; (12d74 <MacExecuteCommands+0x1d0>)
   12c54:	e7cf      	b.n	12bf6 <MacExecuteCommands+0x52>
   12c56:	0020      	movs	r0, r4
   12c58:	4b47      	ldr	r3, [pc, #284]	; (12d78 <MacExecuteCommands+0x1d4>)
   12c5a:	e7cc      	b.n	12bf6 <MacExecuteCommands+0x52>
   12c5c:	0020      	movs	r0, r4
   12c5e:	4b47      	ldr	r3, [pc, #284]	; (12d7c <MacExecuteCommands+0x1d8>)
   12c60:	4798      	blx	r3
   12c62:	0033      	movs	r3, r6
   12c64:	33d8      	adds	r3, #216	; 0xd8
   12c66:	0004      	movs	r4, r0
   12c68:	781b      	ldrb	r3, [r3, #0]
   12c6a:	e7bc      	b.n	12be6 <MacExecuteCommands+0x42>
   12c6c:	22ff      	movs	r2, #255	; 0xff
   12c6e:	436b      	muls	r3, r5
   12c70:	18f3      	adds	r3, r6, r3
   12c72:	3391      	adds	r3, #145	; 0x91
   12c74:	701a      	strb	r2, [r3, #0]
   12c76:	2301      	movs	r3, #1
   12c78:	9c01      	ldr	r4, [sp, #4]
   12c7a:	9300      	str	r3, [sp, #0]
   12c7c:	e7bd      	b.n	12bfa <MacExecuteCommands+0x56>
   12c7e:	9b00      	ldr	r3, [sp, #0]
   12c80:	2b00      	cmp	r3, #0
   12c82:	d19f      	bne.n	12bc4 <MacExecuteCommands+0x20>
   12c84:	0033      	movs	r3, r6
   12c86:	002a      	movs	r2, r5
   12c88:	33d8      	adds	r3, #216	; 0xd8
   12c8a:	781b      	ldrb	r3, [r3, #0]
   12c8c:	2401      	movs	r4, #1
   12c8e:	435a      	muls	r2, r3
   12c90:	18b2      	adds	r2, r6, r2
   12c92:	0010      	movs	r0, r2
   12c94:	3090      	adds	r0, #144	; 0x90
   12c96:	7881      	ldrb	r1, [r0, #2]
   12c98:	3291      	adds	r2, #145	; 0x91
   12c9a:	43a1      	bics	r1, r4
   12c9c:	4021      	ands	r1, r4
   12c9e:	7081      	strb	r1, [r0, #2]
   12ca0:	78c1      	ldrb	r1, [r0, #3]
   12ca2:	43a1      	bics	r1, r4
   12ca4:	70c1      	strb	r1, [r0, #3]
   12ca6:	7839      	ldrb	r1, [r7, #0]
   12ca8:	193c      	adds	r4, r7, r4
   12caa:	7011      	strb	r1, [r2, #0]
   12cac:	7838      	ldrb	r0, [r7, #0]
   12cae:	3802      	subs	r0, #2
   12cb0:	280b      	cmp	r0, #11
   12cb2:	d8db      	bhi.n	12c6c <MacExecuteCommands+0xc8>
   12cb4:	f003 fc62 	bl	1657c <__gnu_thumb1_case_sqi>
   12cb8:	b4b19d8e 	.word	0xb4b19d8e
   12cbc:	ccbab7a1 	.word	0xccbab7a1
   12cc0:	d2dadacf 	.word	0xd2dadacf
   12cc4:	4b2e      	ldr	r3, [pc, #184]	; (12d80 <MacExecuteCommands+0x1dc>)
   12cc6:	5cf3      	ldrb	r3, [r6, r3]
   12cc8:	43db      	mvns	r3, r3
   12cca:	075b      	lsls	r3, r3, #29
   12ccc:	d000      	beq.n	12cd0 <MacExecuteCommands+0x12c>
   12cce:	e77e      	b.n	12bce <MacExecuteCommands+0x2a>
   12cd0:	4b2c      	ldr	r3, [pc, #176]	; (12d84 <MacExecuteCommands+0x1e0>)
   12cd2:	ad05      	add	r5, sp, #20
   12cd4:	5cf4      	ldrb	r4, [r6, r3]
   12cd6:	2100      	movs	r1, #0
   12cd8:	0724      	lsls	r4, r4, #28
   12cda:	0f24      	lsrs	r4, r4, #28
   12cdc:	b2e3      	uxtb	r3, r4
   12cde:	9300      	str	r3, [sp, #0]
   12ce0:	4b29      	ldr	r3, [pc, #164]	; (12d88 <MacExecuteCommands+0x1e4>)
   12ce2:	002a      	movs	r2, r5
   12ce4:	5cf3      	ldrb	r3, [r6, r3]
   12ce6:	2014      	movs	r0, #20
   12ce8:	9301      	str	r3, [sp, #4]
   12cea:	2386      	movs	r3, #134	; 0x86
   12cec:	009b      	lsls	r3, r3, #2
   12cee:	5cf3      	ldrb	r3, [r6, r3]
   12cf0:	9302      	str	r3, [sp, #8]
   12cf2:	4b26      	ldr	r3, [pc, #152]	; (12d8c <MacExecuteCommands+0x1e8>)
   12cf4:	4798      	blx	r3
   12cf6:	0033      	movs	r3, r6
   12cf8:	782a      	ldrb	r2, [r5, #0]
   12cfa:	33ea      	adds	r3, #234	; 0xea
   12cfc:	701a      	strb	r2, [r3, #0]
   12cfe:	0033      	movs	r3, r6
   12d00:	786a      	ldrb	r2, [r5, #1]
   12d02:	33eb      	adds	r3, #235	; 0xeb
   12d04:	701a      	strb	r2, [r3, #0]
   12d06:	4b22      	ldr	r3, [pc, #136]	; (12d90 <MacExecuteCommands+0x1ec>)
   12d08:	4798      	blx	r3
   12d0a:	9801      	ldr	r0, [sp, #4]
   12d0c:	4b21      	ldr	r3, [pc, #132]	; (12d94 <MacExecuteCommands+0x1f0>)
   12d0e:	4798      	blx	r3
   12d10:	0032      	movs	r2, r6
   12d12:	2308      	movs	r3, #8
   12d14:	327c      	adds	r2, #124	; 0x7c
   12d16:	7851      	ldrb	r1, [r2, #1]
   12d18:	430b      	orrs	r3, r1
   12d1a:	7053      	strb	r3, [r2, #1]
   12d1c:	9802      	ldr	r0, [sp, #8]
   12d1e:	4b1e      	ldr	r3, [pc, #120]	; (12d98 <MacExecuteCommands+0x1f4>)
   12d20:	4798      	blx	r3
   12d22:	0033      	movs	r3, r6
   12d24:	b2e2      	uxtb	r2, r4
   12d26:	33d9      	adds	r3, #217	; 0xd9
   12d28:	2a00      	cmp	r2, #0
   12d2a:	d10e      	bne.n	12d4a <MacExecuteCommands+0x1a6>
   12d2c:	701c      	strb	r4, [r3, #0]
   12d2e:	2114      	movs	r1, #20
   12d30:	4c0f      	ldr	r4, [pc, #60]	; (12d70 <MacExecuteCommands+0x1cc>)
   12d32:	2000      	movs	r0, #0
   12d34:	47a0      	blx	r4
   12d36:	2210      	movs	r2, #16
   12d38:	4b06      	ldr	r3, [pc, #24]	; (12d54 <MacExecuteCommands+0x1b0>)
   12d3a:	2001      	movs	r0, #1
   12d3c:	337c      	adds	r3, #124	; 0x7c
   12d3e:	7859      	ldrb	r1, [r3, #1]
   12d40:	430a      	orrs	r2, r1
   12d42:	705a      	strb	r2, [r3, #1]
   12d44:	210b      	movs	r1, #11
   12d46:	47a0      	blx	r4
   12d48:	e741      	b.n	12bce <MacExecuteCommands+0x2a>
   12d4a:	9a00      	ldr	r2, [sp, #0]
   12d4c:	3a01      	subs	r2, #1
   12d4e:	701a      	strb	r2, [r3, #0]
   12d50:	e7ed      	b.n	12d2e <MacExecuteCommands+0x18a>
   12d52:	46c0      	nop			; (mov r8, r8)
   12d54:	20002b5c 	.word	0x20002b5c
   12d58:	0000021a 	.word	0x0000021a
   12d5c:	00010bb5 	.word	0x00010bb5
   12d60:	00010a79 	.word	0x00010a79
   12d64:	0001097d 	.word	0x0001097d
   12d68:	00012a15 	.word	0x00012a15
   12d6c:	0000fe25 	.word	0x0000fe25
   12d70:	0000e071 	.word	0x0000e071
   12d74:	00010b65 	.word	0x00010b65
   12d78:	00010ab1 	.word	0x00010ab1
   12d7c:	00010ccd 	.word	0x00010ccd
   12d80:	00000217 	.word	0x00000217
   12d84:	0000021d 	.word	0x0000021d
   12d88:	00000219 	.word	0x00000219
   12d8c:	0000d895 	.word	0x0000d895
   12d90:	000129e9 	.word	0x000129e9
   12d94:	00010831 	.word	0x00010831
   12d98:	000107c5 	.word	0x000107c5

00012d9c <LorawanSetDataRange>:
   12d9c:	2201      	movs	r2, #1
   12d9e:	b530      	push	{r4, r5, lr}
   12da0:	b085      	sub	sp, #20
   12da2:	ab01      	add	r3, sp, #4
   12da4:	ac02      	add	r4, sp, #8
   12da6:	7018      	strb	r0, [r3, #0]
   12da8:	7020      	strb	r0, [r4, #0]
   12daa:	7061      	strb	r1, [r4, #1]
   12dac:	2015      	movs	r0, #21
   12dae:	0019      	movs	r1, r3
   12db0:	4d11      	ldr	r5, [pc, #68]	; (12df8 <LorawanSetDataRange+0x5c>)
   12db2:	705a      	strb	r2, [r3, #1]
   12db4:	47a8      	blx	r5
   12db6:	2808      	cmp	r0, #8
   12db8:	d003      	beq.n	12dc2 <LorawanSetDataRange+0x26>
   12dba:	250a      	movs	r5, #10
   12dbc:	0028      	movs	r0, r5
   12dbe:	b005      	add	sp, #20
   12dc0:	bd30      	pop	{r4, r5, pc}
   12dc2:	0021      	movs	r1, r4
   12dc4:	2012      	movs	r0, #18
   12dc6:	47a8      	blx	r5
   12dc8:	0005      	movs	r5, r0
   12dca:	2808      	cmp	r0, #8
   12dcc:	d1f5      	bne.n	12dba <LorawanSetDataRange+0x1e>
   12dce:	0021      	movs	r1, r4
   12dd0:	4b0a      	ldr	r3, [pc, #40]	; (12dfc <LorawanSetDataRange+0x60>)
   12dd2:	ac03      	add	r4, sp, #12
   12dd4:	2012      	movs	r0, #18
   12dd6:	4798      	blx	r3
   12dd8:	0022      	movs	r2, r4
   12dda:	2100      	movs	r1, #0
   12ddc:	4b08      	ldr	r3, [pc, #32]	; (12e00 <LorawanSetDataRange+0x64>)
   12dde:	2014      	movs	r0, #20
   12de0:	4798      	blx	r3
   12de2:	4b08      	ldr	r3, [pc, #32]	; (12e04 <LorawanSetDataRange+0x68>)
   12de4:	7821      	ldrb	r1, [r4, #0]
   12de6:	001a      	movs	r2, r3
   12de8:	32ea      	adds	r2, #234	; 0xea
   12dea:	7011      	strb	r1, [r2, #0]
   12dec:	7862      	ldrb	r2, [r4, #1]
   12dee:	33eb      	adds	r3, #235	; 0xeb
   12df0:	701a      	strb	r2, [r3, #0]
   12df2:	4b05      	ldr	r3, [pc, #20]	; (12e08 <LorawanSetDataRange+0x6c>)
   12df4:	4798      	blx	r3
   12df6:	e7e1      	b.n	12dbc <LorawanSetDataRange+0x20>
   12df8:	0000d8b1 	.word	0x0000d8b1
   12dfc:	0000d9bd 	.word	0x0000d9bd
   12e00:	0000d895 	.word	0x0000d895
   12e04:	20002b5c 	.word	0x20002b5c
   12e08:	000129e9 	.word	0x000129e9

00012e0c <LorawanSetChannelIdStatus>:
   12e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12e0e:	466b      	mov	r3, sp
   12e10:	7018      	strb	r0, [r3, #0]
   12e12:	7059      	strb	r1, [r3, #1]
   12e14:	2016      	movs	r0, #22
   12e16:	4669      	mov	r1, sp
   12e18:	4b0c      	ldr	r3, [pc, #48]	; (12e4c <LorawanSetChannelIdStatus+0x40>)
   12e1a:	4798      	blx	r3
   12e1c:	0004      	movs	r4, r0
   12e1e:	2808      	cmp	r0, #8
   12e20:	d111      	bne.n	12e46 <LorawanSetChannelIdStatus+0x3a>
   12e22:	ad01      	add	r5, sp, #4
   12e24:	002a      	movs	r2, r5
   12e26:	2100      	movs	r1, #0
   12e28:	4b09      	ldr	r3, [pc, #36]	; (12e50 <LorawanSetChannelIdStatus+0x44>)
   12e2a:	2014      	movs	r0, #20
   12e2c:	4798      	blx	r3
   12e2e:	4b09      	ldr	r3, [pc, #36]	; (12e54 <LorawanSetChannelIdStatus+0x48>)
   12e30:	7829      	ldrb	r1, [r5, #0]
   12e32:	001a      	movs	r2, r3
   12e34:	32ea      	adds	r2, #234	; 0xea
   12e36:	7011      	strb	r1, [r2, #0]
   12e38:	786a      	ldrb	r2, [r5, #1]
   12e3a:	33eb      	adds	r3, #235	; 0xeb
   12e3c:	701a      	strb	r2, [r3, #0]
   12e3e:	4b06      	ldr	r3, [pc, #24]	; (12e58 <LorawanSetChannelIdStatus+0x4c>)
   12e40:	4798      	blx	r3
   12e42:	0020      	movs	r0, r4
   12e44:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12e46:	240a      	movs	r4, #10
   12e48:	e7fb      	b.n	12e42 <LorawanSetChannelIdStatus+0x36>
   12e4a:	46c0      	nop			; (mov r8, r8)
   12e4c:	0000d9bd 	.word	0x0000d9bd
   12e50:	0000d895 	.word	0x0000d895
   12e54:	20002b5c 	.word	0x20002b5c
   12e58:	000129e9 	.word	0x000129e9

00012e5c <LORAWAN_RxDone>:
   12e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e5e:	4bc4      	ldr	r3, [pc, #784]	; (13170 <LORAWAN_RxDone+0x314>)
   12e60:	b093      	sub	sp, #76	; 0x4c
   12e62:	781b      	ldrb	r3, [r3, #0]
   12e64:	0007      	movs	r7, r0
   12e66:	b25a      	sxtb	r2, r3
   12e68:	9106      	str	r1, [sp, #24]
   12e6a:	4cc2      	ldr	r4, [pc, #776]	; (13174 <LORAWAN_RxDone+0x318>)
   12e6c:	2a00      	cmp	r2, #0
   12e6e:	da01      	bge.n	12e74 <LORAWAN_RxDone+0x18>
   12e70:	f000 fc82 	bl	13778 <LORAWAN_RxDone+0x91c>
   12e74:	7801      	ldrb	r1, [r0, #0]
   12e76:	221f      	movs	r2, #31
   12e78:	000e      	movs	r6, r1
   12e7a:	4396      	bics	r6, r2
   12e7c:	2e20      	cmp	r6, #32
   12e7e:	d000      	beq.n	12e82 <LORAWAN_RxDone+0x26>
   12e80:	e1ae      	b.n	131e0 <LORAWAN_RxDone+0x384>
   12e82:	7822      	ldrb	r2, [r4, #0]
   12e84:	2a00      	cmp	r2, #0
   12e86:	d001      	beq.n	12e8c <LORAWAN_RxDone+0x30>
   12e88:	f000 fc62 	bl	13750 <LORAWAN_RxDone+0x8f4>
   12e8c:	0022      	movs	r2, r4
   12e8e:	328c      	adds	r2, #140	; 0x8c
   12e90:	7812      	ldrb	r2, [r2, #0]
   12e92:	0752      	lsls	r2, r2, #29
   12e94:	d401      	bmi.n	12e9a <LORAWAN_RxDone+0x3e>
   12e96:	f000 fc5b 	bl	13750 <LORAWAN_RxDone+0x8f4>
   12e9a:	9b06      	ldr	r3, [sp, #24]
   12e9c:	3b01      	subs	r3, #1
   12e9e:	b2db      	uxtb	r3, r3
   12ea0:	9307      	str	r3, [sp, #28]
   12ea2:	4bb5      	ldr	r3, [pc, #724]	; (13178 <LORAWAN_RxDone+0x31c>)
   12ea4:	469c      	mov	ip, r3
   12ea6:	9b07      	ldr	r3, [sp, #28]
   12ea8:	2b00      	cmp	r3, #0
   12eaa:	d12c      	bne.n	12f06 <LORAWAN_RxDone+0xaa>
   12eac:	9b06      	ldr	r3, [sp, #24]
   12eae:	4660      	mov	r0, ip
   12eb0:	1f1d      	subs	r5, r3, #4
   12eb2:	b2eb      	uxtb	r3, r5
   12eb4:	9300      	str	r3, [sp, #0]
   12eb6:	4ab1      	ldr	r2, [pc, #708]	; (1317c <LORAWAN_RxDone+0x320>)
   12eb8:	003b      	movs	r3, r7
   12eba:	9907      	ldr	r1, [sp, #28]
   12ebc:	4eb0      	ldr	r6, [pc, #704]	; (13180 <LORAWAN_RxDone+0x324>)
   12ebe:	47b0      	blx	r6
   12ec0:	2204      	movs	r2, #4
   12ec2:	49ae      	ldr	r1, [pc, #696]	; (1317c <LORAWAN_RxDone+0x320>)
   12ec4:	4baf      	ldr	r3, [pc, #700]	; (13184 <LORAWAN_RxDone+0x328>)
   12ec6:	a810      	add	r0, sp, #64	; 0x40
   12ec8:	4798      	blx	r3
   12eca:	9e10      	ldr	r6, [sp, #64]	; 0x40
   12ecc:	1979      	adds	r1, r7, r5
   12ece:	2204      	movs	r2, #4
   12ed0:	4bac      	ldr	r3, [pc, #688]	; (13184 <LORAWAN_RxDone+0x328>)
   12ed2:	a810      	add	r0, sp, #64	; 0x40
   12ed4:	960d      	str	r6, [sp, #52]	; 0x34
   12ed6:	4798      	blx	r3
   12ed8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12eda:	4ba6      	ldr	r3, [pc, #664]	; (13174 <LORAWAN_RxDone+0x318>)
   12edc:	210e      	movs	r1, #14
   12ede:	42b2      	cmp	r2, r6
   12ee0:	d029      	beq.n	12f36 <LORAWAN_RxDone+0xda>
   12ee2:	001a      	movs	r2, r3
   12ee4:	327c      	adds	r2, #124	; 0x7c
   12ee6:	7812      	ldrb	r2, [r2, #0]
   12ee8:	400a      	ands	r2, r1
   12eea:	2a0a      	cmp	r2, #10
   12eec:	d005      	beq.n	12efa <LORAWAN_RxDone+0x9e>
   12eee:	2a06      	cmp	r2, #6
   12ef0:	d106      	bne.n	12f00 <LORAWAN_RxDone+0xa4>
   12ef2:	33f0      	adds	r3, #240	; 0xf0
   12ef4:	781b      	ldrb	r3, [r3, #0]
   12ef6:	2b00      	cmp	r3, #0
   12ef8:	d002      	beq.n	12f00 <LORAWAN_RxDone+0xa4>
   12efa:	2018      	movs	r0, #24
   12efc:	4ba2      	ldr	r3, [pc, #648]	; (13188 <LORAWAN_RxDone+0x32c>)
   12efe:	4798      	blx	r3
   12f00:	4ba2      	ldr	r3, [pc, #648]	; (1318c <LORAWAN_RxDone+0x330>)
   12f02:	4798      	blx	r3
   12f04:	e1d0      	b.n	132a8 <LORAWAN_RxDone+0x44c>
   12f06:	9b06      	ldr	r3, [sp, #24]
   12f08:	9a07      	ldr	r2, [sp, #28]
   12f0a:	2100      	movs	r1, #0
   12f0c:	1a98      	subs	r0, r3, r2
   12f0e:	1838      	adds	r0, r7, r0
   12f10:	4662      	mov	r2, ip
   12f12:	4b9f      	ldr	r3, [pc, #636]	; (13190 <LORAWAN_RxDone+0x334>)
   12f14:	4798      	blx	r3
   12f16:	2800      	cmp	r0, #0
   12f18:	d006      	beq.n	12f28 <LORAWAN_RxDone+0xcc>
   12f1a:	4b9b      	ldr	r3, [pc, #620]	; (13188 <LORAWAN_RxDone+0x32c>)
   12f1c:	4798      	blx	r3
   12f1e:	4b9b      	ldr	r3, [pc, #620]	; (1318c <LORAWAN_RxDone+0x330>)
   12f20:	4798      	blx	r3
   12f22:	201f      	movs	r0, #31
   12f24:	b013      	add	sp, #76	; 0x4c
   12f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12f28:	9b07      	ldr	r3, [sp, #28]
   12f2a:	2b10      	cmp	r3, #16
   12f2c:	d901      	bls.n	12f32 <LORAWAN_RxDone+0xd6>
   12f2e:	3b10      	subs	r3, #16
   12f30:	e7b5      	b.n	12e9e <LORAWAN_RxDone+0x42>
   12f32:	9007      	str	r0, [sp, #28]
   12f34:	e7b5      	b.n	12ea2 <LORAWAN_RxDone+0x46>
   12f36:	001a      	movs	r2, r3
   12f38:	327c      	adds	r2, #124	; 0x7c
   12f3a:	7812      	ldrb	r2, [r2, #0]
   12f3c:	400a      	ands	r2, r1
   12f3e:	2a06      	cmp	r2, #6
   12f40:	d103      	bne.n	12f4a <LORAWAN_RxDone+0xee>
   12f42:	33e3      	adds	r3, #227	; 0xe3
   12f44:	7818      	ldrb	r0, [r3, #0]
   12f46:	4b93      	ldr	r3, [pc, #588]	; (13194 <LORAWAN_RxDone+0x338>)
   12f48:	4798      	blx	r3
   12f4a:	7a3a      	ldrb	r2, [r7, #8]
   12f4c:	79fb      	ldrb	r3, [r7, #7]
   12f4e:	0212      	lsls	r2, r2, #8
   12f50:	431a      	orrs	r2, r3
   12f52:	7a7b      	ldrb	r3, [r7, #9]
   12f54:	2001      	movs	r0, #1
   12f56:	041b      	lsls	r3, r3, #16
   12f58:	431a      	orrs	r2, r3
   12f5a:	7abb      	ldrb	r3, [r7, #10]
   12f5c:	061b      	lsls	r3, r3, #24
   12f5e:	4313      	orrs	r3, r2
   12f60:	0a19      	lsrs	r1, r3, #8
   12f62:	7063      	strb	r3, [r4, #1]
   12f64:	70a1      	strb	r1, [r4, #2]
   12f66:	0c19      	lsrs	r1, r3, #16
   12f68:	0e1b      	lsrs	r3, r3, #24
   12f6a:	70e1      	strb	r1, [r4, #3]
   12f6c:	7123      	strb	r3, [r4, #4]
   12f6e:	240f      	movs	r4, #15
   12f70:	2103      	movs	r1, #3
   12f72:	4b89      	ldr	r3, [pc, #548]	; (13198 <LORAWAN_RxDone+0x33c>)
   12f74:	4798      	blx	r3
   12f76:	7b38      	ldrb	r0, [r7, #12]
   12f78:	4b88      	ldr	r3, [pc, #544]	; (1319c <LORAWAN_RxDone+0x340>)
   12f7a:	4020      	ands	r0, r4
   12f7c:	4798      	blx	r3
   12f7e:	7af8      	ldrb	r0, [r7, #11]
   12f80:	4b87      	ldr	r3, [pc, #540]	; (131a0 <LORAWAN_RxDone+0x344>)
   12f82:	0641      	lsls	r1, r0, #25
   12f84:	0700      	lsls	r0, r0, #28
   12f86:	0f49      	lsrs	r1, r1, #29
   12f88:	0f00      	lsrs	r0, r0, #28
   12f8a:	4798      	blx	r3
   12f8c:	4b85      	ldr	r3, [pc, #532]	; (131a4 <LORAWAN_RxDone+0x348>)
   12f8e:	2100      	movs	r1, #0
   12f90:	203c      	movs	r0, #60	; 0x3c
   12f92:	4798      	blx	r3
   12f94:	9b06      	ldr	r3, [sp, #24]
   12f96:	2b21      	cmp	r3, #33	; 0x21
   12f98:	d000      	beq.n	12f9c <LORAWAN_RxDone+0x140>
   12f9a:	e08c      	b.n	130b6 <LORAWAN_RxDone+0x25a>
   12f9c:	251a      	movs	r5, #26
   12f9e:	ab04      	add	r3, sp, #16
   12fa0:	18ed      	adds	r5, r5, r3
   12fa2:	002a      	movs	r2, r5
   12fa4:	4b80      	ldr	r3, [pc, #512]	; (131a8 <LORAWAN_RxDone+0x34c>)
   12fa6:	4981      	ldr	r1, [pc, #516]	; (131ac <LORAWAN_RxDone+0x350>)
   12fa8:	2007      	movs	r0, #7
   12faa:	4798      	blx	r3
   12fac:	782b      	ldrb	r3, [r5, #0]
   12fae:	2bff      	cmp	r3, #255	; 0xff
   12fb0:	d100      	bne.n	12fb4 <LORAWAN_RxDone+0x158>
   12fb2:	e080      	b.n	130b6 <LORAWAN_RxDone+0x25a>
   12fb4:	2350      	movs	r3, #80	; 0x50
   12fb6:	43a3      	bics	r3, r4
   12fb8:	9308      	str	r3, [sp, #32]
   12fba:	003b      	movs	r3, r7
   12fbc:	330d      	adds	r3, #13
   12fbe:	9306      	str	r3, [sp, #24]
   12fc0:	2600      	movs	r6, #0
   12fc2:	2203      	movs	r2, #3
   12fc4:	9906      	ldr	r1, [sp, #24]
   12fc6:	4b6f      	ldr	r3, [pc, #444]	; (13184 <LORAWAN_RxDone+0x328>)
   12fc8:	a80e      	add	r0, sp, #56	; 0x38
   12fca:	960e      	str	r6, [sp, #56]	; 0x38
   12fcc:	4798      	blx	r3
   12fce:	2364      	movs	r3, #100	; 0x64
   12fd0:	990e      	ldr	r1, [sp, #56]	; 0x38
   12fd2:	aa04      	add	r2, sp, #16
   12fd4:	4359      	muls	r1, r3
   12fd6:	3b4a      	subs	r3, #74	; 0x4a
   12fd8:	189b      	adds	r3, r3, r2
   12fda:	7818      	ldrb	r0, [r3, #0]
   12fdc:	9b07      	ldr	r3, [sp, #28]
   12fde:	910e      	str	r1, [sp, #56]	; 0x38
   12fe0:	1818      	adds	r0, r3, r0
   12fe2:	b2c0      	uxtb	r0, r0
   12fe4:	76d0      	strb	r0, [r2, #27]
   12fe6:	42b1      	cmp	r1, r6
   12fe8:	d100      	bne.n	12fec <LORAWAN_RxDone+0x190>
   12fea:	e0a7      	b.n	1313c <LORAWAN_RxDone+0x2e0>
   12fec:	466b      	mov	r3, sp
   12fee:	2220      	movs	r2, #32
   12ff0:	189b      	adds	r3, r3, r2
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	ad10      	add	r5, sp, #64	; 0x40
   12ff6:	ac0b      	add	r4, sp, #44	; 0x2c
   12ff8:	7128      	strb	r0, [r5, #4]
   12ffa:	9110      	str	r1, [sp, #64]	; 0x40
   12ffc:	7020      	strb	r0, [r4, #0]
   12ffe:	7063      	strb	r3, [r4, #1]
   13000:	0029      	movs	r1, r5
   13002:	2002      	movs	r0, #2
   13004:	4b6a      	ldr	r3, [pc, #424]	; (131b0 <LORAWAN_RxDone+0x354>)
   13006:	4798      	blx	r3
   13008:	2808      	cmp	r0, #8
   1300a:	d140      	bne.n	1308e <LORAWAN_RxDone+0x232>
   1300c:	0029      	movs	r1, r5
   1300e:	0030      	movs	r0, r6
   13010:	4b64      	ldr	r3, [pc, #400]	; (131a4 <LORAWAN_RxDone+0x348>)
   13012:	4798      	blx	r3
   13014:	ad0c      	add	r5, sp, #48	; 0x30
   13016:	0021      	movs	r1, r4
   13018:	4b62      	ldr	r3, [pc, #392]	; (131a4 <LORAWAN_RxDone+0x348>)
   1301a:	2012      	movs	r0, #18
   1301c:	4798      	blx	r3
   1301e:	0031      	movs	r1, r6
   13020:	002a      	movs	r2, r5
   13022:	4e61      	ldr	r6, [pc, #388]	; (131a8 <LORAWAN_RxDone+0x34c>)
   13024:	2014      	movs	r0, #20
   13026:	47b0      	blx	r6
   13028:	4c52      	ldr	r4, [pc, #328]	; (13174 <LORAWAN_RxDone+0x318>)
   1302a:	782a      	ldrb	r2, [r5, #0]
   1302c:	0023      	movs	r3, r4
   1302e:	33ea      	adds	r3, #234	; 0xea
   13030:	701a      	strb	r2, [r3, #0]
   13032:	0023      	movs	r3, r4
   13034:	786a      	ldrb	r2, [r5, #1]
   13036:	2522      	movs	r5, #34	; 0x22
   13038:	33eb      	adds	r3, #235	; 0xeb
   1303a:	701a      	strb	r2, [r3, #0]
   1303c:	4b5d      	ldr	r3, [pc, #372]	; (131b4 <LORAWAN_RxDone+0x358>)
   1303e:	4798      	blx	r3
   13040:	ab04      	add	r3, sp, #16
   13042:	18ed      	adds	r5, r5, r3
   13044:	231b      	movs	r3, #27
   13046:	a904      	add	r1, sp, #16
   13048:	185b      	adds	r3, r3, r1
   1304a:	0019      	movs	r1, r3
   1304c:	002a      	movs	r2, r5
   1304e:	201e      	movs	r0, #30
   13050:	47b0      	blx	r6
   13052:	0023      	movs	r3, r4
   13054:	33ff      	adds	r3, #255	; 0xff
   13056:	7c5b      	ldrb	r3, [r3, #17]
   13058:	079b      	lsls	r3, r3, #30
   1305a:	d508      	bpl.n	1306e <LORAWAN_RxDone+0x212>
   1305c:	ab04      	add	r3, sp, #16
   1305e:	7edb      	ldrb	r3, [r3, #27]
   13060:	a90f      	add	r1, sp, #60	; 0x3c
   13062:	708b      	strb	r3, [r1, #2]
   13064:	882b      	ldrh	r3, [r5, #0]
   13066:	201e      	movs	r0, #30
   13068:	800b      	strh	r3, [r1, #0]
   1306a:	4b4e      	ldr	r3, [pc, #312]	; (131a4 <LORAWAN_RxDone+0x348>)
   1306c:	4798      	blx	r3
   1306e:	231b      	movs	r3, #27
   13070:	aa04      	add	r2, sp, #16
   13072:	189b      	adds	r3, r3, r2
   13074:	7818      	ldrb	r0, [r3, #0]
   13076:	2101      	movs	r1, #1
   13078:	4b4f      	ldr	r3, [pc, #316]	; (131b8 <LORAWAN_RxDone+0x35c>)
   1307a:	4798      	blx	r3
   1307c:	2204      	movs	r2, #4
   1307e:	347c      	adds	r4, #124	; 0x7c
   13080:	7863      	ldrb	r3, [r4, #1]
   13082:	210b      	movs	r1, #11
   13084:	4313      	orrs	r3, r2
   13086:	7063      	strb	r3, [r4, #1]
   13088:	2001      	movs	r0, #1
   1308a:	4b43      	ldr	r3, [pc, #268]	; (13198 <LORAWAN_RxDone+0x33c>)
   1308c:	4798      	blx	r3
   1308e:	9b07      	ldr	r3, [sp, #28]
   13090:	3301      	adds	r3, #1
   13092:	b2db      	uxtb	r3, r3
   13094:	9307      	str	r3, [sp, #28]
   13096:	9b06      	ldr	r3, [sp, #24]
   13098:	3303      	adds	r3, #3
   1309a:	9306      	str	r3, [sp, #24]
   1309c:	9b07      	ldr	r3, [sp, #28]
   1309e:	2b05      	cmp	r3, #5
   130a0:	d18e      	bne.n	12fc0 <LORAWAN_RxDone+0x164>
   130a2:	2204      	movs	r2, #4
   130a4:	4b33      	ldr	r3, [pc, #204]	; (13174 <LORAWAN_RxDone+0x318>)
   130a6:	2001      	movs	r0, #1
   130a8:	337c      	adds	r3, #124	; 0x7c
   130aa:	7859      	ldrb	r1, [r3, #1]
   130ac:	430a      	orrs	r2, r1
   130ae:	705a      	strb	r2, [r3, #1]
   130b0:	210b      	movs	r1, #11
   130b2:	4b39      	ldr	r3, [pc, #228]	; (13198 <LORAWAN_RxDone+0x33c>)
   130b4:	4798      	blx	r3
   130b6:	4d41      	ldr	r5, [pc, #260]	; (131bc <LORAWAN_RxDone+0x360>)
   130b8:	1c7e      	adds	r6, r7, #1
   130ba:	3704      	adds	r7, #4
   130bc:	0028      	movs	r0, r5
   130be:	003a      	movs	r2, r7
   130c0:	0031      	movs	r1, r6
   130c2:	4b3f      	ldr	r3, [pc, #252]	; (131c0 <LORAWAN_RxDone+0x364>)
   130c4:	4798      	blx	r3
   130c6:	2302      	movs	r3, #2
   130c8:	4c2a      	ldr	r4, [pc, #168]	; (13174 <LORAWAN_RxDone+0x318>)
   130ca:	0028      	movs	r0, r5
   130cc:	7563      	strb	r3, [r4, #21]
   130ce:	4a2a      	ldr	r2, [pc, #168]	; (13178 <LORAWAN_RxDone+0x31c>)
   130d0:	3b01      	subs	r3, #1
   130d2:	2100      	movs	r1, #0
   130d4:	4d3b      	ldr	r5, [pc, #236]	; (131c4 <LORAWAN_RxDone+0x368>)
   130d6:	47a8      	blx	r5
   130d8:	2800      	cmp	r0, #0
   130da:	d003      	beq.n	130e4 <LORAWAN_RxDone+0x288>
   130dc:	4b2a      	ldr	r3, [pc, #168]	; (13188 <LORAWAN_RxDone+0x32c>)
   130de:	4798      	blx	r3
   130e0:	4b2a      	ldr	r3, [pc, #168]	; (1318c <LORAWAN_RxDone+0x330>)
   130e2:	4798      	blx	r3
   130e4:	2105      	movs	r1, #5
   130e6:	4b2c      	ldr	r3, [pc, #176]	; (13198 <LORAWAN_RxDone+0x33c>)
   130e8:	2001      	movs	r0, #1
   130ea:	4798      	blx	r3
   130ec:	4d36      	ldr	r5, [pc, #216]	; (131c8 <LORAWAN_RxDone+0x36c>)
   130ee:	003a      	movs	r2, r7
   130f0:	0028      	movs	r0, r5
   130f2:	0031      	movs	r1, r6
   130f4:	4b32      	ldr	r3, [pc, #200]	; (131c0 <LORAWAN_RxDone+0x364>)
   130f6:	4798      	blx	r3
   130f8:	2301      	movs	r3, #1
   130fa:	0028      	movs	r0, r5
   130fc:	7163      	strb	r3, [r4, #5]
   130fe:	4a1e      	ldr	r2, [pc, #120]	; (13178 <LORAWAN_RxDone+0x31c>)
   13100:	18db      	adds	r3, r3, r3
   13102:	2100      	movs	r1, #0
   13104:	4d2f      	ldr	r5, [pc, #188]	; (131c4 <LORAWAN_RxDone+0x368>)
   13106:	47a8      	blx	r5
   13108:	2800      	cmp	r0, #0
   1310a:	d003      	beq.n	13114 <LORAWAN_RxDone+0x2b8>
   1310c:	4b1e      	ldr	r3, [pc, #120]	; (13188 <LORAWAN_RxDone+0x32c>)
   1310e:	4798      	blx	r3
   13110:	4b1e      	ldr	r3, [pc, #120]	; (1318c <LORAWAN_RxDone+0x330>)
   13112:	4798      	blx	r3
   13114:	4b20      	ldr	r3, [pc, #128]	; (13198 <LORAWAN_RxDone+0x33c>)
   13116:	2104      	movs	r1, #4
   13118:	2001      	movs	r0, #1
   1311a:	4798      	blx	r3
   1311c:	4b2b      	ldr	r3, [pc, #172]	; (131cc <LORAWAN_RxDone+0x370>)
   1311e:	5ce3      	ldrb	r3, [r4, r3]
   13120:	2b00      	cmp	r3, #0
   13122:	d017      	beq.n	13154 <LORAWAN_RxDone+0x2f8>
   13124:	492a      	ldr	r1, [pc, #168]	; (131d0 <LORAWAN_RxDone+0x374>)
   13126:	2002      	movs	r0, #2
   13128:	4c2a      	ldr	r4, [pc, #168]	; (131d4 <LORAWAN_RxDone+0x378>)
   1312a:	47a0      	blx	r4
   1312c:	2800      	cmp	r0, #0
   1312e:	d008      	beq.n	13142 <LORAWAN_RxDone+0x2e6>
   13130:	4b15      	ldr	r3, [pc, #84]	; (13188 <LORAWAN_RxDone+0x32c>)
   13132:	4798      	blx	r3
   13134:	4b15      	ldr	r3, [pc, #84]	; (1318c <LORAWAN_RxDone+0x330>)
   13136:	4798      	blx	r3
   13138:	2023      	movs	r0, #35	; 0x23
   1313a:	e6f3      	b.n	12f24 <LORAWAN_RxDone+0xc8>
   1313c:	4b1e      	ldr	r3, [pc, #120]	; (131b8 <LORAWAN_RxDone+0x35c>)
   1313e:	4798      	blx	r3
   13140:	e7a5      	b.n	1308e <LORAWAN_RxDone+0x232>
   13142:	4925      	ldr	r1, [pc, #148]	; (131d8 <LORAWAN_RxDone+0x37c>)
   13144:	2001      	movs	r0, #1
   13146:	47a0      	blx	r4
   13148:	2800      	cmp	r0, #0
   1314a:	d1f1      	bne.n	13130 <LORAWAN_RxDone+0x2d4>
   1314c:	4b23      	ldr	r3, [pc, #140]	; (131dc <LORAWAN_RxDone+0x380>)
   1314e:	4798      	blx	r3
   13150:	2008      	movs	r0, #8
   13152:	e6e7      	b.n	12f24 <LORAWAN_RxDone+0xc8>
   13154:	0020      	movs	r0, r4
   13156:	0021      	movs	r1, r4
   13158:	2210      	movs	r2, #16
   1315a:	3115      	adds	r1, #21
   1315c:	4d09      	ldr	r5, [pc, #36]	; (13184 <LORAWAN_RxDone+0x328>)
   1315e:	3035      	adds	r0, #53	; 0x35
   13160:	47a8      	blx	r5
   13162:	0020      	movs	r0, r4
   13164:	1d61      	adds	r1, r4, #5
   13166:	2210      	movs	r2, #16
   13168:	3025      	adds	r0, #37	; 0x25
   1316a:	47a8      	blx	r5
   1316c:	e7ee      	b.n	1314c <LORAWAN_RxDone+0x2f0>
   1316e:	46c0      	nop			; (mov r8, r8)
   13170:	20002bd8 	.word	0x20002bd8
   13174:	20002b5c 	.word	0x20002b5c
   13178:	20002ba1 	.word	0x20002ba1
   1317c:	20001110 	.word	0x20001110
   13180:	0000dd7d 	.word	0x0000dd7d
   13184:	00019d1d 	.word	0x00019d1d
   13188:	00010919 	.word	0x00010919
   1318c:	000127f5 	.word	0x000127f5
   13190:	0000dc11 	.word	0x0000dc11
   13194:	0000f0b9 	.word	0x0000f0b9
   13198:	0000e071 	.word	0x0000e071
   1319c:	0000fe25 	.word	0x0000fe25
   131a0:	000107e1 	.word	0x000107e1
   131a4:	0000d9bd 	.word	0x0000d9bd
   131a8:	0000d895 	.word	0x0000d895
   131ac:	20002c3b 	.word	0x20002c3b
   131b0:	0000d8b1 	.word	0x0000d8b1
   131b4:	000129e9 	.word	0x000129e9
   131b8:	00012e0d 	.word	0x00012e0d
   131bc:	20002b71 	.word	0x20002b71
   131c0:	0001015d 	.word	0x0001015d
   131c4:	0000dc8d 	.word	0x0000dc8d
   131c8:	20002b61 	.word	0x20002b61
   131cc:	00000221 	.word	0x00000221
   131d0:	20002b81 	.word	0x20002b81
   131d4:	0000dcd5 	.word	0x0000dcd5
   131d8:	20002b91 	.word	0x20002b91
   131dc:	0001006d 	.word	0x0001006d
   131e0:	22bf      	movs	r2, #191	; 0xbf
   131e2:	3e60      	subs	r6, #96	; 0x60
   131e4:	4016      	ands	r6, r2
   131e6:	d000      	beq.n	131ea <LORAWAN_RxDone+0x38e>
   131e8:	e2b2      	b.n	13750 <LORAWAN_RxDone+0x8f4>
   131ea:	2501      	movs	r5, #1
   131ec:	422b      	tst	r3, r5
   131ee:	d100      	bne.n	131f2 <LORAWAN_RxDone+0x396>
   131f0:	e2ae      	b.n	13750 <LORAWAN_RxDone+0x8f4>
   131f2:	7922      	ldrb	r2, [r4, #4]
   131f4:	6823      	ldr	r3, [r4, #0]
   131f6:	0612      	lsls	r2, r2, #24
   131f8:	0a1b      	lsrs	r3, r3, #8
   131fa:	431a      	orrs	r2, r3
   131fc:	0023      	movs	r3, r4
   131fe:	33d8      	adds	r3, #216	; 0xd8
   13200:	701e      	strb	r6, [r3, #0]
   13202:	9207      	str	r2, [sp, #28]
   13204:	7882      	ldrb	r2, [r0, #2]
   13206:	7843      	ldrb	r3, [r0, #1]
   13208:	0212      	lsls	r2, r2, #8
   1320a:	431a      	orrs	r2, r3
   1320c:	78c3      	ldrb	r3, [r0, #3]
   1320e:	041b      	lsls	r3, r3, #16
   13210:	431a      	orrs	r2, r3
   13212:	7903      	ldrb	r3, [r0, #4]
   13214:	061b      	lsls	r3, r3, #24
   13216:	4313      	orrs	r3, r2
   13218:	9a07      	ldr	r2, [sp, #28]
   1321a:	429a      	cmp	r2, r3
   1321c:	d100      	bne.n	13220 <LORAWAN_RxDone+0x3c4>
   1321e:	e2c8      	b.n	137b2 <LORAWAN_RxDone+0x956>
   13220:	ab04      	add	r3, sp, #16
   13222:	3521      	adds	r5, #33	; 0x21
   13224:	18ed      	adds	r5, r5, r3
   13226:	7a02      	ldrb	r2, [r0, #8]
   13228:	0949      	lsrs	r1, r1, #5
   1322a:	002b      	movs	r3, r5
   1322c:	4ed7      	ldr	r6, [pc, #860]	; (1358c <LORAWAN_RxDone+0x730>)
   1322e:	47b0      	blx	r6
   13230:	2808      	cmp	r0, #8
   13232:	d131      	bne.n	13298 <LORAWAN_RxDone+0x43c>
   13234:	233c      	movs	r3, #60	; 0x3c
   13236:	7829      	ldrb	r1, [r5, #0]
   13238:	434b      	muls	r3, r1
   1323a:	001d      	movs	r5, r3
   1323c:	3529      	adds	r5, #41	; 0x29
   1323e:	35ff      	adds	r5, #255	; 0xff
   13240:	192d      	adds	r5, r5, r4
   13242:	18e4      	adds	r4, r4, r3
   13244:	0023      	movs	r3, r4
   13246:	33fc      	adds	r3, #252	; 0xfc
   13248:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1324a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1324c:	9308      	str	r3, [sp, #32]
   1324e:	79fb      	ldrb	r3, [r7, #7]
   13250:	79ba      	ldrb	r2, [r7, #6]
   13252:	021b      	lsls	r3, r3, #8
   13254:	4313      	orrs	r3, r2
   13256:	0022      	movs	r2, r4
   13258:	3249      	adds	r2, #73	; 0x49
   1325a:	32ff      	adds	r2, #255	; 0xff
   1325c:	8816      	ldrh	r6, [r2, #0]
   1325e:	429e      	cmp	r6, r3
   13260:	d908      	bls.n	13274 <LORAWAN_RxDone+0x418>
   13262:	344b      	adds	r4, #75	; 0x4b
   13264:	34ff      	adds	r4, #255	; 0xff
   13266:	8823      	ldrh	r3, [r4, #0]
   13268:	3301      	adds	r3, #1
   1326a:	8023      	strh	r3, [r4, #0]
   1326c:	79fb      	ldrb	r3, [r7, #7]
   1326e:	79bc      	ldrb	r4, [r7, #6]
   13270:	021b      	lsls	r3, r3, #8
   13272:	4323      	orrs	r3, r4
   13274:	8013      	strh	r3, [r2, #0]
   13276:	9b06      	ldr	r3, [sp, #24]
   13278:	9000      	str	r0, [sp, #0]
   1327a:	1f1a      	subs	r2, r3, #4
   1327c:	233c      	movs	r3, #60	; 0x3c
   1327e:	434b      	muls	r3, r1
   13280:	49c3      	ldr	r1, [pc, #780]	; (13590 <LORAWAN_RxDone+0x734>)
   13282:	b2d2      	uxtb	r2, r2
   13284:	18c9      	adds	r1, r1, r3
   13286:	31fc      	adds	r1, #252	; 0xfc
   13288:	2349      	movs	r3, #73	; 0x49
   1328a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
   1328c:	2001      	movs	r0, #1
   1328e:	4cc1      	ldr	r4, [pc, #772]	; (13594 <LORAWAN_RxDone+0x738>)
   13290:	47a0      	blx	r4
   13292:	2301      	movs	r3, #1
   13294:	9307      	str	r3, [sp, #28]
   13296:	e2a2      	b.n	137de <LORAWAN_RxDone+0x982>
   13298:	220e      	movs	r2, #14
   1329a:	4bbf      	ldr	r3, [pc, #764]	; (13598 <LORAWAN_RxDone+0x73c>)
   1329c:	781b      	ldrb	r3, [r3, #0]
   1329e:	4013      	ands	r3, r2
   132a0:	2b0a      	cmp	r3, #10
   132a2:	d008      	beq.n	132b6 <LORAWAN_RxDone+0x45a>
   132a4:	2b06      	cmp	r3, #6
   132a6:	d001      	beq.n	132ac <LORAWAN_RxDone+0x450>
   132a8:	200a      	movs	r0, #10
   132aa:	e63b      	b.n	12f24 <LORAWAN_RxDone+0xc8>
   132ac:	0023      	movs	r3, r4
   132ae:	33f0      	adds	r3, #240	; 0xf0
   132b0:	781b      	ldrb	r3, [r3, #0]
   132b2:	2b00      	cmp	r3, #0
   132b4:	d0f8      	beq.n	132a8 <LORAWAN_RxDone+0x44c>
   132b6:	2220      	movs	r2, #32
   132b8:	201e      	movs	r0, #30
   132ba:	348c      	adds	r4, #140	; 0x8c
   132bc:	7823      	ldrb	r3, [r4, #0]
   132be:	4393      	bics	r3, r2
   132c0:	7023      	strb	r3, [r4, #0]
   132c2:	4bb6      	ldr	r3, [pc, #728]	; (1359c <LORAWAN_RxDone+0x740>)
   132c4:	e61b      	b.n	12efe <LORAWAN_RxDone+0xa2>
   132c6:	0022      	movs	r2, r4
   132c8:	2102      	movs	r1, #2
   132ca:	e2a2      	b.n	13812 <LORAWAN_RxDone+0x9b6>
   132cc:	9b08      	ldr	r3, [sp, #32]
   132ce:	3408      	adds	r4, #8
   132d0:	67e3      	str	r3, [r4, #124]	; 0x7c
   132d2:	e2e1      	b.n	13898 <LORAWAN_RxDone+0xa3c>
   132d4:	9b07      	ldr	r3, [sp, #28]
   132d6:	2b00      	cmp	r3, #0
   132d8:	d00a      	beq.n	132f0 <LORAWAN_RxDone+0x494>
   132da:	2322      	movs	r3, #34	; 0x22
   132dc:	aa04      	add	r2, sp, #16
   132de:	189b      	adds	r3, r3, r2
   132e0:	781b      	ldrb	r3, [r3, #0]
   132e2:	003a      	movs	r2, r7
   132e4:	9906      	ldr	r1, [sp, #24]
   132e6:	0038      	movs	r0, r7
   132e8:	4cad      	ldr	r4, [pc, #692]	; (135a0 <LORAWAN_RxDone+0x744>)
   132ea:	47a0      	blx	r4
   132ec:	2001      	movs	r0, #1
   132ee:	e619      	b.n	12f24 <LORAWAN_RxDone+0xc8>
   132f0:	4ca7      	ldr	r4, [pc, #668]	; (13590 <LORAWAN_RxDone+0x734>)
   132f2:	466a      	mov	r2, sp
   132f4:	0023      	movs	r3, r4
   132f6:	7f12      	ldrb	r2, [r2, #28]
   132f8:	33db      	adds	r3, #219	; 0xdb
   132fa:	701a      	strb	r2, [r3, #0]
   132fc:	797b      	ldrb	r3, [r7, #5]
   132fe:	2b7f      	cmp	r3, #127	; 0x7f
   13300:	d909      	bls.n	13316 <LORAWAN_RxDone+0x4ba>
   13302:	0022      	movs	r2, r4
   13304:	2320      	movs	r3, #32
   13306:	327c      	adds	r2, #124	; 0x7c
   13308:	7811      	ldrb	r1, [r2, #0]
   1330a:	2001      	movs	r0, #1
   1330c:	430b      	orrs	r3, r1
   1330e:	7013      	strb	r3, [r2, #0]
   13310:	210b      	movs	r1, #11
   13312:	4ba4      	ldr	r3, [pc, #656]	; (135a4 <LORAWAN_RxDone+0x748>)
   13314:	4798      	blx	r3
   13316:	797b      	ldrb	r3, [r7, #5]
   13318:	06db      	lsls	r3, r3, #27
   1331a:	d505      	bpl.n	13328 <LORAWAN_RxDone+0x4cc>
   1331c:	0022      	movs	r2, r4
   1331e:	2308      	movs	r3, #8
   13320:	328c      	adds	r2, #140	; 0x8c
   13322:	7811      	ldrb	r1, [r2, #0]
   13324:	430b      	orrs	r3, r1
   13326:	7013      	strb	r3, [r2, #0]
   13328:	797b      	ldrb	r3, [r7, #5]
   1332a:	065b      	lsls	r3, r3, #25
   1332c:	d505      	bpl.n	1333a <LORAWAN_RxDone+0x4de>
   1332e:	0022      	movs	r2, r4
   13330:	2310      	movs	r3, #16
   13332:	328c      	adds	r2, #140	; 0x8c
   13334:	7811      	ldrb	r1, [r2, #0]
   13336:	430b      	orrs	r3, r1
   13338:	7013      	strb	r3, [r2, #0]
   1333a:	221f      	movs	r2, #31
   1333c:	783b      	ldrb	r3, [r7, #0]
   1333e:	4393      	bics	r3, r2
   13340:	2ba0      	cmp	r3, #160	; 0xa0
   13342:	d105      	bne.n	13350 <LORAWAN_RxDone+0x4f4>
   13344:	0022      	movs	r2, r4
   13346:	328c      	adds	r2, #140	; 0x8c
   13348:	7811      	ldrb	r1, [r2, #0]
   1334a:	3b9e      	subs	r3, #158	; 0x9e
   1334c:	430b      	orrs	r3, r1
   1334e:	7013      	strb	r3, [r2, #0]
   13350:	7979      	ldrb	r1, [r7, #5]
   13352:	070b      	lsls	r3, r1, #28
   13354:	d100      	bne.n	13358 <LORAWAN_RxDone+0x4fc>
   13356:	e0da      	b.n	1350e <LORAWAN_RxDone+0x6b2>
   13358:	0709      	lsls	r1, r1, #28
   1335a:	0f09      	lsrs	r1, r1, #28
   1335c:	187b      	adds	r3, r7, r1
   1335e:	7a1b      	ldrb	r3, [r3, #8]
   13360:	2b00      	cmp	r3, #0
   13362:	d100      	bne.n	13366 <LORAWAN_RxDone+0x50a>
   13364:	e0aa      	b.n	134bc <LORAWAN_RxDone+0x660>
   13366:	0038      	movs	r0, r7
   13368:	4b8f      	ldr	r3, [pc, #572]	; (135a8 <LORAWAN_RxDone+0x74c>)
   1336a:	3008      	adds	r0, #8
   1336c:	4798      	blx	r3
   1336e:	2301      	movs	r3, #1
   13370:	0006      	movs	r6, r0
   13372:	9307      	str	r3, [sp, #28]
   13374:	7978      	ldrb	r0, [r7, #5]
   13376:	9906      	ldr	r1, [sp, #24]
   13378:	0702      	lsls	r2, r0, #28
   1337a:	0f12      	lsrs	r2, r2, #28
   1337c:	0013      	movs	r3, r2
   1337e:	330c      	adds	r3, #12
   13380:	4299      	cmp	r1, r3
   13382:	d100      	bne.n	13386 <LORAWAN_RxDone+0x52a>
   13384:	e0fa      	b.n	1357c <LORAWAN_RxDone+0x720>
   13386:	7833      	ldrb	r3, [r6, #0]
   13388:	1a89      	subs	r1, r1, r2
   1338a:	b2c9      	uxtb	r1, r1
   1338c:	9308      	str	r3, [sp, #32]
   1338e:	000b      	movs	r3, r1
   13390:	3219      	adds	r2, #25
   13392:	3b0c      	subs	r3, #12
   13394:	4694      	mov	ip, r2
   13396:	9a08      	ldr	r2, [sp, #32]
   13398:	b2db      	uxtb	r3, r3
   1339a:	9306      	str	r3, [sp, #24]
   1339c:	1c75      	adds	r5, r6, #1
   1339e:	4b7c      	ldr	r3, [pc, #496]	; (13590 <LORAWAN_RxDone+0x734>)
   133a0:	2a00      	cmp	r2, #0
   133a2:	d100      	bne.n	133a6 <LORAWAN_RxDone+0x54a>
   133a4:	e0b6      	b.n	13514 <LORAWAN_RxDone+0x6b8>
   133a6:	681a      	ldr	r2, [r3, #0]
   133a8:	0018      	movs	r0, r3
   133aa:	791b      	ldrb	r3, [r3, #4]
   133ac:	0a14      	lsrs	r4, r2, #8
   133ae:	061b      	lsls	r3, r3, #24
   133b0:	4323      	orrs	r3, r4
   133b2:	9304      	str	r3, [sp, #16]
   133b4:	4b7d      	ldr	r3, [pc, #500]	; (135ac <LORAWAN_RxDone+0x750>)
   133b6:	2201      	movs	r2, #1
   133b8:	9303      	str	r3, [sp, #12]
   133ba:	4663      	mov	r3, ip
   133bc:	9302      	str	r3, [sp, #8]
   133be:	4b7c      	ldr	r3, [pc, #496]	; (135b0 <LORAWAN_RxDone+0x754>)
   133c0:	3008      	adds	r0, #8
   133c2:	390d      	subs	r1, #13
   133c4:	9201      	str	r2, [sp, #4]
   133c6:	9300      	str	r3, [sp, #0]
   133c8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   133ca:	b2c9      	uxtb	r1, r1
   133cc:	0028      	movs	r0, r5
   133ce:	4c79      	ldr	r4, [pc, #484]	; (135b4 <LORAWAN_RxDone+0x758>)
   133d0:	47a0      	blx	r4
   133d2:	2800      	cmp	r0, #0
   133d4:	d004      	beq.n	133e0 <LORAWAN_RxDone+0x584>
   133d6:	4b78      	ldr	r3, [pc, #480]	; (135b8 <LORAWAN_RxDone+0x75c>)
   133d8:	4798      	blx	r3
   133da:	201f      	movs	r0, #31
   133dc:	4b6f      	ldr	r3, [pc, #444]	; (1359c <LORAWAN_RxDone+0x740>)
   133de:	4798      	blx	r3
   133e0:	4c6b      	ldr	r4, [pc, #428]	; (13590 <LORAWAN_RxDone+0x734>)
   133e2:	2300      	movs	r3, #0
   133e4:	0022      	movs	r2, r4
   133e6:	32c2      	adds	r2, #194	; 0xc2
   133e8:	8013      	strh	r3, [r2, #0]
   133ea:	0022      	movs	r2, r4
   133ec:	32ed      	adds	r2, #237	; 0xed
   133ee:	7013      	strb	r3, [r2, #0]
   133f0:	0022      	movs	r2, r4
   133f2:	2110      	movs	r1, #16
   133f4:	328c      	adds	r2, #140	; 0x8c
   133f6:	7813      	ldrb	r3, [r2, #0]
   133f8:	438b      	bics	r3, r1
   133fa:	7013      	strb	r3, [r2, #0]
   133fc:	0023      	movs	r3, r4
   133fe:	2201      	movs	r2, #1
   13400:	337c      	adds	r3, #124	; 0x7c
   13402:	7859      	ldrb	r1, [r3, #1]
   13404:	430a      	orrs	r2, r1
   13406:	705a      	strb	r2, [r3, #1]
   13408:	220e      	movs	r2, #14
   1340a:	781b      	ldrb	r3, [r3, #0]
   1340c:	4013      	ands	r3, r2
   1340e:	2b06      	cmp	r3, #6
   13410:	d109      	bne.n	13426 <LORAWAN_RxDone+0x5ca>
   13412:	0023      	movs	r3, r4
   13414:	33f4      	adds	r3, #244	; 0xf4
   13416:	781b      	ldrb	r3, [r3, #0]
   13418:	2b01      	cmp	r3, #1
   1341a:	d104      	bne.n	13426 <LORAWAN_RxDone+0x5ca>
   1341c:	0023      	movs	r3, r4
   1341e:	33e5      	adds	r3, #229	; 0xe5
   13420:	7818      	ldrb	r0, [r3, #0]
   13422:	4b66      	ldr	r3, [pc, #408]	; (135bc <LORAWAN_RxDone+0x760>)
   13424:	4798      	blx	r3
   13426:	0025      	movs	r5, r4
   13428:	2201      	movs	r2, #1
   1342a:	358c      	adds	r5, #140	; 0x8c
   1342c:	782b      	ldrb	r3, [r5, #0]
   1342e:	4213      	tst	r3, r2
   13430:	d100      	bne.n	13434 <LORAWAN_RxDone+0x5d8>
   13432:	e10f      	b.n	13654 <LORAWAN_RxDone+0x7f8>
   13434:	797b      	ldrb	r3, [r7, #5]
   13436:	321f      	adds	r2, #31
   13438:	4213      	tst	r3, r2
   1343a:	d100      	bne.n	1343e <LORAWAN_RxDone+0x5e2>
   1343c:	e0f0      	b.n	13620 <LORAWAN_RxDone+0x7c4>
   1343e:	4b60      	ldr	r3, [pc, #384]	; (135c0 <LORAWAN_RxDone+0x764>)
   13440:	4798      	blx	r3
   13442:	0023      	movs	r3, r4
   13444:	2101      	movs	r1, #1
   13446:	337c      	adds	r3, #124	; 0x7c
   13448:	785a      	ldrb	r2, [r3, #1]
   1344a:	438a      	bics	r2, r1
   1344c:	705a      	strb	r2, [r3, #1]
   1344e:	9a08      	ldr	r2, [sp, #32]
   13450:	2a00      	cmp	r2, #0
   13452:	d100      	bne.n	13456 <LORAWAN_RxDone+0x5fa>
   13454:	e0c4      	b.n	135e0 <LORAWAN_RxDone+0x784>
   13456:	9a06      	ldr	r2, [sp, #24]
   13458:	0031      	movs	r1, r6
   1345a:	0038      	movs	r0, r7
   1345c:	4b59      	ldr	r3, [pc, #356]	; (135c4 <LORAWAN_RxDone+0x768>)
   1345e:	4798      	blx	r3
   13460:	4b4d      	ldr	r3, [pc, #308]	; (13598 <LORAWAN_RxDone+0x73c>)
   13462:	4d4b      	ldr	r5, [pc, #300]	; (13590 <LORAWAN_RxDone+0x734>)
   13464:	781b      	ldrb	r3, [r3, #0]
   13466:	06db      	lsls	r3, r3, #27
   13468:	d400      	bmi.n	1346c <LORAWAN_RxDone+0x610>
   1346a:	e168      	b.n	1373e <LORAWAN_RxDone+0x8e2>
   1346c:	2220      	movs	r2, #32
   1346e:	4b56      	ldr	r3, [pc, #344]	; (135c8 <LORAWAN_RxDone+0x76c>)
   13470:	781b      	ldrb	r3, [r3, #0]
   13472:	401a      	ands	r2, r3
   13474:	9206      	str	r2, [sp, #24]
   13476:	d000      	beq.n	1347a <LORAWAN_RxDone+0x61e>
   13478:	e161      	b.n	1373e <LORAWAN_RxDone+0x8e2>
   1347a:	320a      	adds	r2, #10
   1347c:	4213      	tst	r3, r2
   1347e:	d100      	bne.n	13482 <LORAWAN_RxDone+0x626>
   13480:	e15d      	b.n	1373e <LORAWAN_RxDone+0x8e2>
   13482:	002b      	movs	r3, r5
   13484:	33ec      	adds	r3, #236	; 0xec
   13486:	781b      	ldrb	r3, [r3, #0]
   13488:	a90f      	add	r1, sp, #60	; 0x3c
   1348a:	704b      	strb	r3, [r1, #1]
   1348c:	002e      	movs	r6, r5
   1348e:	2301      	movs	r3, #1
   13490:	36df      	adds	r6, #223	; 0xdf
   13492:	700b      	strb	r3, [r1, #0]
   13494:	7833      	ldrb	r3, [r6, #0]
   13496:	aa0e      	add	r2, sp, #56	; 0x38
   13498:	2030      	movs	r0, #48	; 0x30
   1349a:	4f4c      	ldr	r7, [pc, #304]	; (135cc <LORAWAN_RxDone+0x770>)
   1349c:	708b      	strb	r3, [r1, #2]
   1349e:	47b8      	blx	r7
   134a0:	9007      	str	r0, [sp, #28]
   134a2:	2808      	cmp	r0, #8
   134a4:	d000      	beq.n	134a8 <LORAWAN_RxDone+0x64c>
   134a6:	e103      	b.n	136b0 <LORAWAN_RxDone+0x854>
   134a8:	4b49      	ldr	r3, [pc, #292]	; (135d0 <LORAWAN_RxDone+0x774>)
   134aa:	9806      	ldr	r0, [sp, #24]
   134ac:	4798      	blx	r3
   134ae:	4b46      	ldr	r3, [pc, #280]	; (135c8 <LORAWAN_RxDone+0x76c>)
   134b0:	9a07      	ldr	r2, [sp, #28]
   134b2:	781b      	ldrb	r3, [r3, #0]
   134b4:	4393      	bics	r3, r2
   134b6:	4a44      	ldr	r2, [pc, #272]	; (135c8 <LORAWAN_RxDone+0x76c>)
   134b8:	7013      	strb	r3, [r2, #0]
   134ba:	e717      	b.n	132ec <LORAWAN_RxDone+0x490>
   134bc:	0023      	movs	r3, r4
   134be:	33f4      	adds	r3, #244	; 0xf4
   134c0:	781b      	ldrb	r3, [r3, #0]
   134c2:	2b01      	cmp	r3, #1
   134c4:	d108      	bne.n	134d8 <LORAWAN_RxDone+0x67c>
   134c6:	0023      	movs	r3, r4
   134c8:	220e      	movs	r2, #14
   134ca:	337c      	adds	r3, #124	; 0x7c
   134cc:	781b      	ldrb	r3, [r3, #0]
   134ce:	4013      	ands	r3, r2
   134d0:	2b06      	cmp	r3, #6
   134d2:	d101      	bne.n	134d8 <LORAWAN_RxDone+0x67c>
   134d4:	4b3f      	ldr	r3, [pc, #252]	; (135d4 <LORAWAN_RxDone+0x778>)
   134d6:	4798      	blx	r3
   134d8:	493f      	ldr	r1, [pc, #252]	; (135d8 <LORAWAN_RxDone+0x77c>)
   134da:	784a      	ldrb	r2, [r1, #1]
   134dc:	780b      	ldrb	r3, [r1, #0]
   134de:	0212      	lsls	r2, r2, #8
   134e0:	431a      	orrs	r2, r3
   134e2:	788b      	ldrb	r3, [r1, #2]
   134e4:	041b      	lsls	r3, r3, #16
   134e6:	431a      	orrs	r2, r3
   134e8:	78cb      	ldrb	r3, [r1, #3]
   134ea:	061b      	lsls	r3, r3, #24
   134ec:	4313      	orrs	r3, r2
   134ee:	d008      	beq.n	13502 <LORAWAN_RxDone+0x6a6>
   134f0:	0022      	movs	r2, r4
   134f2:	2120      	movs	r1, #32
   134f4:	328c      	adds	r2, #140	; 0x8c
   134f6:	7813      	ldrb	r3, [r2, #0]
   134f8:	201e      	movs	r0, #30
   134fa:	438b      	bics	r3, r1
   134fc:	7013      	strb	r3, [r2, #0]
   134fe:	4b27      	ldr	r3, [pc, #156]	; (1359c <LORAWAN_RxDone+0x740>)
   13500:	4798      	blx	r3
   13502:	2300      	movs	r3, #0
   13504:	34d8      	adds	r4, #216	; 0xd8
   13506:	7023      	strb	r3, [r4, #0]
   13508:	4b2b      	ldr	r3, [pc, #172]	; (135b8 <LORAWAN_RxDone+0x75c>)
   1350a:	4798      	blx	r3
   1350c:	e6ee      	b.n	132ec <LORAWAN_RxDone+0x490>
   1350e:	003e      	movs	r6, r7
   13510:	3608      	adds	r6, #8
   13512:	e72f      	b.n	13374 <LORAWAN_RxDone+0x518>
   13514:	9a06      	ldr	r2, [sp, #24]
   13516:	2a00      	cmp	r2, #0
   13518:	d034      	beq.n	13584 <LORAWAN_RxDone+0x728>
   1351a:	0702      	lsls	r2, r0, #28
   1351c:	d128      	bne.n	13570 <LORAWAN_RxDone+0x714>
   1351e:	390d      	subs	r1, #13
   13520:	681a      	ldr	r2, [r3, #0]
   13522:	b2cc      	uxtb	r4, r1
   13524:	0019      	movs	r1, r3
   13526:	791b      	ldrb	r3, [r3, #4]
   13528:	0a10      	lsrs	r0, r2, #8
   1352a:	061b      	lsls	r3, r3, #24
   1352c:	4303      	orrs	r3, r0
   1352e:	9304      	str	r3, [sp, #16]
   13530:	4b1e      	ldr	r3, [pc, #120]	; (135ac <LORAWAN_RxDone+0x750>)
   13532:	3108      	adds	r1, #8
   13534:	9303      	str	r3, [sp, #12]
   13536:	4663      	mov	r3, ip
   13538:	9302      	str	r3, [sp, #8]
   1353a:	2302      	movs	r3, #2
   1353c:	9301      	str	r3, [sp, #4]
   1353e:	4b27      	ldr	r3, [pc, #156]	; (135dc <LORAWAN_RxDone+0x780>)
   13540:	2201      	movs	r2, #1
   13542:	9300      	str	r3, [sp, #0]
   13544:	6fcb      	ldr	r3, [r1, #124]	; 0x7c
   13546:	0028      	movs	r0, r5
   13548:	0021      	movs	r1, r4
   1354a:	4e1a      	ldr	r6, [pc, #104]	; (135b4 <LORAWAN_RxDone+0x758>)
   1354c:	47b0      	blx	r6
   1354e:	2800      	cmp	r0, #0
   13550:	d004      	beq.n	1355c <LORAWAN_RxDone+0x700>
   13552:	4b19      	ldr	r3, [pc, #100]	; (135b8 <LORAWAN_RxDone+0x75c>)
   13554:	4798      	blx	r3
   13556:	201f      	movs	r0, #31
   13558:	4b10      	ldr	r3, [pc, #64]	; (1359c <LORAWAN_RxDone+0x740>)
   1355a:	4798      	blx	r3
   1355c:	4b12      	ldr	r3, [pc, #72]	; (135a8 <LORAWAN_RxDone+0x74c>)
   1355e:	0021      	movs	r1, r4
   13560:	0028      	movs	r0, r5
   13562:	4798      	blx	r3
   13564:	2300      	movs	r3, #0
   13566:	9306      	str	r3, [sp, #24]
   13568:	3301      	adds	r3, #1
   1356a:	9307      	str	r3, [sp, #28]
   1356c:	2600      	movs	r6, #0
   1356e:	e737      	b.n	133e0 <LORAWAN_RxDone+0x584>
   13570:	001a      	movs	r2, r3
   13572:	32f4      	adds	r2, #244	; 0xf4
   13574:	7812      	ldrb	r2, [r2, #0]
   13576:	2a01      	cmp	r2, #1
   13578:	d1ae      	bne.n	134d8 <LORAWAN_RxDone+0x67c>
   1357a:	e7a5      	b.n	134c8 <LORAWAN_RxDone+0x66c>
   1357c:	2600      	movs	r6, #0
   1357e:	9608      	str	r6, [sp, #32]
   13580:	9606      	str	r6, [sp, #24]
   13582:	e72d      	b.n	133e0 <LORAWAN_RxDone+0x584>
   13584:	9b06      	ldr	r3, [sp, #24]
   13586:	9308      	str	r3, [sp, #32]
   13588:	001e      	movs	r6, r3
   1358a:	e729      	b.n	133e0 <LORAWAN_RxDone+0x584>
   1358c:	00014441 	.word	0x00014441
   13590:	20002b5c 	.word	0x20002b5c
   13594:	00010199 	.word	0x00010199
   13598:	20002bd8 	.word	0x20002bd8
   1359c:	00011421 	.word	0x00011421
   135a0:	000144b5 	.word	0x000144b5
   135a4:	0000e071 	.word	0x0000e071
   135a8:	00012ba5 	.word	0x00012ba5
   135ac:	20002eac 	.word	0x20002eac
   135b0:	20002b91 	.word	0x20002b91
   135b4:	00011361 	.word	0x00011361
   135b8:	000127f5 	.word	0x000127f5
   135bc:	0000f0b9 	.word	0x0000f0b9
   135c0:	000108c5 	.word	0x000108c5
   135c4:	00011811 	.word	0x00011811
   135c8:	20002be8 	.word	0x20002be8
   135cc:	0000d895 	.word	0x0000d895
   135d0:	000104d9 	.word	0x000104d9
   135d4:	00010231 	.word	0x00010231
   135d8:	20002ea4 	.word	0x20002ea4
   135dc:	20002b81 	.word	0x20002b81
   135e0:	2120      	movs	r1, #32
   135e2:	782a      	ldrb	r2, [r5, #0]
   135e4:	438a      	bics	r2, r1
   135e6:	702a      	strb	r2, [r5, #0]
   135e8:	0022      	movs	r2, r4
   135ea:	32f4      	adds	r2, #244	; 0xf4
   135ec:	7812      	ldrb	r2, [r2, #0]
   135ee:	2a01      	cmp	r2, #1
   135f0:	d10e      	bne.n	13610 <LORAWAN_RxDone+0x7b4>
   135f2:	781a      	ldrb	r2, [r3, #0]
   135f4:	3912      	subs	r1, #18
   135f6:	438a      	bics	r2, r1
   135f8:	701a      	strb	r2, [r3, #0]
   135fa:	2385      	movs	r3, #133	; 0x85
   135fc:	4aa7      	ldr	r2, [pc, #668]	; (1389c <LORAWAN_RxDone+0xa40>)
   135fe:	009b      	lsls	r3, r3, #2
   13600:	5cd3      	ldrb	r3, [r2, r3]
   13602:	2b00      	cmp	r3, #0
   13604:	d000      	beq.n	13608 <LORAWAN_RxDone+0x7ac>
   13606:	e72b      	b.n	13460 <LORAWAN_RxDone+0x604>
   13608:	2008      	movs	r0, #8
   1360a:	4ba5      	ldr	r3, [pc, #660]	; (138a0 <LORAWAN_RxDone+0xa44>)
   1360c:	4798      	blx	r3
   1360e:	e727      	b.n	13460 <LORAWAN_RxDone+0x604>
   13610:	2a04      	cmp	r2, #4
   13612:	d1f2      	bne.n	135fa <LORAWAN_RxDone+0x79e>
   13614:	0023      	movs	r3, r4
   13616:	33e8      	adds	r3, #232	; 0xe8
   13618:	7818      	ldrb	r0, [r3, #0]
   1361a:	4ba2      	ldr	r3, [pc, #648]	; (138a4 <LORAWAN_RxDone+0xa48>)
   1361c:	4798      	blx	r3
   1361e:	e7ec      	b.n	135fa <LORAWAN_RxDone+0x79e>
   13620:	9b07      	ldr	r3, [sp, #28]
   13622:	2b00      	cmp	r3, #0
   13624:	d013      	beq.n	1364e <LORAWAN_RxDone+0x7f2>
   13626:	0023      	movs	r3, r4
   13628:	33f4      	adds	r3, #244	; 0xf4
   1362a:	781e      	ldrb	r6, [r3, #0]
   1362c:	2e01      	cmp	r6, #1
   1362e:	d10e      	bne.n	1364e <LORAWAN_RxDone+0x7f2>
   13630:	4b9d      	ldr	r3, [pc, #628]	; (138a8 <LORAWAN_RxDone+0xa4c>)
   13632:	4798      	blx	r3
   13634:	0022      	movs	r2, r4
   13636:	327c      	adds	r2, #124	; 0x7c
   13638:	7853      	ldrb	r3, [r2, #1]
   1363a:	43b3      	bics	r3, r6
   1363c:	7053      	strb	r3, [r2, #1]
   1363e:	2220      	movs	r2, #32
   13640:	782b      	ldrb	r3, [r5, #0]
   13642:	4393      	bics	r3, r2
   13644:	702b      	strb	r3, [r5, #0]
   13646:	2385      	movs	r3, #133	; 0x85
   13648:	009b      	lsls	r3, r3, #2
   1364a:	5ce3      	ldrb	r3, [r4, r3]
   1364c:	e7d9      	b.n	13602 <LORAWAN_RxDone+0x7a6>
   1364e:	4b97      	ldr	r3, [pc, #604]	; (138ac <LORAWAN_RxDone+0xa50>)
   13650:	4798      	blx	r3
   13652:	e705      	b.n	13460 <LORAWAN_RxDone+0x604>
   13654:	9a08      	ldr	r2, [sp, #32]
   13656:	2a00      	cmp	r2, #0
   13658:	d00b      	beq.n	13672 <LORAWAN_RxDone+0x816>
   1365a:	9a06      	ldr	r2, [sp, #24]
   1365c:	0031      	movs	r1, r6
   1365e:	0038      	movs	r0, r7
   13660:	4b93      	ldr	r3, [pc, #588]	; (138b0 <LORAWAN_RxDone+0xa54>)
   13662:	4798      	blx	r3
   13664:	0022      	movs	r2, r4
   13666:	2101      	movs	r1, #1
   13668:	327c      	adds	r2, #124	; 0x7c
   1366a:	7853      	ldrb	r3, [r2, #1]
   1366c:	438b      	bics	r3, r1
   1366e:	7053      	strb	r3, [r2, #1]
   13670:	e6f6      	b.n	13460 <LORAWAN_RxDone+0x604>
   13672:	2220      	movs	r2, #32
   13674:	4393      	bics	r3, r2
   13676:	702b      	strb	r3, [r5, #0]
   13678:	0023      	movs	r3, r4
   1367a:	33f4      	adds	r3, #244	; 0xf4
   1367c:	781b      	ldrb	r3, [r3, #0]
   1367e:	2b01      	cmp	r3, #1
   13680:	d10e      	bne.n	136a0 <LORAWAN_RxDone+0x844>
   13682:	0022      	movs	r2, r4
   13684:	210e      	movs	r1, #14
   13686:	327c      	adds	r2, #124	; 0x7c
   13688:	7813      	ldrb	r3, [r2, #0]
   1368a:	438b      	bics	r3, r1
   1368c:	7013      	strb	r3, [r2, #0]
   1368e:	2385      	movs	r3, #133	; 0x85
   13690:	009b      	lsls	r3, r3, #2
   13692:	5ce3      	ldrb	r3, [r4, r3]
   13694:	2b00      	cmp	r3, #0
   13696:	d1e5      	bne.n	13664 <LORAWAN_RxDone+0x808>
   13698:	2008      	movs	r0, #8
   1369a:	4b81      	ldr	r3, [pc, #516]	; (138a0 <LORAWAN_RxDone+0xa44>)
   1369c:	4798      	blx	r3
   1369e:	e7e1      	b.n	13664 <LORAWAN_RxDone+0x808>
   136a0:	2b04      	cmp	r3, #4
   136a2:	d1f4      	bne.n	1368e <LORAWAN_RxDone+0x832>
   136a4:	0023      	movs	r3, r4
   136a6:	33e8      	adds	r3, #232	; 0xe8
   136a8:	7818      	ldrb	r0, [r3, #0]
   136aa:	4b7e      	ldr	r3, [pc, #504]	; (138a4 <LORAWAN_RxDone+0xa48>)
   136ac:	4798      	blx	r3
   136ae:	e7ee      	b.n	1368e <LORAWAN_RxDone+0x832>
   136b0:	35ff      	adds	r5, #255	; 0xff
   136b2:	7c6b      	ldrb	r3, [r5, #17]
   136b4:	079a      	lsls	r2, r3, #30
   136b6:	d520      	bpl.n	136fa <LORAWAN_RxDone+0x89e>
   136b8:	aa10      	add	r2, sp, #64	; 0x40
   136ba:	0031      	movs	r1, r6
   136bc:	2026      	movs	r0, #38	; 0x26
   136be:	47b8      	blx	r7
   136c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   136c2:	1c5a      	adds	r2, r3, #1
   136c4:	d001      	beq.n	136ca <LORAWAN_RxDone+0x86e>
   136c6:	3314      	adds	r3, #20
   136c8:	9310      	str	r3, [sp, #64]	; 0x40
   136ca:	0021      	movs	r1, r4
   136cc:	220e      	movs	r2, #14
   136ce:	317c      	adds	r1, #124	; 0x7c
   136d0:	780b      	ldrb	r3, [r1, #0]
   136d2:	4393      	bics	r3, r2
   136d4:	001a      	movs	r2, r3
   136d6:	230c      	movs	r3, #12
   136d8:	4313      	orrs	r3, r2
   136da:	700b      	strb	r3, [r1, #0]
   136dc:	4b75      	ldr	r3, [pc, #468]	; (138b4 <LORAWAN_RxDone+0xa58>)
   136de:	9a10      	ldr	r2, [sp, #64]	; 0x40
   136e0:	5ce3      	ldrb	r3, [r4, r3]
   136e2:	21fa      	movs	r1, #250	; 0xfa
   136e4:	1ad3      	subs	r3, r2, r3
   136e6:	2200      	movs	r2, #0
   136e8:	0089      	lsls	r1, r1, #2
   136ea:	4359      	muls	r1, r3
   136ec:	34e6      	adds	r4, #230	; 0xe6
   136ee:	4b72      	ldr	r3, [pc, #456]	; (138b8 <LORAWAN_RxDone+0xa5c>)
   136f0:	7820      	ldrb	r0, [r4, #0]
   136f2:	9200      	str	r2, [sp, #0]
   136f4:	4c71      	ldr	r4, [pc, #452]	; (138bc <LORAWAN_RxDone+0xa60>)
   136f6:	47a0      	blx	r4
   136f8:	e5f8      	b.n	132ec <LORAWAN_RxDone+0x490>
   136fa:	075b      	lsls	r3, r3, #29
   136fc:	d400      	bmi.n	13700 <LORAWAN_RxDone+0x8a4>
   136fe:	e5f5      	b.n	132ec <LORAWAN_RxDone+0x490>
   13700:	aa10      	add	r2, sp, #64	; 0x40
   13702:	0031      	movs	r1, r6
   13704:	2033      	movs	r0, #51	; 0x33
   13706:	47b8      	blx	r7
   13708:	220e      	movs	r2, #14
   1370a:	4b6d      	ldr	r3, [pc, #436]	; (138c0 <LORAWAN_RxDone+0xa64>)
   1370c:	781b      	ldrb	r3, [r3, #0]
   1370e:	4393      	bics	r3, r2
   13710:	001a      	movs	r2, r3
   13712:	230c      	movs	r3, #12
   13714:	4313      	orrs	r3, r2
   13716:	4a6a      	ldr	r2, [pc, #424]	; (138c0 <LORAWAN_RxDone+0xa64>)
   13718:	7013      	strb	r3, [r2, #0]
   1371a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1371c:	1c5a      	adds	r2, r3, #1
   1371e:	d001      	beq.n	13724 <LORAWAN_RxDone+0x8c8>
   13720:	3301      	adds	r3, #1
   13722:	9310      	str	r3, [sp, #64]	; 0x40
   13724:	4b63      	ldr	r3, [pc, #396]	; (138b4 <LORAWAN_RxDone+0xa58>)
   13726:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13728:	5ce3      	ldrb	r3, [r4, r3]
   1372a:	21fa      	movs	r1, #250	; 0xfa
   1372c:	1ad3      	subs	r3, r2, r3
   1372e:	2200      	movs	r2, #0
   13730:	0089      	lsls	r1, r1, #2
   13732:	34e9      	adds	r4, #233	; 0xe9
   13734:	4359      	muls	r1, r3
   13736:	7820      	ldrb	r0, [r4, #0]
   13738:	4b62      	ldr	r3, [pc, #392]	; (138c4 <LORAWAN_RxDone+0xa68>)
   1373a:	9200      	str	r2, [sp, #0]
   1373c:	e7da      	b.n	136f4 <LORAWAN_RxDone+0x898>
   1373e:	35f4      	adds	r5, #244	; 0xf4
   13740:	782b      	ldrb	r3, [r5, #0]
   13742:	2b04      	cmp	r3, #4
   13744:	d000      	beq.n	13748 <LORAWAN_RxDone+0x8ec>
   13746:	e5d1      	b.n	132ec <LORAWAN_RxDone+0x490>
   13748:	0038      	movs	r0, r7
   1374a:	4b5f      	ldr	r3, [pc, #380]	; (138c8 <LORAWAN_RxDone+0xa6c>)
   1374c:	4798      	blx	r3
   1374e:	e5cd      	b.n	132ec <LORAWAN_RxDone+0x490>
   13750:	220e      	movs	r2, #14
   13752:	4013      	ands	r3, r2
   13754:	2b0a      	cmp	r3, #10
   13756:	d008      	beq.n	1376a <LORAWAN_RxDone+0x90e>
   13758:	2b06      	cmp	r3, #6
   1375a:	d000      	beq.n	1375e <LORAWAN_RxDone+0x902>
   1375c:	e5a4      	b.n	132a8 <LORAWAN_RxDone+0x44c>
   1375e:	0023      	movs	r3, r4
   13760:	33f0      	adds	r3, #240	; 0xf0
   13762:	781b      	ldrb	r3, [r3, #0]
   13764:	2b00      	cmp	r3, #0
   13766:	d100      	bne.n	1376a <LORAWAN_RxDone+0x90e>
   13768:	e59e      	b.n	132a8 <LORAWAN_RxDone+0x44c>
   1376a:	2220      	movs	r2, #32
   1376c:	348c      	adds	r4, #140	; 0x8c
   1376e:	7823      	ldrb	r3, [r4, #0]
   13770:	2019      	movs	r0, #25
   13772:	4393      	bics	r3, r2
   13774:	7023      	strb	r3, [r4, #0]
   13776:	e5a4      	b.n	132c2 <LORAWAN_RxDone+0x466>
   13778:	4954      	ldr	r1, [pc, #336]	; (138cc <LORAWAN_RxDone+0xa70>)
   1377a:	784a      	ldrb	r2, [r1, #1]
   1377c:	780b      	ldrb	r3, [r1, #0]
   1377e:	0212      	lsls	r2, r2, #8
   13780:	431a      	orrs	r2, r3
   13782:	788b      	ldrb	r3, [r1, #2]
   13784:	041b      	lsls	r3, r3, #16
   13786:	431a      	orrs	r2, r3
   13788:	78cb      	ldrb	r3, [r1, #3]
   1378a:	061b      	lsls	r3, r3, #24
   1378c:	4313      	orrs	r3, r2
   1378e:	d100      	bne.n	13792 <LORAWAN_RxDone+0x936>
   13790:	e5ac      	b.n	132ec <LORAWAN_RxDone+0x490>
   13792:	4b4f      	ldr	r3, [pc, #316]	; (138d0 <LORAWAN_RxDone+0xa74>)
   13794:	4c4f      	ldr	r4, [pc, #316]	; (138d4 <LORAWAN_RxDone+0xa78>)
   13796:	781b      	ldrb	r3, [r3, #0]
   13798:	2b10      	cmp	r3, #16
   1379a:	d105      	bne.n	137a8 <LORAWAN_RxDone+0x94c>
   1379c:	0001      	movs	r1, r0
   1379e:	2000      	movs	r0, #0
   137a0:	9a06      	ldr	r2, [sp, #24]
   137a2:	3b0c      	subs	r3, #12
   137a4:	47a0      	blx	r4
   137a6:	e5a1      	b.n	132ec <LORAWAN_RxDone+0x490>
   137a8:	2300      	movs	r3, #0
   137aa:	0001      	movs	r1, r0
   137ac:	9a06      	ldr	r2, [sp, #24]
   137ae:	0018      	movs	r0, r3
   137b0:	e7f8      	b.n	137a4 <LORAWAN_RxDone+0x948>
   137b2:	3408      	adds	r4, #8
   137b4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   137b6:	0031      	movs	r1, r6
   137b8:	9308      	str	r3, [sp, #32]
   137ba:	4b47      	ldr	r3, [pc, #284]	; (138d8 <LORAWAN_RxDone+0xa7c>)
   137bc:	4798      	blx	r3
   137be:	2808      	cmp	r0, #8
   137c0:	d001      	beq.n	137c6 <LORAWAN_RxDone+0x96a>
   137c2:	f7ff fbaf 	bl	12f24 <LORAWAN_RxDone+0xc8>
   137c6:	9b06      	ldr	r3, [sp, #24]
   137c8:	0028      	movs	r0, r5
   137ca:	1f1a      	subs	r2, r3, #4
   137cc:	9b07      	ldr	r3, [sp, #28]
   137ce:	b2d2      	uxtb	r2, r2
   137d0:	9300      	str	r3, [sp, #0]
   137d2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   137d4:	2349      	movs	r3, #73	; 0x49
   137d6:	4c41      	ldr	r4, [pc, #260]	; (138dc <LORAWAN_RxDone+0xa80>)
   137d8:	47a0      	blx	r4
   137da:	4d41      	ldr	r5, [pc, #260]	; (138e0 <LORAWAN_RxDone+0xa84>)
   137dc:	9607      	str	r6, [sp, #28]
   137de:	4e41      	ldr	r6, [pc, #260]	; (138e4 <LORAWAN_RxDone+0xa88>)
   137e0:	4c41      	ldr	r4, [pc, #260]	; (138e8 <LORAWAN_RxDone+0xa8c>)
   137e2:	2210      	movs	r2, #16
   137e4:	0021      	movs	r1, r4
   137e6:	4b41      	ldr	r3, [pc, #260]	; (138ec <LORAWAN_RxDone+0xa90>)
   137e8:	0030      	movs	r0, r6
   137ea:	4798      	blx	r3
   137ec:	9b06      	ldr	r3, [sp, #24]
   137ee:	0039      	movs	r1, r7
   137f0:	3b04      	subs	r3, #4
   137f2:	001a      	movs	r2, r3
   137f4:	9309      	str	r3, [sp, #36]	; 0x24
   137f6:	483e      	ldr	r0, [pc, #248]	; (138f0 <LORAWAN_RxDone+0xa94>)
   137f8:	4b3c      	ldr	r3, [pc, #240]	; (138ec <LORAWAN_RxDone+0xa90>)
   137fa:	4798      	blx	r3
   137fc:	9b06      	ldr	r3, [sp, #24]
   137fe:	9a07      	ldr	r2, [sp, #28]
   13800:	330c      	adds	r3, #12
   13802:	b29b      	uxth	r3, r3
   13804:	9300      	str	r3, [sp, #0]
   13806:	0033      	movs	r3, r6
   13808:	2a00      	cmp	r2, #0
   1380a:	d100      	bne.n	1380e <LORAWAN_RxDone+0x9b2>
   1380c:	e55b      	b.n	132c6 <LORAWAN_RxDone+0x46a>
   1380e:	0022      	movs	r2, r4
   13810:	2104      	movs	r1, #4
   13812:	4c38      	ldr	r4, [pc, #224]	; (138f4 <LORAWAN_RxDone+0xa98>)
   13814:	0028      	movs	r0, r5
   13816:	47a0      	blx	r4
   13818:	2204      	movs	r2, #4
   1381a:	4933      	ldr	r1, [pc, #204]	; (138e8 <LORAWAN_RxDone+0xa8c>)
   1381c:	4c33      	ldr	r4, [pc, #204]	; (138ec <LORAWAN_RxDone+0xa90>)
   1381e:	a80d      	add	r0, sp, #52	; 0x34
   13820:	47a0      	blx	r4
   13822:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13824:	2204      	movs	r2, #4
   13826:	18f9      	adds	r1, r7, r3
   13828:	a810      	add	r0, sp, #64	; 0x40
   1382a:	47a0      	blx	r4
   1382c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1382e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13830:	4293      	cmp	r3, r2
   13832:	d100      	bne.n	13836 <LORAWAN_RxDone+0x9da>
   13834:	e54e      	b.n	132d4 <LORAWAN_RxDone+0x478>
   13836:	4c19      	ldr	r4, [pc, #100]	; (1389c <LORAWAN_RxDone+0xa40>)
   13838:	0023      	movs	r3, r4
   1383a:	33f4      	adds	r3, #244	; 0xf4
   1383c:	781b      	ldrb	r3, [r3, #0]
   1383e:	2b01      	cmp	r3, #1
   13840:	d108      	bne.n	13854 <LORAWAN_RxDone+0x9f8>
   13842:	0023      	movs	r3, r4
   13844:	220e      	movs	r2, #14
   13846:	337c      	adds	r3, #124	; 0x7c
   13848:	781b      	ldrb	r3, [r3, #0]
   1384a:	4013      	ands	r3, r2
   1384c:	2b06      	cmp	r3, #6
   1384e:	d101      	bne.n	13854 <LORAWAN_RxDone+0x9f8>
   13850:	4b29      	ldr	r3, [pc, #164]	; (138f8 <LORAWAN_RxDone+0xa9c>)
   13852:	4798      	blx	r3
   13854:	491d      	ldr	r1, [pc, #116]	; (138cc <LORAWAN_RxDone+0xa70>)
   13856:	784a      	ldrb	r2, [r1, #1]
   13858:	780b      	ldrb	r3, [r1, #0]
   1385a:	0212      	lsls	r2, r2, #8
   1385c:	431a      	orrs	r2, r3
   1385e:	788b      	ldrb	r3, [r1, #2]
   13860:	041b      	lsls	r3, r3, #16
   13862:	431a      	orrs	r2, r3
   13864:	78cb      	ldrb	r3, [r1, #3]
   13866:	061b      	lsls	r3, r3, #24
   13868:	4313      	orrs	r3, r2
   1386a:	d101      	bne.n	13870 <LORAWAN_RxDone+0xa14>
   1386c:	f7ff fb48 	bl	12f00 <LORAWAN_RxDone+0xa4>
   13870:	0022      	movs	r2, r4
   13872:	2120      	movs	r1, #32
   13874:	328c      	adds	r2, #140	; 0x8c
   13876:	7813      	ldrb	r3, [r2, #0]
   13878:	438b      	bics	r3, r1
   1387a:	7013      	strb	r3, [r2, #0]
   1387c:	9b07      	ldr	r3, [sp, #28]
   1387e:	2b00      	cmp	r3, #0
   13880:	d100      	bne.n	13884 <LORAWAN_RxDone+0xa28>
   13882:	e523      	b.n	132cc <LORAWAN_RxDone+0x470>
   13884:	2322      	movs	r3, #34	; 0x22
   13886:	aa04      	add	r2, sp, #16
   13888:	189b      	adds	r3, r3, r2
   1388a:	781a      	ldrb	r2, [r3, #0]
   1388c:	233c      	movs	r3, #60	; 0x3c
   1388e:	4353      	muls	r3, r2
   13890:	18e4      	adds	r4, r4, r3
   13892:	9b08      	ldr	r3, [sp, #32]
   13894:	34fc      	adds	r4, #252	; 0xfc
   13896:	64e3      	str	r3, [r4, #76]	; 0x4c
   13898:	2018      	movs	r0, #24
   1389a:	e512      	b.n	132c2 <LORAWAN_RxDone+0x466>
   1389c:	20002b5c 	.word	0x20002b5c
   138a0:	00011421 	.word	0x00011421
   138a4:	0000f0b9 	.word	0x0000f0b9
   138a8:	000108c5 	.word	0x000108c5
   138ac:	0001084d 	.word	0x0001084d
   138b0:	00011811 	.word	0x00011811
   138b4:	0000021f 	.word	0x0000021f
   138b8:	000105d1 	.word	0x000105d1
   138bc:	0000eda1 	.word	0x0000eda1
   138c0:	20002bd8 	.word	0x20002bd8
   138c4:	00011121 	.word	0x00011121
   138c8:	00014225 	.word	0x00014225
   138cc:	20002ea4 	.word	0x20002ea4
   138d0:	20002d90 	.word	0x20002d90
   138d4:	000117c5 	.word	0x000117c5
   138d8:	00012875 	.word	0x00012875
   138dc:	00010199 	.word	0x00010199
   138e0:	20002b81 	.word	0x20002b81
   138e4:	20002eac 	.word	0x20002eac
   138e8:	20001110 	.word	0x20001110
   138ec:	00019d1d 	.word	0x00019d1d
   138f0:	20002ebc 	.word	0x20002ebc
   138f4:	0000dd7d 	.word	0x0000dd7d
   138f8:	00010231 	.word	0x00010231

000138fc <LorawanSetEdClass>:
   138fc:	2385      	movs	r3, #133	; 0x85
   138fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13900:	4d19      	ldr	r5, [pc, #100]	; (13968 <LorawanSetEdClass+0x6c>)
   13902:	009b      	lsls	r3, r3, #2
   13904:	5ceb      	ldrb	r3, [r5, r3]
   13906:	0004      	movs	r4, r0
   13908:	2011      	movs	r0, #17
   1390a:	2b00      	cmp	r3, #0
   1390c:	d013      	beq.n	13936 <LorawanSetEdClass+0x3a>
   1390e:	002b      	movs	r3, r5
   13910:	33f5      	adds	r3, #245	; 0xf5
   13912:	781b      	ldrb	r3, [r3, #0]
   13914:	3807      	subs	r0, #7
   13916:	4223      	tst	r3, r4
   13918:	d00d      	beq.n	13936 <LorawanSetEdClass+0x3a>
   1391a:	002b      	movs	r3, r5
   1391c:	33f4      	adds	r3, #244	; 0xf4
   1391e:	7819      	ldrb	r1, [r3, #0]
   13920:	428c      	cmp	r4, r1
   13922:	d007      	beq.n	13934 <LorawanSetEdClass+0x38>
   13924:	2901      	cmp	r1, #1
   13926:	d107      	bne.n	13938 <LorawanSetEdClass+0x3c>
   13928:	2c04      	cmp	r4, #4
   1392a:	d104      	bne.n	13936 <LorawanSetEdClass+0x3a>
   1392c:	701c      	strb	r4, [r3, #0]
   1392e:	2000      	movs	r0, #0
   13930:	4b0e      	ldr	r3, [pc, #56]	; (1396c <LorawanSetEdClass+0x70>)
   13932:	4798      	blx	r3
   13934:	2008      	movs	r0, #8
   13936:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   13938:	2904      	cmp	r1, #4
   1393a:	d1fc      	bne.n	13936 <LorawanSetEdClass+0x3a>
   1393c:	2c01      	cmp	r4, #1
   1393e:	d1fa      	bne.n	13936 <LorawanSetEdClass+0x3a>
   13940:	701c      	strb	r4, [r3, #0]
   13942:	0021      	movs	r1, r4
   13944:	4b09      	ldr	r3, [pc, #36]	; (1396c <LorawanSetEdClass+0x70>)
   13946:	2000      	movs	r0, #0
   13948:	4798      	blx	r3
   1394a:	002a      	movs	r2, r5
   1394c:	210e      	movs	r1, #14
   1394e:	327c      	adds	r2, #124	; 0x7c
   13950:	7813      	ldrb	r3, [r2, #0]
   13952:	a801      	add	r0, sp, #4
   13954:	438b      	bics	r3, r1
   13956:	7013      	strb	r3, [r2, #0]
   13958:	35ff      	adds	r5, #255	; 0xff
   1395a:	4b05      	ldr	r3, [pc, #20]	; (13970 <LorawanSetEdClass+0x74>)
   1395c:	7004      	strb	r4, [r0, #0]
   1395e:	4798      	blx	r3
   13960:	7f68      	ldrb	r0, [r5, #29]
   13962:	4b04      	ldr	r3, [pc, #16]	; (13974 <LorawanSetEdClass+0x78>)
   13964:	4798      	blx	r3
   13966:	e7e5      	b.n	13934 <LorawanSetEdClass+0x38>
   13968:	20002b5c 	.word	0x20002b5c
   1396c:	0000e071 	.word	0x0000e071
   13970:	00015de5 	.word	0x00015de5
   13974:	0000f0b9 	.word	0x0000f0b9

00013978 <LORAWAN_SetAttr>:
   13978:	2385      	movs	r3, #133	; 0x85
   1397a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1397c:	4cbd      	ldr	r4, [pc, #756]	; (13c74 <LORAWAN_SetAttr+0x2fc>)
   1397e:	009b      	lsls	r3, r3, #2
   13980:	5ce3      	ldrb	r3, [r4, r3]
   13982:	000d      	movs	r5, r1
   13984:	2611      	movs	r6, #17
   13986:	2b00      	cmp	r3, #0
   13988:	d100      	bne.n	1398c <LORAWAN_SetAttr+0x14>
   1398a:	e118      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   1398c:	283f      	cmp	r0, #63	; 0x3f
   1398e:	d871      	bhi.n	13a74 <LORAWAN_SetAttr+0xfc>
   13990:	f002 fe08 	bl	165a4 <__gnu_thumb1_case_uhi>
   13994:	008c0040 	.word	0x008c0040
   13998:	00f500ab 	.word	0x00f500ab
   1399c:	00df00be 	.word	0x00df00be
   139a0:	012d0117 	.word	0x012d0117
   139a4:	015f014d 	.word	0x015f014d
   139a8:	017c0165 	.word	0x017c0165
   139ac:	019f0186 	.word	0x019f0186
   139b0:	01a901a4 	.word	0x01a901a4
   139b4:	01b301ae 	.word	0x01b301ae
   139b8:	01bd01b8 	.word	0x01bd01b8
   139bc:	01e401c2 	.word	0x01e401c2
   139c0:	01c601c9 	.word	0x01c601c9
   139c4:	01e901ed 	.word	0x01e901ed
   139c8:	01db01df 	.word	0x01db01df
   139cc:	007001d5 	.word	0x007001d5
   139d0:	01970070 	.word	0x01970070
   139d4:	00700070 	.word	0x00700070
   139d8:	00700070 	.word	0x00700070
   139dc:	00700070 	.word	0x00700070
   139e0:	005f01f1 	.word	0x005f01f1
   139e4:	020201f4 	.word	0x020201f4
   139e8:	01f901fe 	.word	0x01f901fe
   139ec:	02060070 	.word	0x02060070
   139f0:	020e020a 	.word	0x020e020a
   139f4:	02160212 	.word	0x02160212
   139f8:	023a021a 	.word	0x023a021a
   139fc:	00700070 	.word	0x00700070
   13a00:	00700070 	.word	0x00700070
   13a04:	00700070 	.word	0x00700070
   13a08:	00700070 	.word	0x00700070
   13a0c:	02510070 	.word	0x02510070
   13a10:	025f025b 	.word	0x025f025b
   13a14:	260a      	movs	r6, #10
   13a16:	2900      	cmp	r1, #0
   13a18:	d100      	bne.n	13a1c <LORAWAN_SetAttr+0xa4>
   13a1a:	e0d0      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13a1c:	0020      	movs	r0, r4
   13a1e:	2208      	movs	r2, #8
   13a20:	4b95      	ldr	r3, [pc, #596]	; (13c78 <LORAWAN_SetAttr+0x300>)
   13a22:	305d      	adds	r0, #93	; 0x5d
   13a24:	4798      	blx	r3
   13a26:	2108      	movs	r1, #8
   13a28:	4e94      	ldr	r6, [pc, #592]	; (13c7c <LORAWAN_SetAttr+0x304>)
   13a2a:	2001      	movs	r0, #1
   13a2c:	47b0      	blx	r6
   13a2e:	0022      	movs	r2, r4
   13a30:	2501      	movs	r5, #1
   13a32:	32d6      	adds	r2, #214	; 0xd6
   13a34:	7813      	ldrb	r3, [r2, #0]
   13a36:	2109      	movs	r1, #9
   13a38:	432b      	orrs	r3, r5
   13a3a:	347c      	adds	r4, #124	; 0x7c
   13a3c:	0028      	movs	r0, r5
   13a3e:	7013      	strb	r3, [r2, #0]
   13a40:	47b0      	blx	r6
   13a42:	7823      	ldrb	r3, [r4, #0]
   13a44:	210b      	movs	r1, #11
   13a46:	43ab      	bics	r3, r5
   13a48:	0028      	movs	r0, r5
   13a4a:	7023      	strb	r3, [r4, #0]
   13a4c:	47b0      	blx	r6
   13a4e:	2608      	movs	r6, #8
   13a50:	e0b5      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13a52:	0023      	movs	r3, r4
   13a54:	33ff      	adds	r3, #255	; 0xff
   13a56:	7c5b      	ldrb	r3, [r3, #17]
   13a58:	260a      	movs	r6, #10
   13a5a:	075b      	lsls	r3, r3, #29
   13a5c:	d400      	bmi.n	13a60 <LORAWAN_SetAttr+0xe8>
   13a5e:	e0ae      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13a60:	79ca      	ldrb	r2, [r1, #7]
   13a62:	4b87      	ldr	r3, [pc, #540]	; (13c80 <LORAWAN_SetAttr+0x308>)
   13a64:	2a00      	cmp	r2, #0
   13a66:	d10e      	bne.n	13a86 <LORAWAN_SetAttr+0x10e>
   13a68:	4669      	mov	r1, sp
   13a6a:	201d      	movs	r0, #29
   13a6c:	714a      	strb	r2, [r1, #5]
   13a6e:	4798      	blx	r3
   13a70:	2800      	cmp	r0, #0
   13a72:	d001      	beq.n	13a78 <LORAWAN_SetAttr+0x100>
   13a74:	260a      	movs	r6, #10
   13a76:	e0a2      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13a78:	2109      	movs	r1, #9
   13a7a:	34fe      	adds	r4, #254	; 0xfe
   13a7c:	82e0      	strh	r0, [r4, #22]
   13a7e:	82a0      	strh	r0, [r4, #20]
   13a80:	4b7e      	ldr	r3, [pc, #504]	; (13c7c <LORAWAN_SetAttr+0x304>)
   13a82:	4798      	blx	r3
   13a84:	e7e3      	b.n	13a4e <LORAWAN_SetAttr+0xd6>
   13a86:	2002      	movs	r0, #2
   13a88:	5e2a      	ldrsh	r2, [r5, r0]
   13a8a:	88ae      	ldrh	r6, [r5, #4]
   13a8c:	79a8      	ldrb	r0, [r5, #6]
   13a8e:	466d      	mov	r5, sp
   13a90:	806a      	strh	r2, [r5, #2]
   13a92:	2201      	movs	r2, #1
   13a94:	8809      	ldrh	r1, [r1, #0]
   13a96:	7128      	strb	r0, [r5, #4]
   13a98:	8029      	strh	r1, [r5, #0]
   13a9a:	201d      	movs	r0, #29
   13a9c:	4669      	mov	r1, sp
   13a9e:	716a      	strb	r2, [r5, #5]
   13aa0:	4798      	blx	r3
   13aa2:	2800      	cmp	r0, #0
   13aa4:	d1e6      	bne.n	13a74 <LORAWAN_SetAttr+0xfc>
   13aa6:	34fe      	adds	r4, #254	; 0xfe
   13aa8:	82e6      	strh	r6, [r4, #22]
   13aaa:	e7d0      	b.n	13a4e <LORAWAN_SetAttr+0xd6>
   13aac:	260a      	movs	r6, #10
   13aae:	2900      	cmp	r1, #0
   13ab0:	d100      	bne.n	13ab4 <LORAWAN_SetAttr+0x13c>
   13ab2:	e084      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13ab4:	0020      	movs	r0, r4
   13ab6:	2208      	movs	r2, #8
   13ab8:	4b6f      	ldr	r3, [pc, #444]	; (13c78 <LORAWAN_SetAttr+0x300>)
   13aba:	3055      	adds	r0, #85	; 0x55
   13abc:	4798      	blx	r3
   13abe:	2107      	movs	r1, #7
   13ac0:	4d6e      	ldr	r5, [pc, #440]	; (13c7c <LORAWAN_SetAttr+0x304>)
   13ac2:	2001      	movs	r0, #1
   13ac4:	47a8      	blx	r5
   13ac6:	0022      	movs	r2, r4
   13ac8:	2302      	movs	r3, #2
   13aca:	32d6      	adds	r2, #214	; 0xd6
   13acc:	7811      	ldrb	r1, [r2, #0]
   13ace:	2001      	movs	r0, #1
   13ad0:	430b      	orrs	r3, r1
   13ad2:	2109      	movs	r1, #9
   13ad4:	7013      	strb	r3, [r2, #0]
   13ad6:	47a8      	blx	r5
   13ad8:	2001      	movs	r0, #1
   13ada:	347c      	adds	r4, #124	; 0x7c
   13adc:	7823      	ldrb	r3, [r4, #0]
   13ade:	210b      	movs	r1, #11
   13ae0:	4383      	bics	r3, r0
   13ae2:	7023      	strb	r3, [r4, #0]
   13ae4:	47a8      	blx	r5
   13ae6:	3e02      	subs	r6, #2
   13ae8:	e069      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13aea:	680b      	ldr	r3, [r1, #0]
   13aec:	2001      	movs	r0, #1
   13aee:	0a19      	lsrs	r1, r3, #8
   13af0:	70a1      	strb	r1, [r4, #2]
   13af2:	0c19      	lsrs	r1, r3, #16
   13af4:	7063      	strb	r3, [r4, #1]
   13af6:	70e1      	strb	r1, [r4, #3]
   13af8:	0e1b      	lsrs	r3, r3, #24
   13afa:	2103      	movs	r1, #3
   13afc:	4d5f      	ldr	r5, [pc, #380]	; (13c7c <LORAWAN_SetAttr+0x304>)
   13afe:	7123      	strb	r3, [r4, #4]
   13b00:	47a8      	blx	r5
   13b02:	0022      	movs	r2, r4
   13b04:	2304      	movs	r3, #4
   13b06:	32d6      	adds	r2, #214	; 0xd6
   13b08:	7811      	ldrb	r1, [r2, #0]
   13b0a:	430b      	orrs	r3, r1
   13b0c:	7013      	strb	r3, [r2, #0]
   13b0e:	e015      	b.n	13b3c <LORAWAN_SetAttr+0x1c4>
   13b10:	260a      	movs	r6, #10
   13b12:	2900      	cmp	r1, #0
   13b14:	d053      	beq.n	13bbe <LORAWAN_SetAttr+0x246>
   13b16:	3606      	adds	r6, #6
   13b18:	0032      	movs	r2, r6
   13b1a:	4f57      	ldr	r7, [pc, #348]	; (13c78 <LORAWAN_SetAttr+0x300>)
   13b1c:	1d60      	adds	r0, r4, #5
   13b1e:	47b8      	blx	r7
   13b20:	0020      	movs	r0, r4
   13b22:	0032      	movs	r2, r6
   13b24:	0029      	movs	r1, r5
   13b26:	3025      	adds	r0, #37	; 0x25
   13b28:	47b8      	blx	r7
   13b2a:	2104      	movs	r1, #4
   13b2c:	2001      	movs	r0, #1
   13b2e:	4d53      	ldr	r5, [pc, #332]	; (13c7c <LORAWAN_SetAttr+0x304>)
   13b30:	47a8      	blx	r5
   13b32:	0023      	movs	r3, r4
   13b34:	33d6      	adds	r3, #214	; 0xd6
   13b36:	781a      	ldrb	r2, [r3, #0]
   13b38:	4316      	orrs	r6, r2
   13b3a:	701e      	strb	r6, [r3, #0]
   13b3c:	2109      	movs	r1, #9
   13b3e:	2001      	movs	r0, #1
   13b40:	47a8      	blx	r5
   13b42:	2001      	movs	r0, #1
   13b44:	210b      	movs	r1, #11
   13b46:	347c      	adds	r4, #124	; 0x7c
   13b48:	7823      	ldrb	r3, [r4, #0]
   13b4a:	4383      	bics	r3, r0
   13b4c:	7023      	strb	r3, [r4, #0]
   13b4e:	47a8      	blx	r5
   13b50:	e77d      	b.n	13a4e <LORAWAN_SetAttr+0xd6>
   13b52:	260a      	movs	r6, #10
   13b54:	2900      	cmp	r1, #0
   13b56:	d032      	beq.n	13bbe <LORAWAN_SetAttr+0x246>
   13b58:	0020      	movs	r0, r4
   13b5a:	2210      	movs	r2, #16
   13b5c:	4e46      	ldr	r6, [pc, #280]	; (13c78 <LORAWAN_SetAttr+0x300>)
   13b5e:	3015      	adds	r0, #21
   13b60:	47b0      	blx	r6
   13b62:	0020      	movs	r0, r4
   13b64:	2210      	movs	r2, #16
   13b66:	0029      	movs	r1, r5
   13b68:	3035      	adds	r0, #53	; 0x35
   13b6a:	47b0      	blx	r6
   13b6c:	2105      	movs	r1, #5
   13b6e:	2001      	movs	r0, #1
   13b70:	4d42      	ldr	r5, [pc, #264]	; (13c7c <LORAWAN_SetAttr+0x304>)
   13b72:	47a8      	blx	r5
   13b74:	0022      	movs	r2, r4
   13b76:	32d6      	adds	r2, #214	; 0xd6
   13b78:	7811      	ldrb	r1, [r2, #0]
   13b7a:	2320      	movs	r3, #32
   13b7c:	e7c5      	b.n	13b0a <LORAWAN_SetAttr+0x192>
   13b7e:	260a      	movs	r6, #10
   13b80:	2900      	cmp	r1, #0
   13b82:	d01c      	beq.n	13bbe <LORAWAN_SetAttr+0x246>
   13b84:	4b3f      	ldr	r3, [pc, #252]	; (13c84 <LORAWAN_SetAttr+0x30c>)
   13b86:	3e02      	subs	r6, #2
   13b88:	5ce3      	ldrb	r3, [r4, r3]
   13b8a:	2b00      	cmp	r3, #0
   13b8c:	d117      	bne.n	13bbe <LORAWAN_SetAttr+0x246>
   13b8e:	0020      	movs	r0, r4
   13b90:	2210      	movs	r2, #16
   13b92:	4b39      	ldr	r3, [pc, #228]	; (13c78 <LORAWAN_SetAttr+0x300>)
   13b94:	3045      	adds	r0, #69	; 0x45
   13b96:	4798      	blx	r3
   13b98:	2106      	movs	r1, #6
   13b9a:	4d38      	ldr	r5, [pc, #224]	; (13c7c <LORAWAN_SetAttr+0x304>)
   13b9c:	2001      	movs	r0, #1
   13b9e:	47a8      	blx	r5
   13ba0:	0022      	movs	r2, r4
   13ba2:	32d6      	adds	r2, #214	; 0xd6
   13ba4:	7813      	ldrb	r3, [r2, #0]
   13ba6:	2109      	movs	r1, #9
   13ba8:	4333      	orrs	r3, r6
   13baa:	2001      	movs	r0, #1
   13bac:	7013      	strb	r3, [r2, #0]
   13bae:	47a8      	blx	r5
   13bb0:	2001      	movs	r0, #1
   13bb2:	347c      	adds	r4, #124	; 0x7c
   13bb4:	7823      	ldrb	r3, [r4, #0]
   13bb6:	210b      	movs	r1, #11
   13bb8:	4383      	bics	r3, r0
   13bba:	7023      	strb	r3, [r4, #0]
   13bbc:	47a8      	blx	r5
   13bbe:	0030      	movs	r0, r6
   13bc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   13bc2:	780b      	ldrb	r3, [r1, #0]
   13bc4:	2001      	movs	r0, #1
   13bc6:	0021      	movs	r1, r4
   13bc8:	2520      	movs	r5, #32
   13bca:	317c      	adds	r1, #124	; 0x7c
   13bcc:	4003      	ands	r3, r0
   13bce:	015a      	lsls	r2, r3, #5
   13bd0:	780b      	ldrb	r3, [r1, #0]
   13bd2:	43ab      	bics	r3, r5
   13bd4:	4313      	orrs	r3, r2
   13bd6:	700b      	strb	r3, [r1, #0]
   13bd8:	0023      	movs	r3, r4
   13bda:	2200      	movs	r2, #0
   13bdc:	33c2      	adds	r3, #194	; 0xc2
   13bde:	348c      	adds	r4, #140	; 0x8c
   13be0:	801a      	strh	r2, [r3, #0]
   13be2:	7823      	ldrb	r3, [r4, #0]
   13be4:	3210      	adds	r2, #16
   13be6:	4393      	bics	r3, r2
   13be8:	7023      	strb	r3, [r4, #0]
   13bea:	210b      	movs	r1, #11
   13bec:	e748      	b.n	13a80 <LORAWAN_SetAttr+0x108>
   13bee:	466a      	mov	r2, sp
   13bf0:	780b      	ldrb	r3, [r1, #0]
   13bf2:	7013      	strb	r3, [r2, #0]
   13bf4:	0022      	movs	r2, r4
   13bf6:	32ea      	adds	r2, #234	; 0xea
   13bf8:	7812      	ldrb	r2, [r2, #0]
   13bfa:	429a      	cmp	r2, r3
   13bfc:	d900      	bls.n	13c00 <LORAWAN_SetAttr+0x288>
   13bfe:	e739      	b.n	13a74 <LORAWAN_SetAttr+0xfc>
   13c00:	0022      	movs	r2, r4
   13c02:	32eb      	adds	r2, #235	; 0xeb
   13c04:	7812      	ldrb	r2, [r2, #0]
   13c06:	429a      	cmp	r2, r3
   13c08:	d200      	bcs.n	13c0c <LORAWAN_SetAttr+0x294>
   13c0a:	e733      	b.n	13a74 <LORAWAN_SetAttr+0xfc>
   13c0c:	4669      	mov	r1, sp
   13c0e:	2010      	movs	r0, #16
   13c10:	4b1d      	ldr	r3, [pc, #116]	; (13c88 <LORAWAN_SetAttr+0x310>)
   13c12:	4798      	blx	r3
   13c14:	0006      	movs	r6, r0
   13c16:	2808      	cmp	r0, #8
   13c18:	d000      	beq.n	13c1c <LORAWAN_SetAttr+0x2a4>
   13c1a:	e72b      	b.n	13a74 <LORAWAN_SetAttr+0xfc>
   13c1c:	466b      	mov	r3, sp
   13c1e:	210c      	movs	r1, #12
   13c20:	2001      	movs	r0, #1
   13c22:	781b      	ldrb	r3, [r3, #0]
   13c24:	34df      	adds	r4, #223	; 0xdf
   13c26:	7023      	strb	r3, [r4, #0]
   13c28:	4b14      	ldr	r3, [pc, #80]	; (13c7c <LORAWAN_SetAttr+0x304>)
   13c2a:	4798      	blx	r3
   13c2c:	e7c7      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13c2e:	466a      	mov	r2, sp
   13c30:	780b      	ldrb	r3, [r1, #0]
   13c32:	201d      	movs	r0, #29
   13c34:	7013      	strb	r3, [r2, #0]
   13c36:	4669      	mov	r1, sp
   13c38:	4b13      	ldr	r3, [pc, #76]	; (13c88 <LORAWAN_SetAttr+0x310>)
   13c3a:	4798      	blx	r3
   13c3c:	0006      	movs	r6, r0
   13c3e:	2808      	cmp	r0, #8
   13c40:	d000      	beq.n	13c44 <LORAWAN_SetAttr+0x2cc>
   13c42:	e717      	b.n	13a74 <LORAWAN_SetAttr+0xfc>
   13c44:	466b      	mov	r3, sp
   13c46:	781b      	ldrb	r3, [r3, #0]
   13c48:	34e1      	adds	r4, #225	; 0xe1
   13c4a:	7023      	strb	r3, [r4, #0]
   13c4c:	210a      	movs	r1, #10
   13c4e:	2000      	movs	r0, #0
   13c50:	e7ea      	b.n	13c28 <LORAWAN_SetAttr+0x2b0>
   13c52:	780b      	ldrb	r3, [r1, #0]
   13c54:	2103      	movs	r1, #3
   13c56:	34f7      	adds	r4, #247	; 0xf7
   13c58:	7023      	strb	r3, [r4, #0]
   13c5a:	2000      	movs	r0, #0
   13c5c:	e710      	b.n	13a80 <LORAWAN_SetAttr+0x108>
   13c5e:	680b      	ldr	r3, [r1, #0]
   13c60:	260a      	movs	r6, #10
   13c62:	1c5a      	adds	r2, r3, #1
   13c64:	d0ab      	beq.n	13bbe <LORAWAN_SetAttr+0x246>
   13c66:	2116      	movs	r1, #22
   13c68:	2000      	movs	r0, #0
   13c6a:	3404      	adds	r4, #4
   13c6c:	67e3      	str	r3, [r4, #124]	; 0x7c
   13c6e:	4b03      	ldr	r3, [pc, #12]	; (13c7c <LORAWAN_SetAttr+0x304>)
   13c70:	4798      	blx	r3
   13c72:	e738      	b.n	13ae6 <LORAWAN_SetAttr+0x16e>
   13c74:	20002b5c 	.word	0x20002b5c
   13c78:	00019d1d 	.word	0x00019d1d
   13c7c:	0000e071 	.word	0x0000e071
   13c80:	00014be1 	.word	0x00014be1
   13c84:	00000221 	.word	0x00000221
   13c88:	0000d8b1 	.word	0x0000d8b1
   13c8c:	680b      	ldr	r3, [r1, #0]
   13c8e:	260a      	movs	r6, #10
   13c90:	1c5a      	adds	r2, r3, #1
   13c92:	d100      	bne.n	13c96 <LORAWAN_SetAttr+0x31e>
   13c94:	e793      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13c96:	0031      	movs	r1, r6
   13c98:	3408      	adds	r4, #8
   13c9a:	67e3      	str	r3, [r4, #124]	; 0x7c
   13c9c:	2001      	movs	r0, #1
   13c9e:	e7e6      	b.n	13c6e <LORAWAN_SetAttr+0x2f6>
   13ca0:	0026      	movs	r6, r4
   13ca2:	880b      	ldrh	r3, [r1, #0]
   13ca4:	36c8      	adds	r6, #200	; 0xc8
   13ca6:	210c      	movs	r1, #12
   13ca8:	2000      	movs	r0, #0
   13caa:	4d6b      	ldr	r5, [pc, #428]	; (13e58 <LORAWAN_SetAttr+0x4e0>)
   13cac:	8033      	strh	r3, [r6, #0]
   13cae:	47a8      	blx	r5
   13cb0:	22fa      	movs	r2, #250	; 0xfa
   13cb2:	8833      	ldrh	r3, [r6, #0]
   13cb4:	0092      	lsls	r2, r2, #2
   13cb6:	189b      	adds	r3, r3, r2
   13cb8:	34ca      	adds	r4, #202	; 0xca
   13cba:	8023      	strh	r3, [r4, #0]
   13cbc:	210d      	movs	r1, #13
   13cbe:	2000      	movs	r0, #0
   13cc0:	e745      	b.n	13b4e <LORAWAN_SetAttr+0x1d6>
   13cc2:	780b      	ldrb	r3, [r1, #0]
   13cc4:	260a      	movs	r6, #10
   13cc6:	2b0f      	cmp	r3, #15
   13cc8:	d900      	bls.n	13ccc <LORAWAN_SetAttr+0x354>
   13cca:	e778      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13ccc:	3490      	adds	r4, #144	; 0x90
   13cce:	7023      	strb	r3, [r4, #0]
   13cd0:	e709      	b.n	13ae6 <LORAWAN_SetAttr+0x16e>
   13cd2:	880b      	ldrh	r3, [r1, #0]
   13cd4:	34cc      	adds	r4, #204	; 0xcc
   13cd6:	8023      	strh	r3, [r4, #0]
   13cd8:	210e      	movs	r1, #14
   13cda:	e7be      	b.n	13c5a <LORAWAN_SetAttr+0x2e2>
   13cdc:	880b      	ldrh	r3, [r1, #0]
   13cde:	34ce      	adds	r4, #206	; 0xce
   13ce0:	8023      	strh	r3, [r4, #0]
   13ce2:	210f      	movs	r1, #15
   13ce4:	e7b9      	b.n	13c5a <LORAWAN_SetAttr+0x2e2>
   13ce6:	880b      	ldrh	r3, [r1, #0]
   13ce8:	34d0      	adds	r4, #208	; 0xd0
   13cea:	8023      	strh	r3, [r4, #0]
   13cec:	2110      	movs	r1, #16
   13cee:	e7b4      	b.n	13c5a <LORAWAN_SetAttr+0x2e2>
   13cf0:	780b      	ldrb	r3, [r1, #0]
   13cf2:	34d4      	adds	r4, #212	; 0xd4
   13cf4:	7023      	strb	r3, [r4, #0]
   13cf6:	2112      	movs	r1, #18
   13cf8:	e7af      	b.n	13c5a <LORAWAN_SetAttr+0x2e2>
   13cfa:	780b      	ldrb	r3, [r1, #0]
   13cfc:	34d5      	adds	r4, #213	; 0xd5
   13cfe:	7023      	strb	r3, [r4, #0]
   13d00:	2113      	movs	r1, #19
   13d02:	e7aa      	b.n	13c5a <LORAWAN_SetAttr+0x2e2>
   13d04:	880b      	ldrh	r3, [r1, #0]
   13d06:	34d2      	adds	r4, #210	; 0xd2
   13d08:	8023      	strh	r3, [r4, #0]
   13d0a:	2111      	movs	r1, #17
   13d0c:	e7a5      	b.n	13c5a <LORAWAN_SetAttr+0x2e2>
   13d0e:	780b      	ldrb	r3, [r1, #0]
   13d10:	34da      	adds	r4, #218	; 0xda
   13d12:	7023      	strb	r3, [r4, #0]
   13d14:	2115      	movs	r1, #21
   13d16:	e7a0      	b.n	13c5a <LORAWAN_SetAttr+0x2e2>
   13d18:	780b      	ldrb	r3, [r1, #0]
   13d1a:	34d9      	adds	r4, #217	; 0xd9
   13d1c:	7023      	strb	r3, [r4, #0]
   13d1e:	e696      	b.n	13a4e <LORAWAN_SetAttr+0xd6>
   13d20:	780b      	ldrb	r3, [r1, #0]
   13d22:	34e0      	adds	r4, #224	; 0xe0
   13d24:	e7fa      	b.n	13d1c <LORAWAN_SetAttr+0x3a4>
   13d26:	2001      	movs	r0, #1
   13d28:	780b      	ldrb	r3, [r1, #0]
   13d2a:	2110      	movs	r1, #16
   13d2c:	347c      	adds	r4, #124	; 0x7c
   13d2e:	4003      	ands	r3, r0
   13d30:	011a      	lsls	r2, r3, #4
   13d32:	7823      	ldrb	r3, [r4, #0]
   13d34:	438b      	bics	r3, r1
   13d36:	4313      	orrs	r3, r2
   13d38:	7023      	strb	r3, [r4, #0]
   13d3a:	3905      	subs	r1, #5
   13d3c:	e6a0      	b.n	13a80 <LORAWAN_SetAttr+0x108>
   13d3e:	7909      	ldrb	r1, [r1, #4]
   13d40:	7828      	ldrb	r0, [r5, #0]
   13d42:	4b46      	ldr	r3, [pc, #280]	; (13e5c <LORAWAN_SetAttr+0x4e4>)
   13d44:	4798      	blx	r3
   13d46:	0006      	movs	r6, r0
   13d48:	e739      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13d4a:	7909      	ldrb	r1, [r1, #4]
   13d4c:	7828      	ldrb	r0, [r5, #0]
   13d4e:	4b44      	ldr	r3, [pc, #272]	; (13e60 <LORAWAN_SetAttr+0x4e8>)
   13d50:	e7f8      	b.n	13d44 <LORAWAN_SetAttr+0x3cc>
   13d52:	7808      	ldrb	r0, [r1, #0]
   13d54:	4b43      	ldr	r3, [pc, #268]	; (13e64 <LORAWAN_SetAttr+0x4ec>)
   13d56:	6849      	ldr	r1, [r1, #4]
   13d58:	4798      	blx	r3
   13d5a:	e7f4      	b.n	13d46 <LORAWAN_SetAttr+0x3ce>
   13d5c:	7909      	ldrb	r1, [r1, #4]
   13d5e:	6828      	ldr	r0, [r5, #0]
   13d60:	4b41      	ldr	r3, [pc, #260]	; (13e68 <LORAWAN_SetAttr+0x4f0>)
   13d62:	4798      	blx	r3
   13d64:	e7ef      	b.n	13d46 <LORAWAN_SetAttr+0x3ce>
   13d66:	7808      	ldrb	r0, [r1, #0]
   13d68:	4b40      	ldr	r3, [pc, #256]	; (13e6c <LORAWAN_SetAttr+0x4f4>)
   13d6a:	4798      	blx	r3
   13d6c:	e7eb      	b.n	13d46 <LORAWAN_SetAttr+0x3ce>
   13d6e:	8808      	ldrh	r0, [r1, #0]
   13d70:	4b3f      	ldr	r3, [pc, #252]	; (13e70 <LORAWAN_SetAttr+0x4f8>)
   13d72:	4798      	blx	r3
   13d74:	e66b      	b.n	13a4e <LORAWAN_SetAttr+0xd6>
   13d76:	4b3f      	ldr	r3, [pc, #252]	; (13e74 <LORAWAN_SetAttr+0x4fc>)
   13d78:	6019      	str	r1, [r3, #0]
   13d7a:	e67b      	b.n	13a74 <LORAWAN_SetAttr+0xfc>
   13d7c:	7809      	ldrb	r1, [r1, #0]
   13d7e:	7868      	ldrb	r0, [r5, #1]
   13d80:	4b3d      	ldr	r3, [pc, #244]	; (13e78 <LORAWAN_SetAttr+0x500>)
   13d82:	4798      	blx	r3
   13d84:	e7df      	b.n	13d46 <LORAWAN_SetAttr+0x3ce>
   13d86:	7809      	ldrb	r1, [r1, #0]
   13d88:	4b3c      	ldr	r3, [pc, #240]	; (13e7c <LORAWAN_SetAttr+0x504>)
   13d8a:	1c68      	adds	r0, r5, #1
   13d8c:	4798      	blx	r3
   13d8e:	e7da      	b.n	13d46 <LORAWAN_SetAttr+0x3ce>
   13d90:	7809      	ldrb	r1, [r1, #0]
   13d92:	1c68      	adds	r0, r5, #1
   13d94:	4b3a      	ldr	r3, [pc, #232]	; (13e80 <LORAWAN_SetAttr+0x508>)
   13d96:	e7f9      	b.n	13d8c <LORAWAN_SetAttr+0x414>
   13d98:	7809      	ldrb	r1, [r1, #0]
   13d9a:	6868      	ldr	r0, [r5, #4]
   13d9c:	4b39      	ldr	r3, [pc, #228]	; (13e84 <LORAWAN_SetAttr+0x50c>)
   13d9e:	e7f5      	b.n	13d8c <LORAWAN_SetAttr+0x414>
   13da0:	7809      	ldrb	r1, [r1, #0]
   13da2:	6868      	ldr	r0, [r5, #4]
   13da4:	4b38      	ldr	r3, [pc, #224]	; (13e88 <LORAWAN_SetAttr+0x510>)
   13da6:	e7f1      	b.n	13d8c <LORAWAN_SetAttr+0x414>
   13da8:	7809      	ldrb	r1, [r1, #0]
   13daa:	6868      	ldr	r0, [r5, #4]
   13dac:	4b37      	ldr	r3, [pc, #220]	; (13e8c <LORAWAN_SetAttr+0x514>)
   13dae:	e7ed      	b.n	13d8c <LORAWAN_SetAttr+0x414>
   13db0:	7809      	ldrb	r1, [r1, #0]
   13db2:	6868      	ldr	r0, [r5, #4]
   13db4:	4b36      	ldr	r3, [pc, #216]	; (13e90 <LORAWAN_SetAttr+0x518>)
   13db6:	e7e9      	b.n	13d8c <LORAWAN_SetAttr+0x414>
   13db8:	7809      	ldrb	r1, [r1, #0]
   13dba:	7868      	ldrb	r0, [r5, #1]
   13dbc:	4b35      	ldr	r3, [pc, #212]	; (13e94 <LORAWAN_SetAttr+0x51c>)
   13dbe:	e7e0      	b.n	13d82 <LORAWAN_SetAttr+0x40a>
   13dc0:	7809      	ldrb	r1, [r1, #0]
   13dc2:	7868      	ldrb	r0, [r5, #1]
   13dc4:	4b34      	ldr	r3, [pc, #208]	; (13e98 <LORAWAN_SetAttr+0x520>)
   13dc6:	e7dc      	b.n	13d82 <LORAWAN_SetAttr+0x40a>
   13dc8:	2300      	movs	r3, #0
   13dca:	466a      	mov	r2, sp
   13dcc:	7809      	ldrb	r1, [r1, #0]
   13dce:	7013      	strb	r3, [r2, #0]
   13dd0:	4299      	cmp	r1, r3
   13dd2:	d014      	beq.n	13dfe <LORAWAN_SetAttr+0x486>
   13dd4:	0022      	movs	r2, r4
   13dd6:	2102      	movs	r1, #2
   13dd8:	32ff      	adds	r2, #255	; 0xff
   13dda:	7c53      	ldrb	r3, [r2, #17]
   13ddc:	420b      	tst	r3, r1
   13dde:	d001      	beq.n	13de4 <LORAWAN_SetAttr+0x46c>
   13de0:	438b      	bics	r3, r1
   13de2:	7453      	strb	r3, [r2, #17]
   13de4:	2220      	movs	r2, #32
   13de6:	34ff      	adds	r4, #255	; 0xff
   13de8:	7c63      	ldrb	r3, [r4, #17]
   13dea:	4213      	tst	r3, r2
   13dec:	d100      	bne.n	13df0 <LORAWAN_SetAttr+0x478>
   13dee:	e62e      	b.n	13a4e <LORAWAN_SetAttr+0xd6>
   13df0:	4393      	bics	r3, r2
   13df2:	7463      	strb	r3, [r4, #17]
   13df4:	4669      	mov	r1, sp
   13df6:	4b29      	ldr	r3, [pc, #164]	; (13e9c <LORAWAN_SetAttr+0x524>)
   13df8:	2039      	movs	r0, #57	; 0x39
   13dfa:	4798      	blx	r3
   13dfc:	e627      	b.n	13a4e <LORAWAN_SetAttr+0xd6>
   13dfe:	4a28      	ldr	r2, [pc, #160]	; (13ea0 <LORAWAN_SetAttr+0x528>)
   13e00:	4b28      	ldr	r3, [pc, #160]	; (13ea4 <LORAWAN_SetAttr+0x52c>)
   13e02:	200e      	movs	r0, #14
   13e04:	4798      	blx	r3
   13e06:	e622      	b.n	13a4e <LORAWAN_SetAttr+0xd6>
   13e08:	466b      	mov	r3, sp
   13e0a:	780a      	ldrb	r2, [r1, #0]
   13e0c:	34ff      	adds	r4, #255	; 0xff
   13e0e:	701a      	strb	r2, [r3, #0]
   13e10:	2320      	movs	r3, #32
   13e12:	2a00      	cmp	r2, #0
   13e14:	d007      	beq.n	13e26 <LORAWAN_SetAttr+0x4ae>
   13e16:	7c62      	ldrb	r2, [r4, #17]
   13e18:	4313      	orrs	r3, r2
   13e1a:	7463      	strb	r3, [r4, #17]
   13e1c:	4669      	mov	r1, sp
   13e1e:	4b1f      	ldr	r3, [pc, #124]	; (13e9c <LORAWAN_SetAttr+0x524>)
   13e20:	2039      	movs	r0, #57	; 0x39
   13e22:	4798      	blx	r3
   13e24:	e78f      	b.n	13d46 <LORAWAN_SetAttr+0x3ce>
   13e26:	7c62      	ldrb	r2, [r4, #17]
   13e28:	260a      	movs	r6, #10
   13e2a:	421a      	tst	r2, r3
   13e2c:	d100      	bne.n	13e30 <LORAWAN_SetAttr+0x4b8>
   13e2e:	e6c6      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13e30:	439a      	bics	r2, r3
   13e32:	7462      	strb	r2, [r4, #17]
   13e34:	e7f2      	b.n	13e1c <LORAWAN_SetAttr+0x4a4>
   13e36:	780b      	ldrb	r3, [r1, #0]
   13e38:	260a      	movs	r6, #10
   13e3a:	2b08      	cmp	r3, #8
   13e3c:	d900      	bls.n	13e40 <LORAWAN_SetAttr+0x4c8>
   13e3e:	e6be      	b.n	13bbe <LORAWAN_SetAttr+0x246>
   13e40:	2288      	movs	r2, #136	; 0x88
   13e42:	0092      	lsls	r2, r2, #2
   13e44:	54a3      	strb	r3, [r4, r2]
   13e46:	210d      	movs	r1, #13
   13e48:	e728      	b.n	13c9c <LORAWAN_SetAttr+0x324>
   13e4a:	780a      	ldrb	r2, [r1, #0]
   13e4c:	4b16      	ldr	r3, [pc, #88]	; (13ea8 <LORAWAN_SetAttr+0x530>)
   13e4e:	54e2      	strb	r2, [r4, r3]
   13e50:	e5fd      	b.n	13a4e <LORAWAN_SetAttr+0xd6>
   13e52:	4b16      	ldr	r3, [pc, #88]	; (13eac <LORAWAN_SetAttr+0x534>)
   13e54:	4798      	blx	r3
   13e56:	e776      	b.n	13d46 <LORAWAN_SetAttr+0x3ce>
   13e58:	0000e071 	.word	0x0000e071
   13e5c:	00012e0d 	.word	0x00012e0d
   13e60:	00012d9d 	.word	0x00012d9d
   13e64:	000118fd 	.word	0x000118fd
   13e68:	000118c1 	.word	0x000118c1
   13e6c:	000138fd 	.word	0x000138fd
   13e70:	000106ed 	.word	0x000106ed
   13e74:	20002ea0 	.word	0x20002ea0
   13e78:	000143c9 	.word	0x000143c9
   13e7c:	00014621 	.word	0x00014621
   13e80:	0001466d 	.word	0x0001466d
   13e84:	000145d9 	.word	0x000145d9
   13e88:	000146b9 	.word	0x000146b9
   13e8c:	000146d9 	.word	0x000146d9
   13e90:	000146f5 	.word	0x000146f5
   13e94:	00014729 	.word	0x00014729
   13e98:	00014761 	.word	0x00014761
   13e9c:	0000d9bd 	.word	0x0000d9bd
   13ea0:	20002c6c 	.word	0x20002c6c
   13ea4:	0000d895 	.word	0x0000d895
   13ea8:	00000221 	.word	0x00000221
   13eac:	00010789 	.word	0x00010789

00013eb0 <LORAWAN_Reset>:
   13eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13eb2:	b087      	sub	sp, #28
   13eb4:	ab02      	add	r3, sp, #8
   13eb6:	1ddd      	adds	r5, r3, #7
   13eb8:	23ff      	movs	r3, #255	; 0xff
   13eba:	4c83      	ldr	r4, [pc, #524]	; (140c8 <LORAWAN_Reset+0x218>)
   13ebc:	702b      	strb	r3, [r5, #0]
   13ebe:	0023      	movs	r3, r4
   13ec0:	9001      	str	r0, [sp, #4]
   13ec2:	33ef      	adds	r3, #239	; 0xef
   13ec4:	781b      	ldrb	r3, [r3, #0]
   13ec6:	2b00      	cmp	r3, #0
   13ec8:	d001      	beq.n	13ece <LORAWAN_Reset+0x1e>
   13eca:	4b80      	ldr	r3, [pc, #512]	; (140cc <LORAWAN_Reset+0x21c>)
   13ecc:	4798      	blx	r3
   13ece:	002a      	movs	r2, r5
   13ed0:	4b7f      	ldr	r3, [pc, #508]	; (140d0 <LORAWAN_Reset+0x220>)
   13ed2:	2100      	movs	r1, #0
   13ed4:	2023      	movs	r0, #35	; 0x23
   13ed6:	4798      	blx	r3
   13ed8:	782b      	ldrb	r3, [r5, #0]
   13eda:	9a01      	ldr	r2, [sp, #4]
   13edc:	4293      	cmp	r3, r2
   13ede:	d001      	beq.n	13ee4 <LORAWAN_Reset+0x34>
   13ee0:	4b7c      	ldr	r3, [pc, #496]	; (140d4 <LORAWAN_Reset+0x224>)
   13ee2:	4798      	blx	r3
   13ee4:	238c      	movs	r3, #140	; 0x8c
   13ee6:	0021      	movs	r1, r4
   13ee8:	4a7b      	ldr	r2, [pc, #492]	; (140d8 <LORAWAN_Reset+0x228>)
   13eea:	009b      	lsls	r3, r3, #2
   13eec:	50e2      	str	r2, [r4, r3]
   13eee:	3bfd      	subs	r3, #253	; 0xfd
   13ef0:	31f7      	adds	r1, #247	; 0xf7
   13ef2:	3bff      	subs	r3, #255	; 0xff
   13ef4:	700b      	strb	r3, [r1, #0]
   13ef6:	2000      	movs	r0, #0
   13ef8:	4b78      	ldr	r3, [pc, #480]	; (140dc <LORAWAN_Reset+0x22c>)
   13efa:	4798      	blx	r3
   13efc:	0023      	movs	r3, r4
   13efe:	2201      	movs	r2, #1
   13f00:	33f4      	adds	r3, #244	; 0xf4
   13f02:	701a      	strb	r2, [r3, #0]
   13f04:	0023      	movs	r3, r4
   13f06:	2205      	movs	r2, #5
   13f08:	33f5      	adds	r3, #245	; 0xf5
   13f0a:	701a      	strb	r2, [r3, #0]
   13f0c:	0023      	movs	r3, r4
   13f0e:	32fa      	adds	r2, #250	; 0xfa
   13f10:	33dd      	adds	r3, #221	; 0xdd
   13f12:	701a      	strb	r2, [r3, #0]
   13f14:	0023      	movs	r3, r4
   13f16:	2500      	movs	r5, #0
   13f18:	33de      	adds	r3, #222	; 0xde
   13f1a:	701d      	strb	r5, [r3, #0]
   13f1c:	0023      	movs	r3, r4
   13f1e:	33c6      	adds	r3, #198	; 0xc6
   13f20:	801d      	strh	r5, [r3, #0]
   13f22:	0023      	movs	r3, r4
   13f24:	3308      	adds	r3, #8
   13f26:	67dd      	str	r5, [r3, #124]	; 0x7c
   13f28:	1d23      	adds	r3, r4, #4
   13f2a:	67dd      	str	r5, [r3, #124]	; 0x7c
   13f2c:	0023      	movs	r3, r4
   13f2e:	33c4      	adds	r3, #196	; 0xc4
   13f30:	801d      	strh	r5, [r3, #0]
   13f32:	0023      	movs	r3, r4
   13f34:	3390      	adds	r3, #144	; 0x90
   13f36:	701d      	strb	r5, [r3, #0]
   13f38:	0023      	movs	r3, r4
   13f3a:	33c2      	adds	r3, #194	; 0xc2
   13f3c:	801d      	strh	r5, [r3, #0]
   13f3e:	0023      	movs	r3, r4
   13f40:	33ed      	adds	r3, #237	; 0xed
   13f42:	701d      	strb	r5, [r3, #0]
   13f44:	0023      	movs	r3, r4
   13f46:	33ee      	adds	r3, #238	; 0xee
   13f48:	701d      	strb	r5, [r3, #0]
   13f4a:	0023      	movs	r3, r4
   13f4c:	3af9      	subs	r2, #249	; 0xf9
   13f4e:	33f8      	adds	r3, #248	; 0xf8
   13f50:	601a      	str	r2, [r3, #0]
   13f52:	0023      	movs	r3, r4
   13f54:	33fc      	adds	r3, #252	; 0xfc
   13f56:	601d      	str	r5, [r3, #0]
   13f58:	0023      	movs	r3, r4
   13f5a:	33fe      	adds	r3, #254	; 0xfe
   13f5c:	829d      	strh	r5, [r3, #20]
   13f5e:	82dd      	strh	r5, [r3, #22]
   13f60:	320a      	adds	r2, #10
   13f62:	0029      	movs	r1, r5
   13f64:	4b5e      	ldr	r3, [pc, #376]	; (140e0 <LORAWAN_Reset+0x230>)
   13f66:	485f      	ldr	r0, [pc, #380]	; (140e4 <LORAWAN_Reset+0x234>)
   13f68:	4798      	blx	r3
   13f6a:	2385      	movs	r3, #133	; 0x85
   13f6c:	2201      	movs	r2, #1
   13f6e:	2607      	movs	r6, #7
   13f70:	009b      	lsls	r3, r3, #2
   13f72:	54e2      	strb	r2, [r4, r3]
   13f74:	0029      	movs	r1, r5
   13f76:	0032      	movs	r2, r6
   13f78:	4b59      	ldr	r3, [pc, #356]	; (140e0 <LORAWAN_Reset+0x230>)
   13f7a:	485b      	ldr	r0, [pc, #364]	; (140e8 <LORAWAN_Reset+0x238>)
   13f7c:	4798      	blx	r3
   13f7e:	2388      	movs	r3, #136	; 0x88
   13f80:	2201      	movs	r2, #1
   13f82:	009b      	lsls	r3, r3, #2
   13f84:	54e2      	strb	r2, [r4, r3]
   13f86:	0023      	movs	r3, r4
   13f88:	338c      	adds	r3, #140	; 0x8c
   13f8a:	801d      	strh	r5, [r3, #0]
   13f8c:	0023      	movs	r3, r4
   13f8e:	33da      	adds	r3, #218	; 0xda
   13f90:	701e      	strb	r6, [r3, #0]
   13f92:	0023      	movs	r3, r4
   13f94:	33d9      	adds	r3, #217	; 0xd9
   13f96:	701d      	strb	r5, [r3, #0]
   13f98:	0023      	movs	r3, r4
   13f9a:	33dc      	adds	r3, #220	; 0xdc
   13f9c:	701d      	strb	r5, [r3, #0]
   13f9e:	0023      	movs	r3, r4
   13fa0:	33db      	adds	r3, #219	; 0xdb
   13fa2:	701d      	strb	r5, [r3, #0]
   13fa4:	9801      	ldr	r0, [sp, #4]
   13fa6:	4b51      	ldr	r3, [pc, #324]	; (140ec <LORAWAN_Reset+0x23c>)
   13fa8:	67e5      	str	r5, [r4, #124]	; 0x7c
   13faa:	4798      	blx	r3
   13fac:	0007      	movs	r7, r0
   13fae:	2808      	cmp	r0, #8
   13fb0:	d000      	beq.n	13fb4 <LORAWAN_Reset+0x104>
   13fb2:	e086      	b.n	140c2 <LORAWAN_Reset+0x212>
   13fb4:	4e4e      	ldr	r6, [pc, #312]	; (140f0 <LORAWAN_Reset+0x240>)
   13fb6:	4a4f      	ldr	r2, [pc, #316]	; (140f4 <LORAWAN_Reset+0x244>)
   13fb8:	0029      	movs	r1, r5
   13fba:	47b0      	blx	r6
   13fbc:	4a4e      	ldr	r2, [pc, #312]	; (140f8 <LORAWAN_Reset+0x248>)
   13fbe:	0029      	movs	r1, r5
   13fc0:	200e      	movs	r0, #14
   13fc2:	47b0      	blx	r6
   13fc4:	0023      	movs	r3, r4
   13fc6:	4a4d      	ldr	r2, [pc, #308]	; (140fc <LORAWAN_Reset+0x24c>)
   13fc8:	33e0      	adds	r3, #224	; 0xe0
   13fca:	0029      	movs	r1, r5
   13fcc:	2006      	movs	r0, #6
   13fce:	701d      	strb	r5, [r3, #0]
   13fd0:	47b0      	blx	r6
   13fd2:	4b4b      	ldr	r3, [pc, #300]	; (14100 <LORAWAN_Reset+0x250>)
   13fd4:	4798      	blx	r3
   13fd6:	466a      	mov	r2, sp
   13fd8:	0023      	movs	r3, r4
   13fda:	7912      	ldrb	r2, [r2, #4]
   13fdc:	33f6      	adds	r3, #246	; 0xf6
   13fde:	701a      	strb	r2, [r3, #0]
   13fe0:	0029      	movs	r1, r5
   13fe2:	4b48      	ldr	r3, [pc, #288]	; (14104 <LORAWAN_Reset+0x254>)
   13fe4:	0028      	movs	r0, r5
   13fe6:	4798      	blx	r3
   13fe8:	2210      	movs	r2, #16
   13fea:	34ff      	adds	r4, #255	; 0xff
   13fec:	7c63      	ldrb	r3, [r4, #17]
   13fee:	4213      	tst	r3, r2
   13ff0:	d006      	beq.n	14000 <LORAWAN_Reset+0x150>
   13ff2:	ab02      	add	r3, sp, #8
   13ff4:	1d99      	adds	r1, r3, #6
   13ff6:	2301      	movs	r3, #1
   13ff8:	0038      	movs	r0, r7
   13ffa:	700b      	strb	r3, [r1, #0]
   13ffc:	4b37      	ldr	r3, [pc, #220]	; (140dc <LORAWAN_Reset+0x22c>)
   13ffe:	4798      	blx	r3
   14000:	4b41      	ldr	r3, [pc, #260]	; (14108 <LORAWAN_Reset+0x258>)
   14002:	4942      	ldr	r1, [pc, #264]	; (1410c <LORAWAN_Reset+0x25c>)
   14004:	201e      	movs	r0, #30
   14006:	4798      	blx	r3
   14008:	4c2f      	ldr	r4, [pc, #188]	; (140c8 <LORAWAN_Reset+0x218>)
   1400a:	0023      	movs	r3, r4
   1400c:	33ff      	adds	r3, #255	; 0xff
   1400e:	7c5b      	ldrb	r3, [r3, #17]
   14010:	075b      	lsls	r3, r3, #29
   14012:	d507      	bpl.n	14024 <LORAWAN_Reset+0x174>
   14014:	2100      	movs	r1, #0
   14016:	aa04      	add	r2, sp, #16
   14018:	2032      	movs	r0, #50	; 0x32
   1401a:	47b0      	blx	r6
   1401c:	a904      	add	r1, sp, #16
   1401e:	2027      	movs	r0, #39	; 0x27
   14020:	4b3b      	ldr	r3, [pc, #236]	; (14110 <LORAWAN_Reset+0x260>)
   14022:	4798      	blx	r3
   14024:	4a3b      	ldr	r2, [pc, #236]	; (14114 <LORAWAN_Reset+0x264>)
   14026:	2100      	movs	r1, #0
   14028:	2009      	movs	r0, #9
   1402a:	47b0      	blx	r6
   1402c:	4a3a      	ldr	r2, [pc, #232]	; (14118 <LORAWAN_Reset+0x268>)
   1402e:	2100      	movs	r1, #0
   14030:	200a      	movs	r0, #10
   14032:	47b0      	blx	r6
   14034:	4a39      	ldr	r2, [pc, #228]	; (1411c <LORAWAN_Reset+0x26c>)
   14036:	2100      	movs	r1, #0
   14038:	2036      	movs	r0, #54	; 0x36
   1403a:	47b0      	blx	r6
   1403c:	ad04      	add	r5, sp, #16
   1403e:	4a38      	ldr	r2, [pc, #224]	; (14120 <LORAWAN_Reset+0x270>)
   14040:	2100      	movs	r1, #0
   14042:	2037      	movs	r0, #55	; 0x37
   14044:	47b0      	blx	r6
   14046:	002a      	movs	r2, r5
   14048:	2100      	movs	r1, #0
   1404a:	2014      	movs	r0, #20
   1404c:	47b0      	blx	r6
   1404e:	0023      	movs	r3, r4
   14050:	782a      	ldrb	r2, [r5, #0]
   14052:	33ea      	adds	r3, #234	; 0xea
   14054:	701a      	strb	r2, [r3, #0]
   14056:	0023      	movs	r3, r4
   14058:	786a      	ldrb	r2, [r5, #1]
   1405a:	33eb      	adds	r3, #235	; 0xeb
   1405c:	701a      	strb	r2, [r3, #0]
   1405e:	0023      	movs	r3, r4
   14060:	2500      	movs	r5, #0
   14062:	33d6      	adds	r3, #214	; 0xd6
   14064:	801d      	strh	r5, [r3, #0]
   14066:	2265      	movs	r2, #101	; 0x65
   14068:	0029      	movs	r1, r5
   1406a:	0020      	movs	r0, r4
   1406c:	4b1c      	ldr	r3, [pc, #112]	; (140e0 <LORAWAN_Reset+0x230>)
   1406e:	4798      	blx	r3
   14070:	0023      	movs	r3, r4
   14072:	22fa      	movs	r2, #250	; 0xfa
   14074:	33c8      	adds	r3, #200	; 0xc8
   14076:	0092      	lsls	r2, r2, #2
   14078:	801a      	strh	r2, [r3, #0]
   1407a:	0022      	movs	r2, r4
   1407c:	23fa      	movs	r3, #250	; 0xfa
   1407e:	32ca      	adds	r2, #202	; 0xca
   14080:	00db      	lsls	r3, r3, #3
   14082:	8013      	strh	r3, [r2, #0]
   14084:	0022      	movs	r2, r4
   14086:	4927      	ldr	r1, [pc, #156]	; (14124 <LORAWAN_Reset+0x274>)
   14088:	32cc      	adds	r2, #204	; 0xcc
   1408a:	8011      	strh	r1, [r2, #0]
   1408c:	0022      	movs	r2, r4
   1408e:	4926      	ldr	r1, [pc, #152]	; (14128 <LORAWAN_Reset+0x278>)
   14090:	32ce      	adds	r2, #206	; 0xce
   14092:	8011      	strh	r1, [r2, #0]
   14094:	0022      	movs	r2, r4
   14096:	32d2      	adds	r2, #210	; 0xd2
   14098:	8013      	strh	r3, [r2, #0]
   1409a:	0023      	movs	r3, r4
   1409c:	2220      	movs	r2, #32
   1409e:	33d5      	adds	r3, #213	; 0xd5
   140a0:	701a      	strb	r2, [r3, #0]
   140a2:	0023      	movs	r3, r4
   140a4:	1892      	adds	r2, r2, r2
   140a6:	33d4      	adds	r3, #212	; 0xd4
   140a8:	701a      	strb	r2, [r3, #0]
   140aa:	2380      	movs	r3, #128	; 0x80
   140ac:	34d0      	adds	r4, #208	; 0xd0
   140ae:	01db      	lsls	r3, r3, #7
   140b0:	8023      	strh	r3, [r4, #0]
   140b2:	0028      	movs	r0, r5
   140b4:	4b1d      	ldr	r3, [pc, #116]	; (1412c <LORAWAN_Reset+0x27c>)
   140b6:	4798      	blx	r3
   140b8:	4b1d      	ldr	r3, [pc, #116]	; (14130 <LORAWAN_Reset+0x280>)
   140ba:	4798      	blx	r3
   140bc:	0038      	movs	r0, r7
   140be:	b007      	add	sp, #28
   140c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   140c2:	270a      	movs	r7, #10
   140c4:	e7fa      	b.n	140bc <LORAWAN_Reset+0x20c>
   140c6:	46c0      	nop			; (mov r8, r8)
   140c8:	20002b5c 	.word	0x20002b5c
   140cc:	0000fd9d 	.word	0x0000fd9d
   140d0:	00011935 	.word	0x00011935
   140d4:	0000db11 	.word	0x0000db11
   140d8:	01050000 	.word	0x01050000
   140dc:	00014be1 	.word	0x00014be1
   140e0:	00019e41 	.word	0x00019e41
   140e4:	20002c5c 	.word	0x20002c5c
   140e8:	20002d73 	.word	0x20002d73
   140ec:	0000da31 	.word	0x0000da31
   140f0:	0000d895 	.word	0x0000d895
   140f4:	20002bc5 	.word	0x20002bc5
   140f8:	20002c6c 	.word	0x20002c6c
   140fc:	20002c48 	.word	0x20002c48
   14100:	00014ddd 	.word	0x00014ddd
   14104:	0000e071 	.word	0x0000e071
   14108:	00014af1 	.word	0x00014af1
   1410c:	20002d7b 	.word	0x20002d7b
   14110:	00013979 	.word	0x00013979
   14114:	20002bca 	.word	0x20002bca
   14118:	20002bc6 	.word	0x20002bc6
   1411c:	20002c3d 	.word	0x20002c3d
   14120:	20002c3b 	.word	0x20002c3b
   14124:	00001388 	.word	0x00001388
   14128:	00001770 	.word	0x00001770
   1412c:	000106ed 	.word	0x000106ed
   14130:	00014375 	.word	0x00014375

00014134 <LORAWAN_ReadyToSleep>:
   14134:	4b08      	ldr	r3, [pc, #32]	; (14158 <LORAWAN_ReadyToSleep+0x24>)
   14136:	001a      	movs	r2, r3
   14138:	32f4      	adds	r2, #244	; 0xf4
   1413a:	7812      	ldrb	r2, [r2, #0]
   1413c:	2a01      	cmp	r2, #1
   1413e:	d002      	beq.n	14146 <LORAWAN_ReadyToSleep+0x12>
   14140:	2000      	movs	r0, #0
   14142:	2a04      	cmp	r2, #4
   14144:	d106      	bne.n	14154 <LORAWAN_ReadyToSleep+0x20>
   14146:	337c      	adds	r3, #124	; 0x7c
   14148:	7818      	ldrb	r0, [r3, #0]
   1414a:	230e      	movs	r3, #14
   1414c:	4018      	ands	r0, r3
   1414e:	4243      	negs	r3, r0
   14150:	4158      	adcs	r0, r3
   14152:	b2c0      	uxtb	r0, r0
   14154:	4770      	bx	lr
   14156:	46c0      	nop			; (mov r8, r8)
   14158:	20002b5c 	.word	0x20002b5c

0001415c <LorawanClasscUlAckTimerCallback>:
   1415c:	2102      	movs	r1, #2
   1415e:	4b03      	ldr	r3, [pc, #12]	; (1416c <LorawanClasscUlAckTimerCallback+0x10>)
   14160:	338c      	adds	r3, #140	; 0x8c
   14162:	781a      	ldrb	r2, [r3, #0]
   14164:	438a      	bics	r2, r1
   14166:	701a      	strb	r2, [r3, #0]
   14168:	4770      	bx	lr
   1416a:	46c0      	nop			; (mov r8, r8)
   1416c:	20002b5c 	.word	0x20002b5c

00014170 <LorawanClasscValidateSend>:
   14170:	2385      	movs	r3, #133	; 0x85
   14172:	b510      	push	{r4, lr}
   14174:	4c0a      	ldr	r4, [pc, #40]	; (141a0 <LorawanClasscValidateSend+0x30>)
   14176:	009b      	lsls	r3, r3, #2
   14178:	5ce3      	ldrb	r3, [r4, r3]
   1417a:	2b00      	cmp	r3, #0
   1417c:	d008      	beq.n	14190 <LorawanClasscValidateSend+0x20>
   1417e:	220e      	movs	r2, #14
   14180:	347c      	adds	r4, #124	; 0x7c
   14182:	7823      	ldrb	r3, [r4, #0]
   14184:	2008      	movs	r0, #8
   14186:	4013      	ands	r3, r2
   14188:	2b02      	cmp	r3, #2
   1418a:	d100      	bne.n	1418e <LorawanClasscValidateSend+0x1e>
   1418c:	2011      	movs	r0, #17
   1418e:	bd10      	pop	{r4, pc}
   14190:	0023      	movs	r3, r4
   14192:	33ff      	adds	r3, #255	; 0xff
   14194:	7f58      	ldrb	r0, [r3, #29]
   14196:	4b03      	ldr	r3, [pc, #12]	; (141a4 <LorawanClasscValidateSend+0x34>)
   14198:	4798      	blx	r3
   1419a:	2800      	cmp	r0, #0
   1419c:	d1ef      	bne.n	1417e <LorawanClasscValidateSend+0xe>
   1419e:	e7f5      	b.n	1418c <LorawanClasscValidateSend+0x1c>
   141a0:	20002b5c 	.word	0x20002b5c
   141a4:	0000ef39 	.word	0x0000ef39

000141a8 <LorawanClasscPause>:
   141a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   141aa:	4c16      	ldr	r4, [pc, #88]	; (14204 <LorawanClasscPause+0x5c>)
   141ac:	220e      	movs	r2, #14
   141ae:	0023      	movs	r3, r4
   141b0:	337c      	adds	r3, #124	; 0x7c
   141b2:	781b      	ldrb	r3, [r3, #0]
   141b4:	4013      	ands	r3, r2
   141b6:	2b0a      	cmp	r3, #10
   141b8:	d121      	bne.n	141fe <LorawanClasscPause+0x56>
   141ba:	2385      	movs	r3, #133	; 0x85
   141bc:	009b      	lsls	r3, r3, #2
   141be:	5ce3      	ldrb	r3, [r4, r3]
   141c0:	2b00      	cmp	r3, #0
   141c2:	d00c      	beq.n	141de <LorawanClasscPause+0x36>
   141c4:	2301      	movs	r3, #1
   141c6:	a801      	add	r0, sp, #4
   141c8:	7003      	strb	r3, [r0, #0]
   141ca:	4b0f      	ldr	r3, [pc, #60]	; (14208 <LorawanClasscPause+0x60>)
   141cc:	4798      	blx	r3
   141ce:	220e      	movs	r2, #14
   141d0:	2001      	movs	r0, #1
   141d2:	347c      	adds	r4, #124	; 0x7c
   141d4:	7823      	ldrb	r3, [r4, #0]
   141d6:	4240      	negs	r0, r0
   141d8:	4393      	bics	r3, r2
   141da:	7023      	strb	r3, [r4, #0]
   141dc:	e007      	b.n	141ee <LorawanClasscPause+0x46>
   141de:	0023      	movs	r3, r4
   141e0:	33e8      	adds	r3, #232	; 0xe8
   141e2:	7818      	ldrb	r0, [r3, #0]
   141e4:	4d09      	ldr	r5, [pc, #36]	; (1420c <LorawanClasscPause+0x64>)
   141e6:	47a8      	blx	r5
   141e8:	2800      	cmp	r0, #0
   141ea:	d001      	beq.n	141f0 <LorawanClasscPause+0x48>
   141ec:	2000      	movs	r0, #0
   141ee:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   141f0:	0023      	movs	r3, r4
   141f2:	33ff      	adds	r3, #255	; 0xff
   141f4:	7f58      	ldrb	r0, [r3, #29]
   141f6:	47a8      	blx	r5
   141f8:	2800      	cmp	r0, #0
   141fa:	d0e8      	beq.n	141ce <LorawanClasscPause+0x26>
   141fc:	e7f6      	b.n	141ec <LorawanClasscPause+0x44>
   141fe:	2b00      	cmp	r3, #0
   14200:	d0e5      	beq.n	141ce <LorawanClasscPause+0x26>
   14202:	e7f3      	b.n	141ec <LorawanClasscPause+0x44>
   14204:	20002b5c 	.word	0x20002b5c
   14208:	00015de5 	.word	0x00015de5
   1420c:	0000ef39 	.word	0x0000ef39

00014210 <LorawanClasscReceiveWindow1Callback>:
   14210:	2301      	movs	r3, #1
   14212:	b507      	push	{r0, r1, r2, lr}
   14214:	a801      	add	r0, sp, #4
   14216:	7003      	strb	r3, [r0, #0]
   14218:	4b01      	ldr	r3, [pc, #4]	; (14220 <LorawanClasscReceiveWindow1Callback+0x10>)
   1421a:	4798      	blx	r3
   1421c:	bd07      	pop	{r0, r1, r2, pc}
   1421e:	46c0      	nop			; (mov r8, r8)
   14220:	00015de5 	.word	0x00015de5

00014224 <LorawanClasscRxDone>:
   14224:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14226:	221f      	movs	r2, #31
   14228:	7803      	ldrb	r3, [r0, #0]
   1422a:	4c13      	ldr	r4, [pc, #76]	; (14278 <LorawanClasscRxDone+0x54>)
   1422c:	4393      	bics	r3, r2
   1422e:	2ba0      	cmp	r3, #160	; 0xa0
   14230:	d10c      	bne.n	1424c <LorawanClasscRxDone+0x28>
   14232:	0025      	movs	r5, r4
   14234:	35ff      	adds	r5, #255	; 0xff
   14236:	7f68      	ldrb	r0, [r5, #29]
   14238:	4b10      	ldr	r3, [pc, #64]	; (1427c <LorawanClasscRxDone+0x58>)
   1423a:	4798      	blx	r3
   1423c:	1e02      	subs	r2, r0, #0
   1423e:	d014      	beq.n	1426a <LorawanClasscRxDone+0x46>
   14240:	0022      	movs	r2, r4
   14242:	2102      	movs	r1, #2
   14244:	328c      	adds	r2, #140	; 0x8c
   14246:	7813      	ldrb	r3, [r2, #0]
   14248:	438b      	bics	r3, r1
   1424a:	7013      	strb	r3, [r2, #0]
   1424c:	347c      	adds	r4, #124	; 0x7c
   1424e:	7823      	ldrb	r3, [r4, #0]
   14250:	220e      	movs	r2, #14
   14252:	0019      	movs	r1, r3
   14254:	4011      	ands	r1, r2
   14256:	2906      	cmp	r1, #6
   14258:	d103      	bne.n	14262 <LorawanClasscRxDone+0x3e>
   1425a:	4393      	bics	r3, r2
   1425c:	3a04      	subs	r2, #4
   1425e:	4313      	orrs	r3, r2
   14260:	7023      	strb	r3, [r4, #0]
   14262:	2000      	movs	r0, #0
   14264:	4b06      	ldr	r3, [pc, #24]	; (14280 <LorawanClasscRxDone+0x5c>)
   14266:	4798      	blx	r3
   14268:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1426a:	7f68      	ldrb	r0, [r5, #29]
   1426c:	4b05      	ldr	r3, [pc, #20]	; (14284 <LorawanClasscRxDone+0x60>)
   1426e:	9200      	str	r2, [sp, #0]
   14270:	4905      	ldr	r1, [pc, #20]	; (14288 <LorawanClasscRxDone+0x64>)
   14272:	4d06      	ldr	r5, [pc, #24]	; (1428c <LorawanClasscRxDone+0x68>)
   14274:	47a8      	blx	r5
   14276:	e7e9      	b.n	1424c <LorawanClasscRxDone+0x28>
   14278:	20002b5c 	.word	0x20002b5c
   1427c:	0000ef39 	.word	0x0000ef39
   14280:	000126d1 	.word	0x000126d1
   14284:	0001415d 	.word	0x0001415d
   14288:	001e8480 	.word	0x001e8480
   1428c:	0000eda1 	.word	0x0000eda1

00014290 <LorawanClasscTxDone>:
   14290:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14292:	4c1a      	ldr	r4, [pc, #104]	; (142fc <LorawanClasscTxDone+0x6c>)
   14294:	0023      	movs	r3, r4
   14296:	33ca      	adds	r3, #202	; 0xca
   14298:	881d      	ldrh	r5, [r3, #0]
   1429a:	0023      	movs	r3, r4
   1429c:	338c      	adds	r3, #140	; 0x8c
   1429e:	781b      	ldrb	r3, [r3, #0]
   142a0:	07db      	lsls	r3, r3, #31
   142a2:	d524      	bpl.n	142ee <LorawanClasscTxDone+0x5e>
   142a4:	0023      	movs	r3, r4
   142a6:	0022      	movs	r2, r4
   142a8:	33da      	adds	r3, #218	; 0xda
   142aa:	781b      	ldrb	r3, [r3, #0]
   142ac:	32dc      	adds	r2, #220	; 0xdc
   142ae:	3301      	adds	r3, #1
   142b0:	7812      	ldrb	r2, [r2, #0]
   142b2:	4293      	cmp	r3, r2
   142b4:	db06      	blt.n	142c4 <LorawanClasscTxDone+0x34>
   142b6:	4b12      	ldr	r3, [pc, #72]	; (14300 <LorawanClasscTxDone+0x70>)
   142b8:	5ce3      	ldrb	r3, [r4, r3]
   142ba:	2b00      	cmp	r3, #0
   142bc:	d002      	beq.n	142c4 <LorawanClasscTxDone+0x34>
   142be:	23fa      	movs	r3, #250	; 0xfa
   142c0:	00db      	lsls	r3, r3, #3
   142c2:	18ed      	adds	r5, r5, r3
   142c4:	0023      	movs	r3, r4
   142c6:	33ff      	adds	r3, #255	; 0xff
   142c8:	1945      	adds	r5, r0, r5
   142ca:	7f58      	ldrb	r0, [r3, #29]
   142cc:	4b0d      	ldr	r3, [pc, #52]	; (14304 <LorawanClasscTxDone+0x74>)
   142ce:	4798      	blx	r3
   142d0:	34e8      	adds	r4, #232	; 0xe8
   142d2:	21fa      	movs	r1, #250	; 0xfa
   142d4:	7820      	ldrb	r0, [r4, #0]
   142d6:	2400      	movs	r4, #0
   142d8:	0089      	lsls	r1, r1, #2
   142da:	4369      	muls	r1, r5
   142dc:	0022      	movs	r2, r4
   142de:	4d0a      	ldr	r5, [pc, #40]	; (14308 <LorawanClasscTxDone+0x78>)
   142e0:	9400      	str	r4, [sp, #0]
   142e2:	4b0a      	ldr	r3, [pc, #40]	; (1430c <LorawanClasscTxDone+0x7c>)
   142e4:	47a8      	blx	r5
   142e6:	0020      	movs	r0, r4
   142e8:	4b09      	ldr	r3, [pc, #36]	; (14310 <LorawanClasscTxDone+0x80>)
   142ea:	4798      	blx	r3
   142ec:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   142ee:	0023      	movs	r3, r4
   142f0:	0022      	movs	r2, r4
   142f2:	33d9      	adds	r3, #217	; 0xd9
   142f4:	781b      	ldrb	r3, [r3, #0]
   142f6:	32db      	adds	r2, #219	; 0xdb
   142f8:	3301      	adds	r3, #1
   142fa:	e7d9      	b.n	142b0 <LorawanClasscTxDone+0x20>
   142fc:	20002b5c 	.word	0x20002b5c
   14300:	0000021e 	.word	0x0000021e
   14304:	0000f0b9 	.word	0x0000f0b9
   14308:	0000eda1 	.word	0x0000eda1
   1430c:	00012599 	.word	0x00012599
   14310:	000126d1 	.word	0x000126d1

00014314 <LorawanClasscRxTimeout>:
   14314:	b510      	push	{r4, lr}
   14316:	4b08      	ldr	r3, [pc, #32]	; (14338 <LorawanClasscRxTimeout+0x24>)
   14318:	210e      	movs	r1, #14
   1431a:	337c      	adds	r3, #124	; 0x7c
   1431c:	781a      	ldrb	r2, [r3, #0]
   1431e:	0010      	movs	r0, r2
   14320:	4008      	ands	r0, r1
   14322:	2806      	cmp	r0, #6
   14324:	d106      	bne.n	14334 <LorawanClasscRxTimeout+0x20>
   14326:	438a      	bics	r2, r1
   14328:	3904      	subs	r1, #4
   1432a:	430a      	orrs	r2, r1
   1432c:	701a      	strb	r2, [r3, #0]
   1432e:	2000      	movs	r0, #0
   14330:	4b02      	ldr	r3, [pc, #8]	; (1433c <LorawanClasscRxTimeout+0x28>)
   14332:	4798      	blx	r3
   14334:	bd10      	pop	{r4, pc}
   14336:	46c0      	nop			; (mov r8, r8)
   14338:	20002b5c 	.word	0x20002b5c
   1433c:	000126d1 	.word	0x000126d1

00014340 <LorawanClasscNotifyAppOnReceive>:
   14340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14342:	001f      	movs	r7, r3
   14344:	4b08      	ldr	r3, [pc, #32]	; (14368 <LorawanClasscNotifyAppOnReceive+0x28>)
   14346:	0004      	movs	r4, r0
   14348:	33ff      	adds	r3, #255	; 0xff
   1434a:	7f58      	ldrb	r0, [r3, #29]
   1434c:	4b07      	ldr	r3, [pc, #28]	; (1436c <LorawanClasscNotifyAppOnReceive+0x2c>)
   1434e:	000d      	movs	r5, r1
   14350:	0016      	movs	r6, r2
   14352:	4798      	blx	r3
   14354:	2800      	cmp	r0, #0
   14356:	d105      	bne.n	14364 <LorawanClasscNotifyAppOnReceive+0x24>
   14358:	0020      	movs	r0, r4
   1435a:	003b      	movs	r3, r7
   1435c:	0032      	movs	r2, r6
   1435e:	0029      	movs	r1, r5
   14360:	4c03      	ldr	r4, [pc, #12]	; (14370 <LorawanClasscNotifyAppOnReceive+0x30>)
   14362:	47a0      	blx	r4
   14364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14366:	46c0      	nop			; (mov r8, r8)
   14368:	20002b5c 	.word	0x20002b5c
   1436c:	0000ef39 	.word	0x0000ef39
   14370:	000117c5 	.word	0x000117c5

00014374 <LorawanMcastInit>:
   14374:	2290      	movs	r2, #144	; 0x90
   14376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14378:	2500      	movs	r5, #0
   1437a:	4b0f      	ldr	r3, [pc, #60]	; (143b8 <LorawanMcastInit+0x44>)
   1437c:	0052      	lsls	r2, r2, #1
   1437e:	549d      	strb	r5, [r3, r2]
   14380:	2222      	movs	r2, #34	; 0x22
   14382:	2701      	movs	r7, #1
   14384:	32ff      	adds	r2, #255	; 0xff
   14386:	4c0d      	ldr	r4, [pc, #52]	; (143bc <LorawanMcastInit+0x48>)
   14388:	549d      	strb	r5, [r3, r2]
   1438a:	427f      	negs	r7, r7
   1438c:	0023      	movs	r3, r4
   1438e:	3b14      	subs	r3, #20
   14390:	601f      	str	r7, [r3, #0]
   14392:	2210      	movs	r2, #16
   14394:	2100      	movs	r1, #0
   14396:	0020      	movs	r0, r4
   14398:	4e09      	ldr	r6, [pc, #36]	; (143c0 <LorawanMcastInit+0x4c>)
   1439a:	47b0      	blx	r6
   1439c:	0020      	movs	r0, r4
   1439e:	2210      	movs	r2, #16
   143a0:	3810      	subs	r0, #16
   143a2:	2100      	movs	r1, #0
   143a4:	47b0      	blx	r6
   143a6:	4b07      	ldr	r3, [pc, #28]	; (143c4 <LorawanMcastInit+0x50>)
   143a8:	6165      	str	r5, [r4, #20]
   143aa:	61a5      	str	r5, [r4, #24]
   143ac:	6125      	str	r5, [r4, #16]
   143ae:	343c      	adds	r4, #60	; 0x3c
   143b0:	429c      	cmp	r4, r3
   143b2:	d1eb      	bne.n	1438c <LorawanMcastInit+0x18>
   143b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   143b6:	46c0      	nop			; (mov r8, r8)
   143b8:	20002b5c 	.word	0x20002b5c
   143bc:	20002c94 	.word	0x20002c94
   143c0:	00019e41 	.word	0x00019e41
   143c4:	20002d84 	.word	0x20002d84

000143c8 <LorawanMcastEnable>:
   143c8:	0002      	movs	r2, r0
   143ca:	b510      	push	{r4, lr}
   143cc:	200a      	movs	r0, #10
   143ce:	2903      	cmp	r1, #3
   143d0:	d822      	bhi.n	14418 <LorawanMcastEnable+0x50>
   143d2:	4b1a      	ldr	r3, [pc, #104]	; (1443c <LorawanMcastEnable+0x74>)
   143d4:	2a00      	cmp	r2, #0
   143d6:	d020      	beq.n	1441a <LorawanMcastEnable+0x52>
   143d8:	223c      	movs	r2, #60	; 0x3c
   143da:	434a      	muls	r2, r1
   143dc:	189a      	adds	r2, r3, r2
   143de:	3251      	adds	r2, #81	; 0x51
   143e0:	32ff      	adds	r2, #255	; 0xff
   143e2:	7912      	ldrb	r2, [r2, #4]
   143e4:	0754      	lsls	r4, r2, #29
   143e6:	d512      	bpl.n	1440e <LorawanMcastEnable+0x46>
   143e8:	0794      	lsls	r4, r2, #30
   143ea:	d510      	bpl.n	1440e <LorawanMcastEnable+0x46>
   143ec:	07d2      	lsls	r2, r2, #31
   143ee:	0fd2      	lsrs	r2, r2, #31
   143f0:	2a01      	cmp	r2, #1
   143f2:	d10c      	bne.n	1440e <LorawanMcastEnable+0x46>
   143f4:	001c      	movs	r4, r3
   143f6:	34f4      	adds	r4, #244	; 0xf4
   143f8:	7824      	ldrb	r4, [r4, #0]
   143fa:	0764      	lsls	r4, r4, #29
   143fc:	d007      	beq.n	1440e <LorawanMcastEnable+0x46>
   143fe:	2022      	movs	r0, #34	; 0x22
   14400:	408a      	lsls	r2, r1
   14402:	30ff      	adds	r0, #255	; 0xff
   14404:	5c19      	ldrb	r1, [r3, r0]
   14406:	430a      	orrs	r2, r1
   14408:	541a      	strb	r2, [r3, r0]
   1440a:	381a      	subs	r0, #26
   1440c:	38ff      	subs	r0, #255	; 0xff
   1440e:	2190      	movs	r1, #144	; 0x90
   14410:	0049      	lsls	r1, r1, #1
   14412:	5c5a      	ldrb	r2, [r3, r1]
   14414:	3201      	adds	r2, #1
   14416:	545a      	strb	r2, [r3, r1]
   14418:	bd10      	pop	{r4, pc}
   1441a:	2201      	movs	r2, #1
   1441c:	408a      	lsls	r2, r1
   1441e:	2022      	movs	r0, #34	; 0x22
   14420:	0011      	movs	r1, r2
   14422:	30ff      	adds	r0, #255	; 0xff
   14424:	5c1a      	ldrb	r2, [r3, r0]
   14426:	438a      	bics	r2, r1
   14428:	2190      	movs	r1, #144	; 0x90
   1442a:	541a      	strb	r2, [r3, r0]
   1442c:	0049      	lsls	r1, r1, #1
   1442e:	5c5a      	ldrb	r2, [r3, r1]
   14430:	381a      	subs	r0, #26
   14432:	3a01      	subs	r2, #1
   14434:	545a      	strb	r2, [r3, r1]
   14436:	38ff      	subs	r0, #255	; 0xff
   14438:	e7ee      	b.n	14418 <LorawanMcastEnable+0x50>
   1443a:	46c0      	nop			; (mov r8, r8)
   1443c:	20002b5c 	.word	0x20002b5c

00014440 <LorawanMcastValidateHdr>:
   14440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14442:	469c      	mov	ip, r3
   14444:	2400      	movs	r4, #0
   14446:	230a      	movs	r3, #10
   14448:	4f18      	ldr	r7, [pc, #96]	; (144ac <LorawanMcastValidateHdr+0x6c>)
   1444a:	b2e5      	uxtb	r5, r4
   1444c:	9501      	str	r5, [sp, #4]
   1444e:	2522      	movs	r5, #34	; 0x22
   14450:	35ff      	adds	r5, #255	; 0xff
   14452:	5d7d      	ldrb	r5, [r7, r5]
   14454:	2601      	movs	r6, #1
   14456:	4125      	asrs	r5, r4
   14458:	4235      	tst	r5, r6
   1445a:	d022      	beq.n	144a2 <LorawanMcastValidateHdr+0x62>
   1445c:	7886      	ldrb	r6, [r0, #2]
   1445e:	7845      	ldrb	r5, [r0, #1]
   14460:	0236      	lsls	r6, r6, #8
   14462:	432e      	orrs	r6, r5
   14464:	78c5      	ldrb	r5, [r0, #3]
   14466:	042d      	lsls	r5, r5, #16
   14468:	432e      	orrs	r6, r5
   1446a:	7905      	ldrb	r5, [r0, #4]
   1446c:	062d      	lsls	r5, r5, #24
   1446e:	4335      	orrs	r5, r6
   14470:	263c      	movs	r6, #60	; 0x3c
   14472:	4366      	muls	r6, r4
   14474:	3625      	adds	r6, #37	; 0x25
   14476:	36ff      	adds	r6, #255	; 0xff
   14478:	59be      	ldr	r6, [r7, r6]
   1447a:	42b5      	cmp	r5, r6
   1447c:	d111      	bne.n	144a2 <LorawanMcastValidateHdr+0x62>
   1447e:	4d0c      	ldr	r5, [pc, #48]	; (144b0 <LorawanMcastValidateHdr+0x70>)
   14480:	782e      	ldrb	r6, [r5, #0]
   14482:	2506      	movs	r5, #6
   14484:	422e      	tst	r6, r5
   14486:	d00c      	beq.n	144a2 <LorawanMcastValidateHdr+0x62>
   14488:	2a00      	cmp	r2, #0
   1448a:	d00a      	beq.n	144a2 <LorawanMcastValidateHdr+0x62>
   1448c:	7946      	ldrb	r6, [r0, #5]
   1448e:	3569      	adds	r5, #105	; 0x69
   14490:	422e      	tst	r6, r5
   14492:	d106      	bne.n	144a2 <LorawanMcastValidateHdr+0x62>
   14494:	2903      	cmp	r1, #3
   14496:	d104      	bne.n	144a2 <LorawanMcastValidateHdr+0x62>
   14498:	466d      	mov	r5, sp
   1449a:	4663      	mov	r3, ip
   1449c:	792d      	ldrb	r5, [r5, #4]
   1449e:	701d      	strb	r5, [r3, #0]
   144a0:	2308      	movs	r3, #8
   144a2:	3401      	adds	r4, #1
   144a4:	2c04      	cmp	r4, #4
   144a6:	d1d0      	bne.n	1444a <LorawanMcastValidateHdr+0xa>
   144a8:	0018      	movs	r0, r3
   144aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   144ac:	20002b5c 	.word	0x20002b5c
   144b0:	20002c50 	.word	0x20002c50

000144b4 <LorawanMcastProcessPkt>:
   144b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   144b6:	0015      	movs	r5, r2
   144b8:	223c      	movs	r2, #60	; 0x3c
   144ba:	435a      	muls	r2, r3
   144bc:	b089      	sub	sp, #36	; 0x24
   144be:	9107      	str	r1, [sp, #28]
   144c0:	493d      	ldr	r1, [pc, #244]	; (145b8 <LorawanMcastProcessPkt+0x104>)
   144c2:	9006      	str	r0, [sp, #24]
   144c4:	1889      	adds	r1, r1, r2
   144c6:	31fc      	adds	r1, #252	; 0xfc
   144c8:	6d0c      	ldr	r4, [r1, #80]	; 0x50
   144ca:	6d48      	ldr	r0, [r1, #84]	; 0x54
   144cc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
   144ce:	4284      	cmp	r4, r0
   144d0:	d21f      	bcs.n	14512 <LorawanMcastProcessPkt+0x5e>
   144d2:	2100      	movs	r1, #0
   144d4:	4294      	cmp	r4, r2
   144d6:	d802      	bhi.n	144de <LorawanMcastProcessPkt+0x2a>
   144d8:	4282      	cmp	r2, r0
   144da:	4192      	sbcs	r2, r2
   144dc:	4251      	negs	r1, r2
   144de:	270a      	movs	r7, #10
   144e0:	2900      	cmp	r1, #0
   144e2:	d118      	bne.n	14516 <LorawanMcastProcessPkt+0x62>
   144e4:	4a34      	ldr	r2, [pc, #208]	; (145b8 <LorawanMcastProcessPkt+0x104>)
   144e6:	200e      	movs	r0, #14
   144e8:	0011      	movs	r1, r2
   144ea:	317c      	adds	r1, #124	; 0x7c
   144ec:	780b      	ldrb	r3, [r1, #0]
   144ee:	001c      	movs	r4, r3
   144f0:	4004      	ands	r4, r0
   144f2:	2c06      	cmp	r4, #6
   144f4:	d107      	bne.n	14506 <LorawanMcastProcessPkt+0x52>
   144f6:	32f4      	adds	r2, #244	; 0xf4
   144f8:	7812      	ldrb	r2, [r2, #0]
   144fa:	2a04      	cmp	r2, #4
   144fc:	d103      	bne.n	14506 <LorawanMcastProcessPkt+0x52>
   144fe:	4383      	bics	r3, r0
   14500:	3206      	adds	r2, #6
   14502:	4313      	orrs	r3, r2
   14504:	700b      	strb	r3, [r1, #0]
   14506:	2000      	movs	r0, #0
   14508:	4b2c      	ldr	r3, [pc, #176]	; (145bc <LorawanMcastProcessPkt+0x108>)
   1450a:	4798      	blx	r3
   1450c:	0038      	movs	r0, r7
   1450e:	b009      	add	sp, #36	; 0x24
   14510:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14512:	4294      	cmp	r4, r2
   14514:	d8e0      	bhi.n	144d8 <LorawanMcastProcessPkt+0x24>
   14516:	243c      	movs	r4, #60	; 0x3c
   14518:	435c      	muls	r4, r3
   1451a:	4e27      	ldr	r6, [pc, #156]	; (145b8 <LorawanMcastProcessPkt+0x104>)
   1451c:	79ea      	ldrb	r2, [r5, #7]
   1451e:	1937      	adds	r7, r6, r4
   14520:	003b      	movs	r3, r7
   14522:	79a9      	ldrb	r1, [r5, #6]
   14524:	0212      	lsls	r2, r2, #8
   14526:	3349      	adds	r3, #73	; 0x49
   14528:	430a      	orrs	r2, r1
   1452a:	33ff      	adds	r3, #255	; 0xff
   1452c:	801a      	strh	r2, [r3, #0]
   1452e:	2105      	movs	r1, #5
   14530:	4b23      	ldr	r3, [pc, #140]	; (145c0 <LorawanMcastProcessPkt+0x10c>)
   14532:	37fc      	adds	r7, #252	; 0xfc
   14534:	2000      	movs	r0, #0
   14536:	4798      	blx	r3
   14538:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1453a:	3439      	adds	r4, #57	; 0x39
   1453c:	9304      	str	r3, [sp, #16]
   1453e:	4b21      	ldr	r3, [pc, #132]	; (145c4 <LorawanMcastProcessPkt+0x110>)
   14540:	9907      	ldr	r1, [sp, #28]
   14542:	9303      	str	r3, [sp, #12]
   14544:	2319      	movs	r3, #25
   14546:	34ff      	adds	r4, #255	; 0xff
   14548:	9302      	str	r3, [sp, #8]
   1454a:	19a4      	adds	r4, r4, r6
   1454c:	3b16      	subs	r3, #22
   1454e:	9806      	ldr	r0, [sp, #24]
   14550:	9400      	str	r4, [sp, #0]
   14552:	390d      	subs	r1, #13
   14554:	9301      	str	r3, [sp, #4]
   14556:	b2c9      	uxtb	r1, r1
   14558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1455a:	2201      	movs	r2, #1
   1455c:	3009      	adds	r0, #9
   1455e:	4c1a      	ldr	r4, [pc, #104]	; (145c8 <LorawanMcastProcessPkt+0x114>)
   14560:	47a0      	blx	r4
   14562:	2800      	cmp	r0, #0
   14564:	d002      	beq.n	1456c <LorawanMcastProcessPkt+0xb8>
   14566:	201f      	movs	r0, #31
   14568:	4b18      	ldr	r3, [pc, #96]	; (145cc <LorawanMcastProcessPkt+0x118>)
   1456a:	4798      	blx	r3
   1456c:	4918      	ldr	r1, [pc, #96]	; (145d0 <LorawanMcastProcessPkt+0x11c>)
   1456e:	2708      	movs	r7, #8
   14570:	784a      	ldrb	r2, [r1, #1]
   14572:	780b      	ldrb	r3, [r1, #0]
   14574:	0212      	lsls	r2, r2, #8
   14576:	431a      	orrs	r2, r3
   14578:	788b      	ldrb	r3, [r1, #2]
   1457a:	041b      	lsls	r3, r3, #16
   1457c:	431a      	orrs	r2, r3
   1457e:	78cb      	ldrb	r3, [r1, #3]
   14580:	061b      	lsls	r3, r3, #24
   14582:	4313      	orrs	r3, r2
   14584:	d0ae      	beq.n	144e4 <LorawanMcastProcessPkt+0x30>
   14586:	2220      	movs	r2, #32
   14588:	368c      	adds	r6, #140	; 0x8c
   1458a:	7833      	ldrb	r3, [r6, #0]
   1458c:	9906      	ldr	r1, [sp, #24]
   1458e:	4393      	bics	r3, r2
   14590:	7033      	strb	r3, [r6, #0]
   14592:	78ab      	ldrb	r3, [r5, #2]
   14594:	7868      	ldrb	r0, [r5, #1]
   14596:	40bb      	lsls	r3, r7
   14598:	4303      	orrs	r3, r0
   1459a:	78e8      	ldrb	r0, [r5, #3]
   1459c:	9a07      	ldr	r2, [sp, #28]
   1459e:	0400      	lsls	r0, r0, #16
   145a0:	4303      	orrs	r3, r0
   145a2:	7928      	ldrb	r0, [r5, #4]
   145a4:	3a0c      	subs	r2, #12
   145a6:	0600      	lsls	r0, r0, #24
   145a8:	4318      	orrs	r0, r3
   145aa:	b2d2      	uxtb	r2, r2
   145ac:	19c9      	adds	r1, r1, r7
   145ae:	003b      	movs	r3, r7
   145b0:	4c08      	ldr	r4, [pc, #32]	; (145d4 <LorawanMcastProcessPkt+0x120>)
   145b2:	47a0      	blx	r4
   145b4:	e796      	b.n	144e4 <LorawanMcastProcessPkt+0x30>
   145b6:	46c0      	nop			; (mov r8, r8)
   145b8:	20002b5c 	.word	0x20002b5c
   145bc:	000126d1 	.word	0x000126d1
   145c0:	0000e071 	.word	0x0000e071
   145c4:	20002eac 	.word	0x20002eac
   145c8:	00011361 	.word	0x00011361
   145cc:	00011421 	.word	0x00011421
   145d0:	20002ea4 	.word	0x20002ea4
   145d4:	000117c5 	.word	0x000117c5

000145d8 <LorawanAddMcastAddr>:
   145d8:	b570      	push	{r4, r5, r6, lr}
   145da:	260a      	movs	r6, #10
   145dc:	2903      	cmp	r1, #3
   145de:	d818      	bhi.n	14612 <LorawanAddMcastAddr+0x3a>
   145e0:	4b0d      	ldr	r3, [pc, #52]	; (14618 <LorawanAddMcastAddr+0x40>)
   145e2:	681a      	ldr	r2, [r3, #0]
   145e4:	0a15      	lsrs	r5, r2, #8
   145e6:	791a      	ldrb	r2, [r3, #4]
   145e8:	0612      	lsls	r2, r2, #24
   145ea:	432a      	orrs	r2, r5
   145ec:	4282      	cmp	r2, r0
   145ee:	d010      	beq.n	14612 <LorawanAddMcastAddr+0x3a>
   145f0:	243c      	movs	r4, #60	; 0x3c
   145f2:	434c      	muls	r4, r1
   145f4:	191c      	adds	r4, r3, r4
   145f6:	0023      	movs	r3, r4
   145f8:	33fc      	adds	r3, #252	; 0xfc
   145fa:	6298      	str	r0, [r3, #40]	; 0x28
   145fc:	2106      	movs	r1, #6
   145fe:	2000      	movs	r0, #0
   14600:	4b06      	ldr	r3, [pc, #24]	; (1461c <LorawanAddMcastAddr+0x44>)
   14602:	4798      	blx	r3
   14604:	2201      	movs	r2, #1
   14606:	3451      	adds	r4, #81	; 0x51
   14608:	34ff      	adds	r4, #255	; 0xff
   1460a:	7921      	ldrb	r1, [r4, #4]
   1460c:	3e02      	subs	r6, #2
   1460e:	430a      	orrs	r2, r1
   14610:	7122      	strb	r2, [r4, #4]
   14612:	0030      	movs	r0, r6
   14614:	bd70      	pop	{r4, r5, r6, pc}
   14616:	46c0      	nop			; (mov r8, r8)
   14618:	20002b5c 	.word	0x20002b5c
   1461c:	0000e071 	.word	0x0000e071

00014620 <LorawanAddMcastAppskey>:
   14620:	b570      	push	{r4, r5, r6, lr}
   14622:	0006      	movs	r6, r0
   14624:	200a      	movs	r0, #10
   14626:	2903      	cmp	r1, #3
   14628:	d818      	bhi.n	1465c <LorawanAddMcastAppskey+0x3c>
   1462a:	2e00      	cmp	r6, #0
   1462c:	d016      	beq.n	1465c <LorawanAddMcastAppskey+0x3c>
   1462e:	253c      	movs	r5, #60	; 0x3c
   14630:	434d      	muls	r5, r1
   14632:	0028      	movs	r0, r5
   14634:	4c0a      	ldr	r4, [pc, #40]	; (14660 <LorawanAddMcastAppskey+0x40>)
   14636:	3039      	adds	r0, #57	; 0x39
   14638:	30ff      	adds	r0, #255	; 0xff
   1463a:	2210      	movs	r2, #16
   1463c:	1900      	adds	r0, r0, r4
   1463e:	0031      	movs	r1, r6
   14640:	4b08      	ldr	r3, [pc, #32]	; (14664 <LorawanAddMcastAppskey+0x44>)
   14642:	4798      	blx	r3
   14644:	4b08      	ldr	r3, [pc, #32]	; (14668 <LorawanAddMcastAppskey+0x48>)
   14646:	2107      	movs	r1, #7
   14648:	2000      	movs	r0, #0
   1464a:	4798      	blx	r3
   1464c:	2304      	movs	r3, #4
   1464e:	2008      	movs	r0, #8
   14650:	1964      	adds	r4, r4, r5
   14652:	3451      	adds	r4, #81	; 0x51
   14654:	34ff      	adds	r4, #255	; 0xff
   14656:	7922      	ldrb	r2, [r4, #4]
   14658:	4313      	orrs	r3, r2
   1465a:	7123      	strb	r3, [r4, #4]
   1465c:	bd70      	pop	{r4, r5, r6, pc}
   1465e:	46c0      	nop			; (mov r8, r8)
   14660:	20002b5c 	.word	0x20002b5c
   14664:	00019d1d 	.word	0x00019d1d
   14668:	0000e071 	.word	0x0000e071

0001466c <LorawanAddMcastNwkskey>:
   1466c:	b570      	push	{r4, r5, r6, lr}
   1466e:	0006      	movs	r6, r0
   14670:	200a      	movs	r0, #10
   14672:	2903      	cmp	r1, #3
   14674:	d818      	bhi.n	146a8 <LorawanAddMcastNwkskey+0x3c>
   14676:	2e00      	cmp	r6, #0
   14678:	d016      	beq.n	146a8 <LorawanAddMcastNwkskey+0x3c>
   1467a:	253c      	movs	r5, #60	; 0x3c
   1467c:	434d      	muls	r5, r1
   1467e:	0028      	movs	r0, r5
   14680:	4c0a      	ldr	r4, [pc, #40]	; (146ac <LorawanAddMcastNwkskey+0x40>)
   14682:	3029      	adds	r0, #41	; 0x29
   14684:	30ff      	adds	r0, #255	; 0xff
   14686:	2210      	movs	r2, #16
   14688:	1900      	adds	r0, r0, r4
   1468a:	0031      	movs	r1, r6
   1468c:	4b08      	ldr	r3, [pc, #32]	; (146b0 <LorawanAddMcastNwkskey+0x44>)
   1468e:	4798      	blx	r3
   14690:	4b08      	ldr	r3, [pc, #32]	; (146b4 <LorawanAddMcastNwkskey+0x48>)
   14692:	2108      	movs	r1, #8
   14694:	2000      	movs	r0, #0
   14696:	4798      	blx	r3
   14698:	2302      	movs	r3, #2
   1469a:	2008      	movs	r0, #8
   1469c:	1964      	adds	r4, r4, r5
   1469e:	3451      	adds	r4, #81	; 0x51
   146a0:	34ff      	adds	r4, #255	; 0xff
   146a2:	7922      	ldrb	r2, [r4, #4]
   146a4:	4313      	orrs	r3, r2
   146a6:	7123      	strb	r3, [r4, #4]
   146a8:	bd70      	pop	{r4, r5, r6, pc}
   146aa:	46c0      	nop			; (mov r8, r8)
   146ac:	20002b5c 	.word	0x20002b5c
   146b0:	00019d1d 	.word	0x00019d1d
   146b4:	0000e071 	.word	0x0000e071

000146b8 <LorawanAddMcastFcntMin>:
   146b8:	220a      	movs	r2, #10
   146ba:	2903      	cmp	r1, #3
   146bc:	d807      	bhi.n	146ce <LorawanAddMcastFcntMin+0x16>
   146be:	233c      	movs	r3, #60	; 0x3c
   146c0:	434b      	muls	r3, r1
   146c2:	4904      	ldr	r1, [pc, #16]	; (146d4 <LorawanAddMcastFcntMin+0x1c>)
   146c4:	3a02      	subs	r2, #2
   146c6:	18c9      	adds	r1, r1, r3
   146c8:	31fc      	adds	r1, #252	; 0xfc
   146ca:	6508      	str	r0, [r1, #80]	; 0x50
   146cc:	64c8      	str	r0, [r1, #76]	; 0x4c
   146ce:	0010      	movs	r0, r2
   146d0:	4770      	bx	lr
   146d2:	46c0      	nop			; (mov r8, r8)
   146d4:	20002b5c 	.word	0x20002b5c

000146d8 <LorawanAddMcastFcntMax>:
   146d8:	220a      	movs	r2, #10
   146da:	2903      	cmp	r1, #3
   146dc:	d806      	bhi.n	146ec <LorawanAddMcastFcntMax+0x14>
   146de:	233c      	movs	r3, #60	; 0x3c
   146e0:	434b      	muls	r3, r1
   146e2:	4903      	ldr	r1, [pc, #12]	; (146f0 <LorawanAddMcastFcntMax+0x18>)
   146e4:	3a02      	subs	r2, #2
   146e6:	18c9      	adds	r1, r1, r3
   146e8:	31fc      	adds	r1, #252	; 0xfc
   146ea:	6548      	str	r0, [r1, #84]	; 0x54
   146ec:	0010      	movs	r0, r2
   146ee:	4770      	bx	lr
   146f0:	20002b5c 	.word	0x20002b5c

000146f4 <LorawanAddMcastDlFrequency>:
   146f4:	b513      	push	{r0, r1, r4, lr}
   146f6:	000c      	movs	r4, r1
   146f8:	9001      	str	r0, [sp, #4]
   146fa:	2903      	cmp	r1, #3
   146fc:	d901      	bls.n	14702 <LorawanAddMcastDlFrequency+0xe>
   146fe:	200a      	movs	r0, #10
   14700:	bd16      	pop	{r1, r2, r4, pc}
   14702:	a901      	add	r1, sp, #4
   14704:	2001      	movs	r0, #1
   14706:	4b06      	ldr	r3, [pc, #24]	; (14720 <LorawanAddMcastDlFrequency+0x2c>)
   14708:	4798      	blx	r3
   1470a:	2808      	cmp	r0, #8
   1470c:	d1f7      	bne.n	146fe <LorawanAddMcastDlFrequency+0xa>
   1470e:	213c      	movs	r1, #60	; 0x3c
   14710:	434c      	muls	r4, r1
   14712:	4904      	ldr	r1, [pc, #16]	; (14724 <LorawanAddMcastDlFrequency+0x30>)
   14714:	9b01      	ldr	r3, [sp, #4]
   14716:	1909      	adds	r1, r1, r4
   14718:	31fc      	adds	r1, #252	; 0xfc
   1471a:	65cb      	str	r3, [r1, #92]	; 0x5c
   1471c:	e7f0      	b.n	14700 <LorawanAddMcastDlFrequency+0xc>
   1471e:	46c0      	nop			; (mov r8, r8)
   14720:	0000d8b1 	.word	0x0000d8b1
   14724:	20002b5c 	.word	0x20002b5c

00014728 <LorawanAddMcastDatarate>:
   14728:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1472a:	466b      	mov	r3, sp
   1472c:	1ddc      	adds	r4, r3, #7
   1472e:	000d      	movs	r5, r1
   14730:	7020      	strb	r0, [r4, #0]
   14732:	2903      	cmp	r1, #3
   14734:	d901      	bls.n	1473a <LorawanAddMcastDatarate+0x12>
   14736:	200a      	movs	r0, #10
   14738:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1473a:	0021      	movs	r1, r4
   1473c:	200f      	movs	r0, #15
   1473e:	4b06      	ldr	r3, [pc, #24]	; (14758 <LorawanAddMcastDatarate+0x30>)
   14740:	4798      	blx	r3
   14742:	2808      	cmp	r0, #8
   14744:	d1f7      	bne.n	14736 <LorawanAddMcastDatarate+0xe>
   14746:	213c      	movs	r1, #60	; 0x3c
   14748:	434d      	muls	r5, r1
   1474a:	4904      	ldr	r1, [pc, #16]	; (1475c <LorawanAddMcastDatarate+0x34>)
   1474c:	7823      	ldrb	r3, [r4, #0]
   1474e:	1949      	adds	r1, r1, r5
   14750:	315d      	adds	r1, #93	; 0x5d
   14752:	31ff      	adds	r1, #255	; 0xff
   14754:	700b      	strb	r3, [r1, #0]
   14756:	e7ef      	b.n	14738 <LorawanAddMcastDatarate+0x10>
   14758:	0000d8b1 	.word	0x0000d8b1
   1475c:	20002b5c 	.word	0x20002b5c

00014760 <LorawanAddMcastPeriodicity>:
   14760:	220a      	movs	r2, #10
   14762:	2903      	cmp	r1, #3
   14764:	d809      	bhi.n	1477a <LorawanAddMcastPeriodicity+0x1a>
   14766:	2807      	cmp	r0, #7
   14768:	d807      	bhi.n	1477a <LorawanAddMcastPeriodicity+0x1a>
   1476a:	233c      	movs	r3, #60	; 0x3c
   1476c:	434b      	muls	r3, r1
   1476e:	4904      	ldr	r1, [pc, #16]	; (14780 <LorawanAddMcastPeriodicity+0x20>)
   14770:	3a02      	subs	r2, #2
   14772:	18c9      	adds	r1, r1, r3
   14774:	315e      	adds	r1, #94	; 0x5e
   14776:	31ff      	adds	r1, #255	; 0xff
   14778:	7008      	strb	r0, [r1, #0]
   1477a:	0010      	movs	r0, r2
   1477c:	4770      	bx	lr
   1477e:	46c0      	nop			; (mov r8, r8)
   14780:	20002b5c 	.word	0x20002b5c

00014784 <Lorawan_Pds_fid1_CB>:
   14784:	4770      	bx	lr
	...

00014788 <Lorawan_Pds_fid2_CB>:
   14788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1478a:	2788      	movs	r7, #136	; 0x88
   1478c:	4c2d      	ldr	r4, [pc, #180]	; (14844 <Lorawan_Pds_fid2_CB+0xbc>)
   1478e:	00bf      	lsls	r7, r7, #2
   14790:	5de3      	ldrb	r3, [r4, r7]
   14792:	2b00      	cmp	r3, #0
   14794:	d021      	beq.n	147da <Lorawan_Pds_fid2_CB+0x52>
   14796:	2501      	movs	r5, #1
   14798:	0029      	movs	r1, r5
   1479a:	4099      	lsls	r1, r3
   1479c:	000b      	movs	r3, r1
   1479e:	1d22      	adds	r2, r4, #4
   147a0:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
   147a2:	4e29      	ldr	r6, [pc, #164]	; (14848 <Lorawan_Pds_fid2_CB+0xc0>)
   147a4:	18cb      	adds	r3, r1, r3
   147a6:	2000      	movs	r0, #0
   147a8:	2116      	movs	r1, #22
   147aa:	67d3      	str	r3, [r2, #124]	; 0x7c
   147ac:	47b0      	blx	r6
   147ae:	0029      	movs	r1, r5
   147b0:	5de3      	ldrb	r3, [r4, r7]
   147b2:	0022      	movs	r2, r4
   147b4:	4099      	lsls	r1, r3
   147b6:	000b      	movs	r3, r1
   147b8:	3208      	adds	r2, #8
   147ba:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
   147bc:	0028      	movs	r0, r5
   147be:	185b      	adds	r3, r3, r1
   147c0:	210a      	movs	r1, #10
   147c2:	67d3      	str	r3, [r2, #124]	; 0x7c
   147c4:	47b0      	blx	r6
   147c6:	0023      	movs	r3, r4
   147c8:	5de2      	ldrb	r2, [r4, r7]
   147ca:	33fc      	adds	r3, #252	; 0xfc
   147cc:	4095      	lsls	r5, r2
   147ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   147d0:	2105      	movs	r1, #5
   147d2:	18ad      	adds	r5, r5, r2
   147d4:	64dd      	str	r5, [r3, #76]	; 0x4c
   147d6:	2000      	movs	r0, #0
   147d8:	47b0      	blx	r6
   147da:	0025      	movs	r5, r4
   147dc:	2271      	movs	r2, #113	; 0x71
   147de:	2701      	movs	r7, #1
   147e0:	357c      	adds	r5, #124	; 0x7c
   147e2:	782b      	ldrb	r3, [r5, #0]
   147e4:	4013      	ands	r3, r2
   147e6:	702b      	strb	r3, [r5, #0]
   147e8:	786b      	ldrb	r3, [r5, #1]
   147ea:	43bb      	bics	r3, r7
   147ec:	706b      	strb	r3, [r5, #1]
   147ee:	4b17      	ldr	r3, [pc, #92]	; (1484c <Lorawan_Pds_fid2_CB+0xc4>)
   147f0:	5ce3      	ldrb	r3, [r4, r3]
   147f2:	2b00      	cmp	r3, #0
   147f4:	d018      	beq.n	14828 <Lorawan_Pds_fid2_CB+0xa0>
   147f6:	4916      	ldr	r1, [pc, #88]	; (14850 <Lorawan_Pds_fid2_CB+0xc8>)
   147f8:	2006      	movs	r0, #6
   147fa:	4e16      	ldr	r6, [pc, #88]	; (14854 <Lorawan_Pds_fid2_CB+0xcc>)
   147fc:	47b0      	blx	r6
   147fe:	2800      	cmp	r0, #0
   14800:	d002      	beq.n	14808 <Lorawan_Pds_fid2_CB+0x80>
   14802:	782b      	ldrb	r3, [r5, #0]
   14804:	43bb      	bics	r3, r7
   14806:	702b      	strb	r3, [r5, #0]
   14808:	0023      	movs	r3, r4
   1480a:	2501      	movs	r5, #1
   1480c:	337c      	adds	r3, #124	; 0x7c
   1480e:	781b      	ldrb	r3, [r3, #0]
   14810:	422b      	tst	r3, r5
   14812:	d008      	beq.n	14826 <Lorawan_Pds_fid2_CB+0x9e>
   14814:	7823      	ldrb	r3, [r4, #0]
   14816:	2b00      	cmp	r3, #0
   14818:	d106      	bne.n	14828 <Lorawan_Pds_fid2_CB+0xa0>
   1481a:	490f      	ldr	r1, [pc, #60]	; (14858 <Lorawan_Pds_fid2_CB+0xd0>)
   1481c:	2002      	movs	r0, #2
   1481e:	47b0      	blx	r6
   14820:	490e      	ldr	r1, [pc, #56]	; (1485c <Lorawan_Pds_fid2_CB+0xd4>)
   14822:	0028      	movs	r0, r5
   14824:	47b0      	blx	r6
   14826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14828:	0020      	movs	r0, r4
   1482a:	0021      	movs	r1, r4
   1482c:	2210      	movs	r2, #16
   1482e:	3115      	adds	r1, #21
   14830:	4d0b      	ldr	r5, [pc, #44]	; (14860 <Lorawan_Pds_fid2_CB+0xd8>)
   14832:	3035      	adds	r0, #53	; 0x35
   14834:	47a8      	blx	r5
   14836:	0020      	movs	r0, r4
   14838:	1d61      	adds	r1, r4, #5
   1483a:	2210      	movs	r2, #16
   1483c:	3025      	adds	r0, #37	; 0x25
   1483e:	47a8      	blx	r5
   14840:	e7f1      	b.n	14826 <Lorawan_Pds_fid2_CB+0x9e>
   14842:	46c0      	nop			; (mov r8, r8)
   14844:	20002b5c 	.word	0x20002b5c
   14848:	0000e071 	.word	0x0000e071
   1484c:	00000221 	.word	0x00000221
   14850:	20002bb1 	.word	0x20002bb1
   14854:	0000dcd5 	.word	0x0000dcd5
   14858:	20002b81 	.word	0x20002b81
   1485c:	20002b91 	.word	0x20002b91
   14860:	00019d1d 	.word	0x00019d1d

00014864 <LORAWAN_TxHandler>:
   14864:	b5f0      	push	{r4, r5, r6, r7, lr}
   14866:	b087      	sub	sp, #28
   14868:	466b      	mov	r3, sp
   1486a:	2501      	movs	r5, #1
   1486c:	4c2f      	ldr	r4, [pc, #188]	; (1492c <LORAWAN_TxHandler+0xc8>)
   1486e:	701d      	strb	r5, [r3, #0]
   14870:	0023      	movs	r3, r4
   14872:	466a      	mov	r2, sp
   14874:	33e1      	adds	r3, #225	; 0xe1
   14876:	781b      	ldrb	r3, [r3, #0]
   14878:	4669      	mov	r1, sp
   1487a:	7053      	strb	r3, [r2, #1]
   1487c:	0023      	movs	r3, r4
   1487e:	33df      	adds	r3, #223	; 0xdf
   14880:	781b      	ldrb	r3, [r3, #0]
   14882:	202f      	movs	r0, #47	; 0x2f
   14884:	7093      	strb	r3, [r2, #2]
   14886:	aa03      	add	r2, sp, #12
   14888:	4b29      	ldr	r3, [pc, #164]	; (14930 <LORAWAN_TxHandler+0xcc>)
   1488a:	4798      	blx	r3
   1488c:	2808      	cmp	r0, #8
   1488e:	d004      	beq.n	1489a <LORAWAN_TxHandler+0x36>
   14890:	4b28      	ldr	r3, [pc, #160]	; (14934 <LORAWAN_TxHandler+0xd0>)
   14892:	4798      	blx	r3
   14894:	2000      	movs	r0, #0
   14896:	b007      	add	sp, #28
   14898:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1489a:	0023      	movs	r3, r4
   1489c:	33f4      	adds	r3, #244	; 0xf4
   1489e:	781b      	ldrb	r3, [r3, #0]
   148a0:	ae01      	add	r6, sp, #4
   148a2:	2b04      	cmp	r3, #4
   148a4:	d103      	bne.n	148ae <LORAWAN_TxHandler+0x4a>
   148a6:	0030      	movs	r0, r6
   148a8:	4b23      	ldr	r3, [pc, #140]	; (14938 <LORAWAN_TxHandler+0xd4>)
   148aa:	7035      	strb	r5, [r6, #0]
   148ac:	4798      	blx	r3
   148ae:	4b23      	ldr	r3, [pc, #140]	; (1493c <LORAWAN_TxHandler+0xd8>)
   148b0:	9803      	ldr	r0, [sp, #12]
   148b2:	9904      	ldr	r1, [sp, #16]
   148b4:	9a05      	ldr	r2, [sp, #20]
   148b6:	4798      	blx	r3
   148b8:	0023      	movs	r3, r4
   148ba:	33fc      	adds	r3, #252	; 0xfc
   148bc:	681d      	ldr	r5, [r3, #0]
   148be:	4f20      	ldr	r7, [pc, #128]	; (14940 <LORAWAN_TxHandler+0xdc>)
   148c0:	4b20      	ldr	r3, [pc, #128]	; (14944 <LORAWAN_TxHandler+0xe0>)
   148c2:	2d00      	cmp	r5, #0
   148c4:	d023      	beq.n	1490e <LORAWAN_TxHandler+0xaa>
   148c6:	2201      	movs	r2, #1
   148c8:	54e2      	strb	r2, [r4, r3]
   148ca:	7828      	ldrb	r0, [r5, #0]
   148cc:	7a2b      	ldrb	r3, [r5, #8]
   148ce:	1e42      	subs	r2, r0, #1
   148d0:	4190      	sbcs	r0, r2
   148d2:	7869      	ldrb	r1, [r5, #1]
   148d4:	686a      	ldr	r2, [r5, #4]
   148d6:	b2c0      	uxtb	r0, r0
   148d8:	47b8      	blx	r7
   148da:	0023      	movs	r3, r4
   148dc:	33c6      	adds	r3, #198	; 0xc6
   148de:	881b      	ldrh	r3, [r3, #0]
   148e0:	0030      	movs	r0, r6
   148e2:	7033      	strb	r3, [r6, #0]
   148e4:	4b18      	ldr	r3, [pc, #96]	; (14948 <LORAWAN_TxHandler+0xe4>)
   148e6:	6073      	str	r3, [r6, #4]
   148e8:	4b18      	ldr	r3, [pc, #96]	; (1494c <LORAWAN_TxHandler+0xe8>)
   148ea:	4798      	blx	r3
   148ec:	2800      	cmp	r0, #0
   148ee:	d114      	bne.n	1491a <LORAWAN_TxHandler+0xb6>
   148f0:	0021      	movs	r1, r4
   148f2:	220e      	movs	r2, #14
   148f4:	317c      	adds	r1, #124	; 0x7c
   148f6:	780b      	ldrb	r3, [r1, #0]
   148f8:	4393      	bics	r3, r2
   148fa:	001a      	movs	r2, r3
   148fc:	2302      	movs	r3, #2
   148fe:	4313      	orrs	r3, r2
   14900:	700b      	strb	r3, [r1, #0]
   14902:	2208      	movs	r2, #8
   14904:	348c      	adds	r4, #140	; 0x8c
   14906:	7823      	ldrb	r3, [r4, #0]
   14908:	4393      	bics	r3, r2
   1490a:	7023      	strb	r3, [r4, #0]
   1490c:	e7c2      	b.n	14894 <LORAWAN_TxHandler+0x30>
   1490e:	54e5      	strb	r5, [r4, r3]
   14910:	002a      	movs	r2, r5
   14912:	002b      	movs	r3, r5
   14914:	0029      	movs	r1, r5
   14916:	0028      	movs	r0, r5
   14918:	e7de      	b.n	148d8 <LORAWAN_TxHandler+0x74>
   1491a:	0022      	movs	r2, r4
   1491c:	2120      	movs	r1, #32
   1491e:	328c      	adds	r2, #140	; 0x8c
   14920:	7813      	ldrb	r3, [r2, #0]
   14922:	438b      	bics	r3, r1
   14924:	7013      	strb	r3, [r2, #0]
   14926:	4b03      	ldr	r3, [pc, #12]	; (14934 <LORAWAN_TxHandler+0xd0>)
   14928:	4798      	blx	r3
   1492a:	e7ea      	b.n	14902 <LORAWAN_TxHandler+0x9e>
   1492c:	20002b5c 	.word	0x20002b5c
   14930:	0000d895 	.word	0x0000d895
   14934:	00011421 	.word	0x00011421
   14938:	00015de5 	.word	0x00015de5
   1493c:	00010ea9 	.word	0x00010ea9
   14940:	00011489 	.word	0x00011489
   14944:	0000021e 	.word	0x0000021e
   14948:	20002da1 	.word	0x20002da1
   1494c:	00015511 	.word	0x00015511

00014950 <LORAWAN_JoinReqHandler>:
   14950:	b530      	push	{r4, r5, lr}
   14952:	b087      	sub	sp, #28
   14954:	466a      	mov	r2, sp
   14956:	2300      	movs	r3, #0
   14958:	4c2a      	ldr	r4, [pc, #168]	; (14a04 <LORAWAN_JoinReqHandler+0xb4>)
   1495a:	7013      	strb	r3, [r2, #0]
   1495c:	0023      	movs	r3, r4
   1495e:	33e1      	adds	r3, #225	; 0xe1
   14960:	781b      	ldrb	r3, [r3, #0]
   14962:	7053      	strb	r3, [r2, #1]
   14964:	0023      	movs	r3, r4
   14966:	33df      	adds	r3, #223	; 0xdf
   14968:	781b      	ldrb	r3, [r3, #0]
   1496a:	7093      	strb	r3, [r2, #2]
   1496c:	0023      	movs	r3, r4
   1496e:	33ff      	adds	r3, #255	; 0xff
   14970:	7c5b      	ldrb	r3, [r3, #17]
   14972:	069b      	lsls	r3, r3, #26
   14974:	d511      	bpl.n	1499a <LORAWAN_JoinReqHandler+0x4a>
   14976:	0023      	movs	r3, r4
   14978:	336f      	adds	r3, #111	; 0x6f
   1497a:	781a      	ldrb	r2, [r3, #0]
   1497c:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1497e:	021b      	lsls	r3, r3, #8
   14980:	4313      	orrs	r3, r2
   14982:	0022      	movs	r2, r4
   14984:	3273      	adds	r2, #115	; 0x73
   14986:	7811      	ldrb	r1, [r2, #0]
   14988:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1498a:	0212      	lsls	r2, r2, #8
   1498c:	430a      	orrs	r2, r1
   1498e:	4313      	orrs	r3, r2
   14990:	d103      	bne.n	1499a <LORAWAN_JoinReqHandler+0x4a>
   14992:	0023      	movs	r3, r4
   14994:	2201      	movs	r2, #1
   14996:	337b      	adds	r3, #123	; 0x7b
   14998:	701a      	strb	r2, [r3, #0]
   1499a:	aa03      	add	r2, sp, #12
   1499c:	4669      	mov	r1, sp
   1499e:	202f      	movs	r0, #47	; 0x2f
   149a0:	4b19      	ldr	r3, [pc, #100]	; (14a08 <LORAWAN_JoinReqHandler+0xb8>)
   149a2:	4798      	blx	r3
   149a4:	2808      	cmp	r0, #8
   149a6:	d004      	beq.n	149b2 <LORAWAN_JoinReqHandler+0x62>
   149a8:	4b18      	ldr	r3, [pc, #96]	; (14a0c <LORAWAN_JoinReqHandler+0xbc>)
   149aa:	4798      	blx	r3
   149ac:	2000      	movs	r0, #0
   149ae:	b007      	add	sp, #28
   149b0:	bd30      	pop	{r4, r5, pc}
   149b2:	4b17      	ldr	r3, [pc, #92]	; (14a10 <LORAWAN_JoinReqHandler+0xc0>)
   149b4:	9803      	ldr	r0, [sp, #12]
   149b6:	9904      	ldr	r1, [sp, #16]
   149b8:	9a05      	ldr	r2, [sp, #20]
   149ba:	4798      	blx	r3
   149bc:	0023      	movs	r3, r4
   149be:	33f4      	adds	r3, #244	; 0xf4
   149c0:	781b      	ldrb	r3, [r3, #0]
   149c2:	ad01      	add	r5, sp, #4
   149c4:	2b04      	cmp	r3, #4
   149c6:	d104      	bne.n	149d2 <LORAWAN_JoinReqHandler+0x82>
   149c8:	3b03      	subs	r3, #3
   149ca:	702b      	strb	r3, [r5, #0]
   149cc:	0028      	movs	r0, r5
   149ce:	4b11      	ldr	r3, [pc, #68]	; (14a14 <LORAWAN_JoinReqHandler+0xc4>)
   149d0:	4798      	blx	r3
   149d2:	2200      	movs	r2, #0
   149d4:	4b10      	ldr	r3, [pc, #64]	; (14a18 <LORAWAN_JoinReqHandler+0xc8>)
   149d6:	54e2      	strb	r2, [r4, r3]
   149d8:	4b10      	ldr	r3, [pc, #64]	; (14a1c <LORAWAN_JoinReqHandler+0xcc>)
   149da:	4798      	blx	r3
   149dc:	4b10      	ldr	r3, [pc, #64]	; (14a20 <LORAWAN_JoinReqHandler+0xd0>)
   149de:	7028      	strb	r0, [r5, #0]
   149e0:	606b      	str	r3, [r5, #4]
   149e2:	0028      	movs	r0, r5
   149e4:	4b0f      	ldr	r3, [pc, #60]	; (14a24 <LORAWAN_JoinReqHandler+0xd4>)
   149e6:	4798      	blx	r3
   149e8:	2800      	cmp	r0, #0
   149ea:	d001      	beq.n	149f0 <LORAWAN_JoinReqHandler+0xa0>
   149ec:	201b      	movs	r0, #27
   149ee:	e7db      	b.n	149a8 <LORAWAN_JoinReqHandler+0x58>
   149f0:	220e      	movs	r2, #14
   149f2:	347c      	adds	r4, #124	; 0x7c
   149f4:	7823      	ldrb	r3, [r4, #0]
   149f6:	4393      	bics	r3, r2
   149f8:	001a      	movs	r2, r3
   149fa:	2302      	movs	r3, #2
   149fc:	4313      	orrs	r3, r2
   149fe:	7023      	strb	r3, [r4, #0]
   14a00:	e7d4      	b.n	149ac <LORAWAN_JoinReqHandler+0x5c>
   14a02:	46c0      	nop			; (mov r8, r8)
   14a04:	20002b5c 	.word	0x20002b5c
   14a08:	0000d895 	.word	0x0000d895
   14a0c:	00010919 	.word	0x00010919
   14a10:	00010ea9 	.word	0x00010ea9
   14a14:	00015de5 	.word	0x00015de5
   14a18:	0000021e 	.word	0x0000021e
   14a1c:	00010cf5 	.word	0x00010cf5
   14a20:	20002d91 	.word	0x20002d91
   14a24:	00015511 	.word	0x00015511

00014a28 <LORAWAN_RxHandler>:
   14a28:	b513      	push	{r0, r1, r4, lr}
   14a2a:	4b0c      	ldr	r3, [pc, #48]	; (14a5c <LORAWAN_RxHandler+0x34>)
   14a2c:	781b      	ldrb	r3, [r3, #0]
   14a2e:	2b08      	cmp	r3, #8
   14a30:	d011      	beq.n	14a56 <LORAWAN_RxHandler+0x2e>
   14a32:	2b10      	cmp	r3, #16
   14a34:	d001      	beq.n	14a3a <LORAWAN_RxHandler+0x12>
   14a36:	2b01      	cmp	r3, #1
   14a38:	d10b      	bne.n	14a52 <LORAWAN_RxHandler+0x2a>
   14a3a:	466b      	mov	r3, sp
   14a3c:	1c9c      	adds	r4, r3, #2
   14a3e:	0021      	movs	r1, r4
   14a40:	a801      	add	r0, sp, #4
   14a42:	4b07      	ldr	r3, [pc, #28]	; (14a60 <LORAWAN_RxHandler+0x38>)
   14a44:	4798      	blx	r3
   14a46:	9801      	ldr	r0, [sp, #4]
   14a48:	2800      	cmp	r0, #0
   14a4a:	d002      	beq.n	14a52 <LORAWAN_RxHandler+0x2a>
   14a4c:	7821      	ldrb	r1, [r4, #0]
   14a4e:	4b05      	ldr	r3, [pc, #20]	; (14a64 <LORAWAN_RxHandler+0x3c>)
   14a50:	4798      	blx	r3
   14a52:	2000      	movs	r0, #0
   14a54:	bd16      	pop	{r1, r2, r4, pc}
   14a56:	4b04      	ldr	r3, [pc, #16]	; (14a68 <LORAWAN_RxHandler+0x40>)
   14a58:	4798      	blx	r3
   14a5a:	e7fa      	b.n	14a52 <LORAWAN_RxHandler+0x2a>
   14a5c:	20002d90 	.word	0x20002d90
   14a60:	000156dd 	.word	0x000156dd
   14a64:	00012e5d 	.word	0x00012e5d
   14a68:	0001262d 	.word	0x0001262d

00014a6c <LORAWAN_PostTask>:
   14a6c:	b510      	push	{r4, lr}
   14a6e:	4b08      	ldr	r3, [pc, #32]	; (14a90 <LORAWAN_PostTask+0x24>)
   14a70:	0004      	movs	r4, r0
   14a72:	4798      	blx	r3
   14a74:	2201      	movs	r2, #1
   14a76:	40a2      	lsls	r2, r4
   14a78:	4906      	ldr	r1, [pc, #24]	; (14a94 <LORAWAN_PostTask+0x28>)
   14a7a:	780b      	ldrb	r3, [r1, #0]
   14a7c:	4313      	orrs	r3, r2
   14a7e:	b2db      	uxtb	r3, r3
   14a80:	700b      	strb	r3, [r1, #0]
   14a82:	4b05      	ldr	r3, [pc, #20]	; (14a98 <LORAWAN_PostTask+0x2c>)
   14a84:	4798      	blx	r3
   14a86:	2004      	movs	r0, #4
   14a88:	4b04      	ldr	r3, [pc, #16]	; (14a9c <LORAWAN_PostTask+0x30>)
   14a8a:	4798      	blx	r3
   14a8c:	bd10      	pop	{r4, pc}
   14a8e:	46c0      	nop			; (mov r8, r8)
   14a90:	00008349 	.word	0x00008349
   14a94:	20001120 	.word	0x20001120
   14a98:	00008355 	.word	0x00008355
   14a9c:	0000f435 	.word	0x0000f435

00014aa0 <LORAWAN_TaskHandler>:
   14aa0:	b570      	push	{r4, r5, r6, lr}
   14aa2:	2601      	movs	r6, #1
   14aa4:	4d0e      	ldr	r5, [pc, #56]	; (14ae0 <LORAWAN_TaskHandler+0x40>)
   14aa6:	e015      	b.n	14ad4 <LORAWAN_TaskHandler+0x34>
   14aa8:	2400      	movs	r4, #0
   14aaa:	782b      	ldrb	r3, [r5, #0]
   14aac:	4123      	asrs	r3, r4
   14aae:	4233      	tst	r3, r6
   14ab0:	d00d      	beq.n	14ace <LORAWAN_TaskHandler+0x2e>
   14ab2:	4b0c      	ldr	r3, [pc, #48]	; (14ae4 <LORAWAN_TaskHandler+0x44>)
   14ab4:	4798      	blx	r3
   14ab6:	0032      	movs	r2, r6
   14ab8:	40a2      	lsls	r2, r4
   14aba:	782b      	ldrb	r3, [r5, #0]
   14abc:	00a4      	lsls	r4, r4, #2
   14abe:	4393      	bics	r3, r2
   14ac0:	702b      	strb	r3, [r5, #0]
   14ac2:	4b09      	ldr	r3, [pc, #36]	; (14ae8 <LORAWAN_TaskHandler+0x48>)
   14ac4:	4798      	blx	r3
   14ac6:	4b09      	ldr	r3, [pc, #36]	; (14aec <LORAWAN_TaskHandler+0x4c>)
   14ac8:	58e3      	ldr	r3, [r4, r3]
   14aca:	4798      	blx	r3
   14acc:	e7ea      	b.n	14aa4 <LORAWAN_TaskHandler+0x4>
   14ace:	3401      	adds	r4, #1
   14ad0:	2c03      	cmp	r4, #3
   14ad2:	d1ea      	bne.n	14aaa <LORAWAN_TaskHandler+0xa>
   14ad4:	7828      	ldrb	r0, [r5, #0]
   14ad6:	b2c0      	uxtb	r0, r0
   14ad8:	2800      	cmp	r0, #0
   14ada:	d1e5      	bne.n	14aa8 <LORAWAN_TaskHandler+0x8>
   14adc:	bd70      	pop	{r4, r5, r6, pc}
   14ade:	46c0      	nop			; (mov r8, r8)
   14ae0:	20001120 	.word	0x20001120
   14ae4:	00008349 	.word	0x00008349
   14ae8:	00008355 	.word	0x00008355
   14aec:	00020388 	.word	0x00020388

00014af0 <RADIO_GetAttr>:
   14af0:	b510      	push	{r4, lr}
   14af2:	000b      	movs	r3, r1
   14af4:	281f      	cmp	r0, #31
   14af6:	d900      	bls.n	14afa <RADIO_GetAttr+0xa>
   14af8:	e069      	b.n	14bce <RADIO_GetAttr+0xde>
   14afa:	f001 fd49 	bl	16590 <__gnu_thumb1_case_uqi>
   14afe:	1410      	.short	0x1410
   14b00:	68201c19 	.word	0x68201c19
   14b04:	312e2a27 	.word	0x312e2a27
   14b08:	3d3a3734 	.word	0x3d3a3734
   14b0c:	46434054 	.word	0x46434054
   14b10:	68245149 	.word	0x68245149
   14b14:	68686859 	.word	0x68686859
   14b18:	5c686817 	.word	0x5c686817
   14b1c:	6360      	.short	0x6360
   14b1e:	4a2d      	ldr	r2, [pc, #180]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b20:	7e12      	ldrb	r2, [r2, #24]
   14b22:	701a      	strb	r2, [r3, #0]
   14b24:	e002      	b.n	14b2c <RADIO_GetAttr+0x3c>
   14b26:	4a2b      	ldr	r2, [pc, #172]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b28:	6812      	ldr	r2, [r2, #0]
   14b2a:	601a      	str	r2, [r3, #0]
   14b2c:	2000      	movs	r0, #0
   14b2e:	bd10      	pop	{r4, pc}
   14b30:	4a28      	ldr	r2, [pc, #160]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b32:	6852      	ldr	r2, [r2, #4]
   14b34:	e7f9      	b.n	14b2a <RADIO_GetAttr+0x3a>
   14b36:	4a27      	ldr	r2, [pc, #156]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b38:	8a92      	ldrh	r2, [r2, #20]
   14b3a:	801a      	strh	r2, [r3, #0]
   14b3c:	e7f6      	b.n	14b2c <RADIO_GetAttr+0x3c>
   14b3e:	4a25      	ldr	r2, [pc, #148]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b40:	3203      	adds	r2, #3
   14b42:	7fd2      	ldrb	r2, [r2, #31]
   14b44:	e7ed      	b.n	14b22 <RADIO_GetAttr+0x32>
   14b46:	4a23      	ldr	r2, [pc, #140]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b48:	3204      	adds	r2, #4
   14b4a:	e7fa      	b.n	14b42 <RADIO_GetAttr+0x52>
   14b4c:	4a21      	ldr	r2, [pc, #132]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b4e:	3206      	adds	r2, #6
   14b50:	e7f7      	b.n	14b42 <RADIO_GetAttr+0x52>
   14b52:	4a20      	ldr	r2, [pc, #128]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b54:	3236      	adds	r2, #54	; 0x36
   14b56:	7812      	ldrb	r2, [r2, #0]
   14b58:	e7e3      	b.n	14b22 <RADIO_GetAttr+0x32>
   14b5a:	4a1e      	ldr	r2, [pc, #120]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b5c:	3205      	adds	r2, #5
   14b5e:	e7f0      	b.n	14b42 <RADIO_GetAttr+0x52>
   14b60:	4a1c      	ldr	r2, [pc, #112]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b62:	3234      	adds	r2, #52	; 0x34
   14b64:	e7f7      	b.n	14b56 <RADIO_GetAttr+0x66>
   14b66:	4a1b      	ldr	r2, [pc, #108]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b68:	8ad2      	ldrh	r2, [r2, #22]
   14b6a:	e7e6      	b.n	14b3a <RADIO_GetAttr+0x4a>
   14b6c:	4a19      	ldr	r2, [pc, #100]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b6e:	3233      	adds	r2, #51	; 0x33
   14b70:	e7f1      	b.n	14b56 <RADIO_GetAttr+0x66>
   14b72:	4a18      	ldr	r2, [pc, #96]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b74:	68d2      	ldr	r2, [r2, #12]
   14b76:	e7d8      	b.n	14b2a <RADIO_GetAttr+0x3a>
   14b78:	4a16      	ldr	r2, [pc, #88]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b7a:	6892      	ldr	r2, [r2, #8]
   14b7c:	e7d5      	b.n	14b2a <RADIO_GetAttr+0x3a>
   14b7e:	4a15      	ldr	r2, [pc, #84]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b80:	3237      	adds	r2, #55	; 0x37
   14b82:	e7e8      	b.n	14b56 <RADIO_GetAttr+0x66>
   14b84:	4a13      	ldr	r2, [pc, #76]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b86:	3238      	adds	r2, #56	; 0x38
   14b88:	e7e5      	b.n	14b56 <RADIO_GetAttr+0x66>
   14b8a:	4a12      	ldr	r2, [pc, #72]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b8c:	3239      	adds	r2, #57	; 0x39
   14b8e:	e7e2      	b.n	14b56 <RADIO_GetAttr+0x66>
   14b90:	4a10      	ldr	r2, [pc, #64]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14b92:	4911      	ldr	r1, [pc, #68]	; (14bd8 <RADIO_GetAttr+0xe8>)
   14b94:	3202      	adds	r2, #2
   14b96:	7fd2      	ldrb	r2, [r2, #31]
   14b98:	0018      	movs	r0, r3
   14b9a:	4b10      	ldr	r3, [pc, #64]	; (14bdc <RADIO_GetAttr+0xec>)
   14b9c:	4798      	blx	r3
   14b9e:	e7c5      	b.n	14b2c <RADIO_GetAttr+0x3c>
   14ba0:	4a0c      	ldr	r2, [pc, #48]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14ba2:	3202      	adds	r2, #2
   14ba4:	e7cd      	b.n	14b42 <RADIO_GetAttr+0x52>
   14ba6:	4a0b      	ldr	r2, [pc, #44]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14ba8:	3232      	adds	r2, #50	; 0x32
   14baa:	7812      	ldrb	r2, [r2, #0]
   14bac:	b252      	sxtb	r2, r2
   14bae:	e7b8      	b.n	14b22 <RADIO_GetAttr+0x32>
   14bb0:	4a08      	ldr	r2, [pc, #32]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14bb2:	3235      	adds	r2, #53	; 0x35
   14bb4:	e7cf      	b.n	14b56 <RADIO_GetAttr+0x66>
   14bb6:	4907      	ldr	r1, [pc, #28]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14bb8:	2206      	movs	r2, #6
   14bba:	313c      	adds	r1, #60	; 0x3c
   14bbc:	e7ec      	b.n	14b98 <RADIO_GetAttr+0xa8>
   14bbe:	4a05      	ldr	r2, [pc, #20]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14bc0:	3254      	adds	r2, #84	; 0x54
   14bc2:	e7c8      	b.n	14b56 <RADIO_GetAttr+0x66>
   14bc4:	4a03      	ldr	r2, [pc, #12]	; (14bd4 <RADIO_GetAttr+0xe4>)
   14bc6:	3256      	adds	r2, #86	; 0x56
   14bc8:	2100      	movs	r1, #0
   14bca:	5e52      	ldrsh	r2, [r2, r1]
   14bcc:	e7b5      	b.n	14b3a <RADIO_GetAttr+0x4a>
   14bce:	2005      	movs	r0, #5
   14bd0:	e7ad      	b.n	14b2e <RADIO_GetAttr+0x3e>
   14bd2:	46c0      	nop			; (mov r8, r8)
   14bd4:	20002980 	.word	0x20002980
   14bd8:	20002999 	.word	0x20002999
   14bdc:	00019d1d 	.word	0x00019d1d

00014be0 <RADIO_SetAttr>:
   14be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14be2:	4b71      	ldr	r3, [pc, #452]	; (14da8 <RADIO_SetAttr+0x1c8>)
   14be4:	0004      	movs	r4, r0
   14be6:	000d      	movs	r5, r1
   14be8:	4798      	blx	r3
   14bea:	2304      	movs	r3, #4
   14bec:	2801      	cmp	r0, #1
   14bee:	d11a      	bne.n	14c26 <RADIO_SetAttr+0x46>
   14bf0:	2c1d      	cmp	r4, #29
   14bf2:	d900      	bls.n	14bf6 <RADIO_SetAttr+0x16>
   14bf4:	e0d5      	b.n	14da2 <RADIO_SetAttr+0x1c2>
   14bf6:	0020      	movs	r0, r4
   14bf8:	f001 fcca 	bl	16590 <__gnu_thumb1_case_uqi>
   14bfc:	605c4844 	.word	0x605c4844
   14c00:	7770d364 	.word	0x7770d364
   14c04:	908c8480 	.word	0x908c8480
   14c08:	a0d39c99 	.word	0xa0d39c99
   14c0c:	c2bab1a8 	.word	0xc2bab1a8
   14c10:	d3cad369 	.word	0xd3cad369
   14c14:	d30fd3d3 	.word	0xd30fd3d3
   14c18:	17d3      	.short	0x17d3
   14c1a:	2303      	movs	r3, #3
   14c1c:	2d00      	cmp	r5, #0
   14c1e:	d002      	beq.n	14c26 <RADIO_SetAttr+0x46>
   14c20:	4b62      	ldr	r3, [pc, #392]	; (14dac <RADIO_SetAttr+0x1cc>)
   14c22:	611d      	str	r5, [r3, #16]
   14c24:	2300      	movs	r3, #0
   14c26:	0018      	movs	r0, r3
   14c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14c2a:	796c      	ldrb	r4, [r5, #5]
   14c2c:	2c00      	cmp	r4, #0
   14c2e:	d109      	bne.n	14c44 <RADIO_SetAttr+0x64>
   14c30:	4b5e      	ldr	r3, [pc, #376]	; (14dac <RADIO_SetAttr+0x1cc>)
   14c32:	001a      	movs	r2, r3
   14c34:	649c      	str	r4, [r3, #72]	; 0x48
   14c36:	879c      	strh	r4, [r3, #60]	; 0x3c
   14c38:	87dc      	strh	r4, [r3, #62]	; 0x3e
   14c3a:	3240      	adds	r2, #64	; 0x40
   14c3c:	3341      	adds	r3, #65	; 0x41
   14c3e:	7014      	strb	r4, [r2, #0]
   14c40:	701c      	strb	r4, [r3, #0]
   14c42:	e7ef      	b.n	14c24 <RADIO_SetAttr+0x44>
   14c44:	882f      	ldrh	r7, [r5, #0]
   14c46:	2303      	movs	r3, #3
   14c48:	2f00      	cmp	r7, #0
   14c4a:	d0ec      	beq.n	14c26 <RADIO_SetAttr+0x46>
   14c4c:	792e      	ldrb	r6, [r5, #4]
   14c4e:	2e00      	cmp	r6, #0
   14c50:	d0e9      	beq.n	14c26 <RADIO_SetAttr+0x46>
   14c52:	20fa      	movs	r0, #250	; 0xfa
   14c54:	2202      	movs	r2, #2
   14c56:	5eab      	ldrsh	r3, [r5, r2]
   14c58:	0080      	lsls	r0, r0, #2
   14c5a:	0031      	movs	r1, r6
   14c5c:	9301      	str	r3, [sp, #4]
   14c5e:	4378      	muls	r0, r7
   14c60:	4b53      	ldr	r3, [pc, #332]	; (14db0 <RADIO_SetAttr+0x1d0>)
   14c62:	4798      	blx	r3
   14c64:	4b53      	ldr	r3, [pc, #332]	; (14db4 <RADIO_SetAttr+0x1d4>)
   14c66:	4798      	blx	r3
   14c68:	4b53      	ldr	r3, [pc, #332]	; (14db8 <RADIO_SetAttr+0x1d8>)
   14c6a:	4798      	blx	r3
   14c6c:	466b      	mov	r3, sp
   14c6e:	4d4f      	ldr	r5, [pc, #316]	; (14dac <RADIO_SetAttr+0x1cc>)
   14c70:	889b      	ldrh	r3, [r3, #4]
   14c72:	64a8      	str	r0, [r5, #72]	; 0x48
   14c74:	87eb      	strh	r3, [r5, #62]	; 0x3e
   14c76:	002b      	movs	r3, r5
   14c78:	87af      	strh	r7, [r5, #60]	; 0x3c
   14c7a:	3340      	adds	r3, #64	; 0x40
   14c7c:	3541      	adds	r5, #65	; 0x41
   14c7e:	701e      	strb	r6, [r3, #0]
   14c80:	702c      	strb	r4, [r5, #0]
   14c82:	e7cf      	b.n	14c24 <RADIO_SetAttr+0x44>
   14c84:	782a      	ldrb	r2, [r5, #0]
   14c86:	4b49      	ldr	r3, [pc, #292]	; (14dac <RADIO_SetAttr+0x1cc>)
   14c88:	761a      	strb	r2, [r3, #24]
   14c8a:	e7cb      	b.n	14c24 <RADIO_SetAttr+0x44>
   14c8c:	4b4b      	ldr	r3, [pc, #300]	; (14dbc <RADIO_SetAttr+0x1dc>)
   14c8e:	682a      	ldr	r2, [r5, #0]
   14c90:	18d1      	adds	r1, r2, r3
   14c92:	4b4b      	ldr	r3, [pc, #300]	; (14dc0 <RADIO_SetAttr+0x1e0>)
   14c94:	4299      	cmp	r1, r3
   14c96:	d90a      	bls.n	14cae <RADIO_SetAttr+0xce>
   14c98:	4b4a      	ldr	r3, [pc, #296]	; (14dc4 <RADIO_SetAttr+0x1e4>)
   14c9a:	494b      	ldr	r1, [pc, #300]	; (14dc8 <RADIO_SetAttr+0x1e8>)
   14c9c:	18d3      	adds	r3, r2, r3
   14c9e:	428b      	cmp	r3, r1
   14ca0:	d905      	bls.n	14cae <RADIO_SetAttr+0xce>
   14ca2:	494a      	ldr	r1, [pc, #296]	; (14dcc <RADIO_SetAttr+0x1ec>)
   14ca4:	484a      	ldr	r0, [pc, #296]	; (14dd0 <RADIO_SetAttr+0x1f0>)
   14ca6:	1851      	adds	r1, r2, r1
   14ca8:	2305      	movs	r3, #5
   14caa:	4281      	cmp	r1, r0
   14cac:	d8bb      	bhi.n	14c26 <RADIO_SetAttr+0x46>
   14cae:	4b3f      	ldr	r3, [pc, #252]	; (14dac <RADIO_SetAttr+0x1cc>)
   14cb0:	601a      	str	r2, [r3, #0]
   14cb2:	e7b7      	b.n	14c24 <RADIO_SetAttr+0x44>
   14cb4:	682a      	ldr	r2, [r5, #0]
   14cb6:	4b3d      	ldr	r3, [pc, #244]	; (14dac <RADIO_SetAttr+0x1cc>)
   14cb8:	605a      	str	r2, [r3, #4]
   14cba:	e7b3      	b.n	14c24 <RADIO_SetAttr+0x44>
   14cbc:	882a      	ldrh	r2, [r5, #0]
   14cbe:	4b3b      	ldr	r3, [pc, #236]	; (14dac <RADIO_SetAttr+0x1cc>)
   14cc0:	829a      	strh	r2, [r3, #20]
   14cc2:	e7af      	b.n	14c24 <RADIO_SetAttr+0x44>
   14cc4:	4b39      	ldr	r3, [pc, #228]	; (14dac <RADIO_SetAttr+0x1cc>)
   14cc6:	782a      	ldrb	r2, [r5, #0]
   14cc8:	3303      	adds	r3, #3
   14cca:	77da      	strb	r2, [r3, #31]
   14ccc:	e7aa      	b.n	14c24 <RADIO_SetAttr+0x44>
   14cce:	782a      	ldrb	r2, [r5, #0]
   14cd0:	2305      	movs	r3, #5
   14cd2:	2a01      	cmp	r2, #1
   14cd4:	d8a7      	bhi.n	14c26 <RADIO_SetAttr+0x46>
   14cd6:	4b35      	ldr	r3, [pc, #212]	; (14dac <RADIO_SetAttr+0x1cc>)
   14cd8:	3304      	adds	r3, #4
   14cda:	e7f6      	b.n	14cca <RADIO_SetAttr+0xea>
   14cdc:	782a      	ldrb	r2, [r5, #0]
   14cde:	2305      	movs	r3, #5
   14ce0:	2a01      	cmp	r2, #1
   14ce2:	d8a0      	bhi.n	14c26 <RADIO_SetAttr+0x46>
   14ce4:	4b31      	ldr	r3, [pc, #196]	; (14dac <RADIO_SetAttr+0x1cc>)
   14ce6:	3306      	adds	r3, #6
   14ce8:	e7ef      	b.n	14cca <RADIO_SetAttr+0xea>
   14cea:	782a      	ldrb	r2, [r5, #0]
   14cec:	2305      	movs	r3, #5
   14cee:	1fd1      	subs	r1, r2, #7
   14cf0:	2902      	cmp	r1, #2
   14cf2:	d898      	bhi.n	14c26 <RADIO_SetAttr+0x46>
   14cf4:	4b2d      	ldr	r3, [pc, #180]	; (14dac <RADIO_SetAttr+0x1cc>)
   14cf6:	3336      	adds	r3, #54	; 0x36
   14cf8:	701a      	strb	r2, [r3, #0]
   14cfa:	e793      	b.n	14c24 <RADIO_SetAttr+0x44>
   14cfc:	4b2b      	ldr	r3, [pc, #172]	; (14dac <RADIO_SetAttr+0x1cc>)
   14cfe:	782a      	ldrb	r2, [r5, #0]
   14d00:	3305      	adds	r3, #5
   14d02:	e7e2      	b.n	14cca <RADIO_SetAttr+0xea>
   14d04:	782a      	ldrb	r2, [r5, #0]
   14d06:	2305      	movs	r3, #5
   14d08:	2a01      	cmp	r2, #1
   14d0a:	d900      	bls.n	14d0e <RADIO_SetAttr+0x12e>
   14d0c:	e78b      	b.n	14c26 <RADIO_SetAttr+0x46>
   14d0e:	4b27      	ldr	r3, [pc, #156]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d10:	3334      	adds	r3, #52	; 0x34
   14d12:	e7f1      	b.n	14cf8 <RADIO_SetAttr+0x118>
   14d14:	882a      	ldrh	r2, [r5, #0]
   14d16:	4b25      	ldr	r3, [pc, #148]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d18:	82da      	strh	r2, [r3, #22]
   14d1a:	e783      	b.n	14c24 <RADIO_SetAttr+0x44>
   14d1c:	782a      	ldrb	r2, [r5, #0]
   14d1e:	2305      	movs	r3, #5
   14d20:	1e51      	subs	r1, r2, #1
   14d22:	2903      	cmp	r1, #3
   14d24:	d900      	bls.n	14d28 <RADIO_SetAttr+0x148>
   14d26:	e77e      	b.n	14c26 <RADIO_SetAttr+0x46>
   14d28:	4b20      	ldr	r3, [pc, #128]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d2a:	3333      	adds	r3, #51	; 0x33
   14d2c:	e7e4      	b.n	14cf8 <RADIO_SetAttr+0x118>
   14d2e:	4b1f      	ldr	r3, [pc, #124]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d30:	682a      	ldr	r2, [r5, #0]
   14d32:	60da      	str	r2, [r3, #12]
   14d34:	682a      	ldr	r2, [r5, #0]
   14d36:	4b1d      	ldr	r3, [pc, #116]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d38:	609a      	str	r2, [r3, #8]
   14d3a:	e773      	b.n	14c24 <RADIO_SetAttr+0x44>
   14d3c:	782a      	ldrb	r2, [r5, #0]
   14d3e:	2305      	movs	r3, #5
   14d40:	2a03      	cmp	r2, #3
   14d42:	d900      	bls.n	14d46 <RADIO_SetAttr+0x166>
   14d44:	e76f      	b.n	14c26 <RADIO_SetAttr+0x46>
   14d46:	4b19      	ldr	r3, [pc, #100]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d48:	3337      	adds	r3, #55	; 0x37
   14d4a:	e7d5      	b.n	14cf8 <RADIO_SetAttr+0x118>
   14d4c:	782a      	ldrb	r2, [r5, #0]
   14d4e:	2305      	movs	r3, #5
   14d50:	1e51      	subs	r1, r2, #1
   14d52:	2916      	cmp	r1, #22
   14d54:	d900      	bls.n	14d58 <RADIO_SetAttr+0x178>
   14d56:	e766      	b.n	14c26 <RADIO_SetAttr+0x46>
   14d58:	4b14      	ldr	r3, [pc, #80]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d5a:	3338      	adds	r3, #56	; 0x38
   14d5c:	e7cc      	b.n	14cf8 <RADIO_SetAttr+0x118>
   14d5e:	782a      	ldrb	r2, [r5, #0]
   14d60:	2305      	movs	r3, #5
   14d62:	1e51      	subs	r1, r2, #1
   14d64:	2916      	cmp	r1, #22
   14d66:	d900      	bls.n	14d6a <RADIO_SetAttr+0x18a>
   14d68:	e75d      	b.n	14c26 <RADIO_SetAttr+0x46>
   14d6a:	4b10      	ldr	r3, [pc, #64]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d6c:	3339      	adds	r3, #57	; 0x39
   14d6e:	e7c3      	b.n	14cf8 <RADIO_SetAttr+0x118>
   14d70:	4b0e      	ldr	r3, [pc, #56]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d72:	0029      	movs	r1, r5
   14d74:	3302      	adds	r3, #2
   14d76:	7fda      	ldrb	r2, [r3, #31]
   14d78:	4816      	ldr	r0, [pc, #88]	; (14dd4 <RADIO_SetAttr+0x1f4>)
   14d7a:	4b17      	ldr	r3, [pc, #92]	; (14dd8 <RADIO_SetAttr+0x1f8>)
   14d7c:	4798      	blx	r3
   14d7e:	e751      	b.n	14c24 <RADIO_SetAttr+0x44>
   14d80:	782b      	ldrb	r3, [r5, #0]
   14d82:	1c1a      	adds	r2, r3, #0
   14d84:	2b08      	cmp	r3, #8
   14d86:	d900      	bls.n	14d8a <RADIO_SetAttr+0x1aa>
   14d88:	2208      	movs	r2, #8
   14d8a:	4b08      	ldr	r3, [pc, #32]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d8c:	3302      	adds	r3, #2
   14d8e:	e79c      	b.n	14cca <RADIO_SetAttr+0xea>
   14d90:	2305      	movs	r3, #5
   14d92:	782a      	ldrb	r2, [r5, #0]
   14d94:	1fd1      	subs	r1, r2, #7
   14d96:	4299      	cmp	r1, r3
   14d98:	d900      	bls.n	14d9c <RADIO_SetAttr+0x1bc>
   14d9a:	e744      	b.n	14c26 <RADIO_SetAttr+0x46>
   14d9c:	4b03      	ldr	r3, [pc, #12]	; (14dac <RADIO_SetAttr+0x1cc>)
   14d9e:	3335      	adds	r3, #53	; 0x35
   14da0:	e7aa      	b.n	14cf8 <RADIO_SetAttr+0x118>
   14da2:	2305      	movs	r3, #5
   14da4:	e73f      	b.n	14c26 <RADIO_SetAttr+0x46>
   14da6:	46c0      	nop			; (mov r8, r8)
   14da8:	000154f5 	.word	0x000154f5
   14dac:	20002980 	.word	0x20002980
   14db0:	000166cd 	.word	0x000166cd
   14db4:	00017911 	.word	0x00017911
   14db8:	00016a29 	.word	0x00016a29
   14dbc:	f7d58bc0 	.word	0xf7d58bc0
   14dc0:	0243d580 	.word	0x0243d580
   14dc4:	e78fe580 	.word	0xe78fe580
   14dc8:	06dac2c0 	.word	0x06dac2c0
   14dcc:	cc9eec80 	.word	0xcc9eec80
   14dd0:	096ae380 	.word	0x096ae380
   14dd4:	20002999 	.word	0x20002999
   14dd8:	00019d1d 	.word	0x00019d1d

00014ddc <RADIO_Init>:
   14ddc:	b510      	push	{r4, lr}
   14dde:	4b0c      	ldr	r3, [pc, #48]	; (14e10 <RADIO_Init+0x34>)
   14de0:	4798      	blx	r3
   14de2:	4b0c      	ldr	r3, [pc, #48]	; (14e14 <RADIO_Init+0x38>)
   14de4:	201f      	movs	r0, #31
   14de6:	4798      	blx	r3
   14de8:	4c0b      	ldr	r4, [pc, #44]	; (14e18 <RADIO_Init+0x3c>)
   14dea:	490c      	ldr	r1, [pc, #48]	; (14e1c <RADIO_Init+0x40>)
   14dec:	2001      	movs	r0, #1
   14dee:	47a0      	blx	r4
   14df0:	490b      	ldr	r1, [pc, #44]	; (14e20 <RADIO_Init+0x44>)
   14df2:	2002      	movs	r0, #2
   14df4:	47a0      	blx	r4
   14df6:	490b      	ldr	r1, [pc, #44]	; (14e24 <RADIO_Init+0x48>)
   14df8:	2004      	movs	r0, #4
   14dfa:	47a0      	blx	r4
   14dfc:	490a      	ldr	r1, [pc, #40]	; (14e28 <RADIO_Init+0x4c>)
   14dfe:	2008      	movs	r0, #8
   14e00:	47a0      	blx	r4
   14e02:	490a      	ldr	r1, [pc, #40]	; (14e2c <RADIO_Init+0x50>)
   14e04:	2010      	movs	r0, #16
   14e06:	47a0      	blx	r4
   14e08:	4909      	ldr	r1, [pc, #36]	; (14e30 <RADIO_Init+0x54>)
   14e0a:	2020      	movs	r0, #32
   14e0c:	47a0      	blx	r4
   14e0e:	bd10      	pop	{r4, pc}
   14e10:	00015bf1 	.word	0x00015bf1
   14e14:	00015501 	.word	0x00015501
   14e18:	0000816d 	.word	0x0000816d
   14e1c:	0001528d 	.word	0x0001528d
   14e20:	00015305 	.word	0x00015305
   14e24:	00015375 	.word	0x00015375
   14e28:	000153c5 	.word	0x000153c5
   14e2c:	000153ed 	.word	0x000153ed
   14e30:	00015415 	.word	0x00015415

00014e34 <Radio_WriteFrequency>:
   14e34:	b570      	push	{r4, r5, r6, lr}
   14e36:	490d      	ldr	r1, [pc, #52]	; (14e6c <Radio_WriteFrequency+0x38>)
   14e38:	4d0d      	ldr	r5, [pc, #52]	; (14e70 <Radio_WriteFrequency+0x3c>)
   14e3a:	0006      	movs	r6, r0
   14e3c:	47a8      	blx	r5
   14e3e:	4b0d      	ldr	r3, [pc, #52]	; (14e74 <Radio_WriteFrequency+0x40>)
   14e40:	0004      	movs	r4, r0
   14e42:	490a      	ldr	r1, [pc, #40]	; (14e6c <Radio_WriteFrequency+0x38>)
   14e44:	0030      	movs	r0, r6
   14e46:	4798      	blx	r3
   14e48:	0208      	lsls	r0, r1, #8
   14e4a:	4908      	ldr	r1, [pc, #32]	; (14e6c <Radio_WriteFrequency+0x38>)
   14e4c:	47a8      	blx	r5
   14e4e:	0224      	lsls	r4, r4, #8
   14e50:	1904      	adds	r4, r0, r4
   14e52:	0c21      	lsrs	r1, r4, #16
   14e54:	4d08      	ldr	r5, [pc, #32]	; (14e78 <Radio_WriteFrequency+0x44>)
   14e56:	b2c9      	uxtb	r1, r1
   14e58:	2006      	movs	r0, #6
   14e5a:	47a8      	blx	r5
   14e5c:	0a21      	lsrs	r1, r4, #8
   14e5e:	b2c9      	uxtb	r1, r1
   14e60:	2007      	movs	r0, #7
   14e62:	47a8      	blx	r5
   14e64:	b2e1      	uxtb	r1, r4
   14e66:	2008      	movs	r0, #8
   14e68:	47a8      	blx	r5
   14e6a:	bd70      	pop	{r4, r5, r6, pc}
   14e6c:	00003d09 	.word	0x00003d09
   14e70:	000165b9 	.word	0x000165b9
   14e74:	000166c5 	.word	0x000166c5
   14e78:	00008099 	.word	0x00008099

00014e7c <Radio_WriteConfiguration>:
   14e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   14e7e:	4cb0      	ldr	r4, [pc, #704]	; (15140 <Radio_WriteConfiguration+0x2c4>)
   14e80:	2200      	movs	r2, #0
   14e82:	0023      	movs	r3, r4
   14e84:	b085      	sub	sp, #20
   14e86:	9002      	str	r0, [sp, #8]
   14e88:	3334      	adds	r3, #52	; 0x34
   14e8a:	0010      	movs	r0, r2
   14e8c:	7819      	ldrb	r1, [r3, #0]
   14e8e:	4bad      	ldr	r3, [pc, #692]	; (15144 <Radio_WriteConfiguration+0x2c8>)
   14e90:	4798      	blx	r3
   14e92:	4bad      	ldr	r3, [pc, #692]	; (15148 <Radio_WriteConfiguration+0x2cc>)
   14e94:	6820      	ldr	r0, [r4, #0]
   14e96:	4798      	blx	r3
   14e98:	1ce3      	adds	r3, r4, #3
   14e9a:	1d62      	adds	r2, r4, #5
   14e9c:	7fdb      	ldrb	r3, [r3, #31]
   14e9e:	7fd2      	ldrb	r2, [r2, #31]
   14ea0:	b25b      	sxtb	r3, r3
   14ea2:	4eaa      	ldr	r6, [pc, #680]	; (1514c <Radio_WriteConfiguration+0x2d0>)
   14ea4:	4daa      	ldr	r5, [pc, #680]	; (15150 <Radio_WriteConfiguration+0x2d4>)
   14ea6:	2a00      	cmp	r2, #0
   14ea8:	d000      	beq.n	14eac <Radio_WriteConfiguration+0x30>
   14eaa:	e0fc      	b.n	150a6 <Radio_WriteConfiguration+0x22a>
   14eac:	1c1f      	adds	r7, r3, #0
   14eae:	2b0f      	cmp	r3, #15
   14eb0:	dc00      	bgt.n	14eb4 <Radio_WriteConfiguration+0x38>
   14eb2:	e0ec      	b.n	1508e <Radio_WriteConfiguration+0x212>
   14eb4:	270f      	movs	r7, #15
   14eb6:	b27b      	sxtb	r3, r7
   14eb8:	204d      	movs	r0, #77	; 0x4d
   14eba:	9301      	str	r3, [sp, #4]
   14ebc:	47b0      	blx	r6
   14ebe:	21f8      	movs	r1, #248	; 0xf8
   14ec0:	4008      	ands	r0, r1
   14ec2:	39f4      	subs	r1, #244	; 0xf4
   14ec4:	4301      	orrs	r1, r0
   14ec6:	204d      	movs	r0, #77	; 0x4d
   14ec8:	47a8      	blx	r5
   14eca:	b27b      	sxtb	r3, r7
   14ecc:	2b00      	cmp	r3, #0
   14ece:	db00      	blt.n	14ed2 <Radio_WriteConfiguration+0x56>
   14ed0:	e0e4      	b.n	1509c <Radio_WriteConfiguration+0x220>
   14ed2:	3703      	adds	r7, #3
   14ed4:	b2f9      	uxtb	r1, r7
   14ed6:	2720      	movs	r7, #32
   14ed8:	4339      	orrs	r1, r7
   14eda:	2009      	movs	r0, #9
   14edc:	47a8      	blx	r5
   14ede:	0023      	movs	r3, r4
   14ee0:	3334      	adds	r3, #52	; 0x34
   14ee2:	781f      	ldrb	r7, [r3, #0]
   14ee4:	2f01      	cmp	r7, #1
   14ee6:	d000      	beq.n	14eea <Radio_WriteConfiguration+0x6e>
   14ee8:	e144      	b.n	15174 <Radio_WriteConfiguration+0x2f8>
   14eea:	7e21      	ldrb	r1, [r4, #24]
   14eec:	2039      	movs	r0, #57	; 0x39
   14eee:	47a8      	blx	r5
   14ef0:	4b98      	ldr	r3, [pc, #608]	; (15154 <Radio_WriteConfiguration+0x2d8>)
   14ef2:	201d      	movs	r0, #29
   14ef4:	7819      	ldrb	r1, [r3, #0]
   14ef6:	0023      	movs	r3, r4
   14ef8:	3333      	adds	r3, #51	; 0x33
   14efa:	781b      	ldrb	r3, [r3, #0]
   14efc:	0109      	lsls	r1, r1, #4
   14efe:	005b      	lsls	r3, r3, #1
   14f00:	4319      	orrs	r1, r3
   14f02:	1de3      	adds	r3, r4, #7
   14f04:	7fdb      	ldrb	r3, [r3, #31]
   14f06:	401f      	ands	r7, r3
   14f08:	4339      	orrs	r1, r7
   14f0a:	b2c9      	uxtb	r1, r1
   14f0c:	47a8      	blx	r5
   14f0e:	1d23      	adds	r3, r4, #4
   14f10:	7fd9      	ldrb	r1, [r3, #31]
   14f12:	2304      	movs	r3, #4
   14f14:	0089      	lsls	r1, r1, #2
   14f16:	4019      	ands	r1, r3
   14f18:	0023      	movs	r3, r4
   14f1a:	3335      	adds	r3, #53	; 0x35
   14f1c:	781b      	ldrb	r3, [r3, #0]
   14f1e:	201e      	movs	r0, #30
   14f20:	011b      	lsls	r3, r3, #4
   14f22:	4319      	orrs	r1, r3
   14f24:	9b02      	ldr	r3, [sp, #8]
   14f26:	059b      	lsls	r3, r3, #22
   14f28:	0f9b      	lsrs	r3, r3, #30
   14f2a:	4319      	orrs	r1, r3
   14f2c:	b2c9      	uxtb	r1, r1
   14f2e:	47a8      	blx	r5
   14f30:	2300      	movs	r3, #0
   14f32:	8ae1      	ldrh	r1, [r4, #22]
   14f34:	4299      	cmp	r1, r3
   14f36:	d011      	beq.n	14f5c <Radio_WriteConfiguration+0xe0>
   14f38:	4a86      	ldr	r2, [pc, #536]	; (15154 <Radio_WriteConfiguration+0x2d8>)
   14f3a:	7812      	ldrb	r2, [r2, #0]
   14f3c:	2a08      	cmp	r2, #8
   14f3e:	d100      	bne.n	14f42 <Radio_WriteConfiguration+0xc6>
   14f40:	e0e4      	b.n	1510c <Radio_WriteConfiguration+0x290>
   14f42:	2a09      	cmp	r2, #9
   14f44:	d100      	bne.n	14f48 <Radio_WriteConfiguration+0xcc>
   14f46:	e0e3      	b.n	15110 <Radio_WriteConfiguration+0x294>
   14f48:	2a07      	cmp	r2, #7
   14f4a:	d000      	beq.n	14f4e <Radio_WriteConfiguration+0xd2>
   14f4c:	e0e3      	b.n	15116 <Radio_WriteConfiguration+0x29a>
   14f4e:	337d      	adds	r3, #125	; 0x7d
   14f50:	4359      	muls	r1, r3
   14f52:	0023      	movs	r3, r4
   14f54:	3335      	adds	r3, #53	; 0x35
   14f56:	781b      	ldrb	r3, [r3, #0]
   14f58:	40d9      	lsrs	r1, r3
   14f5a:	000b      	movs	r3, r1
   14f5c:	b2d9      	uxtb	r1, r3
   14f5e:	2024      	movs	r0, #36	; 0x24
   14f60:	4d7b      	ldr	r5, [pc, #492]	; (15150 <Radio_WriteConfiguration+0x2d4>)
   14f62:	47a8      	blx	r5
   14f64:	466b      	mov	r3, sp
   14f66:	201f      	movs	r0, #31
   14f68:	7a19      	ldrb	r1, [r3, #8]
   14f6a:	47a8      	blx	r5
   14f6c:	2026      	movs	r0, #38	; 0x26
   14f6e:	47b0      	blx	r6
   14f70:	0023      	movs	r3, r4
   14f72:	3335      	adds	r3, #53	; 0x35
   14f74:	781b      	ldrb	r3, [r3, #0]
   14f76:	2b0c      	cmp	r3, #12
   14f78:	d105      	bne.n	14f86 <Radio_WriteConfiguration+0x10a>
   14f7a:	0023      	movs	r3, r4
   14f7c:	3336      	adds	r3, #54	; 0x36
   14f7e:	781b      	ldrb	r3, [r3, #0]
   14f80:	3b07      	subs	r3, #7
   14f82:	2b01      	cmp	r3, #1
   14f84:	d906      	bls.n	14f94 <Radio_WriteConfiguration+0x118>
   14f86:	6b62      	ldr	r2, [r4, #52]	; 0x34
   14f88:	4b73      	ldr	r3, [pc, #460]	; (15158 <Radio_WriteConfiguration+0x2dc>)
   14f8a:	4013      	ands	r3, r2
   14f8c:	4a73      	ldr	r2, [pc, #460]	; (1515c <Radio_WriteConfiguration+0x2e0>)
   14f8e:	4293      	cmp	r3, r2
   14f90:	d000      	beq.n	14f94 <Radio_WriteConfiguration+0x118>
   14f92:	e0c2      	b.n	1511a <Radio_WriteConfiguration+0x29e>
   14f94:	2108      	movs	r1, #8
   14f96:	4308      	orrs	r0, r1
   14f98:	b2c0      	uxtb	r0, r0
   14f9a:	2104      	movs	r1, #4
   14f9c:	4301      	orrs	r1, r0
   14f9e:	2026      	movs	r0, #38	; 0x26
   14fa0:	47a8      	blx	r5
   14fa2:	2031      	movs	r0, #49	; 0x31
   14fa4:	47b0      	blx	r6
   14fa6:	21f8      	movs	r1, #248	; 0xf8
   14fa8:	4008      	ands	r0, r1
   14faa:	39f5      	subs	r1, #245	; 0xf5
   14fac:	4301      	orrs	r1, r0
   14fae:	2031      	movs	r0, #49	; 0x31
   14fb0:	47a8      	blx	r5
   14fb2:	210a      	movs	r1, #10
   14fb4:	2037      	movs	r0, #55	; 0x37
   14fb6:	47a8      	blx	r5
   14fb8:	0023      	movs	r3, r4
   14fba:	3331      	adds	r3, #49	; 0x31
   14fbc:	781b      	ldrb	r3, [r3, #0]
   14fbe:	2b12      	cmp	r3, #18
   14fc0:	d11e      	bne.n	15000 <Radio_WriteConfiguration+0x184>
   14fc2:	0023      	movs	r3, r4
   14fc4:	3336      	adds	r3, #54	; 0x36
   14fc6:	781b      	ldrb	r3, [r3, #0]
   14fc8:	3b07      	subs	r3, #7
   14fca:	2b01      	cmp	r3, #1
   14fcc:	d80b      	bhi.n	14fe6 <Radio_WriteConfiguration+0x16a>
   14fce:	2031      	movs	r0, #49	; 0x31
   14fd0:	47b0      	blx	r6
   14fd2:	217f      	movs	r1, #127	; 0x7f
   14fd4:	4001      	ands	r1, r0
   14fd6:	2031      	movs	r0, #49	; 0x31
   14fd8:	47a8      	blx	r5
   14fda:	2140      	movs	r1, #64	; 0x40
   14fdc:	202f      	movs	r0, #47	; 0x2f
   14fde:	47a8      	blx	r5
   14fe0:	2100      	movs	r1, #0
   14fe2:	2030      	movs	r0, #48	; 0x30
   14fe4:	47a8      	blx	r5
   14fe6:	0023      	movs	r3, r4
   14fe8:	3336      	adds	r3, #54	; 0x36
   14fea:	781b      	ldrb	r3, [r3, #0]
   14fec:	2b09      	cmp	r3, #9
   14fee:	d107      	bne.n	15000 <Radio_WriteConfiguration+0x184>
   14ff0:	2031      	movs	r0, #49	; 0x31
   14ff2:	47b0      	blx	r6
   14ff4:	2180      	movs	r1, #128	; 0x80
   14ff6:	4249      	negs	r1, r1
   14ff8:	4301      	orrs	r1, r0
   14ffa:	b2c9      	uxtb	r1, r1
   14ffc:	2031      	movs	r0, #49	; 0x31
   14ffe:	47a8      	blx	r5
   15000:	2033      	movs	r0, #51	; 0x33
   15002:	47b0      	blx	r6
   15004:	1da3      	adds	r3, r4, #6
   15006:	7fd9      	ldrb	r1, [r3, #31]
   15008:	2340      	movs	r3, #64	; 0x40
   1500a:	0189      	lsls	r1, r1, #6
   1500c:	4398      	bics	r0, r3
   1500e:	4019      	ands	r1, r3
   15010:	4301      	orrs	r1, r0
   15012:	b2c9      	uxtb	r1, r1
   15014:	2033      	movs	r0, #51	; 0x33
   15016:	47a8      	blx	r5
   15018:	8aa1      	ldrh	r1, [r4, #20]
   1501a:	2020      	movs	r0, #32
   1501c:	0a09      	lsrs	r1, r1, #8
   1501e:	47a8      	blx	r5
   15020:	7d21      	ldrb	r1, [r4, #20]
   15022:	2021      	movs	r0, #33	; 0x21
   15024:	47a8      	blx	r5
   15026:	2100      	movs	r1, #0
   15028:	200d      	movs	r0, #13
   1502a:	47a8      	blx	r5
   1502c:	2100      	movs	r1, #0
   1502e:	200e      	movs	r0, #14
   15030:	47a8      	blx	r5
   15032:	2100      	movs	r1, #0
   15034:	200f      	movs	r0, #15
   15036:	47a8      	blx	r5
   15038:	0023      	movs	r3, r4
   1503a:	3331      	adds	r3, #49	; 0x31
   1503c:	781b      	ldrb	r3, [r3, #0]
   1503e:	2b12      	cmp	r3, #18
   15040:	d120      	bne.n	15084 <Radio_WriteConfiguration+0x208>
   15042:	0023      	movs	r3, r4
   15044:	3336      	adds	r3, #54	; 0x36
   15046:	781b      	ldrb	r3, [r3, #0]
   15048:	2b09      	cmp	r3, #9
   1504a:	d000      	beq.n	1504e <Radio_WriteConfiguration+0x1d2>
   1504c:	e072      	b.n	15134 <Radio_WriteConfiguration+0x2b8>
   1504e:	4a44      	ldr	r2, [pc, #272]	; (15160 <Radio_WriteConfiguration+0x2e4>)
   15050:	6823      	ldr	r3, [r4, #0]
   15052:	1899      	adds	r1, r3, r2
   15054:	4a43      	ldr	r2, [pc, #268]	; (15164 <Radio_WriteConfiguration+0x2e8>)
   15056:	4291      	cmp	r1, r2
   15058:	d862      	bhi.n	15120 <Radio_WriteConfiguration+0x2a4>
   1505a:	2102      	movs	r1, #2
   1505c:	2036      	movs	r0, #54	; 0x36
   1505e:	47a8      	blx	r5
   15060:	2164      	movs	r1, #100	; 0x64
   15062:	203a      	movs	r0, #58	; 0x3a
   15064:	47a8      	blx	r5
   15066:	0023      	movs	r3, r4
   15068:	3336      	adds	r3, #54	; 0x36
   1506a:	781b      	ldrb	r3, [r3, #0]
   1506c:	2165      	movs	r1, #101	; 0x65
   1506e:	203a      	movs	r0, #58	; 0x3a
   15070:	2b09      	cmp	r3, #9
   15072:	d162      	bne.n	1513a <Radio_WriteConfiguration+0x2be>
   15074:	3406      	adds	r4, #6
   15076:	7fe3      	ldrb	r3, [r4, #31]
   15078:	2b01      	cmp	r3, #1
   1507a:	d15e      	bne.n	1513a <Radio_WriteConfiguration+0x2be>
   1507c:	47a8      	blx	r5
   1507e:	2119      	movs	r1, #25
   15080:	203b      	movs	r0, #59	; 0x3b
   15082:	47a8      	blx	r5
   15084:	21ff      	movs	r1, #255	; 0xff
   15086:	2012      	movs	r0, #18
   15088:	47a8      	blx	r5
   1508a:	b005      	add	sp, #20
   1508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1508e:	b25b      	sxtb	r3, r3
   15090:	3303      	adds	r3, #3
   15092:	db00      	blt.n	15096 <Radio_WriteConfiguration+0x21a>
   15094:	e70f      	b.n	14eb6 <Radio_WriteConfiguration+0x3a>
   15096:	4b34      	ldr	r3, [pc, #208]	; (15168 <Radio_WriteConfiguration+0x2ec>)
   15098:	781f      	ldrb	r7, [r3, #0]
   1509a:	e70c      	b.n	14eb6 <Radio_WriteConfiguration+0x3a>
   1509c:	2170      	movs	r1, #112	; 0x70
   1509e:	9b01      	ldr	r3, [sp, #4]
   150a0:	4319      	orrs	r1, r3
   150a2:	b2c9      	uxtb	r1, r1
   150a4:	e719      	b.n	14eda <Radio_WriteConfiguration+0x5e>
   150a6:	2b01      	cmp	r3, #1
   150a8:	dd07      	ble.n	150ba <Radio_WriteConfiguration+0x23e>
   150aa:	2714      	movs	r7, #20
   150ac:	2b13      	cmp	r3, #19
   150ae:	dc06      	bgt.n	150be <Radio_WriteConfiguration+0x242>
   150b0:	1c1f      	adds	r7, r3, #0
   150b2:	2b11      	cmp	r3, #17
   150b4:	dd02      	ble.n	150bc <Radio_WriteConfiguration+0x240>
   150b6:	2711      	movs	r7, #17
   150b8:	e000      	b.n	150bc <Radio_WriteConfiguration+0x240>
   150ba:	2702      	movs	r7, #2
   150bc:	b27f      	sxtb	r7, r7
   150be:	200b      	movs	r0, #11
   150c0:	47b0      	blx	r6
   150c2:	9003      	str	r0, [sp, #12]
   150c4:	204d      	movs	r0, #77	; 0x4d
   150c6:	47b0      	blx	r6
   150c8:	2307      	movs	r3, #7
   150ca:	4398      	bics	r0, r3
   150cc:	b2c1      	uxtb	r1, r0
   150ce:	2f14      	cmp	r7, #20
   150d0:	d112      	bne.n	150f8 <Radio_WriteConfiguration+0x27c>
   150d2:	4319      	orrs	r1, r3
   150d4:	9b03      	ldr	r3, [sp, #12]
   150d6:	37cb      	adds	r7, #203	; 0xcb
   150d8:	403b      	ands	r3, r7
   150da:	001f      	movs	r7, r3
   150dc:	230f      	movs	r3, #15
   150de:	9301      	str	r3, [sp, #4]
   150e0:	204d      	movs	r0, #77	; 0x4d
   150e2:	47a8      	blx	r5
   150e4:	2180      	movs	r1, #128	; 0x80
   150e6:	9b01      	ldr	r3, [sp, #4]
   150e8:	4249      	negs	r1, r1
   150ea:	4319      	orrs	r1, r3
   150ec:	b2c9      	uxtb	r1, r1
   150ee:	2009      	movs	r0, #9
   150f0:	47a8      	blx	r5
   150f2:	0039      	movs	r1, r7
   150f4:	200b      	movs	r0, #11
   150f6:	e6f1      	b.n	14edc <Radio_WriteConfiguration+0x60>
   150f8:	3f02      	subs	r7, #2
   150fa:	b27b      	sxtb	r3, r7
   150fc:	2720      	movs	r7, #32
   150fe:	2004      	movs	r0, #4
   15100:	9301      	str	r3, [sp, #4]
   15102:	9b03      	ldr	r3, [sp, #12]
   15104:	4301      	orrs	r1, r0
   15106:	431f      	orrs	r7, r3
   15108:	b2ff      	uxtb	r7, r7
   1510a:	e7e9      	b.n	150e0 <Radio_WriteConfiguration+0x264>
   1510c:	23fa      	movs	r3, #250	; 0xfa
   1510e:	e71f      	b.n	14f50 <Radio_WriteConfiguration+0xd4>
   15110:	23fa      	movs	r3, #250	; 0xfa
   15112:	005b      	lsls	r3, r3, #1
   15114:	e71c      	b.n	14f50 <Radio_WriteConfiguration+0xd4>
   15116:	0019      	movs	r1, r3
   15118:	e71b      	b.n	14f52 <Radio_WriteConfiguration+0xd6>
   1511a:	21f7      	movs	r1, #247	; 0xf7
   1511c:	4008      	ands	r0, r1
   1511e:	e73c      	b.n	14f9a <Radio_WriteConfiguration+0x11e>
   15120:	4a12      	ldr	r2, [pc, #72]	; (1516c <Radio_WriteConfiguration+0x2f0>)
   15122:	189b      	adds	r3, r3, r2
   15124:	4a12      	ldr	r2, [pc, #72]	; (15170 <Radio_WriteConfiguration+0x2f4>)
   15126:	4293      	cmp	r3, r2
   15128:	d804      	bhi.n	15134 <Radio_WriteConfiguration+0x2b8>
   1512a:	2102      	movs	r1, #2
   1512c:	2036      	movs	r0, #54	; 0x36
   1512e:	47a8      	blx	r5
   15130:	217f      	movs	r1, #127	; 0x7f
   15132:	e796      	b.n	15062 <Radio_WriteConfiguration+0x1e6>
   15134:	2103      	movs	r1, #3
   15136:	2036      	movs	r0, #54	; 0x36
   15138:	e794      	b.n	15064 <Radio_WriteConfiguration+0x1e8>
   1513a:	47a8      	blx	r5
   1513c:	211d      	movs	r1, #29
   1513e:	e79f      	b.n	15080 <Radio_WriteConfiguration+0x204>
   15140:	20002980 	.word	0x20002980
   15144:	0000f46d 	.word	0x0000f46d
   15148:	00014e35 	.word	0x00014e35
   1514c:	000080c1 	.word	0x000080c1
   15150:	00008099 	.word	0x00008099
   15154:	200029b6 	.word	0x200029b6
   15158:	00ffff00 	.word	0x00ffff00
   1515c:	00070b00 	.word	0x00070b00
   15160:	cc9eec80 	.word	0xcc9eec80
   15164:	096ae380 	.word	0x096ae380
   15168:	00020394 	.word	0x00020394
   1516c:	e78fe580 	.word	0xe78fe580
   15170:	06dac2c0 	.word	0x06dac2c0
   15174:	6863      	ldr	r3, [r4, #4]
   15176:	492c      	ldr	r1, [pc, #176]	; (15228 <Radio_WriteConfiguration+0x3ac>)
   15178:	0218      	lsls	r0, r3, #8
   1517a:	4b2c      	ldr	r3, [pc, #176]	; (1522c <Radio_WriteConfiguration+0x3b0>)
   1517c:	4798      	blx	r3
   1517e:	0007      	movs	r7, r0
   15180:	0a01      	lsrs	r1, r0, #8
   15182:	b2c9      	uxtb	r1, r1
   15184:	2004      	movs	r0, #4
   15186:	47a8      	blx	r5
   15188:	b2f9      	uxtb	r1, r7
   1518a:	2005      	movs	r0, #5
   1518c:	47a8      	blx	r5
   1518e:	4b27      	ldr	r3, [pc, #156]	; (1522c <Radio_WriteConfiguration+0x3b0>)
   15190:	68a1      	ldr	r1, [r4, #8]
   15192:	4827      	ldr	r0, [pc, #156]	; (15230 <Radio_WriteConfiguration+0x3b4>)
   15194:	4798      	blx	r3
   15196:	0007      	movs	r7, r0
   15198:	0a01      	lsrs	r1, r0, #8
   1519a:	b2c9      	uxtb	r1, r1
   1519c:	2002      	movs	r0, #2
   1519e:	47a8      	blx	r5
   151a0:	b2f9      	uxtb	r1, r7
   151a2:	2003      	movs	r0, #3
   151a4:	47a8      	blx	r5
   151a6:	2100      	movs	r1, #0
   151a8:	205d      	movs	r0, #93	; 0x5d
   151aa:	47a8      	blx	r5
   151ac:	8aa1      	ldrh	r1, [r4, #20]
   151ae:	2025      	movs	r0, #37	; 0x25
   151b0:	0a09      	lsrs	r1, r1, #8
   151b2:	47a8      	blx	r5
   151b4:	7d21      	ldrb	r1, [r4, #20]
   151b6:	2026      	movs	r0, #38	; 0x26
   151b8:	47a8      	blx	r5
   151ba:	219e      	movs	r1, #158	; 0x9e
   151bc:	200d      	movs	r0, #13
   151be:	47a8      	blx	r5
   151c0:	21bf      	movs	r1, #191	; 0xbf
   151c2:	2035      	movs	r0, #53	; 0x35
   151c4:	47a8      	blx	r5
   151c6:	200a      	movs	r0, #10
   151c8:	47b0      	blx	r6
   151ca:	0023      	movs	r3, r4
   151cc:	3337      	adds	r3, #55	; 0x37
   151ce:	7819      	ldrb	r1, [r3, #0]
   151d0:	2360      	movs	r3, #96	; 0x60
   151d2:	0149      	lsls	r1, r1, #5
   151d4:	4398      	bics	r0, r3
   151d6:	4301      	orrs	r1, r0
   151d8:	b2c9      	uxtb	r1, r1
   151da:	200a      	movs	r0, #10
   151dc:	47a8      	blx	r5
   151de:	1d23      	adds	r3, r4, #4
   151e0:	7fdb      	ldrb	r3, [r3, #31]
   151e2:	21c0      	movs	r1, #192	; 0xc0
   151e4:	2b00      	cmp	r3, #0
   151e6:	d000      	beq.n	151ea <Radio_WriteConfiguration+0x36e>
   151e8:	3110      	adds	r1, #16
   151ea:	2030      	movs	r0, #48	; 0x30
   151ec:	47a8      	blx	r5
   151ee:	2600      	movs	r6, #0
   151f0:	1ca3      	adds	r3, r4, #2
   151f2:	7fd9      	ldrb	r1, [r3, #31]
   151f4:	428e      	cmp	r6, r1
   151f6:	d30d      	bcc.n	15214 <Radio_WriteConfiguration+0x398>
   151f8:	2900      	cmp	r1, #0
   151fa:	d003      	beq.n	15204 <Radio_WriteConfiguration+0x388>
   151fc:	2310      	movs	r3, #16
   151fe:	3901      	subs	r1, #1
   15200:	4319      	orrs	r1, r3
   15202:	b2c9      	uxtb	r1, r1
   15204:	2027      	movs	r0, #39	; 0x27
   15206:	47a8      	blx	r5
   15208:	21ff      	movs	r1, #255	; 0xff
   1520a:	203e      	movs	r0, #62	; 0x3e
   1520c:	47a8      	blx	r5
   1520e:	21ff      	movs	r1, #255	; 0xff
   15210:	203f      	movs	r0, #63	; 0x3f
   15212:	e739      	b.n	15088 <Radio_WriteConfiguration+0x20c>
   15214:	0030      	movs	r0, r6
   15216:	19a3      	adds	r3, r4, r6
   15218:	3028      	adds	r0, #40	; 0x28
   1521a:	7e59      	ldrb	r1, [r3, #25]
   1521c:	b2c0      	uxtb	r0, r0
   1521e:	3601      	adds	r6, #1
   15220:	47a8      	blx	r5
   15222:	b2f6      	uxtb	r6, r6
   15224:	e7e4      	b.n	151f0 <Radio_WriteConfiguration+0x374>
   15226:	46c0      	nop			; (mov r8, r8)
   15228:	00003d09 	.word	0x00003d09
   1522c:	000165b9 	.word	0x000165b9
   15230:	01e84800 	.word	0x01e84800

00015234 <RADIO_getMappingAndOpmode>:
   15234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15236:	0006      	movs	r6, r0
   15238:	4d06      	ldr	r5, [pc, #24]	; (15254 <RADIO_getMappingAndOpmode+0x20>)
   1523a:	2040      	movs	r0, #64	; 0x40
   1523c:	001f      	movs	r7, r3
   1523e:	0014      	movs	r4, r2
   15240:	9101      	str	r1, [sp, #4]
   15242:	47a8      	blx	r5
   15244:	4004      	ands	r4, r0
   15246:	413c      	asrs	r4, r7
   15248:	2001      	movs	r0, #1
   1524a:	7034      	strb	r4, [r6, #0]
   1524c:	47a8      	blx	r5
   1524e:	9b01      	ldr	r3, [sp, #4]
   15250:	7018      	strb	r0, [r3, #0]
   15252:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   15254:	000080c1 	.word	0x000080c1

00015258 <RADIO_UnhandledInterrupt.part.0>:
   15258:	b510      	push	{r4, lr}
   1525a:	21ff      	movs	r1, #255	; 0xff
   1525c:	2012      	movs	r0, #18
   1525e:	4b01      	ldr	r3, [pc, #4]	; (15264 <RADIO_UnhandledInterrupt.part.0+0xc>)
   15260:	4798      	blx	r3
   15262:	bd10      	pop	{r4, pc}
   15264:	00008099 	.word	0x00008099

00015268 <RADIO_UnhandledInterrupt>:
   15268:	b510      	push	{r4, lr}
   1526a:	2801      	cmp	r0, #1
   1526c:	d102      	bne.n	15274 <RADIO_UnhandledInterrupt+0xc>
   1526e:	4b05      	ldr	r3, [pc, #20]	; (15284 <RADIO_UnhandledInterrupt+0x1c>)
   15270:	4798      	blx	r3
   15272:	bd10      	pop	{r4, pc}
   15274:	21ff      	movs	r1, #255	; 0xff
   15276:	203e      	movs	r0, #62	; 0x3e
   15278:	4c03      	ldr	r4, [pc, #12]	; (15288 <RADIO_UnhandledInterrupt+0x20>)
   1527a:	47a0      	blx	r4
   1527c:	21ff      	movs	r1, #255	; 0xff
   1527e:	203f      	movs	r0, #63	; 0x3f
   15280:	47a0      	blx	r4
   15282:	e7f6      	b.n	15272 <RADIO_UnhandledInterrupt+0xa>
   15284:	00015259 	.word	0x00015259
   15288:	00008099 	.word	0x00008099

0001528c <RADIO_DIO0>:
   1528c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1528e:	466b      	mov	r3, sp
   15290:	1ddc      	adds	r4, r3, #7
   15292:	1d9d      	adds	r5, r3, #6
   15294:	22c0      	movs	r2, #192	; 0xc0
   15296:	2306      	movs	r3, #6
   15298:	0028      	movs	r0, r5
   1529a:	0021      	movs	r1, r4
   1529c:	4e12      	ldr	r6, [pc, #72]	; (152e8 <RADIO_DIO0+0x5c>)
   1529e:	47b0      	blx	r6
   152a0:	7823      	ldrb	r3, [r4, #0]
   152a2:	7828      	ldrb	r0, [r5, #0]
   152a4:	b25a      	sxtb	r2, r3
   152a6:	b2c0      	uxtb	r0, r0
   152a8:	2a00      	cmp	r2, #0
   152aa:	da0b      	bge.n	152c4 <RADIO_DIO0+0x38>
   152ac:	2800      	cmp	r0, #0
   152ae:	d004      	beq.n	152ba <RADIO_DIO0+0x2e>
   152b0:	2801      	cmp	r0, #1
   152b2:	d005      	beq.n	152c0 <RADIO_DIO0+0x34>
   152b4:	4b0d      	ldr	r3, [pc, #52]	; (152ec <RADIO_DIO0+0x60>)
   152b6:	4798      	blx	r3
   152b8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   152ba:	4b0d      	ldr	r3, [pc, #52]	; (152f0 <RADIO_DIO0+0x64>)
   152bc:	4798      	blx	r3
   152be:	e7fb      	b.n	152b8 <RADIO_DIO0+0x2c>
   152c0:	4b0c      	ldr	r3, [pc, #48]	; (152f4 <RADIO_DIO0+0x68>)
   152c2:	e7fb      	b.n	152bc <RADIO_DIO0+0x30>
   152c4:	2800      	cmp	r0, #0
   152c6:	d10a      	bne.n	152de <RADIO_DIO0+0x52>
   152c8:	2207      	movs	r2, #7
   152ca:	4013      	ands	r3, r2
   152cc:	7023      	strb	r3, [r4, #0]
   152ce:	2b03      	cmp	r3, #3
   152d0:	d101      	bne.n	152d6 <RADIO_DIO0+0x4a>
   152d2:	4b09      	ldr	r3, [pc, #36]	; (152f8 <RADIO_DIO0+0x6c>)
   152d4:	e7f2      	b.n	152bc <RADIO_DIO0+0x30>
   152d6:	2b05      	cmp	r3, #5
   152d8:	d102      	bne.n	152e0 <RADIO_DIO0+0x54>
   152da:	4b08      	ldr	r3, [pc, #32]	; (152fc <RADIO_DIO0+0x70>)
   152dc:	e7ee      	b.n	152bc <RADIO_DIO0+0x30>
   152de:	2000      	movs	r0, #0
   152e0:	4b07      	ldr	r3, [pc, #28]	; (15300 <RADIO_DIO0+0x74>)
   152e2:	4798      	blx	r3
   152e4:	e7e8      	b.n	152b8 <RADIO_DIO0+0x2c>
   152e6:	46c0      	nop			; (mov r8, r8)
   152e8:	00015235 	.word	0x00015235
   152ec:	00015259 	.word	0x00015259
   152f0:	00015a11 	.word	0x00015a11
   152f4:	00015915 	.word	0x00015915
   152f8:	00015991 	.word	0x00015991
   152fc:	00015a8d 	.word	0x00015a8d
   15300:	00015269 	.word	0x00015269

00015304 <RADIO_DIO1>:
   15304:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15306:	466b      	mov	r3, sp
   15308:	1ddc      	adds	r4, r3, #7
   1530a:	1d9d      	adds	r5, r3, #6
   1530c:	2230      	movs	r2, #48	; 0x30
   1530e:	2304      	movs	r3, #4
   15310:	0021      	movs	r1, r4
   15312:	0028      	movs	r0, r5
   15314:	4e11      	ldr	r6, [pc, #68]	; (1535c <RADIO_DIO1+0x58>)
   15316:	47b0      	blx	r6
   15318:	7822      	ldrb	r2, [r4, #0]
   1531a:	782b      	ldrb	r3, [r5, #0]
   1531c:	b251      	sxtb	r1, r2
   1531e:	2900      	cmp	r1, #0
   15320:	da0c      	bge.n	1533c <RADIO_DIO1+0x38>
   15322:	b2db      	uxtb	r3, r3
   15324:	2b00      	cmp	r3, #0
   15326:	d004      	beq.n	15332 <RADIO_DIO1+0x2e>
   15328:	2b01      	cmp	r3, #1
   1532a:	d005      	beq.n	15338 <RADIO_DIO1+0x34>
   1532c:	4b0c      	ldr	r3, [pc, #48]	; (15360 <RADIO_DIO1+0x5c>)
   1532e:	4798      	blx	r3
   15330:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   15332:	4b0c      	ldr	r3, [pc, #48]	; (15364 <RADIO_DIO1+0x60>)
   15334:	4798      	blx	r3
   15336:	e7fb      	b.n	15330 <RADIO_DIO1+0x2c>
   15338:	4b0b      	ldr	r3, [pc, #44]	; (15368 <RADIO_DIO1+0x64>)
   1533a:	e7fb      	b.n	15334 <RADIO_DIO1+0x30>
   1533c:	2107      	movs	r1, #7
   1533e:	b2db      	uxtb	r3, r3
   15340:	400a      	ands	r2, r1
   15342:	7022      	strb	r2, [r4, #0]
   15344:	2b00      	cmp	r3, #0
   15346:	d005      	beq.n	15354 <RADIO_DIO1+0x50>
   15348:	2b01      	cmp	r3, #1
   1534a:	d1f1      	bne.n	15330 <RADIO_DIO1+0x2c>
   1534c:	2a03      	cmp	r2, #3
   1534e:	d1ef      	bne.n	15330 <RADIO_DIO1+0x2c>
   15350:	4b06      	ldr	r3, [pc, #24]	; (1536c <RADIO_DIO1+0x68>)
   15352:	e7ef      	b.n	15334 <RADIO_DIO1+0x30>
   15354:	4b06      	ldr	r3, [pc, #24]	; (15370 <RADIO_DIO1+0x6c>)
   15356:	2a05      	cmp	r2, #5
   15358:	d1ea      	bne.n	15330 <RADIO_DIO1+0x2c>
   1535a:	e7eb      	b.n	15334 <RADIO_DIO1+0x30>
   1535c:	00015235 	.word	0x00015235
   15360:	00015259 	.word	0x00015259
   15364:	00015899 	.word	0x00015899
   15368:	0000f551 	.word	0x0000f551
   1536c:	000156c1 	.word	0x000156c1
   15370:	00015625 	.word	0x00015625

00015374 <RADIO_DIO2>:
   15374:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15376:	466b      	mov	r3, sp
   15378:	1ddc      	adds	r4, r3, #7
   1537a:	1d9d      	adds	r5, r3, #6
   1537c:	220c      	movs	r2, #12
   1537e:	2302      	movs	r3, #2
   15380:	0021      	movs	r1, r4
   15382:	0028      	movs	r0, r5
   15384:	4e0b      	ldr	r6, [pc, #44]	; (153b4 <RADIO_DIO2+0x40>)
   15386:	47b0      	blx	r6
   15388:	7823      	ldrb	r3, [r4, #0]
   1538a:	782a      	ldrb	r2, [r5, #0]
   1538c:	b259      	sxtb	r1, r3
   1538e:	2900      	cmp	r1, #0
   15390:	da05      	bge.n	1539e <RADIO_DIO2+0x2a>
   15392:	4b09      	ldr	r3, [pc, #36]	; (153b8 <RADIO_DIO2+0x44>)
   15394:	2a02      	cmp	r2, #2
   15396:	d90a      	bls.n	153ae <RADIO_DIO2+0x3a>
   15398:	4b08      	ldr	r3, [pc, #32]	; (153bc <RADIO_DIO2+0x48>)
   1539a:	4798      	blx	r3
   1539c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1539e:	2107      	movs	r1, #7
   153a0:	400b      	ands	r3, r1
   153a2:	7023      	strb	r3, [r4, #0]
   153a4:	2a03      	cmp	r2, #3
   153a6:	d1f9      	bne.n	1539c <RADIO_DIO2+0x28>
   153a8:	2b05      	cmp	r3, #5
   153aa:	d1f7      	bne.n	1539c <RADIO_DIO2+0x28>
   153ac:	4b04      	ldr	r3, [pc, #16]	; (153c0 <RADIO_DIO2+0x4c>)
   153ae:	4798      	blx	r3
   153b0:	e7f4      	b.n	1539c <RADIO_DIO2+0x28>
   153b2:	46c0      	nop			; (mov r8, r8)
   153b4:	00015235 	.word	0x00015235
   153b8:	0000f551 	.word	0x0000f551
   153bc:	00015259 	.word	0x00015259
   153c0:	000155f5 	.word	0x000155f5

000153c4 <RADIO_DIO3>:
   153c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   153c6:	466b      	mov	r3, sp
   153c8:	4668      	mov	r0, sp
   153ca:	1ddc      	adds	r4, r3, #7
   153cc:	2203      	movs	r2, #3
   153ce:	2300      	movs	r3, #0
   153d0:	0021      	movs	r1, r4
   153d2:	3006      	adds	r0, #6
   153d4:	4d03      	ldr	r5, [pc, #12]	; (153e4 <RADIO_DIO3+0x20>)
   153d6:	47a8      	blx	r5
   153d8:	7823      	ldrb	r3, [r4, #0]
   153da:	2b7f      	cmp	r3, #127	; 0x7f
   153dc:	d901      	bls.n	153e2 <RADIO_DIO3+0x1e>
   153de:	4b02      	ldr	r3, [pc, #8]	; (153e8 <RADIO_DIO3+0x24>)
   153e0:	4798      	blx	r3
   153e2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   153e4:	00015235 	.word	0x00015235
   153e8:	00015259 	.word	0x00015259

000153ec <RADIO_DIO4>:
   153ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   153ee:	466b      	mov	r3, sp
   153f0:	4668      	mov	r0, sp
   153f2:	1ddc      	adds	r4, r3, #7
   153f4:	2306      	movs	r3, #6
   153f6:	22c0      	movs	r2, #192	; 0xc0
   153f8:	18c0      	adds	r0, r0, r3
   153fa:	0021      	movs	r1, r4
   153fc:	4d03      	ldr	r5, [pc, #12]	; (1540c <RADIO_DIO4+0x20>)
   153fe:	47a8      	blx	r5
   15400:	7823      	ldrb	r3, [r4, #0]
   15402:	2b7f      	cmp	r3, #127	; 0x7f
   15404:	d901      	bls.n	1540a <RADIO_DIO4+0x1e>
   15406:	4b02      	ldr	r3, [pc, #8]	; (15410 <RADIO_DIO4+0x24>)
   15408:	4798      	blx	r3
   1540a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   1540c:	00015235 	.word	0x00015235
   15410:	00015259 	.word	0x00015259

00015414 <RADIO_DIO5>:
   15414:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15416:	466b      	mov	r3, sp
   15418:	4668      	mov	r0, sp
   1541a:	1ddc      	adds	r4, r3, #7
   1541c:	2230      	movs	r2, #48	; 0x30
   1541e:	2304      	movs	r3, #4
   15420:	0021      	movs	r1, r4
   15422:	3006      	adds	r0, #6
   15424:	4d03      	ldr	r5, [pc, #12]	; (15434 <RADIO_DIO5+0x20>)
   15426:	47a8      	blx	r5
   15428:	7823      	ldrb	r3, [r4, #0]
   1542a:	2b7f      	cmp	r3, #127	; 0x7f
   1542c:	d901      	bls.n	15432 <RADIO_DIO5+0x1e>
   1542e:	4b02      	ldr	r3, [pc, #8]	; (15438 <RADIO_DIO5+0x24>)
   15430:	4798      	blx	r3
   15432:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   15434:	00015235 	.word	0x00015235
   15438:	00015259 	.word	0x00015259

0001543c <radioPostTask>:
   1543c:	b510      	push	{r4, lr}
   1543e:	0004      	movs	r4, r0
   15440:	4b05      	ldr	r3, [pc, #20]	; (15458 <radioPostTask+0x1c>)
   15442:	4798      	blx	r3
   15444:	4b05      	ldr	r3, [pc, #20]	; (1545c <radioPostTask+0x20>)
   15446:	8818      	ldrh	r0, [r3, #0]
   15448:	4320      	orrs	r0, r4
   1544a:	8018      	strh	r0, [r3, #0]
   1544c:	4b04      	ldr	r3, [pc, #16]	; (15460 <radioPostTask+0x24>)
   1544e:	4798      	blx	r3
   15450:	2002      	movs	r0, #2
   15452:	4b04      	ldr	r3, [pc, #16]	; (15464 <radioPostTask+0x28>)
   15454:	4798      	blx	r3
   15456:	bd10      	pop	{r4, pc}
   15458:	00008349 	.word	0x00008349
   1545c:	20001122 	.word	0x20001122
   15460:	00008355 	.word	0x00008355
   15464:	0000f435 	.word	0x0000f435

00015468 <radioClearTask>:
   15468:	b510      	push	{r4, lr}
   1546a:	0004      	movs	r4, r0
   1546c:	4b04      	ldr	r3, [pc, #16]	; (15480 <radioClearTask+0x18>)
   1546e:	4798      	blx	r3
   15470:	4a04      	ldr	r2, [pc, #16]	; (15484 <radioClearTask+0x1c>)
   15472:	8813      	ldrh	r3, [r2, #0]
   15474:	43a3      	bics	r3, r4
   15476:	8013      	strh	r3, [r2, #0]
   15478:	4b03      	ldr	r3, [pc, #12]	; (15488 <radioClearTask+0x20>)
   1547a:	4798      	blx	r3
   1547c:	bd10      	pop	{r4, pc}
   1547e:	46c0      	nop			; (mov r8, r8)
   15480:	00008349 	.word	0x00008349
   15484:	20001122 	.word	0x20001122
   15488:	00008355 	.word	0x00008355

0001548c <RADIO_TaskHandler>:
   1548c:	b570      	push	{r4, r5, r6, lr}
   1548e:	2400      	movs	r4, #0
   15490:	4d10      	ldr	r5, [pc, #64]	; (154d4 <RADIO_TaskHandler+0x48>)
   15492:	2601      	movs	r6, #1
   15494:	882b      	ldrh	r3, [r5, #0]
   15496:	42a3      	cmp	r3, r4
   15498:	d015      	beq.n	154c6 <RADIO_TaskHandler+0x3a>
   1549a:	882b      	ldrh	r3, [r5, #0]
   1549c:	4123      	asrs	r3, r4
   1549e:	4233      	tst	r3, r6
   154a0:	d013      	beq.n	154ca <RADIO_TaskHandler+0x3e>
   154a2:	40a6      	lsls	r6, r4
   154a4:	4b0c      	ldr	r3, [pc, #48]	; (154d8 <RADIO_TaskHandler+0x4c>)
   154a6:	4798      	blx	r3
   154a8:	882b      	ldrh	r3, [r5, #0]
   154aa:	00a4      	lsls	r4, r4, #2
   154ac:	43b3      	bics	r3, r6
   154ae:	802b      	strh	r3, [r5, #0]
   154b0:	4b0a      	ldr	r3, [pc, #40]	; (154dc <RADIO_TaskHandler+0x50>)
   154b2:	4798      	blx	r3
   154b4:	4b0a      	ldr	r3, [pc, #40]	; (154e0 <RADIO_TaskHandler+0x54>)
   154b6:	58e3      	ldr	r3, [r4, r3]
   154b8:	4798      	blx	r3
   154ba:	882b      	ldrh	r3, [r5, #0]
   154bc:	2b00      	cmp	r3, #0
   154be:	d002      	beq.n	154c6 <RADIO_TaskHandler+0x3a>
   154c0:	2002      	movs	r0, #2
   154c2:	4b08      	ldr	r3, [pc, #32]	; (154e4 <RADIO_TaskHandler+0x58>)
   154c4:	4798      	blx	r3
   154c6:	2000      	movs	r0, #0
   154c8:	bd70      	pop	{r4, r5, r6, pc}
   154ca:	3401      	adds	r4, #1
   154cc:	2c05      	cmp	r4, #5
   154ce:	d1e4      	bne.n	1549a <RADIO_TaskHandler+0xe>
   154d0:	e7f9      	b.n	154c6 <RADIO_TaskHandler+0x3a>
   154d2:	46c0      	nop			; (mov r8, r8)
   154d4:	20001122 	.word	0x20001122
   154d8:	00008349 	.word	0x00008349
   154dc:	00008355 	.word	0x00008355
   154e0:	00020398 	.word	0x00020398
   154e4:	0000f435 	.word	0x0000f435

000154e8 <RadioSetState>:
   154e8:	4b01      	ldr	r3, [pc, #4]	; (154f0 <RadioSetState+0x8>)
   154ea:	7018      	strb	r0, [r3, #0]
   154ec:	4770      	bx	lr
   154ee:	46c0      	nop			; (mov r8, r8)
   154f0:	20002fbf 	.word	0x20002fbf

000154f4 <RADIO_GetState>:
   154f4:	4b01      	ldr	r3, [pc, #4]	; (154fc <RADIO_GetState+0x8>)
   154f6:	7818      	ldrb	r0, [r3, #0]
   154f8:	b2c0      	uxtb	r0, r0
   154fa:	4770      	bx	lr
   154fc:	20002fbf 	.word	0x20002fbf

00015500 <RADIO_SetCallbackBitmask>:
   15500:	4a02      	ldr	r2, [pc, #8]	; (1550c <RADIO_SetCallbackBitmask+0xc>)
   15502:	7813      	ldrb	r3, [r2, #0]
   15504:	4318      	orrs	r0, r3
   15506:	7010      	strb	r0, [r2, #0]
   15508:	4770      	bx	lr
   1550a:	46c0      	nop			; (mov r8, r8)
   1550c:	20002fbe 	.word	0x20002fbe

00015510 <RADIO_Transmit>:
   15510:	b570      	push	{r4, r5, r6, lr}
   15512:	4d10      	ldr	r5, [pc, #64]	; (15554 <RADIO_Transmit+0x44>)
   15514:	0006      	movs	r6, r0
   15516:	782b      	ldrb	r3, [r5, #0]
   15518:	2004      	movs	r0, #4
   1551a:	2b01      	cmp	r3, #1
   1551c:	d118      	bne.n	15550 <RADIO_Transmit+0x40>
   1551e:	4c0e      	ldr	r4, [pc, #56]	; (15558 <RADIO_Transmit+0x48>)
   15520:	0023      	movs	r3, r4
   15522:	332f      	adds	r3, #47	; 0x2f
   15524:	7818      	ldrb	r0, [r3, #0]
   15526:	4b0d      	ldr	r3, [pc, #52]	; (1555c <RADIO_Transmit+0x4c>)
   15528:	4798      	blx	r3
   1552a:	4b0d      	ldr	r3, [pc, #52]	; (15560 <RADIO_Transmit+0x50>)
   1552c:	7832      	ldrb	r2, [r6, #0]
   1552e:	6871      	ldr	r1, [r6, #4]
   15530:	701a      	strb	r2, [r3, #0]
   15532:	4b0c      	ldr	r3, [pc, #48]	; (15564 <RADIO_Transmit+0x54>)
   15534:	3434      	adds	r4, #52	; 0x34
   15536:	6019      	str	r1, [r3, #0]
   15538:	7821      	ldrb	r1, [r4, #0]
   1553a:	2302      	movs	r3, #2
   1553c:	2900      	cmp	r1, #0
   1553e:	d102      	bne.n	15546 <RADIO_Transmit+0x36>
   15540:	0018      	movs	r0, r3
   15542:	2a3f      	cmp	r2, #63	; 0x3f
   15544:	d804      	bhi.n	15550 <RADIO_Transmit+0x40>
   15546:	702b      	strb	r3, [r5, #0]
   15548:	2004      	movs	r0, #4
   1554a:	4b07      	ldr	r3, [pc, #28]	; (15568 <RADIO_Transmit+0x58>)
   1554c:	4798      	blx	r3
   1554e:	2000      	movs	r0, #0
   15550:	bd70      	pop	{r4, r5, r6, pc}
   15552:	46c0      	nop			; (mov r8, r8)
   15554:	20002fbf 	.word	0x20002fbf
   15558:	20002980 	.word	0x20002980
   1555c:	0000f0b9 	.word	0x0000f0b9
   15560:	20001134 	.word	0x20001134
   15564:	20001130 	.word	0x20001130
   15568:	0001543d 	.word	0x0001543d

0001556c <Radio_FSKTxPayloadHandler>:
   1556c:	b570      	push	{r4, r5, r6, lr}
   1556e:	4b1c      	ldr	r3, [pc, #112]	; (155e0 <Radio_FSKTxPayloadHandler+0x74>)
   15570:	000d      	movs	r5, r1
   15572:	4798      	blx	r3
   15574:	4c1b      	ldr	r4, [pc, #108]	; (155e4 <Radio_FSKTxPayloadHandler+0x78>)
   15576:	3458      	adds	r4, #88	; 0x58
   15578:	7820      	ldrb	r0, [r4, #0]
   1557a:	b2c0      	uxtb	r0, r0
   1557c:	2800      	cmp	r0, #0
   1557e:	d112      	bne.n	155a6 <Radio_FSKTxPayloadHandler+0x3a>
   15580:	2d00      	cmp	r5, #0
   15582:	d007      	beq.n	15594 <Radio_FSKTxPayloadHandler+0x28>
   15584:	4918      	ldr	r1, [pc, #96]	; (155e8 <Radio_FSKTxPayloadHandler+0x7c>)
   15586:	4b19      	ldr	r3, [pc, #100]	; (155ec <Radio_FSKTxPayloadHandler+0x80>)
   15588:	2d3e      	cmp	r5, #62	; 0x3e
   1558a:	d806      	bhi.n	1559a <Radio_FSKTxPayloadHandler+0x2e>
   1558c:	002a      	movs	r2, r5
   1558e:	6809      	ldr	r1, [r1, #0]
   15590:	4798      	blx	r3
   15592:	7025      	strb	r5, [r4, #0]
   15594:	4b16      	ldr	r3, [pc, #88]	; (155f0 <Radio_FSKTxPayloadHandler+0x84>)
   15596:	4798      	blx	r3
   15598:	bd70      	pop	{r4, r5, r6, pc}
   1559a:	223f      	movs	r2, #63	; 0x3f
   1559c:	6809      	ldr	r1, [r1, #0]
   1559e:	4798      	blx	r3
   155a0:	233f      	movs	r3, #63	; 0x3f
   155a2:	7023      	strb	r3, [r4, #0]
   155a4:	e7f6      	b.n	15594 <Radio_FSKTxPayloadHandler+0x28>
   155a6:	7823      	ldrb	r3, [r4, #0]
   155a8:	429d      	cmp	r5, r3
   155aa:	d0f3      	beq.n	15594 <Radio_FSKTxPayloadHandler+0x28>
   155ac:	7822      	ldrb	r2, [r4, #0]
   155ae:	480e      	ldr	r0, [pc, #56]	; (155e8 <Radio_FSKTxPayloadHandler+0x7c>)
   155b0:	1aaa      	subs	r2, r5, r2
   155b2:	b2d2      	uxtb	r2, r2
   155b4:	4b0d      	ldr	r3, [pc, #52]	; (155ec <Radio_FSKTxPayloadHandler+0x80>)
   155b6:	2a3f      	cmp	r2, #63	; 0x3f
   155b8:	d807      	bhi.n	155ca <Radio_FSKTxPayloadHandler+0x5e>
   155ba:	7826      	ldrb	r6, [r4, #0]
   155bc:	7822      	ldrb	r2, [r4, #0]
   155be:	6801      	ldr	r1, [r0, #0]
   155c0:	1aaa      	subs	r2, r5, r2
   155c2:	b2d2      	uxtb	r2, r2
   155c4:	1989      	adds	r1, r1, r6
   155c6:	2000      	movs	r0, #0
   155c8:	e7e2      	b.n	15590 <Radio_FSKTxPayloadHandler+0x24>
   155ca:	7822      	ldrb	r2, [r4, #0]
   155cc:	6801      	ldr	r1, [r0, #0]
   155ce:	2000      	movs	r0, #0
   155d0:	1889      	adds	r1, r1, r2
   155d2:	223f      	movs	r2, #63	; 0x3f
   155d4:	4798      	blx	r3
   155d6:	7823      	ldrb	r3, [r4, #0]
   155d8:	333f      	adds	r3, #63	; 0x3f
   155da:	b2db      	uxtb	r3, r3
   155dc:	e7e1      	b.n	155a2 <Radio_FSKTxPayloadHandler+0x36>
   155de:	46c0      	nop			; (mov r8, r8)
   155e0:	0000457d 	.word	0x0000457d
   155e4:	20002980 	.word	0x20002980
   155e8:	20001130 	.word	0x20001130
   155ec:	000080ed 	.word	0x000080ed
   155f0:	000045bd 	.word	0x000045bd

000155f4 <RADIO_FSKSyncAddr>:
   155f4:	4b08      	ldr	r3, [pc, #32]	; (15618 <RADIO_FSKSyncAddr+0x24>)
   155f6:	b510      	push	{r4, lr}
   155f8:	4798      	blx	r3
   155fa:	4b08      	ldr	r3, [pc, #32]	; (1561c <RADIO_FSKSyncAddr+0x28>)
   155fc:	001a      	movs	r2, r3
   155fe:	3234      	adds	r2, #52	; 0x34
   15600:	7812      	ldrb	r2, [r2, #0]
   15602:	2a00      	cmp	r2, #0
   15604:	d104      	bne.n	15610 <RADIO_FSKSyncAddr+0x1c>
   15606:	0019      	movs	r1, r3
   15608:	3358      	adds	r3, #88	; 0x58
   1560a:	312c      	adds	r1, #44	; 0x2c
   1560c:	700a      	strb	r2, [r1, #0]
   1560e:	701a      	strb	r2, [r3, #0]
   15610:	4b03      	ldr	r3, [pc, #12]	; (15620 <RADIO_FSKSyncAddr+0x2c>)
   15612:	4798      	blx	r3
   15614:	bd10      	pop	{r4, pc}
   15616:	46c0      	nop			; (mov r8, r8)
   15618:	0000457d 	.word	0x0000457d
   1561c:	20002980 	.word	0x20002980
   15620:	000045bd 	.word	0x000045bd

00015624 <RADIO_FSKFifoLevel>:
   15624:	b570      	push	{r4, r5, r6, lr}
   15626:	4b22      	ldr	r3, [pc, #136]	; (156b0 <RADIO_FSKFifoLevel+0x8c>)
   15628:	4798      	blx	r3
   1562a:	4d22      	ldr	r5, [pc, #136]	; (156b4 <RADIO_FSKFifoLevel+0x90>)
   1562c:	002a      	movs	r2, r5
   1562e:	002b      	movs	r3, r5
   15630:	322c      	adds	r2, #44	; 0x2c
   15632:	3358      	adds	r3, #88	; 0x58
   15634:	7810      	ldrb	r0, [r2, #0]
   15636:	7819      	ldrb	r1, [r3, #0]
   15638:	4288      	cmp	r0, r1
   1563a:	d105      	bne.n	15648 <RADIO_FSKFifoLevel+0x24>
   1563c:	7812      	ldrb	r2, [r2, #0]
   1563e:	2a00      	cmp	r2, #0
   15640:	d002      	beq.n	15648 <RADIO_FSKFifoLevel+0x24>
   15642:	781b      	ldrb	r3, [r3, #0]
   15644:	2b00      	cmp	r3, #0
   15646:	d11f      	bne.n	15688 <RADIO_FSKFifoLevel+0x64>
   15648:	0029      	movs	r1, r5
   1564a:	312c      	adds	r1, #44	; 0x2c
   1564c:	7808      	ldrb	r0, [r1, #0]
   1564e:	b2c0      	uxtb	r0, r0
   15650:	2800      	cmp	r0, #0
   15652:	d102      	bne.n	1565a <RADIO_FSKFifoLevel+0x36>
   15654:	2201      	movs	r2, #1
   15656:	4b18      	ldr	r3, [pc, #96]	; (156b8 <RADIO_FSKFifoLevel+0x94>)
   15658:	4798      	blx	r3
   1565a:	002e      	movs	r6, r5
   1565c:	002c      	movs	r4, r5
   1565e:	362c      	adds	r6, #44	; 0x2c
   15660:	3458      	adds	r4, #88	; 0x58
   15662:	7833      	ldrb	r3, [r6, #0]
   15664:	7822      	ldrb	r2, [r4, #0]
   15666:	1a9b      	subs	r3, r3, r2
   15668:	b2db      	uxtb	r3, r3
   1566a:	2b3e      	cmp	r3, #62	; 0x3e
   1566c:	d80f      	bhi.n	1568e <RADIO_FSKFifoLevel+0x6a>
   1566e:	7823      	ldrb	r3, [r4, #0]
   15670:	7832      	ldrb	r2, [r6, #0]
   15672:	7821      	ldrb	r1, [r4, #0]
   15674:	2000      	movs	r0, #0
   15676:	1a52      	subs	r2, r2, r1
   15678:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1567a:	b2d2      	uxtb	r2, r2
   1567c:	18c9      	adds	r1, r1, r3
   1567e:	4b0e      	ldr	r3, [pc, #56]	; (156b8 <RADIO_FSKFifoLevel+0x94>)
   15680:	4798      	blx	r3
   15682:	7833      	ldrb	r3, [r6, #0]
   15684:	b2db      	uxtb	r3, r3
   15686:	7023      	strb	r3, [r4, #0]
   15688:	4b0c      	ldr	r3, [pc, #48]	; (156bc <RADIO_FSKFifoLevel+0x98>)
   1568a:	4798      	blx	r3
   1568c:	bd70      	pop	{r4, r5, r6, pc}
   1568e:	7833      	ldrb	r3, [r6, #0]
   15690:	7822      	ldrb	r2, [r4, #0]
   15692:	1a9b      	subs	r3, r3, r2
   15694:	b2db      	uxtb	r3, r3
   15696:	2b3f      	cmp	r3, #63	; 0x3f
   15698:	d9f6      	bls.n	15688 <RADIO_FSKFifoLevel+0x64>
   1569a:	7823      	ldrb	r3, [r4, #0]
   1569c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1569e:	223f      	movs	r2, #63	; 0x3f
   156a0:	18c9      	adds	r1, r1, r3
   156a2:	2000      	movs	r0, #0
   156a4:	4b04      	ldr	r3, [pc, #16]	; (156b8 <RADIO_FSKFifoLevel+0x94>)
   156a6:	4798      	blx	r3
   156a8:	7823      	ldrb	r3, [r4, #0]
   156aa:	333f      	adds	r3, #63	; 0x3f
   156ac:	e7ea      	b.n	15684 <RADIO_FSKFifoLevel+0x60>
   156ae:	46c0      	nop			; (mov r8, r8)
   156b0:	0000457d 	.word	0x0000457d
   156b4:	20002980 	.word	0x20002980
   156b8:	0000812d 	.word	0x0000812d
   156bc:	000045bd 	.word	0x000045bd

000156c0 <RADIO_FSKFifoEmpty>:
   156c0:	b510      	push	{r4, lr}
   156c2:	4b03      	ldr	r3, [pc, #12]	; (156d0 <RADIO_FSKFifoEmpty+0x10>)
   156c4:	7819      	ldrb	r1, [r3, #0]
   156c6:	4b03      	ldr	r3, [pc, #12]	; (156d4 <RADIO_FSKFifoEmpty+0x14>)
   156c8:	6818      	ldr	r0, [r3, #0]
   156ca:	4b03      	ldr	r3, [pc, #12]	; (156d8 <RADIO_FSKFifoEmpty+0x18>)
   156cc:	4798      	blx	r3
   156ce:	bd10      	pop	{r4, pc}
   156d0:	20001134 	.word	0x20001134
   156d4:	20001130 	.word	0x20001130
   156d8:	0001556d 	.word	0x0001556d

000156dc <RADIO_GetData>:
   156dc:	4b03      	ldr	r3, [pc, #12]	; (156ec <RADIO_GetData+0x10>)
   156de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   156e0:	332c      	adds	r3, #44	; 0x2c
   156e2:	6002      	str	r2, [r0, #0]
   156e4:	781b      	ldrb	r3, [r3, #0]
   156e6:	2000      	movs	r0, #0
   156e8:	800b      	strh	r3, [r1, #0]
   156ea:	4770      	bx	lr
   156ec:	20002980 	.word	0x20002980

000156f0 <Radio_EnableRfControl>:
   156f0:	b510      	push	{r4, lr}
   156f2:	4b08      	ldr	r3, [pc, #32]	; (15714 <Radio_EnableRfControl+0x24>)
   156f4:	0001      	movs	r1, r0
   156f6:	681a      	ldr	r2, [r3, #0]
   156f8:	4807      	ldr	r0, [pc, #28]	; (15718 <Radio_EnableRfControl+0x28>)
   156fa:	4c08      	ldr	r4, [pc, #32]	; (1571c <Radio_EnableRfControl+0x2c>)
   156fc:	1812      	adds	r2, r2, r0
   156fe:	2000      	movs	r0, #0
   15700:	42a2      	cmp	r2, r4
   15702:	d804      	bhi.n	1570e <Radio_EnableRfControl+0x1e>
   15704:	3305      	adds	r3, #5
   15706:	7fdb      	ldrb	r3, [r3, #31]
   15708:	1e58      	subs	r0, r3, #1
   1570a:	4183      	sbcs	r3, r0
   1570c:	1c58      	adds	r0, r3, #1
   1570e:	4b04      	ldr	r3, [pc, #16]	; (15720 <Radio_EnableRfControl+0x30>)
   15710:	4798      	blx	r3
   15712:	bd10      	pop	{r4, pc}
   15714:	20002980 	.word	0x20002980
   15718:	cc9eec80 	.word	0xcc9eec80
   1571c:	096ae380 	.word	0x096ae380
   15720:	00008199 	.word	0x00008199

00015724 <RADIO_RxHandler>:
   15724:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15726:	4b33      	ldr	r3, [pc, #204]	; (157f4 <RADIO_RxHandler+0xd0>)
   15728:	2000      	movs	r0, #0
   1572a:	4798      	blx	r3
   1572c:	4e32      	ldr	r6, [pc, #200]	; (157f8 <RADIO_RxHandler+0xd4>)
   1572e:	4b33      	ldr	r3, [pc, #204]	; (157fc <RADIO_RxHandler+0xd8>)
   15730:	8830      	ldrh	r0, [r6, #0]
   15732:	2800      	cmp	r0, #0
   15734:	d100      	bne.n	15738 <RADIO_RxHandler+0x14>
   15736:	3004      	adds	r0, #4
   15738:	4798      	blx	r3
   1573a:	4c31      	ldr	r4, [pc, #196]	; (15800 <RADIO_RxHandler+0xdc>)
   1573c:	4d31      	ldr	r5, [pc, #196]	; (15804 <RADIO_RxHandler+0xe0>)
   1573e:	0023      	movs	r3, r4
   15740:	3334      	adds	r3, #52	; 0x34
   15742:	7819      	ldrb	r1, [r3, #0]
   15744:	2901      	cmp	r1, #1
   15746:	d122      	bne.n	1578e <RADIO_RxHandler+0x6a>
   15748:	2022      	movs	r0, #34	; 0x22
   1574a:	47a8      	blx	r5
   1574c:	2100      	movs	r1, #0
   1574e:	2040      	movs	r0, #64	; 0x40
   15750:	47a8      	blx	r5
   15752:	2100      	movs	r1, #0
   15754:	2041      	movs	r0, #65	; 0x41
   15756:	47a8      	blx	r5
   15758:	8832      	ldrh	r2, [r6, #0]
   1575a:	4b2b      	ldr	r3, [pc, #172]	; (15808 <RADIO_RxHandler+0xe4>)
   1575c:	2a00      	cmp	r2, #0
   1575e:	d131      	bne.n	157c4 <RADIO_RxHandler+0xa0>
   15760:	0021      	movs	r1, r4
   15762:	2005      	movs	r0, #5
   15764:	3134      	adds	r1, #52	; 0x34
   15766:	7809      	ldrb	r1, [r1, #0]
   15768:	4798      	blx	r3
   1576a:	68e3      	ldr	r3, [r4, #12]
   1576c:	2b00      	cmp	r3, #0
   1576e:	d00c      	beq.n	1578a <RADIO_RxHandler+0x66>
   15770:	8832      	ldrh	r2, [r6, #0]
   15772:	2a00      	cmp	r2, #0
   15774:	d009      	beq.n	1578a <RADIO_RxHandler+0x66>
   15776:	21fa      	movs	r1, #250	; 0xfa
   15778:	2200      	movs	r2, #0
   1577a:	342f      	adds	r4, #47	; 0x2f
   1577c:	0089      	lsls	r1, r1, #2
   1577e:	7820      	ldrb	r0, [r4, #0]
   15780:	4359      	muls	r1, r3
   15782:	9200      	str	r2, [sp, #0]
   15784:	4b21      	ldr	r3, [pc, #132]	; (1580c <RADIO_RxHandler+0xe8>)
   15786:	4c22      	ldr	r4, [pc, #136]	; (15810 <RADIO_RxHandler+0xec>)
   15788:	47a0      	blx	r4
   1578a:	2000      	movs	r0, #0
   1578c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   1578e:	0023      	movs	r3, r4
   15790:	3338      	adds	r3, #56	; 0x38
   15792:	7819      	ldrb	r1, [r3, #0]
   15794:	2012      	movs	r0, #18
   15796:	47a8      	blx	r5
   15798:	0023      	movs	r3, r4
   1579a:	3339      	adds	r3, #57	; 0x39
   1579c:	7819      	ldrb	r1, [r3, #0]
   1579e:	2013      	movs	r0, #19
   157a0:	47a8      	blx	r5
   157a2:	210c      	movs	r1, #12
   157a4:	2040      	movs	r0, #64	; 0x40
   157a6:	47a8      	blx	r5
   157a8:	2100      	movs	r1, #0
   157aa:	2041      	movs	r0, #65	; 0x41
   157ac:	47a8      	blx	r5
   157ae:	0022      	movs	r2, r4
   157b0:	2300      	movs	r3, #0
   157b2:	3256      	adds	r2, #86	; 0x56
   157b4:	8013      	strh	r3, [r2, #0]
   157b6:	0022      	movs	r2, r4
   157b8:	322c      	adds	r2, #44	; 0x2c
   157ba:	7013      	strb	r3, [r2, #0]
   157bc:	0022      	movs	r2, r4
   157be:	3258      	adds	r2, #88	; 0x58
   157c0:	7013      	strb	r3, [r2, #0]
   157c2:	e7c9      	b.n	15758 <RADIO_RxHandler+0x34>
   157c4:	0022      	movs	r2, r4
   157c6:	3234      	adds	r2, #52	; 0x34
   157c8:	7811      	ldrb	r1, [r2, #0]
   157ca:	2200      	movs	r2, #0
   157cc:	2901      	cmp	r1, #1
   157ce:	d101      	bne.n	157d4 <RADIO_RxHandler+0xb0>
   157d0:	2006      	movs	r0, #6
   157d2:	e7c9      	b.n	15768 <RADIO_RxHandler+0x44>
   157d4:	0011      	movs	r1, r2
   157d6:	2005      	movs	r0, #5
   157d8:	4798      	blx	r3
   157da:	21fa      	movs	r1, #250	; 0xfa
   157dc:	8833      	ldrh	r3, [r6, #0]
   157de:	0089      	lsls	r1, r1, #2
   157e0:	4359      	muls	r1, r3
   157e2:	0023      	movs	r3, r4
   157e4:	2200      	movs	r2, #0
   157e6:	332e      	adds	r3, #46	; 0x2e
   157e8:	7818      	ldrb	r0, [r3, #0]
   157ea:	4d09      	ldr	r5, [pc, #36]	; (15810 <RADIO_RxHandler+0xec>)
   157ec:	9200      	str	r2, [sp, #0]
   157ee:	4b09      	ldr	r3, [pc, #36]	; (15814 <RADIO_RxHandler+0xf0>)
   157f0:	47a8      	blx	r5
   157f2:	e7ba      	b.n	1576a <RADIO_RxHandler+0x46>
   157f4:	000156f1 	.word	0x000156f1
   157f8:	20001126 	.word	0x20001126
   157fc:	00014e7d 	.word	0x00014e7d
   15800:	20002980 	.word	0x20002980
   15804:	00008099 	.word	0x00008099
   15808:	0000f46d 	.word	0x0000f46d
   1580c:	0001584d 	.word	0x0001584d
   15810:	0000eda1 	.word	0x0000eda1
   15814:	000158dd 	.word	0x000158dd

00015818 <Radio_DisableRfControl>:
   15818:	b510      	push	{r4, lr}
   1581a:	4b08      	ldr	r3, [pc, #32]	; (1583c <Radio_DisableRfControl+0x24>)
   1581c:	0001      	movs	r1, r0
   1581e:	681a      	ldr	r2, [r3, #0]
   15820:	4807      	ldr	r0, [pc, #28]	; (15840 <Radio_DisableRfControl+0x28>)
   15822:	4c08      	ldr	r4, [pc, #32]	; (15844 <Radio_DisableRfControl+0x2c>)
   15824:	1812      	adds	r2, r2, r0
   15826:	2000      	movs	r0, #0
   15828:	42a2      	cmp	r2, r4
   1582a:	d804      	bhi.n	15836 <Radio_DisableRfControl+0x1e>
   1582c:	3305      	adds	r3, #5
   1582e:	7fdb      	ldrb	r3, [r3, #31]
   15830:	1e58      	subs	r0, r3, #1
   15832:	4183      	sbcs	r3, r0
   15834:	1c58      	adds	r0, r3, #1
   15836:	4b04      	ldr	r3, [pc, #16]	; (15848 <Radio_DisableRfControl+0x30>)
   15838:	4798      	blx	r3
   1583a:	bd10      	pop	{r4, pc}
   1583c:	20002980 	.word	0x20002980
   15840:	cc9eec80 	.word	0xcc9eec80
   15844:	096ae380 	.word	0x096ae380
   15848:	000081c1 	.word	0x000081c1

0001584c <Radio_WatchdogTimeout>:
   1584c:	b510      	push	{r4, lr}
   1584e:	4b0e      	ldr	r3, [pc, #56]	; (15888 <Radio_WatchdogTimeout+0x3c>)
   15850:	781a      	ldrb	r2, [r3, #0]
   15852:	2a04      	cmp	r2, #4
   15854:	d10b      	bne.n	1586e <Radio_WatchdogTimeout+0x22>
   15856:	2320      	movs	r3, #32
   15858:	4a0c      	ldr	r2, [pc, #48]	; (1588c <Radio_WatchdogTimeout+0x40>)
   1585a:	2000      	movs	r0, #0
   1585c:	8811      	ldrh	r1, [r2, #0]
   1585e:	430b      	orrs	r3, r1
   15860:	8013      	strh	r3, [r2, #0]
   15862:	4b0b      	ldr	r3, [pc, #44]	; (15890 <Radio_WatchdogTimeout+0x44>)
   15864:	4798      	blx	r3
   15866:	2002      	movs	r0, #2
   15868:	4b0a      	ldr	r3, [pc, #40]	; (15894 <Radio_WatchdogTimeout+0x48>)
   1586a:	4798      	blx	r3
   1586c:	bd10      	pop	{r4, pc}
   1586e:	781b      	ldrb	r3, [r3, #0]
   15870:	2b02      	cmp	r3, #2
   15872:	d1fb      	bne.n	1586c <Radio_WatchdogTimeout+0x20>
   15874:	4a05      	ldr	r2, [pc, #20]	; (1588c <Radio_WatchdogTimeout+0x40>)
   15876:	330e      	adds	r3, #14
   15878:	8811      	ldrh	r1, [r2, #0]
   1587a:	2001      	movs	r0, #1
   1587c:	430b      	orrs	r3, r1
   1587e:	8013      	strh	r3, [r2, #0]
   15880:	4b03      	ldr	r3, [pc, #12]	; (15890 <Radio_WatchdogTimeout+0x44>)
   15882:	4798      	blx	r3
   15884:	2001      	movs	r0, #1
   15886:	e7ef      	b.n	15868 <Radio_WatchdogTimeout+0x1c>
   15888:	20002fbf 	.word	0x20002fbf
   1588c:	20002fbc 	.word	0x20002fbc
   15890:	00015819 	.word	0x00015819
   15894:	0001543d 	.word	0x0001543d

00015898 <RADIO_RxTimeout>:
   15898:	b510      	push	{r4, lr}
   1589a:	4b0a      	ldr	r3, [pc, #40]	; (158c4 <RADIO_RxTimeout+0x2c>)
   1589c:	332f      	adds	r3, #47	; 0x2f
   1589e:	7818      	ldrb	r0, [r3, #0]
   158a0:	4b09      	ldr	r3, [pc, #36]	; (158c8 <RADIO_RxTimeout+0x30>)
   158a2:	4798      	blx	r3
   158a4:	2000      	movs	r0, #0
   158a6:	4b09      	ldr	r3, [pc, #36]	; (158cc <RADIO_RxTimeout+0x34>)
   158a8:	4798      	blx	r3
   158aa:	2180      	movs	r1, #128	; 0x80
   158ac:	2012      	movs	r0, #18
   158ae:	4b08      	ldr	r3, [pc, #32]	; (158d0 <RADIO_RxTimeout+0x38>)
   158b0:	4798      	blx	r3
   158b2:	2340      	movs	r3, #64	; 0x40
   158b4:	4a07      	ldr	r2, [pc, #28]	; (158d4 <RADIO_RxTimeout+0x3c>)
   158b6:	2002      	movs	r0, #2
   158b8:	8811      	ldrh	r1, [r2, #0]
   158ba:	430b      	orrs	r3, r1
   158bc:	8013      	strh	r3, [r2, #0]
   158be:	4b06      	ldr	r3, [pc, #24]	; (158d8 <RADIO_RxTimeout+0x40>)
   158c0:	4798      	blx	r3
   158c2:	bd10      	pop	{r4, pc}
   158c4:	20002980 	.word	0x20002980
   158c8:	0000f0b9 	.word	0x0000f0b9
   158cc:	00015819 	.word	0x00015819
   158d0:	00008099 	.word	0x00008099
   158d4:	20002fbc 	.word	0x20002fbc
   158d8:	0001543d 	.word	0x0001543d

000158dc <Radio_RxFSKTimeout>:
   158dc:	b510      	push	{r4, lr}
   158de:	4b08      	ldr	r3, [pc, #32]	; (15900 <Radio_RxFSKTimeout+0x24>)
   158e0:	332f      	adds	r3, #47	; 0x2f
   158e2:	7818      	ldrb	r0, [r3, #0]
   158e4:	4b07      	ldr	r3, [pc, #28]	; (15904 <Radio_RxFSKTimeout+0x28>)
   158e6:	4798      	blx	r3
   158e8:	2000      	movs	r0, #0
   158ea:	4b07      	ldr	r3, [pc, #28]	; (15908 <Radio_RxFSKTimeout+0x2c>)
   158ec:	4798      	blx	r3
   158ee:	2380      	movs	r3, #128	; 0x80
   158f0:	4a06      	ldr	r2, [pc, #24]	; (1590c <Radio_RxFSKTimeout+0x30>)
   158f2:	2002      	movs	r0, #2
   158f4:	8811      	ldrh	r1, [r2, #0]
   158f6:	430b      	orrs	r3, r1
   158f8:	8013      	strh	r3, [r2, #0]
   158fa:	4b05      	ldr	r3, [pc, #20]	; (15910 <Radio_RxFSKTimeout+0x34>)
   158fc:	4798      	blx	r3
   158fe:	bd10      	pop	{r4, pc}
   15900:	20002980 	.word	0x20002980
   15904:	0000f0b9 	.word	0x0000f0b9
   15908:	00015819 	.word	0x00015819
   1590c:	20002fbc 	.word	0x20002fbc
   15910:	0001543d 	.word	0x0001543d

00015914 <RADIO_TxDone>:
   15914:	b570      	push	{r4, r5, r6, lr}
   15916:	4b14      	ldr	r3, [pc, #80]	; (15968 <RADIO_TxDone+0x54>)
   15918:	332f      	adds	r3, #47	; 0x2f
   1591a:	7818      	ldrb	r0, [r3, #0]
   1591c:	4b13      	ldr	r3, [pc, #76]	; (1596c <RADIO_TxDone+0x58>)
   1591e:	4798      	blx	r3
   15920:	2001      	movs	r0, #1
   15922:	4b13      	ldr	r3, [pc, #76]	; (15970 <RADIO_TxDone+0x5c>)
   15924:	4798      	blx	r3
   15926:	4b13      	ldr	r3, [pc, #76]	; (15974 <RADIO_TxDone+0x60>)
   15928:	2108      	movs	r1, #8
   1592a:	2012      	movs	r0, #18
   1592c:	4798      	blx	r3
   1592e:	4b12      	ldr	r3, [pc, #72]	; (15978 <RADIO_TxDone+0x64>)
   15930:	781a      	ldrb	r2, [r3, #0]
   15932:	4b12      	ldr	r3, [pc, #72]	; (1597c <RADIO_TxDone+0x68>)
   15934:	2a02      	cmp	r2, #2
   15936:	d002      	beq.n	1593e <RADIO_TxDone+0x2a>
   15938:	881a      	ldrh	r2, [r3, #0]
   1593a:	0692      	lsls	r2, r2, #26
   1593c:	d413      	bmi.n	15966 <RADIO_TxDone+0x52>
   1593e:	2001      	movs	r0, #1
   15940:	881a      	ldrh	r2, [r3, #0]
   15942:	4302      	orrs	r2, r0
   15944:	801a      	strh	r2, [r3, #0]
   15946:	4b0e      	ldr	r3, [pc, #56]	; (15980 <RADIO_TxDone+0x6c>)
   15948:	4798      	blx	r3
   1594a:	4b0e      	ldr	r3, [pc, #56]	; (15984 <RADIO_TxDone+0x70>)
   1594c:	4798      	blx	r3
   1594e:	4c0e      	ldr	r4, [pc, #56]	; (15988 <RADIO_TxDone+0x74>)
   15950:	4d0e      	ldr	r5, [pc, #56]	; (1598c <RADIO_TxDone+0x78>)
   15952:	6822      	ldr	r2, [r4, #0]
   15954:	6863      	ldr	r3, [r4, #4]
   15956:	1a80      	subs	r0, r0, r2
   15958:	4199      	sbcs	r1, r3
   1595a:	22fa      	movs	r2, #250	; 0xfa
   1595c:	2300      	movs	r3, #0
   1595e:	0092      	lsls	r2, r2, #2
   15960:	47a8      	blx	r5
   15962:	6020      	str	r0, [r4, #0]
   15964:	6061      	str	r1, [r4, #4]
   15966:	bd70      	pop	{r4, r5, r6, pc}
   15968:	20002980 	.word	0x20002980
   1596c:	0000f0b9 	.word	0x0000f0b9
   15970:	00015819 	.word	0x00015819
   15974:	00008099 	.word	0x00008099
   15978:	20002fbf 	.word	0x20002fbf
   1597c:	20002fbc 	.word	0x20002fbc
   15980:	0001543d 	.word	0x0001543d
   15984:	0000ed49 	.word	0x0000ed49
   15988:	20001128 	.word	0x20001128
   1598c:	00016995 	.word	0x00016995

00015990 <RADIO_FSKPacketSent>:
   15990:	b570      	push	{r4, r5, r6, lr}
   15992:	4b15      	ldr	r3, [pc, #84]	; (159e8 <RADIO_FSKPacketSent+0x58>)
   15994:	203f      	movs	r0, #63	; 0x3f
   15996:	4798      	blx	r3
   15998:	0703      	lsls	r3, r0, #28
   1599a:	d524      	bpl.n	159e6 <RADIO_FSKPacketSent+0x56>
   1599c:	4b13      	ldr	r3, [pc, #76]	; (159ec <RADIO_FSKPacketSent+0x5c>)
   1599e:	332f      	adds	r3, #47	; 0x2f
   159a0:	7818      	ldrb	r0, [r3, #0]
   159a2:	4b13      	ldr	r3, [pc, #76]	; (159f0 <RADIO_FSKPacketSent+0x60>)
   159a4:	4798      	blx	r3
   159a6:	4b13      	ldr	r3, [pc, #76]	; (159f4 <RADIO_FSKPacketSent+0x64>)
   159a8:	2001      	movs	r0, #1
   159aa:	4798      	blx	r3
   159ac:	4b12      	ldr	r3, [pc, #72]	; (159f8 <RADIO_FSKPacketSent+0x68>)
   159ae:	4c13      	ldr	r4, [pc, #76]	; (159fc <RADIO_FSKPacketSent+0x6c>)
   159b0:	781b      	ldrb	r3, [r3, #0]
   159b2:	2b02      	cmp	r3, #2
   159b4:	d002      	beq.n	159bc <RADIO_FSKPacketSent+0x2c>
   159b6:	8823      	ldrh	r3, [r4, #0]
   159b8:	069b      	lsls	r3, r3, #26
   159ba:	d414      	bmi.n	159e6 <RADIO_FSKPacketSent+0x56>
   159bc:	4b10      	ldr	r3, [pc, #64]	; (15a00 <RADIO_FSKPacketSent+0x70>)
   159be:	4798      	blx	r3
   159c0:	4d10      	ldr	r5, [pc, #64]	; (15a04 <RADIO_FSKPacketSent+0x74>)
   159c2:	4e11      	ldr	r6, [pc, #68]	; (15a08 <RADIO_FSKPacketSent+0x78>)
   159c4:	682a      	ldr	r2, [r5, #0]
   159c6:	686b      	ldr	r3, [r5, #4]
   159c8:	1a80      	subs	r0, r0, r2
   159ca:	4199      	sbcs	r1, r3
   159cc:	22fa      	movs	r2, #250	; 0xfa
   159ce:	2300      	movs	r3, #0
   159d0:	0092      	lsls	r2, r2, #2
   159d2:	47b0      	blx	r6
   159d4:	4b0d      	ldr	r3, [pc, #52]	; (15a0c <RADIO_FSKPacketSent+0x7c>)
   159d6:	6028      	str	r0, [r5, #0]
   159d8:	6069      	str	r1, [r5, #4]
   159da:	2001      	movs	r0, #1
   159dc:	4798      	blx	r3
   159de:	2304      	movs	r3, #4
   159e0:	8822      	ldrh	r2, [r4, #0]
   159e2:	4313      	orrs	r3, r2
   159e4:	8023      	strh	r3, [r4, #0]
   159e6:	bd70      	pop	{r4, r5, r6, pc}
   159e8:	000080c1 	.word	0x000080c1
   159ec:	20002980 	.word	0x20002980
   159f0:	0000f0b9 	.word	0x0000f0b9
   159f4:	00015819 	.word	0x00015819
   159f8:	20002fbf 	.word	0x20002fbf
   159fc:	20002fbc 	.word	0x20002fbc
   15a00:	0000ed49 	.word	0x0000ed49
   15a04:	20001128 	.word	0x20001128
   15a08:	00016995 	.word	0x00016995
   15a0c:	0001543d 	.word	0x0001543d

00015a10 <RADIO_RxDone>:
   15a10:	b570      	push	{r4, r5, r6, lr}
   15a12:	2012      	movs	r0, #18
   15a14:	4e16      	ldr	r6, [pc, #88]	; (15a70 <RADIO_RxDone+0x60>)
   15a16:	47b0      	blx	r6
   15a18:	4b16      	ldr	r3, [pc, #88]	; (15a74 <RADIO_RxDone+0x64>)
   15a1a:	0005      	movs	r5, r0
   15a1c:	2170      	movs	r1, #112	; 0x70
   15a1e:	2012      	movs	r0, #18
   15a20:	4798      	blx	r3
   15a22:	2350      	movs	r3, #80	; 0x50
   15a24:	402b      	ands	r3, r5
   15a26:	2b50      	cmp	r3, #80	; 0x50
   15a28:	d119      	bne.n	15a5e <RADIO_RxDone+0x4e>
   15a2a:	4c13      	ldr	r4, [pc, #76]	; (15a78 <RADIO_RxDone+0x68>)
   15a2c:	0023      	movs	r3, r4
   15a2e:	332f      	adds	r3, #47	; 0x2f
   15a30:	7818      	ldrb	r0, [r3, #0]
   15a32:	4b12      	ldr	r3, [pc, #72]	; (15a7c <RADIO_RxDone+0x6c>)
   15a34:	4798      	blx	r3
   15a36:	4b12      	ldr	r3, [pc, #72]	; (15a80 <RADIO_RxDone+0x70>)
   15a38:	2000      	movs	r0, #0
   15a3a:	4798      	blx	r3
   15a3c:	3404      	adds	r4, #4
   15a3e:	201c      	movs	r0, #28
   15a40:	47b0      	blx	r6
   15a42:	7fe2      	ldrb	r2, [r4, #31]
   15a44:	4b0f      	ldr	r3, [pc, #60]	; (15a84 <RADIO_RxDone+0x74>)
   15a46:	4910      	ldr	r1, [pc, #64]	; (15a88 <RADIO_RxDone+0x78>)
   15a48:	2a00      	cmp	r2, #0
   15a4a:	d003      	beq.n	15a54 <RADIO_RxDone+0x44>
   15a4c:	06aa      	lsls	r2, r5, #26
   15a4e:	d407      	bmi.n	15a60 <RADIO_RxDone+0x50>
   15a50:	0642      	lsls	r2, r0, #25
   15a52:	d505      	bpl.n	15a60 <RADIO_RxDone+0x50>
   15a54:	2002      	movs	r0, #2
   15a56:	881a      	ldrh	r2, [r3, #0]
   15a58:	4302      	orrs	r2, r0
   15a5a:	801a      	strh	r2, [r3, #0]
   15a5c:	4788      	blx	r1
   15a5e:	bd70      	pop	{r4, r5, r6, pc}
   15a60:	2280      	movs	r2, #128	; 0x80
   15a62:	8818      	ldrh	r0, [r3, #0]
   15a64:	0052      	lsls	r2, r2, #1
   15a66:	4302      	orrs	r2, r0
   15a68:	801a      	strh	r2, [r3, #0]
   15a6a:	2002      	movs	r0, #2
   15a6c:	e7f6      	b.n	15a5c <RADIO_RxDone+0x4c>
   15a6e:	46c0      	nop			; (mov r8, r8)
   15a70:	000080c1 	.word	0x000080c1
   15a74:	00008099 	.word	0x00008099
   15a78:	20002980 	.word	0x20002980
   15a7c:	0000f0b9 	.word	0x0000f0b9
   15a80:	00015819 	.word	0x00015819
   15a84:	20002fbc 	.word	0x20002fbc
   15a88:	0001543d 	.word	0x0001543d

00015a8c <RADIO_FSKPayloadReady>:
   15a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a8e:	203f      	movs	r0, #63	; 0x3f
   15a90:	4b39      	ldr	r3, [pc, #228]	; (15b78 <RADIO_FSKPayloadReady+0xec>)
   15a92:	4798      	blx	r3
   15a94:	0743      	lsls	r3, r0, #29
   15a96:	d559      	bpl.n	15b4c <RADIO_FSKPayloadReady+0xc0>
   15a98:	4c38      	ldr	r4, [pc, #224]	; (15b7c <RADIO_FSKPayloadReady+0xf0>)
   15a9a:	4d39      	ldr	r5, [pc, #228]	; (15b80 <RADIO_FSKPayloadReady+0xf4>)
   15a9c:	1d23      	adds	r3, r4, #4
   15a9e:	7fdb      	ldrb	r3, [r3, #31]
   15aa0:	2b01      	cmp	r3, #1
   15aa2:	d154      	bne.n	15b4e <RADIO_FSKPayloadReady+0xc2>
   15aa4:	2202      	movs	r2, #2
   15aa6:	4210      	tst	r0, r2
   15aa8:	d048      	beq.n	15b3c <RADIO_FSKPayloadReady+0xb0>
   15aaa:	0023      	movs	r3, r4
   15aac:	332f      	adds	r3, #47	; 0x2f
   15aae:	7818      	ldrb	r0, [r3, #0]
   15ab0:	4e34      	ldr	r6, [pc, #208]	; (15b84 <RADIO_FSKPayloadReady+0xf8>)
   15ab2:	47b0      	blx	r6
   15ab4:	0023      	movs	r3, r4
   15ab6:	332e      	adds	r3, #46	; 0x2e
   15ab8:	7818      	ldrb	r0, [r3, #0]
   15aba:	47b0      	blx	r6
   15abc:	4b32      	ldr	r3, [pc, #200]	; (15b88 <RADIO_FSKPayloadReady+0xfc>)
   15abe:	4798      	blx	r3
   15ac0:	0022      	movs	r2, r4
   15ac2:	0023      	movs	r3, r4
   15ac4:	322c      	adds	r2, #44	; 0x2c
   15ac6:	3358      	adds	r3, #88	; 0x58
   15ac8:	7810      	ldrb	r0, [r2, #0]
   15aca:	7819      	ldrb	r1, [r3, #0]
   15acc:	4288      	cmp	r0, r1
   15ace:	d105      	bne.n	15adc <RADIO_FSKPayloadReady+0x50>
   15ad0:	7812      	ldrb	r2, [r2, #0]
   15ad2:	2a00      	cmp	r2, #0
   15ad4:	d002      	beq.n	15adc <RADIO_FSKPayloadReady+0x50>
   15ad6:	781b      	ldrb	r3, [r3, #0]
   15ad8:	2b00      	cmp	r3, #0
   15ada:	d118      	bne.n	15b0e <RADIO_FSKPayloadReady+0x82>
   15adc:	0021      	movs	r1, r4
   15ade:	312c      	adds	r1, #44	; 0x2c
   15ae0:	7808      	ldrb	r0, [r1, #0]
   15ae2:	b2c0      	uxtb	r0, r0
   15ae4:	2800      	cmp	r0, #0
   15ae6:	d102      	bne.n	15aee <RADIO_FSKPayloadReady+0x62>
   15ae8:	2201      	movs	r2, #1
   15aea:	4b28      	ldr	r3, [pc, #160]	; (15b8c <RADIO_FSKPayloadReady+0x100>)
   15aec:	4798      	blx	r3
   15aee:	0026      	movs	r6, r4
   15af0:	0027      	movs	r7, r4
   15af2:	3658      	adds	r6, #88	; 0x58
   15af4:	7830      	ldrb	r0, [r6, #0]
   15af6:	372c      	adds	r7, #44	; 0x2c
   15af8:	b2c0      	uxtb	r0, r0
   15afa:	2800      	cmp	r0, #0
   15afc:	d110      	bne.n	15b20 <RADIO_FSKPayloadReady+0x94>
   15afe:	783a      	ldrb	r2, [r7, #0]
   15b00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15b02:	b2d2      	uxtb	r2, r2
   15b04:	4b21      	ldr	r3, [pc, #132]	; (15b8c <RADIO_FSKPayloadReady+0x100>)
   15b06:	4798      	blx	r3
   15b08:	783b      	ldrb	r3, [r7, #0]
   15b0a:	b2db      	uxtb	r3, r3
   15b0c:	7033      	strb	r3, [r6, #0]
   15b0e:	4b20      	ldr	r3, [pc, #128]	; (15b90 <RADIO_FSKPayloadReady+0x104>)
   15b10:	4798      	blx	r3
   15b12:	4b20      	ldr	r3, [pc, #128]	; (15b94 <RADIO_FSKPayloadReady+0x108>)
   15b14:	2000      	movs	r0, #0
   15b16:	4798      	blx	r3
   15b18:	2308      	movs	r3, #8
   15b1a:	882a      	ldrh	r2, [r5, #0]
   15b1c:	4313      	orrs	r3, r2
   15b1e:	e011      	b.n	15b44 <RADIO_FSKPayloadReady+0xb8>
   15b20:	783b      	ldrb	r3, [r7, #0]
   15b22:	7832      	ldrb	r2, [r6, #0]
   15b24:	1a9b      	subs	r3, r3, r2
   15b26:	2b00      	cmp	r3, #0
   15b28:	ddf1      	ble.n	15b0e <RADIO_FSKPayloadReady+0x82>
   15b2a:	7833      	ldrb	r3, [r6, #0]
   15b2c:	783a      	ldrb	r2, [r7, #0]
   15b2e:	7831      	ldrb	r1, [r6, #0]
   15b30:	2000      	movs	r0, #0
   15b32:	1a52      	subs	r2, r2, r1
   15b34:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15b36:	b2d2      	uxtb	r2, r2
   15b38:	18c9      	adds	r1, r1, r3
   15b3a:	e7e3      	b.n	15b04 <RADIO_FSKPayloadReady+0x78>
   15b3c:	2380      	movs	r3, #128	; 0x80
   15b3e:	8829      	ldrh	r1, [r5, #0]
   15b40:	005b      	lsls	r3, r3, #1
   15b42:	430b      	orrs	r3, r1
   15b44:	802b      	strh	r3, [r5, #0]
   15b46:	2002      	movs	r0, #2
   15b48:	4b13      	ldr	r3, [pc, #76]	; (15b98 <RADIO_FSKPayloadReady+0x10c>)
   15b4a:	4798      	blx	r3
   15b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15b4e:	0023      	movs	r3, r4
   15b50:	332f      	adds	r3, #47	; 0x2f
   15b52:	4e0c      	ldr	r6, [pc, #48]	; (15b84 <RADIO_FSKPayloadReady+0xf8>)
   15b54:	7818      	ldrb	r0, [r3, #0]
   15b56:	47b0      	blx	r6
   15b58:	0023      	movs	r3, r4
   15b5a:	332e      	adds	r3, #46	; 0x2e
   15b5c:	7818      	ldrb	r0, [r3, #0]
   15b5e:	47b0      	blx	r6
   15b60:	4e0e      	ldr	r6, [pc, #56]	; (15b9c <RADIO_FSKPayloadReady+0x110>)
   15b62:	2201      	movs	r2, #1
   15b64:	0031      	movs	r1, r6
   15b66:	2000      	movs	r0, #0
   15b68:	4f08      	ldr	r7, [pc, #32]	; (15b8c <RADIO_FSKPayloadReady+0x100>)
   15b6a:	47b8      	blx	r7
   15b6c:	7832      	ldrb	r2, [r6, #0]
   15b6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   15b70:	b2d2      	uxtb	r2, r2
   15b72:	2000      	movs	r0, #0
   15b74:	47b8      	blx	r7
   15b76:	e7cc      	b.n	15b12 <RADIO_FSKPayloadReady+0x86>
   15b78:	000080c1 	.word	0x000080c1
   15b7c:	20002980 	.word	0x20002980
   15b80:	20002fbc 	.word	0x20002fbc
   15b84:	0000f0b9 	.word	0x0000f0b9
   15b88:	0000457d 	.word	0x0000457d
   15b8c:	0000812d 	.word	0x0000812d
   15b90:	000045bd 	.word	0x000045bd
   15b94:	00015819 	.word	0x00015819
   15b98:	0001543d 	.word	0x0001543d
   15b9c:	200029ac 	.word	0x200029ac

00015ba0 <Radio_SetClockInput>:
   15ba0:	b510      	push	{r4, lr}
   15ba2:	4b08      	ldr	r3, [pc, #32]	; (15bc4 <Radio_SetClockInput+0x24>)
   15ba4:	3355      	adds	r3, #85	; 0x55
   15ba6:	781b      	ldrb	r3, [r3, #0]
   15ba8:	2b00      	cmp	r3, #0
   15baa:	d10a      	bne.n	15bc2 <Radio_SetClockInput+0x22>
   15bac:	4b06      	ldr	r3, [pc, #24]	; (15bc8 <Radio_SetClockInput+0x28>)
   15bae:	204b      	movs	r0, #75	; 0x4b
   15bb0:	4798      	blx	r3
   15bb2:	2110      	movs	r1, #16
   15bb4:	4301      	orrs	r1, r0
   15bb6:	4b05      	ldr	r3, [pc, #20]	; (15bcc <Radio_SetClockInput+0x2c>)
   15bb8:	b2c9      	uxtb	r1, r1
   15bba:	204b      	movs	r0, #75	; 0x4b
   15bbc:	4798      	blx	r3
   15bbe:	4b04      	ldr	r3, [pc, #16]	; (15bd0 <Radio_SetClockInput+0x30>)
   15bc0:	4798      	blx	r3
   15bc2:	bd10      	pop	{r4, pc}
   15bc4:	20002980 	.word	0x20002980
   15bc8:	000080c1 	.word	0x000080c1
   15bcc:	00008099 	.word	0x00008099
   15bd0:	000081e1 	.word	0x000081e1

00015bd4 <Radio_ResetClockInput>:
   15bd4:	b510      	push	{r4, lr}
   15bd6:	4b04      	ldr	r3, [pc, #16]	; (15be8 <Radio_ResetClockInput+0x14>)
   15bd8:	3355      	adds	r3, #85	; 0x55
   15bda:	781b      	ldrb	r3, [r3, #0]
   15bdc:	2b00      	cmp	r3, #0
   15bde:	d101      	bne.n	15be4 <Radio_ResetClockInput+0x10>
   15be0:	4b02      	ldr	r3, [pc, #8]	; (15bec <Radio_ResetClockInput+0x18>)
   15be2:	4798      	blx	r3
   15be4:	bd10      	pop	{r4, pc}
   15be6:	46c0      	nop			; (mov r8, r8)
   15be8:	20002980 	.word	0x20002980
   15bec:	000081fd 	.word	0x000081fd

00015bf0 <RADIO_InitDefaultAttributes>:
   15bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15bf2:	2501      	movs	r5, #1
   15bf4:	4b64      	ldr	r3, [pc, #400]	; (15d88 <RADIO_InitDefaultAttributes+0x198>)
   15bf6:	4c65      	ldr	r4, [pc, #404]	; (15d8c <RADIO_InitDefaultAttributes+0x19c>)
   15bf8:	701d      	strb	r5, [r3, #0]
   15bfa:	4b65      	ldr	r3, [pc, #404]	; (15d90 <RADIO_InitDefaultAttributes+0x1a0>)
   15bfc:	2207      	movs	r2, #7
   15bfe:	6023      	str	r3, [r4, #0]
   15c00:	4b64      	ldr	r3, [pc, #400]	; (15d94 <RADIO_InitDefaultAttributes+0x1a4>)
   15c02:	18a1      	adds	r1, r4, r2
   15c04:	6063      	str	r3, [r4, #4]
   15c06:	4b64      	ldr	r3, [pc, #400]	; (15d98 <RADIO_InitDefaultAttributes+0x1a8>)
   15c08:	0027      	movs	r7, r4
   15c0a:	60a3      	str	r3, [r4, #8]
   15c0c:	0023      	movs	r3, r4
   15c0e:	3334      	adds	r3, #52	; 0x34
   15c10:	701d      	strb	r5, [r3, #0]
   15c12:	0023      	movs	r3, r4
   15c14:	3336      	adds	r3, #54	; 0x36
   15c16:	701a      	strb	r2, [r3, #0]
   15c18:	1ce3      	adds	r3, r4, #3
   15c1a:	77dd      	strb	r5, [r3, #31]
   15c1c:	0023      	movs	r3, r4
   15c1e:	3333      	adds	r3, #51	; 0x33
   15c20:	701d      	strb	r5, [r3, #0]
   15c22:	2300      	movs	r3, #0
   15c24:	77cb      	strb	r3, [r1, #31]
   15c26:	2108      	movs	r1, #8
   15c28:	82a1      	strh	r1, [r4, #20]
   15c2a:	0021      	movs	r1, r4
   15c2c:	3135      	adds	r1, #53	; 0x35
   15c2e:	700a      	strb	r2, [r1, #0]
   15c30:	1d22      	adds	r2, r4, #4
   15c32:	77d5      	strb	r5, [r2, #31]
   15c34:	1d62      	adds	r2, r4, #5
   15c36:	77d3      	strb	r3, [r2, #31]
   15c38:	1da2      	adds	r2, r4, #6
   15c3a:	77d3      	strb	r3, [r2, #31]
   15c3c:	2194      	movs	r1, #148	; 0x94
   15c3e:	22c1      	movs	r2, #193	; 0xc1
   15c40:	76a1      	strb	r1, [r4, #26]
   15c42:	7662      	strb	r2, [r4, #25]
   15c44:	76e2      	strb	r2, [r4, #27]
   15c46:	3991      	subs	r1, #145	; 0x91
   15c48:	1ca2      	adds	r2, r4, #2
   15c4a:	77d1      	strb	r1, [r2, #31]
   15c4c:	2234      	movs	r2, #52	; 0x34
   15c4e:	7622      	strb	r2, [r4, #24]
   15c50:	0022      	movs	r2, r4
   15c52:	317d      	adds	r1, #125	; 0x7d
   15c54:	3232      	adds	r2, #50	; 0x32
   15c56:	7011      	strb	r1, [r2, #0]
   15c58:	4a50      	ldr	r2, [pc, #320]	; (15d9c <RADIO_InitDefaultAttributes+0x1ac>)
   15c5a:	397e      	subs	r1, #126	; 0x7e
   15c5c:	60e2      	str	r2, [r4, #12]
   15c5e:	0022      	movs	r2, r4
   15c60:	3237      	adds	r2, #55	; 0x37
   15c62:	7011      	strb	r1, [r2, #0]
   15c64:	0022      	movs	r2, r4
   15c66:	3109      	adds	r1, #9
   15c68:	3238      	adds	r2, #56	; 0x38
   15c6a:	7011      	strb	r1, [r2, #0]
   15c6c:	0022      	movs	r2, r4
   15c6e:	3107      	adds	r1, #7
   15c70:	3239      	adds	r2, #57	; 0x39
   15c72:	7011      	strb	r1, [r2, #0]
   15c74:	0022      	movs	r2, r4
   15c76:	322c      	adds	r2, #44	; 0x2c
   15c78:	7013      	strb	r3, [r2, #0]
   15c7a:	4a49      	ldr	r2, [pc, #292]	; (15da0 <RADIO_InitDefaultAttributes+0x1b0>)
   15c7c:	82e3      	strh	r3, [r4, #22]
   15c7e:	62a2      	str	r2, [r4, #40]	; 0x28
   15c80:	0022      	movs	r2, r4
   15c82:	324c      	adds	r2, #76	; 0x4c
   15c84:	8013      	strh	r3, [r2, #0]
   15c86:	0022      	movs	r2, r4
   15c88:	324e      	adds	r2, #78	; 0x4e
   15c8a:	7013      	strb	r3, [r2, #0]
   15c8c:	0022      	movs	r2, r4
   15c8e:	324f      	adds	r2, #79	; 0x4f
   15c90:	7013      	strb	r3, [r2, #0]
   15c92:	0022      	movs	r2, r4
   15c94:	3240      	adds	r2, #64	; 0x40
   15c96:	7013      	strb	r3, [r2, #0]
   15c98:	0022      	movs	r2, r4
   15c9a:	3241      	adds	r2, #65	; 0x41
   15c9c:	7013      	strb	r3, [r2, #0]
   15c9e:	0022      	movs	r2, r4
   15ca0:	3254      	adds	r2, #84	; 0x54
   15ca2:	7013      	strb	r3, [r2, #0]
   15ca4:	0022      	movs	r2, r4
   15ca6:	3255      	adds	r2, #85	; 0x55
   15ca8:	7015      	strb	r5, [r2, #0]
   15caa:	0022      	movs	r2, r4
   15cac:	3258      	adds	r2, #88	; 0x58
   15cae:	6463      	str	r3, [r4, #68]	; 0x44
   15cb0:	64a3      	str	r3, [r4, #72]	; 0x48
   15cb2:	87a3      	strh	r3, [r4, #60]	; 0x3c
   15cb4:	87e3      	strh	r3, [r4, #62]	; 0x3e
   15cb6:	7013      	strb	r3, [r2, #0]
   15cb8:	3730      	adds	r7, #48	; 0x30
   15cba:	783b      	ldrb	r3, [r7, #0]
   15cbc:	2b00      	cmp	r3, #0
   15cbe:	d151      	bne.n	15d64 <RADIO_InitDefaultAttributes+0x174>
   15cc0:	4838      	ldr	r0, [pc, #224]	; (15da4 <RADIO_InitDefaultAttributes+0x1b4>)
   15cc2:	4e39      	ldr	r6, [pc, #228]	; (15da8 <RADIO_InitDefaultAttributes+0x1b8>)
   15cc4:	47b0      	blx	r6
   15cc6:	2808      	cmp	r0, #8
   15cc8:	d149      	bne.n	15d5e <RADIO_InitDefaultAttributes+0x16e>
   15cca:	4838      	ldr	r0, [pc, #224]	; (15dac <RADIO_InitDefaultAttributes+0x1bc>)
   15ccc:	47b0      	blx	r6
   15cce:	2808      	cmp	r0, #8
   15cd0:	d145      	bne.n	15d5e <RADIO_InitDefaultAttributes+0x16e>
   15cd2:	4837      	ldr	r0, [pc, #220]	; (15db0 <RADIO_InitDefaultAttributes+0x1c0>)
   15cd4:	47b0      	blx	r6
   15cd6:	2808      	cmp	r0, #8
   15cd8:	d141      	bne.n	15d5e <RADIO_InitDefaultAttributes+0x16e>
   15cda:	4836      	ldr	r0, [pc, #216]	; (15db4 <RADIO_InitDefaultAttributes+0x1c4>)
   15cdc:	47b0      	blx	r6
   15cde:	2808      	cmp	r0, #8
   15ce0:	d13d      	bne.n	15d5e <RADIO_InitDefaultAttributes+0x16e>
   15ce2:	703d      	strb	r5, [r7, #0]
   15ce4:	4b34      	ldr	r3, [pc, #208]	; (15db8 <RADIO_InitDefaultAttributes+0x1c8>)
   15ce6:	4798      	blx	r3
   15ce8:	4b34      	ldr	r3, [pc, #208]	; (15dbc <RADIO_InitDefaultAttributes+0x1cc>)
   15cea:	4798      	blx	r3
   15cec:	2800      	cmp	r0, #0
   15cee:	d107      	bne.n	15d00 <RADIO_InitDefaultAttributes+0x110>
   15cf0:	0023      	movs	r3, r4
   15cf2:	3355      	adds	r3, #85	; 0x55
   15cf4:	7018      	strb	r0, [r3, #0]
   15cf6:	4b32      	ldr	r3, [pc, #200]	; (15dc0 <RADIO_InitDefaultAttributes+0x1d0>)
   15cf8:	4798      	blx	r3
   15cfa:	0023      	movs	r3, r4
   15cfc:	3354      	adds	r3, #84	; 0x54
   15cfe:	7018      	strb	r0, [r3, #0]
   15d00:	4b30      	ldr	r3, [pc, #192]	; (15dc4 <RADIO_InitDefaultAttributes+0x1d4>)
   15d02:	4798      	blx	r3
   15d04:	2201      	movs	r2, #1
   15d06:	2100      	movs	r1, #0
   15d08:	0010      	movs	r0, r2
   15d0a:	4f2f      	ldr	r7, [pc, #188]	; (15dc8 <RADIO_InitDefaultAttributes+0x1d8>)
   15d0c:	47b8      	blx	r7
   15d0e:	6820      	ldr	r0, [r4, #0]
   15d10:	4b2e      	ldr	r3, [pc, #184]	; (15dcc <RADIO_InitDefaultAttributes+0x1dc>)
   15d12:	4798      	blx	r3
   15d14:	2142      	movs	r1, #66	; 0x42
   15d16:	203b      	movs	r0, #59	; 0x3b
   15d18:	4d2d      	ldr	r5, [pc, #180]	; (15dd0 <RADIO_InitDefaultAttributes+0x1e0>)
   15d1a:	47a8      	blx	r5
   15d1c:	203b      	movs	r0, #59	; 0x3b
   15d1e:	4b2d      	ldr	r3, [pc, #180]	; (15dd4 <RADIO_InitDefaultAttributes+0x1e4>)
   15d20:	4798      	blx	r3
   15d22:	2620      	movs	r6, #32
   15d24:	4006      	ands	r6, r0
   15d26:	d1f9      	bne.n	15d1c <RADIO_InitDefaultAttributes+0x12c>
   15d28:	2123      	movs	r1, #35	; 0x23
   15d2a:	200c      	movs	r0, #12
   15d2c:	47a8      	blx	r5
   15d2e:	21aa      	movs	r1, #170	; 0xaa
   15d30:	201f      	movs	r0, #31
   15d32:	47a8      	blx	r5
   15d34:	21ff      	movs	r1, #255	; 0xff
   15d36:	2032      	movs	r0, #50	; 0x32
   15d38:	47a8      	blx	r5
   15d3a:	2140      	movs	r1, #64	; 0x40
   15d3c:	2031      	movs	r0, #49	; 0x31
   15d3e:	47a8      	blx	r5
   15d40:	2201      	movs	r2, #1
   15d42:	0030      	movs	r0, r6
   15d44:	0011      	movs	r1, r2
   15d46:	47b8      	blx	r7
   15d48:	21ff      	movs	r1, #255	; 0xff
   15d4a:	2023      	movs	r0, #35	; 0x23
   15d4c:	47a8      	blx	r5
   15d4e:	4b21      	ldr	r3, [pc, #132]	; (15dd4 <RADIO_InitDefaultAttributes+0x1e4>)
   15d50:	2042      	movs	r0, #66	; 0x42
   15d52:	4798      	blx	r3
   15d54:	3431      	adds	r4, #49	; 0x31
   15d56:	4b20      	ldr	r3, [pc, #128]	; (15dd8 <RADIO_InitDefaultAttributes+0x1e8>)
   15d58:	7020      	strb	r0, [r4, #0]
   15d5a:	4798      	blx	r3
   15d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15d5e:	4b1f      	ldr	r3, [pc, #124]	; (15ddc <RADIO_InitDefaultAttributes+0x1ec>)
   15d60:	4798      	blx	r3
   15d62:	e7bf      	b.n	15ce4 <RADIO_InitDefaultAttributes+0xf4>
   15d64:	0023      	movs	r3, r4
   15d66:	332d      	adds	r3, #45	; 0x2d
   15d68:	4d1d      	ldr	r5, [pc, #116]	; (15de0 <RADIO_InitDefaultAttributes+0x1f0>)
   15d6a:	7818      	ldrb	r0, [r3, #0]
   15d6c:	47a8      	blx	r5
   15d6e:	0023      	movs	r3, r4
   15d70:	332e      	adds	r3, #46	; 0x2e
   15d72:	7818      	ldrb	r0, [r3, #0]
   15d74:	47a8      	blx	r5
   15d76:	0023      	movs	r3, r4
   15d78:	332f      	adds	r3, #47	; 0x2f
   15d7a:	7818      	ldrb	r0, [r3, #0]
   15d7c:	47a8      	blx	r5
   15d7e:	0023      	movs	r3, r4
   15d80:	3350      	adds	r3, #80	; 0x50
   15d82:	7818      	ldrb	r0, [r3, #0]
   15d84:	47a8      	blx	r5
   15d86:	e7ad      	b.n	15ce4 <RADIO_InitDefaultAttributes+0xf4>
   15d88:	20002fbf 	.word	0x20002fbf
   15d8c:	20002980 	.word	0x20002980
   15d90:	33be27a0 	.word	0x33be27a0
   15d94:	000061a8 	.word	0x000061a8
   15d98:	0000c350 	.word	0x0000c350
   15d9c:	00003a98 	.word	0x00003a98
   15da0:	20002ebc 	.word	0x20002ebc
   15da4:	200029ad 	.word	0x200029ad
   15da8:	0000ed6d 	.word	0x0000ed6d
   15dac:	200029ae 	.word	0x200029ae
   15db0:	200029af 	.word	0x200029af
   15db4:	200029d0 	.word	0x200029d0
   15db8:	00008059 	.word	0x00008059
   15dbc:	000081dd 	.word	0x000081dd
   15dc0:	000081d9 	.word	0x000081d9
   15dc4:	00015ba1 	.word	0x00015ba1
   15dc8:	0000f46d 	.word	0x0000f46d
   15dcc:	00014e35 	.word	0x00014e35
   15dd0:	00008099 	.word	0x00008099
   15dd4:	000080c1 	.word	0x000080c1
   15dd8:	00015bd5 	.word	0x00015bd5
   15ddc:	0000ecb1 	.word	0x0000ecb1
   15de0:	0000f0b9 	.word	0x0000f0b9

00015de4 <RADIO_Receive>:
   15de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15de6:	7803      	ldrb	r3, [r0, #0]
   15de8:	0006      	movs	r6, r0
   15dea:	4d24      	ldr	r5, [pc, #144]	; (15e7c <RADIO_Receive+0x98>)
   15dec:	2b00      	cmp	r3, #0
   15dee:	d11d      	bne.n	15e2c <RADIO_Receive+0x48>
   15df0:	782b      	ldrb	r3, [r5, #0]
   15df2:	2004      	movs	r0, #4
   15df4:	2b01      	cmp	r3, #1
   15df6:	d118      	bne.n	15e2a <RADIO_Receive+0x46>
   15df8:	4c21      	ldr	r4, [pc, #132]	; (15e80 <RADIO_Receive+0x9c>)
   15dfa:	4f22      	ldr	r7, [pc, #136]	; (15e84 <RADIO_Receive+0xa0>)
   15dfc:	0023      	movs	r3, r4
   15dfe:	332f      	adds	r3, #47	; 0x2f
   15e00:	7818      	ldrb	r0, [r3, #0]
   15e02:	47b8      	blx	r7
   15e04:	0023      	movs	r3, r4
   15e06:	3334      	adds	r3, #52	; 0x34
   15e08:	781b      	ldrb	r3, [r3, #0]
   15e0a:	2b00      	cmp	r3, #0
   15e0c:	d102      	bne.n	15e14 <RADIO_Receive+0x30>
   15e0e:	342e      	adds	r4, #46	; 0x2e
   15e10:	7820      	ldrb	r0, [r4, #0]
   15e12:	47b8      	blx	r7
   15e14:	8872      	ldrh	r2, [r6, #2]
   15e16:	4b1c      	ldr	r3, [pc, #112]	; (15e88 <RADIO_Receive+0xa4>)
   15e18:	2008      	movs	r0, #8
   15e1a:	801a      	strh	r2, [r3, #0]
   15e1c:	2304      	movs	r3, #4
   15e1e:	702b      	strb	r3, [r5, #0]
   15e20:	4b1a      	ldr	r3, [pc, #104]	; (15e8c <RADIO_Receive+0xa8>)
   15e22:	4798      	blx	r3
   15e24:	4b1a      	ldr	r3, [pc, #104]	; (15e90 <RADIO_Receive+0xac>)
   15e26:	4798      	blx	r3
   15e28:	2000      	movs	r0, #0
   15e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e2c:	782b      	ldrb	r3, [r5, #0]
   15e2e:	2000      	movs	r0, #0
   15e30:	2b01      	cmp	r3, #1
   15e32:	d0fa      	beq.n	15e2a <RADIO_Receive+0x46>
   15e34:	782b      	ldrb	r3, [r5, #0]
   15e36:	3003      	adds	r0, #3
   15e38:	2b04      	cmp	r3, #4
   15e3a:	d1f6      	bne.n	15e2a <RADIO_Receive+0x46>
   15e3c:	4c10      	ldr	r4, [pc, #64]	; (15e80 <RADIO_Receive+0x9c>)
   15e3e:	4e11      	ldr	r6, [pc, #68]	; (15e84 <RADIO_Receive+0xa0>)
   15e40:	0023      	movs	r3, r4
   15e42:	332f      	adds	r3, #47	; 0x2f
   15e44:	7818      	ldrb	r0, [r3, #0]
   15e46:	47b0      	blx	r6
   15e48:	0023      	movs	r3, r4
   15e4a:	3334      	adds	r3, #52	; 0x34
   15e4c:	781b      	ldrb	r3, [r3, #0]
   15e4e:	2b00      	cmp	r3, #0
   15e50:	d103      	bne.n	15e5a <RADIO_Receive+0x76>
   15e52:	0023      	movs	r3, r4
   15e54:	332e      	adds	r3, #46	; 0x2e
   15e56:	7818      	ldrb	r0, [r3, #0]
   15e58:	47b0      	blx	r6
   15e5a:	2200      	movs	r2, #0
   15e5c:	3434      	adds	r4, #52	; 0x34
   15e5e:	7821      	ldrb	r1, [r4, #0]
   15e60:	0010      	movs	r0, r2
   15e62:	4b0c      	ldr	r3, [pc, #48]	; (15e94 <RADIO_Receive+0xb0>)
   15e64:	4798      	blx	r3
   15e66:	4b0c      	ldr	r3, [pc, #48]	; (15e98 <RADIO_Receive+0xb4>)
   15e68:	4798      	blx	r3
   15e6a:	2301      	movs	r3, #1
   15e6c:	2008      	movs	r0, #8
   15e6e:	4c0b      	ldr	r4, [pc, #44]	; (15e9c <RADIO_Receive+0xb8>)
   15e70:	702b      	strb	r3, [r5, #0]
   15e72:	47a0      	blx	r4
   15e74:	2002      	movs	r0, #2
   15e76:	47a0      	blx	r4
   15e78:	e7d6      	b.n	15e28 <RADIO_Receive+0x44>
   15e7a:	46c0      	nop			; (mov r8, r8)
   15e7c:	20002fbf 	.word	0x20002fbf
   15e80:	20002980 	.word	0x20002980
   15e84:	0000f0b9 	.word	0x0000f0b9
   15e88:	20001126 	.word	0x20001126
   15e8c:	0001543d 	.word	0x0001543d
   15e90:	00015ba1 	.word	0x00015ba1
   15e94:	0000f46d 	.word	0x0000f46d
   15e98:	00015bd5 	.word	0x00015bd5
   15e9c:	00015469 	.word	0x00015469

00015ea0 <RADIO_TxHandler>:
   15ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15ea2:	4e56      	ldr	r6, [pc, #344]	; (15ffc <RADIO_TxHandler+0x15c>)
   15ea4:	b087      	sub	sp, #28
   15ea6:	47b0      	blx	r6
   15ea8:	4c55      	ldr	r4, [pc, #340]	; (16000 <RADIO_TxHandler+0x160>)
   15eaa:	0023      	movs	r3, r4
   15eac:	332d      	adds	r3, #45	; 0x2d
   15eae:	7818      	ldrb	r0, [r3, #0]
   15eb0:	4b54      	ldr	r3, [pc, #336]	; (16004 <RADIO_TxHandler+0x164>)
   15eb2:	4798      	blx	r3
   15eb4:	0023      	movs	r3, r4
   15eb6:	3341      	adds	r3, #65	; 0x41
   15eb8:	781b      	ldrb	r3, [r3, #0]
   15eba:	4d53      	ldr	r5, [pc, #332]	; (16008 <RADIO_TxHandler+0x168>)
   15ebc:	2b00      	cmp	r3, #0
   15ebe:	d022      	beq.n	15f06 <RADIO_TxHandler+0x66>
   15ec0:	2214      	movs	r2, #20
   15ec2:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   15ec4:	4353      	muls	r3, r2
   15ec6:	0022      	movs	r2, r4
   15ec8:	3240      	adds	r2, #64	; 0x40
   15eca:	7013      	strb	r3, [r2, #0]
   15ecc:	47b0      	blx	r6
   15ece:	2000      	movs	r0, #0
   15ed0:	4b4e      	ldr	r3, [pc, #312]	; (1600c <RADIO_TxHandler+0x16c>)
   15ed2:	4798      	blx	r3
   15ed4:	6820      	ldr	r0, [r4, #0]
   15ed6:	4b4e      	ldr	r3, [pc, #312]	; (16010 <RADIO_TxHandler+0x170>)
   15ed8:	4798      	blx	r3
   15eda:	0023      	movs	r3, r4
   15edc:	2600      	movs	r6, #0
   15ede:	334c      	adds	r3, #76	; 0x4c
   15ee0:	2201      	movs	r2, #1
   15ee2:	801e      	strh	r6, [r3, #0]
   15ee4:	0031      	movs	r1, r6
   15ee6:	4b4b      	ldr	r3, [pc, #300]	; (16014 <RADIO_TxHandler+0x174>)
   15ee8:	0030      	movs	r0, r6
   15eea:	4798      	blx	r3
   15eec:	2109      	movs	r1, #9
   15eee:	2012      	movs	r0, #18
   15ef0:	47a8      	blx	r5
   15ef2:	2201      	movs	r2, #1
   15ef4:	0031      	movs	r1, r6
   15ef6:	2005      	movs	r0, #5
   15ef8:	4b46      	ldr	r3, [pc, #280]	; (16014 <RADIO_TxHandler+0x174>)
   15efa:	4798      	blx	r3
   15efc:	0023      	movs	r3, r4
   15efe:	3340      	adds	r3, #64	; 0x40
   15f00:	781b      	ldrb	r3, [r3, #0]
   15f02:	42b3      	cmp	r3, r6
   15f04:	d844      	bhi.n	15f90 <RADIO_TxHandler+0xf0>
   15f06:	2001      	movs	r0, #1
   15f08:	4b40      	ldr	r3, [pc, #256]	; (1600c <RADIO_TxHandler+0x16c>)
   15f0a:	4798      	blx	r3
   15f0c:	4b42      	ldr	r3, [pc, #264]	; (16018 <RADIO_TxHandler+0x178>)
   15f0e:	2004      	movs	r0, #4
   15f10:	4798      	blx	r3
   15f12:	4b42      	ldr	r3, [pc, #264]	; (1601c <RADIO_TxHandler+0x17c>)
   15f14:	4e42      	ldr	r6, [pc, #264]	; (16020 <RADIO_TxHandler+0x180>)
   15f16:	781f      	ldrb	r7, [r3, #0]
   15f18:	2f01      	cmp	r7, #1
   15f1a:	d146      	bne.n	15faa <RADIO_TxHandler+0x10a>
   15f1c:	7831      	ldrb	r1, [r6, #0]
   15f1e:	2022      	movs	r0, #34	; 0x22
   15f20:	47a8      	blx	r5
   15f22:	4b40      	ldr	r3, [pc, #256]	; (16024 <RADIO_TxHandler+0x184>)
   15f24:	200a      	movs	r0, #10
   15f26:	4798      	blx	r3
   15f28:	21f0      	movs	r1, #240	; 0xf0
   15f2a:	4008      	ands	r0, r1
   15f2c:	39e8      	subs	r1, #232	; 0xe8
   15f2e:	4301      	orrs	r1, r0
   15f30:	200a      	movs	r0, #10
   15f32:	47a8      	blx	r5
   15f34:	2140      	movs	r1, #64	; 0x40
   15f36:	0008      	movs	r0, r1
   15f38:	47a8      	blx	r5
   15f3a:	2100      	movs	r1, #0
   15f3c:	2041      	movs	r0, #65	; 0x41
   15f3e:	47a8      	blx	r5
   15f40:	4b36      	ldr	r3, [pc, #216]	; (1601c <RADIO_TxHandler+0x17c>)
   15f42:	003a      	movs	r2, r7
   15f44:	7819      	ldrb	r1, [r3, #0]
   15f46:	0038      	movs	r0, r7
   15f48:	4b32      	ldr	r3, [pc, #200]	; (16014 <RADIO_TxHandler+0x174>)
   15f4a:	4798      	blx	r3
   15f4c:	4b36      	ldr	r3, [pc, #216]	; (16028 <RADIO_TxHandler+0x188>)
   15f4e:	7832      	ldrb	r2, [r6, #0]
   15f50:	6819      	ldr	r1, [r3, #0]
   15f52:	2000      	movs	r0, #0
   15f54:	4b35      	ldr	r3, [pc, #212]	; (1602c <RADIO_TxHandler+0x18c>)
   15f56:	4798      	blx	r3
   15f58:	0023      	movs	r3, r4
   15f5a:	3334      	adds	r3, #52	; 0x34
   15f5c:	7819      	ldrb	r1, [r3, #0]
   15f5e:	2200      	movs	r2, #0
   15f60:	2003      	movs	r0, #3
   15f62:	4b2c      	ldr	r3, [pc, #176]	; (16014 <RADIO_TxHandler+0x174>)
   15f64:	4798      	blx	r3
   15f66:	4b32      	ldr	r3, [pc, #200]	; (16030 <RADIO_TxHandler+0x190>)
   15f68:	4798      	blx	r3
   15f6a:	4b32      	ldr	r3, [pc, #200]	; (16034 <RADIO_TxHandler+0x194>)
   15f6c:	6018      	str	r0, [r3, #0]
   15f6e:	6059      	str	r1, [r3, #4]
   15f70:	68e3      	ldr	r3, [r4, #12]
   15f72:	2b00      	cmp	r3, #0
   15f74:	d009      	beq.n	15f8a <RADIO_TxHandler+0xea>
   15f76:	21fa      	movs	r1, #250	; 0xfa
   15f78:	2200      	movs	r2, #0
   15f7a:	342f      	adds	r4, #47	; 0x2f
   15f7c:	0089      	lsls	r1, r1, #2
   15f7e:	7820      	ldrb	r0, [r4, #0]
   15f80:	4359      	muls	r1, r3
   15f82:	9200      	str	r2, [sp, #0]
   15f84:	4b2c      	ldr	r3, [pc, #176]	; (16038 <RADIO_TxHandler+0x198>)
   15f86:	4c2d      	ldr	r4, [pc, #180]	; (1603c <RADIO_TxHandler+0x19c>)
   15f88:	47a0      	blx	r4
   15f8a:	2000      	movs	r0, #0
   15f8c:	b007      	add	sp, #28
   15f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15f90:	4f2b      	ldr	r7, [pc, #172]	; (16040 <RADIO_TxHandler+0x1a0>)
   15f92:	4b2c      	ldr	r3, [pc, #176]	; (16044 <RADIO_TxHandler+0x1a4>)
   15f94:	0038      	movs	r0, r7
   15f96:	4798      	blx	r3
   15f98:	233e      	movs	r3, #62	; 0x3e
   15f9a:	5ee2      	ldrsh	r2, [r4, r3]
   15f9c:	2100      	movs	r1, #0
   15f9e:	5e7b      	ldrsh	r3, [r7, r1]
   15fa0:	429a      	cmp	r2, r3
   15fa2:	db14      	blt.n	15fce <RADIO_TxHandler+0x12e>
   15fa4:	3601      	adds	r6, #1
   15fa6:	b2f6      	uxtb	r6, r6
   15fa8:	e7a8      	b.n	15efc <RADIO_TxHandler+0x5c>
   15faa:	2100      	movs	r1, #0
   15fac:	2040      	movs	r0, #64	; 0x40
   15fae:	47a8      	blx	r5
   15fb0:	2100      	movs	r1, #0
   15fb2:	2041      	movs	r0, #65	; 0x41
   15fb4:	47a8      	blx	r5
   15fb6:	0023      	movs	r3, r4
   15fb8:	2000      	movs	r0, #0
   15fba:	3358      	adds	r3, #88	; 0x58
   15fbc:	7831      	ldrb	r1, [r6, #0]
   15fbe:	7018      	strb	r0, [r3, #0]
   15fc0:	47a8      	blx	r5
   15fc2:	4b19      	ldr	r3, [pc, #100]	; (16028 <RADIO_TxHandler+0x188>)
   15fc4:	7831      	ldrb	r1, [r6, #0]
   15fc6:	6818      	ldr	r0, [r3, #0]
   15fc8:	4b1f      	ldr	r3, [pc, #124]	; (16048 <RADIO_TxHandler+0x1a8>)
   15fca:	4798      	blx	r3
   15fcc:	e7c4      	b.n	15f58 <RADIO_TxHandler+0xb8>
   15fce:	2000      	movs	r0, #0
   15fd0:	4b1e      	ldr	r3, [pc, #120]	; (1604c <RADIO_TxHandler+0x1ac>)
   15fd2:	4798      	blx	r3
   15fd4:	4b1e      	ldr	r3, [pc, #120]	; (16050 <RADIO_TxHandler+0x1b0>)
   15fd6:	4798      	blx	r3
   15fd8:	2307      	movs	r3, #7
   15fda:	2201      	movs	r2, #1
   15fdc:	a903      	add	r1, sp, #12
   15fde:	700b      	strb	r3, [r1, #0]
   15fe0:	4b1c      	ldr	r3, [pc, #112]	; (16054 <RADIO_TxHandler+0x1b4>)
   15fe2:	701a      	strb	r2, [r3, #0]
   15fe4:	4b1c      	ldr	r3, [pc, #112]	; (16058 <RADIO_TxHandler+0x1b8>)
   15fe6:	781b      	ldrb	r3, [r3, #0]
   15fe8:	079b      	lsls	r3, r3, #30
   15fea:	d400      	bmi.n	15fee <RADIO_TxHandler+0x14e>
   15fec:	e78b      	b.n	15f06 <RADIO_TxHandler+0x66>
   15fee:	6923      	ldr	r3, [r4, #16]
   15ff0:	2b00      	cmp	r3, #0
   15ff2:	d100      	bne.n	15ff6 <RADIO_TxHandler+0x156>
   15ff4:	e787      	b.n	15f06 <RADIO_TxHandler+0x66>
   15ff6:	2002      	movs	r0, #2
   15ff8:	4798      	blx	r3
   15ffa:	e784      	b.n	15f06 <RADIO_TxHandler+0x66>
   15ffc:	00015ba1 	.word	0x00015ba1
   16000:	20002980 	.word	0x20002980
   16004:	0000f0b9 	.word	0x0000f0b9
   16008:	00008099 	.word	0x00008099
   1600c:	000156f1 	.word	0x000156f1
   16010:	00014e35 	.word	0x00014e35
   16014:	0000f46d 	.word	0x0000f46d
   16018:	00014e7d 	.word	0x00014e7d
   1601c:	200029b4 	.word	0x200029b4
   16020:	20001134 	.word	0x20001134
   16024:	000080c1 	.word	0x000080c1
   16028:	20001130 	.word	0x20001130
   1602c:	000080ed 	.word	0x000080ed
   16030:	0000ed49 	.word	0x0000ed49
   16034:	20001128 	.word	0x20001128
   16038:	0001584d 	.word	0x0001584d
   1603c:	0000eda1 	.word	0x0000eda1
   16040:	20001124 	.word	0x20001124
   16044:	0000f631 	.word	0x0000f631
   16048:	0001556d 	.word	0x0001556d
   1604c:	00015819 	.word	0x00015819
   16050:	00015bd5 	.word	0x00015bd5
   16054:	20002fbf 	.word	0x20002fbf
   16058:	20002fbe 	.word	0x20002fbe

0001605c <RADIO_TxDoneHandler>:
   1605c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1605e:	4b35      	ldr	r3, [pc, #212]	; (16134 <RADIO_TxDoneHandler+0xd8>)
   16060:	b087      	sub	sp, #28
   16062:	881a      	ldrh	r2, [r3, #0]
   16064:	06d2      	lsls	r2, r2, #27
   16066:	0fd2      	lsrs	r2, r2, #31
   16068:	9200      	str	r2, [sp, #0]
   1606a:	466a      	mov	r2, sp
   1606c:	7810      	ldrb	r0, [r2, #0]
   1606e:	881a      	ldrh	r2, [r3, #0]
   16070:	2801      	cmp	r0, #1
   16072:	d12b      	bne.n	160cc <RADIO_TxDoneHandler+0x70>
   16074:	4c30      	ldr	r4, [pc, #192]	; (16138 <RADIO_TxDoneHandler+0xdc>)
   16076:	2110      	movs	r1, #16
   16078:	0027      	movs	r7, r4
   1607a:	2500      	movs	r5, #0
   1607c:	438a      	bics	r2, r1
   1607e:	801a      	strh	r2, [r3, #0]
   16080:	3734      	adds	r7, #52	; 0x34
   16082:	0002      	movs	r2, r0
   16084:	7839      	ldrb	r1, [r7, #0]
   16086:	4b2d      	ldr	r3, [pc, #180]	; (1613c <RADIO_TxDoneHandler+0xe0>)
   16088:	4798      	blx	r3
   1608a:	68e3      	ldr	r3, [r4, #12]
   1608c:	ae03      	add	r6, sp, #12
   1608e:	9304      	str	r3, [sp, #16]
   16090:	7035      	strb	r5, [r6, #0]
   16092:	002a      	movs	r2, r5
   16094:	4b29      	ldr	r3, [pc, #164]	; (1613c <RADIO_TxDoneHandler+0xe0>)
   16096:	7839      	ldrb	r1, [r7, #0]
   16098:	0028      	movs	r0, r5
   1609a:	4798      	blx	r3
   1609c:	466a      	mov	r2, sp
   1609e:	4b28      	ldr	r3, [pc, #160]	; (16140 <RADIO_TxDoneHandler+0xe4>)
   160a0:	7812      	ldrb	r2, [r2, #0]
   160a2:	701a      	strb	r2, [r3, #0]
   160a4:	0023      	movs	r3, r4
   160a6:	3358      	adds	r3, #88	; 0x58
   160a8:	701d      	strb	r5, [r3, #0]
   160aa:	4b26      	ldr	r3, [pc, #152]	; (16144 <RADIO_TxDoneHandler+0xe8>)
   160ac:	781b      	ldrb	r3, [r3, #0]
   160ae:	075b      	lsls	r3, r3, #29
   160b0:	d505      	bpl.n	160be <RADIO_TxDoneHandler+0x62>
   160b2:	6923      	ldr	r3, [r4, #16]
   160b4:	42ab      	cmp	r3, r5
   160b6:	d002      	beq.n	160be <RADIO_TxDoneHandler+0x62>
   160b8:	0031      	movs	r1, r6
   160ba:	2004      	movs	r0, #4
   160bc:	4798      	blx	r3
   160be:	4b22      	ldr	r3, [pc, #136]	; (16148 <RADIO_TxDoneHandler+0xec>)
   160c0:	4798      	blx	r3
   160c2:	4b22      	ldr	r3, [pc, #136]	; (1614c <RADIO_TxDoneHandler+0xf0>)
   160c4:	4798      	blx	r3
   160c6:	2000      	movs	r0, #0
   160c8:	b007      	add	sp, #28
   160ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   160cc:	07d2      	lsls	r2, r2, #31
   160ce:	d402      	bmi.n	160d6 <RADIO_TxDoneHandler+0x7a>
   160d0:	881a      	ldrh	r2, [r3, #0]
   160d2:	0752      	lsls	r2, r2, #29
   160d4:	d527      	bpl.n	16126 <RADIO_TxDoneHandler+0xca>
   160d6:	2601      	movs	r6, #1
   160d8:	2104      	movs	r1, #4
   160da:	881a      	ldrh	r2, [r3, #0]
   160dc:	4f16      	ldr	r7, [pc, #88]	; (16138 <RADIO_TxDoneHandler+0xdc>)
   160de:	43b2      	bics	r2, r6
   160e0:	801a      	strh	r2, [r3, #0]
   160e2:	881a      	ldrh	r2, [r3, #0]
   160e4:	2400      	movs	r4, #0
   160e6:	438a      	bics	r2, r1
   160e8:	801a      	strh	r2, [r3, #0]
   160ea:	4b19      	ldr	r3, [pc, #100]	; (16150 <RADIO_TxDoneHandler+0xf4>)
   160ec:	ad03      	add	r5, sp, #12
   160ee:	681b      	ldr	r3, [r3, #0]
   160f0:	702c      	strb	r4, [r5, #0]
   160f2:	9304      	str	r3, [sp, #16]
   160f4:	003b      	movs	r3, r7
   160f6:	3334      	adds	r3, #52	; 0x34
   160f8:	7819      	ldrb	r1, [r3, #0]
   160fa:	0022      	movs	r2, r4
   160fc:	0020      	movs	r0, r4
   160fe:	4b0f      	ldr	r3, [pc, #60]	; (1613c <RADIO_TxDoneHandler+0xe0>)
   16100:	4798      	blx	r3
   16102:	4b14      	ldr	r3, [pc, #80]	; (16154 <RADIO_TxDoneHandler+0xf8>)
   16104:	4798      	blx	r3
   16106:	4b0e      	ldr	r3, [pc, #56]	; (16140 <RADIO_TxDoneHandler+0xe4>)
   16108:	701e      	strb	r6, [r3, #0]
   1610a:	003b      	movs	r3, r7
   1610c:	3358      	adds	r3, #88	; 0x58
   1610e:	701c      	strb	r4, [r3, #0]
   16110:	4b0c      	ldr	r3, [pc, #48]	; (16144 <RADIO_TxDoneHandler+0xe8>)
   16112:	781b      	ldrb	r3, [r3, #0]
   16114:	079b      	lsls	r3, r3, #30
   16116:	d5d6      	bpl.n	160c6 <RADIO_TxDoneHandler+0x6a>
   16118:	693b      	ldr	r3, [r7, #16]
   1611a:	42a3      	cmp	r3, r4
   1611c:	d0d3      	beq.n	160c6 <RADIO_TxDoneHandler+0x6a>
   1611e:	0029      	movs	r1, r5
   16120:	2002      	movs	r0, #2
   16122:	4798      	blx	r3
   16124:	e7cf      	b.n	160c6 <RADIO_TxDoneHandler+0x6a>
   16126:	881b      	ldrh	r3, [r3, #0]
   16128:	059b      	lsls	r3, r3, #22
   1612a:	d5cc      	bpl.n	160c6 <RADIO_TxDoneHandler+0x6a>
   1612c:	4b0a      	ldr	r3, [pc, #40]	; (16158 <RADIO_TxDoneHandler+0xfc>)
   1612e:	4798      	blx	r3
   16130:	e7c9      	b.n	160c6 <RADIO_TxDoneHandler+0x6a>
   16132:	46c0      	nop			; (mov r8, r8)
   16134:	20002fbc 	.word	0x20002fbc
   16138:	20002980 	.word	0x20002980
   1613c:	0000f46d 	.word	0x0000f46d
   16140:	20002fbf 	.word	0x20002fbf
   16144:	20002fbe 	.word	0x20002fbe
   16148:	00008059 	.word	0x00008059
   1614c:	00015bf1 	.word	0x00015bf1
   16150:	20001128 	.word	0x20001128
   16154:	00015bd5 	.word	0x00015bd5
   16158:	000164f5 	.word	0x000164f5

0001615c <RADIO_RxDoneHandler>:
   1615c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1615e:	4b97      	ldr	r3, [pc, #604]	; (163bc <RADIO_RxDoneHandler+0x260>)
   16160:	b085      	sub	sp, #20
   16162:	881c      	ldrh	r4, [r3, #0]
   16164:	881a      	ldrh	r2, [r3, #0]
   16166:	06a4      	lsls	r4, r4, #26
   16168:	0fe4      	lsrs	r4, r4, #31
   1616a:	b2e0      	uxtb	r0, r4
   1616c:	2801      	cmp	r0, #1
   1616e:	d126      	bne.n	161be <RADIO_RxDoneHandler+0x62>
   16170:	4d93      	ldr	r5, [pc, #588]	; (163c0 <RADIO_RxDoneHandler+0x264>)
   16172:	2120      	movs	r1, #32
   16174:	002e      	movs	r6, r5
   16176:	438a      	bics	r2, r1
   16178:	801a      	strh	r2, [r3, #0]
   1617a:	3634      	adds	r6, #52	; 0x34
   1617c:	0002      	movs	r2, r0
   1617e:	7831      	ldrb	r1, [r6, #0]
   16180:	4f90      	ldr	r7, [pc, #576]	; (163c4 <RADIO_RxDoneHandler+0x268>)
   16182:	47b8      	blx	r7
   16184:	2200      	movs	r2, #0
   16186:	7831      	ldrb	r1, [r6, #0]
   16188:	0010      	movs	r0, r2
   1618a:	47b8      	blx	r7
   1618c:	4b8e      	ldr	r3, [pc, #568]	; (163c8 <RADIO_RxDoneHandler+0x26c>)
   1618e:	4798      	blx	r3
   16190:	4b8e      	ldr	r3, [pc, #568]	; (163cc <RADIO_RxDoneHandler+0x270>)
   16192:	002a      	movs	r2, r5
   16194:	701c      	strb	r4, [r3, #0]
   16196:	2300      	movs	r3, #0
   16198:	322c      	adds	r2, #44	; 0x2c
   1619a:	7013      	strb	r3, [r2, #0]
   1619c:	002a      	movs	r2, r5
   1619e:	a901      	add	r1, sp, #4
   161a0:	3258      	adds	r2, #88	; 0x58
   161a2:	7013      	strb	r3, [r2, #0]
   161a4:	700b      	strb	r3, [r1, #0]
   161a6:	4b8a      	ldr	r3, [pc, #552]	; (163d0 <RADIO_RxDoneHandler+0x274>)
   161a8:	781b      	ldrb	r3, [r3, #0]
   161aa:	071b      	lsls	r3, r3, #28
   161ac:	d504      	bpl.n	161b8 <RADIO_RxDoneHandler+0x5c>
   161ae:	692b      	ldr	r3, [r5, #16]
   161b0:	2008      	movs	r0, #8
   161b2:	2b00      	cmp	r3, #0
   161b4:	d000      	beq.n	161b8 <RADIO_RxDoneHandler+0x5c>
   161b6:	e084      	b.n	162c2 <RADIO_RxDoneHandler+0x166>
   161b8:	2000      	movs	r0, #0
   161ba:	b005      	add	sp, #20
   161bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   161be:	0652      	lsls	r2, r2, #25
   161c0:	d402      	bmi.n	161c8 <RADIO_RxDoneHandler+0x6c>
   161c2:	881a      	ldrh	r2, [r3, #0]
   161c4:	0612      	lsls	r2, r2, #24
   161c6:	d523      	bpl.n	16210 <RADIO_RxDoneHandler+0xb4>
   161c8:	2140      	movs	r1, #64	; 0x40
   161ca:	881a      	ldrh	r2, [r3, #0]
   161cc:	4c7c      	ldr	r4, [pc, #496]	; (163c0 <RADIO_RxDoneHandler+0x264>)
   161ce:	438a      	bics	r2, r1
   161d0:	801a      	strh	r2, [r3, #0]
   161d2:	881a      	ldrh	r2, [r3, #0]
   161d4:	1849      	adds	r1, r1, r1
   161d6:	438a      	bics	r2, r1
   161d8:	801a      	strh	r2, [r3, #0]
   161da:	0023      	movs	r3, r4
   161dc:	2200      	movs	r2, #0
   161de:	3334      	adds	r3, #52	; 0x34
   161e0:	7819      	ldrb	r1, [r3, #0]
   161e2:	0010      	movs	r0, r2
   161e4:	4b77      	ldr	r3, [pc, #476]	; (163c4 <RADIO_RxDoneHandler+0x268>)
   161e6:	4798      	blx	r3
   161e8:	4b77      	ldr	r3, [pc, #476]	; (163c8 <RADIO_RxDoneHandler+0x26c>)
   161ea:	4798      	blx	r3
   161ec:	2201      	movs	r2, #1
   161ee:	4b77      	ldr	r3, [pc, #476]	; (163cc <RADIO_RxDoneHandler+0x270>)
   161f0:	a901      	add	r1, sp, #4
   161f2:	701a      	strb	r2, [r3, #0]
   161f4:	0022      	movs	r2, r4
   161f6:	2300      	movs	r3, #0
   161f8:	322c      	adds	r2, #44	; 0x2c
   161fa:	7013      	strb	r3, [r2, #0]
   161fc:	0022      	movs	r2, r4
   161fe:	3258      	adds	r2, #88	; 0x58
   16200:	7013      	strb	r3, [r2, #0]
   16202:	700b      	strb	r3, [r1, #0]
   16204:	4b72      	ldr	r3, [pc, #456]	; (163d0 <RADIO_RxDoneHandler+0x274>)
   16206:	781b      	ldrb	r3, [r3, #0]
   16208:	071b      	lsls	r3, r3, #28
   1620a:	d5d5      	bpl.n	161b8 <RADIO_RxDoneHandler+0x5c>
   1620c:	6923      	ldr	r3, [r4, #16]
   1620e:	e7cf      	b.n	161b0 <RADIO_RxDoneHandler+0x54>
   16210:	881a      	ldrh	r2, [r3, #0]
   16212:	0792      	lsls	r2, r2, #30
   16214:	d571      	bpl.n	162fa <RADIO_RxDoneHandler+0x19e>
   16216:	2102      	movs	r1, #2
   16218:	881a      	ldrh	r2, [r3, #0]
   1621a:	4d6e      	ldr	r5, [pc, #440]	; (163d4 <RADIO_RxDoneHandler+0x278>)
   1621c:	438a      	bics	r2, r1
   1621e:	801a      	strh	r2, [r3, #0]
   16220:	2013      	movs	r0, #19
   16222:	47a8      	blx	r5
   16224:	4c66      	ldr	r4, [pc, #408]	; (163c0 <RADIO_RxDoneHandler+0x264>)
   16226:	2100      	movs	r1, #0
   16228:	0026      	movs	r6, r4
   1622a:	362c      	adds	r6, #44	; 0x2c
   1622c:	7030      	strb	r0, [r6, #0]
   1622e:	4b6a      	ldr	r3, [pc, #424]	; (163d8 <RADIO_RxDoneHandler+0x27c>)
   16230:	200d      	movs	r0, #13
   16232:	4798      	blx	r3
   16234:	7832      	ldrb	r2, [r6, #0]
   16236:	4b69      	ldr	r3, [pc, #420]	; (163dc <RADIO_RxDoneHandler+0x280>)
   16238:	b2d2      	uxtb	r2, r2
   1623a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1623c:	2000      	movs	r0, #0
   1623e:	4798      	blx	r3
   16240:	2019      	movs	r0, #25
   16242:	47a8      	blx	r5
   16244:	0023      	movs	r3, r4
   16246:	b240      	sxtb	r0, r0
   16248:	3332      	adds	r3, #50	; 0x32
   1624a:	2800      	cmp	r0, #0
   1624c:	da3b      	bge.n	162c6 <RADIO_RxDoneHandler+0x16a>
   1624e:	4240      	negs	r0, r0
   16250:	1080      	asrs	r0, r0, #2
   16252:	4240      	negs	r0, r0
   16254:	7018      	strb	r0, [r3, #0]
   16256:	201a      	movs	r0, #26
   16258:	47a8      	blx	r5
   1625a:	0023      	movs	r3, r4
   1625c:	3332      	adds	r3, #50	; 0x32
   1625e:	781b      	ldrb	r3, [r3, #0]
   16260:	b202      	sxth	r2, r0
   16262:	b25b      	sxtb	r3, r3
   16264:	4d5e      	ldr	r5, [pc, #376]	; (163e0 <RADIO_RxDoneHandler+0x284>)
   16266:	2b00      	cmp	r3, #0
   16268:	da36      	bge.n	162d8 <RADIO_RxDoneHandler+0x17c>
   1626a:	6821      	ldr	r1, [r4, #0]
   1626c:	4e5d      	ldr	r6, [pc, #372]	; (163e4 <RADIO_RxDoneHandler+0x288>)
   1626e:	198e      	adds	r6, r1, r6
   16270:	42ae      	cmp	r6, r5
   16272:	d82a      	bhi.n	162ca <RADIO_RxDoneHandler+0x16e>
   16274:	3b9d      	subs	r3, #157	; 0x9d
   16276:	181b      	adds	r3, r3, r0
   16278:	1112      	asrs	r2, r2, #4
   1627a:	189b      	adds	r3, r3, r2
   1627c:	0022      	movs	r2, r4
   1627e:	3256      	adds	r2, #86	; 0x56
   16280:	8013      	strh	r3, [r2, #0]
   16282:	0023      	movs	r3, r4
   16284:	2200      	movs	r2, #0
   16286:	3334      	adds	r3, #52	; 0x34
   16288:	7819      	ldrb	r1, [r3, #0]
   1628a:	0010      	movs	r0, r2
   1628c:	4b4d      	ldr	r3, [pc, #308]	; (163c4 <RADIO_RxDoneHandler+0x268>)
   1628e:	4798      	blx	r3
   16290:	4b4d      	ldr	r3, [pc, #308]	; (163c8 <RADIO_RxDoneHandler+0x26c>)
   16292:	4798      	blx	r3
   16294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16296:	a901      	add	r1, sp, #4
   16298:	604b      	str	r3, [r1, #4]
   1629a:	0023      	movs	r3, r4
   1629c:	332c      	adds	r3, #44	; 0x2c
   1629e:	781b      	ldrb	r3, [r3, #0]
   162a0:	2201      	movs	r2, #1
   162a2:	720b      	strb	r3, [r1, #8]
   162a4:	2300      	movs	r3, #0
   162a6:	700b      	strb	r3, [r1, #0]
   162a8:	4b48      	ldr	r3, [pc, #288]	; (163cc <RADIO_RxDoneHandler+0x270>)
   162aa:	701a      	strb	r2, [r3, #0]
   162ac:	4b48      	ldr	r3, [pc, #288]	; (163d0 <RADIO_RxDoneHandler+0x274>)
   162ae:	7818      	ldrb	r0, [r3, #0]
   162b0:	07c0      	lsls	r0, r0, #31
   162b2:	0fc0      	lsrs	r0, r0, #31
   162b4:	4290      	cmp	r0, r2
   162b6:	d000      	beq.n	162ba <RADIO_RxDoneHandler+0x15e>
   162b8:	e77e      	b.n	161b8 <RADIO_RxDoneHandler+0x5c>
   162ba:	6923      	ldr	r3, [r4, #16]
   162bc:	2b00      	cmp	r3, #0
   162be:	d100      	bne.n	162c2 <RADIO_RxDoneHandler+0x166>
   162c0:	e77a      	b.n	161b8 <RADIO_RxDoneHandler+0x5c>
   162c2:	4798      	blx	r3
   162c4:	e778      	b.n	161b8 <RADIO_RxDoneHandler+0x5c>
   162c6:	1080      	asrs	r0, r0, #2
   162c8:	e7c4      	b.n	16254 <RADIO_RxDoneHandler+0xf8>
   162ca:	4d47      	ldr	r5, [pc, #284]	; (163e8 <RADIO_RxDoneHandler+0x28c>)
   162cc:	1949      	adds	r1, r1, r5
   162ce:	4d47      	ldr	r5, [pc, #284]	; (163ec <RADIO_RxDoneHandler+0x290>)
   162d0:	42a9      	cmp	r1, r5
   162d2:	d8d6      	bhi.n	16282 <RADIO_RxDoneHandler+0x126>
   162d4:	3ba4      	subs	r3, #164	; 0xa4
   162d6:	e7ce      	b.n	16276 <RADIO_RxDoneHandler+0x11a>
   162d8:	6823      	ldr	r3, [r4, #0]
   162da:	4942      	ldr	r1, [pc, #264]	; (163e4 <RADIO_RxDoneHandler+0x288>)
   162dc:	1859      	adds	r1, r3, r1
   162de:	42a9      	cmp	r1, r5
   162e0:	d802      	bhi.n	162e8 <RADIO_RxDoneHandler+0x18c>
   162e2:	0003      	movs	r3, r0
   162e4:	3b9d      	subs	r3, #157	; 0x9d
   162e6:	e7c7      	b.n	16278 <RADIO_RxDoneHandler+0x11c>
   162e8:	493f      	ldr	r1, [pc, #252]	; (163e8 <RADIO_RxDoneHandler+0x28c>)
   162ea:	185b      	adds	r3, r3, r1
   162ec:	493f      	ldr	r1, [pc, #252]	; (163ec <RADIO_RxDoneHandler+0x290>)
   162ee:	428b      	cmp	r3, r1
   162f0:	d8c7      	bhi.n	16282 <RADIO_RxDoneHandler+0x126>
   162f2:	38a4      	subs	r0, #164	; 0xa4
   162f4:	1113      	asrs	r3, r2, #4
   162f6:	18c3      	adds	r3, r0, r3
   162f8:	e7c0      	b.n	1627c <RADIO_RxDoneHandler+0x120>
   162fa:	881a      	ldrh	r2, [r3, #0]
   162fc:	0712      	lsls	r2, r2, #28
   162fe:	0fd5      	lsrs	r5, r2, #31
   16300:	2a00      	cmp	r2, #0
   16302:	da27      	bge.n	16354 <RADIO_RxDoneHandler+0x1f8>
   16304:	2108      	movs	r1, #8
   16306:	881a      	ldrh	r2, [r3, #0]
   16308:	4c2d      	ldr	r4, [pc, #180]	; (163c0 <RADIO_RxDoneHandler+0x264>)
   1630a:	438a      	bics	r2, r1
   1630c:	801a      	strh	r2, [r3, #0]
   1630e:	0023      	movs	r3, r4
   16310:	2280      	movs	r2, #128	; 0x80
   16312:	3332      	adds	r3, #50	; 0x32
   16314:	701a      	strb	r2, [r3, #0]
   16316:	0023      	movs	r3, r4
   16318:	2200      	movs	r2, #0
   1631a:	3334      	adds	r3, #52	; 0x34
   1631c:	7819      	ldrb	r1, [r3, #0]
   1631e:	0010      	movs	r0, r2
   16320:	4b28      	ldr	r3, [pc, #160]	; (163c4 <RADIO_RxDoneHandler+0x268>)
   16322:	4798      	blx	r3
   16324:	4b28      	ldr	r3, [pc, #160]	; (163c8 <RADIO_RxDoneHandler+0x26c>)
   16326:	4798      	blx	r3
   16328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1632a:	a901      	add	r1, sp, #4
   1632c:	604b      	str	r3, [r1, #4]
   1632e:	0023      	movs	r3, r4
   16330:	332c      	adds	r3, #44	; 0x2c
   16332:	781b      	ldrb	r3, [r3, #0]
   16334:	0022      	movs	r2, r4
   16336:	720b      	strb	r3, [r1, #8]
   16338:	2300      	movs	r3, #0
   1633a:	3258      	adds	r2, #88	; 0x58
   1633c:	7013      	strb	r3, [r2, #0]
   1633e:	700b      	strb	r3, [r1, #0]
   16340:	4b22      	ldr	r3, [pc, #136]	; (163cc <RADIO_RxDoneHandler+0x270>)
   16342:	701d      	strb	r5, [r3, #0]
   16344:	4b22      	ldr	r3, [pc, #136]	; (163d0 <RADIO_RxDoneHandler+0x274>)
   16346:	7818      	ldrb	r0, [r3, #0]
   16348:	07c0      	lsls	r0, r0, #31
   1634a:	0fc0      	lsrs	r0, r0, #31
   1634c:	2801      	cmp	r0, #1
   1634e:	d000      	beq.n	16352 <RADIO_RxDoneHandler+0x1f6>
   16350:	e732      	b.n	161b8 <RADIO_RxDoneHandler+0x5c>
   16352:	e7b2      	b.n	162ba <RADIO_RxDoneHandler+0x15e>
   16354:	881a      	ldrh	r2, [r3, #0]
   16356:	05d2      	lsls	r2, r2, #23
   16358:	0fd5      	lsrs	r5, r2, #31
   1635a:	2a00      	cmp	r2, #0
   1635c:	db00      	blt.n	16360 <RADIO_RxDoneHandler+0x204>
   1635e:	e72b      	b.n	161b8 <RADIO_RxDoneHandler+0x5c>
   16360:	4c17      	ldr	r4, [pc, #92]	; (163c0 <RADIO_RxDoneHandler+0x264>)
   16362:	881a      	ldrh	r2, [r3, #0]
   16364:	0026      	movs	r6, r4
   16366:	4922      	ldr	r1, [pc, #136]	; (163f0 <RADIO_RxDoneHandler+0x294>)
   16368:	362c      	adds	r6, #44	; 0x2c
   1636a:	400a      	ands	r2, r1
   1636c:	801a      	strh	r2, [r3, #0]
   1636e:	7832      	ldrb	r2, [r6, #0]
   16370:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   16372:	b2d2      	uxtb	r2, r2
   16374:	2000      	movs	r0, #0
   16376:	4b19      	ldr	r3, [pc, #100]	; (163dc <RADIO_RxDoneHandler+0x280>)
   16378:	4798      	blx	r3
   1637a:	0023      	movs	r3, r4
   1637c:	2200      	movs	r2, #0
   1637e:	3334      	adds	r3, #52	; 0x34
   16380:	7819      	ldrb	r1, [r3, #0]
   16382:	0010      	movs	r0, r2
   16384:	4b0f      	ldr	r3, [pc, #60]	; (163c4 <RADIO_RxDoneHandler+0x268>)
   16386:	4798      	blx	r3
   16388:	4b0f      	ldr	r3, [pc, #60]	; (163c8 <RADIO_RxDoneHandler+0x26c>)
   1638a:	4798      	blx	r3
   1638c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1638e:	a901      	add	r1, sp, #4
   16390:	604b      	str	r3, [r1, #4]
   16392:	7833      	ldrb	r3, [r6, #0]
   16394:	0022      	movs	r2, r4
   16396:	720b      	strb	r3, [r1, #8]
   16398:	2300      	movs	r3, #0
   1639a:	3258      	adds	r2, #88	; 0x58
   1639c:	7013      	strb	r3, [r2, #0]
   1639e:	700b      	strb	r3, [r1, #0]
   163a0:	4b0a      	ldr	r3, [pc, #40]	; (163cc <RADIO_RxDoneHandler+0x270>)
   163a2:	701d      	strb	r5, [r3, #0]
   163a4:	4b0a      	ldr	r3, [pc, #40]	; (163d0 <RADIO_RxDoneHandler+0x274>)
   163a6:	781b      	ldrb	r3, [r3, #0]
   163a8:	06db      	lsls	r3, r3, #27
   163aa:	d400      	bmi.n	163ae <RADIO_RxDoneHandler+0x252>
   163ac:	e704      	b.n	161b8 <RADIO_RxDoneHandler+0x5c>
   163ae:	6923      	ldr	r3, [r4, #16]
   163b0:	2b00      	cmp	r3, #0
   163b2:	d100      	bne.n	163b6 <RADIO_RxDoneHandler+0x25a>
   163b4:	e700      	b.n	161b8 <RADIO_RxDoneHandler+0x5c>
   163b6:	2010      	movs	r0, #16
   163b8:	e783      	b.n	162c2 <RADIO_RxDoneHandler+0x166>
   163ba:	46c0      	nop			; (mov r8, r8)
   163bc:	20002fbc 	.word	0x20002fbc
   163c0:	20002980 	.word	0x20002980
   163c4:	0000f46d 	.word	0x0000f46d
   163c8:	00015bd5 	.word	0x00015bd5
   163cc:	20002fbf 	.word	0x20002fbf
   163d0:	20002fbe 	.word	0x20002fbe
   163d4:	000080c1 	.word	0x000080c1
   163d8:	00008099 	.word	0x00008099
   163dc:	0000812d 	.word	0x0000812d
   163e0:	096ae380 	.word	0x096ae380
   163e4:	cc9eec80 	.word	0xcc9eec80
   163e8:	e78fe580 	.word	0xe78fe580
   163ec:	06dac2c0 	.word	0x06dac2c0
   163f0:	fffffeff 	.word	0xfffffeff

000163f4 <Radio_LBTScanTimeout>:
   163f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   163f6:	4c1c      	ldr	r4, [pc, #112]	; (16468 <Radio_LBTScanTimeout+0x74>)
   163f8:	0025      	movs	r5, r4
   163fa:	0023      	movs	r3, r4
   163fc:	354f      	adds	r5, #79	; 0x4f
   163fe:	7829      	ldrb	r1, [r5, #0]
   16400:	3340      	adds	r3, #64	; 0x40
   16402:	3101      	adds	r1, #1
   16404:	b2c9      	uxtb	r1, r1
   16406:	7029      	strb	r1, [r5, #0]
   16408:	781b      	ldrb	r3, [r3, #0]
   1640a:	428b      	cmp	r3, r1
   1640c:	d315      	bcc.n	1643a <Radio_LBTScanTimeout+0x46>
   1640e:	260e      	movs	r6, #14
   16410:	446e      	add	r6, sp
   16412:	4b16      	ldr	r3, [pc, #88]	; (1646c <Radio_LBTScanTimeout+0x78>)
   16414:	0030      	movs	r0, r6
   16416:	4798      	blx	r3
   16418:	2300      	movs	r3, #0
   1641a:	5ef2      	ldrsh	r2, [r6, r3]
   1641c:	782b      	ldrb	r3, [r5, #0]
   1641e:	4353      	muls	r3, r2
   16420:	6c62      	ldr	r2, [r4, #68]	; 0x44
   16422:	189b      	adds	r3, r3, r2
   16424:	6463      	str	r3, [r4, #68]	; 0x44
   16426:	0023      	movs	r3, r4
   16428:	2200      	movs	r2, #0
   1642a:	3350      	adds	r3, #80	; 0x50
   1642c:	7818      	ldrb	r0, [r3, #0]
   1642e:	9200      	str	r2, [sp, #0]
   16430:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   16432:	4b0f      	ldr	r3, [pc, #60]	; (16470 <Radio_LBTScanTimeout+0x7c>)
   16434:	4c0f      	ldr	r4, [pc, #60]	; (16474 <Radio_LBTScanTimeout+0x80>)
   16436:	47a0      	blx	r4
   16438:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   1643a:	2380      	movs	r3, #128	; 0x80
   1643c:	4a0e      	ldr	r2, [pc, #56]	; (16478 <Radio_LBTScanTimeout+0x84>)
   1643e:	009b      	lsls	r3, r3, #2
   16440:	8810      	ldrh	r0, [r2, #0]
   16442:	4303      	orrs	r3, r0
   16444:	8013      	strh	r3, [r2, #0]
   16446:	6c63      	ldr	r3, [r4, #68]	; 0x44
   16448:	0058      	lsls	r0, r3, #1
   1644a:	1e4b      	subs	r3, r1, #1
   1644c:	4359      	muls	r1, r3
   1644e:	4b0b      	ldr	r3, [pc, #44]	; (1647c <Radio_LBTScanTimeout+0x88>)
   16450:	b289      	uxth	r1, r1
   16452:	4798      	blx	r3
   16454:	0023      	movs	r3, r4
   16456:	334c      	adds	r3, #76	; 0x4c
   16458:	8018      	strh	r0, [r3, #0]
   1645a:	2300      	movs	r3, #0
   1645c:	2001      	movs	r0, #1
   1645e:	702b      	strb	r3, [r5, #0]
   16460:	6463      	str	r3, [r4, #68]	; 0x44
   16462:	4b07      	ldr	r3, [pc, #28]	; (16480 <Radio_LBTScanTimeout+0x8c>)
   16464:	4798      	blx	r3
   16466:	e7e7      	b.n	16438 <Radio_LBTScanTimeout+0x44>
   16468:	20002980 	.word	0x20002980
   1646c:	0000f631 	.word	0x0000f631
   16470:	000163f5 	.word	0x000163f5
   16474:	0000eda1 	.word	0x0000eda1
   16478:	20002fbc 	.word	0x20002fbc
   1647c:	000166cd 	.word	0x000166cd
   16480:	0001543d 	.word	0x0001543d

00016484 <RADIO_ScanHandler>:
   16484:	b573      	push	{r0, r1, r4, r5, r6, lr}
   16486:	4b12      	ldr	r3, [pc, #72]	; (164d0 <RADIO_ScanHandler+0x4c>)
   16488:	4798      	blx	r3
   1648a:	2000      	movs	r0, #0
   1648c:	4b11      	ldr	r3, [pc, #68]	; (164d4 <RADIO_ScanHandler+0x50>)
   1648e:	4798      	blx	r3
   16490:	4d11      	ldr	r5, [pc, #68]	; (164d8 <RADIO_ScanHandler+0x54>)
   16492:	4b12      	ldr	r3, [pc, #72]	; (164dc <RADIO_ScanHandler+0x58>)
   16494:	6828      	ldr	r0, [r5, #0]
   16496:	2400      	movs	r4, #0
   16498:	4798      	blx	r3
   1649a:	002b      	movs	r3, r5
   1649c:	4e10      	ldr	r6, [pc, #64]	; (164e0 <RADIO_ScanHandler+0x5c>)
   1649e:	334c      	adds	r3, #76	; 0x4c
   164a0:	2201      	movs	r2, #1
   164a2:	0021      	movs	r1, r4
   164a4:	0020      	movs	r0, r4
   164a6:	801c      	strh	r4, [r3, #0]
   164a8:	47b0      	blx	r6
   164aa:	4b0e      	ldr	r3, [pc, #56]	; (164e4 <RADIO_ScanHandler+0x60>)
   164ac:	2109      	movs	r1, #9
   164ae:	2012      	movs	r0, #18
   164b0:	4798      	blx	r3
   164b2:	3550      	adds	r5, #80	; 0x50
   164b4:	0022      	movs	r2, r4
   164b6:	0021      	movs	r1, r4
   164b8:	2005      	movs	r0, #5
   164ba:	47b0      	blx	r6
   164bc:	7828      	ldrb	r0, [r5, #0]
   164be:	4b0a      	ldr	r3, [pc, #40]	; (164e8 <RADIO_ScanHandler+0x64>)
   164c0:	4d0a      	ldr	r5, [pc, #40]	; (164ec <RADIO_ScanHandler+0x68>)
   164c2:	9400      	str	r4, [sp, #0]
   164c4:	0022      	movs	r2, r4
   164c6:	490a      	ldr	r1, [pc, #40]	; (164f0 <RADIO_ScanHandler+0x6c>)
   164c8:	47a8      	blx	r5
   164ca:	0020      	movs	r0, r4
   164cc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   164ce:	46c0      	nop			; (mov r8, r8)
   164d0:	00015ba1 	.word	0x00015ba1
   164d4:	000156f1 	.word	0x000156f1
   164d8:	20002980 	.word	0x20002980
   164dc:	00014e35 	.word	0x00014e35
   164e0:	0000f46d 	.word	0x0000f46d
   164e4:	00008099 	.word	0x00008099
   164e8:	000163f5 	.word	0x000163f5
   164ec:	0000eda1 	.word	0x0000eda1
   164f0:	00002328 	.word	0x00002328

000164f4 <radioScanDoneHandler>:
   164f4:	b530      	push	{r4, r5, lr}
   164f6:	4a18      	ldr	r2, [pc, #96]	; (16558 <radioScanDoneHandler+0x64>)
   164f8:	4918      	ldr	r1, [pc, #96]	; (1655c <radioScanDoneHandler+0x68>)
   164fa:	8813      	ldrh	r3, [r2, #0]
   164fc:	b085      	sub	sp, #20
   164fe:	400b      	ands	r3, r1
   16500:	8013      	strh	r3, [r2, #0]
   16502:	2200      	movs	r2, #0
   16504:	4b16      	ldr	r3, [pc, #88]	; (16560 <radioScanDoneHandler+0x6c>)
   16506:	0011      	movs	r1, r2
   16508:	0010      	movs	r0, r2
   1650a:	4798      	blx	r3
   1650c:	2000      	movs	r0, #0
   1650e:	4b15      	ldr	r3, [pc, #84]	; (16564 <radioScanDoneHandler+0x70>)
   16510:	4798      	blx	r3
   16512:	4b15      	ldr	r3, [pc, #84]	; (16568 <radioScanDoneHandler+0x74>)
   16514:	4798      	blx	r3
   16516:	4c15      	ldr	r4, [pc, #84]	; (1656c <radioScanDoneHandler+0x78>)
   16518:	0023      	movs	r3, r4
   1651a:	334c      	adds	r3, #76	; 0x4c
   1651c:	2100      	movs	r1, #0
   1651e:	5e59      	ldrsh	r1, [r3, r1]
   16520:	233e      	movs	r3, #62	; 0x3e
   16522:	5ee2      	ldrsh	r2, [r4, r3]
   16524:	4b12      	ldr	r3, [pc, #72]	; (16570 <radioScanDoneHandler+0x7c>)
   16526:	4291      	cmp	r1, r2
   16528:	da06      	bge.n	16538 <radioScanDoneHandler+0x44>
   1652a:	2002      	movs	r0, #2
   1652c:	4798      	blx	r3
   1652e:	4b11      	ldr	r3, [pc, #68]	; (16574 <radioScanDoneHandler+0x80>)
   16530:	4798      	blx	r3
   16532:	2000      	movs	r0, #0
   16534:	b005      	add	sp, #20
   16536:	bd30      	pop	{r4, r5, pc}
   16538:	2207      	movs	r2, #7
   1653a:	ad01      	add	r5, sp, #4
   1653c:	2001      	movs	r0, #1
   1653e:	702a      	strb	r2, [r5, #0]
   16540:	4798      	blx	r3
   16542:	4b0d      	ldr	r3, [pc, #52]	; (16578 <radioScanDoneHandler+0x84>)
   16544:	781b      	ldrb	r3, [r3, #0]
   16546:	079b      	lsls	r3, r3, #30
   16548:	d5f3      	bpl.n	16532 <radioScanDoneHandler+0x3e>
   1654a:	6923      	ldr	r3, [r4, #16]
   1654c:	2b00      	cmp	r3, #0
   1654e:	d0f0      	beq.n	16532 <radioScanDoneHandler+0x3e>
   16550:	0029      	movs	r1, r5
   16552:	2002      	movs	r0, #2
   16554:	4798      	blx	r3
   16556:	e7ec      	b.n	16532 <radioScanDoneHandler+0x3e>
   16558:	20002fbc 	.word	0x20002fbc
   1655c:	fffffdff 	.word	0xfffffdff
   16560:	0000f46d 	.word	0x0000f46d
   16564:	00015819 	.word	0x00015819
   16568:	00015bd5 	.word	0x00015bd5
   1656c:	20002980 	.word	0x20002980
   16570:	000154e9 	.word	0x000154e9
   16574:	00015ea1 	.word	0x00015ea1
   16578:	20002fbe 	.word	0x20002fbe

0001657c <__gnu_thumb1_case_sqi>:
   1657c:	b402      	push	{r1}
   1657e:	4671      	mov	r1, lr
   16580:	0849      	lsrs	r1, r1, #1
   16582:	0049      	lsls	r1, r1, #1
   16584:	5609      	ldrsb	r1, [r1, r0]
   16586:	0049      	lsls	r1, r1, #1
   16588:	448e      	add	lr, r1
   1658a:	bc02      	pop	{r1}
   1658c:	4770      	bx	lr
   1658e:	46c0      	nop			; (mov r8, r8)

00016590 <__gnu_thumb1_case_uqi>:
   16590:	b402      	push	{r1}
   16592:	4671      	mov	r1, lr
   16594:	0849      	lsrs	r1, r1, #1
   16596:	0049      	lsls	r1, r1, #1
   16598:	5c09      	ldrb	r1, [r1, r0]
   1659a:	0049      	lsls	r1, r1, #1
   1659c:	448e      	add	lr, r1
   1659e:	bc02      	pop	{r1}
   165a0:	4770      	bx	lr
   165a2:	46c0      	nop			; (mov r8, r8)

000165a4 <__gnu_thumb1_case_uhi>:
   165a4:	b403      	push	{r0, r1}
   165a6:	4671      	mov	r1, lr
   165a8:	0849      	lsrs	r1, r1, #1
   165aa:	0040      	lsls	r0, r0, #1
   165ac:	0049      	lsls	r1, r1, #1
   165ae:	5a09      	ldrh	r1, [r1, r0]
   165b0:	0049      	lsls	r1, r1, #1
   165b2:	448e      	add	lr, r1
   165b4:	bc03      	pop	{r0, r1}
   165b6:	4770      	bx	lr

000165b8 <__udivsi3>:
   165b8:	2200      	movs	r2, #0
   165ba:	0843      	lsrs	r3, r0, #1
   165bc:	428b      	cmp	r3, r1
   165be:	d374      	bcc.n	166aa <__udivsi3+0xf2>
   165c0:	0903      	lsrs	r3, r0, #4
   165c2:	428b      	cmp	r3, r1
   165c4:	d35f      	bcc.n	16686 <__udivsi3+0xce>
   165c6:	0a03      	lsrs	r3, r0, #8
   165c8:	428b      	cmp	r3, r1
   165ca:	d344      	bcc.n	16656 <__udivsi3+0x9e>
   165cc:	0b03      	lsrs	r3, r0, #12
   165ce:	428b      	cmp	r3, r1
   165d0:	d328      	bcc.n	16624 <__udivsi3+0x6c>
   165d2:	0c03      	lsrs	r3, r0, #16
   165d4:	428b      	cmp	r3, r1
   165d6:	d30d      	bcc.n	165f4 <__udivsi3+0x3c>
   165d8:	22ff      	movs	r2, #255	; 0xff
   165da:	0209      	lsls	r1, r1, #8
   165dc:	ba12      	rev	r2, r2
   165de:	0c03      	lsrs	r3, r0, #16
   165e0:	428b      	cmp	r3, r1
   165e2:	d302      	bcc.n	165ea <__udivsi3+0x32>
   165e4:	1212      	asrs	r2, r2, #8
   165e6:	0209      	lsls	r1, r1, #8
   165e8:	d065      	beq.n	166b6 <__udivsi3+0xfe>
   165ea:	0b03      	lsrs	r3, r0, #12
   165ec:	428b      	cmp	r3, r1
   165ee:	d319      	bcc.n	16624 <__udivsi3+0x6c>
   165f0:	e000      	b.n	165f4 <__udivsi3+0x3c>
   165f2:	0a09      	lsrs	r1, r1, #8
   165f4:	0bc3      	lsrs	r3, r0, #15
   165f6:	428b      	cmp	r3, r1
   165f8:	d301      	bcc.n	165fe <__udivsi3+0x46>
   165fa:	03cb      	lsls	r3, r1, #15
   165fc:	1ac0      	subs	r0, r0, r3
   165fe:	4152      	adcs	r2, r2
   16600:	0b83      	lsrs	r3, r0, #14
   16602:	428b      	cmp	r3, r1
   16604:	d301      	bcc.n	1660a <__udivsi3+0x52>
   16606:	038b      	lsls	r3, r1, #14
   16608:	1ac0      	subs	r0, r0, r3
   1660a:	4152      	adcs	r2, r2
   1660c:	0b43      	lsrs	r3, r0, #13
   1660e:	428b      	cmp	r3, r1
   16610:	d301      	bcc.n	16616 <__udivsi3+0x5e>
   16612:	034b      	lsls	r3, r1, #13
   16614:	1ac0      	subs	r0, r0, r3
   16616:	4152      	adcs	r2, r2
   16618:	0b03      	lsrs	r3, r0, #12
   1661a:	428b      	cmp	r3, r1
   1661c:	d301      	bcc.n	16622 <__udivsi3+0x6a>
   1661e:	030b      	lsls	r3, r1, #12
   16620:	1ac0      	subs	r0, r0, r3
   16622:	4152      	adcs	r2, r2
   16624:	0ac3      	lsrs	r3, r0, #11
   16626:	428b      	cmp	r3, r1
   16628:	d301      	bcc.n	1662e <__udivsi3+0x76>
   1662a:	02cb      	lsls	r3, r1, #11
   1662c:	1ac0      	subs	r0, r0, r3
   1662e:	4152      	adcs	r2, r2
   16630:	0a83      	lsrs	r3, r0, #10
   16632:	428b      	cmp	r3, r1
   16634:	d301      	bcc.n	1663a <__udivsi3+0x82>
   16636:	028b      	lsls	r3, r1, #10
   16638:	1ac0      	subs	r0, r0, r3
   1663a:	4152      	adcs	r2, r2
   1663c:	0a43      	lsrs	r3, r0, #9
   1663e:	428b      	cmp	r3, r1
   16640:	d301      	bcc.n	16646 <__udivsi3+0x8e>
   16642:	024b      	lsls	r3, r1, #9
   16644:	1ac0      	subs	r0, r0, r3
   16646:	4152      	adcs	r2, r2
   16648:	0a03      	lsrs	r3, r0, #8
   1664a:	428b      	cmp	r3, r1
   1664c:	d301      	bcc.n	16652 <__udivsi3+0x9a>
   1664e:	020b      	lsls	r3, r1, #8
   16650:	1ac0      	subs	r0, r0, r3
   16652:	4152      	adcs	r2, r2
   16654:	d2cd      	bcs.n	165f2 <__udivsi3+0x3a>
   16656:	09c3      	lsrs	r3, r0, #7
   16658:	428b      	cmp	r3, r1
   1665a:	d301      	bcc.n	16660 <__udivsi3+0xa8>
   1665c:	01cb      	lsls	r3, r1, #7
   1665e:	1ac0      	subs	r0, r0, r3
   16660:	4152      	adcs	r2, r2
   16662:	0983      	lsrs	r3, r0, #6
   16664:	428b      	cmp	r3, r1
   16666:	d301      	bcc.n	1666c <__udivsi3+0xb4>
   16668:	018b      	lsls	r3, r1, #6
   1666a:	1ac0      	subs	r0, r0, r3
   1666c:	4152      	adcs	r2, r2
   1666e:	0943      	lsrs	r3, r0, #5
   16670:	428b      	cmp	r3, r1
   16672:	d301      	bcc.n	16678 <__udivsi3+0xc0>
   16674:	014b      	lsls	r3, r1, #5
   16676:	1ac0      	subs	r0, r0, r3
   16678:	4152      	adcs	r2, r2
   1667a:	0903      	lsrs	r3, r0, #4
   1667c:	428b      	cmp	r3, r1
   1667e:	d301      	bcc.n	16684 <__udivsi3+0xcc>
   16680:	010b      	lsls	r3, r1, #4
   16682:	1ac0      	subs	r0, r0, r3
   16684:	4152      	adcs	r2, r2
   16686:	08c3      	lsrs	r3, r0, #3
   16688:	428b      	cmp	r3, r1
   1668a:	d301      	bcc.n	16690 <__udivsi3+0xd8>
   1668c:	00cb      	lsls	r3, r1, #3
   1668e:	1ac0      	subs	r0, r0, r3
   16690:	4152      	adcs	r2, r2
   16692:	0883      	lsrs	r3, r0, #2
   16694:	428b      	cmp	r3, r1
   16696:	d301      	bcc.n	1669c <__udivsi3+0xe4>
   16698:	008b      	lsls	r3, r1, #2
   1669a:	1ac0      	subs	r0, r0, r3
   1669c:	4152      	adcs	r2, r2
   1669e:	0843      	lsrs	r3, r0, #1
   166a0:	428b      	cmp	r3, r1
   166a2:	d301      	bcc.n	166a8 <__udivsi3+0xf0>
   166a4:	004b      	lsls	r3, r1, #1
   166a6:	1ac0      	subs	r0, r0, r3
   166a8:	4152      	adcs	r2, r2
   166aa:	1a41      	subs	r1, r0, r1
   166ac:	d200      	bcs.n	166b0 <__udivsi3+0xf8>
   166ae:	4601      	mov	r1, r0
   166b0:	4152      	adcs	r2, r2
   166b2:	4610      	mov	r0, r2
   166b4:	4770      	bx	lr
   166b6:	e7ff      	b.n	166b8 <__udivsi3+0x100>
   166b8:	b501      	push	{r0, lr}
   166ba:	2000      	movs	r0, #0
   166bc:	f000 f8f0 	bl	168a0 <__aeabi_idiv0>
   166c0:	bd02      	pop	{r1, pc}
   166c2:	46c0      	nop			; (mov r8, r8)

000166c4 <__aeabi_uidivmod>:
   166c4:	2900      	cmp	r1, #0
   166c6:	d0f7      	beq.n	166b8 <__udivsi3+0x100>
   166c8:	e776      	b.n	165b8 <__udivsi3>
   166ca:	4770      	bx	lr

000166cc <__divsi3>:
   166cc:	4603      	mov	r3, r0
   166ce:	430b      	orrs	r3, r1
   166d0:	d47f      	bmi.n	167d2 <__divsi3+0x106>
   166d2:	2200      	movs	r2, #0
   166d4:	0843      	lsrs	r3, r0, #1
   166d6:	428b      	cmp	r3, r1
   166d8:	d374      	bcc.n	167c4 <__divsi3+0xf8>
   166da:	0903      	lsrs	r3, r0, #4
   166dc:	428b      	cmp	r3, r1
   166de:	d35f      	bcc.n	167a0 <__divsi3+0xd4>
   166e0:	0a03      	lsrs	r3, r0, #8
   166e2:	428b      	cmp	r3, r1
   166e4:	d344      	bcc.n	16770 <__divsi3+0xa4>
   166e6:	0b03      	lsrs	r3, r0, #12
   166e8:	428b      	cmp	r3, r1
   166ea:	d328      	bcc.n	1673e <__divsi3+0x72>
   166ec:	0c03      	lsrs	r3, r0, #16
   166ee:	428b      	cmp	r3, r1
   166f0:	d30d      	bcc.n	1670e <__divsi3+0x42>
   166f2:	22ff      	movs	r2, #255	; 0xff
   166f4:	0209      	lsls	r1, r1, #8
   166f6:	ba12      	rev	r2, r2
   166f8:	0c03      	lsrs	r3, r0, #16
   166fa:	428b      	cmp	r3, r1
   166fc:	d302      	bcc.n	16704 <__divsi3+0x38>
   166fe:	1212      	asrs	r2, r2, #8
   16700:	0209      	lsls	r1, r1, #8
   16702:	d065      	beq.n	167d0 <__divsi3+0x104>
   16704:	0b03      	lsrs	r3, r0, #12
   16706:	428b      	cmp	r3, r1
   16708:	d319      	bcc.n	1673e <__divsi3+0x72>
   1670a:	e000      	b.n	1670e <__divsi3+0x42>
   1670c:	0a09      	lsrs	r1, r1, #8
   1670e:	0bc3      	lsrs	r3, r0, #15
   16710:	428b      	cmp	r3, r1
   16712:	d301      	bcc.n	16718 <__divsi3+0x4c>
   16714:	03cb      	lsls	r3, r1, #15
   16716:	1ac0      	subs	r0, r0, r3
   16718:	4152      	adcs	r2, r2
   1671a:	0b83      	lsrs	r3, r0, #14
   1671c:	428b      	cmp	r3, r1
   1671e:	d301      	bcc.n	16724 <__divsi3+0x58>
   16720:	038b      	lsls	r3, r1, #14
   16722:	1ac0      	subs	r0, r0, r3
   16724:	4152      	adcs	r2, r2
   16726:	0b43      	lsrs	r3, r0, #13
   16728:	428b      	cmp	r3, r1
   1672a:	d301      	bcc.n	16730 <__divsi3+0x64>
   1672c:	034b      	lsls	r3, r1, #13
   1672e:	1ac0      	subs	r0, r0, r3
   16730:	4152      	adcs	r2, r2
   16732:	0b03      	lsrs	r3, r0, #12
   16734:	428b      	cmp	r3, r1
   16736:	d301      	bcc.n	1673c <__divsi3+0x70>
   16738:	030b      	lsls	r3, r1, #12
   1673a:	1ac0      	subs	r0, r0, r3
   1673c:	4152      	adcs	r2, r2
   1673e:	0ac3      	lsrs	r3, r0, #11
   16740:	428b      	cmp	r3, r1
   16742:	d301      	bcc.n	16748 <__divsi3+0x7c>
   16744:	02cb      	lsls	r3, r1, #11
   16746:	1ac0      	subs	r0, r0, r3
   16748:	4152      	adcs	r2, r2
   1674a:	0a83      	lsrs	r3, r0, #10
   1674c:	428b      	cmp	r3, r1
   1674e:	d301      	bcc.n	16754 <__divsi3+0x88>
   16750:	028b      	lsls	r3, r1, #10
   16752:	1ac0      	subs	r0, r0, r3
   16754:	4152      	adcs	r2, r2
   16756:	0a43      	lsrs	r3, r0, #9
   16758:	428b      	cmp	r3, r1
   1675a:	d301      	bcc.n	16760 <__divsi3+0x94>
   1675c:	024b      	lsls	r3, r1, #9
   1675e:	1ac0      	subs	r0, r0, r3
   16760:	4152      	adcs	r2, r2
   16762:	0a03      	lsrs	r3, r0, #8
   16764:	428b      	cmp	r3, r1
   16766:	d301      	bcc.n	1676c <__divsi3+0xa0>
   16768:	020b      	lsls	r3, r1, #8
   1676a:	1ac0      	subs	r0, r0, r3
   1676c:	4152      	adcs	r2, r2
   1676e:	d2cd      	bcs.n	1670c <__divsi3+0x40>
   16770:	09c3      	lsrs	r3, r0, #7
   16772:	428b      	cmp	r3, r1
   16774:	d301      	bcc.n	1677a <__divsi3+0xae>
   16776:	01cb      	lsls	r3, r1, #7
   16778:	1ac0      	subs	r0, r0, r3
   1677a:	4152      	adcs	r2, r2
   1677c:	0983      	lsrs	r3, r0, #6
   1677e:	428b      	cmp	r3, r1
   16780:	d301      	bcc.n	16786 <__divsi3+0xba>
   16782:	018b      	lsls	r3, r1, #6
   16784:	1ac0      	subs	r0, r0, r3
   16786:	4152      	adcs	r2, r2
   16788:	0943      	lsrs	r3, r0, #5
   1678a:	428b      	cmp	r3, r1
   1678c:	d301      	bcc.n	16792 <__divsi3+0xc6>
   1678e:	014b      	lsls	r3, r1, #5
   16790:	1ac0      	subs	r0, r0, r3
   16792:	4152      	adcs	r2, r2
   16794:	0903      	lsrs	r3, r0, #4
   16796:	428b      	cmp	r3, r1
   16798:	d301      	bcc.n	1679e <__divsi3+0xd2>
   1679a:	010b      	lsls	r3, r1, #4
   1679c:	1ac0      	subs	r0, r0, r3
   1679e:	4152      	adcs	r2, r2
   167a0:	08c3      	lsrs	r3, r0, #3
   167a2:	428b      	cmp	r3, r1
   167a4:	d301      	bcc.n	167aa <__divsi3+0xde>
   167a6:	00cb      	lsls	r3, r1, #3
   167a8:	1ac0      	subs	r0, r0, r3
   167aa:	4152      	adcs	r2, r2
   167ac:	0883      	lsrs	r3, r0, #2
   167ae:	428b      	cmp	r3, r1
   167b0:	d301      	bcc.n	167b6 <__divsi3+0xea>
   167b2:	008b      	lsls	r3, r1, #2
   167b4:	1ac0      	subs	r0, r0, r3
   167b6:	4152      	adcs	r2, r2
   167b8:	0843      	lsrs	r3, r0, #1
   167ba:	428b      	cmp	r3, r1
   167bc:	d301      	bcc.n	167c2 <__divsi3+0xf6>
   167be:	004b      	lsls	r3, r1, #1
   167c0:	1ac0      	subs	r0, r0, r3
   167c2:	4152      	adcs	r2, r2
   167c4:	1a41      	subs	r1, r0, r1
   167c6:	d200      	bcs.n	167ca <__divsi3+0xfe>
   167c8:	4601      	mov	r1, r0
   167ca:	4152      	adcs	r2, r2
   167cc:	4610      	mov	r0, r2
   167ce:	4770      	bx	lr
   167d0:	e05d      	b.n	1688e <__divsi3+0x1c2>
   167d2:	0fca      	lsrs	r2, r1, #31
   167d4:	d000      	beq.n	167d8 <__divsi3+0x10c>
   167d6:	4249      	negs	r1, r1
   167d8:	1003      	asrs	r3, r0, #32
   167da:	d300      	bcc.n	167de <__divsi3+0x112>
   167dc:	4240      	negs	r0, r0
   167de:	4053      	eors	r3, r2
   167e0:	2200      	movs	r2, #0
   167e2:	469c      	mov	ip, r3
   167e4:	0903      	lsrs	r3, r0, #4
   167e6:	428b      	cmp	r3, r1
   167e8:	d32d      	bcc.n	16846 <__divsi3+0x17a>
   167ea:	0a03      	lsrs	r3, r0, #8
   167ec:	428b      	cmp	r3, r1
   167ee:	d312      	bcc.n	16816 <__divsi3+0x14a>
   167f0:	22fc      	movs	r2, #252	; 0xfc
   167f2:	0189      	lsls	r1, r1, #6
   167f4:	ba12      	rev	r2, r2
   167f6:	0a03      	lsrs	r3, r0, #8
   167f8:	428b      	cmp	r3, r1
   167fa:	d30c      	bcc.n	16816 <__divsi3+0x14a>
   167fc:	0189      	lsls	r1, r1, #6
   167fe:	1192      	asrs	r2, r2, #6
   16800:	428b      	cmp	r3, r1
   16802:	d308      	bcc.n	16816 <__divsi3+0x14a>
   16804:	0189      	lsls	r1, r1, #6
   16806:	1192      	asrs	r2, r2, #6
   16808:	428b      	cmp	r3, r1
   1680a:	d304      	bcc.n	16816 <__divsi3+0x14a>
   1680c:	0189      	lsls	r1, r1, #6
   1680e:	d03a      	beq.n	16886 <__divsi3+0x1ba>
   16810:	1192      	asrs	r2, r2, #6
   16812:	e000      	b.n	16816 <__divsi3+0x14a>
   16814:	0989      	lsrs	r1, r1, #6
   16816:	09c3      	lsrs	r3, r0, #7
   16818:	428b      	cmp	r3, r1
   1681a:	d301      	bcc.n	16820 <__divsi3+0x154>
   1681c:	01cb      	lsls	r3, r1, #7
   1681e:	1ac0      	subs	r0, r0, r3
   16820:	4152      	adcs	r2, r2
   16822:	0983      	lsrs	r3, r0, #6
   16824:	428b      	cmp	r3, r1
   16826:	d301      	bcc.n	1682c <__divsi3+0x160>
   16828:	018b      	lsls	r3, r1, #6
   1682a:	1ac0      	subs	r0, r0, r3
   1682c:	4152      	adcs	r2, r2
   1682e:	0943      	lsrs	r3, r0, #5
   16830:	428b      	cmp	r3, r1
   16832:	d301      	bcc.n	16838 <__divsi3+0x16c>
   16834:	014b      	lsls	r3, r1, #5
   16836:	1ac0      	subs	r0, r0, r3
   16838:	4152      	adcs	r2, r2
   1683a:	0903      	lsrs	r3, r0, #4
   1683c:	428b      	cmp	r3, r1
   1683e:	d301      	bcc.n	16844 <__divsi3+0x178>
   16840:	010b      	lsls	r3, r1, #4
   16842:	1ac0      	subs	r0, r0, r3
   16844:	4152      	adcs	r2, r2
   16846:	08c3      	lsrs	r3, r0, #3
   16848:	428b      	cmp	r3, r1
   1684a:	d301      	bcc.n	16850 <__divsi3+0x184>
   1684c:	00cb      	lsls	r3, r1, #3
   1684e:	1ac0      	subs	r0, r0, r3
   16850:	4152      	adcs	r2, r2
   16852:	0883      	lsrs	r3, r0, #2
   16854:	428b      	cmp	r3, r1
   16856:	d301      	bcc.n	1685c <__divsi3+0x190>
   16858:	008b      	lsls	r3, r1, #2
   1685a:	1ac0      	subs	r0, r0, r3
   1685c:	4152      	adcs	r2, r2
   1685e:	d2d9      	bcs.n	16814 <__divsi3+0x148>
   16860:	0843      	lsrs	r3, r0, #1
   16862:	428b      	cmp	r3, r1
   16864:	d301      	bcc.n	1686a <__divsi3+0x19e>
   16866:	004b      	lsls	r3, r1, #1
   16868:	1ac0      	subs	r0, r0, r3
   1686a:	4152      	adcs	r2, r2
   1686c:	1a41      	subs	r1, r0, r1
   1686e:	d200      	bcs.n	16872 <__divsi3+0x1a6>
   16870:	4601      	mov	r1, r0
   16872:	4663      	mov	r3, ip
   16874:	4152      	adcs	r2, r2
   16876:	105b      	asrs	r3, r3, #1
   16878:	4610      	mov	r0, r2
   1687a:	d301      	bcc.n	16880 <__divsi3+0x1b4>
   1687c:	4240      	negs	r0, r0
   1687e:	2b00      	cmp	r3, #0
   16880:	d500      	bpl.n	16884 <__divsi3+0x1b8>
   16882:	4249      	negs	r1, r1
   16884:	4770      	bx	lr
   16886:	4663      	mov	r3, ip
   16888:	105b      	asrs	r3, r3, #1
   1688a:	d300      	bcc.n	1688e <__divsi3+0x1c2>
   1688c:	4240      	negs	r0, r0
   1688e:	b501      	push	{r0, lr}
   16890:	2000      	movs	r0, #0
   16892:	f000 f805 	bl	168a0 <__aeabi_idiv0>
   16896:	bd02      	pop	{r1, pc}

00016898 <__aeabi_idivmod>:
   16898:	2900      	cmp	r1, #0
   1689a:	d0f8      	beq.n	1688e <__divsi3+0x1c2>
   1689c:	e716      	b.n	166cc <__divsi3>
   1689e:	4770      	bx	lr

000168a0 <__aeabi_idiv0>:
   168a0:	4770      	bx	lr
   168a2:	46c0      	nop			; (mov r8, r8)

000168a4 <__aeabi_cdrcmple>:
   168a4:	4684      	mov	ip, r0
   168a6:	1c10      	adds	r0, r2, #0
   168a8:	4662      	mov	r2, ip
   168aa:	468c      	mov	ip, r1
   168ac:	1c19      	adds	r1, r3, #0
   168ae:	4663      	mov	r3, ip
   168b0:	e000      	b.n	168b4 <__aeabi_cdcmpeq>
   168b2:	46c0      	nop			; (mov r8, r8)

000168b4 <__aeabi_cdcmpeq>:
   168b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   168b6:	f001 ffa3 	bl	18800 <__ledf2>
   168ba:	2800      	cmp	r0, #0
   168bc:	d401      	bmi.n	168c2 <__aeabi_cdcmpeq+0xe>
   168be:	2100      	movs	r1, #0
   168c0:	42c8      	cmn	r0, r1
   168c2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000168c4 <__aeabi_dcmpeq>:
   168c4:	b510      	push	{r4, lr}
   168c6:	f001 fefd 	bl	186c4 <__eqdf2>
   168ca:	4240      	negs	r0, r0
   168cc:	3001      	adds	r0, #1
   168ce:	bd10      	pop	{r4, pc}

000168d0 <__aeabi_dcmplt>:
   168d0:	b510      	push	{r4, lr}
   168d2:	f001 ff95 	bl	18800 <__ledf2>
   168d6:	2800      	cmp	r0, #0
   168d8:	db01      	blt.n	168de <__aeabi_dcmplt+0xe>
   168da:	2000      	movs	r0, #0
   168dc:	bd10      	pop	{r4, pc}
   168de:	2001      	movs	r0, #1
   168e0:	bd10      	pop	{r4, pc}
   168e2:	46c0      	nop			; (mov r8, r8)

000168e4 <__aeabi_dcmple>:
   168e4:	b510      	push	{r4, lr}
   168e6:	f001 ff8b 	bl	18800 <__ledf2>
   168ea:	2800      	cmp	r0, #0
   168ec:	dd01      	ble.n	168f2 <__aeabi_dcmple+0xe>
   168ee:	2000      	movs	r0, #0
   168f0:	bd10      	pop	{r4, pc}
   168f2:	2001      	movs	r0, #1
   168f4:	bd10      	pop	{r4, pc}
   168f6:	46c0      	nop			; (mov r8, r8)

000168f8 <__aeabi_dcmpgt>:
   168f8:	b510      	push	{r4, lr}
   168fa:	f001 ff1d 	bl	18738 <__gedf2>
   168fe:	2800      	cmp	r0, #0
   16900:	dc01      	bgt.n	16906 <__aeabi_dcmpgt+0xe>
   16902:	2000      	movs	r0, #0
   16904:	bd10      	pop	{r4, pc}
   16906:	2001      	movs	r0, #1
   16908:	bd10      	pop	{r4, pc}
   1690a:	46c0      	nop			; (mov r8, r8)

0001690c <__aeabi_dcmpge>:
   1690c:	b510      	push	{r4, lr}
   1690e:	f001 ff13 	bl	18738 <__gedf2>
   16912:	2800      	cmp	r0, #0
   16914:	da01      	bge.n	1691a <__aeabi_dcmpge+0xe>
   16916:	2000      	movs	r0, #0
   16918:	bd10      	pop	{r4, pc}
   1691a:	2001      	movs	r0, #1
   1691c:	bd10      	pop	{r4, pc}
   1691e:	46c0      	nop			; (mov r8, r8)

00016920 <__aeabi_cfrcmple>:
   16920:	4684      	mov	ip, r0
   16922:	1c08      	adds	r0, r1, #0
   16924:	4661      	mov	r1, ip
   16926:	e7ff      	b.n	16928 <__aeabi_cfcmpeq>

00016928 <__aeabi_cfcmpeq>:
   16928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1692a:	f000 fcd3 	bl	172d4 <__lesf2>
   1692e:	2800      	cmp	r0, #0
   16930:	d401      	bmi.n	16936 <__aeabi_cfcmpeq+0xe>
   16932:	2100      	movs	r1, #0
   16934:	42c8      	cmn	r0, r1
   16936:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00016938 <__aeabi_fcmpeq>:
   16938:	b510      	push	{r4, lr}
   1693a:	f000 fc65 	bl	17208 <__eqsf2>
   1693e:	4240      	negs	r0, r0
   16940:	3001      	adds	r0, #1
   16942:	bd10      	pop	{r4, pc}

00016944 <__aeabi_fcmplt>:
   16944:	b510      	push	{r4, lr}
   16946:	f000 fcc5 	bl	172d4 <__lesf2>
   1694a:	2800      	cmp	r0, #0
   1694c:	db01      	blt.n	16952 <__aeabi_fcmplt+0xe>
   1694e:	2000      	movs	r0, #0
   16950:	bd10      	pop	{r4, pc}
   16952:	2001      	movs	r0, #1
   16954:	bd10      	pop	{r4, pc}
   16956:	46c0      	nop			; (mov r8, r8)

00016958 <__aeabi_fcmple>:
   16958:	b510      	push	{r4, lr}
   1695a:	f000 fcbb 	bl	172d4 <__lesf2>
   1695e:	2800      	cmp	r0, #0
   16960:	dd01      	ble.n	16966 <__aeabi_fcmple+0xe>
   16962:	2000      	movs	r0, #0
   16964:	bd10      	pop	{r4, pc}
   16966:	2001      	movs	r0, #1
   16968:	bd10      	pop	{r4, pc}
   1696a:	46c0      	nop			; (mov r8, r8)

0001696c <__aeabi_fcmpgt>:
   1696c:	b510      	push	{r4, lr}
   1696e:	f000 fc71 	bl	17254 <__gesf2>
   16972:	2800      	cmp	r0, #0
   16974:	dc01      	bgt.n	1697a <__aeabi_fcmpgt+0xe>
   16976:	2000      	movs	r0, #0
   16978:	bd10      	pop	{r4, pc}
   1697a:	2001      	movs	r0, #1
   1697c:	bd10      	pop	{r4, pc}
   1697e:	46c0      	nop			; (mov r8, r8)

00016980 <__aeabi_fcmpge>:
   16980:	b510      	push	{r4, lr}
   16982:	f000 fc67 	bl	17254 <__gesf2>
   16986:	2800      	cmp	r0, #0
   16988:	da01      	bge.n	1698e <__aeabi_fcmpge+0xe>
   1698a:	2000      	movs	r0, #0
   1698c:	bd10      	pop	{r4, pc}
   1698e:	2001      	movs	r0, #1
   16990:	bd10      	pop	{r4, pc}
   16992:	46c0      	nop			; (mov r8, r8)

00016994 <__aeabi_uldivmod>:
   16994:	2b00      	cmp	r3, #0
   16996:	d111      	bne.n	169bc <__aeabi_uldivmod+0x28>
   16998:	2a00      	cmp	r2, #0
   1699a:	d10f      	bne.n	169bc <__aeabi_uldivmod+0x28>
   1699c:	2900      	cmp	r1, #0
   1699e:	d100      	bne.n	169a2 <__aeabi_uldivmod+0xe>
   169a0:	2800      	cmp	r0, #0
   169a2:	d002      	beq.n	169aa <__aeabi_uldivmod+0x16>
   169a4:	2100      	movs	r1, #0
   169a6:	43c9      	mvns	r1, r1
   169a8:	1c08      	adds	r0, r1, #0
   169aa:	b407      	push	{r0, r1, r2}
   169ac:	4802      	ldr	r0, [pc, #8]	; (169b8 <__aeabi_uldivmod+0x24>)
   169ae:	a102      	add	r1, pc, #8	; (adr r1, 169b8 <__aeabi_uldivmod+0x24>)
   169b0:	1840      	adds	r0, r0, r1
   169b2:	9002      	str	r0, [sp, #8]
   169b4:	bd03      	pop	{r0, r1, pc}
   169b6:	46c0      	nop			; (mov r8, r8)
   169b8:	fffffee9 	.word	0xfffffee9
   169bc:	b403      	push	{r0, r1}
   169be:	4668      	mov	r0, sp
   169c0:	b501      	push	{r0, lr}
   169c2:	9802      	ldr	r0, [sp, #8]
   169c4:	f000 f886 	bl	16ad4 <__udivmoddi4>
   169c8:	9b01      	ldr	r3, [sp, #4]
   169ca:	469e      	mov	lr, r3
   169cc:	b002      	add	sp, #8
   169ce:	bc0c      	pop	{r2, r3}
   169d0:	4770      	bx	lr
   169d2:	46c0      	nop			; (mov r8, r8)

000169d4 <__aeabi_lmul>:
   169d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   169d6:	46ce      	mov	lr, r9
   169d8:	4647      	mov	r7, r8
   169da:	0415      	lsls	r5, r2, #16
   169dc:	0c2d      	lsrs	r5, r5, #16
   169de:	002e      	movs	r6, r5
   169e0:	b580      	push	{r7, lr}
   169e2:	0407      	lsls	r7, r0, #16
   169e4:	0c14      	lsrs	r4, r2, #16
   169e6:	0c3f      	lsrs	r7, r7, #16
   169e8:	4699      	mov	r9, r3
   169ea:	0c03      	lsrs	r3, r0, #16
   169ec:	437e      	muls	r6, r7
   169ee:	435d      	muls	r5, r3
   169f0:	4367      	muls	r7, r4
   169f2:	4363      	muls	r3, r4
   169f4:	197f      	adds	r7, r7, r5
   169f6:	0c34      	lsrs	r4, r6, #16
   169f8:	19e4      	adds	r4, r4, r7
   169fa:	469c      	mov	ip, r3
   169fc:	42a5      	cmp	r5, r4
   169fe:	d903      	bls.n	16a08 <__aeabi_lmul+0x34>
   16a00:	2380      	movs	r3, #128	; 0x80
   16a02:	025b      	lsls	r3, r3, #9
   16a04:	4698      	mov	r8, r3
   16a06:	44c4      	add	ip, r8
   16a08:	464b      	mov	r3, r9
   16a0a:	4351      	muls	r1, r2
   16a0c:	4343      	muls	r3, r0
   16a0e:	0436      	lsls	r6, r6, #16
   16a10:	0c36      	lsrs	r6, r6, #16
   16a12:	0c25      	lsrs	r5, r4, #16
   16a14:	0424      	lsls	r4, r4, #16
   16a16:	4465      	add	r5, ip
   16a18:	19a4      	adds	r4, r4, r6
   16a1a:	1859      	adds	r1, r3, r1
   16a1c:	1949      	adds	r1, r1, r5
   16a1e:	0020      	movs	r0, r4
   16a20:	bc0c      	pop	{r2, r3}
   16a22:	4690      	mov	r8, r2
   16a24:	4699      	mov	r9, r3
   16a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016a28 <__aeabi_f2uiz>:
   16a28:	219e      	movs	r1, #158	; 0x9e
   16a2a:	b510      	push	{r4, lr}
   16a2c:	05c9      	lsls	r1, r1, #23
   16a2e:	1c04      	adds	r4, r0, #0
   16a30:	f7ff ffa6 	bl	16980 <__aeabi_fcmpge>
   16a34:	2800      	cmp	r0, #0
   16a36:	d103      	bne.n	16a40 <__aeabi_f2uiz+0x18>
   16a38:	1c20      	adds	r0, r4, #0
   16a3a:	f000 ff49 	bl	178d0 <__aeabi_f2iz>
   16a3e:	bd10      	pop	{r4, pc}
   16a40:	219e      	movs	r1, #158	; 0x9e
   16a42:	1c20      	adds	r0, r4, #0
   16a44:	05c9      	lsls	r1, r1, #23
   16a46:	f000 fda7 	bl	17598 <__aeabi_fsub>
   16a4a:	f000 ff41 	bl	178d0 <__aeabi_f2iz>
   16a4e:	2380      	movs	r3, #128	; 0x80
   16a50:	061b      	lsls	r3, r3, #24
   16a52:	469c      	mov	ip, r3
   16a54:	4460      	add	r0, ip
   16a56:	e7f2      	b.n	16a3e <__aeabi_f2uiz+0x16>

00016a58 <__aeabi_d2uiz>:
   16a58:	b570      	push	{r4, r5, r6, lr}
   16a5a:	2200      	movs	r2, #0
   16a5c:	4b0c      	ldr	r3, [pc, #48]	; (16a90 <__aeabi_d2uiz+0x38>)
   16a5e:	0004      	movs	r4, r0
   16a60:	000d      	movs	r5, r1
   16a62:	f7ff ff53 	bl	1690c <__aeabi_dcmpge>
   16a66:	2800      	cmp	r0, #0
   16a68:	d104      	bne.n	16a74 <__aeabi_d2uiz+0x1c>
   16a6a:	0020      	movs	r0, r4
   16a6c:	0029      	movs	r1, r5
   16a6e:	f002 fcbf 	bl	193f0 <__aeabi_d2iz>
   16a72:	bd70      	pop	{r4, r5, r6, pc}
   16a74:	4b06      	ldr	r3, [pc, #24]	; (16a90 <__aeabi_d2uiz+0x38>)
   16a76:	2200      	movs	r2, #0
   16a78:	0020      	movs	r0, r4
   16a7a:	0029      	movs	r1, r5
   16a7c:	f002 f9a2 	bl	18dc4 <__aeabi_dsub>
   16a80:	f002 fcb6 	bl	193f0 <__aeabi_d2iz>
   16a84:	2380      	movs	r3, #128	; 0x80
   16a86:	061b      	lsls	r3, r3, #24
   16a88:	469c      	mov	ip, r3
   16a8a:	4460      	add	r0, ip
   16a8c:	e7f1      	b.n	16a72 <__aeabi_d2uiz+0x1a>
   16a8e:	46c0      	nop			; (mov r8, r8)
   16a90:	41e00000 	.word	0x41e00000

00016a94 <__aeabi_f2ulz>:
   16a94:	b570      	push	{r4, r5, r6, lr}
   16a96:	f002 fd59 	bl	1954c <__aeabi_f2d>
   16a9a:	2200      	movs	r2, #0
   16a9c:	4b0b      	ldr	r3, [pc, #44]	; (16acc <__aeabi_f2ulz+0x38>)
   16a9e:	000d      	movs	r5, r1
   16aa0:	0004      	movs	r4, r0
   16aa2:	f001 ff0f 	bl	188c4 <__aeabi_dmul>
   16aa6:	f7ff ffd7 	bl	16a58 <__aeabi_d2uiz>
   16aaa:	0006      	movs	r6, r0
   16aac:	f002 fd16 	bl	194dc <__aeabi_ui2d>
   16ab0:	2200      	movs	r2, #0
   16ab2:	4b07      	ldr	r3, [pc, #28]	; (16ad0 <__aeabi_f2ulz+0x3c>)
   16ab4:	f001 ff06 	bl	188c4 <__aeabi_dmul>
   16ab8:	0002      	movs	r2, r0
   16aba:	000b      	movs	r3, r1
   16abc:	0020      	movs	r0, r4
   16abe:	0029      	movs	r1, r5
   16ac0:	f002 f980 	bl	18dc4 <__aeabi_dsub>
   16ac4:	f7ff ffc8 	bl	16a58 <__aeabi_d2uiz>
   16ac8:	0031      	movs	r1, r6
   16aca:	bd70      	pop	{r4, r5, r6, pc}
   16acc:	3df00000 	.word	0x3df00000
   16ad0:	41f00000 	.word	0x41f00000

00016ad4 <__udivmoddi4>:
   16ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ad6:	4657      	mov	r7, sl
   16ad8:	464e      	mov	r6, r9
   16ada:	4645      	mov	r5, r8
   16adc:	46de      	mov	lr, fp
   16ade:	b5e0      	push	{r5, r6, r7, lr}
   16ae0:	0004      	movs	r4, r0
   16ae2:	b083      	sub	sp, #12
   16ae4:	000d      	movs	r5, r1
   16ae6:	4692      	mov	sl, r2
   16ae8:	4699      	mov	r9, r3
   16aea:	428b      	cmp	r3, r1
   16aec:	d82f      	bhi.n	16b4e <__udivmoddi4+0x7a>
   16aee:	d02c      	beq.n	16b4a <__udivmoddi4+0x76>
   16af0:	4649      	mov	r1, r9
   16af2:	4650      	mov	r0, sl
   16af4:	f002 fd9a 	bl	1962c <__clzdi2>
   16af8:	0029      	movs	r1, r5
   16afa:	0006      	movs	r6, r0
   16afc:	0020      	movs	r0, r4
   16afe:	f002 fd95 	bl	1962c <__clzdi2>
   16b02:	1a33      	subs	r3, r6, r0
   16b04:	4698      	mov	r8, r3
   16b06:	3b20      	subs	r3, #32
   16b08:	469b      	mov	fp, r3
   16b0a:	d500      	bpl.n	16b0e <__udivmoddi4+0x3a>
   16b0c:	e074      	b.n	16bf8 <__udivmoddi4+0x124>
   16b0e:	4653      	mov	r3, sl
   16b10:	465a      	mov	r2, fp
   16b12:	4093      	lsls	r3, r2
   16b14:	001f      	movs	r7, r3
   16b16:	4653      	mov	r3, sl
   16b18:	4642      	mov	r2, r8
   16b1a:	4093      	lsls	r3, r2
   16b1c:	001e      	movs	r6, r3
   16b1e:	42af      	cmp	r7, r5
   16b20:	d829      	bhi.n	16b76 <__udivmoddi4+0xa2>
   16b22:	d026      	beq.n	16b72 <__udivmoddi4+0x9e>
   16b24:	465b      	mov	r3, fp
   16b26:	1ba4      	subs	r4, r4, r6
   16b28:	41bd      	sbcs	r5, r7
   16b2a:	2b00      	cmp	r3, #0
   16b2c:	da00      	bge.n	16b30 <__udivmoddi4+0x5c>
   16b2e:	e079      	b.n	16c24 <__udivmoddi4+0x150>
   16b30:	2200      	movs	r2, #0
   16b32:	2300      	movs	r3, #0
   16b34:	9200      	str	r2, [sp, #0]
   16b36:	9301      	str	r3, [sp, #4]
   16b38:	2301      	movs	r3, #1
   16b3a:	465a      	mov	r2, fp
   16b3c:	4093      	lsls	r3, r2
   16b3e:	9301      	str	r3, [sp, #4]
   16b40:	2301      	movs	r3, #1
   16b42:	4642      	mov	r2, r8
   16b44:	4093      	lsls	r3, r2
   16b46:	9300      	str	r3, [sp, #0]
   16b48:	e019      	b.n	16b7e <__udivmoddi4+0xaa>
   16b4a:	4282      	cmp	r2, r0
   16b4c:	d9d0      	bls.n	16af0 <__udivmoddi4+0x1c>
   16b4e:	2200      	movs	r2, #0
   16b50:	2300      	movs	r3, #0
   16b52:	9200      	str	r2, [sp, #0]
   16b54:	9301      	str	r3, [sp, #4]
   16b56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16b58:	2b00      	cmp	r3, #0
   16b5a:	d001      	beq.n	16b60 <__udivmoddi4+0x8c>
   16b5c:	601c      	str	r4, [r3, #0]
   16b5e:	605d      	str	r5, [r3, #4]
   16b60:	9800      	ldr	r0, [sp, #0]
   16b62:	9901      	ldr	r1, [sp, #4]
   16b64:	b003      	add	sp, #12
   16b66:	bc3c      	pop	{r2, r3, r4, r5}
   16b68:	4690      	mov	r8, r2
   16b6a:	4699      	mov	r9, r3
   16b6c:	46a2      	mov	sl, r4
   16b6e:	46ab      	mov	fp, r5
   16b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16b72:	42a3      	cmp	r3, r4
   16b74:	d9d6      	bls.n	16b24 <__udivmoddi4+0x50>
   16b76:	2200      	movs	r2, #0
   16b78:	2300      	movs	r3, #0
   16b7a:	9200      	str	r2, [sp, #0]
   16b7c:	9301      	str	r3, [sp, #4]
   16b7e:	4643      	mov	r3, r8
   16b80:	2b00      	cmp	r3, #0
   16b82:	d0e8      	beq.n	16b56 <__udivmoddi4+0x82>
   16b84:	07fb      	lsls	r3, r7, #31
   16b86:	0872      	lsrs	r2, r6, #1
   16b88:	431a      	orrs	r2, r3
   16b8a:	4646      	mov	r6, r8
   16b8c:	087b      	lsrs	r3, r7, #1
   16b8e:	e00e      	b.n	16bae <__udivmoddi4+0xda>
   16b90:	42ab      	cmp	r3, r5
   16b92:	d101      	bne.n	16b98 <__udivmoddi4+0xc4>
   16b94:	42a2      	cmp	r2, r4
   16b96:	d80c      	bhi.n	16bb2 <__udivmoddi4+0xde>
   16b98:	1aa4      	subs	r4, r4, r2
   16b9a:	419d      	sbcs	r5, r3
   16b9c:	2001      	movs	r0, #1
   16b9e:	1924      	adds	r4, r4, r4
   16ba0:	416d      	adcs	r5, r5
   16ba2:	2100      	movs	r1, #0
   16ba4:	3e01      	subs	r6, #1
   16ba6:	1824      	adds	r4, r4, r0
   16ba8:	414d      	adcs	r5, r1
   16baa:	2e00      	cmp	r6, #0
   16bac:	d006      	beq.n	16bbc <__udivmoddi4+0xe8>
   16bae:	42ab      	cmp	r3, r5
   16bb0:	d9ee      	bls.n	16b90 <__udivmoddi4+0xbc>
   16bb2:	3e01      	subs	r6, #1
   16bb4:	1924      	adds	r4, r4, r4
   16bb6:	416d      	adcs	r5, r5
   16bb8:	2e00      	cmp	r6, #0
   16bba:	d1f8      	bne.n	16bae <__udivmoddi4+0xda>
   16bbc:	465b      	mov	r3, fp
   16bbe:	9800      	ldr	r0, [sp, #0]
   16bc0:	9901      	ldr	r1, [sp, #4]
   16bc2:	1900      	adds	r0, r0, r4
   16bc4:	4169      	adcs	r1, r5
   16bc6:	2b00      	cmp	r3, #0
   16bc8:	db22      	blt.n	16c10 <__udivmoddi4+0x13c>
   16bca:	002b      	movs	r3, r5
   16bcc:	465a      	mov	r2, fp
   16bce:	40d3      	lsrs	r3, r2
   16bd0:	002a      	movs	r2, r5
   16bd2:	4644      	mov	r4, r8
   16bd4:	40e2      	lsrs	r2, r4
   16bd6:	001c      	movs	r4, r3
   16bd8:	465b      	mov	r3, fp
   16bda:	0015      	movs	r5, r2
   16bdc:	2b00      	cmp	r3, #0
   16bde:	db2c      	blt.n	16c3a <__udivmoddi4+0x166>
   16be0:	0026      	movs	r6, r4
   16be2:	409e      	lsls	r6, r3
   16be4:	0033      	movs	r3, r6
   16be6:	0026      	movs	r6, r4
   16be8:	4647      	mov	r7, r8
   16bea:	40be      	lsls	r6, r7
   16bec:	0032      	movs	r2, r6
   16bee:	1a80      	subs	r0, r0, r2
   16bf0:	4199      	sbcs	r1, r3
   16bf2:	9000      	str	r0, [sp, #0]
   16bf4:	9101      	str	r1, [sp, #4]
   16bf6:	e7ae      	b.n	16b56 <__udivmoddi4+0x82>
   16bf8:	4642      	mov	r2, r8
   16bfa:	2320      	movs	r3, #32
   16bfc:	1a9b      	subs	r3, r3, r2
   16bfe:	4652      	mov	r2, sl
   16c00:	40da      	lsrs	r2, r3
   16c02:	4641      	mov	r1, r8
   16c04:	0013      	movs	r3, r2
   16c06:	464a      	mov	r2, r9
   16c08:	408a      	lsls	r2, r1
   16c0a:	0017      	movs	r7, r2
   16c0c:	431f      	orrs	r7, r3
   16c0e:	e782      	b.n	16b16 <__udivmoddi4+0x42>
   16c10:	4642      	mov	r2, r8
   16c12:	2320      	movs	r3, #32
   16c14:	1a9b      	subs	r3, r3, r2
   16c16:	002a      	movs	r2, r5
   16c18:	4646      	mov	r6, r8
   16c1a:	409a      	lsls	r2, r3
   16c1c:	0023      	movs	r3, r4
   16c1e:	40f3      	lsrs	r3, r6
   16c20:	4313      	orrs	r3, r2
   16c22:	e7d5      	b.n	16bd0 <__udivmoddi4+0xfc>
   16c24:	4642      	mov	r2, r8
   16c26:	2320      	movs	r3, #32
   16c28:	2100      	movs	r1, #0
   16c2a:	1a9b      	subs	r3, r3, r2
   16c2c:	2200      	movs	r2, #0
   16c2e:	9100      	str	r1, [sp, #0]
   16c30:	9201      	str	r2, [sp, #4]
   16c32:	2201      	movs	r2, #1
   16c34:	40da      	lsrs	r2, r3
   16c36:	9201      	str	r2, [sp, #4]
   16c38:	e782      	b.n	16b40 <__udivmoddi4+0x6c>
   16c3a:	4642      	mov	r2, r8
   16c3c:	2320      	movs	r3, #32
   16c3e:	0026      	movs	r6, r4
   16c40:	1a9b      	subs	r3, r3, r2
   16c42:	40de      	lsrs	r6, r3
   16c44:	002f      	movs	r7, r5
   16c46:	46b4      	mov	ip, r6
   16c48:	4097      	lsls	r7, r2
   16c4a:	4666      	mov	r6, ip
   16c4c:	003b      	movs	r3, r7
   16c4e:	4333      	orrs	r3, r6
   16c50:	e7c9      	b.n	16be6 <__udivmoddi4+0x112>
   16c52:	46c0      	nop			; (mov r8, r8)

00016c54 <__aeabi_fadd>:
   16c54:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c56:	46c6      	mov	lr, r8
   16c58:	024e      	lsls	r6, r1, #9
   16c5a:	0247      	lsls	r7, r0, #9
   16c5c:	0a76      	lsrs	r6, r6, #9
   16c5e:	0a7b      	lsrs	r3, r7, #9
   16c60:	0044      	lsls	r4, r0, #1
   16c62:	0fc5      	lsrs	r5, r0, #31
   16c64:	00f7      	lsls	r7, r6, #3
   16c66:	0048      	lsls	r0, r1, #1
   16c68:	4698      	mov	r8, r3
   16c6a:	b500      	push	{lr}
   16c6c:	0e24      	lsrs	r4, r4, #24
   16c6e:	002a      	movs	r2, r5
   16c70:	00db      	lsls	r3, r3, #3
   16c72:	0e00      	lsrs	r0, r0, #24
   16c74:	0fc9      	lsrs	r1, r1, #31
   16c76:	46bc      	mov	ip, r7
   16c78:	428d      	cmp	r5, r1
   16c7a:	d067      	beq.n	16d4c <__aeabi_fadd+0xf8>
   16c7c:	1a22      	subs	r2, r4, r0
   16c7e:	2a00      	cmp	r2, #0
   16c80:	dc00      	bgt.n	16c84 <__aeabi_fadd+0x30>
   16c82:	e0a5      	b.n	16dd0 <__aeabi_fadd+0x17c>
   16c84:	2800      	cmp	r0, #0
   16c86:	d13a      	bne.n	16cfe <__aeabi_fadd+0xaa>
   16c88:	2f00      	cmp	r7, #0
   16c8a:	d100      	bne.n	16c8e <__aeabi_fadd+0x3a>
   16c8c:	e093      	b.n	16db6 <__aeabi_fadd+0x162>
   16c8e:	1e51      	subs	r1, r2, #1
   16c90:	2900      	cmp	r1, #0
   16c92:	d000      	beq.n	16c96 <__aeabi_fadd+0x42>
   16c94:	e0bc      	b.n	16e10 <__aeabi_fadd+0x1bc>
   16c96:	2401      	movs	r4, #1
   16c98:	1bdb      	subs	r3, r3, r7
   16c9a:	015a      	lsls	r2, r3, #5
   16c9c:	d546      	bpl.n	16d2c <__aeabi_fadd+0xd8>
   16c9e:	019b      	lsls	r3, r3, #6
   16ca0:	099e      	lsrs	r6, r3, #6
   16ca2:	0030      	movs	r0, r6
   16ca4:	f002 fca4 	bl	195f0 <__clzsi2>
   16ca8:	3805      	subs	r0, #5
   16caa:	4086      	lsls	r6, r0
   16cac:	4284      	cmp	r4, r0
   16cae:	dd00      	ble.n	16cb2 <__aeabi_fadd+0x5e>
   16cb0:	e09d      	b.n	16dee <__aeabi_fadd+0x19a>
   16cb2:	1b04      	subs	r4, r0, r4
   16cb4:	0032      	movs	r2, r6
   16cb6:	2020      	movs	r0, #32
   16cb8:	3401      	adds	r4, #1
   16cba:	40e2      	lsrs	r2, r4
   16cbc:	1b04      	subs	r4, r0, r4
   16cbe:	40a6      	lsls	r6, r4
   16cc0:	0033      	movs	r3, r6
   16cc2:	1e5e      	subs	r6, r3, #1
   16cc4:	41b3      	sbcs	r3, r6
   16cc6:	2400      	movs	r4, #0
   16cc8:	4313      	orrs	r3, r2
   16cca:	075a      	lsls	r2, r3, #29
   16ccc:	d004      	beq.n	16cd8 <__aeabi_fadd+0x84>
   16cce:	220f      	movs	r2, #15
   16cd0:	401a      	ands	r2, r3
   16cd2:	2a04      	cmp	r2, #4
   16cd4:	d000      	beq.n	16cd8 <__aeabi_fadd+0x84>
   16cd6:	3304      	adds	r3, #4
   16cd8:	015a      	lsls	r2, r3, #5
   16cda:	d529      	bpl.n	16d30 <__aeabi_fadd+0xdc>
   16cdc:	3401      	adds	r4, #1
   16cde:	2cff      	cmp	r4, #255	; 0xff
   16ce0:	d100      	bne.n	16ce4 <__aeabi_fadd+0x90>
   16ce2:	e081      	b.n	16de8 <__aeabi_fadd+0x194>
   16ce4:	002a      	movs	r2, r5
   16ce6:	019b      	lsls	r3, r3, #6
   16ce8:	0a5b      	lsrs	r3, r3, #9
   16cea:	b2e4      	uxtb	r4, r4
   16cec:	025b      	lsls	r3, r3, #9
   16cee:	05e4      	lsls	r4, r4, #23
   16cf0:	0a58      	lsrs	r0, r3, #9
   16cf2:	07d2      	lsls	r2, r2, #31
   16cf4:	4320      	orrs	r0, r4
   16cf6:	4310      	orrs	r0, r2
   16cf8:	bc04      	pop	{r2}
   16cfa:	4690      	mov	r8, r2
   16cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16cfe:	2cff      	cmp	r4, #255	; 0xff
   16d00:	d0e3      	beq.n	16cca <__aeabi_fadd+0x76>
   16d02:	2180      	movs	r1, #128	; 0x80
   16d04:	0038      	movs	r0, r7
   16d06:	04c9      	lsls	r1, r1, #19
   16d08:	4308      	orrs	r0, r1
   16d0a:	4684      	mov	ip, r0
   16d0c:	2a1b      	cmp	r2, #27
   16d0e:	dd00      	ble.n	16d12 <__aeabi_fadd+0xbe>
   16d10:	e082      	b.n	16e18 <__aeabi_fadd+0x1c4>
   16d12:	2020      	movs	r0, #32
   16d14:	4661      	mov	r1, ip
   16d16:	40d1      	lsrs	r1, r2
   16d18:	1a82      	subs	r2, r0, r2
   16d1a:	4660      	mov	r0, ip
   16d1c:	4090      	lsls	r0, r2
   16d1e:	0002      	movs	r2, r0
   16d20:	1e50      	subs	r0, r2, #1
   16d22:	4182      	sbcs	r2, r0
   16d24:	430a      	orrs	r2, r1
   16d26:	1a9b      	subs	r3, r3, r2
   16d28:	015a      	lsls	r2, r3, #5
   16d2a:	d4b8      	bmi.n	16c9e <__aeabi_fadd+0x4a>
   16d2c:	075a      	lsls	r2, r3, #29
   16d2e:	d1ce      	bne.n	16cce <__aeabi_fadd+0x7a>
   16d30:	08de      	lsrs	r6, r3, #3
   16d32:	002a      	movs	r2, r5
   16d34:	2cff      	cmp	r4, #255	; 0xff
   16d36:	d13a      	bne.n	16dae <__aeabi_fadd+0x15a>
   16d38:	2e00      	cmp	r6, #0
   16d3a:	d100      	bne.n	16d3e <__aeabi_fadd+0xea>
   16d3c:	e0ae      	b.n	16e9c <__aeabi_fadd+0x248>
   16d3e:	2380      	movs	r3, #128	; 0x80
   16d40:	03db      	lsls	r3, r3, #15
   16d42:	4333      	orrs	r3, r6
   16d44:	025b      	lsls	r3, r3, #9
   16d46:	0a5b      	lsrs	r3, r3, #9
   16d48:	24ff      	movs	r4, #255	; 0xff
   16d4a:	e7cf      	b.n	16cec <__aeabi_fadd+0x98>
   16d4c:	1a21      	subs	r1, r4, r0
   16d4e:	2900      	cmp	r1, #0
   16d50:	dd52      	ble.n	16df8 <__aeabi_fadd+0x1a4>
   16d52:	2800      	cmp	r0, #0
   16d54:	d031      	beq.n	16dba <__aeabi_fadd+0x166>
   16d56:	2cff      	cmp	r4, #255	; 0xff
   16d58:	d0b7      	beq.n	16cca <__aeabi_fadd+0x76>
   16d5a:	2080      	movs	r0, #128	; 0x80
   16d5c:	003e      	movs	r6, r7
   16d5e:	04c0      	lsls	r0, r0, #19
   16d60:	4306      	orrs	r6, r0
   16d62:	46b4      	mov	ip, r6
   16d64:	291b      	cmp	r1, #27
   16d66:	dd00      	ble.n	16d6a <__aeabi_fadd+0x116>
   16d68:	e0aa      	b.n	16ec0 <__aeabi_fadd+0x26c>
   16d6a:	2620      	movs	r6, #32
   16d6c:	4660      	mov	r0, ip
   16d6e:	40c8      	lsrs	r0, r1
   16d70:	1a71      	subs	r1, r6, r1
   16d72:	4666      	mov	r6, ip
   16d74:	408e      	lsls	r6, r1
   16d76:	0031      	movs	r1, r6
   16d78:	1e4e      	subs	r6, r1, #1
   16d7a:	41b1      	sbcs	r1, r6
   16d7c:	4301      	orrs	r1, r0
   16d7e:	185b      	adds	r3, r3, r1
   16d80:	0159      	lsls	r1, r3, #5
   16d82:	d5d3      	bpl.n	16d2c <__aeabi_fadd+0xd8>
   16d84:	3401      	adds	r4, #1
   16d86:	2cff      	cmp	r4, #255	; 0xff
   16d88:	d100      	bne.n	16d8c <__aeabi_fadd+0x138>
   16d8a:	e087      	b.n	16e9c <__aeabi_fadd+0x248>
   16d8c:	2201      	movs	r2, #1
   16d8e:	4978      	ldr	r1, [pc, #480]	; (16f70 <__aeabi_fadd+0x31c>)
   16d90:	401a      	ands	r2, r3
   16d92:	085b      	lsrs	r3, r3, #1
   16d94:	400b      	ands	r3, r1
   16d96:	4313      	orrs	r3, r2
   16d98:	e797      	b.n	16cca <__aeabi_fadd+0x76>
   16d9a:	2c00      	cmp	r4, #0
   16d9c:	d000      	beq.n	16da0 <__aeabi_fadd+0x14c>
   16d9e:	e0a7      	b.n	16ef0 <__aeabi_fadd+0x29c>
   16da0:	2b00      	cmp	r3, #0
   16da2:	d000      	beq.n	16da6 <__aeabi_fadd+0x152>
   16da4:	e0b6      	b.n	16f14 <__aeabi_fadd+0x2c0>
   16da6:	1e3b      	subs	r3, r7, #0
   16da8:	d162      	bne.n	16e70 <__aeabi_fadd+0x21c>
   16daa:	2600      	movs	r6, #0
   16dac:	2200      	movs	r2, #0
   16dae:	0273      	lsls	r3, r6, #9
   16db0:	0a5b      	lsrs	r3, r3, #9
   16db2:	b2e4      	uxtb	r4, r4
   16db4:	e79a      	b.n	16cec <__aeabi_fadd+0x98>
   16db6:	0014      	movs	r4, r2
   16db8:	e787      	b.n	16cca <__aeabi_fadd+0x76>
   16dba:	2f00      	cmp	r7, #0
   16dbc:	d04d      	beq.n	16e5a <__aeabi_fadd+0x206>
   16dbe:	1e48      	subs	r0, r1, #1
   16dc0:	2800      	cmp	r0, #0
   16dc2:	d157      	bne.n	16e74 <__aeabi_fadd+0x220>
   16dc4:	4463      	add	r3, ip
   16dc6:	2401      	movs	r4, #1
   16dc8:	015a      	lsls	r2, r3, #5
   16dca:	d5af      	bpl.n	16d2c <__aeabi_fadd+0xd8>
   16dcc:	2402      	movs	r4, #2
   16dce:	e7dd      	b.n	16d8c <__aeabi_fadd+0x138>
   16dd0:	2a00      	cmp	r2, #0
   16dd2:	d124      	bne.n	16e1e <__aeabi_fadd+0x1ca>
   16dd4:	1c62      	adds	r2, r4, #1
   16dd6:	b2d2      	uxtb	r2, r2
   16dd8:	2a01      	cmp	r2, #1
   16dda:	ddde      	ble.n	16d9a <__aeabi_fadd+0x146>
   16ddc:	1bde      	subs	r6, r3, r7
   16dde:	0172      	lsls	r2, r6, #5
   16de0:	d535      	bpl.n	16e4e <__aeabi_fadd+0x1fa>
   16de2:	1afe      	subs	r6, r7, r3
   16de4:	000d      	movs	r5, r1
   16de6:	e75c      	b.n	16ca2 <__aeabi_fadd+0x4e>
   16de8:	002a      	movs	r2, r5
   16dea:	2300      	movs	r3, #0
   16dec:	e77e      	b.n	16cec <__aeabi_fadd+0x98>
   16dee:	0033      	movs	r3, r6
   16df0:	4a60      	ldr	r2, [pc, #384]	; (16f74 <__aeabi_fadd+0x320>)
   16df2:	1a24      	subs	r4, r4, r0
   16df4:	4013      	ands	r3, r2
   16df6:	e768      	b.n	16cca <__aeabi_fadd+0x76>
   16df8:	2900      	cmp	r1, #0
   16dfa:	d163      	bne.n	16ec4 <__aeabi_fadd+0x270>
   16dfc:	1c61      	adds	r1, r4, #1
   16dfe:	b2c8      	uxtb	r0, r1
   16e00:	2801      	cmp	r0, #1
   16e02:	dd4e      	ble.n	16ea2 <__aeabi_fadd+0x24e>
   16e04:	29ff      	cmp	r1, #255	; 0xff
   16e06:	d049      	beq.n	16e9c <__aeabi_fadd+0x248>
   16e08:	4463      	add	r3, ip
   16e0a:	085b      	lsrs	r3, r3, #1
   16e0c:	000c      	movs	r4, r1
   16e0e:	e75c      	b.n	16cca <__aeabi_fadd+0x76>
   16e10:	2aff      	cmp	r2, #255	; 0xff
   16e12:	d041      	beq.n	16e98 <__aeabi_fadd+0x244>
   16e14:	000a      	movs	r2, r1
   16e16:	e779      	b.n	16d0c <__aeabi_fadd+0xb8>
   16e18:	2201      	movs	r2, #1
   16e1a:	1a9b      	subs	r3, r3, r2
   16e1c:	e784      	b.n	16d28 <__aeabi_fadd+0xd4>
   16e1e:	2c00      	cmp	r4, #0
   16e20:	d01d      	beq.n	16e5e <__aeabi_fadd+0x20a>
   16e22:	28ff      	cmp	r0, #255	; 0xff
   16e24:	d022      	beq.n	16e6c <__aeabi_fadd+0x218>
   16e26:	2480      	movs	r4, #128	; 0x80
   16e28:	04e4      	lsls	r4, r4, #19
   16e2a:	4252      	negs	r2, r2
   16e2c:	4323      	orrs	r3, r4
   16e2e:	2a1b      	cmp	r2, #27
   16e30:	dd00      	ble.n	16e34 <__aeabi_fadd+0x1e0>
   16e32:	e08a      	b.n	16f4a <__aeabi_fadd+0x2f6>
   16e34:	001c      	movs	r4, r3
   16e36:	2520      	movs	r5, #32
   16e38:	40d4      	lsrs	r4, r2
   16e3a:	1aaa      	subs	r2, r5, r2
   16e3c:	4093      	lsls	r3, r2
   16e3e:	1e5a      	subs	r2, r3, #1
   16e40:	4193      	sbcs	r3, r2
   16e42:	4323      	orrs	r3, r4
   16e44:	4662      	mov	r2, ip
   16e46:	0004      	movs	r4, r0
   16e48:	1ad3      	subs	r3, r2, r3
   16e4a:	000d      	movs	r5, r1
   16e4c:	e725      	b.n	16c9a <__aeabi_fadd+0x46>
   16e4e:	2e00      	cmp	r6, #0
   16e50:	d000      	beq.n	16e54 <__aeabi_fadd+0x200>
   16e52:	e726      	b.n	16ca2 <__aeabi_fadd+0x4e>
   16e54:	2200      	movs	r2, #0
   16e56:	2400      	movs	r4, #0
   16e58:	e7a9      	b.n	16dae <__aeabi_fadd+0x15a>
   16e5a:	000c      	movs	r4, r1
   16e5c:	e735      	b.n	16cca <__aeabi_fadd+0x76>
   16e5e:	2b00      	cmp	r3, #0
   16e60:	d04d      	beq.n	16efe <__aeabi_fadd+0x2aa>
   16e62:	43d2      	mvns	r2, r2
   16e64:	2a00      	cmp	r2, #0
   16e66:	d0ed      	beq.n	16e44 <__aeabi_fadd+0x1f0>
   16e68:	28ff      	cmp	r0, #255	; 0xff
   16e6a:	d1e0      	bne.n	16e2e <__aeabi_fadd+0x1da>
   16e6c:	4663      	mov	r3, ip
   16e6e:	24ff      	movs	r4, #255	; 0xff
   16e70:	000d      	movs	r5, r1
   16e72:	e72a      	b.n	16cca <__aeabi_fadd+0x76>
   16e74:	29ff      	cmp	r1, #255	; 0xff
   16e76:	d00f      	beq.n	16e98 <__aeabi_fadd+0x244>
   16e78:	0001      	movs	r1, r0
   16e7a:	e773      	b.n	16d64 <__aeabi_fadd+0x110>
   16e7c:	2b00      	cmp	r3, #0
   16e7e:	d061      	beq.n	16f44 <__aeabi_fadd+0x2f0>
   16e80:	24ff      	movs	r4, #255	; 0xff
   16e82:	2f00      	cmp	r7, #0
   16e84:	d100      	bne.n	16e88 <__aeabi_fadd+0x234>
   16e86:	e720      	b.n	16cca <__aeabi_fadd+0x76>
   16e88:	2280      	movs	r2, #128	; 0x80
   16e8a:	4641      	mov	r1, r8
   16e8c:	03d2      	lsls	r2, r2, #15
   16e8e:	4211      	tst	r1, r2
   16e90:	d002      	beq.n	16e98 <__aeabi_fadd+0x244>
   16e92:	4216      	tst	r6, r2
   16e94:	d100      	bne.n	16e98 <__aeabi_fadd+0x244>
   16e96:	003b      	movs	r3, r7
   16e98:	24ff      	movs	r4, #255	; 0xff
   16e9a:	e716      	b.n	16cca <__aeabi_fadd+0x76>
   16e9c:	24ff      	movs	r4, #255	; 0xff
   16e9e:	2300      	movs	r3, #0
   16ea0:	e724      	b.n	16cec <__aeabi_fadd+0x98>
   16ea2:	2c00      	cmp	r4, #0
   16ea4:	d1ea      	bne.n	16e7c <__aeabi_fadd+0x228>
   16ea6:	2b00      	cmp	r3, #0
   16ea8:	d058      	beq.n	16f5c <__aeabi_fadd+0x308>
   16eaa:	2f00      	cmp	r7, #0
   16eac:	d100      	bne.n	16eb0 <__aeabi_fadd+0x25c>
   16eae:	e70c      	b.n	16cca <__aeabi_fadd+0x76>
   16eb0:	4463      	add	r3, ip
   16eb2:	015a      	lsls	r2, r3, #5
   16eb4:	d400      	bmi.n	16eb8 <__aeabi_fadd+0x264>
   16eb6:	e739      	b.n	16d2c <__aeabi_fadd+0xd8>
   16eb8:	4a2e      	ldr	r2, [pc, #184]	; (16f74 <__aeabi_fadd+0x320>)
   16eba:	000c      	movs	r4, r1
   16ebc:	4013      	ands	r3, r2
   16ebe:	e704      	b.n	16cca <__aeabi_fadd+0x76>
   16ec0:	2101      	movs	r1, #1
   16ec2:	e75c      	b.n	16d7e <__aeabi_fadd+0x12a>
   16ec4:	2c00      	cmp	r4, #0
   16ec6:	d11e      	bne.n	16f06 <__aeabi_fadd+0x2b2>
   16ec8:	2b00      	cmp	r3, #0
   16eca:	d040      	beq.n	16f4e <__aeabi_fadd+0x2fa>
   16ecc:	43c9      	mvns	r1, r1
   16ece:	2900      	cmp	r1, #0
   16ed0:	d00b      	beq.n	16eea <__aeabi_fadd+0x296>
   16ed2:	28ff      	cmp	r0, #255	; 0xff
   16ed4:	d036      	beq.n	16f44 <__aeabi_fadd+0x2f0>
   16ed6:	291b      	cmp	r1, #27
   16ed8:	dc47      	bgt.n	16f6a <__aeabi_fadd+0x316>
   16eda:	001c      	movs	r4, r3
   16edc:	2620      	movs	r6, #32
   16ede:	40cc      	lsrs	r4, r1
   16ee0:	1a71      	subs	r1, r6, r1
   16ee2:	408b      	lsls	r3, r1
   16ee4:	1e59      	subs	r1, r3, #1
   16ee6:	418b      	sbcs	r3, r1
   16ee8:	4323      	orrs	r3, r4
   16eea:	4463      	add	r3, ip
   16eec:	0004      	movs	r4, r0
   16eee:	e747      	b.n	16d80 <__aeabi_fadd+0x12c>
   16ef0:	2b00      	cmp	r3, #0
   16ef2:	d118      	bne.n	16f26 <__aeabi_fadd+0x2d2>
   16ef4:	1e3b      	subs	r3, r7, #0
   16ef6:	d02d      	beq.n	16f54 <__aeabi_fadd+0x300>
   16ef8:	000d      	movs	r5, r1
   16efa:	24ff      	movs	r4, #255	; 0xff
   16efc:	e6e5      	b.n	16cca <__aeabi_fadd+0x76>
   16efe:	003b      	movs	r3, r7
   16f00:	0004      	movs	r4, r0
   16f02:	000d      	movs	r5, r1
   16f04:	e6e1      	b.n	16cca <__aeabi_fadd+0x76>
   16f06:	28ff      	cmp	r0, #255	; 0xff
   16f08:	d01c      	beq.n	16f44 <__aeabi_fadd+0x2f0>
   16f0a:	2480      	movs	r4, #128	; 0x80
   16f0c:	04e4      	lsls	r4, r4, #19
   16f0e:	4249      	negs	r1, r1
   16f10:	4323      	orrs	r3, r4
   16f12:	e7e0      	b.n	16ed6 <__aeabi_fadd+0x282>
   16f14:	2f00      	cmp	r7, #0
   16f16:	d100      	bne.n	16f1a <__aeabi_fadd+0x2c6>
   16f18:	e6d7      	b.n	16cca <__aeabi_fadd+0x76>
   16f1a:	1bde      	subs	r6, r3, r7
   16f1c:	0172      	lsls	r2, r6, #5
   16f1e:	d51f      	bpl.n	16f60 <__aeabi_fadd+0x30c>
   16f20:	1afb      	subs	r3, r7, r3
   16f22:	000d      	movs	r5, r1
   16f24:	e6d1      	b.n	16cca <__aeabi_fadd+0x76>
   16f26:	24ff      	movs	r4, #255	; 0xff
   16f28:	2f00      	cmp	r7, #0
   16f2a:	d100      	bne.n	16f2e <__aeabi_fadd+0x2da>
   16f2c:	e6cd      	b.n	16cca <__aeabi_fadd+0x76>
   16f2e:	2280      	movs	r2, #128	; 0x80
   16f30:	4640      	mov	r0, r8
   16f32:	03d2      	lsls	r2, r2, #15
   16f34:	4210      	tst	r0, r2
   16f36:	d0af      	beq.n	16e98 <__aeabi_fadd+0x244>
   16f38:	4216      	tst	r6, r2
   16f3a:	d1ad      	bne.n	16e98 <__aeabi_fadd+0x244>
   16f3c:	003b      	movs	r3, r7
   16f3e:	000d      	movs	r5, r1
   16f40:	24ff      	movs	r4, #255	; 0xff
   16f42:	e6c2      	b.n	16cca <__aeabi_fadd+0x76>
   16f44:	4663      	mov	r3, ip
   16f46:	24ff      	movs	r4, #255	; 0xff
   16f48:	e6bf      	b.n	16cca <__aeabi_fadd+0x76>
   16f4a:	2301      	movs	r3, #1
   16f4c:	e77a      	b.n	16e44 <__aeabi_fadd+0x1f0>
   16f4e:	003b      	movs	r3, r7
   16f50:	0004      	movs	r4, r0
   16f52:	e6ba      	b.n	16cca <__aeabi_fadd+0x76>
   16f54:	2680      	movs	r6, #128	; 0x80
   16f56:	2200      	movs	r2, #0
   16f58:	03f6      	lsls	r6, r6, #15
   16f5a:	e6f0      	b.n	16d3e <__aeabi_fadd+0xea>
   16f5c:	003b      	movs	r3, r7
   16f5e:	e6b4      	b.n	16cca <__aeabi_fadd+0x76>
   16f60:	1e33      	subs	r3, r6, #0
   16f62:	d000      	beq.n	16f66 <__aeabi_fadd+0x312>
   16f64:	e6e2      	b.n	16d2c <__aeabi_fadd+0xd8>
   16f66:	2200      	movs	r2, #0
   16f68:	e721      	b.n	16dae <__aeabi_fadd+0x15a>
   16f6a:	2301      	movs	r3, #1
   16f6c:	e7bd      	b.n	16eea <__aeabi_fadd+0x296>
   16f6e:	46c0      	nop			; (mov r8, r8)
   16f70:	7dffffff 	.word	0x7dffffff
   16f74:	fbffffff 	.word	0xfbffffff

00016f78 <__aeabi_fdiv>:
   16f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f7a:	4657      	mov	r7, sl
   16f7c:	464e      	mov	r6, r9
   16f7e:	46de      	mov	lr, fp
   16f80:	4645      	mov	r5, r8
   16f82:	b5e0      	push	{r5, r6, r7, lr}
   16f84:	0244      	lsls	r4, r0, #9
   16f86:	0043      	lsls	r3, r0, #1
   16f88:	0fc6      	lsrs	r6, r0, #31
   16f8a:	b083      	sub	sp, #12
   16f8c:	1c0f      	adds	r7, r1, #0
   16f8e:	0a64      	lsrs	r4, r4, #9
   16f90:	0e1b      	lsrs	r3, r3, #24
   16f92:	46b2      	mov	sl, r6
   16f94:	d053      	beq.n	1703e <__aeabi_fdiv+0xc6>
   16f96:	2bff      	cmp	r3, #255	; 0xff
   16f98:	d027      	beq.n	16fea <__aeabi_fdiv+0x72>
   16f9a:	2280      	movs	r2, #128	; 0x80
   16f9c:	00e4      	lsls	r4, r4, #3
   16f9e:	04d2      	lsls	r2, r2, #19
   16fa0:	4314      	orrs	r4, r2
   16fa2:	227f      	movs	r2, #127	; 0x7f
   16fa4:	4252      	negs	r2, r2
   16fa6:	4690      	mov	r8, r2
   16fa8:	4498      	add	r8, r3
   16faa:	2300      	movs	r3, #0
   16fac:	4699      	mov	r9, r3
   16fae:	469b      	mov	fp, r3
   16fb0:	027d      	lsls	r5, r7, #9
   16fb2:	0078      	lsls	r0, r7, #1
   16fb4:	0ffb      	lsrs	r3, r7, #31
   16fb6:	0a6d      	lsrs	r5, r5, #9
   16fb8:	0e00      	lsrs	r0, r0, #24
   16fba:	9300      	str	r3, [sp, #0]
   16fbc:	d024      	beq.n	17008 <__aeabi_fdiv+0x90>
   16fbe:	28ff      	cmp	r0, #255	; 0xff
   16fc0:	d046      	beq.n	17050 <__aeabi_fdiv+0xd8>
   16fc2:	2380      	movs	r3, #128	; 0x80
   16fc4:	2100      	movs	r1, #0
   16fc6:	00ed      	lsls	r5, r5, #3
   16fc8:	04db      	lsls	r3, r3, #19
   16fca:	431d      	orrs	r5, r3
   16fcc:	387f      	subs	r0, #127	; 0x7f
   16fce:	4647      	mov	r7, r8
   16fd0:	1a38      	subs	r0, r7, r0
   16fd2:	464f      	mov	r7, r9
   16fd4:	430f      	orrs	r7, r1
   16fd6:	00bf      	lsls	r7, r7, #2
   16fd8:	46b9      	mov	r9, r7
   16fda:	0033      	movs	r3, r6
   16fdc:	9a00      	ldr	r2, [sp, #0]
   16fde:	4f87      	ldr	r7, [pc, #540]	; (171fc <__aeabi_fdiv+0x284>)
   16fe0:	4053      	eors	r3, r2
   16fe2:	464a      	mov	r2, r9
   16fe4:	58ba      	ldr	r2, [r7, r2]
   16fe6:	9301      	str	r3, [sp, #4]
   16fe8:	4697      	mov	pc, r2
   16fea:	2c00      	cmp	r4, #0
   16fec:	d14e      	bne.n	1708c <__aeabi_fdiv+0x114>
   16fee:	2308      	movs	r3, #8
   16ff0:	4699      	mov	r9, r3
   16ff2:	33f7      	adds	r3, #247	; 0xf7
   16ff4:	4698      	mov	r8, r3
   16ff6:	3bfd      	subs	r3, #253	; 0xfd
   16ff8:	469b      	mov	fp, r3
   16ffa:	027d      	lsls	r5, r7, #9
   16ffc:	0078      	lsls	r0, r7, #1
   16ffe:	0ffb      	lsrs	r3, r7, #31
   17000:	0a6d      	lsrs	r5, r5, #9
   17002:	0e00      	lsrs	r0, r0, #24
   17004:	9300      	str	r3, [sp, #0]
   17006:	d1da      	bne.n	16fbe <__aeabi_fdiv+0x46>
   17008:	2d00      	cmp	r5, #0
   1700a:	d126      	bne.n	1705a <__aeabi_fdiv+0xe2>
   1700c:	2000      	movs	r0, #0
   1700e:	2101      	movs	r1, #1
   17010:	0033      	movs	r3, r6
   17012:	9a00      	ldr	r2, [sp, #0]
   17014:	4f7a      	ldr	r7, [pc, #488]	; (17200 <__aeabi_fdiv+0x288>)
   17016:	4053      	eors	r3, r2
   17018:	4642      	mov	r2, r8
   1701a:	1a10      	subs	r0, r2, r0
   1701c:	464a      	mov	r2, r9
   1701e:	430a      	orrs	r2, r1
   17020:	0092      	lsls	r2, r2, #2
   17022:	58ba      	ldr	r2, [r7, r2]
   17024:	001d      	movs	r5, r3
   17026:	4697      	mov	pc, r2
   17028:	9b00      	ldr	r3, [sp, #0]
   1702a:	002c      	movs	r4, r5
   1702c:	469a      	mov	sl, r3
   1702e:	468b      	mov	fp, r1
   17030:	465b      	mov	r3, fp
   17032:	2b02      	cmp	r3, #2
   17034:	d131      	bne.n	1709a <__aeabi_fdiv+0x122>
   17036:	4653      	mov	r3, sl
   17038:	21ff      	movs	r1, #255	; 0xff
   1703a:	2400      	movs	r4, #0
   1703c:	e038      	b.n	170b0 <__aeabi_fdiv+0x138>
   1703e:	2c00      	cmp	r4, #0
   17040:	d117      	bne.n	17072 <__aeabi_fdiv+0xfa>
   17042:	2304      	movs	r3, #4
   17044:	4699      	mov	r9, r3
   17046:	2300      	movs	r3, #0
   17048:	4698      	mov	r8, r3
   1704a:	3301      	adds	r3, #1
   1704c:	469b      	mov	fp, r3
   1704e:	e7af      	b.n	16fb0 <__aeabi_fdiv+0x38>
   17050:	20ff      	movs	r0, #255	; 0xff
   17052:	2d00      	cmp	r5, #0
   17054:	d10b      	bne.n	1706e <__aeabi_fdiv+0xf6>
   17056:	2102      	movs	r1, #2
   17058:	e7da      	b.n	17010 <__aeabi_fdiv+0x98>
   1705a:	0028      	movs	r0, r5
   1705c:	f002 fac8 	bl	195f0 <__clzsi2>
   17060:	1f43      	subs	r3, r0, #5
   17062:	409d      	lsls	r5, r3
   17064:	2376      	movs	r3, #118	; 0x76
   17066:	425b      	negs	r3, r3
   17068:	1a18      	subs	r0, r3, r0
   1706a:	2100      	movs	r1, #0
   1706c:	e7af      	b.n	16fce <__aeabi_fdiv+0x56>
   1706e:	2103      	movs	r1, #3
   17070:	e7ad      	b.n	16fce <__aeabi_fdiv+0x56>
   17072:	0020      	movs	r0, r4
   17074:	f002 fabc 	bl	195f0 <__clzsi2>
   17078:	1f43      	subs	r3, r0, #5
   1707a:	409c      	lsls	r4, r3
   1707c:	2376      	movs	r3, #118	; 0x76
   1707e:	425b      	negs	r3, r3
   17080:	1a1b      	subs	r3, r3, r0
   17082:	4698      	mov	r8, r3
   17084:	2300      	movs	r3, #0
   17086:	4699      	mov	r9, r3
   17088:	469b      	mov	fp, r3
   1708a:	e791      	b.n	16fb0 <__aeabi_fdiv+0x38>
   1708c:	230c      	movs	r3, #12
   1708e:	4699      	mov	r9, r3
   17090:	33f3      	adds	r3, #243	; 0xf3
   17092:	4698      	mov	r8, r3
   17094:	3bfc      	subs	r3, #252	; 0xfc
   17096:	469b      	mov	fp, r3
   17098:	e78a      	b.n	16fb0 <__aeabi_fdiv+0x38>
   1709a:	2b03      	cmp	r3, #3
   1709c:	d100      	bne.n	170a0 <__aeabi_fdiv+0x128>
   1709e:	e0a5      	b.n	171ec <__aeabi_fdiv+0x274>
   170a0:	4655      	mov	r5, sl
   170a2:	2b01      	cmp	r3, #1
   170a4:	d000      	beq.n	170a8 <__aeabi_fdiv+0x130>
   170a6:	e081      	b.n	171ac <__aeabi_fdiv+0x234>
   170a8:	2301      	movs	r3, #1
   170aa:	2100      	movs	r1, #0
   170ac:	2400      	movs	r4, #0
   170ae:	402b      	ands	r3, r5
   170b0:	0264      	lsls	r4, r4, #9
   170b2:	05c9      	lsls	r1, r1, #23
   170b4:	0a60      	lsrs	r0, r4, #9
   170b6:	07db      	lsls	r3, r3, #31
   170b8:	4308      	orrs	r0, r1
   170ba:	4318      	orrs	r0, r3
   170bc:	b003      	add	sp, #12
   170be:	bc3c      	pop	{r2, r3, r4, r5}
   170c0:	4690      	mov	r8, r2
   170c2:	4699      	mov	r9, r3
   170c4:	46a2      	mov	sl, r4
   170c6:	46ab      	mov	fp, r5
   170c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   170ca:	2480      	movs	r4, #128	; 0x80
   170cc:	2300      	movs	r3, #0
   170ce:	03e4      	lsls	r4, r4, #15
   170d0:	21ff      	movs	r1, #255	; 0xff
   170d2:	e7ed      	b.n	170b0 <__aeabi_fdiv+0x138>
   170d4:	21ff      	movs	r1, #255	; 0xff
   170d6:	2400      	movs	r4, #0
   170d8:	e7ea      	b.n	170b0 <__aeabi_fdiv+0x138>
   170da:	2301      	movs	r3, #1
   170dc:	1a59      	subs	r1, r3, r1
   170de:	291b      	cmp	r1, #27
   170e0:	dd66      	ble.n	171b0 <__aeabi_fdiv+0x238>
   170e2:	9a01      	ldr	r2, [sp, #4]
   170e4:	4013      	ands	r3, r2
   170e6:	2100      	movs	r1, #0
   170e8:	2400      	movs	r4, #0
   170ea:	e7e1      	b.n	170b0 <__aeabi_fdiv+0x138>
   170ec:	2380      	movs	r3, #128	; 0x80
   170ee:	03db      	lsls	r3, r3, #15
   170f0:	421c      	tst	r4, r3
   170f2:	d038      	beq.n	17166 <__aeabi_fdiv+0x1ee>
   170f4:	421d      	tst	r5, r3
   170f6:	d051      	beq.n	1719c <__aeabi_fdiv+0x224>
   170f8:	431c      	orrs	r4, r3
   170fa:	0264      	lsls	r4, r4, #9
   170fc:	0a64      	lsrs	r4, r4, #9
   170fe:	0033      	movs	r3, r6
   17100:	21ff      	movs	r1, #255	; 0xff
   17102:	e7d5      	b.n	170b0 <__aeabi_fdiv+0x138>
   17104:	0163      	lsls	r3, r4, #5
   17106:	016c      	lsls	r4, r5, #5
   17108:	42a3      	cmp	r3, r4
   1710a:	d23b      	bcs.n	17184 <__aeabi_fdiv+0x20c>
   1710c:	261b      	movs	r6, #27
   1710e:	2100      	movs	r1, #0
   17110:	3801      	subs	r0, #1
   17112:	2501      	movs	r5, #1
   17114:	001f      	movs	r7, r3
   17116:	0049      	lsls	r1, r1, #1
   17118:	005b      	lsls	r3, r3, #1
   1711a:	2f00      	cmp	r7, #0
   1711c:	db01      	blt.n	17122 <__aeabi_fdiv+0x1aa>
   1711e:	429c      	cmp	r4, r3
   17120:	d801      	bhi.n	17126 <__aeabi_fdiv+0x1ae>
   17122:	1b1b      	subs	r3, r3, r4
   17124:	4329      	orrs	r1, r5
   17126:	3e01      	subs	r6, #1
   17128:	2e00      	cmp	r6, #0
   1712a:	d1f3      	bne.n	17114 <__aeabi_fdiv+0x19c>
   1712c:	001c      	movs	r4, r3
   1712e:	1e63      	subs	r3, r4, #1
   17130:	419c      	sbcs	r4, r3
   17132:	430c      	orrs	r4, r1
   17134:	0001      	movs	r1, r0
   17136:	317f      	adds	r1, #127	; 0x7f
   17138:	2900      	cmp	r1, #0
   1713a:	ddce      	ble.n	170da <__aeabi_fdiv+0x162>
   1713c:	0763      	lsls	r3, r4, #29
   1713e:	d004      	beq.n	1714a <__aeabi_fdiv+0x1d2>
   17140:	230f      	movs	r3, #15
   17142:	4023      	ands	r3, r4
   17144:	2b04      	cmp	r3, #4
   17146:	d000      	beq.n	1714a <__aeabi_fdiv+0x1d2>
   17148:	3404      	adds	r4, #4
   1714a:	0123      	lsls	r3, r4, #4
   1714c:	d503      	bpl.n	17156 <__aeabi_fdiv+0x1de>
   1714e:	0001      	movs	r1, r0
   17150:	4b2c      	ldr	r3, [pc, #176]	; (17204 <__aeabi_fdiv+0x28c>)
   17152:	3180      	adds	r1, #128	; 0x80
   17154:	401c      	ands	r4, r3
   17156:	29fe      	cmp	r1, #254	; 0xfe
   17158:	dd0d      	ble.n	17176 <__aeabi_fdiv+0x1fe>
   1715a:	2301      	movs	r3, #1
   1715c:	9a01      	ldr	r2, [sp, #4]
   1715e:	21ff      	movs	r1, #255	; 0xff
   17160:	4013      	ands	r3, r2
   17162:	2400      	movs	r4, #0
   17164:	e7a4      	b.n	170b0 <__aeabi_fdiv+0x138>
   17166:	2380      	movs	r3, #128	; 0x80
   17168:	03db      	lsls	r3, r3, #15
   1716a:	431c      	orrs	r4, r3
   1716c:	0264      	lsls	r4, r4, #9
   1716e:	0a64      	lsrs	r4, r4, #9
   17170:	0033      	movs	r3, r6
   17172:	21ff      	movs	r1, #255	; 0xff
   17174:	e79c      	b.n	170b0 <__aeabi_fdiv+0x138>
   17176:	2301      	movs	r3, #1
   17178:	9a01      	ldr	r2, [sp, #4]
   1717a:	01a4      	lsls	r4, r4, #6
   1717c:	0a64      	lsrs	r4, r4, #9
   1717e:	b2c9      	uxtb	r1, r1
   17180:	4013      	ands	r3, r2
   17182:	e795      	b.n	170b0 <__aeabi_fdiv+0x138>
   17184:	1b1b      	subs	r3, r3, r4
   17186:	261a      	movs	r6, #26
   17188:	2101      	movs	r1, #1
   1718a:	e7c2      	b.n	17112 <__aeabi_fdiv+0x19a>
   1718c:	9b00      	ldr	r3, [sp, #0]
   1718e:	468b      	mov	fp, r1
   17190:	469a      	mov	sl, r3
   17192:	2400      	movs	r4, #0
   17194:	e74c      	b.n	17030 <__aeabi_fdiv+0xb8>
   17196:	0263      	lsls	r3, r4, #9
   17198:	d5e5      	bpl.n	17166 <__aeabi_fdiv+0x1ee>
   1719a:	2500      	movs	r5, #0
   1719c:	2480      	movs	r4, #128	; 0x80
   1719e:	03e4      	lsls	r4, r4, #15
   171a0:	432c      	orrs	r4, r5
   171a2:	0264      	lsls	r4, r4, #9
   171a4:	0a64      	lsrs	r4, r4, #9
   171a6:	9b00      	ldr	r3, [sp, #0]
   171a8:	21ff      	movs	r1, #255	; 0xff
   171aa:	e781      	b.n	170b0 <__aeabi_fdiv+0x138>
   171ac:	9501      	str	r5, [sp, #4]
   171ae:	e7c1      	b.n	17134 <__aeabi_fdiv+0x1bc>
   171b0:	0023      	movs	r3, r4
   171b2:	2020      	movs	r0, #32
   171b4:	40cb      	lsrs	r3, r1
   171b6:	1a41      	subs	r1, r0, r1
   171b8:	408c      	lsls	r4, r1
   171ba:	1e61      	subs	r1, r4, #1
   171bc:	418c      	sbcs	r4, r1
   171be:	431c      	orrs	r4, r3
   171c0:	0763      	lsls	r3, r4, #29
   171c2:	d004      	beq.n	171ce <__aeabi_fdiv+0x256>
   171c4:	230f      	movs	r3, #15
   171c6:	4023      	ands	r3, r4
   171c8:	2b04      	cmp	r3, #4
   171ca:	d000      	beq.n	171ce <__aeabi_fdiv+0x256>
   171cc:	3404      	adds	r4, #4
   171ce:	0163      	lsls	r3, r4, #5
   171d0:	d505      	bpl.n	171de <__aeabi_fdiv+0x266>
   171d2:	2301      	movs	r3, #1
   171d4:	9a01      	ldr	r2, [sp, #4]
   171d6:	2101      	movs	r1, #1
   171d8:	4013      	ands	r3, r2
   171da:	2400      	movs	r4, #0
   171dc:	e768      	b.n	170b0 <__aeabi_fdiv+0x138>
   171de:	2301      	movs	r3, #1
   171e0:	9a01      	ldr	r2, [sp, #4]
   171e2:	01a4      	lsls	r4, r4, #6
   171e4:	0a64      	lsrs	r4, r4, #9
   171e6:	4013      	ands	r3, r2
   171e8:	2100      	movs	r1, #0
   171ea:	e761      	b.n	170b0 <__aeabi_fdiv+0x138>
   171ec:	2380      	movs	r3, #128	; 0x80
   171ee:	03db      	lsls	r3, r3, #15
   171f0:	431c      	orrs	r4, r3
   171f2:	0264      	lsls	r4, r4, #9
   171f4:	0a64      	lsrs	r4, r4, #9
   171f6:	4653      	mov	r3, sl
   171f8:	21ff      	movs	r1, #255	; 0xff
   171fa:	e759      	b.n	170b0 <__aeabi_fdiv+0x138>
   171fc:	000203ac 	.word	0x000203ac
   17200:	000203ec 	.word	0x000203ec
   17204:	f7ffffff 	.word	0xf7ffffff

00017208 <__eqsf2>:
   17208:	b570      	push	{r4, r5, r6, lr}
   1720a:	0042      	lsls	r2, r0, #1
   1720c:	0245      	lsls	r5, r0, #9
   1720e:	024e      	lsls	r6, r1, #9
   17210:	004c      	lsls	r4, r1, #1
   17212:	0fc3      	lsrs	r3, r0, #31
   17214:	0a6d      	lsrs	r5, r5, #9
   17216:	0e12      	lsrs	r2, r2, #24
   17218:	0a76      	lsrs	r6, r6, #9
   1721a:	0e24      	lsrs	r4, r4, #24
   1721c:	0fc9      	lsrs	r1, r1, #31
   1721e:	2001      	movs	r0, #1
   17220:	2aff      	cmp	r2, #255	; 0xff
   17222:	d006      	beq.n	17232 <__eqsf2+0x2a>
   17224:	2cff      	cmp	r4, #255	; 0xff
   17226:	d003      	beq.n	17230 <__eqsf2+0x28>
   17228:	42a2      	cmp	r2, r4
   1722a:	d101      	bne.n	17230 <__eqsf2+0x28>
   1722c:	42b5      	cmp	r5, r6
   1722e:	d006      	beq.n	1723e <__eqsf2+0x36>
   17230:	bd70      	pop	{r4, r5, r6, pc}
   17232:	2d00      	cmp	r5, #0
   17234:	d1fc      	bne.n	17230 <__eqsf2+0x28>
   17236:	2cff      	cmp	r4, #255	; 0xff
   17238:	d1fa      	bne.n	17230 <__eqsf2+0x28>
   1723a:	2e00      	cmp	r6, #0
   1723c:	d1f8      	bne.n	17230 <__eqsf2+0x28>
   1723e:	428b      	cmp	r3, r1
   17240:	d006      	beq.n	17250 <__eqsf2+0x48>
   17242:	2001      	movs	r0, #1
   17244:	2a00      	cmp	r2, #0
   17246:	d1f3      	bne.n	17230 <__eqsf2+0x28>
   17248:	0028      	movs	r0, r5
   1724a:	1e45      	subs	r5, r0, #1
   1724c:	41a8      	sbcs	r0, r5
   1724e:	e7ef      	b.n	17230 <__eqsf2+0x28>
   17250:	2000      	movs	r0, #0
   17252:	e7ed      	b.n	17230 <__eqsf2+0x28>

00017254 <__gesf2>:
   17254:	b5f0      	push	{r4, r5, r6, r7, lr}
   17256:	0042      	lsls	r2, r0, #1
   17258:	0245      	lsls	r5, r0, #9
   1725a:	024c      	lsls	r4, r1, #9
   1725c:	0fc3      	lsrs	r3, r0, #31
   1725e:	0048      	lsls	r0, r1, #1
   17260:	0a6d      	lsrs	r5, r5, #9
   17262:	0e12      	lsrs	r2, r2, #24
   17264:	0a64      	lsrs	r4, r4, #9
   17266:	0e00      	lsrs	r0, r0, #24
   17268:	0fc9      	lsrs	r1, r1, #31
   1726a:	2aff      	cmp	r2, #255	; 0xff
   1726c:	d01e      	beq.n	172ac <__gesf2+0x58>
   1726e:	28ff      	cmp	r0, #255	; 0xff
   17270:	d021      	beq.n	172b6 <__gesf2+0x62>
   17272:	2a00      	cmp	r2, #0
   17274:	d10a      	bne.n	1728c <__gesf2+0x38>
   17276:	426e      	negs	r6, r5
   17278:	416e      	adcs	r6, r5
   1727a:	b2f6      	uxtb	r6, r6
   1727c:	2800      	cmp	r0, #0
   1727e:	d10f      	bne.n	172a0 <__gesf2+0x4c>
   17280:	2c00      	cmp	r4, #0
   17282:	d10d      	bne.n	172a0 <__gesf2+0x4c>
   17284:	2000      	movs	r0, #0
   17286:	2d00      	cmp	r5, #0
   17288:	d009      	beq.n	1729e <__gesf2+0x4a>
   1728a:	e005      	b.n	17298 <__gesf2+0x44>
   1728c:	2800      	cmp	r0, #0
   1728e:	d101      	bne.n	17294 <__gesf2+0x40>
   17290:	2c00      	cmp	r4, #0
   17292:	d001      	beq.n	17298 <__gesf2+0x44>
   17294:	428b      	cmp	r3, r1
   17296:	d011      	beq.n	172bc <__gesf2+0x68>
   17298:	2101      	movs	r1, #1
   1729a:	4258      	negs	r0, r3
   1729c:	4308      	orrs	r0, r1
   1729e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   172a0:	2e00      	cmp	r6, #0
   172a2:	d0f7      	beq.n	17294 <__gesf2+0x40>
   172a4:	2001      	movs	r0, #1
   172a6:	3901      	subs	r1, #1
   172a8:	4308      	orrs	r0, r1
   172aa:	e7f8      	b.n	1729e <__gesf2+0x4a>
   172ac:	2d00      	cmp	r5, #0
   172ae:	d0de      	beq.n	1726e <__gesf2+0x1a>
   172b0:	2002      	movs	r0, #2
   172b2:	4240      	negs	r0, r0
   172b4:	e7f3      	b.n	1729e <__gesf2+0x4a>
   172b6:	2c00      	cmp	r4, #0
   172b8:	d0db      	beq.n	17272 <__gesf2+0x1e>
   172ba:	e7f9      	b.n	172b0 <__gesf2+0x5c>
   172bc:	4282      	cmp	r2, r0
   172be:	dceb      	bgt.n	17298 <__gesf2+0x44>
   172c0:	db04      	blt.n	172cc <__gesf2+0x78>
   172c2:	42a5      	cmp	r5, r4
   172c4:	d8e8      	bhi.n	17298 <__gesf2+0x44>
   172c6:	2000      	movs	r0, #0
   172c8:	42a5      	cmp	r5, r4
   172ca:	d2e8      	bcs.n	1729e <__gesf2+0x4a>
   172cc:	2101      	movs	r1, #1
   172ce:	1e58      	subs	r0, r3, #1
   172d0:	4308      	orrs	r0, r1
   172d2:	e7e4      	b.n	1729e <__gesf2+0x4a>

000172d4 <__lesf2>:
   172d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   172d6:	0042      	lsls	r2, r0, #1
   172d8:	024d      	lsls	r5, r1, #9
   172da:	004c      	lsls	r4, r1, #1
   172dc:	0246      	lsls	r6, r0, #9
   172de:	0a76      	lsrs	r6, r6, #9
   172e0:	0e12      	lsrs	r2, r2, #24
   172e2:	0fc3      	lsrs	r3, r0, #31
   172e4:	0a6d      	lsrs	r5, r5, #9
   172e6:	0e24      	lsrs	r4, r4, #24
   172e8:	0fc9      	lsrs	r1, r1, #31
   172ea:	2aff      	cmp	r2, #255	; 0xff
   172ec:	d016      	beq.n	1731c <__lesf2+0x48>
   172ee:	2cff      	cmp	r4, #255	; 0xff
   172f0:	d018      	beq.n	17324 <__lesf2+0x50>
   172f2:	2a00      	cmp	r2, #0
   172f4:	d10a      	bne.n	1730c <__lesf2+0x38>
   172f6:	4270      	negs	r0, r6
   172f8:	4170      	adcs	r0, r6
   172fa:	b2c0      	uxtb	r0, r0
   172fc:	2c00      	cmp	r4, #0
   172fe:	d015      	beq.n	1732c <__lesf2+0x58>
   17300:	2800      	cmp	r0, #0
   17302:	d005      	beq.n	17310 <__lesf2+0x3c>
   17304:	2001      	movs	r0, #1
   17306:	3901      	subs	r1, #1
   17308:	4308      	orrs	r0, r1
   1730a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1730c:	2c00      	cmp	r4, #0
   1730e:	d013      	beq.n	17338 <__lesf2+0x64>
   17310:	4299      	cmp	r1, r3
   17312:	d014      	beq.n	1733e <__lesf2+0x6a>
   17314:	2001      	movs	r0, #1
   17316:	425b      	negs	r3, r3
   17318:	4318      	orrs	r0, r3
   1731a:	e7f6      	b.n	1730a <__lesf2+0x36>
   1731c:	2002      	movs	r0, #2
   1731e:	2e00      	cmp	r6, #0
   17320:	d1f3      	bne.n	1730a <__lesf2+0x36>
   17322:	e7e4      	b.n	172ee <__lesf2+0x1a>
   17324:	2002      	movs	r0, #2
   17326:	2d00      	cmp	r5, #0
   17328:	d1ef      	bne.n	1730a <__lesf2+0x36>
   1732a:	e7e2      	b.n	172f2 <__lesf2+0x1e>
   1732c:	2d00      	cmp	r5, #0
   1732e:	d1e7      	bne.n	17300 <__lesf2+0x2c>
   17330:	2000      	movs	r0, #0
   17332:	2e00      	cmp	r6, #0
   17334:	d0e9      	beq.n	1730a <__lesf2+0x36>
   17336:	e7ed      	b.n	17314 <__lesf2+0x40>
   17338:	2d00      	cmp	r5, #0
   1733a:	d1e9      	bne.n	17310 <__lesf2+0x3c>
   1733c:	e7ea      	b.n	17314 <__lesf2+0x40>
   1733e:	42a2      	cmp	r2, r4
   17340:	dc06      	bgt.n	17350 <__lesf2+0x7c>
   17342:	dbdf      	blt.n	17304 <__lesf2+0x30>
   17344:	42ae      	cmp	r6, r5
   17346:	d803      	bhi.n	17350 <__lesf2+0x7c>
   17348:	2000      	movs	r0, #0
   1734a:	42ae      	cmp	r6, r5
   1734c:	d3da      	bcc.n	17304 <__lesf2+0x30>
   1734e:	e7dc      	b.n	1730a <__lesf2+0x36>
   17350:	2001      	movs	r0, #1
   17352:	4249      	negs	r1, r1
   17354:	4308      	orrs	r0, r1
   17356:	e7d8      	b.n	1730a <__lesf2+0x36>

00017358 <__aeabi_fmul>:
   17358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1735a:	4657      	mov	r7, sl
   1735c:	464e      	mov	r6, r9
   1735e:	4645      	mov	r5, r8
   17360:	46de      	mov	lr, fp
   17362:	b5e0      	push	{r5, r6, r7, lr}
   17364:	0247      	lsls	r7, r0, #9
   17366:	0046      	lsls	r6, r0, #1
   17368:	4688      	mov	r8, r1
   1736a:	0a7f      	lsrs	r7, r7, #9
   1736c:	0e36      	lsrs	r6, r6, #24
   1736e:	0fc4      	lsrs	r4, r0, #31
   17370:	2e00      	cmp	r6, #0
   17372:	d047      	beq.n	17404 <__aeabi_fmul+0xac>
   17374:	2eff      	cmp	r6, #255	; 0xff
   17376:	d024      	beq.n	173c2 <__aeabi_fmul+0x6a>
   17378:	00fb      	lsls	r3, r7, #3
   1737a:	2780      	movs	r7, #128	; 0x80
   1737c:	04ff      	lsls	r7, r7, #19
   1737e:	431f      	orrs	r7, r3
   17380:	2300      	movs	r3, #0
   17382:	4699      	mov	r9, r3
   17384:	469a      	mov	sl, r3
   17386:	3e7f      	subs	r6, #127	; 0x7f
   17388:	4643      	mov	r3, r8
   1738a:	025d      	lsls	r5, r3, #9
   1738c:	0058      	lsls	r0, r3, #1
   1738e:	0fdb      	lsrs	r3, r3, #31
   17390:	0a6d      	lsrs	r5, r5, #9
   17392:	0e00      	lsrs	r0, r0, #24
   17394:	4698      	mov	r8, r3
   17396:	d043      	beq.n	17420 <__aeabi_fmul+0xc8>
   17398:	28ff      	cmp	r0, #255	; 0xff
   1739a:	d03b      	beq.n	17414 <__aeabi_fmul+0xbc>
   1739c:	00eb      	lsls	r3, r5, #3
   1739e:	2580      	movs	r5, #128	; 0x80
   173a0:	2200      	movs	r2, #0
   173a2:	04ed      	lsls	r5, r5, #19
   173a4:	431d      	orrs	r5, r3
   173a6:	387f      	subs	r0, #127	; 0x7f
   173a8:	1836      	adds	r6, r6, r0
   173aa:	1c73      	adds	r3, r6, #1
   173ac:	4641      	mov	r1, r8
   173ae:	469b      	mov	fp, r3
   173b0:	464b      	mov	r3, r9
   173b2:	4061      	eors	r1, r4
   173b4:	4313      	orrs	r3, r2
   173b6:	2b0f      	cmp	r3, #15
   173b8:	d864      	bhi.n	17484 <__aeabi_fmul+0x12c>
   173ba:	4875      	ldr	r0, [pc, #468]	; (17590 <__aeabi_fmul+0x238>)
   173bc:	009b      	lsls	r3, r3, #2
   173be:	58c3      	ldr	r3, [r0, r3]
   173c0:	469f      	mov	pc, r3
   173c2:	2f00      	cmp	r7, #0
   173c4:	d142      	bne.n	1744c <__aeabi_fmul+0xf4>
   173c6:	2308      	movs	r3, #8
   173c8:	4699      	mov	r9, r3
   173ca:	3b06      	subs	r3, #6
   173cc:	26ff      	movs	r6, #255	; 0xff
   173ce:	469a      	mov	sl, r3
   173d0:	e7da      	b.n	17388 <__aeabi_fmul+0x30>
   173d2:	4641      	mov	r1, r8
   173d4:	2a02      	cmp	r2, #2
   173d6:	d028      	beq.n	1742a <__aeabi_fmul+0xd2>
   173d8:	2a03      	cmp	r2, #3
   173da:	d100      	bne.n	173de <__aeabi_fmul+0x86>
   173dc:	e0ce      	b.n	1757c <__aeabi_fmul+0x224>
   173de:	2a01      	cmp	r2, #1
   173e0:	d000      	beq.n	173e4 <__aeabi_fmul+0x8c>
   173e2:	e0ac      	b.n	1753e <__aeabi_fmul+0x1e6>
   173e4:	4011      	ands	r1, r2
   173e6:	2000      	movs	r0, #0
   173e8:	2200      	movs	r2, #0
   173ea:	b2cc      	uxtb	r4, r1
   173ec:	0240      	lsls	r0, r0, #9
   173ee:	05d2      	lsls	r2, r2, #23
   173f0:	0a40      	lsrs	r0, r0, #9
   173f2:	07e4      	lsls	r4, r4, #31
   173f4:	4310      	orrs	r0, r2
   173f6:	4320      	orrs	r0, r4
   173f8:	bc3c      	pop	{r2, r3, r4, r5}
   173fa:	4690      	mov	r8, r2
   173fc:	4699      	mov	r9, r3
   173fe:	46a2      	mov	sl, r4
   17400:	46ab      	mov	fp, r5
   17402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17404:	2f00      	cmp	r7, #0
   17406:	d115      	bne.n	17434 <__aeabi_fmul+0xdc>
   17408:	2304      	movs	r3, #4
   1740a:	4699      	mov	r9, r3
   1740c:	3b03      	subs	r3, #3
   1740e:	2600      	movs	r6, #0
   17410:	469a      	mov	sl, r3
   17412:	e7b9      	b.n	17388 <__aeabi_fmul+0x30>
   17414:	20ff      	movs	r0, #255	; 0xff
   17416:	2202      	movs	r2, #2
   17418:	2d00      	cmp	r5, #0
   1741a:	d0c5      	beq.n	173a8 <__aeabi_fmul+0x50>
   1741c:	2203      	movs	r2, #3
   1741e:	e7c3      	b.n	173a8 <__aeabi_fmul+0x50>
   17420:	2d00      	cmp	r5, #0
   17422:	d119      	bne.n	17458 <__aeabi_fmul+0x100>
   17424:	2000      	movs	r0, #0
   17426:	2201      	movs	r2, #1
   17428:	e7be      	b.n	173a8 <__aeabi_fmul+0x50>
   1742a:	2401      	movs	r4, #1
   1742c:	22ff      	movs	r2, #255	; 0xff
   1742e:	400c      	ands	r4, r1
   17430:	2000      	movs	r0, #0
   17432:	e7db      	b.n	173ec <__aeabi_fmul+0x94>
   17434:	0038      	movs	r0, r7
   17436:	f002 f8db 	bl	195f0 <__clzsi2>
   1743a:	2676      	movs	r6, #118	; 0x76
   1743c:	1f43      	subs	r3, r0, #5
   1743e:	409f      	lsls	r7, r3
   17440:	2300      	movs	r3, #0
   17442:	4276      	negs	r6, r6
   17444:	1a36      	subs	r6, r6, r0
   17446:	4699      	mov	r9, r3
   17448:	469a      	mov	sl, r3
   1744a:	e79d      	b.n	17388 <__aeabi_fmul+0x30>
   1744c:	230c      	movs	r3, #12
   1744e:	4699      	mov	r9, r3
   17450:	3b09      	subs	r3, #9
   17452:	26ff      	movs	r6, #255	; 0xff
   17454:	469a      	mov	sl, r3
   17456:	e797      	b.n	17388 <__aeabi_fmul+0x30>
   17458:	0028      	movs	r0, r5
   1745a:	f002 f8c9 	bl	195f0 <__clzsi2>
   1745e:	1f43      	subs	r3, r0, #5
   17460:	409d      	lsls	r5, r3
   17462:	2376      	movs	r3, #118	; 0x76
   17464:	425b      	negs	r3, r3
   17466:	1a18      	subs	r0, r3, r0
   17468:	2200      	movs	r2, #0
   1746a:	e79d      	b.n	173a8 <__aeabi_fmul+0x50>
   1746c:	2080      	movs	r0, #128	; 0x80
   1746e:	2400      	movs	r4, #0
   17470:	03c0      	lsls	r0, r0, #15
   17472:	22ff      	movs	r2, #255	; 0xff
   17474:	e7ba      	b.n	173ec <__aeabi_fmul+0x94>
   17476:	003d      	movs	r5, r7
   17478:	4652      	mov	r2, sl
   1747a:	e7ab      	b.n	173d4 <__aeabi_fmul+0x7c>
   1747c:	003d      	movs	r5, r7
   1747e:	0021      	movs	r1, r4
   17480:	4652      	mov	r2, sl
   17482:	e7a7      	b.n	173d4 <__aeabi_fmul+0x7c>
   17484:	0c3b      	lsrs	r3, r7, #16
   17486:	469c      	mov	ip, r3
   17488:	042a      	lsls	r2, r5, #16
   1748a:	0c12      	lsrs	r2, r2, #16
   1748c:	0c2b      	lsrs	r3, r5, #16
   1748e:	0014      	movs	r4, r2
   17490:	4660      	mov	r0, ip
   17492:	4665      	mov	r5, ip
   17494:	043f      	lsls	r7, r7, #16
   17496:	0c3f      	lsrs	r7, r7, #16
   17498:	437c      	muls	r4, r7
   1749a:	4342      	muls	r2, r0
   1749c:	435d      	muls	r5, r3
   1749e:	437b      	muls	r3, r7
   174a0:	0c27      	lsrs	r7, r4, #16
   174a2:	189b      	adds	r3, r3, r2
   174a4:	18ff      	adds	r7, r7, r3
   174a6:	42ba      	cmp	r2, r7
   174a8:	d903      	bls.n	174b2 <__aeabi_fmul+0x15a>
   174aa:	2380      	movs	r3, #128	; 0x80
   174ac:	025b      	lsls	r3, r3, #9
   174ae:	469c      	mov	ip, r3
   174b0:	4465      	add	r5, ip
   174b2:	0424      	lsls	r4, r4, #16
   174b4:	043a      	lsls	r2, r7, #16
   174b6:	0c24      	lsrs	r4, r4, #16
   174b8:	1912      	adds	r2, r2, r4
   174ba:	0193      	lsls	r3, r2, #6
   174bc:	1e5c      	subs	r4, r3, #1
   174be:	41a3      	sbcs	r3, r4
   174c0:	0c3f      	lsrs	r7, r7, #16
   174c2:	0e92      	lsrs	r2, r2, #26
   174c4:	197d      	adds	r5, r7, r5
   174c6:	431a      	orrs	r2, r3
   174c8:	01ad      	lsls	r5, r5, #6
   174ca:	4315      	orrs	r5, r2
   174cc:	012b      	lsls	r3, r5, #4
   174ce:	d504      	bpl.n	174da <__aeabi_fmul+0x182>
   174d0:	2301      	movs	r3, #1
   174d2:	465e      	mov	r6, fp
   174d4:	086a      	lsrs	r2, r5, #1
   174d6:	401d      	ands	r5, r3
   174d8:	4315      	orrs	r5, r2
   174da:	0032      	movs	r2, r6
   174dc:	327f      	adds	r2, #127	; 0x7f
   174de:	2a00      	cmp	r2, #0
   174e0:	dd25      	ble.n	1752e <__aeabi_fmul+0x1d6>
   174e2:	076b      	lsls	r3, r5, #29
   174e4:	d004      	beq.n	174f0 <__aeabi_fmul+0x198>
   174e6:	230f      	movs	r3, #15
   174e8:	402b      	ands	r3, r5
   174ea:	2b04      	cmp	r3, #4
   174ec:	d000      	beq.n	174f0 <__aeabi_fmul+0x198>
   174ee:	3504      	adds	r5, #4
   174f0:	012b      	lsls	r3, r5, #4
   174f2:	d503      	bpl.n	174fc <__aeabi_fmul+0x1a4>
   174f4:	0032      	movs	r2, r6
   174f6:	4b27      	ldr	r3, [pc, #156]	; (17594 <__aeabi_fmul+0x23c>)
   174f8:	3280      	adds	r2, #128	; 0x80
   174fa:	401d      	ands	r5, r3
   174fc:	2afe      	cmp	r2, #254	; 0xfe
   174fe:	dc94      	bgt.n	1742a <__aeabi_fmul+0xd2>
   17500:	2401      	movs	r4, #1
   17502:	01a8      	lsls	r0, r5, #6
   17504:	0a40      	lsrs	r0, r0, #9
   17506:	b2d2      	uxtb	r2, r2
   17508:	400c      	ands	r4, r1
   1750a:	e76f      	b.n	173ec <__aeabi_fmul+0x94>
   1750c:	2080      	movs	r0, #128	; 0x80
   1750e:	03c0      	lsls	r0, r0, #15
   17510:	4207      	tst	r7, r0
   17512:	d007      	beq.n	17524 <__aeabi_fmul+0x1cc>
   17514:	4205      	tst	r5, r0
   17516:	d105      	bne.n	17524 <__aeabi_fmul+0x1cc>
   17518:	4328      	orrs	r0, r5
   1751a:	0240      	lsls	r0, r0, #9
   1751c:	0a40      	lsrs	r0, r0, #9
   1751e:	4644      	mov	r4, r8
   17520:	22ff      	movs	r2, #255	; 0xff
   17522:	e763      	b.n	173ec <__aeabi_fmul+0x94>
   17524:	4338      	orrs	r0, r7
   17526:	0240      	lsls	r0, r0, #9
   17528:	0a40      	lsrs	r0, r0, #9
   1752a:	22ff      	movs	r2, #255	; 0xff
   1752c:	e75e      	b.n	173ec <__aeabi_fmul+0x94>
   1752e:	2401      	movs	r4, #1
   17530:	1aa3      	subs	r3, r4, r2
   17532:	2b1b      	cmp	r3, #27
   17534:	dd05      	ble.n	17542 <__aeabi_fmul+0x1ea>
   17536:	400c      	ands	r4, r1
   17538:	2200      	movs	r2, #0
   1753a:	2000      	movs	r0, #0
   1753c:	e756      	b.n	173ec <__aeabi_fmul+0x94>
   1753e:	465e      	mov	r6, fp
   17540:	e7cb      	b.n	174da <__aeabi_fmul+0x182>
   17542:	002a      	movs	r2, r5
   17544:	2020      	movs	r0, #32
   17546:	40da      	lsrs	r2, r3
   17548:	1ac3      	subs	r3, r0, r3
   1754a:	409d      	lsls	r5, r3
   1754c:	002b      	movs	r3, r5
   1754e:	1e5d      	subs	r5, r3, #1
   17550:	41ab      	sbcs	r3, r5
   17552:	4313      	orrs	r3, r2
   17554:	075a      	lsls	r2, r3, #29
   17556:	d004      	beq.n	17562 <__aeabi_fmul+0x20a>
   17558:	220f      	movs	r2, #15
   1755a:	401a      	ands	r2, r3
   1755c:	2a04      	cmp	r2, #4
   1755e:	d000      	beq.n	17562 <__aeabi_fmul+0x20a>
   17560:	3304      	adds	r3, #4
   17562:	015a      	lsls	r2, r3, #5
   17564:	d504      	bpl.n	17570 <__aeabi_fmul+0x218>
   17566:	2401      	movs	r4, #1
   17568:	2201      	movs	r2, #1
   1756a:	400c      	ands	r4, r1
   1756c:	2000      	movs	r0, #0
   1756e:	e73d      	b.n	173ec <__aeabi_fmul+0x94>
   17570:	2401      	movs	r4, #1
   17572:	019b      	lsls	r3, r3, #6
   17574:	0a58      	lsrs	r0, r3, #9
   17576:	400c      	ands	r4, r1
   17578:	2200      	movs	r2, #0
   1757a:	e737      	b.n	173ec <__aeabi_fmul+0x94>
   1757c:	2080      	movs	r0, #128	; 0x80
   1757e:	2401      	movs	r4, #1
   17580:	03c0      	lsls	r0, r0, #15
   17582:	4328      	orrs	r0, r5
   17584:	0240      	lsls	r0, r0, #9
   17586:	0a40      	lsrs	r0, r0, #9
   17588:	400c      	ands	r4, r1
   1758a:	22ff      	movs	r2, #255	; 0xff
   1758c:	e72e      	b.n	173ec <__aeabi_fmul+0x94>
   1758e:	46c0      	nop			; (mov r8, r8)
   17590:	0002042c 	.word	0x0002042c
   17594:	f7ffffff 	.word	0xf7ffffff

00017598 <__aeabi_fsub>:
   17598:	b5f0      	push	{r4, r5, r6, r7, lr}
   1759a:	464f      	mov	r7, r9
   1759c:	46d6      	mov	lr, sl
   1759e:	4646      	mov	r6, r8
   175a0:	0044      	lsls	r4, r0, #1
   175a2:	b5c0      	push	{r6, r7, lr}
   175a4:	0fc2      	lsrs	r2, r0, #31
   175a6:	0247      	lsls	r7, r0, #9
   175a8:	0248      	lsls	r0, r1, #9
   175aa:	0a40      	lsrs	r0, r0, #9
   175ac:	4684      	mov	ip, r0
   175ae:	4666      	mov	r6, ip
   175b0:	0a7b      	lsrs	r3, r7, #9
   175b2:	0048      	lsls	r0, r1, #1
   175b4:	0fc9      	lsrs	r1, r1, #31
   175b6:	469a      	mov	sl, r3
   175b8:	0e24      	lsrs	r4, r4, #24
   175ba:	0015      	movs	r5, r2
   175bc:	00db      	lsls	r3, r3, #3
   175be:	0e00      	lsrs	r0, r0, #24
   175c0:	4689      	mov	r9, r1
   175c2:	00f6      	lsls	r6, r6, #3
   175c4:	28ff      	cmp	r0, #255	; 0xff
   175c6:	d100      	bne.n	175ca <__aeabi_fsub+0x32>
   175c8:	e08f      	b.n	176ea <__aeabi_fsub+0x152>
   175ca:	2101      	movs	r1, #1
   175cc:	464f      	mov	r7, r9
   175ce:	404f      	eors	r7, r1
   175d0:	0039      	movs	r1, r7
   175d2:	4291      	cmp	r1, r2
   175d4:	d066      	beq.n	176a4 <__aeabi_fsub+0x10c>
   175d6:	1a22      	subs	r2, r4, r0
   175d8:	2a00      	cmp	r2, #0
   175da:	dc00      	bgt.n	175de <__aeabi_fsub+0x46>
   175dc:	e09d      	b.n	1771a <__aeabi_fsub+0x182>
   175de:	2800      	cmp	r0, #0
   175e0:	d13d      	bne.n	1765e <__aeabi_fsub+0xc6>
   175e2:	2e00      	cmp	r6, #0
   175e4:	d100      	bne.n	175e8 <__aeabi_fsub+0x50>
   175e6:	e08b      	b.n	17700 <__aeabi_fsub+0x168>
   175e8:	1e51      	subs	r1, r2, #1
   175ea:	2900      	cmp	r1, #0
   175ec:	d000      	beq.n	175f0 <__aeabi_fsub+0x58>
   175ee:	e0b5      	b.n	1775c <__aeabi_fsub+0x1c4>
   175f0:	2401      	movs	r4, #1
   175f2:	1b9b      	subs	r3, r3, r6
   175f4:	015a      	lsls	r2, r3, #5
   175f6:	d544      	bpl.n	17682 <__aeabi_fsub+0xea>
   175f8:	019b      	lsls	r3, r3, #6
   175fa:	099f      	lsrs	r7, r3, #6
   175fc:	0038      	movs	r0, r7
   175fe:	f001 fff7 	bl	195f0 <__clzsi2>
   17602:	3805      	subs	r0, #5
   17604:	4087      	lsls	r7, r0
   17606:	4284      	cmp	r4, r0
   17608:	dd00      	ble.n	1760c <__aeabi_fsub+0x74>
   1760a:	e096      	b.n	1773a <__aeabi_fsub+0x1a2>
   1760c:	1b04      	subs	r4, r0, r4
   1760e:	003a      	movs	r2, r7
   17610:	2020      	movs	r0, #32
   17612:	3401      	adds	r4, #1
   17614:	40e2      	lsrs	r2, r4
   17616:	1b04      	subs	r4, r0, r4
   17618:	40a7      	lsls	r7, r4
   1761a:	003b      	movs	r3, r7
   1761c:	1e5f      	subs	r7, r3, #1
   1761e:	41bb      	sbcs	r3, r7
   17620:	2400      	movs	r4, #0
   17622:	4313      	orrs	r3, r2
   17624:	075a      	lsls	r2, r3, #29
   17626:	d004      	beq.n	17632 <__aeabi_fsub+0x9a>
   17628:	220f      	movs	r2, #15
   1762a:	401a      	ands	r2, r3
   1762c:	2a04      	cmp	r2, #4
   1762e:	d000      	beq.n	17632 <__aeabi_fsub+0x9a>
   17630:	3304      	adds	r3, #4
   17632:	015a      	lsls	r2, r3, #5
   17634:	d527      	bpl.n	17686 <__aeabi_fsub+0xee>
   17636:	3401      	adds	r4, #1
   17638:	2cff      	cmp	r4, #255	; 0xff
   1763a:	d100      	bne.n	1763e <__aeabi_fsub+0xa6>
   1763c:	e079      	b.n	17732 <__aeabi_fsub+0x19a>
   1763e:	2201      	movs	r2, #1
   17640:	019b      	lsls	r3, r3, #6
   17642:	0a5b      	lsrs	r3, r3, #9
   17644:	b2e4      	uxtb	r4, r4
   17646:	402a      	ands	r2, r5
   17648:	025b      	lsls	r3, r3, #9
   1764a:	05e4      	lsls	r4, r4, #23
   1764c:	0a58      	lsrs	r0, r3, #9
   1764e:	07d2      	lsls	r2, r2, #31
   17650:	4320      	orrs	r0, r4
   17652:	4310      	orrs	r0, r2
   17654:	bc1c      	pop	{r2, r3, r4}
   17656:	4690      	mov	r8, r2
   17658:	4699      	mov	r9, r3
   1765a:	46a2      	mov	sl, r4
   1765c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1765e:	2cff      	cmp	r4, #255	; 0xff
   17660:	d0e0      	beq.n	17624 <__aeabi_fsub+0x8c>
   17662:	2180      	movs	r1, #128	; 0x80
   17664:	04c9      	lsls	r1, r1, #19
   17666:	430e      	orrs	r6, r1
   17668:	2a1b      	cmp	r2, #27
   1766a:	dc7b      	bgt.n	17764 <__aeabi_fsub+0x1cc>
   1766c:	0031      	movs	r1, r6
   1766e:	2020      	movs	r0, #32
   17670:	40d1      	lsrs	r1, r2
   17672:	1a82      	subs	r2, r0, r2
   17674:	4096      	lsls	r6, r2
   17676:	1e72      	subs	r2, r6, #1
   17678:	4196      	sbcs	r6, r2
   1767a:	430e      	orrs	r6, r1
   1767c:	1b9b      	subs	r3, r3, r6
   1767e:	015a      	lsls	r2, r3, #5
   17680:	d4ba      	bmi.n	175f8 <__aeabi_fsub+0x60>
   17682:	075a      	lsls	r2, r3, #29
   17684:	d1d0      	bne.n	17628 <__aeabi_fsub+0x90>
   17686:	2201      	movs	r2, #1
   17688:	08df      	lsrs	r7, r3, #3
   1768a:	402a      	ands	r2, r5
   1768c:	2cff      	cmp	r4, #255	; 0xff
   1768e:	d133      	bne.n	176f8 <__aeabi_fsub+0x160>
   17690:	2f00      	cmp	r7, #0
   17692:	d100      	bne.n	17696 <__aeabi_fsub+0xfe>
   17694:	e0a8      	b.n	177e8 <__aeabi_fsub+0x250>
   17696:	2380      	movs	r3, #128	; 0x80
   17698:	03db      	lsls	r3, r3, #15
   1769a:	433b      	orrs	r3, r7
   1769c:	025b      	lsls	r3, r3, #9
   1769e:	0a5b      	lsrs	r3, r3, #9
   176a0:	24ff      	movs	r4, #255	; 0xff
   176a2:	e7d1      	b.n	17648 <__aeabi_fsub+0xb0>
   176a4:	1a21      	subs	r1, r4, r0
   176a6:	2900      	cmp	r1, #0
   176a8:	dd4c      	ble.n	17744 <__aeabi_fsub+0x1ac>
   176aa:	2800      	cmp	r0, #0
   176ac:	d02a      	beq.n	17704 <__aeabi_fsub+0x16c>
   176ae:	2cff      	cmp	r4, #255	; 0xff
   176b0:	d0b8      	beq.n	17624 <__aeabi_fsub+0x8c>
   176b2:	2080      	movs	r0, #128	; 0x80
   176b4:	04c0      	lsls	r0, r0, #19
   176b6:	4306      	orrs	r6, r0
   176b8:	291b      	cmp	r1, #27
   176ba:	dd00      	ble.n	176be <__aeabi_fsub+0x126>
   176bc:	e0af      	b.n	1781e <__aeabi_fsub+0x286>
   176be:	0030      	movs	r0, r6
   176c0:	2720      	movs	r7, #32
   176c2:	40c8      	lsrs	r0, r1
   176c4:	1a79      	subs	r1, r7, r1
   176c6:	408e      	lsls	r6, r1
   176c8:	1e71      	subs	r1, r6, #1
   176ca:	418e      	sbcs	r6, r1
   176cc:	4306      	orrs	r6, r0
   176ce:	199b      	adds	r3, r3, r6
   176d0:	0159      	lsls	r1, r3, #5
   176d2:	d5d6      	bpl.n	17682 <__aeabi_fsub+0xea>
   176d4:	3401      	adds	r4, #1
   176d6:	2cff      	cmp	r4, #255	; 0xff
   176d8:	d100      	bne.n	176dc <__aeabi_fsub+0x144>
   176da:	e085      	b.n	177e8 <__aeabi_fsub+0x250>
   176dc:	2201      	movs	r2, #1
   176de:	497a      	ldr	r1, [pc, #488]	; (178c8 <__aeabi_fsub+0x330>)
   176e0:	401a      	ands	r2, r3
   176e2:	085b      	lsrs	r3, r3, #1
   176e4:	400b      	ands	r3, r1
   176e6:	4313      	orrs	r3, r2
   176e8:	e79c      	b.n	17624 <__aeabi_fsub+0x8c>
   176ea:	2e00      	cmp	r6, #0
   176ec:	d000      	beq.n	176f0 <__aeabi_fsub+0x158>
   176ee:	e770      	b.n	175d2 <__aeabi_fsub+0x3a>
   176f0:	e76b      	b.n	175ca <__aeabi_fsub+0x32>
   176f2:	1e3b      	subs	r3, r7, #0
   176f4:	d1c5      	bne.n	17682 <__aeabi_fsub+0xea>
   176f6:	2200      	movs	r2, #0
   176f8:	027b      	lsls	r3, r7, #9
   176fa:	0a5b      	lsrs	r3, r3, #9
   176fc:	b2e4      	uxtb	r4, r4
   176fe:	e7a3      	b.n	17648 <__aeabi_fsub+0xb0>
   17700:	0014      	movs	r4, r2
   17702:	e78f      	b.n	17624 <__aeabi_fsub+0x8c>
   17704:	2e00      	cmp	r6, #0
   17706:	d04d      	beq.n	177a4 <__aeabi_fsub+0x20c>
   17708:	1e48      	subs	r0, r1, #1
   1770a:	2800      	cmp	r0, #0
   1770c:	d157      	bne.n	177be <__aeabi_fsub+0x226>
   1770e:	199b      	adds	r3, r3, r6
   17710:	2401      	movs	r4, #1
   17712:	015a      	lsls	r2, r3, #5
   17714:	d5b5      	bpl.n	17682 <__aeabi_fsub+0xea>
   17716:	2402      	movs	r4, #2
   17718:	e7e0      	b.n	176dc <__aeabi_fsub+0x144>
   1771a:	2a00      	cmp	r2, #0
   1771c:	d125      	bne.n	1776a <__aeabi_fsub+0x1d2>
   1771e:	1c62      	adds	r2, r4, #1
   17720:	b2d2      	uxtb	r2, r2
   17722:	2a01      	cmp	r2, #1
   17724:	dd72      	ble.n	1780c <__aeabi_fsub+0x274>
   17726:	1b9f      	subs	r7, r3, r6
   17728:	017a      	lsls	r2, r7, #5
   1772a:	d535      	bpl.n	17798 <__aeabi_fsub+0x200>
   1772c:	1af7      	subs	r7, r6, r3
   1772e:	000d      	movs	r5, r1
   17730:	e764      	b.n	175fc <__aeabi_fsub+0x64>
   17732:	2201      	movs	r2, #1
   17734:	2300      	movs	r3, #0
   17736:	402a      	ands	r2, r5
   17738:	e786      	b.n	17648 <__aeabi_fsub+0xb0>
   1773a:	003b      	movs	r3, r7
   1773c:	4a63      	ldr	r2, [pc, #396]	; (178cc <__aeabi_fsub+0x334>)
   1773e:	1a24      	subs	r4, r4, r0
   17740:	4013      	ands	r3, r2
   17742:	e76f      	b.n	17624 <__aeabi_fsub+0x8c>
   17744:	2900      	cmp	r1, #0
   17746:	d16c      	bne.n	17822 <__aeabi_fsub+0x28a>
   17748:	1c61      	adds	r1, r4, #1
   1774a:	b2c8      	uxtb	r0, r1
   1774c:	2801      	cmp	r0, #1
   1774e:	dd4e      	ble.n	177ee <__aeabi_fsub+0x256>
   17750:	29ff      	cmp	r1, #255	; 0xff
   17752:	d049      	beq.n	177e8 <__aeabi_fsub+0x250>
   17754:	199b      	adds	r3, r3, r6
   17756:	085b      	lsrs	r3, r3, #1
   17758:	000c      	movs	r4, r1
   1775a:	e763      	b.n	17624 <__aeabi_fsub+0x8c>
   1775c:	2aff      	cmp	r2, #255	; 0xff
   1775e:	d041      	beq.n	177e4 <__aeabi_fsub+0x24c>
   17760:	000a      	movs	r2, r1
   17762:	e781      	b.n	17668 <__aeabi_fsub+0xd0>
   17764:	2601      	movs	r6, #1
   17766:	1b9b      	subs	r3, r3, r6
   17768:	e789      	b.n	1767e <__aeabi_fsub+0xe6>
   1776a:	2c00      	cmp	r4, #0
   1776c:	d01c      	beq.n	177a8 <__aeabi_fsub+0x210>
   1776e:	28ff      	cmp	r0, #255	; 0xff
   17770:	d021      	beq.n	177b6 <__aeabi_fsub+0x21e>
   17772:	2480      	movs	r4, #128	; 0x80
   17774:	04e4      	lsls	r4, r4, #19
   17776:	4252      	negs	r2, r2
   17778:	4323      	orrs	r3, r4
   1777a:	2a1b      	cmp	r2, #27
   1777c:	dd00      	ble.n	17780 <__aeabi_fsub+0x1e8>
   1777e:	e096      	b.n	178ae <__aeabi_fsub+0x316>
   17780:	001c      	movs	r4, r3
   17782:	2520      	movs	r5, #32
   17784:	40d4      	lsrs	r4, r2
   17786:	1aaa      	subs	r2, r5, r2
   17788:	4093      	lsls	r3, r2
   1778a:	1e5a      	subs	r2, r3, #1
   1778c:	4193      	sbcs	r3, r2
   1778e:	4323      	orrs	r3, r4
   17790:	1af3      	subs	r3, r6, r3
   17792:	0004      	movs	r4, r0
   17794:	000d      	movs	r5, r1
   17796:	e72d      	b.n	175f4 <__aeabi_fsub+0x5c>
   17798:	2f00      	cmp	r7, #0
   1779a:	d000      	beq.n	1779e <__aeabi_fsub+0x206>
   1779c:	e72e      	b.n	175fc <__aeabi_fsub+0x64>
   1779e:	2200      	movs	r2, #0
   177a0:	2400      	movs	r4, #0
   177a2:	e7a9      	b.n	176f8 <__aeabi_fsub+0x160>
   177a4:	000c      	movs	r4, r1
   177a6:	e73d      	b.n	17624 <__aeabi_fsub+0x8c>
   177a8:	2b00      	cmp	r3, #0
   177aa:	d058      	beq.n	1785e <__aeabi_fsub+0x2c6>
   177ac:	43d2      	mvns	r2, r2
   177ae:	2a00      	cmp	r2, #0
   177b0:	d0ee      	beq.n	17790 <__aeabi_fsub+0x1f8>
   177b2:	28ff      	cmp	r0, #255	; 0xff
   177b4:	d1e1      	bne.n	1777a <__aeabi_fsub+0x1e2>
   177b6:	0033      	movs	r3, r6
   177b8:	24ff      	movs	r4, #255	; 0xff
   177ba:	000d      	movs	r5, r1
   177bc:	e732      	b.n	17624 <__aeabi_fsub+0x8c>
   177be:	29ff      	cmp	r1, #255	; 0xff
   177c0:	d010      	beq.n	177e4 <__aeabi_fsub+0x24c>
   177c2:	0001      	movs	r1, r0
   177c4:	e778      	b.n	176b8 <__aeabi_fsub+0x120>
   177c6:	2b00      	cmp	r3, #0
   177c8:	d06e      	beq.n	178a8 <__aeabi_fsub+0x310>
   177ca:	24ff      	movs	r4, #255	; 0xff
   177cc:	2e00      	cmp	r6, #0
   177ce:	d100      	bne.n	177d2 <__aeabi_fsub+0x23a>
   177d0:	e728      	b.n	17624 <__aeabi_fsub+0x8c>
   177d2:	2280      	movs	r2, #128	; 0x80
   177d4:	4651      	mov	r1, sl
   177d6:	03d2      	lsls	r2, r2, #15
   177d8:	4211      	tst	r1, r2
   177da:	d003      	beq.n	177e4 <__aeabi_fsub+0x24c>
   177dc:	4661      	mov	r1, ip
   177de:	4211      	tst	r1, r2
   177e0:	d100      	bne.n	177e4 <__aeabi_fsub+0x24c>
   177e2:	0033      	movs	r3, r6
   177e4:	24ff      	movs	r4, #255	; 0xff
   177e6:	e71d      	b.n	17624 <__aeabi_fsub+0x8c>
   177e8:	24ff      	movs	r4, #255	; 0xff
   177ea:	2300      	movs	r3, #0
   177ec:	e72c      	b.n	17648 <__aeabi_fsub+0xb0>
   177ee:	2c00      	cmp	r4, #0
   177f0:	d1e9      	bne.n	177c6 <__aeabi_fsub+0x22e>
   177f2:	2b00      	cmp	r3, #0
   177f4:	d063      	beq.n	178be <__aeabi_fsub+0x326>
   177f6:	2e00      	cmp	r6, #0
   177f8:	d100      	bne.n	177fc <__aeabi_fsub+0x264>
   177fa:	e713      	b.n	17624 <__aeabi_fsub+0x8c>
   177fc:	199b      	adds	r3, r3, r6
   177fe:	015a      	lsls	r2, r3, #5
   17800:	d400      	bmi.n	17804 <__aeabi_fsub+0x26c>
   17802:	e73e      	b.n	17682 <__aeabi_fsub+0xea>
   17804:	4a31      	ldr	r2, [pc, #196]	; (178cc <__aeabi_fsub+0x334>)
   17806:	000c      	movs	r4, r1
   17808:	4013      	ands	r3, r2
   1780a:	e70b      	b.n	17624 <__aeabi_fsub+0x8c>
   1780c:	2c00      	cmp	r4, #0
   1780e:	d11e      	bne.n	1784e <__aeabi_fsub+0x2b6>
   17810:	2b00      	cmp	r3, #0
   17812:	d12f      	bne.n	17874 <__aeabi_fsub+0x2dc>
   17814:	2e00      	cmp	r6, #0
   17816:	d04f      	beq.n	178b8 <__aeabi_fsub+0x320>
   17818:	0033      	movs	r3, r6
   1781a:	000d      	movs	r5, r1
   1781c:	e702      	b.n	17624 <__aeabi_fsub+0x8c>
   1781e:	2601      	movs	r6, #1
   17820:	e755      	b.n	176ce <__aeabi_fsub+0x136>
   17822:	2c00      	cmp	r4, #0
   17824:	d11f      	bne.n	17866 <__aeabi_fsub+0x2ce>
   17826:	2b00      	cmp	r3, #0
   17828:	d043      	beq.n	178b2 <__aeabi_fsub+0x31a>
   1782a:	43c9      	mvns	r1, r1
   1782c:	2900      	cmp	r1, #0
   1782e:	d00b      	beq.n	17848 <__aeabi_fsub+0x2b0>
   17830:	28ff      	cmp	r0, #255	; 0xff
   17832:	d039      	beq.n	178a8 <__aeabi_fsub+0x310>
   17834:	291b      	cmp	r1, #27
   17836:	dc44      	bgt.n	178c2 <__aeabi_fsub+0x32a>
   17838:	001c      	movs	r4, r3
   1783a:	2720      	movs	r7, #32
   1783c:	40cc      	lsrs	r4, r1
   1783e:	1a79      	subs	r1, r7, r1
   17840:	408b      	lsls	r3, r1
   17842:	1e59      	subs	r1, r3, #1
   17844:	418b      	sbcs	r3, r1
   17846:	4323      	orrs	r3, r4
   17848:	199b      	adds	r3, r3, r6
   1784a:	0004      	movs	r4, r0
   1784c:	e740      	b.n	176d0 <__aeabi_fsub+0x138>
   1784e:	2b00      	cmp	r3, #0
   17850:	d11a      	bne.n	17888 <__aeabi_fsub+0x2f0>
   17852:	2e00      	cmp	r6, #0
   17854:	d124      	bne.n	178a0 <__aeabi_fsub+0x308>
   17856:	2780      	movs	r7, #128	; 0x80
   17858:	2200      	movs	r2, #0
   1785a:	03ff      	lsls	r7, r7, #15
   1785c:	e71b      	b.n	17696 <__aeabi_fsub+0xfe>
   1785e:	0033      	movs	r3, r6
   17860:	0004      	movs	r4, r0
   17862:	000d      	movs	r5, r1
   17864:	e6de      	b.n	17624 <__aeabi_fsub+0x8c>
   17866:	28ff      	cmp	r0, #255	; 0xff
   17868:	d01e      	beq.n	178a8 <__aeabi_fsub+0x310>
   1786a:	2480      	movs	r4, #128	; 0x80
   1786c:	04e4      	lsls	r4, r4, #19
   1786e:	4249      	negs	r1, r1
   17870:	4323      	orrs	r3, r4
   17872:	e7df      	b.n	17834 <__aeabi_fsub+0x29c>
   17874:	2e00      	cmp	r6, #0
   17876:	d100      	bne.n	1787a <__aeabi_fsub+0x2e2>
   17878:	e6d4      	b.n	17624 <__aeabi_fsub+0x8c>
   1787a:	1b9f      	subs	r7, r3, r6
   1787c:	017a      	lsls	r2, r7, #5
   1787e:	d400      	bmi.n	17882 <__aeabi_fsub+0x2ea>
   17880:	e737      	b.n	176f2 <__aeabi_fsub+0x15a>
   17882:	1af3      	subs	r3, r6, r3
   17884:	000d      	movs	r5, r1
   17886:	e6cd      	b.n	17624 <__aeabi_fsub+0x8c>
   17888:	24ff      	movs	r4, #255	; 0xff
   1788a:	2e00      	cmp	r6, #0
   1788c:	d100      	bne.n	17890 <__aeabi_fsub+0x2f8>
   1788e:	e6c9      	b.n	17624 <__aeabi_fsub+0x8c>
   17890:	2280      	movs	r2, #128	; 0x80
   17892:	4650      	mov	r0, sl
   17894:	03d2      	lsls	r2, r2, #15
   17896:	4210      	tst	r0, r2
   17898:	d0a4      	beq.n	177e4 <__aeabi_fsub+0x24c>
   1789a:	4660      	mov	r0, ip
   1789c:	4210      	tst	r0, r2
   1789e:	d1a1      	bne.n	177e4 <__aeabi_fsub+0x24c>
   178a0:	0033      	movs	r3, r6
   178a2:	000d      	movs	r5, r1
   178a4:	24ff      	movs	r4, #255	; 0xff
   178a6:	e6bd      	b.n	17624 <__aeabi_fsub+0x8c>
   178a8:	0033      	movs	r3, r6
   178aa:	24ff      	movs	r4, #255	; 0xff
   178ac:	e6ba      	b.n	17624 <__aeabi_fsub+0x8c>
   178ae:	2301      	movs	r3, #1
   178b0:	e76e      	b.n	17790 <__aeabi_fsub+0x1f8>
   178b2:	0033      	movs	r3, r6
   178b4:	0004      	movs	r4, r0
   178b6:	e6b5      	b.n	17624 <__aeabi_fsub+0x8c>
   178b8:	2700      	movs	r7, #0
   178ba:	2200      	movs	r2, #0
   178bc:	e71c      	b.n	176f8 <__aeabi_fsub+0x160>
   178be:	0033      	movs	r3, r6
   178c0:	e6b0      	b.n	17624 <__aeabi_fsub+0x8c>
   178c2:	2301      	movs	r3, #1
   178c4:	e7c0      	b.n	17848 <__aeabi_fsub+0x2b0>
   178c6:	46c0      	nop			; (mov r8, r8)
   178c8:	7dffffff 	.word	0x7dffffff
   178cc:	fbffffff 	.word	0xfbffffff

000178d0 <__aeabi_f2iz>:
   178d0:	0241      	lsls	r1, r0, #9
   178d2:	0043      	lsls	r3, r0, #1
   178d4:	0fc2      	lsrs	r2, r0, #31
   178d6:	0a49      	lsrs	r1, r1, #9
   178d8:	0e1b      	lsrs	r3, r3, #24
   178da:	2000      	movs	r0, #0
   178dc:	2b7e      	cmp	r3, #126	; 0x7e
   178de:	dd0d      	ble.n	178fc <__aeabi_f2iz+0x2c>
   178e0:	2b9d      	cmp	r3, #157	; 0x9d
   178e2:	dc0c      	bgt.n	178fe <__aeabi_f2iz+0x2e>
   178e4:	2080      	movs	r0, #128	; 0x80
   178e6:	0400      	lsls	r0, r0, #16
   178e8:	4301      	orrs	r1, r0
   178ea:	2b95      	cmp	r3, #149	; 0x95
   178ec:	dc0a      	bgt.n	17904 <__aeabi_f2iz+0x34>
   178ee:	2096      	movs	r0, #150	; 0x96
   178f0:	1ac3      	subs	r3, r0, r3
   178f2:	40d9      	lsrs	r1, r3
   178f4:	4248      	negs	r0, r1
   178f6:	2a00      	cmp	r2, #0
   178f8:	d100      	bne.n	178fc <__aeabi_f2iz+0x2c>
   178fa:	0008      	movs	r0, r1
   178fc:	4770      	bx	lr
   178fe:	4b03      	ldr	r3, [pc, #12]	; (1790c <__aeabi_f2iz+0x3c>)
   17900:	18d0      	adds	r0, r2, r3
   17902:	e7fb      	b.n	178fc <__aeabi_f2iz+0x2c>
   17904:	3b96      	subs	r3, #150	; 0x96
   17906:	4099      	lsls	r1, r3
   17908:	e7f4      	b.n	178f4 <__aeabi_f2iz+0x24>
   1790a:	46c0      	nop			; (mov r8, r8)
   1790c:	7fffffff 	.word	0x7fffffff

00017910 <__aeabi_i2f>:
   17910:	b570      	push	{r4, r5, r6, lr}
   17912:	2800      	cmp	r0, #0
   17914:	d030      	beq.n	17978 <__aeabi_i2f+0x68>
   17916:	17c3      	asrs	r3, r0, #31
   17918:	18c4      	adds	r4, r0, r3
   1791a:	405c      	eors	r4, r3
   1791c:	0fc5      	lsrs	r5, r0, #31
   1791e:	0020      	movs	r0, r4
   17920:	f001 fe66 	bl	195f0 <__clzsi2>
   17924:	239e      	movs	r3, #158	; 0x9e
   17926:	1a1b      	subs	r3, r3, r0
   17928:	2b96      	cmp	r3, #150	; 0x96
   1792a:	dc0d      	bgt.n	17948 <__aeabi_i2f+0x38>
   1792c:	2296      	movs	r2, #150	; 0x96
   1792e:	1ad2      	subs	r2, r2, r3
   17930:	4094      	lsls	r4, r2
   17932:	002a      	movs	r2, r5
   17934:	0264      	lsls	r4, r4, #9
   17936:	0a64      	lsrs	r4, r4, #9
   17938:	b2db      	uxtb	r3, r3
   1793a:	0264      	lsls	r4, r4, #9
   1793c:	05db      	lsls	r3, r3, #23
   1793e:	0a60      	lsrs	r0, r4, #9
   17940:	07d2      	lsls	r2, r2, #31
   17942:	4318      	orrs	r0, r3
   17944:	4310      	orrs	r0, r2
   17946:	bd70      	pop	{r4, r5, r6, pc}
   17948:	2b99      	cmp	r3, #153	; 0x99
   1794a:	dc19      	bgt.n	17980 <__aeabi_i2f+0x70>
   1794c:	2299      	movs	r2, #153	; 0x99
   1794e:	1ad2      	subs	r2, r2, r3
   17950:	2a00      	cmp	r2, #0
   17952:	dd29      	ble.n	179a8 <__aeabi_i2f+0x98>
   17954:	4094      	lsls	r4, r2
   17956:	0022      	movs	r2, r4
   17958:	4c14      	ldr	r4, [pc, #80]	; (179ac <__aeabi_i2f+0x9c>)
   1795a:	4014      	ands	r4, r2
   1795c:	0751      	lsls	r1, r2, #29
   1795e:	d004      	beq.n	1796a <__aeabi_i2f+0x5a>
   17960:	210f      	movs	r1, #15
   17962:	400a      	ands	r2, r1
   17964:	2a04      	cmp	r2, #4
   17966:	d000      	beq.n	1796a <__aeabi_i2f+0x5a>
   17968:	3404      	adds	r4, #4
   1796a:	0162      	lsls	r2, r4, #5
   1796c:	d413      	bmi.n	17996 <__aeabi_i2f+0x86>
   1796e:	01a4      	lsls	r4, r4, #6
   17970:	0a64      	lsrs	r4, r4, #9
   17972:	b2db      	uxtb	r3, r3
   17974:	002a      	movs	r2, r5
   17976:	e7e0      	b.n	1793a <__aeabi_i2f+0x2a>
   17978:	2200      	movs	r2, #0
   1797a:	2300      	movs	r3, #0
   1797c:	2400      	movs	r4, #0
   1797e:	e7dc      	b.n	1793a <__aeabi_i2f+0x2a>
   17980:	2205      	movs	r2, #5
   17982:	0021      	movs	r1, r4
   17984:	1a12      	subs	r2, r2, r0
   17986:	40d1      	lsrs	r1, r2
   17988:	22b9      	movs	r2, #185	; 0xb9
   1798a:	1ad2      	subs	r2, r2, r3
   1798c:	4094      	lsls	r4, r2
   1798e:	1e62      	subs	r2, r4, #1
   17990:	4194      	sbcs	r4, r2
   17992:	430c      	orrs	r4, r1
   17994:	e7da      	b.n	1794c <__aeabi_i2f+0x3c>
   17996:	4b05      	ldr	r3, [pc, #20]	; (179ac <__aeabi_i2f+0x9c>)
   17998:	002a      	movs	r2, r5
   1799a:	401c      	ands	r4, r3
   1799c:	239f      	movs	r3, #159	; 0x9f
   1799e:	01a4      	lsls	r4, r4, #6
   179a0:	1a1b      	subs	r3, r3, r0
   179a2:	0a64      	lsrs	r4, r4, #9
   179a4:	b2db      	uxtb	r3, r3
   179a6:	e7c8      	b.n	1793a <__aeabi_i2f+0x2a>
   179a8:	0022      	movs	r2, r4
   179aa:	e7d5      	b.n	17958 <__aeabi_i2f+0x48>
   179ac:	fbffffff 	.word	0xfbffffff

000179b0 <__aeabi_ui2f>:
   179b0:	b510      	push	{r4, lr}
   179b2:	1e04      	subs	r4, r0, #0
   179b4:	d027      	beq.n	17a06 <__aeabi_ui2f+0x56>
   179b6:	f001 fe1b 	bl	195f0 <__clzsi2>
   179ba:	239e      	movs	r3, #158	; 0x9e
   179bc:	1a1b      	subs	r3, r3, r0
   179be:	2b96      	cmp	r3, #150	; 0x96
   179c0:	dc0a      	bgt.n	179d8 <__aeabi_ui2f+0x28>
   179c2:	2296      	movs	r2, #150	; 0x96
   179c4:	1ad2      	subs	r2, r2, r3
   179c6:	4094      	lsls	r4, r2
   179c8:	0264      	lsls	r4, r4, #9
   179ca:	0a64      	lsrs	r4, r4, #9
   179cc:	b2db      	uxtb	r3, r3
   179ce:	0264      	lsls	r4, r4, #9
   179d0:	05db      	lsls	r3, r3, #23
   179d2:	0a60      	lsrs	r0, r4, #9
   179d4:	4318      	orrs	r0, r3
   179d6:	bd10      	pop	{r4, pc}
   179d8:	2b99      	cmp	r3, #153	; 0x99
   179da:	dc17      	bgt.n	17a0c <__aeabi_ui2f+0x5c>
   179dc:	2299      	movs	r2, #153	; 0x99
   179de:	1ad2      	subs	r2, r2, r3
   179e0:	2a00      	cmp	r2, #0
   179e2:	dd27      	ble.n	17a34 <__aeabi_ui2f+0x84>
   179e4:	4094      	lsls	r4, r2
   179e6:	0022      	movs	r2, r4
   179e8:	4c13      	ldr	r4, [pc, #76]	; (17a38 <__aeabi_ui2f+0x88>)
   179ea:	4014      	ands	r4, r2
   179ec:	0751      	lsls	r1, r2, #29
   179ee:	d004      	beq.n	179fa <__aeabi_ui2f+0x4a>
   179f0:	210f      	movs	r1, #15
   179f2:	400a      	ands	r2, r1
   179f4:	2a04      	cmp	r2, #4
   179f6:	d000      	beq.n	179fa <__aeabi_ui2f+0x4a>
   179f8:	3404      	adds	r4, #4
   179fa:	0162      	lsls	r2, r4, #5
   179fc:	d412      	bmi.n	17a24 <__aeabi_ui2f+0x74>
   179fe:	01a4      	lsls	r4, r4, #6
   17a00:	0a64      	lsrs	r4, r4, #9
   17a02:	b2db      	uxtb	r3, r3
   17a04:	e7e3      	b.n	179ce <__aeabi_ui2f+0x1e>
   17a06:	2300      	movs	r3, #0
   17a08:	2400      	movs	r4, #0
   17a0a:	e7e0      	b.n	179ce <__aeabi_ui2f+0x1e>
   17a0c:	22b9      	movs	r2, #185	; 0xb9
   17a0e:	0021      	movs	r1, r4
   17a10:	1ad2      	subs	r2, r2, r3
   17a12:	4091      	lsls	r1, r2
   17a14:	000a      	movs	r2, r1
   17a16:	1e51      	subs	r1, r2, #1
   17a18:	418a      	sbcs	r2, r1
   17a1a:	2105      	movs	r1, #5
   17a1c:	1a09      	subs	r1, r1, r0
   17a1e:	40cc      	lsrs	r4, r1
   17a20:	4314      	orrs	r4, r2
   17a22:	e7db      	b.n	179dc <__aeabi_ui2f+0x2c>
   17a24:	4b04      	ldr	r3, [pc, #16]	; (17a38 <__aeabi_ui2f+0x88>)
   17a26:	401c      	ands	r4, r3
   17a28:	239f      	movs	r3, #159	; 0x9f
   17a2a:	01a4      	lsls	r4, r4, #6
   17a2c:	1a1b      	subs	r3, r3, r0
   17a2e:	0a64      	lsrs	r4, r4, #9
   17a30:	b2db      	uxtb	r3, r3
   17a32:	e7cc      	b.n	179ce <__aeabi_ui2f+0x1e>
   17a34:	0022      	movs	r2, r4
   17a36:	e7d7      	b.n	179e8 <__aeabi_ui2f+0x38>
   17a38:	fbffffff 	.word	0xfbffffff

00017a3c <__aeabi_dadd>:
   17a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17a3e:	4645      	mov	r5, r8
   17a40:	46de      	mov	lr, fp
   17a42:	4657      	mov	r7, sl
   17a44:	464e      	mov	r6, r9
   17a46:	030c      	lsls	r4, r1, #12
   17a48:	b5e0      	push	{r5, r6, r7, lr}
   17a4a:	004e      	lsls	r6, r1, #1
   17a4c:	0fc9      	lsrs	r1, r1, #31
   17a4e:	4688      	mov	r8, r1
   17a50:	000d      	movs	r5, r1
   17a52:	0a61      	lsrs	r1, r4, #9
   17a54:	0f44      	lsrs	r4, r0, #29
   17a56:	430c      	orrs	r4, r1
   17a58:	00c7      	lsls	r7, r0, #3
   17a5a:	0319      	lsls	r1, r3, #12
   17a5c:	0058      	lsls	r0, r3, #1
   17a5e:	0fdb      	lsrs	r3, r3, #31
   17a60:	469b      	mov	fp, r3
   17a62:	0a4b      	lsrs	r3, r1, #9
   17a64:	0f51      	lsrs	r1, r2, #29
   17a66:	430b      	orrs	r3, r1
   17a68:	0d76      	lsrs	r6, r6, #21
   17a6a:	0d40      	lsrs	r0, r0, #21
   17a6c:	0019      	movs	r1, r3
   17a6e:	00d2      	lsls	r2, r2, #3
   17a70:	45d8      	cmp	r8, fp
   17a72:	d100      	bne.n	17a76 <__aeabi_dadd+0x3a>
   17a74:	e0ae      	b.n	17bd4 <__aeabi_dadd+0x198>
   17a76:	1a35      	subs	r5, r6, r0
   17a78:	2d00      	cmp	r5, #0
   17a7a:	dc00      	bgt.n	17a7e <__aeabi_dadd+0x42>
   17a7c:	e0f6      	b.n	17c6c <__aeabi_dadd+0x230>
   17a7e:	2800      	cmp	r0, #0
   17a80:	d10f      	bne.n	17aa2 <__aeabi_dadd+0x66>
   17a82:	4313      	orrs	r3, r2
   17a84:	d100      	bne.n	17a88 <__aeabi_dadd+0x4c>
   17a86:	e0db      	b.n	17c40 <__aeabi_dadd+0x204>
   17a88:	1e6b      	subs	r3, r5, #1
   17a8a:	2b00      	cmp	r3, #0
   17a8c:	d000      	beq.n	17a90 <__aeabi_dadd+0x54>
   17a8e:	e137      	b.n	17d00 <__aeabi_dadd+0x2c4>
   17a90:	1aba      	subs	r2, r7, r2
   17a92:	4297      	cmp	r7, r2
   17a94:	41bf      	sbcs	r7, r7
   17a96:	1a64      	subs	r4, r4, r1
   17a98:	427f      	negs	r7, r7
   17a9a:	1be4      	subs	r4, r4, r7
   17a9c:	2601      	movs	r6, #1
   17a9e:	0017      	movs	r7, r2
   17aa0:	e024      	b.n	17aec <__aeabi_dadd+0xb0>
   17aa2:	4bc6      	ldr	r3, [pc, #792]	; (17dbc <__aeabi_dadd+0x380>)
   17aa4:	429e      	cmp	r6, r3
   17aa6:	d04d      	beq.n	17b44 <__aeabi_dadd+0x108>
   17aa8:	2380      	movs	r3, #128	; 0x80
   17aaa:	041b      	lsls	r3, r3, #16
   17aac:	4319      	orrs	r1, r3
   17aae:	2d38      	cmp	r5, #56	; 0x38
   17ab0:	dd00      	ble.n	17ab4 <__aeabi_dadd+0x78>
   17ab2:	e107      	b.n	17cc4 <__aeabi_dadd+0x288>
   17ab4:	2d1f      	cmp	r5, #31
   17ab6:	dd00      	ble.n	17aba <__aeabi_dadd+0x7e>
   17ab8:	e138      	b.n	17d2c <__aeabi_dadd+0x2f0>
   17aba:	2020      	movs	r0, #32
   17abc:	1b43      	subs	r3, r0, r5
   17abe:	469a      	mov	sl, r3
   17ac0:	000b      	movs	r3, r1
   17ac2:	4650      	mov	r0, sl
   17ac4:	4083      	lsls	r3, r0
   17ac6:	4699      	mov	r9, r3
   17ac8:	0013      	movs	r3, r2
   17aca:	4648      	mov	r0, r9
   17acc:	40eb      	lsrs	r3, r5
   17ace:	4318      	orrs	r0, r3
   17ad0:	0003      	movs	r3, r0
   17ad2:	4650      	mov	r0, sl
   17ad4:	4082      	lsls	r2, r0
   17ad6:	1e50      	subs	r0, r2, #1
   17ad8:	4182      	sbcs	r2, r0
   17ada:	40e9      	lsrs	r1, r5
   17adc:	431a      	orrs	r2, r3
   17ade:	1aba      	subs	r2, r7, r2
   17ae0:	1a61      	subs	r1, r4, r1
   17ae2:	4297      	cmp	r7, r2
   17ae4:	41a4      	sbcs	r4, r4
   17ae6:	0017      	movs	r7, r2
   17ae8:	4264      	negs	r4, r4
   17aea:	1b0c      	subs	r4, r1, r4
   17aec:	0223      	lsls	r3, r4, #8
   17aee:	d562      	bpl.n	17bb6 <__aeabi_dadd+0x17a>
   17af0:	0264      	lsls	r4, r4, #9
   17af2:	0a65      	lsrs	r5, r4, #9
   17af4:	2d00      	cmp	r5, #0
   17af6:	d100      	bne.n	17afa <__aeabi_dadd+0xbe>
   17af8:	e0df      	b.n	17cba <__aeabi_dadd+0x27e>
   17afa:	0028      	movs	r0, r5
   17afc:	f001 fd78 	bl	195f0 <__clzsi2>
   17b00:	0003      	movs	r3, r0
   17b02:	3b08      	subs	r3, #8
   17b04:	2b1f      	cmp	r3, #31
   17b06:	dd00      	ble.n	17b0a <__aeabi_dadd+0xce>
   17b08:	e0d2      	b.n	17cb0 <__aeabi_dadd+0x274>
   17b0a:	2220      	movs	r2, #32
   17b0c:	003c      	movs	r4, r7
   17b0e:	1ad2      	subs	r2, r2, r3
   17b10:	409d      	lsls	r5, r3
   17b12:	40d4      	lsrs	r4, r2
   17b14:	409f      	lsls	r7, r3
   17b16:	4325      	orrs	r5, r4
   17b18:	429e      	cmp	r6, r3
   17b1a:	dd00      	ble.n	17b1e <__aeabi_dadd+0xe2>
   17b1c:	e0c4      	b.n	17ca8 <__aeabi_dadd+0x26c>
   17b1e:	1b9e      	subs	r6, r3, r6
   17b20:	1c73      	adds	r3, r6, #1
   17b22:	2b1f      	cmp	r3, #31
   17b24:	dd00      	ble.n	17b28 <__aeabi_dadd+0xec>
   17b26:	e0f1      	b.n	17d0c <__aeabi_dadd+0x2d0>
   17b28:	2220      	movs	r2, #32
   17b2a:	0038      	movs	r0, r7
   17b2c:	0029      	movs	r1, r5
   17b2e:	1ad2      	subs	r2, r2, r3
   17b30:	40d8      	lsrs	r0, r3
   17b32:	4091      	lsls	r1, r2
   17b34:	4097      	lsls	r7, r2
   17b36:	002c      	movs	r4, r5
   17b38:	4301      	orrs	r1, r0
   17b3a:	1e78      	subs	r0, r7, #1
   17b3c:	4187      	sbcs	r7, r0
   17b3e:	40dc      	lsrs	r4, r3
   17b40:	2600      	movs	r6, #0
   17b42:	430f      	orrs	r7, r1
   17b44:	077b      	lsls	r3, r7, #29
   17b46:	d009      	beq.n	17b5c <__aeabi_dadd+0x120>
   17b48:	230f      	movs	r3, #15
   17b4a:	403b      	ands	r3, r7
   17b4c:	2b04      	cmp	r3, #4
   17b4e:	d005      	beq.n	17b5c <__aeabi_dadd+0x120>
   17b50:	1d3b      	adds	r3, r7, #4
   17b52:	42bb      	cmp	r3, r7
   17b54:	41bf      	sbcs	r7, r7
   17b56:	427f      	negs	r7, r7
   17b58:	19e4      	adds	r4, r4, r7
   17b5a:	001f      	movs	r7, r3
   17b5c:	0223      	lsls	r3, r4, #8
   17b5e:	d52c      	bpl.n	17bba <__aeabi_dadd+0x17e>
   17b60:	4b96      	ldr	r3, [pc, #600]	; (17dbc <__aeabi_dadd+0x380>)
   17b62:	3601      	adds	r6, #1
   17b64:	429e      	cmp	r6, r3
   17b66:	d100      	bne.n	17b6a <__aeabi_dadd+0x12e>
   17b68:	e09a      	b.n	17ca0 <__aeabi_dadd+0x264>
   17b6a:	4645      	mov	r5, r8
   17b6c:	4b94      	ldr	r3, [pc, #592]	; (17dc0 <__aeabi_dadd+0x384>)
   17b6e:	08ff      	lsrs	r7, r7, #3
   17b70:	401c      	ands	r4, r3
   17b72:	0760      	lsls	r0, r4, #29
   17b74:	0576      	lsls	r6, r6, #21
   17b76:	0264      	lsls	r4, r4, #9
   17b78:	4307      	orrs	r7, r0
   17b7a:	0b24      	lsrs	r4, r4, #12
   17b7c:	0d76      	lsrs	r6, r6, #21
   17b7e:	2100      	movs	r1, #0
   17b80:	0324      	lsls	r4, r4, #12
   17b82:	0b23      	lsrs	r3, r4, #12
   17b84:	0d0c      	lsrs	r4, r1, #20
   17b86:	4a8f      	ldr	r2, [pc, #572]	; (17dc4 <__aeabi_dadd+0x388>)
   17b88:	0524      	lsls	r4, r4, #20
   17b8a:	431c      	orrs	r4, r3
   17b8c:	4014      	ands	r4, r2
   17b8e:	0533      	lsls	r3, r6, #20
   17b90:	4323      	orrs	r3, r4
   17b92:	005b      	lsls	r3, r3, #1
   17b94:	07ed      	lsls	r5, r5, #31
   17b96:	085b      	lsrs	r3, r3, #1
   17b98:	432b      	orrs	r3, r5
   17b9a:	0038      	movs	r0, r7
   17b9c:	0019      	movs	r1, r3
   17b9e:	bc3c      	pop	{r2, r3, r4, r5}
   17ba0:	4690      	mov	r8, r2
   17ba2:	4699      	mov	r9, r3
   17ba4:	46a2      	mov	sl, r4
   17ba6:	46ab      	mov	fp, r5
   17ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17baa:	4664      	mov	r4, ip
   17bac:	4304      	orrs	r4, r0
   17bae:	d100      	bne.n	17bb2 <__aeabi_dadd+0x176>
   17bb0:	e211      	b.n	17fd6 <__aeabi_dadd+0x59a>
   17bb2:	0004      	movs	r4, r0
   17bb4:	4667      	mov	r7, ip
   17bb6:	077b      	lsls	r3, r7, #29
   17bb8:	d1c6      	bne.n	17b48 <__aeabi_dadd+0x10c>
   17bba:	4645      	mov	r5, r8
   17bbc:	0760      	lsls	r0, r4, #29
   17bbe:	08ff      	lsrs	r7, r7, #3
   17bc0:	4307      	orrs	r7, r0
   17bc2:	08e4      	lsrs	r4, r4, #3
   17bc4:	4b7d      	ldr	r3, [pc, #500]	; (17dbc <__aeabi_dadd+0x380>)
   17bc6:	429e      	cmp	r6, r3
   17bc8:	d030      	beq.n	17c2c <__aeabi_dadd+0x1f0>
   17bca:	0324      	lsls	r4, r4, #12
   17bcc:	0576      	lsls	r6, r6, #21
   17bce:	0b24      	lsrs	r4, r4, #12
   17bd0:	0d76      	lsrs	r6, r6, #21
   17bd2:	e7d4      	b.n	17b7e <__aeabi_dadd+0x142>
   17bd4:	1a33      	subs	r3, r6, r0
   17bd6:	469a      	mov	sl, r3
   17bd8:	2b00      	cmp	r3, #0
   17bda:	dd78      	ble.n	17cce <__aeabi_dadd+0x292>
   17bdc:	2800      	cmp	r0, #0
   17bde:	d031      	beq.n	17c44 <__aeabi_dadd+0x208>
   17be0:	4876      	ldr	r0, [pc, #472]	; (17dbc <__aeabi_dadd+0x380>)
   17be2:	4286      	cmp	r6, r0
   17be4:	d0ae      	beq.n	17b44 <__aeabi_dadd+0x108>
   17be6:	2080      	movs	r0, #128	; 0x80
   17be8:	0400      	lsls	r0, r0, #16
   17bea:	4301      	orrs	r1, r0
   17bec:	4653      	mov	r3, sl
   17bee:	2b38      	cmp	r3, #56	; 0x38
   17bf0:	dc00      	bgt.n	17bf4 <__aeabi_dadd+0x1b8>
   17bf2:	e0e9      	b.n	17dc8 <__aeabi_dadd+0x38c>
   17bf4:	430a      	orrs	r2, r1
   17bf6:	1e51      	subs	r1, r2, #1
   17bf8:	418a      	sbcs	r2, r1
   17bfa:	2100      	movs	r1, #0
   17bfc:	19d2      	adds	r2, r2, r7
   17bfe:	42ba      	cmp	r2, r7
   17c00:	41bf      	sbcs	r7, r7
   17c02:	1909      	adds	r1, r1, r4
   17c04:	427c      	negs	r4, r7
   17c06:	0017      	movs	r7, r2
   17c08:	190c      	adds	r4, r1, r4
   17c0a:	0223      	lsls	r3, r4, #8
   17c0c:	d5d3      	bpl.n	17bb6 <__aeabi_dadd+0x17a>
   17c0e:	4b6b      	ldr	r3, [pc, #428]	; (17dbc <__aeabi_dadd+0x380>)
   17c10:	3601      	adds	r6, #1
   17c12:	429e      	cmp	r6, r3
   17c14:	d100      	bne.n	17c18 <__aeabi_dadd+0x1dc>
   17c16:	e13a      	b.n	17e8e <__aeabi_dadd+0x452>
   17c18:	2001      	movs	r0, #1
   17c1a:	4b69      	ldr	r3, [pc, #420]	; (17dc0 <__aeabi_dadd+0x384>)
   17c1c:	401c      	ands	r4, r3
   17c1e:	087b      	lsrs	r3, r7, #1
   17c20:	4007      	ands	r7, r0
   17c22:	431f      	orrs	r7, r3
   17c24:	07e0      	lsls	r0, r4, #31
   17c26:	4307      	orrs	r7, r0
   17c28:	0864      	lsrs	r4, r4, #1
   17c2a:	e78b      	b.n	17b44 <__aeabi_dadd+0x108>
   17c2c:	0023      	movs	r3, r4
   17c2e:	433b      	orrs	r3, r7
   17c30:	d100      	bne.n	17c34 <__aeabi_dadd+0x1f8>
   17c32:	e1cb      	b.n	17fcc <__aeabi_dadd+0x590>
   17c34:	2280      	movs	r2, #128	; 0x80
   17c36:	0312      	lsls	r2, r2, #12
   17c38:	4314      	orrs	r4, r2
   17c3a:	0324      	lsls	r4, r4, #12
   17c3c:	0b24      	lsrs	r4, r4, #12
   17c3e:	e79e      	b.n	17b7e <__aeabi_dadd+0x142>
   17c40:	002e      	movs	r6, r5
   17c42:	e77f      	b.n	17b44 <__aeabi_dadd+0x108>
   17c44:	0008      	movs	r0, r1
   17c46:	4310      	orrs	r0, r2
   17c48:	d100      	bne.n	17c4c <__aeabi_dadd+0x210>
   17c4a:	e0b4      	b.n	17db6 <__aeabi_dadd+0x37a>
   17c4c:	1e58      	subs	r0, r3, #1
   17c4e:	2800      	cmp	r0, #0
   17c50:	d000      	beq.n	17c54 <__aeabi_dadd+0x218>
   17c52:	e0de      	b.n	17e12 <__aeabi_dadd+0x3d6>
   17c54:	18ba      	adds	r2, r7, r2
   17c56:	42ba      	cmp	r2, r7
   17c58:	419b      	sbcs	r3, r3
   17c5a:	1864      	adds	r4, r4, r1
   17c5c:	425b      	negs	r3, r3
   17c5e:	18e4      	adds	r4, r4, r3
   17c60:	0017      	movs	r7, r2
   17c62:	2601      	movs	r6, #1
   17c64:	0223      	lsls	r3, r4, #8
   17c66:	d5a6      	bpl.n	17bb6 <__aeabi_dadd+0x17a>
   17c68:	2602      	movs	r6, #2
   17c6a:	e7d5      	b.n	17c18 <__aeabi_dadd+0x1dc>
   17c6c:	2d00      	cmp	r5, #0
   17c6e:	d16e      	bne.n	17d4e <__aeabi_dadd+0x312>
   17c70:	1c70      	adds	r0, r6, #1
   17c72:	0540      	lsls	r0, r0, #21
   17c74:	0d40      	lsrs	r0, r0, #21
   17c76:	2801      	cmp	r0, #1
   17c78:	dc00      	bgt.n	17c7c <__aeabi_dadd+0x240>
   17c7a:	e0f9      	b.n	17e70 <__aeabi_dadd+0x434>
   17c7c:	1ab8      	subs	r0, r7, r2
   17c7e:	4684      	mov	ip, r0
   17c80:	4287      	cmp	r7, r0
   17c82:	4180      	sbcs	r0, r0
   17c84:	1ae5      	subs	r5, r4, r3
   17c86:	4240      	negs	r0, r0
   17c88:	1a2d      	subs	r5, r5, r0
   17c8a:	0228      	lsls	r0, r5, #8
   17c8c:	d400      	bmi.n	17c90 <__aeabi_dadd+0x254>
   17c8e:	e089      	b.n	17da4 <__aeabi_dadd+0x368>
   17c90:	1bd7      	subs	r7, r2, r7
   17c92:	42ba      	cmp	r2, r7
   17c94:	4192      	sbcs	r2, r2
   17c96:	1b1c      	subs	r4, r3, r4
   17c98:	4252      	negs	r2, r2
   17c9a:	1aa5      	subs	r5, r4, r2
   17c9c:	46d8      	mov	r8, fp
   17c9e:	e729      	b.n	17af4 <__aeabi_dadd+0xb8>
   17ca0:	4645      	mov	r5, r8
   17ca2:	2400      	movs	r4, #0
   17ca4:	2700      	movs	r7, #0
   17ca6:	e76a      	b.n	17b7e <__aeabi_dadd+0x142>
   17ca8:	4c45      	ldr	r4, [pc, #276]	; (17dc0 <__aeabi_dadd+0x384>)
   17caa:	1af6      	subs	r6, r6, r3
   17cac:	402c      	ands	r4, r5
   17cae:	e749      	b.n	17b44 <__aeabi_dadd+0x108>
   17cb0:	003d      	movs	r5, r7
   17cb2:	3828      	subs	r0, #40	; 0x28
   17cb4:	4085      	lsls	r5, r0
   17cb6:	2700      	movs	r7, #0
   17cb8:	e72e      	b.n	17b18 <__aeabi_dadd+0xdc>
   17cba:	0038      	movs	r0, r7
   17cbc:	f001 fc98 	bl	195f0 <__clzsi2>
   17cc0:	3020      	adds	r0, #32
   17cc2:	e71d      	b.n	17b00 <__aeabi_dadd+0xc4>
   17cc4:	430a      	orrs	r2, r1
   17cc6:	1e51      	subs	r1, r2, #1
   17cc8:	418a      	sbcs	r2, r1
   17cca:	2100      	movs	r1, #0
   17ccc:	e707      	b.n	17ade <__aeabi_dadd+0xa2>
   17cce:	2b00      	cmp	r3, #0
   17cd0:	d000      	beq.n	17cd4 <__aeabi_dadd+0x298>
   17cd2:	e0f3      	b.n	17ebc <__aeabi_dadd+0x480>
   17cd4:	1c70      	adds	r0, r6, #1
   17cd6:	0543      	lsls	r3, r0, #21
   17cd8:	0d5b      	lsrs	r3, r3, #21
   17cda:	2b01      	cmp	r3, #1
   17cdc:	dc00      	bgt.n	17ce0 <__aeabi_dadd+0x2a4>
   17cde:	e0ad      	b.n	17e3c <__aeabi_dadd+0x400>
   17ce0:	4b36      	ldr	r3, [pc, #216]	; (17dbc <__aeabi_dadd+0x380>)
   17ce2:	4298      	cmp	r0, r3
   17ce4:	d100      	bne.n	17ce8 <__aeabi_dadd+0x2ac>
   17ce6:	e0d1      	b.n	17e8c <__aeabi_dadd+0x450>
   17ce8:	18ba      	adds	r2, r7, r2
   17cea:	42ba      	cmp	r2, r7
   17cec:	41bf      	sbcs	r7, r7
   17cee:	1864      	adds	r4, r4, r1
   17cf0:	427f      	negs	r7, r7
   17cf2:	19e4      	adds	r4, r4, r7
   17cf4:	07e7      	lsls	r7, r4, #31
   17cf6:	0852      	lsrs	r2, r2, #1
   17cf8:	4317      	orrs	r7, r2
   17cfa:	0864      	lsrs	r4, r4, #1
   17cfc:	0006      	movs	r6, r0
   17cfe:	e721      	b.n	17b44 <__aeabi_dadd+0x108>
   17d00:	482e      	ldr	r0, [pc, #184]	; (17dbc <__aeabi_dadd+0x380>)
   17d02:	4285      	cmp	r5, r0
   17d04:	d100      	bne.n	17d08 <__aeabi_dadd+0x2cc>
   17d06:	e093      	b.n	17e30 <__aeabi_dadd+0x3f4>
   17d08:	001d      	movs	r5, r3
   17d0a:	e6d0      	b.n	17aae <__aeabi_dadd+0x72>
   17d0c:	0029      	movs	r1, r5
   17d0e:	3e1f      	subs	r6, #31
   17d10:	40f1      	lsrs	r1, r6
   17d12:	2b20      	cmp	r3, #32
   17d14:	d100      	bne.n	17d18 <__aeabi_dadd+0x2dc>
   17d16:	e08d      	b.n	17e34 <__aeabi_dadd+0x3f8>
   17d18:	2240      	movs	r2, #64	; 0x40
   17d1a:	1ad3      	subs	r3, r2, r3
   17d1c:	409d      	lsls	r5, r3
   17d1e:	432f      	orrs	r7, r5
   17d20:	1e7d      	subs	r5, r7, #1
   17d22:	41af      	sbcs	r7, r5
   17d24:	2400      	movs	r4, #0
   17d26:	430f      	orrs	r7, r1
   17d28:	2600      	movs	r6, #0
   17d2a:	e744      	b.n	17bb6 <__aeabi_dadd+0x17a>
   17d2c:	002b      	movs	r3, r5
   17d2e:	0008      	movs	r0, r1
   17d30:	3b20      	subs	r3, #32
   17d32:	40d8      	lsrs	r0, r3
   17d34:	0003      	movs	r3, r0
   17d36:	2d20      	cmp	r5, #32
   17d38:	d100      	bne.n	17d3c <__aeabi_dadd+0x300>
   17d3a:	e07d      	b.n	17e38 <__aeabi_dadd+0x3fc>
   17d3c:	2040      	movs	r0, #64	; 0x40
   17d3e:	1b45      	subs	r5, r0, r5
   17d40:	40a9      	lsls	r1, r5
   17d42:	430a      	orrs	r2, r1
   17d44:	1e51      	subs	r1, r2, #1
   17d46:	418a      	sbcs	r2, r1
   17d48:	2100      	movs	r1, #0
   17d4a:	431a      	orrs	r2, r3
   17d4c:	e6c7      	b.n	17ade <__aeabi_dadd+0xa2>
   17d4e:	2e00      	cmp	r6, #0
   17d50:	d050      	beq.n	17df4 <__aeabi_dadd+0x3b8>
   17d52:	4e1a      	ldr	r6, [pc, #104]	; (17dbc <__aeabi_dadd+0x380>)
   17d54:	42b0      	cmp	r0, r6
   17d56:	d057      	beq.n	17e08 <__aeabi_dadd+0x3cc>
   17d58:	2680      	movs	r6, #128	; 0x80
   17d5a:	426b      	negs	r3, r5
   17d5c:	4699      	mov	r9, r3
   17d5e:	0436      	lsls	r6, r6, #16
   17d60:	4334      	orrs	r4, r6
   17d62:	464b      	mov	r3, r9
   17d64:	2b38      	cmp	r3, #56	; 0x38
   17d66:	dd00      	ble.n	17d6a <__aeabi_dadd+0x32e>
   17d68:	e0d6      	b.n	17f18 <__aeabi_dadd+0x4dc>
   17d6a:	2b1f      	cmp	r3, #31
   17d6c:	dd00      	ble.n	17d70 <__aeabi_dadd+0x334>
   17d6e:	e135      	b.n	17fdc <__aeabi_dadd+0x5a0>
   17d70:	2620      	movs	r6, #32
   17d72:	1af5      	subs	r5, r6, r3
   17d74:	0026      	movs	r6, r4
   17d76:	40ae      	lsls	r6, r5
   17d78:	46b2      	mov	sl, r6
   17d7a:	003e      	movs	r6, r7
   17d7c:	40de      	lsrs	r6, r3
   17d7e:	46ac      	mov	ip, r5
   17d80:	0035      	movs	r5, r6
   17d82:	4656      	mov	r6, sl
   17d84:	432e      	orrs	r6, r5
   17d86:	4665      	mov	r5, ip
   17d88:	40af      	lsls	r7, r5
   17d8a:	1e7d      	subs	r5, r7, #1
   17d8c:	41af      	sbcs	r7, r5
   17d8e:	40dc      	lsrs	r4, r3
   17d90:	4337      	orrs	r7, r6
   17d92:	1bd7      	subs	r7, r2, r7
   17d94:	42ba      	cmp	r2, r7
   17d96:	4192      	sbcs	r2, r2
   17d98:	1b0c      	subs	r4, r1, r4
   17d9a:	4252      	negs	r2, r2
   17d9c:	1aa4      	subs	r4, r4, r2
   17d9e:	0006      	movs	r6, r0
   17da0:	46d8      	mov	r8, fp
   17da2:	e6a3      	b.n	17aec <__aeabi_dadd+0xb0>
   17da4:	4664      	mov	r4, ip
   17da6:	4667      	mov	r7, ip
   17da8:	432c      	orrs	r4, r5
   17daa:	d000      	beq.n	17dae <__aeabi_dadd+0x372>
   17dac:	e6a2      	b.n	17af4 <__aeabi_dadd+0xb8>
   17dae:	2500      	movs	r5, #0
   17db0:	2600      	movs	r6, #0
   17db2:	2700      	movs	r7, #0
   17db4:	e706      	b.n	17bc4 <__aeabi_dadd+0x188>
   17db6:	001e      	movs	r6, r3
   17db8:	e6c4      	b.n	17b44 <__aeabi_dadd+0x108>
   17dba:	46c0      	nop			; (mov r8, r8)
   17dbc:	000007ff 	.word	0x000007ff
   17dc0:	ff7fffff 	.word	0xff7fffff
   17dc4:	800fffff 	.word	0x800fffff
   17dc8:	2b1f      	cmp	r3, #31
   17dca:	dc63      	bgt.n	17e94 <__aeabi_dadd+0x458>
   17dcc:	2020      	movs	r0, #32
   17dce:	1ac3      	subs	r3, r0, r3
   17dd0:	0008      	movs	r0, r1
   17dd2:	4098      	lsls	r0, r3
   17dd4:	469c      	mov	ip, r3
   17dd6:	4683      	mov	fp, r0
   17dd8:	4653      	mov	r3, sl
   17dda:	0010      	movs	r0, r2
   17ddc:	40d8      	lsrs	r0, r3
   17dde:	0003      	movs	r3, r0
   17de0:	4658      	mov	r0, fp
   17de2:	4318      	orrs	r0, r3
   17de4:	4663      	mov	r3, ip
   17de6:	409a      	lsls	r2, r3
   17de8:	1e53      	subs	r3, r2, #1
   17dea:	419a      	sbcs	r2, r3
   17dec:	4653      	mov	r3, sl
   17dee:	4302      	orrs	r2, r0
   17df0:	40d9      	lsrs	r1, r3
   17df2:	e703      	b.n	17bfc <__aeabi_dadd+0x1c0>
   17df4:	0026      	movs	r6, r4
   17df6:	433e      	orrs	r6, r7
   17df8:	d006      	beq.n	17e08 <__aeabi_dadd+0x3cc>
   17dfa:	43eb      	mvns	r3, r5
   17dfc:	4699      	mov	r9, r3
   17dfe:	2b00      	cmp	r3, #0
   17e00:	d0c7      	beq.n	17d92 <__aeabi_dadd+0x356>
   17e02:	4e94      	ldr	r6, [pc, #592]	; (18054 <__aeabi_dadd+0x618>)
   17e04:	42b0      	cmp	r0, r6
   17e06:	d1ac      	bne.n	17d62 <__aeabi_dadd+0x326>
   17e08:	000c      	movs	r4, r1
   17e0a:	0017      	movs	r7, r2
   17e0c:	0006      	movs	r6, r0
   17e0e:	46d8      	mov	r8, fp
   17e10:	e698      	b.n	17b44 <__aeabi_dadd+0x108>
   17e12:	4b90      	ldr	r3, [pc, #576]	; (18054 <__aeabi_dadd+0x618>)
   17e14:	459a      	cmp	sl, r3
   17e16:	d00b      	beq.n	17e30 <__aeabi_dadd+0x3f4>
   17e18:	4682      	mov	sl, r0
   17e1a:	e6e7      	b.n	17bec <__aeabi_dadd+0x1b0>
   17e1c:	2800      	cmp	r0, #0
   17e1e:	d000      	beq.n	17e22 <__aeabi_dadd+0x3e6>
   17e20:	e09e      	b.n	17f60 <__aeabi_dadd+0x524>
   17e22:	0018      	movs	r0, r3
   17e24:	4310      	orrs	r0, r2
   17e26:	d100      	bne.n	17e2a <__aeabi_dadd+0x3ee>
   17e28:	e0e9      	b.n	17ffe <__aeabi_dadd+0x5c2>
   17e2a:	001c      	movs	r4, r3
   17e2c:	0017      	movs	r7, r2
   17e2e:	46d8      	mov	r8, fp
   17e30:	4e88      	ldr	r6, [pc, #544]	; (18054 <__aeabi_dadd+0x618>)
   17e32:	e687      	b.n	17b44 <__aeabi_dadd+0x108>
   17e34:	2500      	movs	r5, #0
   17e36:	e772      	b.n	17d1e <__aeabi_dadd+0x2e2>
   17e38:	2100      	movs	r1, #0
   17e3a:	e782      	b.n	17d42 <__aeabi_dadd+0x306>
   17e3c:	0023      	movs	r3, r4
   17e3e:	433b      	orrs	r3, r7
   17e40:	2e00      	cmp	r6, #0
   17e42:	d000      	beq.n	17e46 <__aeabi_dadd+0x40a>
   17e44:	e0ab      	b.n	17f9e <__aeabi_dadd+0x562>
   17e46:	2b00      	cmp	r3, #0
   17e48:	d100      	bne.n	17e4c <__aeabi_dadd+0x410>
   17e4a:	e0e7      	b.n	1801c <__aeabi_dadd+0x5e0>
   17e4c:	000b      	movs	r3, r1
   17e4e:	4313      	orrs	r3, r2
   17e50:	d100      	bne.n	17e54 <__aeabi_dadd+0x418>
   17e52:	e677      	b.n	17b44 <__aeabi_dadd+0x108>
   17e54:	18ba      	adds	r2, r7, r2
   17e56:	42ba      	cmp	r2, r7
   17e58:	41bf      	sbcs	r7, r7
   17e5a:	1864      	adds	r4, r4, r1
   17e5c:	427f      	negs	r7, r7
   17e5e:	19e4      	adds	r4, r4, r7
   17e60:	0223      	lsls	r3, r4, #8
   17e62:	d400      	bmi.n	17e66 <__aeabi_dadd+0x42a>
   17e64:	e0f2      	b.n	1804c <__aeabi_dadd+0x610>
   17e66:	4b7c      	ldr	r3, [pc, #496]	; (18058 <__aeabi_dadd+0x61c>)
   17e68:	0017      	movs	r7, r2
   17e6a:	401c      	ands	r4, r3
   17e6c:	0006      	movs	r6, r0
   17e6e:	e669      	b.n	17b44 <__aeabi_dadd+0x108>
   17e70:	0020      	movs	r0, r4
   17e72:	4338      	orrs	r0, r7
   17e74:	2e00      	cmp	r6, #0
   17e76:	d1d1      	bne.n	17e1c <__aeabi_dadd+0x3e0>
   17e78:	2800      	cmp	r0, #0
   17e7a:	d15b      	bne.n	17f34 <__aeabi_dadd+0x4f8>
   17e7c:	001c      	movs	r4, r3
   17e7e:	4314      	orrs	r4, r2
   17e80:	d100      	bne.n	17e84 <__aeabi_dadd+0x448>
   17e82:	e0a8      	b.n	17fd6 <__aeabi_dadd+0x59a>
   17e84:	001c      	movs	r4, r3
   17e86:	0017      	movs	r7, r2
   17e88:	46d8      	mov	r8, fp
   17e8a:	e65b      	b.n	17b44 <__aeabi_dadd+0x108>
   17e8c:	0006      	movs	r6, r0
   17e8e:	2400      	movs	r4, #0
   17e90:	2700      	movs	r7, #0
   17e92:	e697      	b.n	17bc4 <__aeabi_dadd+0x188>
   17e94:	4650      	mov	r0, sl
   17e96:	000b      	movs	r3, r1
   17e98:	3820      	subs	r0, #32
   17e9a:	40c3      	lsrs	r3, r0
   17e9c:	4699      	mov	r9, r3
   17e9e:	4653      	mov	r3, sl
   17ea0:	2b20      	cmp	r3, #32
   17ea2:	d100      	bne.n	17ea6 <__aeabi_dadd+0x46a>
   17ea4:	e095      	b.n	17fd2 <__aeabi_dadd+0x596>
   17ea6:	2340      	movs	r3, #64	; 0x40
   17ea8:	4650      	mov	r0, sl
   17eaa:	1a1b      	subs	r3, r3, r0
   17eac:	4099      	lsls	r1, r3
   17eae:	430a      	orrs	r2, r1
   17eb0:	1e51      	subs	r1, r2, #1
   17eb2:	418a      	sbcs	r2, r1
   17eb4:	464b      	mov	r3, r9
   17eb6:	2100      	movs	r1, #0
   17eb8:	431a      	orrs	r2, r3
   17eba:	e69f      	b.n	17bfc <__aeabi_dadd+0x1c0>
   17ebc:	2e00      	cmp	r6, #0
   17ebe:	d130      	bne.n	17f22 <__aeabi_dadd+0x4e6>
   17ec0:	0026      	movs	r6, r4
   17ec2:	433e      	orrs	r6, r7
   17ec4:	d067      	beq.n	17f96 <__aeabi_dadd+0x55a>
   17ec6:	43db      	mvns	r3, r3
   17ec8:	469a      	mov	sl, r3
   17eca:	2b00      	cmp	r3, #0
   17ecc:	d01c      	beq.n	17f08 <__aeabi_dadd+0x4cc>
   17ece:	4e61      	ldr	r6, [pc, #388]	; (18054 <__aeabi_dadd+0x618>)
   17ed0:	42b0      	cmp	r0, r6
   17ed2:	d060      	beq.n	17f96 <__aeabi_dadd+0x55a>
   17ed4:	4653      	mov	r3, sl
   17ed6:	2b38      	cmp	r3, #56	; 0x38
   17ed8:	dd00      	ble.n	17edc <__aeabi_dadd+0x4a0>
   17eda:	e096      	b.n	1800a <__aeabi_dadd+0x5ce>
   17edc:	2b1f      	cmp	r3, #31
   17ede:	dd00      	ble.n	17ee2 <__aeabi_dadd+0x4a6>
   17ee0:	e09f      	b.n	18022 <__aeabi_dadd+0x5e6>
   17ee2:	2620      	movs	r6, #32
   17ee4:	1af3      	subs	r3, r6, r3
   17ee6:	0026      	movs	r6, r4
   17ee8:	409e      	lsls	r6, r3
   17eea:	469c      	mov	ip, r3
   17eec:	46b3      	mov	fp, r6
   17eee:	4653      	mov	r3, sl
   17ef0:	003e      	movs	r6, r7
   17ef2:	40de      	lsrs	r6, r3
   17ef4:	0033      	movs	r3, r6
   17ef6:	465e      	mov	r6, fp
   17ef8:	431e      	orrs	r6, r3
   17efa:	4663      	mov	r3, ip
   17efc:	409f      	lsls	r7, r3
   17efe:	1e7b      	subs	r3, r7, #1
   17f00:	419f      	sbcs	r7, r3
   17f02:	4653      	mov	r3, sl
   17f04:	40dc      	lsrs	r4, r3
   17f06:	4337      	orrs	r7, r6
   17f08:	18bf      	adds	r7, r7, r2
   17f0a:	4297      	cmp	r7, r2
   17f0c:	4192      	sbcs	r2, r2
   17f0e:	1864      	adds	r4, r4, r1
   17f10:	4252      	negs	r2, r2
   17f12:	18a4      	adds	r4, r4, r2
   17f14:	0006      	movs	r6, r0
   17f16:	e678      	b.n	17c0a <__aeabi_dadd+0x1ce>
   17f18:	4327      	orrs	r7, r4
   17f1a:	1e7c      	subs	r4, r7, #1
   17f1c:	41a7      	sbcs	r7, r4
   17f1e:	2400      	movs	r4, #0
   17f20:	e737      	b.n	17d92 <__aeabi_dadd+0x356>
   17f22:	4e4c      	ldr	r6, [pc, #304]	; (18054 <__aeabi_dadd+0x618>)
   17f24:	42b0      	cmp	r0, r6
   17f26:	d036      	beq.n	17f96 <__aeabi_dadd+0x55a>
   17f28:	2680      	movs	r6, #128	; 0x80
   17f2a:	425b      	negs	r3, r3
   17f2c:	0436      	lsls	r6, r6, #16
   17f2e:	469a      	mov	sl, r3
   17f30:	4334      	orrs	r4, r6
   17f32:	e7cf      	b.n	17ed4 <__aeabi_dadd+0x498>
   17f34:	0018      	movs	r0, r3
   17f36:	4310      	orrs	r0, r2
   17f38:	d100      	bne.n	17f3c <__aeabi_dadd+0x500>
   17f3a:	e603      	b.n	17b44 <__aeabi_dadd+0x108>
   17f3c:	1ab8      	subs	r0, r7, r2
   17f3e:	4684      	mov	ip, r0
   17f40:	4567      	cmp	r7, ip
   17f42:	41ad      	sbcs	r5, r5
   17f44:	1ae0      	subs	r0, r4, r3
   17f46:	426d      	negs	r5, r5
   17f48:	1b40      	subs	r0, r0, r5
   17f4a:	0205      	lsls	r5, r0, #8
   17f4c:	d400      	bmi.n	17f50 <__aeabi_dadd+0x514>
   17f4e:	e62c      	b.n	17baa <__aeabi_dadd+0x16e>
   17f50:	1bd7      	subs	r7, r2, r7
   17f52:	42ba      	cmp	r2, r7
   17f54:	4192      	sbcs	r2, r2
   17f56:	1b1c      	subs	r4, r3, r4
   17f58:	4252      	negs	r2, r2
   17f5a:	1aa4      	subs	r4, r4, r2
   17f5c:	46d8      	mov	r8, fp
   17f5e:	e5f1      	b.n	17b44 <__aeabi_dadd+0x108>
   17f60:	0018      	movs	r0, r3
   17f62:	4310      	orrs	r0, r2
   17f64:	d100      	bne.n	17f68 <__aeabi_dadd+0x52c>
   17f66:	e763      	b.n	17e30 <__aeabi_dadd+0x3f4>
   17f68:	08f8      	lsrs	r0, r7, #3
   17f6a:	0767      	lsls	r7, r4, #29
   17f6c:	4307      	orrs	r7, r0
   17f6e:	2080      	movs	r0, #128	; 0x80
   17f70:	08e4      	lsrs	r4, r4, #3
   17f72:	0300      	lsls	r0, r0, #12
   17f74:	4204      	tst	r4, r0
   17f76:	d008      	beq.n	17f8a <__aeabi_dadd+0x54e>
   17f78:	08dd      	lsrs	r5, r3, #3
   17f7a:	4205      	tst	r5, r0
   17f7c:	d105      	bne.n	17f8a <__aeabi_dadd+0x54e>
   17f7e:	08d2      	lsrs	r2, r2, #3
   17f80:	0759      	lsls	r1, r3, #29
   17f82:	4311      	orrs	r1, r2
   17f84:	000f      	movs	r7, r1
   17f86:	002c      	movs	r4, r5
   17f88:	46d8      	mov	r8, fp
   17f8a:	0f7b      	lsrs	r3, r7, #29
   17f8c:	00e4      	lsls	r4, r4, #3
   17f8e:	431c      	orrs	r4, r3
   17f90:	00ff      	lsls	r7, r7, #3
   17f92:	4e30      	ldr	r6, [pc, #192]	; (18054 <__aeabi_dadd+0x618>)
   17f94:	e5d6      	b.n	17b44 <__aeabi_dadd+0x108>
   17f96:	000c      	movs	r4, r1
   17f98:	0017      	movs	r7, r2
   17f9a:	0006      	movs	r6, r0
   17f9c:	e5d2      	b.n	17b44 <__aeabi_dadd+0x108>
   17f9e:	2b00      	cmp	r3, #0
   17fa0:	d038      	beq.n	18014 <__aeabi_dadd+0x5d8>
   17fa2:	000b      	movs	r3, r1
   17fa4:	4313      	orrs	r3, r2
   17fa6:	d100      	bne.n	17faa <__aeabi_dadd+0x56e>
   17fa8:	e742      	b.n	17e30 <__aeabi_dadd+0x3f4>
   17faa:	08f8      	lsrs	r0, r7, #3
   17fac:	0767      	lsls	r7, r4, #29
   17fae:	4307      	orrs	r7, r0
   17fb0:	2080      	movs	r0, #128	; 0x80
   17fb2:	08e4      	lsrs	r4, r4, #3
   17fb4:	0300      	lsls	r0, r0, #12
   17fb6:	4204      	tst	r4, r0
   17fb8:	d0e7      	beq.n	17f8a <__aeabi_dadd+0x54e>
   17fba:	08cb      	lsrs	r3, r1, #3
   17fbc:	4203      	tst	r3, r0
   17fbe:	d1e4      	bne.n	17f8a <__aeabi_dadd+0x54e>
   17fc0:	08d2      	lsrs	r2, r2, #3
   17fc2:	0749      	lsls	r1, r1, #29
   17fc4:	4311      	orrs	r1, r2
   17fc6:	000f      	movs	r7, r1
   17fc8:	001c      	movs	r4, r3
   17fca:	e7de      	b.n	17f8a <__aeabi_dadd+0x54e>
   17fcc:	2700      	movs	r7, #0
   17fce:	2400      	movs	r4, #0
   17fd0:	e5d5      	b.n	17b7e <__aeabi_dadd+0x142>
   17fd2:	2100      	movs	r1, #0
   17fd4:	e76b      	b.n	17eae <__aeabi_dadd+0x472>
   17fd6:	2500      	movs	r5, #0
   17fd8:	2700      	movs	r7, #0
   17fda:	e5f3      	b.n	17bc4 <__aeabi_dadd+0x188>
   17fdc:	464e      	mov	r6, r9
   17fde:	0025      	movs	r5, r4
   17fe0:	3e20      	subs	r6, #32
   17fe2:	40f5      	lsrs	r5, r6
   17fe4:	464b      	mov	r3, r9
   17fe6:	002e      	movs	r6, r5
   17fe8:	2b20      	cmp	r3, #32
   17fea:	d02d      	beq.n	18048 <__aeabi_dadd+0x60c>
   17fec:	2540      	movs	r5, #64	; 0x40
   17fee:	1aed      	subs	r5, r5, r3
   17ff0:	40ac      	lsls	r4, r5
   17ff2:	4327      	orrs	r7, r4
   17ff4:	1e7c      	subs	r4, r7, #1
   17ff6:	41a7      	sbcs	r7, r4
   17ff8:	2400      	movs	r4, #0
   17ffa:	4337      	orrs	r7, r6
   17ffc:	e6c9      	b.n	17d92 <__aeabi_dadd+0x356>
   17ffe:	2480      	movs	r4, #128	; 0x80
   18000:	2500      	movs	r5, #0
   18002:	0324      	lsls	r4, r4, #12
   18004:	4e13      	ldr	r6, [pc, #76]	; (18054 <__aeabi_dadd+0x618>)
   18006:	2700      	movs	r7, #0
   18008:	e5dc      	b.n	17bc4 <__aeabi_dadd+0x188>
   1800a:	4327      	orrs	r7, r4
   1800c:	1e7c      	subs	r4, r7, #1
   1800e:	41a7      	sbcs	r7, r4
   18010:	2400      	movs	r4, #0
   18012:	e779      	b.n	17f08 <__aeabi_dadd+0x4cc>
   18014:	000c      	movs	r4, r1
   18016:	0017      	movs	r7, r2
   18018:	4e0e      	ldr	r6, [pc, #56]	; (18054 <__aeabi_dadd+0x618>)
   1801a:	e593      	b.n	17b44 <__aeabi_dadd+0x108>
   1801c:	000c      	movs	r4, r1
   1801e:	0017      	movs	r7, r2
   18020:	e590      	b.n	17b44 <__aeabi_dadd+0x108>
   18022:	4656      	mov	r6, sl
   18024:	0023      	movs	r3, r4
   18026:	3e20      	subs	r6, #32
   18028:	40f3      	lsrs	r3, r6
   1802a:	4699      	mov	r9, r3
   1802c:	4653      	mov	r3, sl
   1802e:	2b20      	cmp	r3, #32
   18030:	d00e      	beq.n	18050 <__aeabi_dadd+0x614>
   18032:	2340      	movs	r3, #64	; 0x40
   18034:	4656      	mov	r6, sl
   18036:	1b9b      	subs	r3, r3, r6
   18038:	409c      	lsls	r4, r3
   1803a:	4327      	orrs	r7, r4
   1803c:	1e7c      	subs	r4, r7, #1
   1803e:	41a7      	sbcs	r7, r4
   18040:	464b      	mov	r3, r9
   18042:	2400      	movs	r4, #0
   18044:	431f      	orrs	r7, r3
   18046:	e75f      	b.n	17f08 <__aeabi_dadd+0x4cc>
   18048:	2400      	movs	r4, #0
   1804a:	e7d2      	b.n	17ff2 <__aeabi_dadd+0x5b6>
   1804c:	0017      	movs	r7, r2
   1804e:	e5b2      	b.n	17bb6 <__aeabi_dadd+0x17a>
   18050:	2400      	movs	r4, #0
   18052:	e7f2      	b.n	1803a <__aeabi_dadd+0x5fe>
   18054:	000007ff 	.word	0x000007ff
   18058:	ff7fffff 	.word	0xff7fffff

0001805c <__aeabi_ddiv>:
   1805c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1805e:	4657      	mov	r7, sl
   18060:	4645      	mov	r5, r8
   18062:	46de      	mov	lr, fp
   18064:	464e      	mov	r6, r9
   18066:	b5e0      	push	{r5, r6, r7, lr}
   18068:	004c      	lsls	r4, r1, #1
   1806a:	030e      	lsls	r6, r1, #12
   1806c:	b087      	sub	sp, #28
   1806e:	4683      	mov	fp, r0
   18070:	4692      	mov	sl, r2
   18072:	001d      	movs	r5, r3
   18074:	4680      	mov	r8, r0
   18076:	0b36      	lsrs	r6, r6, #12
   18078:	0d64      	lsrs	r4, r4, #21
   1807a:	0fcf      	lsrs	r7, r1, #31
   1807c:	2c00      	cmp	r4, #0
   1807e:	d04f      	beq.n	18120 <__aeabi_ddiv+0xc4>
   18080:	4b6f      	ldr	r3, [pc, #444]	; (18240 <__aeabi_ddiv+0x1e4>)
   18082:	429c      	cmp	r4, r3
   18084:	d035      	beq.n	180f2 <__aeabi_ddiv+0x96>
   18086:	2380      	movs	r3, #128	; 0x80
   18088:	0f42      	lsrs	r2, r0, #29
   1808a:	041b      	lsls	r3, r3, #16
   1808c:	00f6      	lsls	r6, r6, #3
   1808e:	4313      	orrs	r3, r2
   18090:	4333      	orrs	r3, r6
   18092:	4699      	mov	r9, r3
   18094:	00c3      	lsls	r3, r0, #3
   18096:	4698      	mov	r8, r3
   18098:	4b6a      	ldr	r3, [pc, #424]	; (18244 <__aeabi_ddiv+0x1e8>)
   1809a:	2600      	movs	r6, #0
   1809c:	469c      	mov	ip, r3
   1809e:	2300      	movs	r3, #0
   180a0:	4464      	add	r4, ip
   180a2:	9303      	str	r3, [sp, #12]
   180a4:	032b      	lsls	r3, r5, #12
   180a6:	0b1b      	lsrs	r3, r3, #12
   180a8:	469b      	mov	fp, r3
   180aa:	006b      	lsls	r3, r5, #1
   180ac:	0fed      	lsrs	r5, r5, #31
   180ae:	4650      	mov	r0, sl
   180b0:	0d5b      	lsrs	r3, r3, #21
   180b2:	9501      	str	r5, [sp, #4]
   180b4:	d05e      	beq.n	18174 <__aeabi_ddiv+0x118>
   180b6:	4a62      	ldr	r2, [pc, #392]	; (18240 <__aeabi_ddiv+0x1e4>)
   180b8:	4293      	cmp	r3, r2
   180ba:	d053      	beq.n	18164 <__aeabi_ddiv+0x108>
   180bc:	465a      	mov	r2, fp
   180be:	00d1      	lsls	r1, r2, #3
   180c0:	2280      	movs	r2, #128	; 0x80
   180c2:	0f40      	lsrs	r0, r0, #29
   180c4:	0412      	lsls	r2, r2, #16
   180c6:	4302      	orrs	r2, r0
   180c8:	430a      	orrs	r2, r1
   180ca:	4693      	mov	fp, r2
   180cc:	4652      	mov	r2, sl
   180ce:	00d1      	lsls	r1, r2, #3
   180d0:	4a5c      	ldr	r2, [pc, #368]	; (18244 <__aeabi_ddiv+0x1e8>)
   180d2:	4694      	mov	ip, r2
   180d4:	2200      	movs	r2, #0
   180d6:	4463      	add	r3, ip
   180d8:	0038      	movs	r0, r7
   180da:	4068      	eors	r0, r5
   180dc:	4684      	mov	ip, r0
   180de:	9002      	str	r0, [sp, #8]
   180e0:	1ae4      	subs	r4, r4, r3
   180e2:	4316      	orrs	r6, r2
   180e4:	2e0f      	cmp	r6, #15
   180e6:	d900      	bls.n	180ea <__aeabi_ddiv+0x8e>
   180e8:	e0b4      	b.n	18254 <__aeabi_ddiv+0x1f8>
   180ea:	4b57      	ldr	r3, [pc, #348]	; (18248 <__aeabi_ddiv+0x1ec>)
   180ec:	00b6      	lsls	r6, r6, #2
   180ee:	599b      	ldr	r3, [r3, r6]
   180f0:	469f      	mov	pc, r3
   180f2:	0003      	movs	r3, r0
   180f4:	4333      	orrs	r3, r6
   180f6:	4699      	mov	r9, r3
   180f8:	d16c      	bne.n	181d4 <__aeabi_ddiv+0x178>
   180fa:	2300      	movs	r3, #0
   180fc:	4698      	mov	r8, r3
   180fe:	3302      	adds	r3, #2
   18100:	2608      	movs	r6, #8
   18102:	9303      	str	r3, [sp, #12]
   18104:	e7ce      	b.n	180a4 <__aeabi_ddiv+0x48>
   18106:	46cb      	mov	fp, r9
   18108:	4641      	mov	r1, r8
   1810a:	9a03      	ldr	r2, [sp, #12]
   1810c:	9701      	str	r7, [sp, #4]
   1810e:	2a02      	cmp	r2, #2
   18110:	d165      	bne.n	181de <__aeabi_ddiv+0x182>
   18112:	9b01      	ldr	r3, [sp, #4]
   18114:	4c4a      	ldr	r4, [pc, #296]	; (18240 <__aeabi_ddiv+0x1e4>)
   18116:	469c      	mov	ip, r3
   18118:	2300      	movs	r3, #0
   1811a:	2200      	movs	r2, #0
   1811c:	4698      	mov	r8, r3
   1811e:	e06b      	b.n	181f8 <__aeabi_ddiv+0x19c>
   18120:	0003      	movs	r3, r0
   18122:	4333      	orrs	r3, r6
   18124:	4699      	mov	r9, r3
   18126:	d04e      	beq.n	181c6 <__aeabi_ddiv+0x16a>
   18128:	2e00      	cmp	r6, #0
   1812a:	d100      	bne.n	1812e <__aeabi_ddiv+0xd2>
   1812c:	e1bc      	b.n	184a8 <__aeabi_ddiv+0x44c>
   1812e:	0030      	movs	r0, r6
   18130:	f001 fa5e 	bl	195f0 <__clzsi2>
   18134:	0003      	movs	r3, r0
   18136:	3b0b      	subs	r3, #11
   18138:	2b1c      	cmp	r3, #28
   1813a:	dd00      	ble.n	1813e <__aeabi_ddiv+0xe2>
   1813c:	e1ac      	b.n	18498 <__aeabi_ddiv+0x43c>
   1813e:	221d      	movs	r2, #29
   18140:	1ad3      	subs	r3, r2, r3
   18142:	465a      	mov	r2, fp
   18144:	0001      	movs	r1, r0
   18146:	40da      	lsrs	r2, r3
   18148:	3908      	subs	r1, #8
   1814a:	408e      	lsls	r6, r1
   1814c:	0013      	movs	r3, r2
   1814e:	4333      	orrs	r3, r6
   18150:	4699      	mov	r9, r3
   18152:	465b      	mov	r3, fp
   18154:	408b      	lsls	r3, r1
   18156:	4698      	mov	r8, r3
   18158:	2300      	movs	r3, #0
   1815a:	4c3c      	ldr	r4, [pc, #240]	; (1824c <__aeabi_ddiv+0x1f0>)
   1815c:	2600      	movs	r6, #0
   1815e:	1a24      	subs	r4, r4, r0
   18160:	9303      	str	r3, [sp, #12]
   18162:	e79f      	b.n	180a4 <__aeabi_ddiv+0x48>
   18164:	4651      	mov	r1, sl
   18166:	465a      	mov	r2, fp
   18168:	4311      	orrs	r1, r2
   1816a:	d129      	bne.n	181c0 <__aeabi_ddiv+0x164>
   1816c:	2200      	movs	r2, #0
   1816e:	4693      	mov	fp, r2
   18170:	3202      	adds	r2, #2
   18172:	e7b1      	b.n	180d8 <__aeabi_ddiv+0x7c>
   18174:	4659      	mov	r1, fp
   18176:	4301      	orrs	r1, r0
   18178:	d01e      	beq.n	181b8 <__aeabi_ddiv+0x15c>
   1817a:	465b      	mov	r3, fp
   1817c:	2b00      	cmp	r3, #0
   1817e:	d100      	bne.n	18182 <__aeabi_ddiv+0x126>
   18180:	e19e      	b.n	184c0 <__aeabi_ddiv+0x464>
   18182:	4658      	mov	r0, fp
   18184:	f001 fa34 	bl	195f0 <__clzsi2>
   18188:	0003      	movs	r3, r0
   1818a:	3b0b      	subs	r3, #11
   1818c:	2b1c      	cmp	r3, #28
   1818e:	dd00      	ble.n	18192 <__aeabi_ddiv+0x136>
   18190:	e18f      	b.n	184b2 <__aeabi_ddiv+0x456>
   18192:	0002      	movs	r2, r0
   18194:	4659      	mov	r1, fp
   18196:	3a08      	subs	r2, #8
   18198:	4091      	lsls	r1, r2
   1819a:	468b      	mov	fp, r1
   1819c:	211d      	movs	r1, #29
   1819e:	1acb      	subs	r3, r1, r3
   181a0:	4651      	mov	r1, sl
   181a2:	40d9      	lsrs	r1, r3
   181a4:	000b      	movs	r3, r1
   181a6:	4659      	mov	r1, fp
   181a8:	430b      	orrs	r3, r1
   181aa:	4651      	mov	r1, sl
   181ac:	469b      	mov	fp, r3
   181ae:	4091      	lsls	r1, r2
   181b0:	4b26      	ldr	r3, [pc, #152]	; (1824c <__aeabi_ddiv+0x1f0>)
   181b2:	2200      	movs	r2, #0
   181b4:	1a1b      	subs	r3, r3, r0
   181b6:	e78f      	b.n	180d8 <__aeabi_ddiv+0x7c>
   181b8:	2300      	movs	r3, #0
   181ba:	2201      	movs	r2, #1
   181bc:	469b      	mov	fp, r3
   181be:	e78b      	b.n	180d8 <__aeabi_ddiv+0x7c>
   181c0:	4651      	mov	r1, sl
   181c2:	2203      	movs	r2, #3
   181c4:	e788      	b.n	180d8 <__aeabi_ddiv+0x7c>
   181c6:	2300      	movs	r3, #0
   181c8:	4698      	mov	r8, r3
   181ca:	3301      	adds	r3, #1
   181cc:	2604      	movs	r6, #4
   181ce:	2400      	movs	r4, #0
   181d0:	9303      	str	r3, [sp, #12]
   181d2:	e767      	b.n	180a4 <__aeabi_ddiv+0x48>
   181d4:	2303      	movs	r3, #3
   181d6:	46b1      	mov	r9, r6
   181d8:	9303      	str	r3, [sp, #12]
   181da:	260c      	movs	r6, #12
   181dc:	e762      	b.n	180a4 <__aeabi_ddiv+0x48>
   181de:	2a03      	cmp	r2, #3
   181e0:	d100      	bne.n	181e4 <__aeabi_ddiv+0x188>
   181e2:	e25c      	b.n	1869e <__aeabi_ddiv+0x642>
   181e4:	9b01      	ldr	r3, [sp, #4]
   181e6:	2a01      	cmp	r2, #1
   181e8:	d000      	beq.n	181ec <__aeabi_ddiv+0x190>
   181ea:	e1e4      	b.n	185b6 <__aeabi_ddiv+0x55a>
   181ec:	4013      	ands	r3, r2
   181ee:	469c      	mov	ip, r3
   181f0:	2300      	movs	r3, #0
   181f2:	2400      	movs	r4, #0
   181f4:	2200      	movs	r2, #0
   181f6:	4698      	mov	r8, r3
   181f8:	2100      	movs	r1, #0
   181fa:	0312      	lsls	r2, r2, #12
   181fc:	0b13      	lsrs	r3, r2, #12
   181fe:	0d0a      	lsrs	r2, r1, #20
   18200:	0512      	lsls	r2, r2, #20
   18202:	431a      	orrs	r2, r3
   18204:	0523      	lsls	r3, r4, #20
   18206:	4c12      	ldr	r4, [pc, #72]	; (18250 <__aeabi_ddiv+0x1f4>)
   18208:	4640      	mov	r0, r8
   1820a:	4022      	ands	r2, r4
   1820c:	4313      	orrs	r3, r2
   1820e:	4662      	mov	r2, ip
   18210:	005b      	lsls	r3, r3, #1
   18212:	07d2      	lsls	r2, r2, #31
   18214:	085b      	lsrs	r3, r3, #1
   18216:	4313      	orrs	r3, r2
   18218:	0019      	movs	r1, r3
   1821a:	b007      	add	sp, #28
   1821c:	bc3c      	pop	{r2, r3, r4, r5}
   1821e:	4690      	mov	r8, r2
   18220:	4699      	mov	r9, r3
   18222:	46a2      	mov	sl, r4
   18224:	46ab      	mov	fp, r5
   18226:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18228:	2300      	movs	r3, #0
   1822a:	2280      	movs	r2, #128	; 0x80
   1822c:	469c      	mov	ip, r3
   1822e:	0312      	lsls	r2, r2, #12
   18230:	4698      	mov	r8, r3
   18232:	4c03      	ldr	r4, [pc, #12]	; (18240 <__aeabi_ddiv+0x1e4>)
   18234:	e7e0      	b.n	181f8 <__aeabi_ddiv+0x19c>
   18236:	2300      	movs	r3, #0
   18238:	4c01      	ldr	r4, [pc, #4]	; (18240 <__aeabi_ddiv+0x1e4>)
   1823a:	2200      	movs	r2, #0
   1823c:	4698      	mov	r8, r3
   1823e:	e7db      	b.n	181f8 <__aeabi_ddiv+0x19c>
   18240:	000007ff 	.word	0x000007ff
   18244:	fffffc01 	.word	0xfffffc01
   18248:	0002046c 	.word	0x0002046c
   1824c:	fffffc0d 	.word	0xfffffc0d
   18250:	800fffff 	.word	0x800fffff
   18254:	45d9      	cmp	r9, fp
   18256:	d900      	bls.n	1825a <__aeabi_ddiv+0x1fe>
   18258:	e139      	b.n	184ce <__aeabi_ddiv+0x472>
   1825a:	d100      	bne.n	1825e <__aeabi_ddiv+0x202>
   1825c:	e134      	b.n	184c8 <__aeabi_ddiv+0x46c>
   1825e:	2300      	movs	r3, #0
   18260:	4646      	mov	r6, r8
   18262:	464d      	mov	r5, r9
   18264:	469a      	mov	sl, r3
   18266:	3c01      	subs	r4, #1
   18268:	465b      	mov	r3, fp
   1826a:	0e0a      	lsrs	r2, r1, #24
   1826c:	021b      	lsls	r3, r3, #8
   1826e:	431a      	orrs	r2, r3
   18270:	020b      	lsls	r3, r1, #8
   18272:	0c17      	lsrs	r7, r2, #16
   18274:	9303      	str	r3, [sp, #12]
   18276:	0413      	lsls	r3, r2, #16
   18278:	0c1b      	lsrs	r3, r3, #16
   1827a:	0039      	movs	r1, r7
   1827c:	0028      	movs	r0, r5
   1827e:	4690      	mov	r8, r2
   18280:	9301      	str	r3, [sp, #4]
   18282:	f7fe f999 	bl	165b8 <__udivsi3>
   18286:	0002      	movs	r2, r0
   18288:	9b01      	ldr	r3, [sp, #4]
   1828a:	4683      	mov	fp, r0
   1828c:	435a      	muls	r2, r3
   1828e:	0028      	movs	r0, r5
   18290:	0039      	movs	r1, r7
   18292:	4691      	mov	r9, r2
   18294:	f7fe fa16 	bl	166c4 <__aeabi_uidivmod>
   18298:	0c35      	lsrs	r5, r6, #16
   1829a:	0409      	lsls	r1, r1, #16
   1829c:	430d      	orrs	r5, r1
   1829e:	45a9      	cmp	r9, r5
   182a0:	d90d      	bls.n	182be <__aeabi_ddiv+0x262>
   182a2:	465b      	mov	r3, fp
   182a4:	4445      	add	r5, r8
   182a6:	3b01      	subs	r3, #1
   182a8:	45a8      	cmp	r8, r5
   182aa:	d900      	bls.n	182ae <__aeabi_ddiv+0x252>
   182ac:	e13a      	b.n	18524 <__aeabi_ddiv+0x4c8>
   182ae:	45a9      	cmp	r9, r5
   182b0:	d800      	bhi.n	182b4 <__aeabi_ddiv+0x258>
   182b2:	e137      	b.n	18524 <__aeabi_ddiv+0x4c8>
   182b4:	2302      	movs	r3, #2
   182b6:	425b      	negs	r3, r3
   182b8:	469c      	mov	ip, r3
   182ba:	4445      	add	r5, r8
   182bc:	44e3      	add	fp, ip
   182be:	464b      	mov	r3, r9
   182c0:	1aeb      	subs	r3, r5, r3
   182c2:	0039      	movs	r1, r7
   182c4:	0018      	movs	r0, r3
   182c6:	9304      	str	r3, [sp, #16]
   182c8:	f7fe f976 	bl	165b8 <__udivsi3>
   182cc:	9b01      	ldr	r3, [sp, #4]
   182ce:	0005      	movs	r5, r0
   182d0:	4343      	muls	r3, r0
   182d2:	0039      	movs	r1, r7
   182d4:	9804      	ldr	r0, [sp, #16]
   182d6:	4699      	mov	r9, r3
   182d8:	f7fe f9f4 	bl	166c4 <__aeabi_uidivmod>
   182dc:	0433      	lsls	r3, r6, #16
   182de:	0409      	lsls	r1, r1, #16
   182e0:	0c1b      	lsrs	r3, r3, #16
   182e2:	430b      	orrs	r3, r1
   182e4:	4599      	cmp	r9, r3
   182e6:	d909      	bls.n	182fc <__aeabi_ddiv+0x2a0>
   182e8:	4443      	add	r3, r8
   182ea:	1e6a      	subs	r2, r5, #1
   182ec:	4598      	cmp	r8, r3
   182ee:	d900      	bls.n	182f2 <__aeabi_ddiv+0x296>
   182f0:	e11a      	b.n	18528 <__aeabi_ddiv+0x4cc>
   182f2:	4599      	cmp	r9, r3
   182f4:	d800      	bhi.n	182f8 <__aeabi_ddiv+0x29c>
   182f6:	e117      	b.n	18528 <__aeabi_ddiv+0x4cc>
   182f8:	3d02      	subs	r5, #2
   182fa:	4443      	add	r3, r8
   182fc:	464a      	mov	r2, r9
   182fe:	1a9b      	subs	r3, r3, r2
   18300:	465a      	mov	r2, fp
   18302:	0412      	lsls	r2, r2, #16
   18304:	432a      	orrs	r2, r5
   18306:	9903      	ldr	r1, [sp, #12]
   18308:	4693      	mov	fp, r2
   1830a:	0c10      	lsrs	r0, r2, #16
   1830c:	0c0a      	lsrs	r2, r1, #16
   1830e:	4691      	mov	r9, r2
   18310:	0409      	lsls	r1, r1, #16
   18312:	465a      	mov	r2, fp
   18314:	0c09      	lsrs	r1, r1, #16
   18316:	464e      	mov	r6, r9
   18318:	000d      	movs	r5, r1
   1831a:	0412      	lsls	r2, r2, #16
   1831c:	0c12      	lsrs	r2, r2, #16
   1831e:	4345      	muls	r5, r0
   18320:	9105      	str	r1, [sp, #20]
   18322:	4351      	muls	r1, r2
   18324:	4372      	muls	r2, r6
   18326:	4370      	muls	r0, r6
   18328:	1952      	adds	r2, r2, r5
   1832a:	0c0e      	lsrs	r6, r1, #16
   1832c:	18b2      	adds	r2, r6, r2
   1832e:	4295      	cmp	r5, r2
   18330:	d903      	bls.n	1833a <__aeabi_ddiv+0x2de>
   18332:	2580      	movs	r5, #128	; 0x80
   18334:	026d      	lsls	r5, r5, #9
   18336:	46ac      	mov	ip, r5
   18338:	4460      	add	r0, ip
   1833a:	0c15      	lsrs	r5, r2, #16
   1833c:	0409      	lsls	r1, r1, #16
   1833e:	0412      	lsls	r2, r2, #16
   18340:	0c09      	lsrs	r1, r1, #16
   18342:	1828      	adds	r0, r5, r0
   18344:	1852      	adds	r2, r2, r1
   18346:	4283      	cmp	r3, r0
   18348:	d200      	bcs.n	1834c <__aeabi_ddiv+0x2f0>
   1834a:	e0ce      	b.n	184ea <__aeabi_ddiv+0x48e>
   1834c:	d100      	bne.n	18350 <__aeabi_ddiv+0x2f4>
   1834e:	e0c8      	b.n	184e2 <__aeabi_ddiv+0x486>
   18350:	1a1d      	subs	r5, r3, r0
   18352:	4653      	mov	r3, sl
   18354:	1a9e      	subs	r6, r3, r2
   18356:	45b2      	cmp	sl, r6
   18358:	4192      	sbcs	r2, r2
   1835a:	4252      	negs	r2, r2
   1835c:	1aab      	subs	r3, r5, r2
   1835e:	469a      	mov	sl, r3
   18360:	4598      	cmp	r8, r3
   18362:	d100      	bne.n	18366 <__aeabi_ddiv+0x30a>
   18364:	e117      	b.n	18596 <__aeabi_ddiv+0x53a>
   18366:	0039      	movs	r1, r7
   18368:	0018      	movs	r0, r3
   1836a:	f7fe f925 	bl	165b8 <__udivsi3>
   1836e:	9b01      	ldr	r3, [sp, #4]
   18370:	0005      	movs	r5, r0
   18372:	4343      	muls	r3, r0
   18374:	0039      	movs	r1, r7
   18376:	4650      	mov	r0, sl
   18378:	9304      	str	r3, [sp, #16]
   1837a:	f7fe f9a3 	bl	166c4 <__aeabi_uidivmod>
   1837e:	9804      	ldr	r0, [sp, #16]
   18380:	040b      	lsls	r3, r1, #16
   18382:	0c31      	lsrs	r1, r6, #16
   18384:	4319      	orrs	r1, r3
   18386:	4288      	cmp	r0, r1
   18388:	d909      	bls.n	1839e <__aeabi_ddiv+0x342>
   1838a:	4441      	add	r1, r8
   1838c:	1e6b      	subs	r3, r5, #1
   1838e:	4588      	cmp	r8, r1
   18390:	d900      	bls.n	18394 <__aeabi_ddiv+0x338>
   18392:	e107      	b.n	185a4 <__aeabi_ddiv+0x548>
   18394:	4288      	cmp	r0, r1
   18396:	d800      	bhi.n	1839a <__aeabi_ddiv+0x33e>
   18398:	e104      	b.n	185a4 <__aeabi_ddiv+0x548>
   1839a:	3d02      	subs	r5, #2
   1839c:	4441      	add	r1, r8
   1839e:	9b04      	ldr	r3, [sp, #16]
   183a0:	1acb      	subs	r3, r1, r3
   183a2:	0018      	movs	r0, r3
   183a4:	0039      	movs	r1, r7
   183a6:	9304      	str	r3, [sp, #16]
   183a8:	f7fe f906 	bl	165b8 <__udivsi3>
   183ac:	9b01      	ldr	r3, [sp, #4]
   183ae:	4682      	mov	sl, r0
   183b0:	4343      	muls	r3, r0
   183b2:	0039      	movs	r1, r7
   183b4:	9804      	ldr	r0, [sp, #16]
   183b6:	9301      	str	r3, [sp, #4]
   183b8:	f7fe f984 	bl	166c4 <__aeabi_uidivmod>
   183bc:	9801      	ldr	r0, [sp, #4]
   183be:	040b      	lsls	r3, r1, #16
   183c0:	0431      	lsls	r1, r6, #16
   183c2:	0c09      	lsrs	r1, r1, #16
   183c4:	4319      	orrs	r1, r3
   183c6:	4288      	cmp	r0, r1
   183c8:	d90d      	bls.n	183e6 <__aeabi_ddiv+0x38a>
   183ca:	4653      	mov	r3, sl
   183cc:	4441      	add	r1, r8
   183ce:	3b01      	subs	r3, #1
   183d0:	4588      	cmp	r8, r1
   183d2:	d900      	bls.n	183d6 <__aeabi_ddiv+0x37a>
   183d4:	e0e8      	b.n	185a8 <__aeabi_ddiv+0x54c>
   183d6:	4288      	cmp	r0, r1
   183d8:	d800      	bhi.n	183dc <__aeabi_ddiv+0x380>
   183da:	e0e5      	b.n	185a8 <__aeabi_ddiv+0x54c>
   183dc:	2302      	movs	r3, #2
   183de:	425b      	negs	r3, r3
   183e0:	469c      	mov	ip, r3
   183e2:	4441      	add	r1, r8
   183e4:	44e2      	add	sl, ip
   183e6:	9b01      	ldr	r3, [sp, #4]
   183e8:	042d      	lsls	r5, r5, #16
   183ea:	1ace      	subs	r6, r1, r3
   183ec:	4651      	mov	r1, sl
   183ee:	4329      	orrs	r1, r5
   183f0:	9d05      	ldr	r5, [sp, #20]
   183f2:	464f      	mov	r7, r9
   183f4:	002a      	movs	r2, r5
   183f6:	040b      	lsls	r3, r1, #16
   183f8:	0c08      	lsrs	r0, r1, #16
   183fa:	0c1b      	lsrs	r3, r3, #16
   183fc:	435a      	muls	r2, r3
   183fe:	4345      	muls	r5, r0
   18400:	437b      	muls	r3, r7
   18402:	4378      	muls	r0, r7
   18404:	195b      	adds	r3, r3, r5
   18406:	0c17      	lsrs	r7, r2, #16
   18408:	18fb      	adds	r3, r7, r3
   1840a:	429d      	cmp	r5, r3
   1840c:	d903      	bls.n	18416 <__aeabi_ddiv+0x3ba>
   1840e:	2580      	movs	r5, #128	; 0x80
   18410:	026d      	lsls	r5, r5, #9
   18412:	46ac      	mov	ip, r5
   18414:	4460      	add	r0, ip
   18416:	0c1d      	lsrs	r5, r3, #16
   18418:	0412      	lsls	r2, r2, #16
   1841a:	041b      	lsls	r3, r3, #16
   1841c:	0c12      	lsrs	r2, r2, #16
   1841e:	1828      	adds	r0, r5, r0
   18420:	189b      	adds	r3, r3, r2
   18422:	4286      	cmp	r6, r0
   18424:	d200      	bcs.n	18428 <__aeabi_ddiv+0x3cc>
   18426:	e093      	b.n	18550 <__aeabi_ddiv+0x4f4>
   18428:	d100      	bne.n	1842c <__aeabi_ddiv+0x3d0>
   1842a:	e08e      	b.n	1854a <__aeabi_ddiv+0x4ee>
   1842c:	2301      	movs	r3, #1
   1842e:	4319      	orrs	r1, r3
   18430:	4ba0      	ldr	r3, [pc, #640]	; (186b4 <__aeabi_ddiv+0x658>)
   18432:	18e3      	adds	r3, r4, r3
   18434:	2b00      	cmp	r3, #0
   18436:	dc00      	bgt.n	1843a <__aeabi_ddiv+0x3de>
   18438:	e099      	b.n	1856e <__aeabi_ddiv+0x512>
   1843a:	074a      	lsls	r2, r1, #29
   1843c:	d000      	beq.n	18440 <__aeabi_ddiv+0x3e4>
   1843e:	e09e      	b.n	1857e <__aeabi_ddiv+0x522>
   18440:	465a      	mov	r2, fp
   18442:	01d2      	lsls	r2, r2, #7
   18444:	d506      	bpl.n	18454 <__aeabi_ddiv+0x3f8>
   18446:	465a      	mov	r2, fp
   18448:	4b9b      	ldr	r3, [pc, #620]	; (186b8 <__aeabi_ddiv+0x65c>)
   1844a:	401a      	ands	r2, r3
   1844c:	2380      	movs	r3, #128	; 0x80
   1844e:	4693      	mov	fp, r2
   18450:	00db      	lsls	r3, r3, #3
   18452:	18e3      	adds	r3, r4, r3
   18454:	4a99      	ldr	r2, [pc, #612]	; (186bc <__aeabi_ddiv+0x660>)
   18456:	4293      	cmp	r3, r2
   18458:	dd68      	ble.n	1852c <__aeabi_ddiv+0x4d0>
   1845a:	2301      	movs	r3, #1
   1845c:	9a02      	ldr	r2, [sp, #8]
   1845e:	4c98      	ldr	r4, [pc, #608]	; (186c0 <__aeabi_ddiv+0x664>)
   18460:	401a      	ands	r2, r3
   18462:	2300      	movs	r3, #0
   18464:	4694      	mov	ip, r2
   18466:	4698      	mov	r8, r3
   18468:	2200      	movs	r2, #0
   1846a:	e6c5      	b.n	181f8 <__aeabi_ddiv+0x19c>
   1846c:	2280      	movs	r2, #128	; 0x80
   1846e:	464b      	mov	r3, r9
   18470:	0312      	lsls	r2, r2, #12
   18472:	4213      	tst	r3, r2
   18474:	d00a      	beq.n	1848c <__aeabi_ddiv+0x430>
   18476:	465b      	mov	r3, fp
   18478:	4213      	tst	r3, r2
   1847a:	d106      	bne.n	1848a <__aeabi_ddiv+0x42e>
   1847c:	431a      	orrs	r2, r3
   1847e:	0312      	lsls	r2, r2, #12
   18480:	0b12      	lsrs	r2, r2, #12
   18482:	46ac      	mov	ip, r5
   18484:	4688      	mov	r8, r1
   18486:	4c8e      	ldr	r4, [pc, #568]	; (186c0 <__aeabi_ddiv+0x664>)
   18488:	e6b6      	b.n	181f8 <__aeabi_ddiv+0x19c>
   1848a:	464b      	mov	r3, r9
   1848c:	431a      	orrs	r2, r3
   1848e:	0312      	lsls	r2, r2, #12
   18490:	0b12      	lsrs	r2, r2, #12
   18492:	46bc      	mov	ip, r7
   18494:	4c8a      	ldr	r4, [pc, #552]	; (186c0 <__aeabi_ddiv+0x664>)
   18496:	e6af      	b.n	181f8 <__aeabi_ddiv+0x19c>
   18498:	0003      	movs	r3, r0
   1849a:	465a      	mov	r2, fp
   1849c:	3b28      	subs	r3, #40	; 0x28
   1849e:	409a      	lsls	r2, r3
   184a0:	2300      	movs	r3, #0
   184a2:	4691      	mov	r9, r2
   184a4:	4698      	mov	r8, r3
   184a6:	e657      	b.n	18158 <__aeabi_ddiv+0xfc>
   184a8:	4658      	mov	r0, fp
   184aa:	f001 f8a1 	bl	195f0 <__clzsi2>
   184ae:	3020      	adds	r0, #32
   184b0:	e640      	b.n	18134 <__aeabi_ddiv+0xd8>
   184b2:	0003      	movs	r3, r0
   184b4:	4652      	mov	r2, sl
   184b6:	3b28      	subs	r3, #40	; 0x28
   184b8:	409a      	lsls	r2, r3
   184ba:	2100      	movs	r1, #0
   184bc:	4693      	mov	fp, r2
   184be:	e677      	b.n	181b0 <__aeabi_ddiv+0x154>
   184c0:	f001 f896 	bl	195f0 <__clzsi2>
   184c4:	3020      	adds	r0, #32
   184c6:	e65f      	b.n	18188 <__aeabi_ddiv+0x12c>
   184c8:	4588      	cmp	r8, r1
   184ca:	d200      	bcs.n	184ce <__aeabi_ddiv+0x472>
   184cc:	e6c7      	b.n	1825e <__aeabi_ddiv+0x202>
   184ce:	464b      	mov	r3, r9
   184d0:	07de      	lsls	r6, r3, #31
   184d2:	085d      	lsrs	r5, r3, #1
   184d4:	4643      	mov	r3, r8
   184d6:	085b      	lsrs	r3, r3, #1
   184d8:	431e      	orrs	r6, r3
   184da:	4643      	mov	r3, r8
   184dc:	07db      	lsls	r3, r3, #31
   184de:	469a      	mov	sl, r3
   184e0:	e6c2      	b.n	18268 <__aeabi_ddiv+0x20c>
   184e2:	2500      	movs	r5, #0
   184e4:	4592      	cmp	sl, r2
   184e6:	d300      	bcc.n	184ea <__aeabi_ddiv+0x48e>
   184e8:	e733      	b.n	18352 <__aeabi_ddiv+0x2f6>
   184ea:	9e03      	ldr	r6, [sp, #12]
   184ec:	4659      	mov	r1, fp
   184ee:	46b4      	mov	ip, r6
   184f0:	44e2      	add	sl, ip
   184f2:	45b2      	cmp	sl, r6
   184f4:	41ad      	sbcs	r5, r5
   184f6:	426d      	negs	r5, r5
   184f8:	4445      	add	r5, r8
   184fa:	18eb      	adds	r3, r5, r3
   184fc:	3901      	subs	r1, #1
   184fe:	4598      	cmp	r8, r3
   18500:	d207      	bcs.n	18512 <__aeabi_ddiv+0x4b6>
   18502:	4298      	cmp	r0, r3
   18504:	d900      	bls.n	18508 <__aeabi_ddiv+0x4ac>
   18506:	e07f      	b.n	18608 <__aeabi_ddiv+0x5ac>
   18508:	d100      	bne.n	1850c <__aeabi_ddiv+0x4b0>
   1850a:	e0bc      	b.n	18686 <__aeabi_ddiv+0x62a>
   1850c:	1a1d      	subs	r5, r3, r0
   1850e:	468b      	mov	fp, r1
   18510:	e71f      	b.n	18352 <__aeabi_ddiv+0x2f6>
   18512:	4598      	cmp	r8, r3
   18514:	d1fa      	bne.n	1850c <__aeabi_ddiv+0x4b0>
   18516:	9d03      	ldr	r5, [sp, #12]
   18518:	4555      	cmp	r5, sl
   1851a:	d9f2      	bls.n	18502 <__aeabi_ddiv+0x4a6>
   1851c:	4643      	mov	r3, r8
   1851e:	468b      	mov	fp, r1
   18520:	1a1d      	subs	r5, r3, r0
   18522:	e716      	b.n	18352 <__aeabi_ddiv+0x2f6>
   18524:	469b      	mov	fp, r3
   18526:	e6ca      	b.n	182be <__aeabi_ddiv+0x262>
   18528:	0015      	movs	r5, r2
   1852a:	e6e7      	b.n	182fc <__aeabi_ddiv+0x2a0>
   1852c:	465a      	mov	r2, fp
   1852e:	08c9      	lsrs	r1, r1, #3
   18530:	0752      	lsls	r2, r2, #29
   18532:	430a      	orrs	r2, r1
   18534:	055b      	lsls	r3, r3, #21
   18536:	4690      	mov	r8, r2
   18538:	0d5c      	lsrs	r4, r3, #21
   1853a:	465a      	mov	r2, fp
   1853c:	2301      	movs	r3, #1
   1853e:	9902      	ldr	r1, [sp, #8]
   18540:	0252      	lsls	r2, r2, #9
   18542:	4019      	ands	r1, r3
   18544:	0b12      	lsrs	r2, r2, #12
   18546:	468c      	mov	ip, r1
   18548:	e656      	b.n	181f8 <__aeabi_ddiv+0x19c>
   1854a:	2b00      	cmp	r3, #0
   1854c:	d100      	bne.n	18550 <__aeabi_ddiv+0x4f4>
   1854e:	e76f      	b.n	18430 <__aeabi_ddiv+0x3d4>
   18550:	4446      	add	r6, r8
   18552:	1e4a      	subs	r2, r1, #1
   18554:	45b0      	cmp	r8, r6
   18556:	d929      	bls.n	185ac <__aeabi_ddiv+0x550>
   18558:	0011      	movs	r1, r2
   1855a:	4286      	cmp	r6, r0
   1855c:	d000      	beq.n	18560 <__aeabi_ddiv+0x504>
   1855e:	e765      	b.n	1842c <__aeabi_ddiv+0x3d0>
   18560:	9a03      	ldr	r2, [sp, #12]
   18562:	4293      	cmp	r3, r2
   18564:	d000      	beq.n	18568 <__aeabi_ddiv+0x50c>
   18566:	e761      	b.n	1842c <__aeabi_ddiv+0x3d0>
   18568:	e762      	b.n	18430 <__aeabi_ddiv+0x3d4>
   1856a:	2101      	movs	r1, #1
   1856c:	4249      	negs	r1, r1
   1856e:	2001      	movs	r0, #1
   18570:	1ac2      	subs	r2, r0, r3
   18572:	2a38      	cmp	r2, #56	; 0x38
   18574:	dd21      	ble.n	185ba <__aeabi_ddiv+0x55e>
   18576:	9b02      	ldr	r3, [sp, #8]
   18578:	4003      	ands	r3, r0
   1857a:	469c      	mov	ip, r3
   1857c:	e638      	b.n	181f0 <__aeabi_ddiv+0x194>
   1857e:	220f      	movs	r2, #15
   18580:	400a      	ands	r2, r1
   18582:	2a04      	cmp	r2, #4
   18584:	d100      	bne.n	18588 <__aeabi_ddiv+0x52c>
   18586:	e75b      	b.n	18440 <__aeabi_ddiv+0x3e4>
   18588:	000a      	movs	r2, r1
   1858a:	1d11      	adds	r1, r2, #4
   1858c:	4291      	cmp	r1, r2
   1858e:	4192      	sbcs	r2, r2
   18590:	4252      	negs	r2, r2
   18592:	4493      	add	fp, r2
   18594:	e754      	b.n	18440 <__aeabi_ddiv+0x3e4>
   18596:	4b47      	ldr	r3, [pc, #284]	; (186b4 <__aeabi_ddiv+0x658>)
   18598:	18e3      	adds	r3, r4, r3
   1859a:	2b00      	cmp	r3, #0
   1859c:	dde5      	ble.n	1856a <__aeabi_ddiv+0x50e>
   1859e:	2201      	movs	r2, #1
   185a0:	4252      	negs	r2, r2
   185a2:	e7f2      	b.n	1858a <__aeabi_ddiv+0x52e>
   185a4:	001d      	movs	r5, r3
   185a6:	e6fa      	b.n	1839e <__aeabi_ddiv+0x342>
   185a8:	469a      	mov	sl, r3
   185aa:	e71c      	b.n	183e6 <__aeabi_ddiv+0x38a>
   185ac:	42b0      	cmp	r0, r6
   185ae:	d839      	bhi.n	18624 <__aeabi_ddiv+0x5c8>
   185b0:	d06e      	beq.n	18690 <__aeabi_ddiv+0x634>
   185b2:	0011      	movs	r1, r2
   185b4:	e73a      	b.n	1842c <__aeabi_ddiv+0x3d0>
   185b6:	9302      	str	r3, [sp, #8]
   185b8:	e73a      	b.n	18430 <__aeabi_ddiv+0x3d4>
   185ba:	2a1f      	cmp	r2, #31
   185bc:	dc3c      	bgt.n	18638 <__aeabi_ddiv+0x5dc>
   185be:	2320      	movs	r3, #32
   185c0:	1a9b      	subs	r3, r3, r2
   185c2:	000c      	movs	r4, r1
   185c4:	4658      	mov	r0, fp
   185c6:	4099      	lsls	r1, r3
   185c8:	4098      	lsls	r0, r3
   185ca:	1e4b      	subs	r3, r1, #1
   185cc:	4199      	sbcs	r1, r3
   185ce:	465b      	mov	r3, fp
   185d0:	40d4      	lsrs	r4, r2
   185d2:	40d3      	lsrs	r3, r2
   185d4:	4320      	orrs	r0, r4
   185d6:	4308      	orrs	r0, r1
   185d8:	001a      	movs	r2, r3
   185da:	0743      	lsls	r3, r0, #29
   185dc:	d009      	beq.n	185f2 <__aeabi_ddiv+0x596>
   185de:	230f      	movs	r3, #15
   185e0:	4003      	ands	r3, r0
   185e2:	2b04      	cmp	r3, #4
   185e4:	d005      	beq.n	185f2 <__aeabi_ddiv+0x596>
   185e6:	0001      	movs	r1, r0
   185e8:	1d08      	adds	r0, r1, #4
   185ea:	4288      	cmp	r0, r1
   185ec:	419b      	sbcs	r3, r3
   185ee:	425b      	negs	r3, r3
   185f0:	18d2      	adds	r2, r2, r3
   185f2:	0213      	lsls	r3, r2, #8
   185f4:	d53a      	bpl.n	1866c <__aeabi_ddiv+0x610>
   185f6:	2301      	movs	r3, #1
   185f8:	9a02      	ldr	r2, [sp, #8]
   185fa:	2401      	movs	r4, #1
   185fc:	401a      	ands	r2, r3
   185fe:	2300      	movs	r3, #0
   18600:	4694      	mov	ip, r2
   18602:	4698      	mov	r8, r3
   18604:	2200      	movs	r2, #0
   18606:	e5f7      	b.n	181f8 <__aeabi_ddiv+0x19c>
   18608:	2102      	movs	r1, #2
   1860a:	4249      	negs	r1, r1
   1860c:	468c      	mov	ip, r1
   1860e:	9d03      	ldr	r5, [sp, #12]
   18610:	44e3      	add	fp, ip
   18612:	46ac      	mov	ip, r5
   18614:	44e2      	add	sl, ip
   18616:	45aa      	cmp	sl, r5
   18618:	41ad      	sbcs	r5, r5
   1861a:	426d      	negs	r5, r5
   1861c:	4445      	add	r5, r8
   1861e:	18ed      	adds	r5, r5, r3
   18620:	1a2d      	subs	r5, r5, r0
   18622:	e696      	b.n	18352 <__aeabi_ddiv+0x2f6>
   18624:	1e8a      	subs	r2, r1, #2
   18626:	9903      	ldr	r1, [sp, #12]
   18628:	004d      	lsls	r5, r1, #1
   1862a:	428d      	cmp	r5, r1
   1862c:	4189      	sbcs	r1, r1
   1862e:	4249      	negs	r1, r1
   18630:	4441      	add	r1, r8
   18632:	1876      	adds	r6, r6, r1
   18634:	9503      	str	r5, [sp, #12]
   18636:	e78f      	b.n	18558 <__aeabi_ddiv+0x4fc>
   18638:	201f      	movs	r0, #31
   1863a:	4240      	negs	r0, r0
   1863c:	1ac3      	subs	r3, r0, r3
   1863e:	4658      	mov	r0, fp
   18640:	40d8      	lsrs	r0, r3
   18642:	0003      	movs	r3, r0
   18644:	2a20      	cmp	r2, #32
   18646:	d028      	beq.n	1869a <__aeabi_ddiv+0x63e>
   18648:	2040      	movs	r0, #64	; 0x40
   1864a:	465d      	mov	r5, fp
   1864c:	1a82      	subs	r2, r0, r2
   1864e:	4095      	lsls	r5, r2
   18650:	4329      	orrs	r1, r5
   18652:	1e4a      	subs	r2, r1, #1
   18654:	4191      	sbcs	r1, r2
   18656:	4319      	orrs	r1, r3
   18658:	2307      	movs	r3, #7
   1865a:	2200      	movs	r2, #0
   1865c:	400b      	ands	r3, r1
   1865e:	d009      	beq.n	18674 <__aeabi_ddiv+0x618>
   18660:	230f      	movs	r3, #15
   18662:	2200      	movs	r2, #0
   18664:	400b      	ands	r3, r1
   18666:	0008      	movs	r0, r1
   18668:	2b04      	cmp	r3, #4
   1866a:	d1bd      	bne.n	185e8 <__aeabi_ddiv+0x58c>
   1866c:	0001      	movs	r1, r0
   1866e:	0753      	lsls	r3, r2, #29
   18670:	0252      	lsls	r2, r2, #9
   18672:	0b12      	lsrs	r2, r2, #12
   18674:	08c9      	lsrs	r1, r1, #3
   18676:	4319      	orrs	r1, r3
   18678:	2301      	movs	r3, #1
   1867a:	4688      	mov	r8, r1
   1867c:	9902      	ldr	r1, [sp, #8]
   1867e:	2400      	movs	r4, #0
   18680:	4019      	ands	r1, r3
   18682:	468c      	mov	ip, r1
   18684:	e5b8      	b.n	181f8 <__aeabi_ddiv+0x19c>
   18686:	4552      	cmp	r2, sl
   18688:	d8be      	bhi.n	18608 <__aeabi_ddiv+0x5ac>
   1868a:	468b      	mov	fp, r1
   1868c:	2500      	movs	r5, #0
   1868e:	e660      	b.n	18352 <__aeabi_ddiv+0x2f6>
   18690:	9d03      	ldr	r5, [sp, #12]
   18692:	429d      	cmp	r5, r3
   18694:	d3c6      	bcc.n	18624 <__aeabi_ddiv+0x5c8>
   18696:	0011      	movs	r1, r2
   18698:	e762      	b.n	18560 <__aeabi_ddiv+0x504>
   1869a:	2500      	movs	r5, #0
   1869c:	e7d8      	b.n	18650 <__aeabi_ddiv+0x5f4>
   1869e:	2280      	movs	r2, #128	; 0x80
   186a0:	465b      	mov	r3, fp
   186a2:	0312      	lsls	r2, r2, #12
   186a4:	431a      	orrs	r2, r3
   186a6:	9b01      	ldr	r3, [sp, #4]
   186a8:	0312      	lsls	r2, r2, #12
   186aa:	0b12      	lsrs	r2, r2, #12
   186ac:	469c      	mov	ip, r3
   186ae:	4688      	mov	r8, r1
   186b0:	4c03      	ldr	r4, [pc, #12]	; (186c0 <__aeabi_ddiv+0x664>)
   186b2:	e5a1      	b.n	181f8 <__aeabi_ddiv+0x19c>
   186b4:	000003ff 	.word	0x000003ff
   186b8:	feffffff 	.word	0xfeffffff
   186bc:	000007fe 	.word	0x000007fe
   186c0:	000007ff 	.word	0x000007ff

000186c4 <__eqdf2>:
   186c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   186c6:	464f      	mov	r7, r9
   186c8:	4646      	mov	r6, r8
   186ca:	46d6      	mov	lr, sl
   186cc:	005c      	lsls	r4, r3, #1
   186ce:	b5c0      	push	{r6, r7, lr}
   186d0:	031f      	lsls	r7, r3, #12
   186d2:	0fdb      	lsrs	r3, r3, #31
   186d4:	469a      	mov	sl, r3
   186d6:	4b17      	ldr	r3, [pc, #92]	; (18734 <__eqdf2+0x70>)
   186d8:	030e      	lsls	r6, r1, #12
   186da:	004d      	lsls	r5, r1, #1
   186dc:	4684      	mov	ip, r0
   186de:	4680      	mov	r8, r0
   186e0:	0b36      	lsrs	r6, r6, #12
   186e2:	0d6d      	lsrs	r5, r5, #21
   186e4:	0fc9      	lsrs	r1, r1, #31
   186e6:	4691      	mov	r9, r2
   186e8:	0b3f      	lsrs	r7, r7, #12
   186ea:	0d64      	lsrs	r4, r4, #21
   186ec:	2001      	movs	r0, #1
   186ee:	429d      	cmp	r5, r3
   186f0:	d008      	beq.n	18704 <__eqdf2+0x40>
   186f2:	429c      	cmp	r4, r3
   186f4:	d001      	beq.n	186fa <__eqdf2+0x36>
   186f6:	42a5      	cmp	r5, r4
   186f8:	d00b      	beq.n	18712 <__eqdf2+0x4e>
   186fa:	bc1c      	pop	{r2, r3, r4}
   186fc:	4690      	mov	r8, r2
   186fe:	4699      	mov	r9, r3
   18700:	46a2      	mov	sl, r4
   18702:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18704:	4663      	mov	r3, ip
   18706:	4333      	orrs	r3, r6
   18708:	d1f7      	bne.n	186fa <__eqdf2+0x36>
   1870a:	42ac      	cmp	r4, r5
   1870c:	d1f5      	bne.n	186fa <__eqdf2+0x36>
   1870e:	433a      	orrs	r2, r7
   18710:	d1f3      	bne.n	186fa <__eqdf2+0x36>
   18712:	2001      	movs	r0, #1
   18714:	42be      	cmp	r6, r7
   18716:	d1f0      	bne.n	186fa <__eqdf2+0x36>
   18718:	45c8      	cmp	r8, r9
   1871a:	d1ee      	bne.n	186fa <__eqdf2+0x36>
   1871c:	4551      	cmp	r1, sl
   1871e:	d007      	beq.n	18730 <__eqdf2+0x6c>
   18720:	2d00      	cmp	r5, #0
   18722:	d1ea      	bne.n	186fa <__eqdf2+0x36>
   18724:	4663      	mov	r3, ip
   18726:	431e      	orrs	r6, r3
   18728:	0030      	movs	r0, r6
   1872a:	1e46      	subs	r6, r0, #1
   1872c:	41b0      	sbcs	r0, r6
   1872e:	e7e4      	b.n	186fa <__eqdf2+0x36>
   18730:	2000      	movs	r0, #0
   18732:	e7e2      	b.n	186fa <__eqdf2+0x36>
   18734:	000007ff 	.word	0x000007ff

00018738 <__gedf2>:
   18738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1873a:	4645      	mov	r5, r8
   1873c:	46de      	mov	lr, fp
   1873e:	4657      	mov	r7, sl
   18740:	464e      	mov	r6, r9
   18742:	b5e0      	push	{r5, r6, r7, lr}
   18744:	031f      	lsls	r7, r3, #12
   18746:	0b3d      	lsrs	r5, r7, #12
   18748:	4f2c      	ldr	r7, [pc, #176]	; (187fc <__gedf2+0xc4>)
   1874a:	030e      	lsls	r6, r1, #12
   1874c:	004c      	lsls	r4, r1, #1
   1874e:	46ab      	mov	fp, r5
   18750:	005d      	lsls	r5, r3, #1
   18752:	4684      	mov	ip, r0
   18754:	0b36      	lsrs	r6, r6, #12
   18756:	0d64      	lsrs	r4, r4, #21
   18758:	0fc9      	lsrs	r1, r1, #31
   1875a:	4690      	mov	r8, r2
   1875c:	0d6d      	lsrs	r5, r5, #21
   1875e:	0fdb      	lsrs	r3, r3, #31
   18760:	42bc      	cmp	r4, r7
   18762:	d02a      	beq.n	187ba <__gedf2+0x82>
   18764:	4f25      	ldr	r7, [pc, #148]	; (187fc <__gedf2+0xc4>)
   18766:	42bd      	cmp	r5, r7
   18768:	d02d      	beq.n	187c6 <__gedf2+0x8e>
   1876a:	2c00      	cmp	r4, #0
   1876c:	d10f      	bne.n	1878e <__gedf2+0x56>
   1876e:	4330      	orrs	r0, r6
   18770:	0007      	movs	r7, r0
   18772:	4681      	mov	r9, r0
   18774:	4278      	negs	r0, r7
   18776:	4178      	adcs	r0, r7
   18778:	b2c0      	uxtb	r0, r0
   1877a:	2d00      	cmp	r5, #0
   1877c:	d117      	bne.n	187ae <__gedf2+0x76>
   1877e:	465f      	mov	r7, fp
   18780:	433a      	orrs	r2, r7
   18782:	d114      	bne.n	187ae <__gedf2+0x76>
   18784:	464b      	mov	r3, r9
   18786:	2000      	movs	r0, #0
   18788:	2b00      	cmp	r3, #0
   1878a:	d00a      	beq.n	187a2 <__gedf2+0x6a>
   1878c:	e006      	b.n	1879c <__gedf2+0x64>
   1878e:	2d00      	cmp	r5, #0
   18790:	d102      	bne.n	18798 <__gedf2+0x60>
   18792:	4658      	mov	r0, fp
   18794:	4302      	orrs	r2, r0
   18796:	d001      	beq.n	1879c <__gedf2+0x64>
   18798:	4299      	cmp	r1, r3
   1879a:	d018      	beq.n	187ce <__gedf2+0x96>
   1879c:	4248      	negs	r0, r1
   1879e:	2101      	movs	r1, #1
   187a0:	4308      	orrs	r0, r1
   187a2:	bc3c      	pop	{r2, r3, r4, r5}
   187a4:	4690      	mov	r8, r2
   187a6:	4699      	mov	r9, r3
   187a8:	46a2      	mov	sl, r4
   187aa:	46ab      	mov	fp, r5
   187ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   187ae:	2800      	cmp	r0, #0
   187b0:	d0f2      	beq.n	18798 <__gedf2+0x60>
   187b2:	2001      	movs	r0, #1
   187b4:	3b01      	subs	r3, #1
   187b6:	4318      	orrs	r0, r3
   187b8:	e7f3      	b.n	187a2 <__gedf2+0x6a>
   187ba:	0037      	movs	r7, r6
   187bc:	4307      	orrs	r7, r0
   187be:	d0d1      	beq.n	18764 <__gedf2+0x2c>
   187c0:	2002      	movs	r0, #2
   187c2:	4240      	negs	r0, r0
   187c4:	e7ed      	b.n	187a2 <__gedf2+0x6a>
   187c6:	465f      	mov	r7, fp
   187c8:	4317      	orrs	r7, r2
   187ca:	d0ce      	beq.n	1876a <__gedf2+0x32>
   187cc:	e7f8      	b.n	187c0 <__gedf2+0x88>
   187ce:	42ac      	cmp	r4, r5
   187d0:	dce4      	bgt.n	1879c <__gedf2+0x64>
   187d2:	da03      	bge.n	187dc <__gedf2+0xa4>
   187d4:	1e48      	subs	r0, r1, #1
   187d6:	2101      	movs	r1, #1
   187d8:	4308      	orrs	r0, r1
   187da:	e7e2      	b.n	187a2 <__gedf2+0x6a>
   187dc:	455e      	cmp	r6, fp
   187de:	d8dd      	bhi.n	1879c <__gedf2+0x64>
   187e0:	d006      	beq.n	187f0 <__gedf2+0xb8>
   187e2:	2000      	movs	r0, #0
   187e4:	455e      	cmp	r6, fp
   187e6:	d2dc      	bcs.n	187a2 <__gedf2+0x6a>
   187e8:	2301      	movs	r3, #1
   187ea:	1e48      	subs	r0, r1, #1
   187ec:	4318      	orrs	r0, r3
   187ee:	e7d8      	b.n	187a2 <__gedf2+0x6a>
   187f0:	45c4      	cmp	ip, r8
   187f2:	d8d3      	bhi.n	1879c <__gedf2+0x64>
   187f4:	2000      	movs	r0, #0
   187f6:	45c4      	cmp	ip, r8
   187f8:	d3f6      	bcc.n	187e8 <__gedf2+0xb0>
   187fa:	e7d2      	b.n	187a2 <__gedf2+0x6a>
   187fc:	000007ff 	.word	0x000007ff

00018800 <__ledf2>:
   18800:	b5f0      	push	{r4, r5, r6, r7, lr}
   18802:	464e      	mov	r6, r9
   18804:	4645      	mov	r5, r8
   18806:	46de      	mov	lr, fp
   18808:	4657      	mov	r7, sl
   1880a:	005c      	lsls	r4, r3, #1
   1880c:	b5e0      	push	{r5, r6, r7, lr}
   1880e:	031f      	lsls	r7, r3, #12
   18810:	0fdb      	lsrs	r3, r3, #31
   18812:	4699      	mov	r9, r3
   18814:	4b2a      	ldr	r3, [pc, #168]	; (188c0 <__ledf2+0xc0>)
   18816:	030e      	lsls	r6, r1, #12
   18818:	004d      	lsls	r5, r1, #1
   1881a:	0fc9      	lsrs	r1, r1, #31
   1881c:	4684      	mov	ip, r0
   1881e:	0b36      	lsrs	r6, r6, #12
   18820:	0d6d      	lsrs	r5, r5, #21
   18822:	468b      	mov	fp, r1
   18824:	4690      	mov	r8, r2
   18826:	0b3f      	lsrs	r7, r7, #12
   18828:	0d64      	lsrs	r4, r4, #21
   1882a:	429d      	cmp	r5, r3
   1882c:	d020      	beq.n	18870 <__ledf2+0x70>
   1882e:	4b24      	ldr	r3, [pc, #144]	; (188c0 <__ledf2+0xc0>)
   18830:	429c      	cmp	r4, r3
   18832:	d022      	beq.n	1887a <__ledf2+0x7a>
   18834:	2d00      	cmp	r5, #0
   18836:	d112      	bne.n	1885e <__ledf2+0x5e>
   18838:	4330      	orrs	r0, r6
   1883a:	4243      	negs	r3, r0
   1883c:	4143      	adcs	r3, r0
   1883e:	b2db      	uxtb	r3, r3
   18840:	2c00      	cmp	r4, #0
   18842:	d01f      	beq.n	18884 <__ledf2+0x84>
   18844:	2b00      	cmp	r3, #0
   18846:	d00c      	beq.n	18862 <__ledf2+0x62>
   18848:	464b      	mov	r3, r9
   1884a:	2001      	movs	r0, #1
   1884c:	3b01      	subs	r3, #1
   1884e:	4303      	orrs	r3, r0
   18850:	0018      	movs	r0, r3
   18852:	bc3c      	pop	{r2, r3, r4, r5}
   18854:	4690      	mov	r8, r2
   18856:	4699      	mov	r9, r3
   18858:	46a2      	mov	sl, r4
   1885a:	46ab      	mov	fp, r5
   1885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1885e:	2c00      	cmp	r4, #0
   18860:	d016      	beq.n	18890 <__ledf2+0x90>
   18862:	45cb      	cmp	fp, r9
   18864:	d017      	beq.n	18896 <__ledf2+0x96>
   18866:	465b      	mov	r3, fp
   18868:	4259      	negs	r1, r3
   1886a:	2301      	movs	r3, #1
   1886c:	430b      	orrs	r3, r1
   1886e:	e7ef      	b.n	18850 <__ledf2+0x50>
   18870:	0031      	movs	r1, r6
   18872:	2302      	movs	r3, #2
   18874:	4301      	orrs	r1, r0
   18876:	d1eb      	bne.n	18850 <__ledf2+0x50>
   18878:	e7d9      	b.n	1882e <__ledf2+0x2e>
   1887a:	0039      	movs	r1, r7
   1887c:	2302      	movs	r3, #2
   1887e:	4311      	orrs	r1, r2
   18880:	d1e6      	bne.n	18850 <__ledf2+0x50>
   18882:	e7d7      	b.n	18834 <__ledf2+0x34>
   18884:	433a      	orrs	r2, r7
   18886:	d1dd      	bne.n	18844 <__ledf2+0x44>
   18888:	2300      	movs	r3, #0
   1888a:	2800      	cmp	r0, #0
   1888c:	d0e0      	beq.n	18850 <__ledf2+0x50>
   1888e:	e7ea      	b.n	18866 <__ledf2+0x66>
   18890:	433a      	orrs	r2, r7
   18892:	d1e6      	bne.n	18862 <__ledf2+0x62>
   18894:	e7e7      	b.n	18866 <__ledf2+0x66>
   18896:	42a5      	cmp	r5, r4
   18898:	dce5      	bgt.n	18866 <__ledf2+0x66>
   1889a:	db05      	blt.n	188a8 <__ledf2+0xa8>
   1889c:	42be      	cmp	r6, r7
   1889e:	d8e2      	bhi.n	18866 <__ledf2+0x66>
   188a0:	d007      	beq.n	188b2 <__ledf2+0xb2>
   188a2:	2300      	movs	r3, #0
   188a4:	42be      	cmp	r6, r7
   188a6:	d2d3      	bcs.n	18850 <__ledf2+0x50>
   188a8:	4659      	mov	r1, fp
   188aa:	2301      	movs	r3, #1
   188ac:	3901      	subs	r1, #1
   188ae:	430b      	orrs	r3, r1
   188b0:	e7ce      	b.n	18850 <__ledf2+0x50>
   188b2:	45c4      	cmp	ip, r8
   188b4:	d8d7      	bhi.n	18866 <__ledf2+0x66>
   188b6:	2300      	movs	r3, #0
   188b8:	45c4      	cmp	ip, r8
   188ba:	d3f5      	bcc.n	188a8 <__ledf2+0xa8>
   188bc:	e7c8      	b.n	18850 <__ledf2+0x50>
   188be:	46c0      	nop			; (mov r8, r8)
   188c0:	000007ff 	.word	0x000007ff

000188c4 <__aeabi_dmul>:
   188c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   188c6:	4657      	mov	r7, sl
   188c8:	4645      	mov	r5, r8
   188ca:	46de      	mov	lr, fp
   188cc:	464e      	mov	r6, r9
   188ce:	b5e0      	push	{r5, r6, r7, lr}
   188d0:	030c      	lsls	r4, r1, #12
   188d2:	4698      	mov	r8, r3
   188d4:	004e      	lsls	r6, r1, #1
   188d6:	0b23      	lsrs	r3, r4, #12
   188d8:	b087      	sub	sp, #28
   188da:	0007      	movs	r7, r0
   188dc:	4692      	mov	sl, r2
   188de:	469b      	mov	fp, r3
   188e0:	0d76      	lsrs	r6, r6, #21
   188e2:	0fcd      	lsrs	r5, r1, #31
   188e4:	2e00      	cmp	r6, #0
   188e6:	d06b      	beq.n	189c0 <__aeabi_dmul+0xfc>
   188e8:	4b6d      	ldr	r3, [pc, #436]	; (18aa0 <__aeabi_dmul+0x1dc>)
   188ea:	429e      	cmp	r6, r3
   188ec:	d035      	beq.n	1895a <__aeabi_dmul+0x96>
   188ee:	2480      	movs	r4, #128	; 0x80
   188f0:	465b      	mov	r3, fp
   188f2:	0f42      	lsrs	r2, r0, #29
   188f4:	0424      	lsls	r4, r4, #16
   188f6:	00db      	lsls	r3, r3, #3
   188f8:	4314      	orrs	r4, r2
   188fa:	431c      	orrs	r4, r3
   188fc:	00c3      	lsls	r3, r0, #3
   188fe:	4699      	mov	r9, r3
   18900:	4b68      	ldr	r3, [pc, #416]	; (18aa4 <__aeabi_dmul+0x1e0>)
   18902:	46a3      	mov	fp, r4
   18904:	469c      	mov	ip, r3
   18906:	2300      	movs	r3, #0
   18908:	2700      	movs	r7, #0
   1890a:	4466      	add	r6, ip
   1890c:	9302      	str	r3, [sp, #8]
   1890e:	4643      	mov	r3, r8
   18910:	031c      	lsls	r4, r3, #12
   18912:	005a      	lsls	r2, r3, #1
   18914:	0fdb      	lsrs	r3, r3, #31
   18916:	4650      	mov	r0, sl
   18918:	0b24      	lsrs	r4, r4, #12
   1891a:	0d52      	lsrs	r2, r2, #21
   1891c:	4698      	mov	r8, r3
   1891e:	d100      	bne.n	18922 <__aeabi_dmul+0x5e>
   18920:	e076      	b.n	18a10 <__aeabi_dmul+0x14c>
   18922:	4b5f      	ldr	r3, [pc, #380]	; (18aa0 <__aeabi_dmul+0x1dc>)
   18924:	429a      	cmp	r2, r3
   18926:	d06d      	beq.n	18a04 <__aeabi_dmul+0x140>
   18928:	2380      	movs	r3, #128	; 0x80
   1892a:	0f41      	lsrs	r1, r0, #29
   1892c:	041b      	lsls	r3, r3, #16
   1892e:	430b      	orrs	r3, r1
   18930:	495c      	ldr	r1, [pc, #368]	; (18aa4 <__aeabi_dmul+0x1e0>)
   18932:	00e4      	lsls	r4, r4, #3
   18934:	468c      	mov	ip, r1
   18936:	431c      	orrs	r4, r3
   18938:	00c3      	lsls	r3, r0, #3
   1893a:	2000      	movs	r0, #0
   1893c:	4462      	add	r2, ip
   1893e:	4641      	mov	r1, r8
   18940:	18b6      	adds	r6, r6, r2
   18942:	4069      	eors	r1, r5
   18944:	1c72      	adds	r2, r6, #1
   18946:	9101      	str	r1, [sp, #4]
   18948:	4694      	mov	ip, r2
   1894a:	4307      	orrs	r7, r0
   1894c:	2f0f      	cmp	r7, #15
   1894e:	d900      	bls.n	18952 <__aeabi_dmul+0x8e>
   18950:	e0b0      	b.n	18ab4 <__aeabi_dmul+0x1f0>
   18952:	4a55      	ldr	r2, [pc, #340]	; (18aa8 <__aeabi_dmul+0x1e4>)
   18954:	00bf      	lsls	r7, r7, #2
   18956:	59d2      	ldr	r2, [r2, r7]
   18958:	4697      	mov	pc, r2
   1895a:	465b      	mov	r3, fp
   1895c:	4303      	orrs	r3, r0
   1895e:	4699      	mov	r9, r3
   18960:	d000      	beq.n	18964 <__aeabi_dmul+0xa0>
   18962:	e087      	b.n	18a74 <__aeabi_dmul+0x1b0>
   18964:	2300      	movs	r3, #0
   18966:	469b      	mov	fp, r3
   18968:	3302      	adds	r3, #2
   1896a:	2708      	movs	r7, #8
   1896c:	9302      	str	r3, [sp, #8]
   1896e:	e7ce      	b.n	1890e <__aeabi_dmul+0x4a>
   18970:	4642      	mov	r2, r8
   18972:	9201      	str	r2, [sp, #4]
   18974:	2802      	cmp	r0, #2
   18976:	d067      	beq.n	18a48 <__aeabi_dmul+0x184>
   18978:	2803      	cmp	r0, #3
   1897a:	d100      	bne.n	1897e <__aeabi_dmul+0xba>
   1897c:	e20e      	b.n	18d9c <__aeabi_dmul+0x4d8>
   1897e:	2801      	cmp	r0, #1
   18980:	d000      	beq.n	18984 <__aeabi_dmul+0xc0>
   18982:	e162      	b.n	18c4a <__aeabi_dmul+0x386>
   18984:	2300      	movs	r3, #0
   18986:	2400      	movs	r4, #0
   18988:	2200      	movs	r2, #0
   1898a:	4699      	mov	r9, r3
   1898c:	9901      	ldr	r1, [sp, #4]
   1898e:	4001      	ands	r1, r0
   18990:	b2cd      	uxtb	r5, r1
   18992:	2100      	movs	r1, #0
   18994:	0312      	lsls	r2, r2, #12
   18996:	0d0b      	lsrs	r3, r1, #20
   18998:	0b12      	lsrs	r2, r2, #12
   1899a:	051b      	lsls	r3, r3, #20
   1899c:	4313      	orrs	r3, r2
   1899e:	4a43      	ldr	r2, [pc, #268]	; (18aac <__aeabi_dmul+0x1e8>)
   189a0:	0524      	lsls	r4, r4, #20
   189a2:	4013      	ands	r3, r2
   189a4:	431c      	orrs	r4, r3
   189a6:	0064      	lsls	r4, r4, #1
   189a8:	07ed      	lsls	r5, r5, #31
   189aa:	0864      	lsrs	r4, r4, #1
   189ac:	432c      	orrs	r4, r5
   189ae:	4648      	mov	r0, r9
   189b0:	0021      	movs	r1, r4
   189b2:	b007      	add	sp, #28
   189b4:	bc3c      	pop	{r2, r3, r4, r5}
   189b6:	4690      	mov	r8, r2
   189b8:	4699      	mov	r9, r3
   189ba:	46a2      	mov	sl, r4
   189bc:	46ab      	mov	fp, r5
   189be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   189c0:	4303      	orrs	r3, r0
   189c2:	4699      	mov	r9, r3
   189c4:	d04f      	beq.n	18a66 <__aeabi_dmul+0x1a2>
   189c6:	465b      	mov	r3, fp
   189c8:	2b00      	cmp	r3, #0
   189ca:	d100      	bne.n	189ce <__aeabi_dmul+0x10a>
   189cc:	e189      	b.n	18ce2 <__aeabi_dmul+0x41e>
   189ce:	4658      	mov	r0, fp
   189d0:	f000 fe0e 	bl	195f0 <__clzsi2>
   189d4:	0003      	movs	r3, r0
   189d6:	3b0b      	subs	r3, #11
   189d8:	2b1c      	cmp	r3, #28
   189da:	dd00      	ble.n	189de <__aeabi_dmul+0x11a>
   189dc:	e17a      	b.n	18cd4 <__aeabi_dmul+0x410>
   189de:	221d      	movs	r2, #29
   189e0:	1ad3      	subs	r3, r2, r3
   189e2:	003a      	movs	r2, r7
   189e4:	0001      	movs	r1, r0
   189e6:	465c      	mov	r4, fp
   189e8:	40da      	lsrs	r2, r3
   189ea:	3908      	subs	r1, #8
   189ec:	408c      	lsls	r4, r1
   189ee:	0013      	movs	r3, r2
   189f0:	408f      	lsls	r7, r1
   189f2:	4323      	orrs	r3, r4
   189f4:	469b      	mov	fp, r3
   189f6:	46b9      	mov	r9, r7
   189f8:	2300      	movs	r3, #0
   189fa:	4e2d      	ldr	r6, [pc, #180]	; (18ab0 <__aeabi_dmul+0x1ec>)
   189fc:	2700      	movs	r7, #0
   189fe:	1a36      	subs	r6, r6, r0
   18a00:	9302      	str	r3, [sp, #8]
   18a02:	e784      	b.n	1890e <__aeabi_dmul+0x4a>
   18a04:	4653      	mov	r3, sl
   18a06:	4323      	orrs	r3, r4
   18a08:	d12a      	bne.n	18a60 <__aeabi_dmul+0x19c>
   18a0a:	2400      	movs	r4, #0
   18a0c:	2002      	movs	r0, #2
   18a0e:	e796      	b.n	1893e <__aeabi_dmul+0x7a>
   18a10:	4653      	mov	r3, sl
   18a12:	4323      	orrs	r3, r4
   18a14:	d020      	beq.n	18a58 <__aeabi_dmul+0x194>
   18a16:	2c00      	cmp	r4, #0
   18a18:	d100      	bne.n	18a1c <__aeabi_dmul+0x158>
   18a1a:	e157      	b.n	18ccc <__aeabi_dmul+0x408>
   18a1c:	0020      	movs	r0, r4
   18a1e:	f000 fde7 	bl	195f0 <__clzsi2>
   18a22:	0003      	movs	r3, r0
   18a24:	3b0b      	subs	r3, #11
   18a26:	2b1c      	cmp	r3, #28
   18a28:	dd00      	ble.n	18a2c <__aeabi_dmul+0x168>
   18a2a:	e149      	b.n	18cc0 <__aeabi_dmul+0x3fc>
   18a2c:	211d      	movs	r1, #29
   18a2e:	1acb      	subs	r3, r1, r3
   18a30:	4651      	mov	r1, sl
   18a32:	0002      	movs	r2, r0
   18a34:	40d9      	lsrs	r1, r3
   18a36:	4653      	mov	r3, sl
   18a38:	3a08      	subs	r2, #8
   18a3a:	4094      	lsls	r4, r2
   18a3c:	4093      	lsls	r3, r2
   18a3e:	430c      	orrs	r4, r1
   18a40:	4a1b      	ldr	r2, [pc, #108]	; (18ab0 <__aeabi_dmul+0x1ec>)
   18a42:	1a12      	subs	r2, r2, r0
   18a44:	2000      	movs	r0, #0
   18a46:	e77a      	b.n	1893e <__aeabi_dmul+0x7a>
   18a48:	2501      	movs	r5, #1
   18a4a:	9b01      	ldr	r3, [sp, #4]
   18a4c:	4c14      	ldr	r4, [pc, #80]	; (18aa0 <__aeabi_dmul+0x1dc>)
   18a4e:	401d      	ands	r5, r3
   18a50:	2300      	movs	r3, #0
   18a52:	2200      	movs	r2, #0
   18a54:	4699      	mov	r9, r3
   18a56:	e79c      	b.n	18992 <__aeabi_dmul+0xce>
   18a58:	2400      	movs	r4, #0
   18a5a:	2200      	movs	r2, #0
   18a5c:	2001      	movs	r0, #1
   18a5e:	e76e      	b.n	1893e <__aeabi_dmul+0x7a>
   18a60:	4653      	mov	r3, sl
   18a62:	2003      	movs	r0, #3
   18a64:	e76b      	b.n	1893e <__aeabi_dmul+0x7a>
   18a66:	2300      	movs	r3, #0
   18a68:	469b      	mov	fp, r3
   18a6a:	3301      	adds	r3, #1
   18a6c:	2704      	movs	r7, #4
   18a6e:	2600      	movs	r6, #0
   18a70:	9302      	str	r3, [sp, #8]
   18a72:	e74c      	b.n	1890e <__aeabi_dmul+0x4a>
   18a74:	2303      	movs	r3, #3
   18a76:	4681      	mov	r9, r0
   18a78:	270c      	movs	r7, #12
   18a7a:	9302      	str	r3, [sp, #8]
   18a7c:	e747      	b.n	1890e <__aeabi_dmul+0x4a>
   18a7e:	2280      	movs	r2, #128	; 0x80
   18a80:	2300      	movs	r3, #0
   18a82:	2500      	movs	r5, #0
   18a84:	0312      	lsls	r2, r2, #12
   18a86:	4699      	mov	r9, r3
   18a88:	4c05      	ldr	r4, [pc, #20]	; (18aa0 <__aeabi_dmul+0x1dc>)
   18a8a:	e782      	b.n	18992 <__aeabi_dmul+0xce>
   18a8c:	465c      	mov	r4, fp
   18a8e:	464b      	mov	r3, r9
   18a90:	9802      	ldr	r0, [sp, #8]
   18a92:	e76f      	b.n	18974 <__aeabi_dmul+0xb0>
   18a94:	465c      	mov	r4, fp
   18a96:	464b      	mov	r3, r9
   18a98:	9501      	str	r5, [sp, #4]
   18a9a:	9802      	ldr	r0, [sp, #8]
   18a9c:	e76a      	b.n	18974 <__aeabi_dmul+0xb0>
   18a9e:	46c0      	nop			; (mov r8, r8)
   18aa0:	000007ff 	.word	0x000007ff
   18aa4:	fffffc01 	.word	0xfffffc01
   18aa8:	000204ac 	.word	0x000204ac
   18aac:	800fffff 	.word	0x800fffff
   18ab0:	fffffc0d 	.word	0xfffffc0d
   18ab4:	464a      	mov	r2, r9
   18ab6:	4649      	mov	r1, r9
   18ab8:	0c17      	lsrs	r7, r2, #16
   18aba:	0c1a      	lsrs	r2, r3, #16
   18abc:	041b      	lsls	r3, r3, #16
   18abe:	0c1b      	lsrs	r3, r3, #16
   18ac0:	0408      	lsls	r0, r1, #16
   18ac2:	0019      	movs	r1, r3
   18ac4:	0c00      	lsrs	r0, r0, #16
   18ac6:	4341      	muls	r1, r0
   18ac8:	0015      	movs	r5, r2
   18aca:	4688      	mov	r8, r1
   18acc:	0019      	movs	r1, r3
   18ace:	437d      	muls	r5, r7
   18ad0:	4379      	muls	r1, r7
   18ad2:	9503      	str	r5, [sp, #12]
   18ad4:	4689      	mov	r9, r1
   18ad6:	0029      	movs	r1, r5
   18ad8:	0015      	movs	r5, r2
   18ada:	4345      	muls	r5, r0
   18adc:	444d      	add	r5, r9
   18ade:	9502      	str	r5, [sp, #8]
   18ae0:	4645      	mov	r5, r8
   18ae2:	0c2d      	lsrs	r5, r5, #16
   18ae4:	46aa      	mov	sl, r5
   18ae6:	9d02      	ldr	r5, [sp, #8]
   18ae8:	4455      	add	r5, sl
   18aea:	45a9      	cmp	r9, r5
   18aec:	d906      	bls.n	18afc <__aeabi_dmul+0x238>
   18aee:	468a      	mov	sl, r1
   18af0:	2180      	movs	r1, #128	; 0x80
   18af2:	0249      	lsls	r1, r1, #9
   18af4:	4689      	mov	r9, r1
   18af6:	44ca      	add	sl, r9
   18af8:	4651      	mov	r1, sl
   18afa:	9103      	str	r1, [sp, #12]
   18afc:	0c29      	lsrs	r1, r5, #16
   18afe:	9104      	str	r1, [sp, #16]
   18b00:	4641      	mov	r1, r8
   18b02:	0409      	lsls	r1, r1, #16
   18b04:	042d      	lsls	r5, r5, #16
   18b06:	0c09      	lsrs	r1, r1, #16
   18b08:	4688      	mov	r8, r1
   18b0a:	0029      	movs	r1, r5
   18b0c:	0c25      	lsrs	r5, r4, #16
   18b0e:	0424      	lsls	r4, r4, #16
   18b10:	4441      	add	r1, r8
   18b12:	0c24      	lsrs	r4, r4, #16
   18b14:	9105      	str	r1, [sp, #20]
   18b16:	0021      	movs	r1, r4
   18b18:	4341      	muls	r1, r0
   18b1a:	4688      	mov	r8, r1
   18b1c:	0021      	movs	r1, r4
   18b1e:	4379      	muls	r1, r7
   18b20:	468a      	mov	sl, r1
   18b22:	4368      	muls	r0, r5
   18b24:	4641      	mov	r1, r8
   18b26:	4450      	add	r0, sl
   18b28:	4681      	mov	r9, r0
   18b2a:	0c08      	lsrs	r0, r1, #16
   18b2c:	4448      	add	r0, r9
   18b2e:	436f      	muls	r7, r5
   18b30:	4582      	cmp	sl, r0
   18b32:	d903      	bls.n	18b3c <__aeabi_dmul+0x278>
   18b34:	2180      	movs	r1, #128	; 0x80
   18b36:	0249      	lsls	r1, r1, #9
   18b38:	4689      	mov	r9, r1
   18b3a:	444f      	add	r7, r9
   18b3c:	0c01      	lsrs	r1, r0, #16
   18b3e:	4689      	mov	r9, r1
   18b40:	0039      	movs	r1, r7
   18b42:	4449      	add	r1, r9
   18b44:	9102      	str	r1, [sp, #8]
   18b46:	4641      	mov	r1, r8
   18b48:	040f      	lsls	r7, r1, #16
   18b4a:	9904      	ldr	r1, [sp, #16]
   18b4c:	0c3f      	lsrs	r7, r7, #16
   18b4e:	4688      	mov	r8, r1
   18b50:	0400      	lsls	r0, r0, #16
   18b52:	19c0      	adds	r0, r0, r7
   18b54:	4480      	add	r8, r0
   18b56:	4641      	mov	r1, r8
   18b58:	9104      	str	r1, [sp, #16]
   18b5a:	4659      	mov	r1, fp
   18b5c:	0c0f      	lsrs	r7, r1, #16
   18b5e:	0409      	lsls	r1, r1, #16
   18b60:	0c09      	lsrs	r1, r1, #16
   18b62:	4688      	mov	r8, r1
   18b64:	4359      	muls	r1, r3
   18b66:	468a      	mov	sl, r1
   18b68:	0039      	movs	r1, r7
   18b6a:	4351      	muls	r1, r2
   18b6c:	4689      	mov	r9, r1
   18b6e:	4641      	mov	r1, r8
   18b70:	434a      	muls	r2, r1
   18b72:	4651      	mov	r1, sl
   18b74:	0c09      	lsrs	r1, r1, #16
   18b76:	468b      	mov	fp, r1
   18b78:	437b      	muls	r3, r7
   18b7a:	18d2      	adds	r2, r2, r3
   18b7c:	445a      	add	r2, fp
   18b7e:	4293      	cmp	r3, r2
   18b80:	d903      	bls.n	18b8a <__aeabi_dmul+0x2c6>
   18b82:	2380      	movs	r3, #128	; 0x80
   18b84:	025b      	lsls	r3, r3, #9
   18b86:	469b      	mov	fp, r3
   18b88:	44d9      	add	r9, fp
   18b8a:	4651      	mov	r1, sl
   18b8c:	0409      	lsls	r1, r1, #16
   18b8e:	0c09      	lsrs	r1, r1, #16
   18b90:	468a      	mov	sl, r1
   18b92:	4641      	mov	r1, r8
   18b94:	4361      	muls	r1, r4
   18b96:	437c      	muls	r4, r7
   18b98:	0c13      	lsrs	r3, r2, #16
   18b9a:	0412      	lsls	r2, r2, #16
   18b9c:	444b      	add	r3, r9
   18b9e:	4452      	add	r2, sl
   18ba0:	46a1      	mov	r9, r4
   18ba2:	468a      	mov	sl, r1
   18ba4:	003c      	movs	r4, r7
   18ba6:	4641      	mov	r1, r8
   18ba8:	436c      	muls	r4, r5
   18baa:	434d      	muls	r5, r1
   18bac:	4651      	mov	r1, sl
   18bae:	444d      	add	r5, r9
   18bb0:	0c0f      	lsrs	r7, r1, #16
   18bb2:	197d      	adds	r5, r7, r5
   18bb4:	45a9      	cmp	r9, r5
   18bb6:	d903      	bls.n	18bc0 <__aeabi_dmul+0x2fc>
   18bb8:	2180      	movs	r1, #128	; 0x80
   18bba:	0249      	lsls	r1, r1, #9
   18bbc:	4688      	mov	r8, r1
   18bbe:	4444      	add	r4, r8
   18bc0:	9f04      	ldr	r7, [sp, #16]
   18bc2:	9903      	ldr	r1, [sp, #12]
   18bc4:	46b8      	mov	r8, r7
   18bc6:	4441      	add	r1, r8
   18bc8:	468b      	mov	fp, r1
   18bca:	4583      	cmp	fp, r0
   18bcc:	4180      	sbcs	r0, r0
   18bce:	4241      	negs	r1, r0
   18bd0:	4688      	mov	r8, r1
   18bd2:	4651      	mov	r1, sl
   18bd4:	0408      	lsls	r0, r1, #16
   18bd6:	042f      	lsls	r7, r5, #16
   18bd8:	0c00      	lsrs	r0, r0, #16
   18bda:	183f      	adds	r7, r7, r0
   18bdc:	4658      	mov	r0, fp
   18bde:	9902      	ldr	r1, [sp, #8]
   18be0:	1810      	adds	r0, r2, r0
   18be2:	4689      	mov	r9, r1
   18be4:	4290      	cmp	r0, r2
   18be6:	4192      	sbcs	r2, r2
   18be8:	444f      	add	r7, r9
   18bea:	46ba      	mov	sl, r7
   18bec:	4252      	negs	r2, r2
   18bee:	4699      	mov	r9, r3
   18bf0:	4693      	mov	fp, r2
   18bf2:	44c2      	add	sl, r8
   18bf4:	44d1      	add	r9, sl
   18bf6:	44cb      	add	fp, r9
   18bf8:	428f      	cmp	r7, r1
   18bfa:	41bf      	sbcs	r7, r7
   18bfc:	45c2      	cmp	sl, r8
   18bfe:	4189      	sbcs	r1, r1
   18c00:	4599      	cmp	r9, r3
   18c02:	419b      	sbcs	r3, r3
   18c04:	4593      	cmp	fp, r2
   18c06:	4192      	sbcs	r2, r2
   18c08:	427f      	negs	r7, r7
   18c0a:	4249      	negs	r1, r1
   18c0c:	0c2d      	lsrs	r5, r5, #16
   18c0e:	4252      	negs	r2, r2
   18c10:	430f      	orrs	r7, r1
   18c12:	425b      	negs	r3, r3
   18c14:	4313      	orrs	r3, r2
   18c16:	197f      	adds	r7, r7, r5
   18c18:	18ff      	adds	r7, r7, r3
   18c1a:	465b      	mov	r3, fp
   18c1c:	193c      	adds	r4, r7, r4
   18c1e:	0ddb      	lsrs	r3, r3, #23
   18c20:	9a05      	ldr	r2, [sp, #20]
   18c22:	0264      	lsls	r4, r4, #9
   18c24:	431c      	orrs	r4, r3
   18c26:	0243      	lsls	r3, r0, #9
   18c28:	4313      	orrs	r3, r2
   18c2a:	1e5d      	subs	r5, r3, #1
   18c2c:	41ab      	sbcs	r3, r5
   18c2e:	465a      	mov	r2, fp
   18c30:	0dc0      	lsrs	r0, r0, #23
   18c32:	4303      	orrs	r3, r0
   18c34:	0252      	lsls	r2, r2, #9
   18c36:	4313      	orrs	r3, r2
   18c38:	01e2      	lsls	r2, r4, #7
   18c3a:	d556      	bpl.n	18cea <__aeabi_dmul+0x426>
   18c3c:	2001      	movs	r0, #1
   18c3e:	085a      	lsrs	r2, r3, #1
   18c40:	4003      	ands	r3, r0
   18c42:	4313      	orrs	r3, r2
   18c44:	07e2      	lsls	r2, r4, #31
   18c46:	4313      	orrs	r3, r2
   18c48:	0864      	lsrs	r4, r4, #1
   18c4a:	485a      	ldr	r0, [pc, #360]	; (18db4 <__aeabi_dmul+0x4f0>)
   18c4c:	4460      	add	r0, ip
   18c4e:	2800      	cmp	r0, #0
   18c50:	dd4d      	ble.n	18cee <__aeabi_dmul+0x42a>
   18c52:	075a      	lsls	r2, r3, #29
   18c54:	d009      	beq.n	18c6a <__aeabi_dmul+0x3a6>
   18c56:	220f      	movs	r2, #15
   18c58:	401a      	ands	r2, r3
   18c5a:	2a04      	cmp	r2, #4
   18c5c:	d005      	beq.n	18c6a <__aeabi_dmul+0x3a6>
   18c5e:	1d1a      	adds	r2, r3, #4
   18c60:	429a      	cmp	r2, r3
   18c62:	419b      	sbcs	r3, r3
   18c64:	425b      	negs	r3, r3
   18c66:	18e4      	adds	r4, r4, r3
   18c68:	0013      	movs	r3, r2
   18c6a:	01e2      	lsls	r2, r4, #7
   18c6c:	d504      	bpl.n	18c78 <__aeabi_dmul+0x3b4>
   18c6e:	2080      	movs	r0, #128	; 0x80
   18c70:	4a51      	ldr	r2, [pc, #324]	; (18db8 <__aeabi_dmul+0x4f4>)
   18c72:	00c0      	lsls	r0, r0, #3
   18c74:	4014      	ands	r4, r2
   18c76:	4460      	add	r0, ip
   18c78:	4a50      	ldr	r2, [pc, #320]	; (18dbc <__aeabi_dmul+0x4f8>)
   18c7a:	4290      	cmp	r0, r2
   18c7c:	dd00      	ble.n	18c80 <__aeabi_dmul+0x3bc>
   18c7e:	e6e3      	b.n	18a48 <__aeabi_dmul+0x184>
   18c80:	2501      	movs	r5, #1
   18c82:	08db      	lsrs	r3, r3, #3
   18c84:	0762      	lsls	r2, r4, #29
   18c86:	431a      	orrs	r2, r3
   18c88:	0264      	lsls	r4, r4, #9
   18c8a:	9b01      	ldr	r3, [sp, #4]
   18c8c:	4691      	mov	r9, r2
   18c8e:	0b22      	lsrs	r2, r4, #12
   18c90:	0544      	lsls	r4, r0, #21
   18c92:	0d64      	lsrs	r4, r4, #21
   18c94:	401d      	ands	r5, r3
   18c96:	e67c      	b.n	18992 <__aeabi_dmul+0xce>
   18c98:	2280      	movs	r2, #128	; 0x80
   18c9a:	4659      	mov	r1, fp
   18c9c:	0312      	lsls	r2, r2, #12
   18c9e:	4211      	tst	r1, r2
   18ca0:	d008      	beq.n	18cb4 <__aeabi_dmul+0x3f0>
   18ca2:	4214      	tst	r4, r2
   18ca4:	d106      	bne.n	18cb4 <__aeabi_dmul+0x3f0>
   18ca6:	4322      	orrs	r2, r4
   18ca8:	0312      	lsls	r2, r2, #12
   18caa:	0b12      	lsrs	r2, r2, #12
   18cac:	4645      	mov	r5, r8
   18cae:	4699      	mov	r9, r3
   18cb0:	4c43      	ldr	r4, [pc, #268]	; (18dc0 <__aeabi_dmul+0x4fc>)
   18cb2:	e66e      	b.n	18992 <__aeabi_dmul+0xce>
   18cb4:	465b      	mov	r3, fp
   18cb6:	431a      	orrs	r2, r3
   18cb8:	0312      	lsls	r2, r2, #12
   18cba:	0b12      	lsrs	r2, r2, #12
   18cbc:	4c40      	ldr	r4, [pc, #256]	; (18dc0 <__aeabi_dmul+0x4fc>)
   18cbe:	e668      	b.n	18992 <__aeabi_dmul+0xce>
   18cc0:	0003      	movs	r3, r0
   18cc2:	4654      	mov	r4, sl
   18cc4:	3b28      	subs	r3, #40	; 0x28
   18cc6:	409c      	lsls	r4, r3
   18cc8:	2300      	movs	r3, #0
   18cca:	e6b9      	b.n	18a40 <__aeabi_dmul+0x17c>
   18ccc:	f000 fc90 	bl	195f0 <__clzsi2>
   18cd0:	3020      	adds	r0, #32
   18cd2:	e6a6      	b.n	18a22 <__aeabi_dmul+0x15e>
   18cd4:	0003      	movs	r3, r0
   18cd6:	3b28      	subs	r3, #40	; 0x28
   18cd8:	409f      	lsls	r7, r3
   18cda:	2300      	movs	r3, #0
   18cdc:	46bb      	mov	fp, r7
   18cde:	4699      	mov	r9, r3
   18ce0:	e68a      	b.n	189f8 <__aeabi_dmul+0x134>
   18ce2:	f000 fc85 	bl	195f0 <__clzsi2>
   18ce6:	3020      	adds	r0, #32
   18ce8:	e674      	b.n	189d4 <__aeabi_dmul+0x110>
   18cea:	46b4      	mov	ip, r6
   18cec:	e7ad      	b.n	18c4a <__aeabi_dmul+0x386>
   18cee:	2501      	movs	r5, #1
   18cf0:	1a2a      	subs	r2, r5, r0
   18cf2:	2a38      	cmp	r2, #56	; 0x38
   18cf4:	dd06      	ble.n	18d04 <__aeabi_dmul+0x440>
   18cf6:	9b01      	ldr	r3, [sp, #4]
   18cf8:	2400      	movs	r4, #0
   18cfa:	401d      	ands	r5, r3
   18cfc:	2300      	movs	r3, #0
   18cfe:	2200      	movs	r2, #0
   18d00:	4699      	mov	r9, r3
   18d02:	e646      	b.n	18992 <__aeabi_dmul+0xce>
   18d04:	2a1f      	cmp	r2, #31
   18d06:	dc21      	bgt.n	18d4c <__aeabi_dmul+0x488>
   18d08:	2520      	movs	r5, #32
   18d0a:	0020      	movs	r0, r4
   18d0c:	1aad      	subs	r5, r5, r2
   18d0e:	001e      	movs	r6, r3
   18d10:	40ab      	lsls	r3, r5
   18d12:	40a8      	lsls	r0, r5
   18d14:	40d6      	lsrs	r6, r2
   18d16:	1e5d      	subs	r5, r3, #1
   18d18:	41ab      	sbcs	r3, r5
   18d1a:	4330      	orrs	r0, r6
   18d1c:	4318      	orrs	r0, r3
   18d1e:	40d4      	lsrs	r4, r2
   18d20:	0743      	lsls	r3, r0, #29
   18d22:	d009      	beq.n	18d38 <__aeabi_dmul+0x474>
   18d24:	230f      	movs	r3, #15
   18d26:	4003      	ands	r3, r0
   18d28:	2b04      	cmp	r3, #4
   18d2a:	d005      	beq.n	18d38 <__aeabi_dmul+0x474>
   18d2c:	0003      	movs	r3, r0
   18d2e:	1d18      	adds	r0, r3, #4
   18d30:	4298      	cmp	r0, r3
   18d32:	419b      	sbcs	r3, r3
   18d34:	425b      	negs	r3, r3
   18d36:	18e4      	adds	r4, r4, r3
   18d38:	0223      	lsls	r3, r4, #8
   18d3a:	d521      	bpl.n	18d80 <__aeabi_dmul+0x4bc>
   18d3c:	2501      	movs	r5, #1
   18d3e:	9b01      	ldr	r3, [sp, #4]
   18d40:	2401      	movs	r4, #1
   18d42:	401d      	ands	r5, r3
   18d44:	2300      	movs	r3, #0
   18d46:	2200      	movs	r2, #0
   18d48:	4699      	mov	r9, r3
   18d4a:	e622      	b.n	18992 <__aeabi_dmul+0xce>
   18d4c:	251f      	movs	r5, #31
   18d4e:	0021      	movs	r1, r4
   18d50:	426d      	negs	r5, r5
   18d52:	1a28      	subs	r0, r5, r0
   18d54:	40c1      	lsrs	r1, r0
   18d56:	0008      	movs	r0, r1
   18d58:	2a20      	cmp	r2, #32
   18d5a:	d01d      	beq.n	18d98 <__aeabi_dmul+0x4d4>
   18d5c:	355f      	adds	r5, #95	; 0x5f
   18d5e:	1aaa      	subs	r2, r5, r2
   18d60:	4094      	lsls	r4, r2
   18d62:	4323      	orrs	r3, r4
   18d64:	1e5c      	subs	r4, r3, #1
   18d66:	41a3      	sbcs	r3, r4
   18d68:	2507      	movs	r5, #7
   18d6a:	4303      	orrs	r3, r0
   18d6c:	401d      	ands	r5, r3
   18d6e:	2200      	movs	r2, #0
   18d70:	2d00      	cmp	r5, #0
   18d72:	d009      	beq.n	18d88 <__aeabi_dmul+0x4c4>
   18d74:	220f      	movs	r2, #15
   18d76:	2400      	movs	r4, #0
   18d78:	401a      	ands	r2, r3
   18d7a:	0018      	movs	r0, r3
   18d7c:	2a04      	cmp	r2, #4
   18d7e:	d1d6      	bne.n	18d2e <__aeabi_dmul+0x46a>
   18d80:	0003      	movs	r3, r0
   18d82:	0765      	lsls	r5, r4, #29
   18d84:	0264      	lsls	r4, r4, #9
   18d86:	0b22      	lsrs	r2, r4, #12
   18d88:	08db      	lsrs	r3, r3, #3
   18d8a:	432b      	orrs	r3, r5
   18d8c:	2501      	movs	r5, #1
   18d8e:	4699      	mov	r9, r3
   18d90:	9b01      	ldr	r3, [sp, #4]
   18d92:	2400      	movs	r4, #0
   18d94:	401d      	ands	r5, r3
   18d96:	e5fc      	b.n	18992 <__aeabi_dmul+0xce>
   18d98:	2400      	movs	r4, #0
   18d9a:	e7e2      	b.n	18d62 <__aeabi_dmul+0x49e>
   18d9c:	2280      	movs	r2, #128	; 0x80
   18d9e:	2501      	movs	r5, #1
   18da0:	0312      	lsls	r2, r2, #12
   18da2:	4322      	orrs	r2, r4
   18da4:	9901      	ldr	r1, [sp, #4]
   18da6:	0312      	lsls	r2, r2, #12
   18da8:	0b12      	lsrs	r2, r2, #12
   18daa:	400d      	ands	r5, r1
   18dac:	4699      	mov	r9, r3
   18dae:	4c04      	ldr	r4, [pc, #16]	; (18dc0 <__aeabi_dmul+0x4fc>)
   18db0:	e5ef      	b.n	18992 <__aeabi_dmul+0xce>
   18db2:	46c0      	nop			; (mov r8, r8)
   18db4:	000003ff 	.word	0x000003ff
   18db8:	feffffff 	.word	0xfeffffff
   18dbc:	000007fe 	.word	0x000007fe
   18dc0:	000007ff 	.word	0x000007ff

00018dc4 <__aeabi_dsub>:
   18dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18dc6:	4646      	mov	r6, r8
   18dc8:	46d6      	mov	lr, sl
   18dca:	464f      	mov	r7, r9
   18dcc:	030c      	lsls	r4, r1, #12
   18dce:	b5c0      	push	{r6, r7, lr}
   18dd0:	0fcd      	lsrs	r5, r1, #31
   18dd2:	004e      	lsls	r6, r1, #1
   18dd4:	0a61      	lsrs	r1, r4, #9
   18dd6:	0f44      	lsrs	r4, r0, #29
   18dd8:	430c      	orrs	r4, r1
   18dda:	00c1      	lsls	r1, r0, #3
   18ddc:	0058      	lsls	r0, r3, #1
   18dde:	0d40      	lsrs	r0, r0, #21
   18de0:	4684      	mov	ip, r0
   18de2:	468a      	mov	sl, r1
   18de4:	000f      	movs	r7, r1
   18de6:	0319      	lsls	r1, r3, #12
   18de8:	0f50      	lsrs	r0, r2, #29
   18dea:	0a49      	lsrs	r1, r1, #9
   18dec:	4301      	orrs	r1, r0
   18dee:	48c6      	ldr	r0, [pc, #792]	; (19108 <__aeabi_dsub+0x344>)
   18df0:	0d76      	lsrs	r6, r6, #21
   18df2:	46a8      	mov	r8, r5
   18df4:	0fdb      	lsrs	r3, r3, #31
   18df6:	00d2      	lsls	r2, r2, #3
   18df8:	4584      	cmp	ip, r0
   18dfa:	d100      	bne.n	18dfe <__aeabi_dsub+0x3a>
   18dfc:	e0d8      	b.n	18fb0 <__aeabi_dsub+0x1ec>
   18dfe:	2001      	movs	r0, #1
   18e00:	4043      	eors	r3, r0
   18e02:	42ab      	cmp	r3, r5
   18e04:	d100      	bne.n	18e08 <__aeabi_dsub+0x44>
   18e06:	e0a6      	b.n	18f56 <__aeabi_dsub+0x192>
   18e08:	4660      	mov	r0, ip
   18e0a:	1a35      	subs	r5, r6, r0
   18e0c:	2d00      	cmp	r5, #0
   18e0e:	dc00      	bgt.n	18e12 <__aeabi_dsub+0x4e>
   18e10:	e105      	b.n	1901e <__aeabi_dsub+0x25a>
   18e12:	2800      	cmp	r0, #0
   18e14:	d110      	bne.n	18e38 <__aeabi_dsub+0x74>
   18e16:	000b      	movs	r3, r1
   18e18:	4313      	orrs	r3, r2
   18e1a:	d100      	bne.n	18e1e <__aeabi_dsub+0x5a>
   18e1c:	e0d7      	b.n	18fce <__aeabi_dsub+0x20a>
   18e1e:	1e6b      	subs	r3, r5, #1
   18e20:	2b00      	cmp	r3, #0
   18e22:	d000      	beq.n	18e26 <__aeabi_dsub+0x62>
   18e24:	e14b      	b.n	190be <__aeabi_dsub+0x2fa>
   18e26:	4653      	mov	r3, sl
   18e28:	1a9f      	subs	r7, r3, r2
   18e2a:	45ba      	cmp	sl, r7
   18e2c:	4180      	sbcs	r0, r0
   18e2e:	1a64      	subs	r4, r4, r1
   18e30:	4240      	negs	r0, r0
   18e32:	1a24      	subs	r4, r4, r0
   18e34:	2601      	movs	r6, #1
   18e36:	e01e      	b.n	18e76 <__aeabi_dsub+0xb2>
   18e38:	4bb3      	ldr	r3, [pc, #716]	; (19108 <__aeabi_dsub+0x344>)
   18e3a:	429e      	cmp	r6, r3
   18e3c:	d048      	beq.n	18ed0 <__aeabi_dsub+0x10c>
   18e3e:	2380      	movs	r3, #128	; 0x80
   18e40:	041b      	lsls	r3, r3, #16
   18e42:	4319      	orrs	r1, r3
   18e44:	2d38      	cmp	r5, #56	; 0x38
   18e46:	dd00      	ble.n	18e4a <__aeabi_dsub+0x86>
   18e48:	e119      	b.n	1907e <__aeabi_dsub+0x2ba>
   18e4a:	2d1f      	cmp	r5, #31
   18e4c:	dd00      	ble.n	18e50 <__aeabi_dsub+0x8c>
   18e4e:	e14c      	b.n	190ea <__aeabi_dsub+0x326>
   18e50:	2320      	movs	r3, #32
   18e52:	000f      	movs	r7, r1
   18e54:	1b5b      	subs	r3, r3, r5
   18e56:	0010      	movs	r0, r2
   18e58:	409a      	lsls	r2, r3
   18e5a:	409f      	lsls	r7, r3
   18e5c:	40e8      	lsrs	r0, r5
   18e5e:	1e53      	subs	r3, r2, #1
   18e60:	419a      	sbcs	r2, r3
   18e62:	40e9      	lsrs	r1, r5
   18e64:	4307      	orrs	r7, r0
   18e66:	4317      	orrs	r7, r2
   18e68:	4653      	mov	r3, sl
   18e6a:	1bdf      	subs	r7, r3, r7
   18e6c:	1a61      	subs	r1, r4, r1
   18e6e:	45ba      	cmp	sl, r7
   18e70:	41a4      	sbcs	r4, r4
   18e72:	4264      	negs	r4, r4
   18e74:	1b0c      	subs	r4, r1, r4
   18e76:	0223      	lsls	r3, r4, #8
   18e78:	d400      	bmi.n	18e7c <__aeabi_dsub+0xb8>
   18e7a:	e0c5      	b.n	19008 <__aeabi_dsub+0x244>
   18e7c:	0264      	lsls	r4, r4, #9
   18e7e:	0a65      	lsrs	r5, r4, #9
   18e80:	2d00      	cmp	r5, #0
   18e82:	d100      	bne.n	18e86 <__aeabi_dsub+0xc2>
   18e84:	e0f6      	b.n	19074 <__aeabi_dsub+0x2b0>
   18e86:	0028      	movs	r0, r5
   18e88:	f000 fbb2 	bl	195f0 <__clzsi2>
   18e8c:	0003      	movs	r3, r0
   18e8e:	3b08      	subs	r3, #8
   18e90:	2b1f      	cmp	r3, #31
   18e92:	dd00      	ble.n	18e96 <__aeabi_dsub+0xd2>
   18e94:	e0e9      	b.n	1906a <__aeabi_dsub+0x2a6>
   18e96:	2220      	movs	r2, #32
   18e98:	003c      	movs	r4, r7
   18e9a:	1ad2      	subs	r2, r2, r3
   18e9c:	409d      	lsls	r5, r3
   18e9e:	40d4      	lsrs	r4, r2
   18ea0:	409f      	lsls	r7, r3
   18ea2:	4325      	orrs	r5, r4
   18ea4:	429e      	cmp	r6, r3
   18ea6:	dd00      	ble.n	18eaa <__aeabi_dsub+0xe6>
   18ea8:	e0db      	b.n	19062 <__aeabi_dsub+0x29e>
   18eaa:	1b9e      	subs	r6, r3, r6
   18eac:	1c73      	adds	r3, r6, #1
   18eae:	2b1f      	cmp	r3, #31
   18eb0:	dd00      	ble.n	18eb4 <__aeabi_dsub+0xf0>
   18eb2:	e10a      	b.n	190ca <__aeabi_dsub+0x306>
   18eb4:	2220      	movs	r2, #32
   18eb6:	0038      	movs	r0, r7
   18eb8:	1ad2      	subs	r2, r2, r3
   18eba:	0029      	movs	r1, r5
   18ebc:	4097      	lsls	r7, r2
   18ebe:	002c      	movs	r4, r5
   18ec0:	4091      	lsls	r1, r2
   18ec2:	40d8      	lsrs	r0, r3
   18ec4:	1e7a      	subs	r2, r7, #1
   18ec6:	4197      	sbcs	r7, r2
   18ec8:	40dc      	lsrs	r4, r3
   18eca:	2600      	movs	r6, #0
   18ecc:	4301      	orrs	r1, r0
   18ece:	430f      	orrs	r7, r1
   18ed0:	077b      	lsls	r3, r7, #29
   18ed2:	d009      	beq.n	18ee8 <__aeabi_dsub+0x124>
   18ed4:	230f      	movs	r3, #15
   18ed6:	403b      	ands	r3, r7
   18ed8:	2b04      	cmp	r3, #4
   18eda:	d005      	beq.n	18ee8 <__aeabi_dsub+0x124>
   18edc:	1d3b      	adds	r3, r7, #4
   18ede:	42bb      	cmp	r3, r7
   18ee0:	41bf      	sbcs	r7, r7
   18ee2:	427f      	negs	r7, r7
   18ee4:	19e4      	adds	r4, r4, r7
   18ee6:	001f      	movs	r7, r3
   18ee8:	0223      	lsls	r3, r4, #8
   18eea:	d525      	bpl.n	18f38 <__aeabi_dsub+0x174>
   18eec:	4b86      	ldr	r3, [pc, #536]	; (19108 <__aeabi_dsub+0x344>)
   18eee:	3601      	adds	r6, #1
   18ef0:	429e      	cmp	r6, r3
   18ef2:	d100      	bne.n	18ef6 <__aeabi_dsub+0x132>
   18ef4:	e0af      	b.n	19056 <__aeabi_dsub+0x292>
   18ef6:	4b85      	ldr	r3, [pc, #532]	; (1910c <__aeabi_dsub+0x348>)
   18ef8:	2501      	movs	r5, #1
   18efa:	401c      	ands	r4, r3
   18efc:	4643      	mov	r3, r8
   18efe:	0762      	lsls	r2, r4, #29
   18f00:	08ff      	lsrs	r7, r7, #3
   18f02:	0264      	lsls	r4, r4, #9
   18f04:	0576      	lsls	r6, r6, #21
   18f06:	4317      	orrs	r7, r2
   18f08:	0b24      	lsrs	r4, r4, #12
   18f0a:	0d76      	lsrs	r6, r6, #21
   18f0c:	401d      	ands	r5, r3
   18f0e:	2100      	movs	r1, #0
   18f10:	0324      	lsls	r4, r4, #12
   18f12:	0b23      	lsrs	r3, r4, #12
   18f14:	0d0c      	lsrs	r4, r1, #20
   18f16:	4a7e      	ldr	r2, [pc, #504]	; (19110 <__aeabi_dsub+0x34c>)
   18f18:	0524      	lsls	r4, r4, #20
   18f1a:	431c      	orrs	r4, r3
   18f1c:	4014      	ands	r4, r2
   18f1e:	0533      	lsls	r3, r6, #20
   18f20:	4323      	orrs	r3, r4
   18f22:	005b      	lsls	r3, r3, #1
   18f24:	07ed      	lsls	r5, r5, #31
   18f26:	085b      	lsrs	r3, r3, #1
   18f28:	432b      	orrs	r3, r5
   18f2a:	0038      	movs	r0, r7
   18f2c:	0019      	movs	r1, r3
   18f2e:	bc1c      	pop	{r2, r3, r4}
   18f30:	4690      	mov	r8, r2
   18f32:	4699      	mov	r9, r3
   18f34:	46a2      	mov	sl, r4
   18f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f38:	2501      	movs	r5, #1
   18f3a:	4643      	mov	r3, r8
   18f3c:	0762      	lsls	r2, r4, #29
   18f3e:	08ff      	lsrs	r7, r7, #3
   18f40:	4317      	orrs	r7, r2
   18f42:	08e4      	lsrs	r4, r4, #3
   18f44:	401d      	ands	r5, r3
   18f46:	4b70      	ldr	r3, [pc, #448]	; (19108 <__aeabi_dsub+0x344>)
   18f48:	429e      	cmp	r6, r3
   18f4a:	d036      	beq.n	18fba <__aeabi_dsub+0x1f6>
   18f4c:	0324      	lsls	r4, r4, #12
   18f4e:	0576      	lsls	r6, r6, #21
   18f50:	0b24      	lsrs	r4, r4, #12
   18f52:	0d76      	lsrs	r6, r6, #21
   18f54:	e7db      	b.n	18f0e <__aeabi_dsub+0x14a>
   18f56:	4663      	mov	r3, ip
   18f58:	1af3      	subs	r3, r6, r3
   18f5a:	2b00      	cmp	r3, #0
   18f5c:	dc00      	bgt.n	18f60 <__aeabi_dsub+0x19c>
   18f5e:	e094      	b.n	1908a <__aeabi_dsub+0x2c6>
   18f60:	4660      	mov	r0, ip
   18f62:	2800      	cmp	r0, #0
   18f64:	d035      	beq.n	18fd2 <__aeabi_dsub+0x20e>
   18f66:	4868      	ldr	r0, [pc, #416]	; (19108 <__aeabi_dsub+0x344>)
   18f68:	4286      	cmp	r6, r0
   18f6a:	d0b1      	beq.n	18ed0 <__aeabi_dsub+0x10c>
   18f6c:	2780      	movs	r7, #128	; 0x80
   18f6e:	043f      	lsls	r7, r7, #16
   18f70:	4339      	orrs	r1, r7
   18f72:	2b38      	cmp	r3, #56	; 0x38
   18f74:	dc00      	bgt.n	18f78 <__aeabi_dsub+0x1b4>
   18f76:	e0fd      	b.n	19174 <__aeabi_dsub+0x3b0>
   18f78:	430a      	orrs	r2, r1
   18f7a:	0017      	movs	r7, r2
   18f7c:	2100      	movs	r1, #0
   18f7e:	1e7a      	subs	r2, r7, #1
   18f80:	4197      	sbcs	r7, r2
   18f82:	4457      	add	r7, sl
   18f84:	4557      	cmp	r7, sl
   18f86:	4180      	sbcs	r0, r0
   18f88:	1909      	adds	r1, r1, r4
   18f8a:	4244      	negs	r4, r0
   18f8c:	190c      	adds	r4, r1, r4
   18f8e:	0223      	lsls	r3, r4, #8
   18f90:	d53a      	bpl.n	19008 <__aeabi_dsub+0x244>
   18f92:	4b5d      	ldr	r3, [pc, #372]	; (19108 <__aeabi_dsub+0x344>)
   18f94:	3601      	adds	r6, #1
   18f96:	429e      	cmp	r6, r3
   18f98:	d100      	bne.n	18f9c <__aeabi_dsub+0x1d8>
   18f9a:	e14b      	b.n	19234 <__aeabi_dsub+0x470>
   18f9c:	2201      	movs	r2, #1
   18f9e:	4b5b      	ldr	r3, [pc, #364]	; (1910c <__aeabi_dsub+0x348>)
   18fa0:	401c      	ands	r4, r3
   18fa2:	087b      	lsrs	r3, r7, #1
   18fa4:	4017      	ands	r7, r2
   18fa6:	431f      	orrs	r7, r3
   18fa8:	07e2      	lsls	r2, r4, #31
   18faa:	4317      	orrs	r7, r2
   18fac:	0864      	lsrs	r4, r4, #1
   18fae:	e78f      	b.n	18ed0 <__aeabi_dsub+0x10c>
   18fb0:	0008      	movs	r0, r1
   18fb2:	4310      	orrs	r0, r2
   18fb4:	d000      	beq.n	18fb8 <__aeabi_dsub+0x1f4>
   18fb6:	e724      	b.n	18e02 <__aeabi_dsub+0x3e>
   18fb8:	e721      	b.n	18dfe <__aeabi_dsub+0x3a>
   18fba:	0023      	movs	r3, r4
   18fbc:	433b      	orrs	r3, r7
   18fbe:	d100      	bne.n	18fc2 <__aeabi_dsub+0x1fe>
   18fc0:	e1b9      	b.n	19336 <__aeabi_dsub+0x572>
   18fc2:	2280      	movs	r2, #128	; 0x80
   18fc4:	0312      	lsls	r2, r2, #12
   18fc6:	4314      	orrs	r4, r2
   18fc8:	0324      	lsls	r4, r4, #12
   18fca:	0b24      	lsrs	r4, r4, #12
   18fcc:	e79f      	b.n	18f0e <__aeabi_dsub+0x14a>
   18fce:	002e      	movs	r6, r5
   18fd0:	e77e      	b.n	18ed0 <__aeabi_dsub+0x10c>
   18fd2:	0008      	movs	r0, r1
   18fd4:	4310      	orrs	r0, r2
   18fd6:	d100      	bne.n	18fda <__aeabi_dsub+0x216>
   18fd8:	e0ca      	b.n	19170 <__aeabi_dsub+0x3ac>
   18fda:	1e58      	subs	r0, r3, #1
   18fdc:	4684      	mov	ip, r0
   18fde:	2800      	cmp	r0, #0
   18fe0:	d000      	beq.n	18fe4 <__aeabi_dsub+0x220>
   18fe2:	e0e7      	b.n	191b4 <__aeabi_dsub+0x3f0>
   18fe4:	4452      	add	r2, sl
   18fe6:	4552      	cmp	r2, sl
   18fe8:	4180      	sbcs	r0, r0
   18fea:	1864      	adds	r4, r4, r1
   18fec:	4240      	negs	r0, r0
   18fee:	1824      	adds	r4, r4, r0
   18ff0:	0017      	movs	r7, r2
   18ff2:	2601      	movs	r6, #1
   18ff4:	0223      	lsls	r3, r4, #8
   18ff6:	d507      	bpl.n	19008 <__aeabi_dsub+0x244>
   18ff8:	2602      	movs	r6, #2
   18ffa:	e7cf      	b.n	18f9c <__aeabi_dsub+0x1d8>
   18ffc:	4664      	mov	r4, ip
   18ffe:	432c      	orrs	r4, r5
   19000:	d100      	bne.n	19004 <__aeabi_dsub+0x240>
   19002:	e1b3      	b.n	1936c <__aeabi_dsub+0x5a8>
   19004:	002c      	movs	r4, r5
   19006:	4667      	mov	r7, ip
   19008:	077b      	lsls	r3, r7, #29
   1900a:	d000      	beq.n	1900e <__aeabi_dsub+0x24a>
   1900c:	e762      	b.n	18ed4 <__aeabi_dsub+0x110>
   1900e:	0763      	lsls	r3, r4, #29
   19010:	08ff      	lsrs	r7, r7, #3
   19012:	431f      	orrs	r7, r3
   19014:	2501      	movs	r5, #1
   19016:	4643      	mov	r3, r8
   19018:	08e4      	lsrs	r4, r4, #3
   1901a:	401d      	ands	r5, r3
   1901c:	e793      	b.n	18f46 <__aeabi_dsub+0x182>
   1901e:	2d00      	cmp	r5, #0
   19020:	d178      	bne.n	19114 <__aeabi_dsub+0x350>
   19022:	1c75      	adds	r5, r6, #1
   19024:	056d      	lsls	r5, r5, #21
   19026:	0d6d      	lsrs	r5, r5, #21
   19028:	2d01      	cmp	r5, #1
   1902a:	dc00      	bgt.n	1902e <__aeabi_dsub+0x26a>
   1902c:	e0f2      	b.n	19214 <__aeabi_dsub+0x450>
   1902e:	4650      	mov	r0, sl
   19030:	1a80      	subs	r0, r0, r2
   19032:	4582      	cmp	sl, r0
   19034:	41bf      	sbcs	r7, r7
   19036:	1a65      	subs	r5, r4, r1
   19038:	427f      	negs	r7, r7
   1903a:	1bed      	subs	r5, r5, r7
   1903c:	4684      	mov	ip, r0
   1903e:	0228      	lsls	r0, r5, #8
   19040:	d400      	bmi.n	19044 <__aeabi_dsub+0x280>
   19042:	e08c      	b.n	1915e <__aeabi_dsub+0x39a>
   19044:	4650      	mov	r0, sl
   19046:	1a17      	subs	r7, r2, r0
   19048:	42ba      	cmp	r2, r7
   1904a:	4192      	sbcs	r2, r2
   1904c:	1b0c      	subs	r4, r1, r4
   1904e:	4255      	negs	r5, r2
   19050:	1b65      	subs	r5, r4, r5
   19052:	4698      	mov	r8, r3
   19054:	e714      	b.n	18e80 <__aeabi_dsub+0xbc>
   19056:	2501      	movs	r5, #1
   19058:	4643      	mov	r3, r8
   1905a:	2400      	movs	r4, #0
   1905c:	401d      	ands	r5, r3
   1905e:	2700      	movs	r7, #0
   19060:	e755      	b.n	18f0e <__aeabi_dsub+0x14a>
   19062:	4c2a      	ldr	r4, [pc, #168]	; (1910c <__aeabi_dsub+0x348>)
   19064:	1af6      	subs	r6, r6, r3
   19066:	402c      	ands	r4, r5
   19068:	e732      	b.n	18ed0 <__aeabi_dsub+0x10c>
   1906a:	003d      	movs	r5, r7
   1906c:	3828      	subs	r0, #40	; 0x28
   1906e:	4085      	lsls	r5, r0
   19070:	2700      	movs	r7, #0
   19072:	e717      	b.n	18ea4 <__aeabi_dsub+0xe0>
   19074:	0038      	movs	r0, r7
   19076:	f000 fabb 	bl	195f0 <__clzsi2>
   1907a:	3020      	adds	r0, #32
   1907c:	e706      	b.n	18e8c <__aeabi_dsub+0xc8>
   1907e:	430a      	orrs	r2, r1
   19080:	0017      	movs	r7, r2
   19082:	2100      	movs	r1, #0
   19084:	1e7a      	subs	r2, r7, #1
   19086:	4197      	sbcs	r7, r2
   19088:	e6ee      	b.n	18e68 <__aeabi_dsub+0xa4>
   1908a:	2b00      	cmp	r3, #0
   1908c:	d000      	beq.n	19090 <__aeabi_dsub+0x2cc>
   1908e:	e0e5      	b.n	1925c <__aeabi_dsub+0x498>
   19090:	1c73      	adds	r3, r6, #1
   19092:	469c      	mov	ip, r3
   19094:	055b      	lsls	r3, r3, #21
   19096:	0d5b      	lsrs	r3, r3, #21
   19098:	2b01      	cmp	r3, #1
   1909a:	dc00      	bgt.n	1909e <__aeabi_dsub+0x2da>
   1909c:	e09f      	b.n	191de <__aeabi_dsub+0x41a>
   1909e:	4b1a      	ldr	r3, [pc, #104]	; (19108 <__aeabi_dsub+0x344>)
   190a0:	459c      	cmp	ip, r3
   190a2:	d100      	bne.n	190a6 <__aeabi_dsub+0x2e2>
   190a4:	e0c5      	b.n	19232 <__aeabi_dsub+0x46e>
   190a6:	4452      	add	r2, sl
   190a8:	4552      	cmp	r2, sl
   190aa:	4180      	sbcs	r0, r0
   190ac:	1864      	adds	r4, r4, r1
   190ae:	4240      	negs	r0, r0
   190b0:	1824      	adds	r4, r4, r0
   190b2:	07e7      	lsls	r7, r4, #31
   190b4:	0852      	lsrs	r2, r2, #1
   190b6:	4317      	orrs	r7, r2
   190b8:	0864      	lsrs	r4, r4, #1
   190ba:	4666      	mov	r6, ip
   190bc:	e708      	b.n	18ed0 <__aeabi_dsub+0x10c>
   190be:	4812      	ldr	r0, [pc, #72]	; (19108 <__aeabi_dsub+0x344>)
   190c0:	4285      	cmp	r5, r0
   190c2:	d100      	bne.n	190c6 <__aeabi_dsub+0x302>
   190c4:	e085      	b.n	191d2 <__aeabi_dsub+0x40e>
   190c6:	001d      	movs	r5, r3
   190c8:	e6bc      	b.n	18e44 <__aeabi_dsub+0x80>
   190ca:	0029      	movs	r1, r5
   190cc:	3e1f      	subs	r6, #31
   190ce:	40f1      	lsrs	r1, r6
   190d0:	2b20      	cmp	r3, #32
   190d2:	d100      	bne.n	190d6 <__aeabi_dsub+0x312>
   190d4:	e07f      	b.n	191d6 <__aeabi_dsub+0x412>
   190d6:	2240      	movs	r2, #64	; 0x40
   190d8:	1ad3      	subs	r3, r2, r3
   190da:	409d      	lsls	r5, r3
   190dc:	432f      	orrs	r7, r5
   190de:	1e7d      	subs	r5, r7, #1
   190e0:	41af      	sbcs	r7, r5
   190e2:	2400      	movs	r4, #0
   190e4:	430f      	orrs	r7, r1
   190e6:	2600      	movs	r6, #0
   190e8:	e78e      	b.n	19008 <__aeabi_dsub+0x244>
   190ea:	002b      	movs	r3, r5
   190ec:	000f      	movs	r7, r1
   190ee:	3b20      	subs	r3, #32
   190f0:	40df      	lsrs	r7, r3
   190f2:	2d20      	cmp	r5, #32
   190f4:	d071      	beq.n	191da <__aeabi_dsub+0x416>
   190f6:	2340      	movs	r3, #64	; 0x40
   190f8:	1b5d      	subs	r5, r3, r5
   190fa:	40a9      	lsls	r1, r5
   190fc:	430a      	orrs	r2, r1
   190fe:	1e51      	subs	r1, r2, #1
   19100:	418a      	sbcs	r2, r1
   19102:	2100      	movs	r1, #0
   19104:	4317      	orrs	r7, r2
   19106:	e6af      	b.n	18e68 <__aeabi_dsub+0xa4>
   19108:	000007ff 	.word	0x000007ff
   1910c:	ff7fffff 	.word	0xff7fffff
   19110:	800fffff 	.word	0x800fffff
   19114:	2e00      	cmp	r6, #0
   19116:	d03e      	beq.n	19196 <__aeabi_dsub+0x3d2>
   19118:	4eb3      	ldr	r6, [pc, #716]	; (193e8 <__aeabi_dsub+0x624>)
   1911a:	45b4      	cmp	ip, r6
   1911c:	d045      	beq.n	191aa <__aeabi_dsub+0x3e6>
   1911e:	2680      	movs	r6, #128	; 0x80
   19120:	0436      	lsls	r6, r6, #16
   19122:	426d      	negs	r5, r5
   19124:	4334      	orrs	r4, r6
   19126:	2d38      	cmp	r5, #56	; 0x38
   19128:	dd00      	ble.n	1912c <__aeabi_dsub+0x368>
   1912a:	e0a8      	b.n	1927e <__aeabi_dsub+0x4ba>
   1912c:	2d1f      	cmp	r5, #31
   1912e:	dd00      	ble.n	19132 <__aeabi_dsub+0x36e>
   19130:	e11f      	b.n	19372 <__aeabi_dsub+0x5ae>
   19132:	2620      	movs	r6, #32
   19134:	0027      	movs	r7, r4
   19136:	4650      	mov	r0, sl
   19138:	1b76      	subs	r6, r6, r5
   1913a:	40b7      	lsls	r7, r6
   1913c:	40e8      	lsrs	r0, r5
   1913e:	4307      	orrs	r7, r0
   19140:	4650      	mov	r0, sl
   19142:	40b0      	lsls	r0, r6
   19144:	1e46      	subs	r6, r0, #1
   19146:	41b0      	sbcs	r0, r6
   19148:	40ec      	lsrs	r4, r5
   1914a:	4338      	orrs	r0, r7
   1914c:	1a17      	subs	r7, r2, r0
   1914e:	42ba      	cmp	r2, r7
   19150:	4192      	sbcs	r2, r2
   19152:	1b0c      	subs	r4, r1, r4
   19154:	4252      	negs	r2, r2
   19156:	1aa4      	subs	r4, r4, r2
   19158:	4666      	mov	r6, ip
   1915a:	4698      	mov	r8, r3
   1915c:	e68b      	b.n	18e76 <__aeabi_dsub+0xb2>
   1915e:	4664      	mov	r4, ip
   19160:	4667      	mov	r7, ip
   19162:	432c      	orrs	r4, r5
   19164:	d000      	beq.n	19168 <__aeabi_dsub+0x3a4>
   19166:	e68b      	b.n	18e80 <__aeabi_dsub+0xbc>
   19168:	2500      	movs	r5, #0
   1916a:	2600      	movs	r6, #0
   1916c:	2700      	movs	r7, #0
   1916e:	e6ea      	b.n	18f46 <__aeabi_dsub+0x182>
   19170:	001e      	movs	r6, r3
   19172:	e6ad      	b.n	18ed0 <__aeabi_dsub+0x10c>
   19174:	2b1f      	cmp	r3, #31
   19176:	dc60      	bgt.n	1923a <__aeabi_dsub+0x476>
   19178:	2720      	movs	r7, #32
   1917a:	1af8      	subs	r0, r7, r3
   1917c:	000f      	movs	r7, r1
   1917e:	4684      	mov	ip, r0
   19180:	4087      	lsls	r7, r0
   19182:	0010      	movs	r0, r2
   19184:	40d8      	lsrs	r0, r3
   19186:	4307      	orrs	r7, r0
   19188:	4660      	mov	r0, ip
   1918a:	4082      	lsls	r2, r0
   1918c:	1e50      	subs	r0, r2, #1
   1918e:	4182      	sbcs	r2, r0
   19190:	40d9      	lsrs	r1, r3
   19192:	4317      	orrs	r7, r2
   19194:	e6f5      	b.n	18f82 <__aeabi_dsub+0x1be>
   19196:	0026      	movs	r6, r4
   19198:	4650      	mov	r0, sl
   1919a:	4306      	orrs	r6, r0
   1919c:	d005      	beq.n	191aa <__aeabi_dsub+0x3e6>
   1919e:	43ed      	mvns	r5, r5
   191a0:	2d00      	cmp	r5, #0
   191a2:	d0d3      	beq.n	1914c <__aeabi_dsub+0x388>
   191a4:	4e90      	ldr	r6, [pc, #576]	; (193e8 <__aeabi_dsub+0x624>)
   191a6:	45b4      	cmp	ip, r6
   191a8:	d1bd      	bne.n	19126 <__aeabi_dsub+0x362>
   191aa:	000c      	movs	r4, r1
   191ac:	0017      	movs	r7, r2
   191ae:	4666      	mov	r6, ip
   191b0:	4698      	mov	r8, r3
   191b2:	e68d      	b.n	18ed0 <__aeabi_dsub+0x10c>
   191b4:	488c      	ldr	r0, [pc, #560]	; (193e8 <__aeabi_dsub+0x624>)
   191b6:	4283      	cmp	r3, r0
   191b8:	d00b      	beq.n	191d2 <__aeabi_dsub+0x40e>
   191ba:	4663      	mov	r3, ip
   191bc:	e6d9      	b.n	18f72 <__aeabi_dsub+0x1ae>
   191be:	2d00      	cmp	r5, #0
   191c0:	d000      	beq.n	191c4 <__aeabi_dsub+0x400>
   191c2:	e096      	b.n	192f2 <__aeabi_dsub+0x52e>
   191c4:	0008      	movs	r0, r1
   191c6:	4310      	orrs	r0, r2
   191c8:	d100      	bne.n	191cc <__aeabi_dsub+0x408>
   191ca:	e0e2      	b.n	19392 <__aeabi_dsub+0x5ce>
   191cc:	000c      	movs	r4, r1
   191ce:	0017      	movs	r7, r2
   191d0:	4698      	mov	r8, r3
   191d2:	4e85      	ldr	r6, [pc, #532]	; (193e8 <__aeabi_dsub+0x624>)
   191d4:	e67c      	b.n	18ed0 <__aeabi_dsub+0x10c>
   191d6:	2500      	movs	r5, #0
   191d8:	e780      	b.n	190dc <__aeabi_dsub+0x318>
   191da:	2100      	movs	r1, #0
   191dc:	e78e      	b.n	190fc <__aeabi_dsub+0x338>
   191de:	0023      	movs	r3, r4
   191e0:	4650      	mov	r0, sl
   191e2:	4303      	orrs	r3, r0
   191e4:	2e00      	cmp	r6, #0
   191e6:	d000      	beq.n	191ea <__aeabi_dsub+0x426>
   191e8:	e0a8      	b.n	1933c <__aeabi_dsub+0x578>
   191ea:	2b00      	cmp	r3, #0
   191ec:	d100      	bne.n	191f0 <__aeabi_dsub+0x42c>
   191ee:	e0de      	b.n	193ae <__aeabi_dsub+0x5ea>
   191f0:	000b      	movs	r3, r1
   191f2:	4313      	orrs	r3, r2
   191f4:	d100      	bne.n	191f8 <__aeabi_dsub+0x434>
   191f6:	e66b      	b.n	18ed0 <__aeabi_dsub+0x10c>
   191f8:	4452      	add	r2, sl
   191fa:	4552      	cmp	r2, sl
   191fc:	4180      	sbcs	r0, r0
   191fe:	1864      	adds	r4, r4, r1
   19200:	4240      	negs	r0, r0
   19202:	1824      	adds	r4, r4, r0
   19204:	0017      	movs	r7, r2
   19206:	0223      	lsls	r3, r4, #8
   19208:	d400      	bmi.n	1920c <__aeabi_dsub+0x448>
   1920a:	e6fd      	b.n	19008 <__aeabi_dsub+0x244>
   1920c:	4b77      	ldr	r3, [pc, #476]	; (193ec <__aeabi_dsub+0x628>)
   1920e:	4666      	mov	r6, ip
   19210:	401c      	ands	r4, r3
   19212:	e65d      	b.n	18ed0 <__aeabi_dsub+0x10c>
   19214:	0025      	movs	r5, r4
   19216:	4650      	mov	r0, sl
   19218:	4305      	orrs	r5, r0
   1921a:	2e00      	cmp	r6, #0
   1921c:	d1cf      	bne.n	191be <__aeabi_dsub+0x3fa>
   1921e:	2d00      	cmp	r5, #0
   19220:	d14f      	bne.n	192c2 <__aeabi_dsub+0x4fe>
   19222:	000c      	movs	r4, r1
   19224:	4314      	orrs	r4, r2
   19226:	d100      	bne.n	1922a <__aeabi_dsub+0x466>
   19228:	e0a0      	b.n	1936c <__aeabi_dsub+0x5a8>
   1922a:	000c      	movs	r4, r1
   1922c:	0017      	movs	r7, r2
   1922e:	4698      	mov	r8, r3
   19230:	e64e      	b.n	18ed0 <__aeabi_dsub+0x10c>
   19232:	4666      	mov	r6, ip
   19234:	2400      	movs	r4, #0
   19236:	2700      	movs	r7, #0
   19238:	e685      	b.n	18f46 <__aeabi_dsub+0x182>
   1923a:	001f      	movs	r7, r3
   1923c:	0008      	movs	r0, r1
   1923e:	3f20      	subs	r7, #32
   19240:	40f8      	lsrs	r0, r7
   19242:	0007      	movs	r7, r0
   19244:	2b20      	cmp	r3, #32
   19246:	d100      	bne.n	1924a <__aeabi_dsub+0x486>
   19248:	e08e      	b.n	19368 <__aeabi_dsub+0x5a4>
   1924a:	2040      	movs	r0, #64	; 0x40
   1924c:	1ac3      	subs	r3, r0, r3
   1924e:	4099      	lsls	r1, r3
   19250:	430a      	orrs	r2, r1
   19252:	1e51      	subs	r1, r2, #1
   19254:	418a      	sbcs	r2, r1
   19256:	2100      	movs	r1, #0
   19258:	4317      	orrs	r7, r2
   1925a:	e692      	b.n	18f82 <__aeabi_dsub+0x1be>
   1925c:	2e00      	cmp	r6, #0
   1925e:	d114      	bne.n	1928a <__aeabi_dsub+0x4c6>
   19260:	0026      	movs	r6, r4
   19262:	4650      	mov	r0, sl
   19264:	4306      	orrs	r6, r0
   19266:	d062      	beq.n	1932e <__aeabi_dsub+0x56a>
   19268:	43db      	mvns	r3, r3
   1926a:	2b00      	cmp	r3, #0
   1926c:	d15c      	bne.n	19328 <__aeabi_dsub+0x564>
   1926e:	1887      	adds	r7, r0, r2
   19270:	4297      	cmp	r7, r2
   19272:	4192      	sbcs	r2, r2
   19274:	1864      	adds	r4, r4, r1
   19276:	4252      	negs	r2, r2
   19278:	18a4      	adds	r4, r4, r2
   1927a:	4666      	mov	r6, ip
   1927c:	e687      	b.n	18f8e <__aeabi_dsub+0x1ca>
   1927e:	4650      	mov	r0, sl
   19280:	4320      	orrs	r0, r4
   19282:	1e44      	subs	r4, r0, #1
   19284:	41a0      	sbcs	r0, r4
   19286:	2400      	movs	r4, #0
   19288:	e760      	b.n	1914c <__aeabi_dsub+0x388>
   1928a:	4e57      	ldr	r6, [pc, #348]	; (193e8 <__aeabi_dsub+0x624>)
   1928c:	45b4      	cmp	ip, r6
   1928e:	d04e      	beq.n	1932e <__aeabi_dsub+0x56a>
   19290:	2680      	movs	r6, #128	; 0x80
   19292:	0436      	lsls	r6, r6, #16
   19294:	425b      	negs	r3, r3
   19296:	4334      	orrs	r4, r6
   19298:	2b38      	cmp	r3, #56	; 0x38
   1929a:	dd00      	ble.n	1929e <__aeabi_dsub+0x4da>
   1929c:	e07f      	b.n	1939e <__aeabi_dsub+0x5da>
   1929e:	2b1f      	cmp	r3, #31
   192a0:	dd00      	ble.n	192a4 <__aeabi_dsub+0x4e0>
   192a2:	e08b      	b.n	193bc <__aeabi_dsub+0x5f8>
   192a4:	2620      	movs	r6, #32
   192a6:	0027      	movs	r7, r4
   192a8:	4650      	mov	r0, sl
   192aa:	1af6      	subs	r6, r6, r3
   192ac:	40b7      	lsls	r7, r6
   192ae:	40d8      	lsrs	r0, r3
   192b0:	4307      	orrs	r7, r0
   192b2:	4650      	mov	r0, sl
   192b4:	40b0      	lsls	r0, r6
   192b6:	1e46      	subs	r6, r0, #1
   192b8:	41b0      	sbcs	r0, r6
   192ba:	4307      	orrs	r7, r0
   192bc:	40dc      	lsrs	r4, r3
   192be:	18bf      	adds	r7, r7, r2
   192c0:	e7d6      	b.n	19270 <__aeabi_dsub+0x4ac>
   192c2:	000d      	movs	r5, r1
   192c4:	4315      	orrs	r5, r2
   192c6:	d100      	bne.n	192ca <__aeabi_dsub+0x506>
   192c8:	e602      	b.n	18ed0 <__aeabi_dsub+0x10c>
   192ca:	4650      	mov	r0, sl
   192cc:	1a80      	subs	r0, r0, r2
   192ce:	4582      	cmp	sl, r0
   192d0:	41bf      	sbcs	r7, r7
   192d2:	1a65      	subs	r5, r4, r1
   192d4:	427f      	negs	r7, r7
   192d6:	1bed      	subs	r5, r5, r7
   192d8:	4684      	mov	ip, r0
   192da:	0228      	lsls	r0, r5, #8
   192dc:	d400      	bmi.n	192e0 <__aeabi_dsub+0x51c>
   192de:	e68d      	b.n	18ffc <__aeabi_dsub+0x238>
   192e0:	4650      	mov	r0, sl
   192e2:	1a17      	subs	r7, r2, r0
   192e4:	42ba      	cmp	r2, r7
   192e6:	4192      	sbcs	r2, r2
   192e8:	1b0c      	subs	r4, r1, r4
   192ea:	4252      	negs	r2, r2
   192ec:	1aa4      	subs	r4, r4, r2
   192ee:	4698      	mov	r8, r3
   192f0:	e5ee      	b.n	18ed0 <__aeabi_dsub+0x10c>
   192f2:	000d      	movs	r5, r1
   192f4:	4315      	orrs	r5, r2
   192f6:	d100      	bne.n	192fa <__aeabi_dsub+0x536>
   192f8:	e76b      	b.n	191d2 <__aeabi_dsub+0x40e>
   192fa:	4650      	mov	r0, sl
   192fc:	0767      	lsls	r7, r4, #29
   192fe:	08c0      	lsrs	r0, r0, #3
   19300:	4307      	orrs	r7, r0
   19302:	2080      	movs	r0, #128	; 0x80
   19304:	08e4      	lsrs	r4, r4, #3
   19306:	0300      	lsls	r0, r0, #12
   19308:	4204      	tst	r4, r0
   1930a:	d007      	beq.n	1931c <__aeabi_dsub+0x558>
   1930c:	08cd      	lsrs	r5, r1, #3
   1930e:	4205      	tst	r5, r0
   19310:	d104      	bne.n	1931c <__aeabi_dsub+0x558>
   19312:	002c      	movs	r4, r5
   19314:	4698      	mov	r8, r3
   19316:	08d7      	lsrs	r7, r2, #3
   19318:	0749      	lsls	r1, r1, #29
   1931a:	430f      	orrs	r7, r1
   1931c:	0f7b      	lsrs	r3, r7, #29
   1931e:	00e4      	lsls	r4, r4, #3
   19320:	431c      	orrs	r4, r3
   19322:	00ff      	lsls	r7, r7, #3
   19324:	4e30      	ldr	r6, [pc, #192]	; (193e8 <__aeabi_dsub+0x624>)
   19326:	e5d3      	b.n	18ed0 <__aeabi_dsub+0x10c>
   19328:	4e2f      	ldr	r6, [pc, #188]	; (193e8 <__aeabi_dsub+0x624>)
   1932a:	45b4      	cmp	ip, r6
   1932c:	d1b4      	bne.n	19298 <__aeabi_dsub+0x4d4>
   1932e:	000c      	movs	r4, r1
   19330:	0017      	movs	r7, r2
   19332:	4666      	mov	r6, ip
   19334:	e5cc      	b.n	18ed0 <__aeabi_dsub+0x10c>
   19336:	2700      	movs	r7, #0
   19338:	2400      	movs	r4, #0
   1933a:	e5e8      	b.n	18f0e <__aeabi_dsub+0x14a>
   1933c:	2b00      	cmp	r3, #0
   1933e:	d039      	beq.n	193b4 <__aeabi_dsub+0x5f0>
   19340:	000b      	movs	r3, r1
   19342:	4313      	orrs	r3, r2
   19344:	d100      	bne.n	19348 <__aeabi_dsub+0x584>
   19346:	e744      	b.n	191d2 <__aeabi_dsub+0x40e>
   19348:	08c0      	lsrs	r0, r0, #3
   1934a:	0767      	lsls	r7, r4, #29
   1934c:	4307      	orrs	r7, r0
   1934e:	2080      	movs	r0, #128	; 0x80
   19350:	08e4      	lsrs	r4, r4, #3
   19352:	0300      	lsls	r0, r0, #12
   19354:	4204      	tst	r4, r0
   19356:	d0e1      	beq.n	1931c <__aeabi_dsub+0x558>
   19358:	08cb      	lsrs	r3, r1, #3
   1935a:	4203      	tst	r3, r0
   1935c:	d1de      	bne.n	1931c <__aeabi_dsub+0x558>
   1935e:	08d7      	lsrs	r7, r2, #3
   19360:	0749      	lsls	r1, r1, #29
   19362:	430f      	orrs	r7, r1
   19364:	001c      	movs	r4, r3
   19366:	e7d9      	b.n	1931c <__aeabi_dsub+0x558>
   19368:	2100      	movs	r1, #0
   1936a:	e771      	b.n	19250 <__aeabi_dsub+0x48c>
   1936c:	2500      	movs	r5, #0
   1936e:	2700      	movs	r7, #0
   19370:	e5e9      	b.n	18f46 <__aeabi_dsub+0x182>
   19372:	002e      	movs	r6, r5
   19374:	0027      	movs	r7, r4
   19376:	3e20      	subs	r6, #32
   19378:	40f7      	lsrs	r7, r6
   1937a:	2d20      	cmp	r5, #32
   1937c:	d02f      	beq.n	193de <__aeabi_dsub+0x61a>
   1937e:	2640      	movs	r6, #64	; 0x40
   19380:	1b75      	subs	r5, r6, r5
   19382:	40ac      	lsls	r4, r5
   19384:	4650      	mov	r0, sl
   19386:	4320      	orrs	r0, r4
   19388:	1e44      	subs	r4, r0, #1
   1938a:	41a0      	sbcs	r0, r4
   1938c:	2400      	movs	r4, #0
   1938e:	4338      	orrs	r0, r7
   19390:	e6dc      	b.n	1914c <__aeabi_dsub+0x388>
   19392:	2480      	movs	r4, #128	; 0x80
   19394:	2500      	movs	r5, #0
   19396:	0324      	lsls	r4, r4, #12
   19398:	4e13      	ldr	r6, [pc, #76]	; (193e8 <__aeabi_dsub+0x624>)
   1939a:	2700      	movs	r7, #0
   1939c:	e5d3      	b.n	18f46 <__aeabi_dsub+0x182>
   1939e:	4650      	mov	r0, sl
   193a0:	4320      	orrs	r0, r4
   193a2:	0007      	movs	r7, r0
   193a4:	1e78      	subs	r0, r7, #1
   193a6:	4187      	sbcs	r7, r0
   193a8:	2400      	movs	r4, #0
   193aa:	18bf      	adds	r7, r7, r2
   193ac:	e760      	b.n	19270 <__aeabi_dsub+0x4ac>
   193ae:	000c      	movs	r4, r1
   193b0:	0017      	movs	r7, r2
   193b2:	e58d      	b.n	18ed0 <__aeabi_dsub+0x10c>
   193b4:	000c      	movs	r4, r1
   193b6:	0017      	movs	r7, r2
   193b8:	4e0b      	ldr	r6, [pc, #44]	; (193e8 <__aeabi_dsub+0x624>)
   193ba:	e589      	b.n	18ed0 <__aeabi_dsub+0x10c>
   193bc:	001e      	movs	r6, r3
   193be:	0027      	movs	r7, r4
   193c0:	3e20      	subs	r6, #32
   193c2:	40f7      	lsrs	r7, r6
   193c4:	2b20      	cmp	r3, #32
   193c6:	d00c      	beq.n	193e2 <__aeabi_dsub+0x61e>
   193c8:	2640      	movs	r6, #64	; 0x40
   193ca:	1af3      	subs	r3, r6, r3
   193cc:	409c      	lsls	r4, r3
   193ce:	4650      	mov	r0, sl
   193d0:	4320      	orrs	r0, r4
   193d2:	1e44      	subs	r4, r0, #1
   193d4:	41a0      	sbcs	r0, r4
   193d6:	4307      	orrs	r7, r0
   193d8:	2400      	movs	r4, #0
   193da:	18bf      	adds	r7, r7, r2
   193dc:	e748      	b.n	19270 <__aeabi_dsub+0x4ac>
   193de:	2400      	movs	r4, #0
   193e0:	e7d0      	b.n	19384 <__aeabi_dsub+0x5c0>
   193e2:	2400      	movs	r4, #0
   193e4:	e7f3      	b.n	193ce <__aeabi_dsub+0x60a>
   193e6:	46c0      	nop			; (mov r8, r8)
   193e8:	000007ff 	.word	0x000007ff
   193ec:	ff7fffff 	.word	0xff7fffff

000193f0 <__aeabi_d2iz>:
   193f0:	b530      	push	{r4, r5, lr}
   193f2:	4d13      	ldr	r5, [pc, #76]	; (19440 <__aeabi_d2iz+0x50>)
   193f4:	030a      	lsls	r2, r1, #12
   193f6:	004b      	lsls	r3, r1, #1
   193f8:	0b12      	lsrs	r2, r2, #12
   193fa:	0d5b      	lsrs	r3, r3, #21
   193fc:	0fc9      	lsrs	r1, r1, #31
   193fe:	2400      	movs	r4, #0
   19400:	42ab      	cmp	r3, r5
   19402:	dd10      	ble.n	19426 <__aeabi_d2iz+0x36>
   19404:	4c0f      	ldr	r4, [pc, #60]	; (19444 <__aeabi_d2iz+0x54>)
   19406:	42a3      	cmp	r3, r4
   19408:	dc0f      	bgt.n	1942a <__aeabi_d2iz+0x3a>
   1940a:	2480      	movs	r4, #128	; 0x80
   1940c:	4d0e      	ldr	r5, [pc, #56]	; (19448 <__aeabi_d2iz+0x58>)
   1940e:	0364      	lsls	r4, r4, #13
   19410:	4322      	orrs	r2, r4
   19412:	1aed      	subs	r5, r5, r3
   19414:	2d1f      	cmp	r5, #31
   19416:	dd0b      	ble.n	19430 <__aeabi_d2iz+0x40>
   19418:	480c      	ldr	r0, [pc, #48]	; (1944c <__aeabi_d2iz+0x5c>)
   1941a:	1ac3      	subs	r3, r0, r3
   1941c:	40da      	lsrs	r2, r3
   1941e:	4254      	negs	r4, r2
   19420:	2900      	cmp	r1, #0
   19422:	d100      	bne.n	19426 <__aeabi_d2iz+0x36>
   19424:	0014      	movs	r4, r2
   19426:	0020      	movs	r0, r4
   19428:	bd30      	pop	{r4, r5, pc}
   1942a:	4b09      	ldr	r3, [pc, #36]	; (19450 <__aeabi_d2iz+0x60>)
   1942c:	18cc      	adds	r4, r1, r3
   1942e:	e7fa      	b.n	19426 <__aeabi_d2iz+0x36>
   19430:	4c08      	ldr	r4, [pc, #32]	; (19454 <__aeabi_d2iz+0x64>)
   19432:	40e8      	lsrs	r0, r5
   19434:	46a4      	mov	ip, r4
   19436:	4463      	add	r3, ip
   19438:	409a      	lsls	r2, r3
   1943a:	4302      	orrs	r2, r0
   1943c:	e7ef      	b.n	1941e <__aeabi_d2iz+0x2e>
   1943e:	46c0      	nop			; (mov r8, r8)
   19440:	000003fe 	.word	0x000003fe
   19444:	0000041d 	.word	0x0000041d
   19448:	00000433 	.word	0x00000433
   1944c:	00000413 	.word	0x00000413
   19450:	7fffffff 	.word	0x7fffffff
   19454:	fffffbed 	.word	0xfffffbed

00019458 <__aeabi_i2d>:
   19458:	b570      	push	{r4, r5, r6, lr}
   1945a:	2800      	cmp	r0, #0
   1945c:	d030      	beq.n	194c0 <__aeabi_i2d+0x68>
   1945e:	17c3      	asrs	r3, r0, #31
   19460:	18c4      	adds	r4, r0, r3
   19462:	405c      	eors	r4, r3
   19464:	0fc5      	lsrs	r5, r0, #31
   19466:	0020      	movs	r0, r4
   19468:	f000 f8c2 	bl	195f0 <__clzsi2>
   1946c:	4b17      	ldr	r3, [pc, #92]	; (194cc <__aeabi_i2d+0x74>)
   1946e:	4a18      	ldr	r2, [pc, #96]	; (194d0 <__aeabi_i2d+0x78>)
   19470:	1a1b      	subs	r3, r3, r0
   19472:	1ad2      	subs	r2, r2, r3
   19474:	2a1f      	cmp	r2, #31
   19476:	dd18      	ble.n	194aa <__aeabi_i2d+0x52>
   19478:	4a16      	ldr	r2, [pc, #88]	; (194d4 <__aeabi_i2d+0x7c>)
   1947a:	1ad2      	subs	r2, r2, r3
   1947c:	4094      	lsls	r4, r2
   1947e:	2200      	movs	r2, #0
   19480:	0324      	lsls	r4, r4, #12
   19482:	055b      	lsls	r3, r3, #21
   19484:	0b24      	lsrs	r4, r4, #12
   19486:	0d5b      	lsrs	r3, r3, #21
   19488:	2100      	movs	r1, #0
   1948a:	0010      	movs	r0, r2
   1948c:	0324      	lsls	r4, r4, #12
   1948e:	0d0a      	lsrs	r2, r1, #20
   19490:	0b24      	lsrs	r4, r4, #12
   19492:	0512      	lsls	r2, r2, #20
   19494:	4322      	orrs	r2, r4
   19496:	4c10      	ldr	r4, [pc, #64]	; (194d8 <__aeabi_i2d+0x80>)
   19498:	051b      	lsls	r3, r3, #20
   1949a:	4022      	ands	r2, r4
   1949c:	4313      	orrs	r3, r2
   1949e:	005b      	lsls	r3, r3, #1
   194a0:	07ed      	lsls	r5, r5, #31
   194a2:	085b      	lsrs	r3, r3, #1
   194a4:	432b      	orrs	r3, r5
   194a6:	0019      	movs	r1, r3
   194a8:	bd70      	pop	{r4, r5, r6, pc}
   194aa:	0021      	movs	r1, r4
   194ac:	4091      	lsls	r1, r2
   194ae:	000a      	movs	r2, r1
   194b0:	210b      	movs	r1, #11
   194b2:	1a08      	subs	r0, r1, r0
   194b4:	40c4      	lsrs	r4, r0
   194b6:	055b      	lsls	r3, r3, #21
   194b8:	0324      	lsls	r4, r4, #12
   194ba:	0b24      	lsrs	r4, r4, #12
   194bc:	0d5b      	lsrs	r3, r3, #21
   194be:	e7e3      	b.n	19488 <__aeabi_i2d+0x30>
   194c0:	2500      	movs	r5, #0
   194c2:	2300      	movs	r3, #0
   194c4:	2400      	movs	r4, #0
   194c6:	2200      	movs	r2, #0
   194c8:	e7de      	b.n	19488 <__aeabi_i2d+0x30>
   194ca:	46c0      	nop			; (mov r8, r8)
   194cc:	0000041e 	.word	0x0000041e
   194d0:	00000433 	.word	0x00000433
   194d4:	00000413 	.word	0x00000413
   194d8:	800fffff 	.word	0x800fffff

000194dc <__aeabi_ui2d>:
   194dc:	b510      	push	{r4, lr}
   194de:	1e04      	subs	r4, r0, #0
   194e0:	d028      	beq.n	19534 <__aeabi_ui2d+0x58>
   194e2:	f000 f885 	bl	195f0 <__clzsi2>
   194e6:	4b15      	ldr	r3, [pc, #84]	; (1953c <__aeabi_ui2d+0x60>)
   194e8:	4a15      	ldr	r2, [pc, #84]	; (19540 <__aeabi_ui2d+0x64>)
   194ea:	1a1b      	subs	r3, r3, r0
   194ec:	1ad2      	subs	r2, r2, r3
   194ee:	2a1f      	cmp	r2, #31
   194f0:	dd15      	ble.n	1951e <__aeabi_ui2d+0x42>
   194f2:	4a14      	ldr	r2, [pc, #80]	; (19544 <__aeabi_ui2d+0x68>)
   194f4:	1ad2      	subs	r2, r2, r3
   194f6:	4094      	lsls	r4, r2
   194f8:	2200      	movs	r2, #0
   194fa:	0324      	lsls	r4, r4, #12
   194fc:	055b      	lsls	r3, r3, #21
   194fe:	0b24      	lsrs	r4, r4, #12
   19500:	0d5b      	lsrs	r3, r3, #21
   19502:	2100      	movs	r1, #0
   19504:	0010      	movs	r0, r2
   19506:	0324      	lsls	r4, r4, #12
   19508:	0d0a      	lsrs	r2, r1, #20
   1950a:	0b24      	lsrs	r4, r4, #12
   1950c:	0512      	lsls	r2, r2, #20
   1950e:	4322      	orrs	r2, r4
   19510:	4c0d      	ldr	r4, [pc, #52]	; (19548 <__aeabi_ui2d+0x6c>)
   19512:	051b      	lsls	r3, r3, #20
   19514:	4022      	ands	r2, r4
   19516:	4313      	orrs	r3, r2
   19518:	005b      	lsls	r3, r3, #1
   1951a:	0859      	lsrs	r1, r3, #1
   1951c:	bd10      	pop	{r4, pc}
   1951e:	0021      	movs	r1, r4
   19520:	4091      	lsls	r1, r2
   19522:	000a      	movs	r2, r1
   19524:	210b      	movs	r1, #11
   19526:	1a08      	subs	r0, r1, r0
   19528:	40c4      	lsrs	r4, r0
   1952a:	055b      	lsls	r3, r3, #21
   1952c:	0324      	lsls	r4, r4, #12
   1952e:	0b24      	lsrs	r4, r4, #12
   19530:	0d5b      	lsrs	r3, r3, #21
   19532:	e7e6      	b.n	19502 <__aeabi_ui2d+0x26>
   19534:	2300      	movs	r3, #0
   19536:	2400      	movs	r4, #0
   19538:	2200      	movs	r2, #0
   1953a:	e7e2      	b.n	19502 <__aeabi_ui2d+0x26>
   1953c:	0000041e 	.word	0x0000041e
   19540:	00000433 	.word	0x00000433
   19544:	00000413 	.word	0x00000413
   19548:	800fffff 	.word	0x800fffff

0001954c <__aeabi_f2d>:
   1954c:	0041      	lsls	r1, r0, #1
   1954e:	0e09      	lsrs	r1, r1, #24
   19550:	1c4b      	adds	r3, r1, #1
   19552:	b570      	push	{r4, r5, r6, lr}
   19554:	b2db      	uxtb	r3, r3
   19556:	0246      	lsls	r6, r0, #9
   19558:	0a75      	lsrs	r5, r6, #9
   1955a:	0fc4      	lsrs	r4, r0, #31
   1955c:	2b01      	cmp	r3, #1
   1955e:	dd14      	ble.n	1958a <__aeabi_f2d+0x3e>
   19560:	23e0      	movs	r3, #224	; 0xe0
   19562:	009b      	lsls	r3, r3, #2
   19564:	076d      	lsls	r5, r5, #29
   19566:	0b36      	lsrs	r6, r6, #12
   19568:	18cb      	adds	r3, r1, r3
   1956a:	2100      	movs	r1, #0
   1956c:	0d0a      	lsrs	r2, r1, #20
   1956e:	0028      	movs	r0, r5
   19570:	0512      	lsls	r2, r2, #20
   19572:	4d1c      	ldr	r5, [pc, #112]	; (195e4 <__aeabi_f2d+0x98>)
   19574:	4332      	orrs	r2, r6
   19576:	055b      	lsls	r3, r3, #21
   19578:	402a      	ands	r2, r5
   1957a:	085b      	lsrs	r3, r3, #1
   1957c:	4313      	orrs	r3, r2
   1957e:	005b      	lsls	r3, r3, #1
   19580:	07e4      	lsls	r4, r4, #31
   19582:	085b      	lsrs	r3, r3, #1
   19584:	4323      	orrs	r3, r4
   19586:	0019      	movs	r1, r3
   19588:	bd70      	pop	{r4, r5, r6, pc}
   1958a:	2900      	cmp	r1, #0
   1958c:	d114      	bne.n	195b8 <__aeabi_f2d+0x6c>
   1958e:	2d00      	cmp	r5, #0
   19590:	d01e      	beq.n	195d0 <__aeabi_f2d+0x84>
   19592:	0028      	movs	r0, r5
   19594:	f000 f82c 	bl	195f0 <__clzsi2>
   19598:	280a      	cmp	r0, #10
   1959a:	dc1c      	bgt.n	195d6 <__aeabi_f2d+0x8a>
   1959c:	230b      	movs	r3, #11
   1959e:	002a      	movs	r2, r5
   195a0:	1a1b      	subs	r3, r3, r0
   195a2:	40da      	lsrs	r2, r3
   195a4:	0003      	movs	r3, r0
   195a6:	3315      	adds	r3, #21
   195a8:	409d      	lsls	r5, r3
   195aa:	4b0f      	ldr	r3, [pc, #60]	; (195e8 <__aeabi_f2d+0x9c>)
   195ac:	0312      	lsls	r2, r2, #12
   195ae:	1a1b      	subs	r3, r3, r0
   195b0:	055b      	lsls	r3, r3, #21
   195b2:	0b16      	lsrs	r6, r2, #12
   195b4:	0d5b      	lsrs	r3, r3, #21
   195b6:	e7d8      	b.n	1956a <__aeabi_f2d+0x1e>
   195b8:	2d00      	cmp	r5, #0
   195ba:	d006      	beq.n	195ca <__aeabi_f2d+0x7e>
   195bc:	0b32      	lsrs	r2, r6, #12
   195be:	2680      	movs	r6, #128	; 0x80
   195c0:	0336      	lsls	r6, r6, #12
   195c2:	076d      	lsls	r5, r5, #29
   195c4:	4316      	orrs	r6, r2
   195c6:	4b09      	ldr	r3, [pc, #36]	; (195ec <__aeabi_f2d+0xa0>)
   195c8:	e7cf      	b.n	1956a <__aeabi_f2d+0x1e>
   195ca:	4b08      	ldr	r3, [pc, #32]	; (195ec <__aeabi_f2d+0xa0>)
   195cc:	2600      	movs	r6, #0
   195ce:	e7cc      	b.n	1956a <__aeabi_f2d+0x1e>
   195d0:	2300      	movs	r3, #0
   195d2:	2600      	movs	r6, #0
   195d4:	e7c9      	b.n	1956a <__aeabi_f2d+0x1e>
   195d6:	0003      	movs	r3, r0
   195d8:	002a      	movs	r2, r5
   195da:	3b0b      	subs	r3, #11
   195dc:	409a      	lsls	r2, r3
   195de:	2500      	movs	r5, #0
   195e0:	e7e3      	b.n	195aa <__aeabi_f2d+0x5e>
   195e2:	46c0      	nop			; (mov r8, r8)
   195e4:	800fffff 	.word	0x800fffff
   195e8:	00000389 	.word	0x00000389
   195ec:	000007ff 	.word	0x000007ff

000195f0 <__clzsi2>:
   195f0:	211c      	movs	r1, #28
   195f2:	2301      	movs	r3, #1
   195f4:	041b      	lsls	r3, r3, #16
   195f6:	4298      	cmp	r0, r3
   195f8:	d301      	bcc.n	195fe <__clzsi2+0xe>
   195fa:	0c00      	lsrs	r0, r0, #16
   195fc:	3910      	subs	r1, #16
   195fe:	0a1b      	lsrs	r3, r3, #8
   19600:	4298      	cmp	r0, r3
   19602:	d301      	bcc.n	19608 <__clzsi2+0x18>
   19604:	0a00      	lsrs	r0, r0, #8
   19606:	3908      	subs	r1, #8
   19608:	091b      	lsrs	r3, r3, #4
   1960a:	4298      	cmp	r0, r3
   1960c:	d301      	bcc.n	19612 <__clzsi2+0x22>
   1960e:	0900      	lsrs	r0, r0, #4
   19610:	3904      	subs	r1, #4
   19612:	a202      	add	r2, pc, #8	; (adr r2, 1961c <__clzsi2+0x2c>)
   19614:	5c10      	ldrb	r0, [r2, r0]
   19616:	1840      	adds	r0, r0, r1
   19618:	4770      	bx	lr
   1961a:	46c0      	nop			; (mov r8, r8)
   1961c:	02020304 	.word	0x02020304
   19620:	01010101 	.word	0x01010101
	...

0001962c <__clzdi2>:
   1962c:	b510      	push	{r4, lr}
   1962e:	2900      	cmp	r1, #0
   19630:	d103      	bne.n	1963a <__clzdi2+0xe>
   19632:	f7ff ffdd 	bl	195f0 <__clzsi2>
   19636:	3020      	adds	r0, #32
   19638:	e002      	b.n	19640 <__clzdi2+0x14>
   1963a:	1c08      	adds	r0, r1, #0
   1963c:	f7ff ffd8 	bl	195f0 <__clzsi2>
   19640:	bd10      	pop	{r4, pc}
   19642:	46c0      	nop			; (mov r8, r8)

00019644 <atoi>:
   19644:	b510      	push	{r4, lr}
   19646:	220a      	movs	r2, #10
   19648:	2100      	movs	r1, #0
   1964a:	f000 fedd 	bl	1a408 <strtol>
   1964e:	bd10      	pop	{r4, pc}

00019650 <__libc_init_array>:
   19650:	b570      	push	{r4, r5, r6, lr}
   19652:	4e0d      	ldr	r6, [pc, #52]	; (19688 <__libc_init_array+0x38>)
   19654:	4d0d      	ldr	r5, [pc, #52]	; (1968c <__libc_init_array+0x3c>)
   19656:	2400      	movs	r4, #0
   19658:	1bad      	subs	r5, r5, r6
   1965a:	10ad      	asrs	r5, r5, #2
   1965c:	d005      	beq.n	1966a <__libc_init_array+0x1a>
   1965e:	00a3      	lsls	r3, r4, #2
   19660:	58f3      	ldr	r3, [r6, r3]
   19662:	3401      	adds	r4, #1
   19664:	4798      	blx	r3
   19666:	42a5      	cmp	r5, r4
   19668:	d1f9      	bne.n	1965e <__libc_init_array+0xe>
   1966a:	f007 f94b 	bl	20904 <_init>
   1966e:	4e08      	ldr	r6, [pc, #32]	; (19690 <__libc_init_array+0x40>)
   19670:	4d08      	ldr	r5, [pc, #32]	; (19694 <__libc_init_array+0x44>)
   19672:	2400      	movs	r4, #0
   19674:	1bad      	subs	r5, r5, r6
   19676:	10ad      	asrs	r5, r5, #2
   19678:	d005      	beq.n	19686 <__libc_init_array+0x36>
   1967a:	00a3      	lsls	r3, r4, #2
   1967c:	58f3      	ldr	r3, [r6, r3]
   1967e:	3401      	adds	r4, #1
   19680:	4798      	blx	r3
   19682:	42a5      	cmp	r5, r4
   19684:	d1f9      	bne.n	1967a <__libc_init_array+0x2a>
   19686:	bd70      	pop	{r4, r5, r6, pc}
   19688:	00020910 	.word	0x00020910
   1968c:	00020910 	.word	0x00020910
   19690:	00020910 	.word	0x00020910
   19694:	00020918 	.word	0x00020918

00019698 <__itoa>:
   19698:	1e93      	subs	r3, r2, #2
   1969a:	b510      	push	{r4, lr}
   1969c:	000c      	movs	r4, r1
   1969e:	2b22      	cmp	r3, #34	; 0x22
   196a0:	d80e      	bhi.n	196c0 <__itoa+0x28>
   196a2:	2a0a      	cmp	r2, #10
   196a4:	d005      	beq.n	196b2 <__itoa+0x1a>
   196a6:	2100      	movs	r1, #0
   196a8:	1861      	adds	r1, r4, r1
   196aa:	f000 ff7f 	bl	1a5ac <__utoa>
   196ae:	0020      	movs	r0, r4
   196b0:	bd10      	pop	{r4, pc}
   196b2:	2800      	cmp	r0, #0
   196b4:	daf7      	bge.n	196a6 <__itoa+0xe>
   196b6:	232d      	movs	r3, #45	; 0x2d
   196b8:	4240      	negs	r0, r0
   196ba:	700b      	strb	r3, [r1, #0]
   196bc:	2101      	movs	r1, #1
   196be:	e7f3      	b.n	196a8 <__itoa+0x10>
   196c0:	2300      	movs	r3, #0
   196c2:	2000      	movs	r0, #0
   196c4:	700b      	strb	r3, [r1, #0]
   196c6:	e7f3      	b.n	196b0 <__itoa+0x18>

000196c8 <itoa>:
   196c8:	b510      	push	{r4, lr}
   196ca:	f7ff ffe5 	bl	19698 <__itoa>
   196ce:	bd10      	pop	{r4, pc}

000196d0 <__locale_mb_cur_max>:
   196d0:	4b05      	ldr	r3, [pc, #20]	; (196e8 <__locale_mb_cur_max+0x18>)
   196d2:	681b      	ldr	r3, [r3, #0]
   196d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   196d6:	2b00      	cmp	r3, #0
   196d8:	d003      	beq.n	196e2 <__locale_mb_cur_max+0x12>
   196da:	2294      	movs	r2, #148	; 0x94
   196dc:	0052      	lsls	r2, r2, #1
   196de:	5c98      	ldrb	r0, [r3, r2]
   196e0:	4770      	bx	lr
   196e2:	4b02      	ldr	r3, [pc, #8]	; (196ec <__locale_mb_cur_max+0x1c>)
   196e4:	e7f9      	b.n	196da <__locale_mb_cur_max+0xa>
   196e6:	46c0      	nop			; (mov r8, r8)
   196e8:	20000018 	.word	0x20000018
   196ec:	20000448 	.word	0x20000448

000196f0 <__locale_ctype_ptr_l>:
   196f0:	23ec      	movs	r3, #236	; 0xec
   196f2:	58c0      	ldr	r0, [r0, r3]
   196f4:	4770      	bx	lr
   196f6:	46c0      	nop			; (mov r8, r8)

000196f8 <__locale_ctype_ptr>:
   196f8:	4b04      	ldr	r3, [pc, #16]	; (1970c <__locale_ctype_ptr+0x14>)
   196fa:	681b      	ldr	r3, [r3, #0]
   196fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   196fe:	2b00      	cmp	r3, #0
   19700:	d002      	beq.n	19708 <__locale_ctype_ptr+0x10>
   19702:	22ec      	movs	r2, #236	; 0xec
   19704:	5898      	ldr	r0, [r3, r2]
   19706:	4770      	bx	lr
   19708:	4b01      	ldr	r3, [pc, #4]	; (19710 <__locale_ctype_ptr+0x18>)
   1970a:	e7fa      	b.n	19702 <__locale_ctype_ptr+0xa>
   1970c:	20000018 	.word	0x20000018
   19710:	20000448 	.word	0x20000448

00019714 <malloc>:
   19714:	b510      	push	{r4, lr}
   19716:	4b03      	ldr	r3, [pc, #12]	; (19724 <malloc+0x10>)
   19718:	0001      	movs	r1, r0
   1971a:	6818      	ldr	r0, [r3, #0]
   1971c:	f000 f80e 	bl	1973c <_malloc_r>
   19720:	bd10      	pop	{r4, pc}
   19722:	46c0      	nop			; (mov r8, r8)
   19724:	20000018 	.word	0x20000018

00019728 <free>:
   19728:	b510      	push	{r4, lr}
   1972a:	4b03      	ldr	r3, [pc, #12]	; (19738 <free+0x10>)
   1972c:	0001      	movs	r1, r0
   1972e:	6818      	ldr	r0, [r3, #0]
   19730:	f003 fddc 	bl	1d2ec <_free_r>
   19734:	bd10      	pop	{r4, pc}
   19736:	46c0      	nop			; (mov r8, r8)
   19738:	20000018 	.word	0x20000018

0001973c <_malloc_r>:
   1973c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1973e:	4657      	mov	r7, sl
   19740:	4645      	mov	r5, r8
   19742:	46de      	mov	lr, fp
   19744:	464e      	mov	r6, r9
   19746:	b5e0      	push	{r5, r6, r7, lr}
   19748:	000d      	movs	r5, r1
   1974a:	350b      	adds	r5, #11
   1974c:	b083      	sub	sp, #12
   1974e:	0007      	movs	r7, r0
   19750:	2d16      	cmp	r5, #22
   19752:	d800      	bhi.n	19756 <_malloc_r+0x1a>
   19754:	e09f      	b.n	19896 <_malloc_r+0x15a>
   19756:	2307      	movs	r3, #7
   19758:	439d      	bics	r5, r3
   1975a:	d500      	bpl.n	1975e <_malloc_r+0x22>
   1975c:	e0c4      	b.n	198e8 <_malloc_r+0x1ac>
   1975e:	42a9      	cmp	r1, r5
   19760:	d900      	bls.n	19764 <_malloc_r+0x28>
   19762:	e0c1      	b.n	198e8 <_malloc_r+0x1ac>
   19764:	f000 fbb6 	bl	19ed4 <__malloc_lock>
   19768:	23f8      	movs	r3, #248	; 0xf8
   1976a:	33ff      	adds	r3, #255	; 0xff
   1976c:	429d      	cmp	r5, r3
   1976e:	d800      	bhi.n	19772 <_malloc_r+0x36>
   19770:	e28f      	b.n	19c92 <_malloc_r+0x556>
   19772:	0a68      	lsrs	r0, r5, #9
   19774:	d100      	bne.n	19778 <_malloc_r+0x3c>
   19776:	e0bb      	b.n	198f0 <_malloc_r+0x1b4>
   19778:	2804      	cmp	r0, #4
   1977a:	d900      	bls.n	1977e <_malloc_r+0x42>
   1977c:	e162      	b.n	19a44 <_malloc_r+0x308>
   1977e:	2338      	movs	r3, #56	; 0x38
   19780:	4698      	mov	r8, r3
   19782:	09a8      	lsrs	r0, r5, #6
   19784:	4480      	add	r8, r0
   19786:	3039      	adds	r0, #57	; 0x39
   19788:	00c1      	lsls	r1, r0, #3
   1978a:	4ed2      	ldr	r6, [pc, #840]	; (19ad4 <_malloc_r+0x398>)
   1978c:	1871      	adds	r1, r6, r1
   1978e:	3908      	subs	r1, #8
   19790:	68cc      	ldr	r4, [r1, #12]
   19792:	42a1      	cmp	r1, r4
   19794:	d019      	beq.n	197ca <_malloc_r+0x8e>
   19796:	2303      	movs	r3, #3
   19798:	6862      	ldr	r2, [r4, #4]
   1979a:	439a      	bics	r2, r3
   1979c:	0013      	movs	r3, r2
   1979e:	1b52      	subs	r2, r2, r5
   197a0:	2a0f      	cmp	r2, #15
   197a2:	dd00      	ble.n	197a6 <_malloc_r+0x6a>
   197a4:	e0aa      	b.n	198fc <_malloc_r+0x1c0>
   197a6:	2a00      	cmp	r2, #0
   197a8:	db00      	blt.n	197ac <_malloc_r+0x70>
   197aa:	e088      	b.n	198be <_malloc_r+0x182>
   197ac:	2303      	movs	r3, #3
   197ae:	469c      	mov	ip, r3
   197b0:	e008      	b.n	197c4 <_malloc_r+0x88>
   197b2:	4662      	mov	r2, ip
   197b4:	6863      	ldr	r3, [r4, #4]
   197b6:	4393      	bics	r3, r2
   197b8:	1b5a      	subs	r2, r3, r5
   197ba:	2a0f      	cmp	r2, #15
   197bc:	dd00      	ble.n	197c0 <_malloc_r+0x84>
   197be:	e09d      	b.n	198fc <_malloc_r+0x1c0>
   197c0:	2a00      	cmp	r2, #0
   197c2:	da7c      	bge.n	198be <_malloc_r+0x182>
   197c4:	68e4      	ldr	r4, [r4, #12]
   197c6:	42a1      	cmp	r1, r4
   197c8:	d1f3      	bne.n	197b2 <_malloc_r+0x76>
   197ca:	0032      	movs	r2, r6
   197cc:	6934      	ldr	r4, [r6, #16]
   197ce:	3208      	adds	r2, #8
   197d0:	4294      	cmp	r4, r2
   197d2:	d100      	bne.n	197d6 <_malloc_r+0x9a>
   197d4:	e190      	b.n	19af8 <_malloc_r+0x3bc>
   197d6:	2303      	movs	r3, #3
   197d8:	6861      	ldr	r1, [r4, #4]
   197da:	4399      	bics	r1, r3
   197dc:	4689      	mov	r9, r1
   197de:	1b49      	subs	r1, r1, r5
   197e0:	290f      	cmp	r1, #15
   197e2:	dd00      	ble.n	197e6 <_malloc_r+0xaa>
   197e4:	e162      	b.n	19aac <_malloc_r+0x370>
   197e6:	6172      	str	r2, [r6, #20]
   197e8:	6132      	str	r2, [r6, #16]
   197ea:	2900      	cmp	r1, #0
   197ec:	db00      	blt.n	197f0 <_malloc_r+0xb4>
   197ee:	e087      	b.n	19900 <_malloc_r+0x1c4>
   197f0:	4ab9      	ldr	r2, [pc, #740]	; (19ad8 <_malloc_r+0x39c>)
   197f2:	464b      	mov	r3, r9
   197f4:	4591      	cmp	r9, r2
   197f6:	d900      	bls.n	197fa <_malloc_r+0xbe>
   197f8:	e130      	b.n	19a5c <_malloc_r+0x320>
   197fa:	08db      	lsrs	r3, r3, #3
   197fc:	3aff      	subs	r2, #255	; 0xff
   197fe:	1099      	asrs	r1, r3, #2
   19800:	3aff      	subs	r2, #255	; 0xff
   19802:	408a      	lsls	r2, r1
   19804:	00db      	lsls	r3, r3, #3
   19806:	6871      	ldr	r1, [r6, #4]
   19808:	199b      	adds	r3, r3, r6
   1980a:	430a      	orrs	r2, r1
   1980c:	6899      	ldr	r1, [r3, #8]
   1980e:	6072      	str	r2, [r6, #4]
   19810:	60e3      	str	r3, [r4, #12]
   19812:	60a1      	str	r1, [r4, #8]
   19814:	609c      	str	r4, [r3, #8]
   19816:	0013      	movs	r3, r2
   19818:	60cc      	str	r4, [r1, #12]
   1981a:	2101      	movs	r1, #1
   1981c:	1082      	asrs	r2, r0, #2
   1981e:	4091      	lsls	r1, r2
   19820:	4299      	cmp	r1, r3
   19822:	d86f      	bhi.n	19904 <_malloc_r+0x1c8>
   19824:	420b      	tst	r3, r1
   19826:	d105      	bne.n	19834 <_malloc_r+0xf8>
   19828:	2203      	movs	r2, #3
   1982a:	4390      	bics	r0, r2
   1982c:	0049      	lsls	r1, r1, #1
   1982e:	3004      	adds	r0, #4
   19830:	420b      	tst	r3, r1
   19832:	d0fb      	beq.n	1982c <_malloc_r+0xf0>
   19834:	2303      	movs	r3, #3
   19836:	4698      	mov	r8, r3
   19838:	00c3      	lsls	r3, r0, #3
   1983a:	4699      	mov	r9, r3
   1983c:	44b1      	add	r9, r6
   1983e:	46cc      	mov	ip, r9
   19840:	4682      	mov	sl, r0
   19842:	4663      	mov	r3, ip
   19844:	68dc      	ldr	r4, [r3, #12]
   19846:	45a4      	cmp	ip, r4
   19848:	d107      	bne.n	1985a <_malloc_r+0x11e>
   1984a:	e157      	b.n	19afc <_malloc_r+0x3c0>
   1984c:	2a00      	cmp	r2, #0
   1984e:	db00      	blt.n	19852 <_malloc_r+0x116>
   19850:	e166      	b.n	19b20 <_malloc_r+0x3e4>
   19852:	68e4      	ldr	r4, [r4, #12]
   19854:	45a4      	cmp	ip, r4
   19856:	d100      	bne.n	1985a <_malloc_r+0x11e>
   19858:	e150      	b.n	19afc <_malloc_r+0x3c0>
   1985a:	4642      	mov	r2, r8
   1985c:	6863      	ldr	r3, [r4, #4]
   1985e:	4393      	bics	r3, r2
   19860:	1b5a      	subs	r2, r3, r5
   19862:	2a0f      	cmp	r2, #15
   19864:	ddf2      	ble.n	1984c <_malloc_r+0x110>
   19866:	2001      	movs	r0, #1
   19868:	4680      	mov	r8, r0
   1986a:	1961      	adds	r1, r4, r5
   1986c:	4305      	orrs	r5, r0
   1986e:	6065      	str	r5, [r4, #4]
   19870:	68a0      	ldr	r0, [r4, #8]
   19872:	68e5      	ldr	r5, [r4, #12]
   19874:	3608      	adds	r6, #8
   19876:	60c5      	str	r5, [r0, #12]
   19878:	60a8      	str	r0, [r5, #8]
   1987a:	4640      	mov	r0, r8
   1987c:	60f1      	str	r1, [r6, #12]
   1987e:	60b1      	str	r1, [r6, #8]
   19880:	4310      	orrs	r0, r2
   19882:	6048      	str	r0, [r1, #4]
   19884:	60ce      	str	r6, [r1, #12]
   19886:	608e      	str	r6, [r1, #8]
   19888:	0038      	movs	r0, r7
   1988a:	50e2      	str	r2, [r4, r3]
   1988c:	f000 fb2a 	bl	19ee4 <__malloc_unlock>
   19890:	0020      	movs	r0, r4
   19892:	3008      	adds	r0, #8
   19894:	e021      	b.n	198da <_malloc_r+0x19e>
   19896:	2910      	cmp	r1, #16
   19898:	d826      	bhi.n	198e8 <_malloc_r+0x1ac>
   1989a:	0038      	movs	r0, r7
   1989c:	f000 fb1a 	bl	19ed4 <__malloc_lock>
   198a0:	2510      	movs	r5, #16
   198a2:	2318      	movs	r3, #24
   198a4:	2002      	movs	r0, #2
   198a6:	4e8b      	ldr	r6, [pc, #556]	; (19ad4 <_malloc_r+0x398>)
   198a8:	18f3      	adds	r3, r6, r3
   198aa:	001a      	movs	r2, r3
   198ac:	685c      	ldr	r4, [r3, #4]
   198ae:	3a08      	subs	r2, #8
   198b0:	4294      	cmp	r4, r2
   198b2:	d100      	bne.n	198b6 <_malloc_r+0x17a>
   198b4:	e12e      	b.n	19b14 <_malloc_r+0x3d8>
   198b6:	2303      	movs	r3, #3
   198b8:	6862      	ldr	r2, [r4, #4]
   198ba:	439a      	bics	r2, r3
   198bc:	0013      	movs	r3, r2
   198be:	68e2      	ldr	r2, [r4, #12]
   198c0:	68a1      	ldr	r1, [r4, #8]
   198c2:	60ca      	str	r2, [r1, #12]
   198c4:	6091      	str	r1, [r2, #8]
   198c6:	2201      	movs	r2, #1
   198c8:	18e3      	adds	r3, r4, r3
   198ca:	6859      	ldr	r1, [r3, #4]
   198cc:	0038      	movs	r0, r7
   198ce:	430a      	orrs	r2, r1
   198d0:	605a      	str	r2, [r3, #4]
   198d2:	f000 fb07 	bl	19ee4 <__malloc_unlock>
   198d6:	0020      	movs	r0, r4
   198d8:	3008      	adds	r0, #8
   198da:	b003      	add	sp, #12
   198dc:	bc3c      	pop	{r2, r3, r4, r5}
   198de:	4690      	mov	r8, r2
   198e0:	4699      	mov	r9, r3
   198e2:	46a2      	mov	sl, r4
   198e4:	46ab      	mov	fp, r5
   198e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   198e8:	230c      	movs	r3, #12
   198ea:	2000      	movs	r0, #0
   198ec:	603b      	str	r3, [r7, #0]
   198ee:	e7f4      	b.n	198da <_malloc_r+0x19e>
   198f0:	2180      	movs	r1, #128	; 0x80
   198f2:	233f      	movs	r3, #63	; 0x3f
   198f4:	2040      	movs	r0, #64	; 0x40
   198f6:	0089      	lsls	r1, r1, #2
   198f8:	4698      	mov	r8, r3
   198fa:	e746      	b.n	1978a <_malloc_r+0x4e>
   198fc:	4640      	mov	r0, r8
   198fe:	e764      	b.n	197ca <_malloc_r+0x8e>
   19900:	464b      	mov	r3, r9
   19902:	e7e0      	b.n	198c6 <_malloc_r+0x18a>
   19904:	2303      	movs	r3, #3
   19906:	68b4      	ldr	r4, [r6, #8]
   19908:	6862      	ldr	r2, [r4, #4]
   1990a:	439a      	bics	r2, r3
   1990c:	4690      	mov	r8, r2
   1990e:	42aa      	cmp	r2, r5
   19910:	d303      	bcc.n	1991a <_malloc_r+0x1de>
   19912:	1b53      	subs	r3, r2, r5
   19914:	2b0f      	cmp	r3, #15
   19916:	dd00      	ble.n	1991a <_malloc_r+0x1de>
   19918:	e086      	b.n	19a28 <_malloc_r+0x2ec>
   1991a:	0023      	movs	r3, r4
   1991c:	4443      	add	r3, r8
   1991e:	4a6f      	ldr	r2, [pc, #444]	; (19adc <_malloc_r+0x3a0>)
   19920:	9301      	str	r3, [sp, #4]
   19922:	4b6f      	ldr	r3, [pc, #444]	; (19ae0 <_malloc_r+0x3a4>)
   19924:	4693      	mov	fp, r2
   19926:	681b      	ldr	r3, [r3, #0]
   19928:	6812      	ldr	r2, [r2, #0]
   1992a:	18eb      	adds	r3, r5, r3
   1992c:	3201      	adds	r2, #1
   1992e:	d100      	bne.n	19932 <_malloc_r+0x1f6>
   19930:	e168      	b.n	19c04 <_malloc_r+0x4c8>
   19932:	4a6c      	ldr	r2, [pc, #432]	; (19ae4 <_malloc_r+0x3a8>)
   19934:	4694      	mov	ip, r2
   19936:	4463      	add	r3, ip
   19938:	0b1b      	lsrs	r3, r3, #12
   1993a:	031b      	lsls	r3, r3, #12
   1993c:	9300      	str	r3, [sp, #0]
   1993e:	9900      	ldr	r1, [sp, #0]
   19940:	0038      	movs	r0, r7
   19942:	f000 fb67 	bl	1a014 <_sbrk_r>
   19946:	0003      	movs	r3, r0
   19948:	4681      	mov	r9, r0
   1994a:	3301      	adds	r3, #1
   1994c:	d061      	beq.n	19a12 <_malloc_r+0x2d6>
   1994e:	9b01      	ldr	r3, [sp, #4]
   19950:	4283      	cmp	r3, r0
   19952:	d900      	bls.n	19956 <_malloc_r+0x21a>
   19954:	e0ff      	b.n	19b56 <_malloc_r+0x41a>
   19956:	4b64      	ldr	r3, [pc, #400]	; (19ae8 <_malloc_r+0x3ac>)
   19958:	9a00      	ldr	r2, [sp, #0]
   1995a:	469a      	mov	sl, r3
   1995c:	681b      	ldr	r3, [r3, #0]
   1995e:	469c      	mov	ip, r3
   19960:	4653      	mov	r3, sl
   19962:	4462      	add	r2, ip
   19964:	601a      	str	r2, [r3, #0]
   19966:	9b01      	ldr	r3, [sp, #4]
   19968:	0011      	movs	r1, r2
   1996a:	4283      	cmp	r3, r0
   1996c:	d100      	bne.n	19970 <_malloc_r+0x234>
   1996e:	e155      	b.n	19c1c <_malloc_r+0x4e0>
   19970:	465b      	mov	r3, fp
   19972:	681b      	ldr	r3, [r3, #0]
   19974:	3301      	adds	r3, #1
   19976:	d100      	bne.n	1997a <_malloc_r+0x23e>
   19978:	e16c      	b.n	19c54 <_malloc_r+0x518>
   1997a:	464b      	mov	r3, r9
   1997c:	9a01      	ldr	r2, [sp, #4]
   1997e:	1a9b      	subs	r3, r3, r2
   19980:	1859      	adds	r1, r3, r1
   19982:	4653      	mov	r3, sl
   19984:	6019      	str	r1, [r3, #0]
   19986:	2307      	movs	r3, #7
   19988:	464a      	mov	r2, r9
   1998a:	4013      	ands	r3, r2
   1998c:	d100      	bne.n	19990 <_malloc_r+0x254>
   1998e:	e124      	b.n	19bda <_malloc_r+0x49e>
   19990:	2108      	movs	r1, #8
   19992:	4689      	mov	r9, r1
   19994:	4955      	ldr	r1, [pc, #340]	; (19aec <_malloc_r+0x3b0>)
   19996:	1ad2      	subs	r2, r2, r3
   19998:	4491      	add	r9, r2
   1999a:	1acb      	subs	r3, r1, r3
   1999c:	9a00      	ldr	r2, [sp, #0]
   1999e:	0038      	movs	r0, r7
   199a0:	444a      	add	r2, r9
   199a2:	0511      	lsls	r1, r2, #20
   199a4:	0d09      	lsrs	r1, r1, #20
   199a6:	1a5b      	subs	r3, r3, r1
   199a8:	0019      	movs	r1, r3
   199aa:	469b      	mov	fp, r3
   199ac:	f000 fb32 	bl	1a014 <_sbrk_r>
   199b0:	1c43      	adds	r3, r0, #1
   199b2:	d100      	bne.n	199b6 <_malloc_r+0x27a>
   199b4:	e142      	b.n	19c3c <_malloc_r+0x500>
   199b6:	464b      	mov	r3, r9
   199b8:	1ac0      	subs	r0, r0, r3
   199ba:	2301      	movs	r3, #1
   199bc:	4458      	add	r0, fp
   199be:	4318      	orrs	r0, r3
   199c0:	4653      	mov	r3, sl
   199c2:	681b      	ldr	r3, [r3, #0]
   199c4:	445b      	add	r3, fp
   199c6:	0019      	movs	r1, r3
   199c8:	4653      	mov	r3, sl
   199ca:	6019      	str	r1, [r3, #0]
   199cc:	464b      	mov	r3, r9
   199ce:	60b3      	str	r3, [r6, #8]
   199d0:	6058      	str	r0, [r3, #4]
   199d2:	42b4      	cmp	r4, r6
   199d4:	d013      	beq.n	199fe <_malloc_r+0x2c2>
   199d6:	4643      	mov	r3, r8
   199d8:	2b0f      	cmp	r3, #15
   199da:	d800      	bhi.n	199de <_malloc_r+0x2a2>
   199dc:	e0e8      	b.n	19bb0 <_malloc_r+0x474>
   199de:	4643      	mov	r3, r8
   199e0:	2207      	movs	r2, #7
   199e2:	6860      	ldr	r0, [r4, #4]
   199e4:	3b0c      	subs	r3, #12
   199e6:	4393      	bics	r3, r2
   199e8:	3a06      	subs	r2, #6
   199ea:	4002      	ands	r2, r0
   199ec:	2005      	movs	r0, #5
   199ee:	431a      	orrs	r2, r3
   199f0:	6062      	str	r2, [r4, #4]
   199f2:	18e2      	adds	r2, r4, r3
   199f4:	6050      	str	r0, [r2, #4]
   199f6:	6090      	str	r0, [r2, #8]
   199f8:	2b0f      	cmp	r3, #15
   199fa:	d900      	bls.n	199fe <_malloc_r+0x2c2>
   199fc:	e122      	b.n	19c44 <_malloc_r+0x508>
   199fe:	4b3c      	ldr	r3, [pc, #240]	; (19af0 <_malloc_r+0x3b4>)
   19a00:	681a      	ldr	r2, [r3, #0]
   19a02:	4291      	cmp	r1, r2
   19a04:	d900      	bls.n	19a08 <_malloc_r+0x2cc>
   19a06:	6019      	str	r1, [r3, #0]
   19a08:	4b3a      	ldr	r3, [pc, #232]	; (19af4 <_malloc_r+0x3b8>)
   19a0a:	681a      	ldr	r2, [r3, #0]
   19a0c:	4291      	cmp	r1, r2
   19a0e:	d900      	bls.n	19a12 <_malloc_r+0x2d6>
   19a10:	6019      	str	r1, [r3, #0]
   19a12:	2303      	movs	r3, #3
   19a14:	68b4      	ldr	r4, [r6, #8]
   19a16:	6862      	ldr	r2, [r4, #4]
   19a18:	439a      	bics	r2, r3
   19a1a:	1b53      	subs	r3, r2, r5
   19a1c:	4295      	cmp	r5, r2
   19a1e:	d900      	bls.n	19a22 <_malloc_r+0x2e6>
   19a20:	e0c9      	b.n	19bb6 <_malloc_r+0x47a>
   19a22:	2b0f      	cmp	r3, #15
   19a24:	dc00      	bgt.n	19a28 <_malloc_r+0x2ec>
   19a26:	e0c6      	b.n	19bb6 <_malloc_r+0x47a>
   19a28:	2201      	movs	r2, #1
   19a2a:	0029      	movs	r1, r5
   19a2c:	4313      	orrs	r3, r2
   19a2e:	4311      	orrs	r1, r2
   19a30:	1965      	adds	r5, r4, r5
   19a32:	6061      	str	r1, [r4, #4]
   19a34:	0038      	movs	r0, r7
   19a36:	60b5      	str	r5, [r6, #8]
   19a38:	606b      	str	r3, [r5, #4]
   19a3a:	f000 fa53 	bl	19ee4 <__malloc_unlock>
   19a3e:	0020      	movs	r0, r4
   19a40:	3008      	adds	r0, #8
   19a42:	e74a      	b.n	198da <_malloc_r+0x19e>
   19a44:	2814      	cmp	r0, #20
   19a46:	d97a      	bls.n	19b3e <_malloc_r+0x402>
   19a48:	2854      	cmp	r0, #84	; 0x54
   19a4a:	d900      	bls.n	19a4e <_malloc_r+0x312>
   19a4c:	e0ba      	b.n	19bc4 <_malloc_r+0x488>
   19a4e:	236e      	movs	r3, #110	; 0x6e
   19a50:	4698      	mov	r8, r3
   19a52:	0b28      	lsrs	r0, r5, #12
   19a54:	4480      	add	r8, r0
   19a56:	306f      	adds	r0, #111	; 0x6f
   19a58:	00c1      	lsls	r1, r0, #3
   19a5a:	e696      	b.n	1978a <_malloc_r+0x4e>
   19a5c:	0a5a      	lsrs	r2, r3, #9
   19a5e:	2a04      	cmp	r2, #4
   19a60:	d973      	bls.n	19b4a <_malloc_r+0x40e>
   19a62:	2a14      	cmp	r2, #20
   19a64:	d900      	bls.n	19a68 <_malloc_r+0x32c>
   19a66:	e0d0      	b.n	19c0a <_malloc_r+0x4ce>
   19a68:	0011      	movs	r1, r2
   19a6a:	325c      	adds	r2, #92	; 0x5c
   19a6c:	315b      	adds	r1, #91	; 0x5b
   19a6e:	00d2      	lsls	r2, r2, #3
   19a70:	2308      	movs	r3, #8
   19a72:	425b      	negs	r3, r3
   19a74:	469c      	mov	ip, r3
   19a76:	18b2      	adds	r2, r6, r2
   19a78:	4494      	add	ip, r2
   19a7a:	4663      	mov	r3, ip
   19a7c:	689a      	ldr	r2, [r3, #8]
   19a7e:	2303      	movs	r3, #3
   19a80:	4698      	mov	r8, r3
   19a82:	4594      	cmp	ip, r2
   19a84:	d100      	bne.n	19a88 <_malloc_r+0x34c>
   19a86:	e0ab      	b.n	19be0 <_malloc_r+0x4a4>
   19a88:	4643      	mov	r3, r8
   19a8a:	6851      	ldr	r1, [r2, #4]
   19a8c:	4399      	bics	r1, r3
   19a8e:	4589      	cmp	r9, r1
   19a90:	d300      	bcc.n	19a94 <_malloc_r+0x358>
   19a92:	e095      	b.n	19bc0 <_malloc_r+0x484>
   19a94:	6892      	ldr	r2, [r2, #8]
   19a96:	4594      	cmp	ip, r2
   19a98:	d1f6      	bne.n	19a88 <_malloc_r+0x34c>
   19a9a:	4663      	mov	r3, ip
   19a9c:	68da      	ldr	r2, [r3, #12]
   19a9e:	6873      	ldr	r3, [r6, #4]
   19aa0:	4661      	mov	r1, ip
   19aa2:	60e2      	str	r2, [r4, #12]
   19aa4:	60a1      	str	r1, [r4, #8]
   19aa6:	6094      	str	r4, [r2, #8]
   19aa8:	60cc      	str	r4, [r1, #12]
   19aaa:	e6b6      	b.n	1981a <_malloc_r+0xde>
   19aac:	2301      	movs	r3, #1
   19aae:	1960      	adds	r0, r4, r5
   19ab0:	431d      	orrs	r5, r3
   19ab2:	6065      	str	r5, [r4, #4]
   19ab4:	6170      	str	r0, [r6, #20]
   19ab6:	6130      	str	r0, [r6, #16]
   19ab8:	60c2      	str	r2, [r0, #12]
   19aba:	6082      	str	r2, [r0, #8]
   19abc:	001a      	movs	r2, r3
   19abe:	464b      	mov	r3, r9
   19ac0:	430a      	orrs	r2, r1
   19ac2:	6042      	str	r2, [r0, #4]
   19ac4:	0038      	movs	r0, r7
   19ac6:	50e1      	str	r1, [r4, r3]
   19ac8:	f000 fa0c 	bl	19ee4 <__malloc_unlock>
   19acc:	0020      	movs	r0, r4
   19ace:	3008      	adds	r0, #8
   19ad0:	e703      	b.n	198da <_malloc_r+0x19e>
   19ad2:	46c0      	nop			; (mov r8, r8)
   19ad4:	200005b4 	.word	0x200005b4
   19ad8:	000001ff 	.word	0x000001ff
   19adc:	200009bc 	.word	0x200009bc
   19ae0:	20001168 	.word	0x20001168
   19ae4:	0000100f 	.word	0x0000100f
   19ae8:	20001138 	.word	0x20001138
   19aec:	00001008 	.word	0x00001008
   19af0:	20001160 	.word	0x20001160
   19af4:	20001164 	.word	0x20001164
   19af8:	6873      	ldr	r3, [r6, #4]
   19afa:	e68e      	b.n	1981a <_malloc_r+0xde>
   19afc:	2308      	movs	r3, #8
   19afe:	469b      	mov	fp, r3
   19b00:	3b07      	subs	r3, #7
   19b02:	44dc      	add	ip, fp
   19b04:	469b      	mov	fp, r3
   19b06:	44da      	add	sl, fp
   19b08:	4643      	mov	r3, r8
   19b0a:	4652      	mov	r2, sl
   19b0c:	4213      	tst	r3, r2
   19b0e:	d000      	beq.n	19b12 <_malloc_r+0x3d6>
   19b10:	e697      	b.n	19842 <_malloc_r+0x106>
   19b12:	e037      	b.n	19b84 <_malloc_r+0x448>
   19b14:	68dc      	ldr	r4, [r3, #12]
   19b16:	3002      	adds	r0, #2
   19b18:	42a3      	cmp	r3, r4
   19b1a:	d100      	bne.n	19b1e <_malloc_r+0x3e2>
   19b1c:	e655      	b.n	197ca <_malloc_r+0x8e>
   19b1e:	e6ca      	b.n	198b6 <_malloc_r+0x17a>
   19b20:	2201      	movs	r2, #1
   19b22:	18e3      	adds	r3, r4, r3
   19b24:	6859      	ldr	r1, [r3, #4]
   19b26:	0038      	movs	r0, r7
   19b28:	430a      	orrs	r2, r1
   19b2a:	605a      	str	r2, [r3, #4]
   19b2c:	68e3      	ldr	r3, [r4, #12]
   19b2e:	68a2      	ldr	r2, [r4, #8]
   19b30:	60d3      	str	r3, [r2, #12]
   19b32:	609a      	str	r2, [r3, #8]
   19b34:	f000 f9d6 	bl	19ee4 <__malloc_unlock>
   19b38:	0020      	movs	r0, r4
   19b3a:	3008      	adds	r0, #8
   19b3c:	e6cd      	b.n	198da <_malloc_r+0x19e>
   19b3e:	235b      	movs	r3, #91	; 0x5b
   19b40:	4698      	mov	r8, r3
   19b42:	4480      	add	r8, r0
   19b44:	305c      	adds	r0, #92	; 0x5c
   19b46:	00c1      	lsls	r1, r0, #3
   19b48:	e61f      	b.n	1978a <_malloc_r+0x4e>
   19b4a:	099a      	lsrs	r2, r3, #6
   19b4c:	0011      	movs	r1, r2
   19b4e:	3239      	adds	r2, #57	; 0x39
   19b50:	3138      	adds	r1, #56	; 0x38
   19b52:	00d2      	lsls	r2, r2, #3
   19b54:	e78c      	b.n	19a70 <_malloc_r+0x334>
   19b56:	42b4      	cmp	r4, r6
   19b58:	d000      	beq.n	19b5c <_malloc_r+0x420>
   19b5a:	e75a      	b.n	19a12 <_malloc_r+0x2d6>
   19b5c:	4b4f      	ldr	r3, [pc, #316]	; (19c9c <_malloc_r+0x560>)
   19b5e:	9a00      	ldr	r2, [sp, #0]
   19b60:	469a      	mov	sl, r3
   19b62:	681b      	ldr	r3, [r3, #0]
   19b64:	469c      	mov	ip, r3
   19b66:	4653      	mov	r3, sl
   19b68:	4462      	add	r2, ip
   19b6a:	0011      	movs	r1, r2
   19b6c:	601a      	str	r2, [r3, #0]
   19b6e:	e6ff      	b.n	19970 <_malloc_r+0x234>
   19b70:	2308      	movs	r3, #8
   19b72:	425b      	negs	r3, r3
   19b74:	469c      	mov	ip, r3
   19b76:	44e1      	add	r9, ip
   19b78:	464b      	mov	r3, r9
   19b7a:	689b      	ldr	r3, [r3, #8]
   19b7c:	3801      	subs	r0, #1
   19b7e:	4599      	cmp	r9, r3
   19b80:	d000      	beq.n	19b84 <_malloc_r+0x448>
   19b82:	e084      	b.n	19c8e <_malloc_r+0x552>
   19b84:	4643      	mov	r3, r8
   19b86:	4203      	tst	r3, r0
   19b88:	d1f2      	bne.n	19b70 <_malloc_r+0x434>
   19b8a:	6873      	ldr	r3, [r6, #4]
   19b8c:	438b      	bics	r3, r1
   19b8e:	6073      	str	r3, [r6, #4]
   19b90:	0049      	lsls	r1, r1, #1
   19b92:	4299      	cmp	r1, r3
   19b94:	d900      	bls.n	19b98 <_malloc_r+0x45c>
   19b96:	e6b5      	b.n	19904 <_malloc_r+0x1c8>
   19b98:	2900      	cmp	r1, #0
   19b9a:	d100      	bne.n	19b9e <_malloc_r+0x462>
   19b9c:	e6b2      	b.n	19904 <_malloc_r+0x1c8>
   19b9e:	4650      	mov	r0, sl
   19ba0:	420b      	tst	r3, r1
   19ba2:	d000      	beq.n	19ba6 <_malloc_r+0x46a>
   19ba4:	e648      	b.n	19838 <_malloc_r+0xfc>
   19ba6:	0049      	lsls	r1, r1, #1
   19ba8:	3004      	adds	r0, #4
   19baa:	420b      	tst	r3, r1
   19bac:	d0fb      	beq.n	19ba6 <_malloc_r+0x46a>
   19bae:	e643      	b.n	19838 <_malloc_r+0xfc>
   19bb0:	2301      	movs	r3, #1
   19bb2:	464a      	mov	r2, r9
   19bb4:	6053      	str	r3, [r2, #4]
   19bb6:	0038      	movs	r0, r7
   19bb8:	f000 f994 	bl	19ee4 <__malloc_unlock>
   19bbc:	2000      	movs	r0, #0
   19bbe:	e68c      	b.n	198da <_malloc_r+0x19e>
   19bc0:	4694      	mov	ip, r2
   19bc2:	e76a      	b.n	19a9a <_malloc_r+0x35e>
   19bc4:	23aa      	movs	r3, #170	; 0xaa
   19bc6:	005b      	lsls	r3, r3, #1
   19bc8:	4298      	cmp	r0, r3
   19bca:	d811      	bhi.n	19bf0 <_malloc_r+0x4b4>
   19bcc:	3bdd      	subs	r3, #221	; 0xdd
   19bce:	4698      	mov	r8, r3
   19bd0:	0be8      	lsrs	r0, r5, #15
   19bd2:	4480      	add	r8, r0
   19bd4:	3078      	adds	r0, #120	; 0x78
   19bd6:	00c1      	lsls	r1, r0, #3
   19bd8:	e5d7      	b.n	1978a <_malloc_r+0x4e>
   19bda:	2380      	movs	r3, #128	; 0x80
   19bdc:	015b      	lsls	r3, r3, #5
   19bde:	e6dd      	b.n	1999c <_malloc_r+0x260>
   19be0:	1089      	asrs	r1, r1, #2
   19be2:	3b02      	subs	r3, #2
   19be4:	408b      	lsls	r3, r1
   19be6:	6872      	ldr	r2, [r6, #4]
   19be8:	4313      	orrs	r3, r2
   19bea:	6073      	str	r3, [r6, #4]
   19bec:	4662      	mov	r2, ip
   19bee:	e757      	b.n	19aa0 <_malloc_r+0x364>
   19bf0:	4b2b      	ldr	r3, [pc, #172]	; (19ca0 <_malloc_r+0x564>)
   19bf2:	4298      	cmp	r0, r3
   19bf4:	d81c      	bhi.n	19c30 <_malloc_r+0x4f4>
   19bf6:	237c      	movs	r3, #124	; 0x7c
   19bf8:	4698      	mov	r8, r3
   19bfa:	0ca8      	lsrs	r0, r5, #18
   19bfc:	4480      	add	r8, r0
   19bfe:	307d      	adds	r0, #125	; 0x7d
   19c00:	00c1      	lsls	r1, r0, #3
   19c02:	e5c2      	b.n	1978a <_malloc_r+0x4e>
   19c04:	3310      	adds	r3, #16
   19c06:	9300      	str	r3, [sp, #0]
   19c08:	e699      	b.n	1993e <_malloc_r+0x202>
   19c0a:	2a54      	cmp	r2, #84	; 0x54
   19c0c:	d826      	bhi.n	19c5c <_malloc_r+0x520>
   19c0e:	464b      	mov	r3, r9
   19c10:	0b1a      	lsrs	r2, r3, #12
   19c12:	0011      	movs	r1, r2
   19c14:	326f      	adds	r2, #111	; 0x6f
   19c16:	316e      	adds	r1, #110	; 0x6e
   19c18:	00d2      	lsls	r2, r2, #3
   19c1a:	e729      	b.n	19a70 <_malloc_r+0x334>
   19c1c:	051b      	lsls	r3, r3, #20
   19c1e:	d000      	beq.n	19c22 <_malloc_r+0x4e6>
   19c20:	e6a6      	b.n	19970 <_malloc_r+0x234>
   19c22:	2001      	movs	r0, #1
   19c24:	9b00      	ldr	r3, [sp, #0]
   19c26:	68b2      	ldr	r2, [r6, #8]
   19c28:	4443      	add	r3, r8
   19c2a:	4303      	orrs	r3, r0
   19c2c:	6053      	str	r3, [r2, #4]
   19c2e:	e6e6      	b.n	199fe <_malloc_r+0x2c2>
   19c30:	21fe      	movs	r1, #254	; 0xfe
   19c32:	237e      	movs	r3, #126	; 0x7e
   19c34:	207f      	movs	r0, #127	; 0x7f
   19c36:	0089      	lsls	r1, r1, #2
   19c38:	4698      	mov	r8, r3
   19c3a:	e5a6      	b.n	1978a <_malloc_r+0x4e>
   19c3c:	2300      	movs	r3, #0
   19c3e:	2001      	movs	r0, #1
   19c40:	469b      	mov	fp, r3
   19c42:	e6bd      	b.n	199c0 <_malloc_r+0x284>
   19c44:	0021      	movs	r1, r4
   19c46:	0038      	movs	r0, r7
   19c48:	3108      	adds	r1, #8
   19c4a:	f003 fb4f 	bl	1d2ec <_free_r>
   19c4e:	4653      	mov	r3, sl
   19c50:	6819      	ldr	r1, [r3, #0]
   19c52:	e6d4      	b.n	199fe <_malloc_r+0x2c2>
   19c54:	465b      	mov	r3, fp
   19c56:	464a      	mov	r2, r9
   19c58:	601a      	str	r2, [r3, #0]
   19c5a:	e694      	b.n	19986 <_malloc_r+0x24a>
   19c5c:	21aa      	movs	r1, #170	; 0xaa
   19c5e:	0049      	lsls	r1, r1, #1
   19c60:	428a      	cmp	r2, r1
   19c62:	d806      	bhi.n	19c72 <_malloc_r+0x536>
   19c64:	464b      	mov	r3, r9
   19c66:	0bda      	lsrs	r2, r3, #15
   19c68:	0011      	movs	r1, r2
   19c6a:	3278      	adds	r2, #120	; 0x78
   19c6c:	3177      	adds	r1, #119	; 0x77
   19c6e:	00d2      	lsls	r2, r2, #3
   19c70:	e6fe      	b.n	19a70 <_malloc_r+0x334>
   19c72:	490b      	ldr	r1, [pc, #44]	; (19ca0 <_malloc_r+0x564>)
   19c74:	428a      	cmp	r2, r1
   19c76:	d806      	bhi.n	19c86 <_malloc_r+0x54a>
   19c78:	464b      	mov	r3, r9
   19c7a:	0c9a      	lsrs	r2, r3, #18
   19c7c:	0011      	movs	r1, r2
   19c7e:	327d      	adds	r2, #125	; 0x7d
   19c80:	317c      	adds	r1, #124	; 0x7c
   19c82:	00d2      	lsls	r2, r2, #3
   19c84:	e6f4      	b.n	19a70 <_malloc_r+0x334>
   19c86:	22fe      	movs	r2, #254	; 0xfe
   19c88:	217e      	movs	r1, #126	; 0x7e
   19c8a:	0092      	lsls	r2, r2, #2
   19c8c:	e6f0      	b.n	19a70 <_malloc_r+0x334>
   19c8e:	6873      	ldr	r3, [r6, #4]
   19c90:	e77e      	b.n	19b90 <_malloc_r+0x454>
   19c92:	002b      	movs	r3, r5
   19c94:	08e8      	lsrs	r0, r5, #3
   19c96:	3308      	adds	r3, #8
   19c98:	e605      	b.n	198a6 <_malloc_r+0x16a>
   19c9a:	46c0      	nop			; (mov r8, r8)
   19c9c:	20001138 	.word	0x20001138
   19ca0:	00000554 	.word	0x00000554

00019ca4 <__ascii_mbtowc>:
   19ca4:	b082      	sub	sp, #8
   19ca6:	2900      	cmp	r1, #0
   19ca8:	d00a      	beq.n	19cc0 <__ascii_mbtowc+0x1c>
   19caa:	2a00      	cmp	r2, #0
   19cac:	d00b      	beq.n	19cc6 <__ascii_mbtowc+0x22>
   19cae:	2b00      	cmp	r3, #0
   19cb0:	d00b      	beq.n	19cca <__ascii_mbtowc+0x26>
   19cb2:	7813      	ldrb	r3, [r2, #0]
   19cb4:	600b      	str	r3, [r1, #0]
   19cb6:	7810      	ldrb	r0, [r2, #0]
   19cb8:	1e43      	subs	r3, r0, #1
   19cba:	4198      	sbcs	r0, r3
   19cbc:	b002      	add	sp, #8
   19cbe:	4770      	bx	lr
   19cc0:	a901      	add	r1, sp, #4
   19cc2:	2a00      	cmp	r2, #0
   19cc4:	d1f3      	bne.n	19cae <__ascii_mbtowc+0xa>
   19cc6:	2000      	movs	r0, #0
   19cc8:	e7f8      	b.n	19cbc <__ascii_mbtowc+0x18>
   19cca:	2002      	movs	r0, #2
   19ccc:	4240      	negs	r0, r0
   19cce:	e7f5      	b.n	19cbc <__ascii_mbtowc+0x18>

00019cd0 <memcmp>:
   19cd0:	b510      	push	{r4, lr}
   19cd2:	2a03      	cmp	r2, #3
   19cd4:	d91c      	bls.n	19d10 <memcmp+0x40>
   19cd6:	0003      	movs	r3, r0
   19cd8:	430b      	orrs	r3, r1
   19cda:	079b      	lsls	r3, r3, #30
   19cdc:	d00f      	beq.n	19cfe <memcmp+0x2e>
   19cde:	7803      	ldrb	r3, [r0, #0]
   19ce0:	780c      	ldrb	r4, [r1, #0]
   19ce2:	1882      	adds	r2, r0, r2
   19ce4:	42a3      	cmp	r3, r4
   19ce6:	d004      	beq.n	19cf2 <memcmp+0x22>
   19ce8:	e015      	b.n	19d16 <memcmp+0x46>
   19cea:	7803      	ldrb	r3, [r0, #0]
   19cec:	780c      	ldrb	r4, [r1, #0]
   19cee:	42a3      	cmp	r3, r4
   19cf0:	d111      	bne.n	19d16 <memcmp+0x46>
   19cf2:	3001      	adds	r0, #1
   19cf4:	3101      	adds	r1, #1
   19cf6:	4282      	cmp	r2, r0
   19cf8:	d1f7      	bne.n	19cea <memcmp+0x1a>
   19cfa:	2000      	movs	r0, #0
   19cfc:	bd10      	pop	{r4, pc}
   19cfe:	6803      	ldr	r3, [r0, #0]
   19d00:	680c      	ldr	r4, [r1, #0]
   19d02:	42a3      	cmp	r3, r4
   19d04:	d1eb      	bne.n	19cde <memcmp+0xe>
   19d06:	3a04      	subs	r2, #4
   19d08:	3004      	adds	r0, #4
   19d0a:	3104      	adds	r1, #4
   19d0c:	2a03      	cmp	r2, #3
   19d0e:	d8f6      	bhi.n	19cfe <memcmp+0x2e>
   19d10:	2a00      	cmp	r2, #0
   19d12:	d1e4      	bne.n	19cde <memcmp+0xe>
   19d14:	e7f1      	b.n	19cfa <memcmp+0x2a>
   19d16:	1b18      	subs	r0, r3, r4
   19d18:	e7f0      	b.n	19cfc <memcmp+0x2c>
   19d1a:	46c0      	nop			; (mov r8, r8)

00019d1c <memcpy>:
   19d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19d1e:	0005      	movs	r5, r0
   19d20:	2a0f      	cmp	r2, #15
   19d22:	d92f      	bls.n	19d84 <memcpy+0x68>
   19d24:	000b      	movs	r3, r1
   19d26:	4303      	orrs	r3, r0
   19d28:	079b      	lsls	r3, r3, #30
   19d2a:	d134      	bne.n	19d96 <memcpy+0x7a>
   19d2c:	0016      	movs	r6, r2
   19d2e:	000c      	movs	r4, r1
   19d30:	0003      	movs	r3, r0
   19d32:	3e10      	subs	r6, #16
   19d34:	0935      	lsrs	r5, r6, #4
   19d36:	3501      	adds	r5, #1
   19d38:	012d      	lsls	r5, r5, #4
   19d3a:	1945      	adds	r5, r0, r5
   19d3c:	6827      	ldr	r7, [r4, #0]
   19d3e:	601f      	str	r7, [r3, #0]
   19d40:	6867      	ldr	r7, [r4, #4]
   19d42:	605f      	str	r7, [r3, #4]
   19d44:	68a7      	ldr	r7, [r4, #8]
   19d46:	609f      	str	r7, [r3, #8]
   19d48:	68e7      	ldr	r7, [r4, #12]
   19d4a:	3410      	adds	r4, #16
   19d4c:	60df      	str	r7, [r3, #12]
   19d4e:	3310      	adds	r3, #16
   19d50:	429d      	cmp	r5, r3
   19d52:	d1f3      	bne.n	19d3c <memcpy+0x20>
   19d54:	230f      	movs	r3, #15
   19d56:	439e      	bics	r6, r3
   19d58:	3610      	adds	r6, #16
   19d5a:	1985      	adds	r5, r0, r6
   19d5c:	1989      	adds	r1, r1, r6
   19d5e:	4013      	ands	r3, r2
   19d60:	2b03      	cmp	r3, #3
   19d62:	d91a      	bls.n	19d9a <memcpy+0x7e>
   19d64:	1f1e      	subs	r6, r3, #4
   19d66:	2300      	movs	r3, #0
   19d68:	08b4      	lsrs	r4, r6, #2
   19d6a:	3401      	adds	r4, #1
   19d6c:	00a4      	lsls	r4, r4, #2
   19d6e:	58cf      	ldr	r7, [r1, r3]
   19d70:	50ef      	str	r7, [r5, r3]
   19d72:	3304      	adds	r3, #4
   19d74:	42a3      	cmp	r3, r4
   19d76:	d1fa      	bne.n	19d6e <memcpy+0x52>
   19d78:	2403      	movs	r4, #3
   19d7a:	43a6      	bics	r6, r4
   19d7c:	1d33      	adds	r3, r6, #4
   19d7e:	4022      	ands	r2, r4
   19d80:	18c9      	adds	r1, r1, r3
   19d82:	18ed      	adds	r5, r5, r3
   19d84:	2a00      	cmp	r2, #0
   19d86:	d005      	beq.n	19d94 <memcpy+0x78>
   19d88:	2300      	movs	r3, #0
   19d8a:	5ccc      	ldrb	r4, [r1, r3]
   19d8c:	54ec      	strb	r4, [r5, r3]
   19d8e:	3301      	adds	r3, #1
   19d90:	4293      	cmp	r3, r2
   19d92:	d1fa      	bne.n	19d8a <memcpy+0x6e>
   19d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19d96:	0005      	movs	r5, r0
   19d98:	e7f6      	b.n	19d88 <memcpy+0x6c>
   19d9a:	001a      	movs	r2, r3
   19d9c:	e7f2      	b.n	19d84 <memcpy+0x68>
   19d9e:	46c0      	nop			; (mov r8, r8)

00019da0 <memmove>:
   19da0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19da2:	4288      	cmp	r0, r1
   19da4:	d90a      	bls.n	19dbc <memmove+0x1c>
   19da6:	188b      	adds	r3, r1, r2
   19da8:	4298      	cmp	r0, r3
   19daa:	d207      	bcs.n	19dbc <memmove+0x1c>
   19dac:	1e53      	subs	r3, r2, #1
   19dae:	2a00      	cmp	r2, #0
   19db0:	d003      	beq.n	19dba <memmove+0x1a>
   19db2:	5cca      	ldrb	r2, [r1, r3]
   19db4:	54c2      	strb	r2, [r0, r3]
   19db6:	3b01      	subs	r3, #1
   19db8:	d2fb      	bcs.n	19db2 <memmove+0x12>
   19dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19dbc:	0005      	movs	r5, r0
   19dbe:	2a0f      	cmp	r2, #15
   19dc0:	d808      	bhi.n	19dd4 <memmove+0x34>
   19dc2:	2a00      	cmp	r2, #0
   19dc4:	d0f9      	beq.n	19dba <memmove+0x1a>
   19dc6:	2300      	movs	r3, #0
   19dc8:	5ccc      	ldrb	r4, [r1, r3]
   19dca:	54ec      	strb	r4, [r5, r3]
   19dcc:	3301      	adds	r3, #1
   19dce:	4293      	cmp	r3, r2
   19dd0:	d1fa      	bne.n	19dc8 <memmove+0x28>
   19dd2:	e7f2      	b.n	19dba <memmove+0x1a>
   19dd4:	000b      	movs	r3, r1
   19dd6:	4303      	orrs	r3, r0
   19dd8:	079b      	lsls	r3, r3, #30
   19dda:	d12d      	bne.n	19e38 <memmove+0x98>
   19ddc:	0015      	movs	r5, r2
   19dde:	000c      	movs	r4, r1
   19de0:	0003      	movs	r3, r0
   19de2:	3d10      	subs	r5, #16
   19de4:	092f      	lsrs	r7, r5, #4
   19de6:	3701      	adds	r7, #1
   19de8:	013f      	lsls	r7, r7, #4
   19dea:	19c7      	adds	r7, r0, r7
   19dec:	6826      	ldr	r6, [r4, #0]
   19dee:	601e      	str	r6, [r3, #0]
   19df0:	6866      	ldr	r6, [r4, #4]
   19df2:	605e      	str	r6, [r3, #4]
   19df4:	68a6      	ldr	r6, [r4, #8]
   19df6:	609e      	str	r6, [r3, #8]
   19df8:	68e6      	ldr	r6, [r4, #12]
   19dfa:	3410      	adds	r4, #16
   19dfc:	60de      	str	r6, [r3, #12]
   19dfe:	3310      	adds	r3, #16
   19e00:	429f      	cmp	r7, r3
   19e02:	d1f3      	bne.n	19dec <memmove+0x4c>
   19e04:	240f      	movs	r4, #15
   19e06:	43a5      	bics	r5, r4
   19e08:	3510      	adds	r5, #16
   19e0a:	1949      	adds	r1, r1, r5
   19e0c:	4014      	ands	r4, r2
   19e0e:	1945      	adds	r5, r0, r5
   19e10:	2c03      	cmp	r4, #3
   19e12:	d913      	bls.n	19e3c <memmove+0x9c>
   19e14:	2300      	movs	r3, #0
   19e16:	1f27      	subs	r7, r4, #4
   19e18:	08be      	lsrs	r6, r7, #2
   19e1a:	3601      	adds	r6, #1
   19e1c:	00b6      	lsls	r6, r6, #2
   19e1e:	58cc      	ldr	r4, [r1, r3]
   19e20:	50ec      	str	r4, [r5, r3]
   19e22:	3304      	adds	r3, #4
   19e24:	42b3      	cmp	r3, r6
   19e26:	d1fa      	bne.n	19e1e <memmove+0x7e>
   19e28:	2603      	movs	r6, #3
   19e2a:	43b7      	bics	r7, r6
   19e2c:	1d3c      	adds	r4, r7, #4
   19e2e:	1909      	adds	r1, r1, r4
   19e30:	192d      	adds	r5, r5, r4
   19e32:	4032      	ands	r2, r6
   19e34:	d1c7      	bne.n	19dc6 <memmove+0x26>
   19e36:	e7c0      	b.n	19dba <memmove+0x1a>
   19e38:	0005      	movs	r5, r0
   19e3a:	e7c4      	b.n	19dc6 <memmove+0x26>
   19e3c:	0022      	movs	r2, r4
   19e3e:	e7c0      	b.n	19dc2 <memmove+0x22>

00019e40 <memset>:
   19e40:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e42:	0783      	lsls	r3, r0, #30
   19e44:	d043      	beq.n	19ece <memset+0x8e>
   19e46:	1e54      	subs	r4, r2, #1
   19e48:	2a00      	cmp	r2, #0
   19e4a:	d03f      	beq.n	19ecc <memset+0x8c>
   19e4c:	b2ce      	uxtb	r6, r1
   19e4e:	0002      	movs	r2, r0
   19e50:	2503      	movs	r5, #3
   19e52:	e002      	b.n	19e5a <memset+0x1a>
   19e54:	001a      	movs	r2, r3
   19e56:	3c01      	subs	r4, #1
   19e58:	d338      	bcc.n	19ecc <memset+0x8c>
   19e5a:	1c53      	adds	r3, r2, #1
   19e5c:	7016      	strb	r6, [r2, #0]
   19e5e:	422b      	tst	r3, r5
   19e60:	d1f8      	bne.n	19e54 <memset+0x14>
   19e62:	2c03      	cmp	r4, #3
   19e64:	d92a      	bls.n	19ebc <memset+0x7c>
   19e66:	22ff      	movs	r2, #255	; 0xff
   19e68:	400a      	ands	r2, r1
   19e6a:	0215      	lsls	r5, r2, #8
   19e6c:	4315      	orrs	r5, r2
   19e6e:	042a      	lsls	r2, r5, #16
   19e70:	4315      	orrs	r5, r2
   19e72:	2c0f      	cmp	r4, #15
   19e74:	d914      	bls.n	19ea0 <memset+0x60>
   19e76:	0027      	movs	r7, r4
   19e78:	001a      	movs	r2, r3
   19e7a:	3f10      	subs	r7, #16
   19e7c:	093e      	lsrs	r6, r7, #4
   19e7e:	3601      	adds	r6, #1
   19e80:	0136      	lsls	r6, r6, #4
   19e82:	199e      	adds	r6, r3, r6
   19e84:	6015      	str	r5, [r2, #0]
   19e86:	6055      	str	r5, [r2, #4]
   19e88:	6095      	str	r5, [r2, #8]
   19e8a:	60d5      	str	r5, [r2, #12]
   19e8c:	3210      	adds	r2, #16
   19e8e:	4296      	cmp	r6, r2
   19e90:	d1f8      	bne.n	19e84 <memset+0x44>
   19e92:	220f      	movs	r2, #15
   19e94:	4397      	bics	r7, r2
   19e96:	3710      	adds	r7, #16
   19e98:	19db      	adds	r3, r3, r7
   19e9a:	4014      	ands	r4, r2
   19e9c:	2c03      	cmp	r4, #3
   19e9e:	d90d      	bls.n	19ebc <memset+0x7c>
   19ea0:	001a      	movs	r2, r3
   19ea2:	1f27      	subs	r7, r4, #4
   19ea4:	08be      	lsrs	r6, r7, #2
   19ea6:	3601      	adds	r6, #1
   19ea8:	00b6      	lsls	r6, r6, #2
   19eaa:	199e      	adds	r6, r3, r6
   19eac:	c220      	stmia	r2!, {r5}
   19eae:	42b2      	cmp	r2, r6
   19eb0:	d1fc      	bne.n	19eac <memset+0x6c>
   19eb2:	2203      	movs	r2, #3
   19eb4:	4397      	bics	r7, r2
   19eb6:	3704      	adds	r7, #4
   19eb8:	19db      	adds	r3, r3, r7
   19eba:	4014      	ands	r4, r2
   19ebc:	2c00      	cmp	r4, #0
   19ebe:	d005      	beq.n	19ecc <memset+0x8c>
   19ec0:	b2c9      	uxtb	r1, r1
   19ec2:	191c      	adds	r4, r3, r4
   19ec4:	7019      	strb	r1, [r3, #0]
   19ec6:	3301      	adds	r3, #1
   19ec8:	429c      	cmp	r4, r3
   19eca:	d1fb      	bne.n	19ec4 <memset+0x84>
   19ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19ece:	0014      	movs	r4, r2
   19ed0:	0003      	movs	r3, r0
   19ed2:	e7c6      	b.n	19e62 <memset+0x22>

00019ed4 <__malloc_lock>:
   19ed4:	b510      	push	{r4, lr}
   19ed6:	4802      	ldr	r0, [pc, #8]	; (19ee0 <__malloc_lock+0xc>)
   19ed8:	f003 fca0 	bl	1d81c <__retarget_lock_acquire_recursive>
   19edc:	bd10      	pop	{r4, pc}
   19ede:	46c0      	nop			; (mov r8, r8)
   19ee0:	20002fd0 	.word	0x20002fd0

00019ee4 <__malloc_unlock>:
   19ee4:	b510      	push	{r4, lr}
   19ee6:	4802      	ldr	r0, [pc, #8]	; (19ef0 <__malloc_unlock+0xc>)
   19ee8:	f003 fc9a 	bl	1d820 <__retarget_lock_release_recursive>
   19eec:	bd10      	pop	{r4, pc}
   19eee:	46c0      	nop			; (mov r8, r8)
   19ef0:	20002fd0 	.word	0x20002fd0

00019ef4 <printf>:
   19ef4:	b40f      	push	{r0, r1, r2, r3}
   19ef6:	b500      	push	{lr}
   19ef8:	4906      	ldr	r1, [pc, #24]	; (19f14 <printf+0x20>)
   19efa:	b083      	sub	sp, #12
   19efc:	ab04      	add	r3, sp, #16
   19efe:	6808      	ldr	r0, [r1, #0]
   19f00:	cb04      	ldmia	r3!, {r2}
   19f02:	6881      	ldr	r1, [r0, #8]
   19f04:	9301      	str	r3, [sp, #4]
   19f06:	f000 fb9b 	bl	1a640 <_vfprintf_r>
   19f0a:	b003      	add	sp, #12
   19f0c:	bc08      	pop	{r3}
   19f0e:	b004      	add	sp, #16
   19f10:	4718      	bx	r3
   19f12:	46c0      	nop			; (mov r8, r8)
   19f14:	20000018 	.word	0x20000018

00019f18 <_puts_r>:
   19f18:	b530      	push	{r4, r5, lr}
   19f1a:	0004      	movs	r4, r0
   19f1c:	b089      	sub	sp, #36	; 0x24
   19f1e:	0008      	movs	r0, r1
   19f20:	000d      	movs	r5, r1
   19f22:	f000 f9a7 	bl	1a274 <strlen>
   19f26:	ab04      	add	r3, sp, #16
   19f28:	4a21      	ldr	r2, [pc, #132]	; (19fb0 <_puts_r+0x98>)
   19f2a:	9301      	str	r3, [sp, #4]
   19f2c:	2302      	movs	r3, #2
   19f2e:	9206      	str	r2, [sp, #24]
   19f30:	2201      	movs	r2, #1
   19f32:	9302      	str	r3, [sp, #8]
   19f34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19f36:	9005      	str	r0, [sp, #20]
   19f38:	3001      	adds	r0, #1
   19f3a:	9504      	str	r5, [sp, #16]
   19f3c:	9207      	str	r2, [sp, #28]
   19f3e:	9003      	str	r0, [sp, #12]
   19f40:	68a5      	ldr	r5, [r4, #8]
   19f42:	2b00      	cmp	r3, #0
   19f44:	d02f      	beq.n	19fa6 <_puts_r+0x8e>
   19f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19f48:	07db      	lsls	r3, r3, #31
   19f4a:	d424      	bmi.n	19f96 <_puts_r+0x7e>
   19f4c:	230c      	movs	r3, #12
   19f4e:	5eea      	ldrsh	r2, [r5, r3]
   19f50:	b291      	uxth	r1, r2
   19f52:	058b      	lsls	r3, r1, #22
   19f54:	d51c      	bpl.n	19f90 <_puts_r+0x78>
   19f56:	2380      	movs	r3, #128	; 0x80
   19f58:	019b      	lsls	r3, r3, #6
   19f5a:	4219      	tst	r1, r3
   19f5c:	d105      	bne.n	19f6a <_puts_r+0x52>
   19f5e:	4313      	orrs	r3, r2
   19f60:	81ab      	strh	r3, [r5, #12]
   19f62:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   19f64:	4b13      	ldr	r3, [pc, #76]	; (19fb4 <_puts_r+0x9c>)
   19f66:	4013      	ands	r3, r2
   19f68:	666b      	str	r3, [r5, #100]	; 0x64
   19f6a:	0020      	movs	r0, r4
   19f6c:	aa01      	add	r2, sp, #4
   19f6e:	0029      	movs	r1, r5
   19f70:	f003 fa9a 	bl	1d4a8 <__sfvwrite_r>
   19f74:	1e44      	subs	r4, r0, #1
   19f76:	41a0      	sbcs	r0, r4
   19f78:	4244      	negs	r4, r0
   19f7a:	200a      	movs	r0, #10
   19f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   19f7e:	4304      	orrs	r4, r0
   19f80:	07db      	lsls	r3, r3, #31
   19f82:	d402      	bmi.n	19f8a <_puts_r+0x72>
   19f84:	89ab      	ldrh	r3, [r5, #12]
   19f86:	059b      	lsls	r3, r3, #22
   19f88:	d509      	bpl.n	19f9e <_puts_r+0x86>
   19f8a:	0020      	movs	r0, r4
   19f8c:	b009      	add	sp, #36	; 0x24
   19f8e:	bd30      	pop	{r4, r5, pc}
   19f90:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19f92:	f003 fc43 	bl	1d81c <__retarget_lock_acquire_recursive>
   19f96:	230c      	movs	r3, #12
   19f98:	5eea      	ldrsh	r2, [r5, r3]
   19f9a:	b291      	uxth	r1, r2
   19f9c:	e7db      	b.n	19f56 <_puts_r+0x3e>
   19f9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   19fa0:	f003 fc3e 	bl	1d820 <__retarget_lock_release_recursive>
   19fa4:	e7f1      	b.n	19f8a <_puts_r+0x72>
   19fa6:	0020      	movs	r0, r4
   19fa8:	f003 f8f6 	bl	1d198 <__sinit>
   19fac:	e7cb      	b.n	19f46 <_puts_r+0x2e>
   19fae:	46c0      	nop			; (mov r8, r8)
   19fb0:	00020500 	.word	0x00020500
   19fb4:	ffffdfff 	.word	0xffffdfff

00019fb8 <puts>:
   19fb8:	b510      	push	{r4, lr}
   19fba:	4b03      	ldr	r3, [pc, #12]	; (19fc8 <puts+0x10>)
   19fbc:	0001      	movs	r1, r0
   19fbe:	6818      	ldr	r0, [r3, #0]
   19fc0:	f7ff ffaa 	bl	19f18 <_puts_r>
   19fc4:	bd10      	pop	{r4, pc}
   19fc6:	46c0      	nop			; (mov r8, r8)
   19fc8:	20000018 	.word	0x20000018

00019fcc <srand>:
   19fcc:	2200      	movs	r2, #0
   19fce:	4b03      	ldr	r3, [pc, #12]	; (19fdc <srand+0x10>)
   19fd0:	681b      	ldr	r3, [r3, #0]
   19fd2:	33a8      	adds	r3, #168	; 0xa8
   19fd4:	6018      	str	r0, [r3, #0]
   19fd6:	605a      	str	r2, [r3, #4]
   19fd8:	4770      	bx	lr
   19fda:	46c0      	nop			; (mov r8, r8)
   19fdc:	20000018 	.word	0x20000018

00019fe0 <rand>:
   19fe0:	b510      	push	{r4, lr}
   19fe2:	4b09      	ldr	r3, [pc, #36]	; (1a008 <rand+0x28>)
   19fe4:	4a09      	ldr	r2, [pc, #36]	; (1a00c <rand+0x2c>)
   19fe6:	681c      	ldr	r4, [r3, #0]
   19fe8:	4b09      	ldr	r3, [pc, #36]	; (1a010 <rand+0x30>)
   19fea:	34a8      	adds	r4, #168	; 0xa8
   19fec:	6820      	ldr	r0, [r4, #0]
   19fee:	6861      	ldr	r1, [r4, #4]
   19ff0:	f7fc fcf0 	bl	169d4 <__aeabi_lmul>
   19ff4:	2201      	movs	r2, #1
   19ff6:	2300      	movs	r3, #0
   19ff8:	1880      	adds	r0, r0, r2
   19ffa:	4159      	adcs	r1, r3
   19ffc:	6020      	str	r0, [r4, #0]
   19ffe:	6061      	str	r1, [r4, #4]
   1a000:	0048      	lsls	r0, r1, #1
   1a002:	0840      	lsrs	r0, r0, #1
   1a004:	bd10      	pop	{r4, pc}
   1a006:	46c0      	nop			; (mov r8, r8)
   1a008:	20000018 	.word	0x20000018
   1a00c:	4c957f2d 	.word	0x4c957f2d
   1a010:	5851f42d 	.word	0x5851f42d

0001a014 <_sbrk_r>:
   1a014:	2300      	movs	r3, #0
   1a016:	b570      	push	{r4, r5, r6, lr}
   1a018:	4c06      	ldr	r4, [pc, #24]	; (1a034 <_sbrk_r+0x20>)
   1a01a:	0005      	movs	r5, r0
   1a01c:	0008      	movs	r0, r1
   1a01e:	6023      	str	r3, [r4, #0]
   1a020:	f7ed fcd8 	bl	79d4 <_sbrk>
   1a024:	1c43      	adds	r3, r0, #1
   1a026:	d000      	beq.n	1a02a <_sbrk_r+0x16>
   1a028:	bd70      	pop	{r4, r5, r6, pc}
   1a02a:	6823      	ldr	r3, [r4, #0]
   1a02c:	2b00      	cmp	r3, #0
   1a02e:	d0fb      	beq.n	1a028 <_sbrk_r+0x14>
   1a030:	602b      	str	r3, [r5, #0]
   1a032:	e7f9      	b.n	1a028 <_sbrk_r+0x14>
   1a034:	20002fe4 	.word	0x20002fe4

0001a038 <setbuf>:
   1a038:	424a      	negs	r2, r1
   1a03a:	414a      	adcs	r2, r1
   1a03c:	2380      	movs	r3, #128	; 0x80
   1a03e:	b510      	push	{r4, lr}
   1a040:	0052      	lsls	r2, r2, #1
   1a042:	00db      	lsls	r3, r3, #3
   1a044:	f000 f802 	bl	1a04c <setvbuf>
   1a048:	bd10      	pop	{r4, pc}
   1a04a:	46c0      	nop			; (mov r8, r8)

0001a04c <setvbuf>:
   1a04c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a04e:	4647      	mov	r7, r8
   1a050:	46ce      	mov	lr, r9
   1a052:	b580      	push	{r7, lr}
   1a054:	001f      	movs	r7, r3
   1a056:	4b63      	ldr	r3, [pc, #396]	; (1a1e4 <setvbuf+0x198>)
   1a058:	b083      	sub	sp, #12
   1a05a:	681d      	ldr	r5, [r3, #0]
   1a05c:	0004      	movs	r4, r0
   1a05e:	4688      	mov	r8, r1
   1a060:	0016      	movs	r6, r2
   1a062:	2d00      	cmp	r5, #0
   1a064:	d002      	beq.n	1a06c <setvbuf+0x20>
   1a066:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a068:	2b00      	cmp	r3, #0
   1a06a:	d066      	beq.n	1a13a <setvbuf+0xee>
   1a06c:	2e02      	cmp	r6, #2
   1a06e:	d005      	beq.n	1a07c <setvbuf+0x30>
   1a070:	2e01      	cmp	r6, #1
   1a072:	d900      	bls.n	1a076 <setvbuf+0x2a>
   1a074:	e0a1      	b.n	1a1ba <setvbuf+0x16e>
   1a076:	2f00      	cmp	r7, #0
   1a078:	da00      	bge.n	1a07c <setvbuf+0x30>
   1a07a:	e09e      	b.n	1a1ba <setvbuf+0x16e>
   1a07c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a07e:	07db      	lsls	r3, r3, #31
   1a080:	d533      	bpl.n	1a0ea <setvbuf+0x9e>
   1a082:	0021      	movs	r1, r4
   1a084:	0028      	movs	r0, r5
   1a086:	f003 f82d 	bl	1d0e4 <_fflush_r>
   1a08a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a08c:	2900      	cmp	r1, #0
   1a08e:	d008      	beq.n	1a0a2 <setvbuf+0x56>
   1a090:	0023      	movs	r3, r4
   1a092:	3340      	adds	r3, #64	; 0x40
   1a094:	4299      	cmp	r1, r3
   1a096:	d002      	beq.n	1a09e <setvbuf+0x52>
   1a098:	0028      	movs	r0, r5
   1a09a:	f003 f927 	bl	1d2ec <_free_r>
   1a09e:	2300      	movs	r3, #0
   1a0a0:	6323      	str	r3, [r4, #48]	; 0x30
   1a0a2:	2300      	movs	r3, #0
   1a0a4:	61a3      	str	r3, [r4, #24]
   1a0a6:	6063      	str	r3, [r4, #4]
   1a0a8:	220c      	movs	r2, #12
   1a0aa:	5ea3      	ldrsh	r3, [r4, r2]
   1a0ac:	061a      	lsls	r2, r3, #24
   1a0ae:	d43d      	bmi.n	1a12c <setvbuf+0xe0>
   1a0b0:	4a4d      	ldr	r2, [pc, #308]	; (1a1e8 <setvbuf+0x19c>)
   1a0b2:	4013      	ands	r3, r2
   1a0b4:	81a3      	strh	r3, [r4, #12]
   1a0b6:	2e02      	cmp	r6, #2
   1a0b8:	d01e      	beq.n	1a0f8 <setvbuf+0xac>
   1a0ba:	ab01      	add	r3, sp, #4
   1a0bc:	466a      	mov	r2, sp
   1a0be:	0021      	movs	r1, r4
   1a0c0:	0028      	movs	r0, r5
   1a0c2:	f003 fbaf 	bl	1d824 <__swhatbuf_r>
   1a0c6:	89a3      	ldrh	r3, [r4, #12]
   1a0c8:	4318      	orrs	r0, r3
   1a0ca:	81a0      	strh	r0, [r4, #12]
   1a0cc:	2f00      	cmp	r7, #0
   1a0ce:	d138      	bne.n	1a142 <setvbuf+0xf6>
   1a0d0:	9f00      	ldr	r7, [sp, #0]
   1a0d2:	0038      	movs	r0, r7
   1a0d4:	f7ff fb1e 	bl	19714 <malloc>
   1a0d8:	4680      	mov	r8, r0
   1a0da:	2800      	cmp	r0, #0
   1a0dc:	d100      	bne.n	1a0e0 <setvbuf+0x94>
   1a0de:	e06f      	b.n	1a1c0 <setvbuf+0x174>
   1a0e0:	2280      	movs	r2, #128	; 0x80
   1a0e2:	89a3      	ldrh	r3, [r4, #12]
   1a0e4:	4313      	orrs	r3, r2
   1a0e6:	81a3      	strh	r3, [r4, #12]
   1a0e8:	e02e      	b.n	1a148 <setvbuf+0xfc>
   1a0ea:	89a3      	ldrh	r3, [r4, #12]
   1a0ec:	059b      	lsls	r3, r3, #22
   1a0ee:	d4c8      	bmi.n	1a082 <setvbuf+0x36>
   1a0f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a0f2:	f003 fb93 	bl	1d81c <__retarget_lock_acquire_recursive>
   1a0f6:	e7c4      	b.n	1a082 <setvbuf+0x36>
   1a0f8:	2500      	movs	r5, #0
   1a0fa:	2202      	movs	r2, #2
   1a0fc:	4313      	orrs	r3, r2
   1a0fe:	2200      	movs	r2, #0
   1a100:	60a2      	str	r2, [r4, #8]
   1a102:	0022      	movs	r2, r4
   1a104:	3243      	adds	r2, #67	; 0x43
   1a106:	6022      	str	r2, [r4, #0]
   1a108:	6122      	str	r2, [r4, #16]
   1a10a:	2201      	movs	r2, #1
   1a10c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1a10e:	81a3      	strh	r3, [r4, #12]
   1a110:	6162      	str	r2, [r4, #20]
   1a112:	4211      	tst	r1, r2
   1a114:	d104      	bne.n	1a120 <setvbuf+0xd4>
   1a116:	059b      	lsls	r3, r3, #22
   1a118:	d402      	bmi.n	1a120 <setvbuf+0xd4>
   1a11a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a11c:	f003 fb80 	bl	1d820 <__retarget_lock_release_recursive>
   1a120:	0028      	movs	r0, r5
   1a122:	b003      	add	sp, #12
   1a124:	bc0c      	pop	{r2, r3}
   1a126:	4690      	mov	r8, r2
   1a128:	4699      	mov	r9, r3
   1a12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a12c:	6921      	ldr	r1, [r4, #16]
   1a12e:	0028      	movs	r0, r5
   1a130:	f003 f8dc 	bl	1d2ec <_free_r>
   1a134:	220c      	movs	r2, #12
   1a136:	5ea3      	ldrsh	r3, [r4, r2]
   1a138:	e7ba      	b.n	1a0b0 <setvbuf+0x64>
   1a13a:	0028      	movs	r0, r5
   1a13c:	f003 f82c 	bl	1d198 <__sinit>
   1a140:	e794      	b.n	1a06c <setvbuf+0x20>
   1a142:	4643      	mov	r3, r8
   1a144:	2b00      	cmp	r3, #0
   1a146:	d0c4      	beq.n	1a0d2 <setvbuf+0x86>
   1a148:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a14a:	2b00      	cmp	r3, #0
   1a14c:	d027      	beq.n	1a19e <setvbuf+0x152>
   1a14e:	9b00      	ldr	r3, [sp, #0]
   1a150:	429f      	cmp	r7, r3
   1a152:	d02a      	beq.n	1a1aa <setvbuf+0x15e>
   1a154:	2380      	movs	r3, #128	; 0x80
   1a156:	89a2      	ldrh	r2, [r4, #12]
   1a158:	011b      	lsls	r3, r3, #4
   1a15a:	4313      	orrs	r3, r2
   1a15c:	b21b      	sxth	r3, r3
   1a15e:	81a3      	strh	r3, [r4, #12]
   1a160:	2e01      	cmp	r6, #1
   1a162:	d026      	beq.n	1a1b2 <setvbuf+0x166>
   1a164:	4642      	mov	r2, r8
   1a166:	6022      	str	r2, [r4, #0]
   1a168:	6122      	str	r2, [r4, #16]
   1a16a:	2208      	movs	r2, #8
   1a16c:	b29b      	uxth	r3, r3
   1a16e:	6167      	str	r7, [r4, #20]
   1a170:	401a      	ands	r2, r3
   1a172:	d00b      	beq.n	1a18c <setvbuf+0x140>
   1a174:	07da      	lsls	r2, r3, #31
   1a176:	d510      	bpl.n	1a19a <setvbuf+0x14e>
   1a178:	2200      	movs	r2, #0
   1a17a:	2501      	movs	r5, #1
   1a17c:	60a2      	str	r2, [r4, #8]
   1a17e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a180:	427f      	negs	r7, r7
   1a182:	61a7      	str	r7, [r4, #24]
   1a184:	4015      	ands	r5, r2
   1a186:	d0c6      	beq.n	1a116 <setvbuf+0xca>
   1a188:	2500      	movs	r5, #0
   1a18a:	e7c9      	b.n	1a120 <setvbuf+0xd4>
   1a18c:	60a2      	str	r2, [r4, #8]
   1a18e:	2501      	movs	r5, #1
   1a190:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a192:	4015      	ands	r5, r2
   1a194:	d0bf      	beq.n	1a116 <setvbuf+0xca>
   1a196:	2500      	movs	r5, #0
   1a198:	e7c2      	b.n	1a120 <setvbuf+0xd4>
   1a19a:	60a7      	str	r7, [r4, #8]
   1a19c:	e7f7      	b.n	1a18e <setvbuf+0x142>
   1a19e:	0028      	movs	r0, r5
   1a1a0:	f002 fffa 	bl	1d198 <__sinit>
   1a1a4:	9b00      	ldr	r3, [sp, #0]
   1a1a6:	429f      	cmp	r7, r3
   1a1a8:	d1d4      	bne.n	1a154 <setvbuf+0x108>
   1a1aa:	220c      	movs	r2, #12
   1a1ac:	5ea3      	ldrsh	r3, [r4, r2]
   1a1ae:	2e01      	cmp	r6, #1
   1a1b0:	d1d8      	bne.n	1a164 <setvbuf+0x118>
   1a1b2:	2201      	movs	r2, #1
   1a1b4:	4313      	orrs	r3, r2
   1a1b6:	81a3      	strh	r3, [r4, #12]
   1a1b8:	e7d4      	b.n	1a164 <setvbuf+0x118>
   1a1ba:	2501      	movs	r5, #1
   1a1bc:	426d      	negs	r5, r5
   1a1be:	e7af      	b.n	1a120 <setvbuf+0xd4>
   1a1c0:	9b00      	ldr	r3, [sp, #0]
   1a1c2:	4699      	mov	r9, r3
   1a1c4:	42bb      	cmp	r3, r7
   1a1c6:	d005      	beq.n	1a1d4 <setvbuf+0x188>
   1a1c8:	0018      	movs	r0, r3
   1a1ca:	f7ff faa3 	bl	19714 <malloc>
   1a1ce:	4680      	mov	r8, r0
   1a1d0:	2800      	cmp	r0, #0
   1a1d2:	d104      	bne.n	1a1de <setvbuf+0x192>
   1a1d4:	2501      	movs	r5, #1
   1a1d6:	220c      	movs	r2, #12
   1a1d8:	5ea3      	ldrsh	r3, [r4, r2]
   1a1da:	426d      	negs	r5, r5
   1a1dc:	e78d      	b.n	1a0fa <setvbuf+0xae>
   1a1de:	464f      	mov	r7, r9
   1a1e0:	e77e      	b.n	1a0e0 <setvbuf+0x94>
   1a1e2:	46c0      	nop			; (mov r8, r8)
   1a1e4:	20000018 	.word	0x20000018
   1a1e8:	fffff35c 	.word	0xfffff35c

0001a1ec <strcmp>:
   1a1ec:	4602      	mov	r2, r0
   1a1ee:	b570      	push	{r4, r5, r6, lr}
   1a1f0:	430a      	orrs	r2, r1
   1a1f2:	0792      	lsls	r2, r2, #30
   1a1f4:	d12a      	bne.n	1a24c <strcmp+0x60>
   1a1f6:	4d1e      	ldr	r5, [pc, #120]	; (1a270 <strcmp+0x84>)
   1a1f8:	01ee      	lsls	r6, r5, #7
   1a1fa:	c804      	ldmia	r0!, {r2}
   1a1fc:	c908      	ldmia	r1!, {r3}
   1a1fe:	1b54      	subs	r4, r2, r5
   1a200:	4394      	bics	r4, r2
   1a202:	4034      	ands	r4, r6
   1a204:	d017      	beq.n	1a236 <strcmp+0x4a>
   1a206:	b2d0      	uxtb	r0, r2
   1a208:	b2d9      	uxtb	r1, r3
   1a20a:	1a40      	subs	r0, r0, r1
   1a20c:	0621      	lsls	r1, r4, #24
   1a20e:	4301      	orrs	r1, r0
   1a210:	d110      	bne.n	1a234 <strcmp+0x48>
   1a212:	b290      	uxth	r0, r2
   1a214:	b299      	uxth	r1, r3
   1a216:	1a40      	subs	r0, r0, r1
   1a218:	0421      	lsls	r1, r4, #16
   1a21a:	4301      	orrs	r1, r0
   1a21c:	d10a      	bne.n	1a234 <strcmp+0x48>
   1a21e:	0210      	lsls	r0, r2, #8
   1a220:	0219      	lsls	r1, r3, #8
   1a222:	0a00      	lsrs	r0, r0, #8
   1a224:	0a09      	lsrs	r1, r1, #8
   1a226:	1a40      	subs	r0, r0, r1
   1a228:	0221      	lsls	r1, r4, #8
   1a22a:	4301      	orrs	r1, r0
   1a22c:	d102      	bne.n	1a234 <strcmp+0x48>
   1a22e:	0e10      	lsrs	r0, r2, #24
   1a230:	0e19      	lsrs	r1, r3, #24
   1a232:	1a40      	subs	r0, r0, r1
   1a234:	bd70      	pop	{r4, r5, r6, pc}
   1a236:	429a      	cmp	r2, r3
   1a238:	d0df      	beq.n	1a1fa <strcmp+0xe>
   1a23a:	ba10      	rev	r0, r2
   1a23c:	ba19      	rev	r1, r3
   1a23e:	4288      	cmp	r0, r1
   1a240:	d901      	bls.n	1a246 <strcmp+0x5a>
   1a242:	2001      	movs	r0, #1
   1a244:	bd70      	pop	{r4, r5, r6, pc}
   1a246:	2000      	movs	r0, #0
   1a248:	43c0      	mvns	r0, r0
   1a24a:	bd70      	pop	{r4, r5, r6, pc}
   1a24c:	7802      	ldrb	r2, [r0, #0]
   1a24e:	780b      	ldrb	r3, [r1, #0]
   1a250:	3001      	adds	r0, #1
   1a252:	3101      	adds	r1, #1
   1a254:	2a00      	cmp	r2, #0
   1a256:	d009      	beq.n	1a26c <strcmp+0x80>
   1a258:	429a      	cmp	r2, r3
   1a25a:	d107      	bne.n	1a26c <strcmp+0x80>
   1a25c:	7802      	ldrb	r2, [r0, #0]
   1a25e:	780b      	ldrb	r3, [r1, #0]
   1a260:	3001      	adds	r0, #1
   1a262:	3101      	adds	r1, #1
   1a264:	2a00      	cmp	r2, #0
   1a266:	d001      	beq.n	1a26c <strcmp+0x80>
   1a268:	429a      	cmp	r2, r3
   1a26a:	d0ef      	beq.n	1a24c <strcmp+0x60>
   1a26c:	1ad0      	subs	r0, r2, r3
   1a26e:	bd70      	pop	{r4, r5, r6, pc}
   1a270:	01010101 	.word	0x01010101

0001a274 <strlen>:
   1a274:	b510      	push	{r4, lr}
   1a276:	0783      	lsls	r3, r0, #30
   1a278:	d025      	beq.n	1a2c6 <strlen+0x52>
   1a27a:	7803      	ldrb	r3, [r0, #0]
   1a27c:	2b00      	cmp	r3, #0
   1a27e:	d024      	beq.n	1a2ca <strlen+0x56>
   1a280:	0003      	movs	r3, r0
   1a282:	2103      	movs	r1, #3
   1a284:	e002      	b.n	1a28c <strlen+0x18>
   1a286:	781a      	ldrb	r2, [r3, #0]
   1a288:	2a00      	cmp	r2, #0
   1a28a:	d01a      	beq.n	1a2c2 <strlen+0x4e>
   1a28c:	3301      	adds	r3, #1
   1a28e:	420b      	tst	r3, r1
   1a290:	d1f9      	bne.n	1a286 <strlen+0x12>
   1a292:	6819      	ldr	r1, [r3, #0]
   1a294:	4a0e      	ldr	r2, [pc, #56]	; (1a2d0 <strlen+0x5c>)
   1a296:	4c0f      	ldr	r4, [pc, #60]	; (1a2d4 <strlen+0x60>)
   1a298:	188a      	adds	r2, r1, r2
   1a29a:	438a      	bics	r2, r1
   1a29c:	4222      	tst	r2, r4
   1a29e:	d106      	bne.n	1a2ae <strlen+0x3a>
   1a2a0:	3304      	adds	r3, #4
   1a2a2:	6819      	ldr	r1, [r3, #0]
   1a2a4:	4a0a      	ldr	r2, [pc, #40]	; (1a2d0 <strlen+0x5c>)
   1a2a6:	188a      	adds	r2, r1, r2
   1a2a8:	438a      	bics	r2, r1
   1a2aa:	4222      	tst	r2, r4
   1a2ac:	d0f8      	beq.n	1a2a0 <strlen+0x2c>
   1a2ae:	001a      	movs	r2, r3
   1a2b0:	781b      	ldrb	r3, [r3, #0]
   1a2b2:	2b00      	cmp	r3, #0
   1a2b4:	d003      	beq.n	1a2be <strlen+0x4a>
   1a2b6:	3201      	adds	r2, #1
   1a2b8:	7811      	ldrb	r1, [r2, #0]
   1a2ba:	2900      	cmp	r1, #0
   1a2bc:	d1fb      	bne.n	1a2b6 <strlen+0x42>
   1a2be:	1a10      	subs	r0, r2, r0
   1a2c0:	bd10      	pop	{r4, pc}
   1a2c2:	1a18      	subs	r0, r3, r0
   1a2c4:	e7fc      	b.n	1a2c0 <strlen+0x4c>
   1a2c6:	0003      	movs	r3, r0
   1a2c8:	e7e3      	b.n	1a292 <strlen+0x1e>
   1a2ca:	2000      	movs	r0, #0
   1a2cc:	e7f8      	b.n	1a2c0 <strlen+0x4c>
   1a2ce:	46c0      	nop			; (mov r8, r8)
   1a2d0:	fefefeff 	.word	0xfefefeff
   1a2d4:	80808080 	.word	0x80808080

0001a2d8 <_strtol_l.isra.0>:
   1a2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a2da:	4657      	mov	r7, sl
   1a2dc:	464e      	mov	r6, r9
   1a2de:	46de      	mov	lr, fp
   1a2e0:	4645      	mov	r5, r8
   1a2e2:	b5e0      	push	{r5, r6, r7, lr}
   1a2e4:	001e      	movs	r6, r3
   1a2e6:	2308      	movs	r3, #8
   1a2e8:	b083      	sub	sp, #12
   1a2ea:	9001      	str	r0, [sp, #4]
   1a2ec:	9100      	str	r1, [sp, #0]
   1a2ee:	4692      	mov	sl, r2
   1a2f0:	000f      	movs	r7, r1
   1a2f2:	4699      	mov	r9, r3
   1a2f4:	e000      	b.n	1a2f8 <_strtol_l.isra.0+0x20>
   1a2f6:	002f      	movs	r7, r5
   1a2f8:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a2fa:	783c      	ldrb	r4, [r7, #0]
   1a2fc:	f7ff f9f8 	bl	196f0 <__locale_ctype_ptr_l>
   1a300:	464a      	mov	r2, r9
   1a302:	1900      	adds	r0, r0, r4
   1a304:	7843      	ldrb	r3, [r0, #1]
   1a306:	1c7d      	adds	r5, r7, #1
   1a308:	421a      	tst	r2, r3
   1a30a:	d1f4      	bne.n	1a2f6 <_strtol_l.isra.0+0x1e>
   1a30c:	2c2d      	cmp	r4, #45	; 0x2d
   1a30e:	d04f      	beq.n	1a3b0 <_strtol_l.isra.0+0xd8>
   1a310:	2300      	movs	r3, #0
   1a312:	4698      	mov	r8, r3
   1a314:	2c2b      	cmp	r4, #43	; 0x2b
   1a316:	d05c      	beq.n	1a3d2 <_strtol_l.isra.0+0xfa>
   1a318:	2e00      	cmp	r6, #0
   1a31a:	d003      	beq.n	1a324 <_strtol_l.isra.0+0x4c>
   1a31c:	2e10      	cmp	r6, #16
   1a31e:	d05b      	beq.n	1a3d8 <_strtol_l.isra.0+0x100>
   1a320:	0037      	movs	r7, r6
   1a322:	e003      	b.n	1a32c <_strtol_l.isra.0+0x54>
   1a324:	2c30      	cmp	r4, #48	; 0x30
   1a326:	d063      	beq.n	1a3f0 <_strtol_l.isra.0+0x118>
   1a328:	270a      	movs	r7, #10
   1a32a:	260a      	movs	r6, #10
   1a32c:	4b35      	ldr	r3, [pc, #212]	; (1a404 <_strtol_l.isra.0+0x12c>)
   1a32e:	0039      	movs	r1, r7
   1a330:	4443      	add	r3, r8
   1a332:	0018      	movs	r0, r3
   1a334:	4699      	mov	r9, r3
   1a336:	f7fc f9c5 	bl	166c4 <__aeabi_uidivmod>
   1a33a:	4648      	mov	r0, r9
   1a33c:	468b      	mov	fp, r1
   1a33e:	0039      	movs	r1, r7
   1a340:	f7fc f93a 	bl	165b8 <__udivsi3>
   1a344:	2200      	movs	r2, #0
   1a346:	0001      	movs	r1, r0
   1a348:	2000      	movs	r0, #0
   1a34a:	0023      	movs	r3, r4
   1a34c:	3b30      	subs	r3, #48	; 0x30
   1a34e:	2b09      	cmp	r3, #9
   1a350:	d907      	bls.n	1a362 <_strtol_l.isra.0+0x8a>
   1a352:	3b11      	subs	r3, #17
   1a354:	2b19      	cmp	r3, #25
   1a356:	d903      	bls.n	1a360 <_strtol_l.isra.0+0x88>
   1a358:	0023      	movs	r3, r4
   1a35a:	3b61      	subs	r3, #97	; 0x61
   1a35c:	2b19      	cmp	r3, #25
   1a35e:	d80d      	bhi.n	1a37c <_strtol_l.isra.0+0xa4>
   1a360:	330a      	adds	r3, #10
   1a362:	429e      	cmp	r6, r3
   1a364:	dd0a      	ble.n	1a37c <_strtol_l.isra.0+0xa4>
   1a366:	1c54      	adds	r4, r2, #1
   1a368:	d005      	beq.n	1a376 <_strtol_l.isra.0+0x9e>
   1a36a:	4281      	cmp	r1, r0
   1a36c:	d31d      	bcc.n	1a3aa <_strtol_l.isra.0+0xd2>
   1a36e:	d01a      	beq.n	1a3a6 <_strtol_l.isra.0+0xce>
   1a370:	2201      	movs	r2, #1
   1a372:	4378      	muls	r0, r7
   1a374:	1818      	adds	r0, r3, r0
   1a376:	782c      	ldrb	r4, [r5, #0]
   1a378:	3501      	adds	r5, #1
   1a37a:	e7e6      	b.n	1a34a <_strtol_l.isra.0+0x72>
   1a37c:	1c53      	adds	r3, r2, #1
   1a37e:	d01c      	beq.n	1a3ba <_strtol_l.isra.0+0xe2>
   1a380:	4643      	mov	r3, r8
   1a382:	2b00      	cmp	r3, #0
   1a384:	d000      	beq.n	1a388 <_strtol_l.isra.0+0xb0>
   1a386:	4240      	negs	r0, r0
   1a388:	4653      	mov	r3, sl
   1a38a:	2b00      	cmp	r3, #0
   1a38c:	d004      	beq.n	1a398 <_strtol_l.isra.0+0xc0>
   1a38e:	9b00      	ldr	r3, [sp, #0]
   1a390:	2a00      	cmp	r2, #0
   1a392:	d11c      	bne.n	1a3ce <_strtol_l.isra.0+0xf6>
   1a394:	4652      	mov	r2, sl
   1a396:	6013      	str	r3, [r2, #0]
   1a398:	b003      	add	sp, #12
   1a39a:	bc3c      	pop	{r2, r3, r4, r5}
   1a39c:	4690      	mov	r8, r2
   1a39e:	4699      	mov	r9, r3
   1a3a0:	46a2      	mov	sl, r4
   1a3a2:	46ab      	mov	fp, r5
   1a3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a3a6:	459b      	cmp	fp, r3
   1a3a8:	dae2      	bge.n	1a370 <_strtol_l.isra.0+0x98>
   1a3aa:	2201      	movs	r2, #1
   1a3ac:	4252      	negs	r2, r2
   1a3ae:	e7e2      	b.n	1a376 <_strtol_l.isra.0+0x9e>
   1a3b0:	2301      	movs	r3, #1
   1a3b2:	782c      	ldrb	r4, [r5, #0]
   1a3b4:	4698      	mov	r8, r3
   1a3b6:	1cbd      	adds	r5, r7, #2
   1a3b8:	e7ae      	b.n	1a318 <_strtol_l.isra.0+0x40>
   1a3ba:	2322      	movs	r3, #34	; 0x22
   1a3bc:	9a01      	ldr	r2, [sp, #4]
   1a3be:	4648      	mov	r0, r9
   1a3c0:	6013      	str	r3, [r2, #0]
   1a3c2:	4653      	mov	r3, sl
   1a3c4:	2b00      	cmp	r3, #0
   1a3c6:	d0e7      	beq.n	1a398 <_strtol_l.isra.0+0xc0>
   1a3c8:	1e6b      	subs	r3, r5, #1
   1a3ca:	4648      	mov	r0, r9
   1a3cc:	e7e2      	b.n	1a394 <_strtol_l.isra.0+0xbc>
   1a3ce:	4681      	mov	r9, r0
   1a3d0:	e7fa      	b.n	1a3c8 <_strtol_l.isra.0+0xf0>
   1a3d2:	782c      	ldrb	r4, [r5, #0]
   1a3d4:	1cbd      	adds	r5, r7, #2
   1a3d6:	e79f      	b.n	1a318 <_strtol_l.isra.0+0x40>
   1a3d8:	2c30      	cmp	r4, #48	; 0x30
   1a3da:	d111      	bne.n	1a400 <_strtol_l.isra.0+0x128>
   1a3dc:	2220      	movs	r2, #32
   1a3de:	782b      	ldrb	r3, [r5, #0]
   1a3e0:	4393      	bics	r3, r2
   1a3e2:	2b58      	cmp	r3, #88	; 0x58
   1a3e4:	d10c      	bne.n	1a400 <_strtol_l.isra.0+0x128>
   1a3e6:	786c      	ldrb	r4, [r5, #1]
   1a3e8:	2710      	movs	r7, #16
   1a3ea:	3502      	adds	r5, #2
   1a3ec:	2610      	movs	r6, #16
   1a3ee:	e79d      	b.n	1a32c <_strtol_l.isra.0+0x54>
   1a3f0:	2220      	movs	r2, #32
   1a3f2:	782b      	ldrb	r3, [r5, #0]
   1a3f4:	4393      	bics	r3, r2
   1a3f6:	2b58      	cmp	r3, #88	; 0x58
   1a3f8:	d0f5      	beq.n	1a3e6 <_strtol_l.isra.0+0x10e>
   1a3fa:	2708      	movs	r7, #8
   1a3fc:	2608      	movs	r6, #8
   1a3fe:	e795      	b.n	1a32c <_strtol_l.isra.0+0x54>
   1a400:	2710      	movs	r7, #16
   1a402:	e793      	b.n	1a32c <_strtol_l.isra.0+0x54>
   1a404:	7fffffff 	.word	0x7fffffff

0001a408 <strtol>:
   1a408:	0013      	movs	r3, r2
   1a40a:	4a08      	ldr	r2, [pc, #32]	; (1a42c <strtol+0x24>)
   1a40c:	b530      	push	{r4, r5, lr}
   1a40e:	0005      	movs	r5, r0
   1a410:	6810      	ldr	r0, [r2, #0]
   1a412:	b083      	sub	sp, #12
   1a414:	6b44      	ldr	r4, [r0, #52]	; 0x34
   1a416:	2c00      	cmp	r4, #0
   1a418:	d006      	beq.n	1a428 <strtol+0x20>
   1a41a:	000a      	movs	r2, r1
   1a41c:	9400      	str	r4, [sp, #0]
   1a41e:	0029      	movs	r1, r5
   1a420:	f7ff ff5a 	bl	1a2d8 <_strtol_l.isra.0>
   1a424:	b003      	add	sp, #12
   1a426:	bd30      	pop	{r4, r5, pc}
   1a428:	4c01      	ldr	r4, [pc, #4]	; (1a430 <strtol+0x28>)
   1a42a:	e7f6      	b.n	1a41a <strtol+0x12>
   1a42c:	20000018 	.word	0x20000018
   1a430:	20000448 	.word	0x20000448

0001a434 <_strtoul_l.isra.0>:
   1a434:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a436:	4657      	mov	r7, sl
   1a438:	464e      	mov	r6, r9
   1a43a:	46de      	mov	lr, fp
   1a43c:	4645      	mov	r5, r8
   1a43e:	b5e0      	push	{r5, r6, r7, lr}
   1a440:	001e      	movs	r6, r3
   1a442:	2308      	movs	r3, #8
   1a444:	b083      	sub	sp, #12
   1a446:	4683      	mov	fp, r0
   1a448:	4689      	mov	r9, r1
   1a44a:	4692      	mov	sl, r2
   1a44c:	000f      	movs	r7, r1
   1a44e:	4698      	mov	r8, r3
   1a450:	e000      	b.n	1a454 <_strtoul_l.isra.0+0x20>
   1a452:	002f      	movs	r7, r5
   1a454:	980c      	ldr	r0, [sp, #48]	; 0x30
   1a456:	783c      	ldrb	r4, [r7, #0]
   1a458:	f7ff f94a 	bl	196f0 <__locale_ctype_ptr_l>
   1a45c:	4642      	mov	r2, r8
   1a45e:	1900      	adds	r0, r0, r4
   1a460:	7843      	ldrb	r3, [r0, #1]
   1a462:	1c7d      	adds	r5, r7, #1
   1a464:	421a      	tst	r2, r3
   1a466:	d1f4      	bne.n	1a452 <_strtoul_l.isra.0+0x1e>
   1a468:	2c2d      	cmp	r4, #45	; 0x2d
   1a46a:	d05b      	beq.n	1a524 <_strtoul_l.isra.0+0xf0>
   1a46c:	2300      	movs	r3, #0
   1a46e:	9301      	str	r3, [sp, #4]
   1a470:	2c2b      	cmp	r4, #43	; 0x2b
   1a472:	d05c      	beq.n	1a52e <_strtoul_l.isra.0+0xfa>
   1a474:	2e00      	cmp	r6, #0
   1a476:	d00e      	beq.n	1a496 <_strtoul_l.isra.0+0x62>
   1a478:	2e10      	cmp	r6, #16
   1a47a:	d05b      	beq.n	1a534 <_strtoul_l.isra.0+0x100>
   1a47c:	2001      	movs	r0, #1
   1a47e:	0031      	movs	r1, r6
   1a480:	4240      	negs	r0, r0
   1a482:	f7fc f899 	bl	165b8 <__udivsi3>
   1a486:	0007      	movs	r7, r0
   1a488:	2001      	movs	r0, #1
   1a48a:	0031      	movs	r1, r6
   1a48c:	4240      	negs	r0, r0
   1a48e:	46b0      	mov	r8, r6
   1a490:	f7fc f918 	bl	166c4 <__aeabi_uidivmod>
   1a494:	e006      	b.n	1a4a4 <_strtoul_l.isra.0+0x70>
   1a496:	2c30      	cmp	r4, #48	; 0x30
   1a498:	d05b      	beq.n	1a552 <_strtoul_l.isra.0+0x11e>
   1a49a:	230a      	movs	r3, #10
   1a49c:	2105      	movs	r1, #5
   1a49e:	4698      	mov	r8, r3
   1a4a0:	260a      	movs	r6, #10
   1a4a2:	4f34      	ldr	r7, [pc, #208]	; (1a574 <_strtoul_l.isra.0+0x140>)
   1a4a4:	2200      	movs	r2, #0
   1a4a6:	2000      	movs	r0, #0
   1a4a8:	0023      	movs	r3, r4
   1a4aa:	3b30      	subs	r3, #48	; 0x30
   1a4ac:	2b09      	cmp	r3, #9
   1a4ae:	d907      	bls.n	1a4c0 <_strtoul_l.isra.0+0x8c>
   1a4b0:	3b11      	subs	r3, #17
   1a4b2:	2b19      	cmp	r3, #25
   1a4b4:	d903      	bls.n	1a4be <_strtoul_l.isra.0+0x8a>
   1a4b6:	0023      	movs	r3, r4
   1a4b8:	3b61      	subs	r3, #97	; 0x61
   1a4ba:	2b19      	cmp	r3, #25
   1a4bc:	d80e      	bhi.n	1a4dc <_strtoul_l.isra.0+0xa8>
   1a4be:	330a      	adds	r3, #10
   1a4c0:	429e      	cmp	r6, r3
   1a4c2:	dd0b      	ble.n	1a4dc <_strtoul_l.isra.0+0xa8>
   1a4c4:	2a00      	cmp	r2, #0
   1a4c6:	db20      	blt.n	1a50a <_strtoul_l.isra.0+0xd6>
   1a4c8:	42b8      	cmp	r0, r7
   1a4ca:	d81e      	bhi.n	1a50a <_strtoul_l.isra.0+0xd6>
   1a4cc:	d01b      	beq.n	1a506 <_strtoul_l.isra.0+0xd2>
   1a4ce:	4642      	mov	r2, r8
   1a4d0:	4350      	muls	r0, r2
   1a4d2:	2201      	movs	r2, #1
   1a4d4:	1818      	adds	r0, r3, r0
   1a4d6:	782c      	ldrb	r4, [r5, #0]
   1a4d8:	3501      	adds	r5, #1
   1a4da:	e7e5      	b.n	1a4a8 <_strtoul_l.isra.0+0x74>
   1a4dc:	2a00      	cmp	r2, #0
   1a4de:	db17      	blt.n	1a510 <_strtoul_l.isra.0+0xdc>
   1a4e0:	9b01      	ldr	r3, [sp, #4]
   1a4e2:	2b00      	cmp	r3, #0
   1a4e4:	d000      	beq.n	1a4e8 <_strtoul_l.isra.0+0xb4>
   1a4e6:	4240      	negs	r0, r0
   1a4e8:	4653      	mov	r3, sl
   1a4ea:	2b00      	cmp	r3, #0
   1a4ec:	d004      	beq.n	1a4f8 <_strtoul_l.isra.0+0xc4>
   1a4ee:	464b      	mov	r3, r9
   1a4f0:	2a00      	cmp	r2, #0
   1a4f2:	d115      	bne.n	1a520 <_strtoul_l.isra.0+0xec>
   1a4f4:	4652      	mov	r2, sl
   1a4f6:	6013      	str	r3, [r2, #0]
   1a4f8:	b003      	add	sp, #12
   1a4fa:	bc3c      	pop	{r2, r3, r4, r5}
   1a4fc:	4690      	mov	r8, r2
   1a4fe:	4699      	mov	r9, r3
   1a500:	46a2      	mov	sl, r4
   1a502:	46ab      	mov	fp, r5
   1a504:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a506:	428b      	cmp	r3, r1
   1a508:	dde1      	ble.n	1a4ce <_strtoul_l.isra.0+0x9a>
   1a50a:	2201      	movs	r2, #1
   1a50c:	4252      	negs	r2, r2
   1a50e:	e7e2      	b.n	1a4d6 <_strtoul_l.isra.0+0xa2>
   1a510:	2322      	movs	r3, #34	; 0x22
   1a512:	465a      	mov	r2, fp
   1a514:	2001      	movs	r0, #1
   1a516:	6013      	str	r3, [r2, #0]
   1a518:	4653      	mov	r3, sl
   1a51a:	4240      	negs	r0, r0
   1a51c:	2b00      	cmp	r3, #0
   1a51e:	d0eb      	beq.n	1a4f8 <_strtoul_l.isra.0+0xc4>
   1a520:	1e6b      	subs	r3, r5, #1
   1a522:	e7e7      	b.n	1a4f4 <_strtoul_l.isra.0+0xc0>
   1a524:	2301      	movs	r3, #1
   1a526:	782c      	ldrb	r4, [r5, #0]
   1a528:	9301      	str	r3, [sp, #4]
   1a52a:	1cbd      	adds	r5, r7, #2
   1a52c:	e7a2      	b.n	1a474 <_strtoul_l.isra.0+0x40>
   1a52e:	782c      	ldrb	r4, [r5, #0]
   1a530:	1cbd      	adds	r5, r7, #2
   1a532:	e79f      	b.n	1a474 <_strtoul_l.isra.0+0x40>
   1a534:	2c30      	cmp	r4, #48	; 0x30
   1a536:	d117      	bne.n	1a568 <_strtoul_l.isra.0+0x134>
   1a538:	2220      	movs	r2, #32
   1a53a:	782b      	ldrb	r3, [r5, #0]
   1a53c:	4393      	bics	r3, r2
   1a53e:	2b58      	cmp	r3, #88	; 0x58
   1a540:	d112      	bne.n	1a568 <_strtoul_l.isra.0+0x134>
   1a542:	2310      	movs	r3, #16
   1a544:	786c      	ldrb	r4, [r5, #1]
   1a546:	210f      	movs	r1, #15
   1a548:	3502      	adds	r5, #2
   1a54a:	4f0b      	ldr	r7, [pc, #44]	; (1a578 <_strtoul_l.isra.0+0x144>)
   1a54c:	4698      	mov	r8, r3
   1a54e:	2610      	movs	r6, #16
   1a550:	e7a8      	b.n	1a4a4 <_strtoul_l.isra.0+0x70>
   1a552:	2220      	movs	r2, #32
   1a554:	782b      	ldrb	r3, [r5, #0]
   1a556:	4393      	bics	r3, r2
   1a558:	2b58      	cmp	r3, #88	; 0x58
   1a55a:	d0f2      	beq.n	1a542 <_strtoul_l.isra.0+0x10e>
   1a55c:	2308      	movs	r3, #8
   1a55e:	2107      	movs	r1, #7
   1a560:	4f06      	ldr	r7, [pc, #24]	; (1a57c <_strtoul_l.isra.0+0x148>)
   1a562:	4698      	mov	r8, r3
   1a564:	2608      	movs	r6, #8
   1a566:	e79d      	b.n	1a4a4 <_strtoul_l.isra.0+0x70>
   1a568:	2310      	movs	r3, #16
   1a56a:	210f      	movs	r1, #15
   1a56c:	4f02      	ldr	r7, [pc, #8]	; (1a578 <_strtoul_l.isra.0+0x144>)
   1a56e:	4698      	mov	r8, r3
   1a570:	e798      	b.n	1a4a4 <_strtoul_l.isra.0+0x70>
   1a572:	46c0      	nop			; (mov r8, r8)
   1a574:	19999999 	.word	0x19999999
   1a578:	0fffffff 	.word	0x0fffffff
   1a57c:	1fffffff 	.word	0x1fffffff

0001a580 <strtoul>:
   1a580:	0013      	movs	r3, r2
   1a582:	4a08      	ldr	r2, [pc, #32]	; (1a5a4 <strtoul+0x24>)
   1a584:	b530      	push	{r4, r5, lr}
   1a586:	0005      	movs	r5, r0
   1a588:	6810      	ldr	r0, [r2, #0]
   1a58a:	b083      	sub	sp, #12
   1a58c:	6b44      	ldr	r4, [r0, #52]	; 0x34
   1a58e:	2c00      	cmp	r4, #0
   1a590:	d006      	beq.n	1a5a0 <strtoul+0x20>
   1a592:	000a      	movs	r2, r1
   1a594:	9400      	str	r4, [sp, #0]
   1a596:	0029      	movs	r1, r5
   1a598:	f7ff ff4c 	bl	1a434 <_strtoul_l.isra.0>
   1a59c:	b003      	add	sp, #12
   1a59e:	bd30      	pop	{r4, r5, pc}
   1a5a0:	4c01      	ldr	r4, [pc, #4]	; (1a5a8 <strtoul+0x28>)
   1a5a2:	e7f6      	b.n	1a592 <strtoul+0x12>
   1a5a4:	20000018 	.word	0x20000018
   1a5a8:	20000448 	.word	0x20000448

0001a5ac <__utoa>:
   1a5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a5ae:	4646      	mov	r6, r8
   1a5b0:	46d6      	mov	lr, sl
   1a5b2:	464f      	mov	r7, r9
   1a5b4:	b5c0      	push	{r6, r7, lr}
   1a5b6:	b08a      	sub	sp, #40	; 0x28
   1a5b8:	4690      	mov	r8, r2
   1a5ba:	466a      	mov	r2, sp
   1a5bc:	4b1d      	ldr	r3, [pc, #116]	; (1a634 <__utoa+0x88>)
   1a5be:	000d      	movs	r5, r1
   1a5c0:	0006      	movs	r6, r0
   1a5c2:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a5c4:	c213      	stmia	r2!, {r0, r1, r4}
   1a5c6:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a5c8:	c213      	stmia	r2!, {r0, r1, r4}
   1a5ca:	cb13      	ldmia	r3!, {r0, r1, r4}
   1a5cc:	c213      	stmia	r2!, {r0, r1, r4}
   1a5ce:	781b      	ldrb	r3, [r3, #0]
   1a5d0:	46ea      	mov	sl, sp
   1a5d2:	7013      	strb	r3, [r2, #0]
   1a5d4:	4643      	mov	r3, r8
   1a5d6:	3b02      	subs	r3, #2
   1a5d8:	002f      	movs	r7, r5
   1a5da:	2400      	movs	r4, #0
   1a5dc:	2b22      	cmp	r3, #34	; 0x22
   1a5de:	d901      	bls.n	1a5e4 <__utoa+0x38>
   1a5e0:	e024      	b.n	1a62c <__utoa+0x80>
   1a5e2:	464c      	mov	r4, r9
   1a5e4:	1c63      	adds	r3, r4, #1
   1a5e6:	0030      	movs	r0, r6
   1a5e8:	4641      	mov	r1, r8
   1a5ea:	4699      	mov	r9, r3
   1a5ec:	f7fc f86a 	bl	166c4 <__aeabi_uidivmod>
   1a5f0:	4653      	mov	r3, sl
   1a5f2:	5c5b      	ldrb	r3, [r3, r1]
   1a5f4:	0030      	movs	r0, r6
   1a5f6:	703b      	strb	r3, [r7, #0]
   1a5f8:	4641      	mov	r1, r8
   1a5fa:	f7fb ffdd 	bl	165b8 <__udivsi3>
   1a5fe:	3701      	adds	r7, #1
   1a600:	1e06      	subs	r6, r0, #0
   1a602:	d1ee      	bne.n	1a5e2 <__utoa+0x36>
   1a604:	464b      	mov	r3, r9
   1a606:	54e8      	strb	r0, [r5, r3]
   1a608:	2300      	movs	r3, #0
   1a60a:	2c00      	cmp	r4, #0
   1a60c:	d007      	beq.n	1a61e <__utoa+0x72>
   1a60e:	5cea      	ldrb	r2, [r5, r3]
   1a610:	5d29      	ldrb	r1, [r5, r4]
   1a612:	54e9      	strb	r1, [r5, r3]
   1a614:	552a      	strb	r2, [r5, r4]
   1a616:	3301      	adds	r3, #1
   1a618:	3c01      	subs	r4, #1
   1a61a:	42a3      	cmp	r3, r4
   1a61c:	dbf7      	blt.n	1a60e <__utoa+0x62>
   1a61e:	0028      	movs	r0, r5
   1a620:	b00a      	add	sp, #40	; 0x28
   1a622:	bc1c      	pop	{r2, r3, r4}
   1a624:	4690      	mov	r8, r2
   1a626:	4699      	mov	r9, r3
   1a628:	46a2      	mov	sl, r4
   1a62a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a62c:	702c      	strb	r4, [r5, #0]
   1a62e:	2000      	movs	r0, #0
   1a630:	e7f6      	b.n	1a620 <__utoa+0x74>
   1a632:	46c0      	nop			; (mov r8, r8)
   1a634:	00020504 	.word	0x00020504

0001a638 <utoa>:
   1a638:	b510      	push	{r4, lr}
   1a63a:	f7ff ffb7 	bl	1a5ac <__utoa>
   1a63e:	bd10      	pop	{r4, pc}

0001a640 <_vfprintf_r>:
   1a640:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a642:	46de      	mov	lr, fp
   1a644:	464e      	mov	r6, r9
   1a646:	4645      	mov	r5, r8
   1a648:	4657      	mov	r7, sl
   1a64a:	b5e0      	push	{r5, r6, r7, lr}
   1a64c:	b0c3      	sub	sp, #268	; 0x10c
   1a64e:	4689      	mov	r9, r1
   1a650:	0014      	movs	r4, r2
   1a652:	001d      	movs	r5, r3
   1a654:	930f      	str	r3, [sp, #60]	; 0x3c
   1a656:	0006      	movs	r6, r0
   1a658:	9006      	str	r0, [sp, #24]
   1a65a:	f003 f8cd 	bl	1d7f8 <_localeconv_r>
   1a65e:	6803      	ldr	r3, [r0, #0]
   1a660:	0018      	movs	r0, r3
   1a662:	9318      	str	r3, [sp, #96]	; 0x60
   1a664:	f7ff fe06 	bl	1a274 <strlen>
   1a668:	9017      	str	r0, [sp, #92]	; 0x5c
   1a66a:	2e00      	cmp	r6, #0
   1a66c:	d004      	beq.n	1a678 <_vfprintf_r+0x38>
   1a66e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   1a670:	9307      	str	r3, [sp, #28]
   1a672:	2b00      	cmp	r3, #0
   1a674:	d100      	bne.n	1a678 <_vfprintf_r+0x38>
   1a676:	e0a7      	b.n	1a7c8 <_vfprintf_r+0x188>
   1a678:	464b      	mov	r3, r9
   1a67a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a67c:	07db      	lsls	r3, r3, #31
   1a67e:	d478      	bmi.n	1a772 <_vfprintf_r+0x132>
   1a680:	464b      	mov	r3, r9
   1a682:	210c      	movs	r1, #12
   1a684:	5e59      	ldrsh	r1, [r3, r1]
   1a686:	b28b      	uxth	r3, r1
   1a688:	059a      	lsls	r2, r3, #22
   1a68a:	d56e      	bpl.n	1a76a <_vfprintf_r+0x12a>
   1a68c:	2280      	movs	r2, #128	; 0x80
   1a68e:	0192      	lsls	r2, r2, #6
   1a690:	4213      	tst	r3, r2
   1a692:	d109      	bne.n	1a6a8 <_vfprintf_r+0x68>
   1a694:	430a      	orrs	r2, r1
   1a696:	464b      	mov	r3, r9
   1a698:	4649      	mov	r1, r9
   1a69a:	819a      	strh	r2, [r3, #12]
   1a69c:	6e49      	ldr	r1, [r1, #100]	; 0x64
   1a69e:	4bcc      	ldr	r3, [pc, #816]	; (1a9d0 <_vfprintf_r+0x390>)
   1a6a0:	400b      	ands	r3, r1
   1a6a2:	4649      	mov	r1, r9
   1a6a4:	664b      	str	r3, [r1, #100]	; 0x64
   1a6a6:	b293      	uxth	r3, r2
   1a6a8:	071a      	lsls	r2, r3, #28
   1a6aa:	d567      	bpl.n	1a77c <_vfprintf_r+0x13c>
   1a6ac:	464a      	mov	r2, r9
   1a6ae:	6912      	ldr	r2, [r2, #16]
   1a6b0:	2a00      	cmp	r2, #0
   1a6b2:	d063      	beq.n	1a77c <_vfprintf_r+0x13c>
   1a6b4:	221a      	movs	r2, #26
   1a6b6:	401a      	ands	r2, r3
   1a6b8:	2a0a      	cmp	r2, #10
   1a6ba:	d100      	bne.n	1a6be <_vfprintf_r+0x7e>
   1a6bc:	e088      	b.n	1a7d0 <_vfprintf_r+0x190>
   1a6be:	ab32      	add	r3, sp, #200	; 0xc8
   1a6c0:	9325      	str	r3, [sp, #148]	; 0x94
   1a6c2:	2300      	movs	r3, #0
   1a6c4:	46cb      	mov	fp, r9
   1a6c6:	af25      	add	r7, sp, #148	; 0x94
   1a6c8:	60bb      	str	r3, [r7, #8]
   1a6ca:	607b      	str	r3, [r7, #4]
   1a6cc:	9407      	str	r4, [sp, #28]
   1a6ce:	9314      	str	r3, [sp, #80]	; 0x50
   1a6d0:	9316      	str	r3, [sp, #88]	; 0x58
   1a6d2:	9315      	str	r3, [sp, #84]	; 0x54
   1a6d4:	ae32      	add	r6, sp, #200	; 0xc8
   1a6d6:	9319      	str	r3, [sp, #100]	; 0x64
   1a6d8:	931a      	str	r3, [sp, #104]	; 0x68
   1a6da:	930a      	str	r3, [sp, #40]	; 0x28
   1a6dc:	9c07      	ldr	r4, [sp, #28]
   1a6de:	7823      	ldrb	r3, [r4, #0]
   1a6e0:	2b00      	cmp	r3, #0
   1a6e2:	d101      	bne.n	1a6e8 <_vfprintf_r+0xa8>
   1a6e4:	f000 fd9e 	bl	1b224 <_vfprintf_r+0xbe4>
   1a6e8:	2b25      	cmp	r3, #37	; 0x25
   1a6ea:	d103      	bne.n	1a6f4 <_vfprintf_r+0xb4>
   1a6ec:	f000 fd9a 	bl	1b224 <_vfprintf_r+0xbe4>
   1a6f0:	2b25      	cmp	r3, #37	; 0x25
   1a6f2:	d003      	beq.n	1a6fc <_vfprintf_r+0xbc>
   1a6f4:	3401      	adds	r4, #1
   1a6f6:	7823      	ldrb	r3, [r4, #0]
   1a6f8:	2b00      	cmp	r3, #0
   1a6fa:	d1f9      	bne.n	1a6f0 <_vfprintf_r+0xb0>
   1a6fc:	9b07      	ldr	r3, [sp, #28]
   1a6fe:	1ae5      	subs	r5, r4, r3
   1a700:	d010      	beq.n	1a724 <_vfprintf_r+0xe4>
   1a702:	9b07      	ldr	r3, [sp, #28]
   1a704:	6075      	str	r5, [r6, #4]
   1a706:	6033      	str	r3, [r6, #0]
   1a708:	68bb      	ldr	r3, [r7, #8]
   1a70a:	195b      	adds	r3, r3, r5
   1a70c:	60bb      	str	r3, [r7, #8]
   1a70e:	687b      	ldr	r3, [r7, #4]
   1a710:	3301      	adds	r3, #1
   1a712:	607b      	str	r3, [r7, #4]
   1a714:	2b07      	cmp	r3, #7
   1a716:	dc4c      	bgt.n	1a7b2 <_vfprintf_r+0x172>
   1a718:	3608      	adds	r6, #8
   1a71a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a71c:	469c      	mov	ip, r3
   1a71e:	44ac      	add	ip, r5
   1a720:	4663      	mov	r3, ip
   1a722:	930a      	str	r3, [sp, #40]	; 0x28
   1a724:	7823      	ldrb	r3, [r4, #0]
   1a726:	2b00      	cmp	r3, #0
   1a728:	d101      	bne.n	1a72e <_vfprintf_r+0xee>
   1a72a:	f000 fc99 	bl	1b060 <_vfprintf_r+0xa20>
   1a72e:	1c63      	adds	r3, r4, #1
   1a730:	9307      	str	r3, [sp, #28]
   1a732:	2300      	movs	r3, #0
   1a734:	aa16      	add	r2, sp, #88	; 0x58
   1a736:	77d3      	strb	r3, [r2, #31]
   1a738:	2201      	movs	r2, #1
   1a73a:	4252      	negs	r2, r2
   1a73c:	4692      	mov	sl, r2
   1a73e:	2200      	movs	r2, #0
   1a740:	920b      	str	r2, [sp, #44]	; 0x2c
   1a742:	3220      	adds	r2, #32
   1a744:	4691      	mov	r9, r2
   1a746:	3220      	adds	r2, #32
   1a748:	7863      	ldrb	r3, [r4, #1]
   1a74a:	2100      	movs	r1, #0
   1a74c:	2000      	movs	r0, #0
   1a74e:	2400      	movs	r4, #0
   1a750:	4694      	mov	ip, r2
   1a752:	9a07      	ldr	r2, [sp, #28]
   1a754:	3201      	adds	r2, #1
   1a756:	9207      	str	r2, [sp, #28]
   1a758:	001a      	movs	r2, r3
   1a75a:	3a20      	subs	r2, #32
   1a75c:	2a58      	cmp	r2, #88	; 0x58
   1a75e:	d900      	bls.n	1a762 <_vfprintf_r+0x122>
   1a760:	e2e7      	b.n	1ad32 <_vfprintf_r+0x6f2>
   1a762:	4d9c      	ldr	r5, [pc, #624]	; (1a9d4 <_vfprintf_r+0x394>)
   1a764:	0092      	lsls	r2, r2, #2
   1a766:	58aa      	ldr	r2, [r5, r2]
   1a768:	4697      	mov	pc, r2
   1a76a:	464b      	mov	r3, r9
   1a76c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a76e:	f003 f855 	bl	1d81c <__retarget_lock_acquire_recursive>
   1a772:	464b      	mov	r3, r9
   1a774:	210c      	movs	r1, #12
   1a776:	5e59      	ldrsh	r1, [r3, r1]
   1a778:	b28b      	uxth	r3, r1
   1a77a:	e787      	b.n	1a68c <_vfprintf_r+0x4c>
   1a77c:	4649      	mov	r1, r9
   1a77e:	9806      	ldr	r0, [sp, #24]
   1a780:	f001 fb1c 	bl	1bdbc <__swsetup_r>
   1a784:	464b      	mov	r3, r9
   1a786:	2800      	cmp	r0, #0
   1a788:	d03a      	beq.n	1a800 <_vfprintf_r+0x1c0>
   1a78a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1a78c:	07db      	lsls	r3, r3, #31
   1a78e:	d405      	bmi.n	1a79c <_vfprintf_r+0x15c>
   1a790:	464b      	mov	r3, r9
   1a792:	899b      	ldrh	r3, [r3, #12]
   1a794:	059b      	lsls	r3, r3, #22
   1a796:	d401      	bmi.n	1a79c <_vfprintf_r+0x15c>
   1a798:	f000 ffcf 	bl	1b73a <_vfprintf_r+0x10fa>
   1a79c:	2301      	movs	r3, #1
   1a79e:	425b      	negs	r3, r3
   1a7a0:	930a      	str	r3, [sp, #40]	; 0x28
   1a7a2:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a7a4:	b043      	add	sp, #268	; 0x10c
   1a7a6:	bc3c      	pop	{r2, r3, r4, r5}
   1a7a8:	4690      	mov	r8, r2
   1a7aa:	4699      	mov	r9, r3
   1a7ac:	46a2      	mov	sl, r4
   1a7ae:	46ab      	mov	fp, r5
   1a7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a7b2:	003a      	movs	r2, r7
   1a7b4:	4659      	mov	r1, fp
   1a7b6:	9806      	ldr	r0, [sp, #24]
   1a7b8:	f003 fe82 	bl	1e4c0 <__sprint_r>
   1a7bc:	2800      	cmp	r0, #0
   1a7be:	d001      	beq.n	1a7c4 <_vfprintf_r+0x184>
   1a7c0:	f000 fcce 	bl	1b160 <_vfprintf_r+0xb20>
   1a7c4:	ae32      	add	r6, sp, #200	; 0xc8
   1a7c6:	e7a8      	b.n	1a71a <_vfprintf_r+0xda>
   1a7c8:	9806      	ldr	r0, [sp, #24]
   1a7ca:	f002 fce5 	bl	1d198 <__sinit>
   1a7ce:	e753      	b.n	1a678 <_vfprintf_r+0x38>
   1a7d0:	464a      	mov	r2, r9
   1a7d2:	210e      	movs	r1, #14
   1a7d4:	5e52      	ldrsh	r2, [r2, r1]
   1a7d6:	2a00      	cmp	r2, #0
   1a7d8:	da00      	bge.n	1a7dc <_vfprintf_r+0x19c>
   1a7da:	e770      	b.n	1a6be <_vfprintf_r+0x7e>
   1a7dc:	464a      	mov	r2, r9
   1a7de:	6e52      	ldr	r2, [r2, #100]	; 0x64
   1a7e0:	07d2      	lsls	r2, r2, #31
   1a7e2:	d405      	bmi.n	1a7f0 <_vfprintf_r+0x1b0>
   1a7e4:	059b      	lsls	r3, r3, #22
   1a7e6:	d403      	bmi.n	1a7f0 <_vfprintf_r+0x1b0>
   1a7e8:	464b      	mov	r3, r9
   1a7ea:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1a7ec:	f003 f818 	bl	1d820 <__retarget_lock_release_recursive>
   1a7f0:	002b      	movs	r3, r5
   1a7f2:	0022      	movs	r2, r4
   1a7f4:	4649      	mov	r1, r9
   1a7f6:	9806      	ldr	r0, [sp, #24]
   1a7f8:	f001 fa8e 	bl	1bd18 <__sbprintf>
   1a7fc:	900a      	str	r0, [sp, #40]	; 0x28
   1a7fe:	e7d0      	b.n	1a7a2 <_vfprintf_r+0x162>
   1a800:	899b      	ldrh	r3, [r3, #12]
   1a802:	e757      	b.n	1a6b4 <_vfprintf_r+0x74>
   1a804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a806:	920f      	str	r2, [sp, #60]	; 0x3c
   1a808:	425b      	negs	r3, r3
   1a80a:	930b      	str	r3, [sp, #44]	; 0x2c
   1a80c:	2304      	movs	r3, #4
   1a80e:	431c      	orrs	r4, r3
   1a810:	9b07      	ldr	r3, [sp, #28]
   1a812:	781b      	ldrb	r3, [r3, #0]
   1a814:	e79d      	b.n	1a752 <_vfprintf_r+0x112>
   1a816:	9b07      	ldr	r3, [sp, #28]
   1a818:	2101      	movs	r1, #1
   1a81a:	781b      	ldrb	r3, [r3, #0]
   1a81c:	202b      	movs	r0, #43	; 0x2b
   1a81e:	e798      	b.n	1a752 <_vfprintf_r+0x112>
   1a820:	9b07      	ldr	r3, [sp, #28]
   1a822:	1c5a      	adds	r2, r3, #1
   1a824:	781b      	ldrb	r3, [r3, #0]
   1a826:	4690      	mov	r8, r2
   1a828:	2b2a      	cmp	r3, #42	; 0x2a
   1a82a:	d101      	bne.n	1a830 <_vfprintf_r+0x1f0>
   1a82c:	f001 fa38 	bl	1bca0 <_vfprintf_r+0x1660>
   1a830:	001a      	movs	r2, r3
   1a832:	2500      	movs	r5, #0
   1a834:	3a30      	subs	r2, #48	; 0x30
   1a836:	46aa      	mov	sl, r5
   1a838:	2a09      	cmp	r2, #9
   1a83a:	d901      	bls.n	1a840 <_vfprintf_r+0x200>
   1a83c:	f001 f96d 	bl	1bb1a <_vfprintf_r+0x14da>
   1a840:	0025      	movs	r5, r4
   1a842:	4643      	mov	r3, r8
   1a844:	4654      	mov	r4, sl
   1a846:	4688      	mov	r8, r1
   1a848:	4682      	mov	sl, r0
   1a84a:	00a1      	lsls	r1, r4, #2
   1a84c:	190c      	adds	r4, r1, r4
   1a84e:	7818      	ldrb	r0, [r3, #0]
   1a850:	0064      	lsls	r4, r4, #1
   1a852:	18a4      	adds	r4, r4, r2
   1a854:	0002      	movs	r2, r0
   1a856:	1c59      	adds	r1, r3, #1
   1a858:	3a30      	subs	r2, #48	; 0x30
   1a85a:	000b      	movs	r3, r1
   1a85c:	2a09      	cmp	r2, #9
   1a85e:	d9f4      	bls.n	1a84a <_vfprintf_r+0x20a>
   1a860:	9107      	str	r1, [sp, #28]
   1a862:	0003      	movs	r3, r0
   1a864:	4641      	mov	r1, r8
   1a866:	4650      	mov	r0, sl
   1a868:	46a2      	mov	sl, r4
   1a86a:	002c      	movs	r4, r5
   1a86c:	e774      	b.n	1a758 <_vfprintf_r+0x118>
   1a86e:	9312      	str	r3, [sp, #72]	; 0x48
   1a870:	2900      	cmp	r1, #0
   1a872:	d001      	beq.n	1a878 <_vfprintf_r+0x238>
   1a874:	f001 fa2e 	bl	1bcd4 <_vfprintf_r+0x1694>
   1a878:	4b57      	ldr	r3, [pc, #348]	; (1a9d8 <_vfprintf_r+0x398>)
   1a87a:	9319      	str	r3, [sp, #100]	; 0x64
   1a87c:	06a3      	lsls	r3, r4, #26
   1a87e:	d501      	bpl.n	1a884 <_vfprintf_r+0x244>
   1a880:	f000 fe9a 	bl	1b5b8 <_vfprintf_r+0xf78>
   1a884:	06e3      	lsls	r3, r4, #27
   1a886:	d501      	bpl.n	1a88c <_vfprintf_r+0x24c>
   1a888:	f000 fd9a 	bl	1b3c0 <_vfprintf_r+0xd80>
   1a88c:	0663      	lsls	r3, r4, #25
   1a88e:	d401      	bmi.n	1a894 <_vfprintf_r+0x254>
   1a890:	f000 fd96 	bl	1b3c0 <_vfprintf_r+0xd80>
   1a894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a896:	881a      	ldrh	r2, [r3, #0]
   1a898:	920c      	str	r2, [sp, #48]	; 0x30
   1a89a:	2200      	movs	r2, #0
   1a89c:	3304      	adds	r3, #4
   1a89e:	920d      	str	r2, [sp, #52]	; 0x34
   1a8a0:	930f      	str	r3, [sp, #60]	; 0x3c
   1a8a2:	07e3      	lsls	r3, r4, #31
   1a8a4:	d401      	bmi.n	1a8aa <_vfprintf_r+0x26a>
   1a8a6:	f000 fd76 	bl	1b396 <_vfprintf_r+0xd56>
   1a8aa:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a8ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a8ae:	000b      	movs	r3, r1
   1a8b0:	4313      	orrs	r3, r2
   1a8b2:	001a      	movs	r2, r3
   1a8b4:	2302      	movs	r3, #2
   1a8b6:	2a00      	cmp	r2, #0
   1a8b8:	d008      	beq.n	1a8cc <_vfprintf_r+0x28c>
   1a8ba:	2030      	movs	r0, #48	; 0x30
   1a8bc:	a91e      	add	r1, sp, #120	; 0x78
   1a8be:	7008      	strb	r0, [r1, #0]
   1a8c0:	2548      	movs	r5, #72	; 0x48
   1a8c2:	4668      	mov	r0, sp
   1a8c4:	1940      	adds	r0, r0, r5
   1a8c6:	7800      	ldrb	r0, [r0, #0]
   1a8c8:	431c      	orrs	r4, r3
   1a8ca:	7048      	strb	r0, [r1, #1]
   1a8cc:	2100      	movs	r1, #0
   1a8ce:	4688      	mov	r8, r1
   1a8d0:	a816      	add	r0, sp, #88	; 0x58
   1a8d2:	77c1      	strb	r1, [r0, #31]
   1a8d4:	4651      	mov	r1, sl
   1a8d6:	3101      	adds	r1, #1
   1a8d8:	d100      	bne.n	1a8dc <_vfprintf_r+0x29c>
   1a8da:	e0e6      	b.n	1aaaa <_vfprintf_r+0x46a>
   1a8dc:	2180      	movs	r1, #128	; 0x80
   1a8de:	0020      	movs	r0, r4
   1a8e0:	4388      	bics	r0, r1
   1a8e2:	9009      	str	r0, [sp, #36]	; 0x24
   1a8e4:	2a00      	cmp	r2, #0
   1a8e6:	d000      	beq.n	1a8ea <_vfprintf_r+0x2aa>
   1a8e8:	e0e3      	b.n	1aab2 <_vfprintf_r+0x472>
   1a8ea:	4652      	mov	r2, sl
   1a8ec:	2a00      	cmp	r2, #0
   1a8ee:	d001      	beq.n	1a8f4 <_vfprintf_r+0x2b4>
   1a8f0:	f000 fc38 	bl	1b164 <_vfprintf_r+0xb24>
   1a8f4:	2b00      	cmp	r3, #0
   1a8f6:	d001      	beq.n	1a8fc <_vfprintf_r+0x2bc>
   1a8f8:	f000 fd0c 	bl	1b314 <_vfprintf_r+0xcd4>
   1a8fc:	2001      	movs	r0, #1
   1a8fe:	ab32      	add	r3, sp, #200	; 0xc8
   1a900:	4020      	ands	r0, r4
   1a902:	900e      	str	r0, [sp, #56]	; 0x38
   1a904:	9311      	str	r3, [sp, #68]	; 0x44
   1a906:	d008      	beq.n	1a91a <_vfprintf_r+0x2da>
   1a908:	2327      	movs	r3, #39	; 0x27
   1a90a:	2130      	movs	r1, #48	; 0x30
   1a90c:	aa28      	add	r2, sp, #160	; 0xa0
   1a90e:	54d1      	strb	r1, [r2, r3]
   1a910:	aa16      	add	r2, sp, #88	; 0x58
   1a912:	4694      	mov	ip, r2
   1a914:	3348      	adds	r3, #72	; 0x48
   1a916:	4463      	add	r3, ip
   1a918:	9311      	str	r3, [sp, #68]	; 0x44
   1a91a:	4653      	mov	r3, sl
   1a91c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1a91e:	9308      	str	r3, [sp, #32]
   1a920:	4592      	cmp	sl, r2
   1a922:	da00      	bge.n	1a926 <_vfprintf_r+0x2e6>
   1a924:	9208      	str	r2, [sp, #32]
   1a926:	2300      	movs	r3, #0
   1a928:	9313      	str	r3, [sp, #76]	; 0x4c
   1a92a:	4643      	mov	r3, r8
   1a92c:	2b00      	cmp	r3, #0
   1a92e:	d002      	beq.n	1a936 <_vfprintf_r+0x2f6>
   1a930:	9b08      	ldr	r3, [sp, #32]
   1a932:	3301      	adds	r3, #1
   1a934:	9308      	str	r3, [sp, #32]
   1a936:	2302      	movs	r3, #2
   1a938:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a93a:	401a      	ands	r2, r3
   1a93c:	4691      	mov	r9, r2
   1a93e:	d002      	beq.n	1a946 <_vfprintf_r+0x306>
   1a940:	9b08      	ldr	r3, [sp, #32]
   1a942:	3302      	adds	r3, #2
   1a944:	9308      	str	r3, [sp, #32]
   1a946:	2384      	movs	r3, #132	; 0x84
   1a948:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1a94a:	401a      	ands	r2, r3
   1a94c:	9210      	str	r2, [sp, #64]	; 0x40
   1a94e:	d000      	beq.n	1a952 <_vfprintf_r+0x312>
   1a950:	e207      	b.n	1ad62 <_vfprintf_r+0x722>
   1a952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a954:	9a08      	ldr	r2, [sp, #32]
   1a956:	1a9c      	subs	r4, r3, r2
   1a958:	2c00      	cmp	r4, #0
   1a95a:	dc00      	bgt.n	1a95e <_vfprintf_r+0x31e>
   1a95c:	e201      	b.n	1ad62 <_vfprintf_r+0x722>
   1a95e:	491f      	ldr	r1, [pc, #124]	; (1a9dc <_vfprintf_r+0x39c>)
   1a960:	68ba      	ldr	r2, [r7, #8]
   1a962:	687b      	ldr	r3, [r7, #4]
   1a964:	4688      	mov	r8, r1
   1a966:	2c10      	cmp	r4, #16
   1a968:	dd21      	ble.n	1a9ae <_vfprintf_r+0x36e>
   1a96a:	0031      	movs	r1, r6
   1a96c:	2510      	movs	r5, #16
   1a96e:	465e      	mov	r6, fp
   1a970:	e003      	b.n	1a97a <_vfprintf_r+0x33a>
   1a972:	3c10      	subs	r4, #16
   1a974:	3108      	adds	r1, #8
   1a976:	2c10      	cmp	r4, #16
   1a978:	dd17      	ble.n	1a9aa <_vfprintf_r+0x36a>
   1a97a:	4640      	mov	r0, r8
   1a97c:	3210      	adds	r2, #16
   1a97e:	3301      	adds	r3, #1
   1a980:	6008      	str	r0, [r1, #0]
   1a982:	604d      	str	r5, [r1, #4]
   1a984:	60ba      	str	r2, [r7, #8]
   1a986:	607b      	str	r3, [r7, #4]
   1a988:	2b07      	cmp	r3, #7
   1a98a:	ddf2      	ble.n	1a972 <_vfprintf_r+0x332>
   1a98c:	003a      	movs	r2, r7
   1a98e:	0031      	movs	r1, r6
   1a990:	9806      	ldr	r0, [sp, #24]
   1a992:	f003 fd95 	bl	1e4c0 <__sprint_r>
   1a996:	2800      	cmp	r0, #0
   1a998:	d001      	beq.n	1a99e <_vfprintf_r+0x35e>
   1a99a:	f000 fccf 	bl	1b33c <_vfprintf_r+0xcfc>
   1a99e:	3c10      	subs	r4, #16
   1a9a0:	68ba      	ldr	r2, [r7, #8]
   1a9a2:	687b      	ldr	r3, [r7, #4]
   1a9a4:	a932      	add	r1, sp, #200	; 0xc8
   1a9a6:	2c10      	cmp	r4, #16
   1a9a8:	dce7      	bgt.n	1a97a <_vfprintf_r+0x33a>
   1a9aa:	46b3      	mov	fp, r6
   1a9ac:	000e      	movs	r6, r1
   1a9ae:	4641      	mov	r1, r8
   1a9b0:	6074      	str	r4, [r6, #4]
   1a9b2:	3301      	adds	r3, #1
   1a9b4:	18a4      	adds	r4, r4, r2
   1a9b6:	6031      	str	r1, [r6, #0]
   1a9b8:	60bc      	str	r4, [r7, #8]
   1a9ba:	607b      	str	r3, [r7, #4]
   1a9bc:	2b07      	cmp	r3, #7
   1a9be:	dd01      	ble.n	1a9c4 <_vfprintf_r+0x384>
   1a9c0:	f000 fcae 	bl	1b320 <_vfprintf_r+0xce0>
   1a9c4:	ab16      	add	r3, sp, #88	; 0x58
   1a9c6:	7fdb      	ldrb	r3, [r3, #31]
   1a9c8:	3608      	adds	r6, #8
   1a9ca:	4698      	mov	r8, r3
   1a9cc:	e1ca      	b.n	1ad64 <_vfprintf_r+0x724>
   1a9ce:	46c0      	nop			; (mov r8, r8)
   1a9d0:	ffffdfff 	.word	0xffffdfff
   1a9d4:	0002052c 	.word	0x0002052c
   1a9d8:	000206b4 	.word	0x000206b4
   1a9dc:	000206d0 	.word	0x000206d0
   1a9e0:	2200      	movs	r2, #0
   1a9e2:	9d07      	ldr	r5, [sp, #28]
   1a9e4:	3b30      	subs	r3, #48	; 0x30
   1a9e6:	46a8      	mov	r8, r5
   1a9e8:	920b      	str	r2, [sp, #44]	; 0x2c
   1a9ea:	001a      	movs	r2, r3
   1a9ec:	9408      	str	r4, [sp, #32]
   1a9ee:	002c      	movs	r4, r5
   1a9f0:	4655      	mov	r5, sl
   1a9f2:	4682      	mov	sl, r0
   1a9f4:	4640      	mov	r0, r8
   1a9f6:	4688      	mov	r8, r1
   1a9f8:	0011      	movs	r1, r2
   1a9fa:	2200      	movs	r2, #0
   1a9fc:	0093      	lsls	r3, r2, #2
   1a9fe:	189a      	adds	r2, r3, r2
   1aa00:	7803      	ldrb	r3, [r0, #0]
   1aa02:	0052      	lsls	r2, r2, #1
   1aa04:	188a      	adds	r2, r1, r2
   1aa06:	0019      	movs	r1, r3
   1aa08:	3401      	adds	r4, #1
   1aa0a:	3930      	subs	r1, #48	; 0x30
   1aa0c:	0020      	movs	r0, r4
   1aa0e:	2909      	cmp	r1, #9
   1aa10:	d9f4      	bls.n	1a9fc <_vfprintf_r+0x3bc>
   1aa12:	9407      	str	r4, [sp, #28]
   1aa14:	4650      	mov	r0, sl
   1aa16:	9c08      	ldr	r4, [sp, #32]
   1aa18:	920b      	str	r2, [sp, #44]	; 0x2c
   1aa1a:	4641      	mov	r1, r8
   1aa1c:	46aa      	mov	sl, r5
   1aa1e:	e69b      	b.n	1a758 <_vfprintf_r+0x118>
   1aa20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aa22:	9312      	str	r3, [sp, #72]	; 0x48
   1aa24:	6813      	ldr	r3, [r2, #0]
   1aa26:	2120      	movs	r1, #32
   1aa28:	9308      	str	r3, [sp, #32]
   1aa2a:	466b      	mov	r3, sp
   1aa2c:	185b      	adds	r3, r3, r1
   1aa2e:	781b      	ldrb	r3, [r3, #0]
   1aa30:	ad28      	add	r5, sp, #160	; 0xa0
   1aa32:	702b      	strb	r3, [r5, #0]
   1aa34:	2300      	movs	r3, #0
   1aa36:	a916      	add	r1, sp, #88	; 0x58
   1aa38:	77cb      	strb	r3, [r1, #31]
   1aa3a:	0013      	movs	r3, r2
   1aa3c:	3304      	adds	r3, #4
   1aa3e:	930f      	str	r3, [sp, #60]	; 0x3c
   1aa40:	2300      	movs	r3, #0
   1aa42:	9409      	str	r4, [sp, #36]	; 0x24
   1aa44:	4698      	mov	r8, r3
   1aa46:	3301      	adds	r3, #1
   1aa48:	9308      	str	r3, [sp, #32]
   1aa4a:	930e      	str	r3, [sp, #56]	; 0x38
   1aa4c:	2300      	movs	r3, #0
   1aa4e:	9511      	str	r5, [sp, #68]	; 0x44
   1aa50:	469a      	mov	sl, r3
   1aa52:	9313      	str	r3, [sp, #76]	; 0x4c
   1aa54:	e76f      	b.n	1a936 <_vfprintf_r+0x2f6>
   1aa56:	9312      	str	r3, [sp, #72]	; 0x48
   1aa58:	2900      	cmp	r1, #0
   1aa5a:	d001      	beq.n	1aa60 <_vfprintf_r+0x420>
   1aa5c:	f001 f94d 	bl	1bcfa <_vfprintf_r+0x16ba>
   1aa60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1aa62:	06a3      	lsls	r3, r4, #26
   1aa64:	d501      	bpl.n	1aa6a <_vfprintf_r+0x42a>
   1aa66:	f000 fd5a 	bl	1b51e <_vfprintf_r+0xede>
   1aa6a:	06e3      	lsls	r3, r4, #27
   1aa6c:	d501      	bpl.n	1aa72 <_vfprintf_r+0x432>
   1aa6e:	f000 fcab 	bl	1b3c8 <_vfprintf_r+0xd88>
   1aa72:	0663      	lsls	r3, r4, #25
   1aa74:	d401      	bmi.n	1aa7a <_vfprintf_r+0x43a>
   1aa76:	f000 fca7 	bl	1b3c8 <_vfprintf_r+0xd88>
   1aa7a:	2100      	movs	r1, #0
   1aa7c:	5e53      	ldrsh	r3, [r2, r1]
   1aa7e:	930c      	str	r3, [sp, #48]	; 0x30
   1aa80:	3204      	adds	r2, #4
   1aa82:	17db      	asrs	r3, r3, #31
   1aa84:	930d      	str	r3, [sp, #52]	; 0x34
   1aa86:	920f      	str	r2, [sp, #60]	; 0x3c
   1aa88:	2b00      	cmp	r3, #0
   1aa8a:	da01      	bge.n	1aa90 <_vfprintf_r+0x450>
   1aa8c:	f000 fdb2 	bl	1b5f4 <_vfprintf_r+0xfb4>
   1aa90:	990c      	ldr	r1, [sp, #48]	; 0x30
   1aa92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1aa94:	0008      	movs	r0, r1
   1aa96:	4651      	mov	r1, sl
   1aa98:	ab16      	add	r3, sp, #88	; 0x58
   1aa9a:	7fdb      	ldrb	r3, [r3, #31]
   1aa9c:	4310      	orrs	r0, r2
   1aa9e:	4698      	mov	r8, r3
   1aaa0:	0002      	movs	r2, r0
   1aaa2:	2301      	movs	r3, #1
   1aaa4:	3101      	adds	r1, #1
   1aaa6:	d000      	beq.n	1aaaa <_vfprintf_r+0x46a>
   1aaa8:	e718      	b.n	1a8dc <_vfprintf_r+0x29c>
   1aaaa:	2a00      	cmp	r2, #0
   1aaac:	d100      	bne.n	1aab0 <_vfprintf_r+0x470>
   1aaae:	e35a      	b.n	1b166 <_vfprintf_r+0xb26>
   1aab0:	9409      	str	r4, [sp, #36]	; 0x24
   1aab2:	2b01      	cmp	r3, #1
   1aab4:	d101      	bne.n	1aaba <_vfprintf_r+0x47a>
   1aab6:	f000 fc06 	bl	1b2c6 <_vfprintf_r+0xc86>
   1aaba:	2b02      	cmp	r3, #2
   1aabc:	d000      	beq.n	1aac0 <_vfprintf_r+0x480>
   1aabe:	e380      	b.n	1b1c2 <_vfprintf_r+0xb82>
   1aac0:	9c19      	ldr	r4, [sp, #100]	; 0x64
   1aac2:	200f      	movs	r0, #15
   1aac4:	46a1      	mov	r9, r4
   1aac6:	46b4      	mov	ip, r6
   1aac8:	ab32      	add	r3, sp, #200	; 0xc8
   1aaca:	0019      	movs	r1, r3
   1aacc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1aace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1aad0:	0004      	movs	r4, r0
   1aad2:	464d      	mov	r5, r9
   1aad4:	4014      	ands	r4, r2
   1aad6:	5d2c      	ldrb	r4, [r5, r4]
   1aad8:	071e      	lsls	r6, r3, #28
   1aada:	0915      	lsrs	r5, r2, #4
   1aadc:	3901      	subs	r1, #1
   1aade:	432e      	orrs	r6, r5
   1aae0:	700c      	strb	r4, [r1, #0]
   1aae2:	091c      	lsrs	r4, r3, #4
   1aae4:	0023      	movs	r3, r4
   1aae6:	0034      	movs	r4, r6
   1aae8:	0032      	movs	r2, r6
   1aaea:	431c      	orrs	r4, r3
   1aaec:	d1f0      	bne.n	1aad0 <_vfprintf_r+0x490>
   1aaee:	920c      	str	r2, [sp, #48]	; 0x30
   1aaf0:	930d      	str	r3, [sp, #52]	; 0x34
   1aaf2:	ab32      	add	r3, sp, #200	; 0xc8
   1aaf4:	1a5b      	subs	r3, r3, r1
   1aaf6:	9111      	str	r1, [sp, #68]	; 0x44
   1aaf8:	4666      	mov	r6, ip
   1aafa:	930e      	str	r3, [sp, #56]	; 0x38
   1aafc:	e70d      	b.n	1a91a <_vfprintf_r+0x2da>
   1aafe:	4663      	mov	r3, ip
   1ab00:	431c      	orrs	r4, r3
   1ab02:	9b07      	ldr	r3, [sp, #28]
   1ab04:	781b      	ldrb	r3, [r3, #0]
   1ab06:	e624      	b.n	1a752 <_vfprintf_r+0x112>
   1ab08:	9b07      	ldr	r3, [sp, #28]
   1ab0a:	781b      	ldrb	r3, [r3, #0]
   1ab0c:	2b6c      	cmp	r3, #108	; 0x6c
   1ab0e:	d101      	bne.n	1ab14 <_vfprintf_r+0x4d4>
   1ab10:	f000 fe8c 	bl	1b82c <_vfprintf_r+0x11ec>
   1ab14:	2210      	movs	r2, #16
   1ab16:	4314      	orrs	r4, r2
   1ab18:	e61b      	b.n	1a752 <_vfprintf_r+0x112>
   1ab1a:	2900      	cmp	r1, #0
   1ab1c:	d001      	beq.n	1ab22 <_vfprintf_r+0x4e2>
   1ab1e:	f001 f8d5 	bl	1bccc <_vfprintf_r+0x168c>
   1ab22:	06a3      	lsls	r3, r4, #26
   1ab24:	d501      	bpl.n	1ab2a <_vfprintf_r+0x4ea>
   1ab26:	f000 fe76 	bl	1b816 <_vfprintf_r+0x11d6>
   1ab2a:	06e3      	lsls	r3, r4, #27
   1ab2c:	d500      	bpl.n	1ab30 <_vfprintf_r+0x4f0>
   1ab2e:	e110      	b.n	1ad52 <_vfprintf_r+0x712>
   1ab30:	0663      	lsls	r3, r4, #25
   1ab32:	d400      	bmi.n	1ab36 <_vfprintf_r+0x4f6>
   1ab34:	e10d      	b.n	1ad52 <_vfprintf_r+0x712>
   1ab36:	4669      	mov	r1, sp
   1ab38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ab3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1ab3c:	681a      	ldr	r2, [r3, #0]
   1ab3e:	3304      	adds	r3, #4
   1ab40:	9208      	str	r2, [sp, #32]
   1ab42:	8011      	strh	r1, [r2, #0]
   1ab44:	930f      	str	r3, [sp, #60]	; 0x3c
   1ab46:	e5c9      	b.n	1a6dc <_vfprintf_r+0x9c>
   1ab48:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1ab4a:	2230      	movs	r2, #48	; 0x30
   1ab4c:	680b      	ldr	r3, [r1, #0]
   1ab4e:	930c      	str	r3, [sp, #48]	; 0x30
   1ab50:	2300      	movs	r3, #0
   1ab52:	930d      	str	r3, [sp, #52]	; 0x34
   1ab54:	3302      	adds	r3, #2
   1ab56:	431c      	orrs	r4, r3
   1ab58:	ab1e      	add	r3, sp, #120	; 0x78
   1ab5a:	701a      	strb	r2, [r3, #0]
   1ab5c:	3248      	adds	r2, #72	; 0x48
   1ab5e:	705a      	strb	r2, [r3, #1]
   1ab60:	000b      	movs	r3, r1
   1ab62:	3304      	adds	r3, #4
   1ab64:	930f      	str	r3, [sp, #60]	; 0x3c
   1ab66:	4bc1      	ldr	r3, [pc, #772]	; (1ae6c <_vfprintf_r+0x82c>)
   1ab68:	9212      	str	r2, [sp, #72]	; 0x48
   1ab6a:	9319      	str	r3, [sp, #100]	; 0x64
   1ab6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ab6e:	2302      	movs	r3, #2
   1ab70:	e6ac      	b.n	1a8cc <_vfprintf_r+0x28c>
   1ab72:	464b      	mov	r3, r9
   1ab74:	431c      	orrs	r4, r3
   1ab76:	9b07      	ldr	r3, [sp, #28]
   1ab78:	781b      	ldrb	r3, [r3, #0]
   1ab7a:	e5ea      	b.n	1a752 <_vfprintf_r+0x112>
   1ab7c:	9312      	str	r3, [sp, #72]	; 0x48
   1ab7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ab80:	a916      	add	r1, sp, #88	; 0x58
   1ab82:	1d1d      	adds	r5, r3, #4
   1ab84:	681b      	ldr	r3, [r3, #0]
   1ab86:	001a      	movs	r2, r3
   1ab88:	9311      	str	r3, [sp, #68]	; 0x44
   1ab8a:	2300      	movs	r3, #0
   1ab8c:	77cb      	strb	r3, [r1, #31]
   1ab8e:	2a00      	cmp	r2, #0
   1ab90:	d101      	bne.n	1ab96 <_vfprintf_r+0x556>
   1ab92:	f000 ff01 	bl	1b998 <_vfprintf_r+0x1358>
   1ab96:	4653      	mov	r3, sl
   1ab98:	3301      	adds	r3, #1
   1ab9a:	d101      	bne.n	1aba0 <_vfprintf_r+0x560>
   1ab9c:	f000 fe64 	bl	1b868 <_vfprintf_r+0x1228>
   1aba0:	4652      	mov	r2, sl
   1aba2:	2100      	movs	r1, #0
   1aba4:	9811      	ldr	r0, [sp, #68]	; 0x44
   1aba6:	f002 feb5 	bl	1d914 <memchr>
   1abaa:	2800      	cmp	r0, #0
   1abac:	d101      	bne.n	1abb2 <_vfprintf_r+0x572>
   1abae:	f000 ff78 	bl	1baa2 <_vfprintf_r+0x1462>
   1abb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1abb4:	1ac3      	subs	r3, r0, r3
   1abb6:	001a      	movs	r2, r3
   1abb8:	930e      	str	r3, [sp, #56]	; 0x38
   1abba:	43db      	mvns	r3, r3
   1abbc:	17db      	asrs	r3, r3, #31
   1abbe:	401a      	ands	r2, r3
   1abc0:	ab16      	add	r3, sp, #88	; 0x58
   1abc2:	7fdb      	ldrb	r3, [r3, #31]
   1abc4:	9208      	str	r2, [sp, #32]
   1abc6:	4698      	mov	r8, r3
   1abc8:	2300      	movs	r3, #0
   1abca:	950f      	str	r5, [sp, #60]	; 0x3c
   1abcc:	9409      	str	r4, [sp, #36]	; 0x24
   1abce:	469a      	mov	sl, r3
   1abd0:	9313      	str	r3, [sp, #76]	; 0x4c
   1abd2:	e6aa      	b.n	1a92a <_vfprintf_r+0x2ea>
   1abd4:	2308      	movs	r3, #8
   1abd6:	431c      	orrs	r4, r3
   1abd8:	9b07      	ldr	r3, [sp, #28]
   1abda:	781b      	ldrb	r3, [r3, #0]
   1abdc:	e5b9      	b.n	1a752 <_vfprintf_r+0x112>
   1abde:	9312      	str	r3, [sp, #72]	; 0x48
   1abe0:	2310      	movs	r3, #16
   1abe2:	431c      	orrs	r4, r3
   1abe4:	06a3      	lsls	r3, r4, #26
   1abe6:	d501      	bpl.n	1abec <_vfprintf_r+0x5ac>
   1abe8:	f000 fca7 	bl	1b53a <_vfprintf_r+0xefa>
   1abec:	06e3      	lsls	r3, r4, #27
   1abee:	d500      	bpl.n	1abf2 <_vfprintf_r+0x5b2>
   1abf0:	e3ee      	b.n	1b3d0 <_vfprintf_r+0xd90>
   1abf2:	0663      	lsls	r3, r4, #25
   1abf4:	d400      	bmi.n	1abf8 <_vfprintf_r+0x5b8>
   1abf6:	e3eb      	b.n	1b3d0 <_vfprintf_r+0xd90>
   1abf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1abfa:	881a      	ldrh	r2, [r3, #0]
   1abfc:	920c      	str	r2, [sp, #48]	; 0x30
   1abfe:	2200      	movs	r2, #0
   1ac00:	3304      	adds	r3, #4
   1ac02:	920d      	str	r2, [sp, #52]	; 0x34
   1ac04:	930f      	str	r3, [sp, #60]	; 0x3c
   1ac06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ac08:	2300      	movs	r3, #0
   1ac0a:	e65f      	b.n	1a8cc <_vfprintf_r+0x28c>
   1ac0c:	9312      	str	r3, [sp, #72]	; 0x48
   1ac0e:	2310      	movs	r3, #16
   1ac10:	431c      	orrs	r4, r3
   1ac12:	06a3      	lsls	r3, r4, #26
   1ac14:	d501      	bpl.n	1ac1a <_vfprintf_r+0x5da>
   1ac16:	f000 fcba 	bl	1b58e <_vfprintf_r+0xf4e>
   1ac1a:	06e3      	lsls	r3, r4, #27
   1ac1c:	d500      	bpl.n	1ac20 <_vfprintf_r+0x5e0>
   1ac1e:	e3da      	b.n	1b3d6 <_vfprintf_r+0xd96>
   1ac20:	0663      	lsls	r3, r4, #25
   1ac22:	d400      	bmi.n	1ac26 <_vfprintf_r+0x5e6>
   1ac24:	e3d7      	b.n	1b3d6 <_vfprintf_r+0xd96>
   1ac26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ac28:	881a      	ldrh	r2, [r3, #0]
   1ac2a:	920c      	str	r2, [sp, #48]	; 0x30
   1ac2c:	2200      	movs	r2, #0
   1ac2e:	3304      	adds	r3, #4
   1ac30:	920d      	str	r2, [sp, #52]	; 0x34
   1ac32:	930f      	str	r3, [sp, #60]	; 0x3c
   1ac34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1ac36:	2301      	movs	r3, #1
   1ac38:	e648      	b.n	1a8cc <_vfprintf_r+0x28c>
   1ac3a:	9312      	str	r3, [sp, #72]	; 0x48
   1ac3c:	2900      	cmp	r1, #0
   1ac3e:	d001      	beq.n	1ac44 <_vfprintf_r+0x604>
   1ac40:	f001 f857 	bl	1bcf2 <_vfprintf_r+0x16b2>
   1ac44:	4b8a      	ldr	r3, [pc, #552]	; (1ae70 <_vfprintf_r+0x830>)
   1ac46:	9319      	str	r3, [sp, #100]	; 0x64
   1ac48:	e618      	b.n	1a87c <_vfprintf_r+0x23c>
   1ac4a:	2301      	movs	r3, #1
   1ac4c:	431c      	orrs	r4, r3
   1ac4e:	9b07      	ldr	r3, [sp, #28]
   1ac50:	781b      	ldrb	r3, [r3, #0]
   1ac52:	e57e      	b.n	1a752 <_vfprintf_r+0x112>
   1ac54:	2380      	movs	r3, #128	; 0x80
   1ac56:	431c      	orrs	r4, r3
   1ac58:	9b07      	ldr	r3, [sp, #28]
   1ac5a:	781b      	ldrb	r3, [r3, #0]
   1ac5c:	e579      	b.n	1a752 <_vfprintf_r+0x112>
   1ac5e:	9b07      	ldr	r3, [sp, #28]
   1ac60:	781b      	ldrb	r3, [r3, #0]
   1ac62:	2800      	cmp	r0, #0
   1ac64:	d000      	beq.n	1ac68 <_vfprintf_r+0x628>
   1ac66:	e574      	b.n	1a752 <_vfprintf_r+0x112>
   1ac68:	2101      	movs	r1, #1
   1ac6a:	3020      	adds	r0, #32
   1ac6c:	e571      	b.n	1a752 <_vfprintf_r+0x112>
   1ac6e:	9312      	str	r3, [sp, #72]	; 0x48
   1ac70:	2900      	cmp	r1, #0
   1ac72:	d001      	beq.n	1ac78 <_vfprintf_r+0x638>
   1ac74:	f001 f839 	bl	1bcea <_vfprintf_r+0x16aa>
   1ac78:	2207      	movs	r2, #7
   1ac7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ac7c:	3307      	adds	r3, #7
   1ac7e:	4393      	bics	r3, r2
   1ac80:	3201      	adds	r2, #1
   1ac82:	4694      	mov	ip, r2
   1ac84:	449c      	add	ip, r3
   1ac86:	4662      	mov	r2, ip
   1ac88:	920f      	str	r2, [sp, #60]	; 0x3c
   1ac8a:	681a      	ldr	r2, [r3, #0]
   1ac8c:	9216      	str	r2, [sp, #88]	; 0x58
   1ac8e:	685b      	ldr	r3, [r3, #4]
   1ac90:	2201      	movs	r2, #1
   1ac92:	9315      	str	r3, [sp, #84]	; 0x54
   1ac94:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ac96:	9d16      	ldr	r5, [sp, #88]	; 0x58
   1ac98:	005b      	lsls	r3, r3, #1
   1ac9a:	085b      	lsrs	r3, r3, #1
   1ac9c:	4698      	mov	r8, r3
   1ac9e:	4252      	negs	r2, r2
   1aca0:	4b74      	ldr	r3, [pc, #464]	; (1ae74 <_vfprintf_r+0x834>)
   1aca2:	0028      	movs	r0, r5
   1aca4:	4641      	mov	r1, r8
   1aca6:	f003 fe97 	bl	1e9d8 <__aeabi_dcmpun>
   1acaa:	2800      	cmp	r0, #0
   1acac:	d001      	beq.n	1acb2 <_vfprintf_r+0x672>
   1acae:	f000 fcb4 	bl	1b61a <_vfprintf_r+0xfda>
   1acb2:	2201      	movs	r2, #1
   1acb4:	4b6f      	ldr	r3, [pc, #444]	; (1ae74 <_vfprintf_r+0x834>)
   1acb6:	4252      	negs	r2, r2
   1acb8:	0028      	movs	r0, r5
   1acba:	4641      	mov	r1, r8
   1acbc:	f7fb fe12 	bl	168e4 <__aeabi_dcmple>
   1acc0:	2800      	cmp	r0, #0
   1acc2:	d001      	beq.n	1acc8 <_vfprintf_r+0x688>
   1acc4:	f000 fca9 	bl	1b61a <_vfprintf_r+0xfda>
   1acc8:	2200      	movs	r2, #0
   1acca:	2300      	movs	r3, #0
   1accc:	9816      	ldr	r0, [sp, #88]	; 0x58
   1acce:	9915      	ldr	r1, [sp, #84]	; 0x54
   1acd0:	f7fb fdfe 	bl	168d0 <__aeabi_dcmplt>
   1acd4:	2800      	cmp	r0, #0
   1acd6:	d001      	beq.n	1acdc <_vfprintf_r+0x69c>
   1acd8:	f000 fd55 	bl	1b786 <_vfprintf_r+0x1146>
   1acdc:	ab16      	add	r3, sp, #88	; 0x58
   1acde:	7fdb      	ldrb	r3, [r3, #31]
   1ace0:	4698      	mov	r8, r3
   1ace2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ace4:	2b47      	cmp	r3, #71	; 0x47
   1ace6:	dd01      	ble.n	1acec <_vfprintf_r+0x6ac>
   1ace8:	f000 fdb4 	bl	1b854 <_vfprintf_r+0x1214>
   1acec:	4b62      	ldr	r3, [pc, #392]	; (1ae78 <_vfprintf_r+0x838>)
   1acee:	9311      	str	r3, [sp, #68]	; 0x44
   1acf0:	2380      	movs	r3, #128	; 0x80
   1acf2:	439c      	bics	r4, r3
   1acf4:	3b7d      	subs	r3, #125	; 0x7d
   1acf6:	9308      	str	r3, [sp, #32]
   1acf8:	930e      	str	r3, [sp, #56]	; 0x38
   1acfa:	2300      	movs	r3, #0
   1acfc:	9409      	str	r4, [sp, #36]	; 0x24
   1acfe:	469a      	mov	sl, r3
   1ad00:	9313      	str	r3, [sp, #76]	; 0x4c
   1ad02:	e612      	b.n	1a92a <_vfprintf_r+0x2ea>
   1ad04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad06:	1d1a      	adds	r2, r3, #4
   1ad08:	681b      	ldr	r3, [r3, #0]
   1ad0a:	930b      	str	r3, [sp, #44]	; 0x2c
   1ad0c:	2b00      	cmp	r3, #0
   1ad0e:	da00      	bge.n	1ad12 <_vfprintf_r+0x6d2>
   1ad10:	e578      	b.n	1a804 <_vfprintf_r+0x1c4>
   1ad12:	9b07      	ldr	r3, [sp, #28]
   1ad14:	920f      	str	r2, [sp, #60]	; 0x3c
   1ad16:	781b      	ldrb	r3, [r3, #0]
   1ad18:	e51b      	b.n	1a752 <_vfprintf_r+0x112>
   1ad1a:	9312      	str	r3, [sp, #72]	; 0x48
   1ad1c:	2900      	cmp	r1, #0
   1ad1e:	d001      	beq.n	1ad24 <_vfprintf_r+0x6e4>
   1ad20:	f000 ffcc 	bl	1bcbc <_vfprintf_r+0x167c>
   1ad24:	2310      	movs	r3, #16
   1ad26:	431c      	orrs	r4, r3
   1ad28:	e69a      	b.n	1aa60 <_vfprintf_r+0x420>
   1ad2a:	9312      	str	r3, [sp, #72]	; 0x48
   1ad2c:	e771      	b.n	1ac12 <_vfprintf_r+0x5d2>
   1ad2e:	9312      	str	r3, [sp, #72]	; 0x48
   1ad30:	e758      	b.n	1abe4 <_vfprintf_r+0x5a4>
   1ad32:	9312      	str	r3, [sp, #72]	; 0x48
   1ad34:	2900      	cmp	r1, #0
   1ad36:	d001      	beq.n	1ad3c <_vfprintf_r+0x6fc>
   1ad38:	f000 ffd3 	bl	1bce2 <_vfprintf_r+0x16a2>
   1ad3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ad3e:	2b00      	cmp	r3, #0
   1ad40:	d100      	bne.n	1ad44 <_vfprintf_r+0x704>
   1ad42:	e18d      	b.n	1b060 <_vfprintf_r+0xa20>
   1ad44:	ad28      	add	r5, sp, #160	; 0xa0
   1ad46:	702b      	strb	r3, [r5, #0]
   1ad48:	2300      	movs	r3, #0
   1ad4a:	aa16      	add	r2, sp, #88	; 0x58
   1ad4c:	77d3      	strb	r3, [r2, #31]
   1ad4e:	9409      	str	r4, [sp, #36]	; 0x24
   1ad50:	e678      	b.n	1aa44 <_vfprintf_r+0x404>
   1ad52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ad54:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ad56:	6813      	ldr	r3, [r2, #0]
   1ad58:	6019      	str	r1, [r3, #0]
   1ad5a:	0013      	movs	r3, r2
   1ad5c:	3304      	adds	r3, #4
   1ad5e:	930f      	str	r3, [sp, #60]	; 0x3c
   1ad60:	e4bc      	b.n	1a6dc <_vfprintf_r+0x9c>
   1ad62:	68bc      	ldr	r4, [r7, #8]
   1ad64:	4643      	mov	r3, r8
   1ad66:	2b00      	cmp	r3, #0
   1ad68:	d00f      	beq.n	1ad8a <_vfprintf_r+0x74a>
   1ad6a:	aa16      	add	r2, sp, #88	; 0x58
   1ad6c:	231f      	movs	r3, #31
   1ad6e:	4694      	mov	ip, r2
   1ad70:	4463      	add	r3, ip
   1ad72:	6033      	str	r3, [r6, #0]
   1ad74:	2301      	movs	r3, #1
   1ad76:	6073      	str	r3, [r6, #4]
   1ad78:	687b      	ldr	r3, [r7, #4]
   1ad7a:	3401      	adds	r4, #1
   1ad7c:	3301      	adds	r3, #1
   1ad7e:	60bc      	str	r4, [r7, #8]
   1ad80:	607b      	str	r3, [r7, #4]
   1ad82:	2b07      	cmp	r3, #7
   1ad84:	dd00      	ble.n	1ad88 <_vfprintf_r+0x748>
   1ad86:	e203      	b.n	1b190 <_vfprintf_r+0xb50>
   1ad88:	3608      	adds	r6, #8
   1ad8a:	464b      	mov	r3, r9
   1ad8c:	2b00      	cmp	r3, #0
   1ad8e:	d00c      	beq.n	1adaa <_vfprintf_r+0x76a>
   1ad90:	ab1e      	add	r3, sp, #120	; 0x78
   1ad92:	6033      	str	r3, [r6, #0]
   1ad94:	2302      	movs	r3, #2
   1ad96:	6073      	str	r3, [r6, #4]
   1ad98:	687b      	ldr	r3, [r7, #4]
   1ad9a:	3402      	adds	r4, #2
   1ad9c:	3301      	adds	r3, #1
   1ad9e:	60bc      	str	r4, [r7, #8]
   1ada0:	607b      	str	r3, [r7, #4]
   1ada2:	2b07      	cmp	r3, #7
   1ada4:	dd00      	ble.n	1ada8 <_vfprintf_r+0x768>
   1ada6:	e1fd      	b.n	1b1a4 <_vfprintf_r+0xb64>
   1ada8:	3608      	adds	r6, #8
   1adaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1adac:	2b80      	cmp	r3, #128	; 0x80
   1adae:	d100      	bne.n	1adb2 <_vfprintf_r+0x772>
   1adb0:	e173      	b.n	1b09a <_vfprintf_r+0xa5a>
   1adb2:	4653      	mov	r3, sl
   1adb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1adb6:	1a9d      	subs	r5, r3, r2
   1adb8:	2d00      	cmp	r5, #0
   1adba:	dd32      	ble.n	1ae22 <_vfprintf_r+0x7e2>
   1adbc:	4a2f      	ldr	r2, [pc, #188]	; (1ae7c <_vfprintf_r+0x83c>)
   1adbe:	687b      	ldr	r3, [r7, #4]
   1adc0:	4691      	mov	r9, r2
   1adc2:	2d10      	cmp	r5, #16
   1adc4:	dd22      	ble.n	1ae0c <_vfprintf_r+0x7cc>
   1adc6:	2210      	movs	r2, #16
   1adc8:	4692      	mov	sl, r2
   1adca:	0022      	movs	r2, r4
   1adcc:	465c      	mov	r4, fp
   1adce:	e003      	b.n	1add8 <_vfprintf_r+0x798>
   1add0:	3d10      	subs	r5, #16
   1add2:	3608      	adds	r6, #8
   1add4:	2d10      	cmp	r5, #16
   1add6:	dd17      	ble.n	1ae08 <_vfprintf_r+0x7c8>
   1add8:	4649      	mov	r1, r9
   1adda:	6031      	str	r1, [r6, #0]
   1addc:	4651      	mov	r1, sl
   1adde:	3210      	adds	r2, #16
   1ade0:	3301      	adds	r3, #1
   1ade2:	6071      	str	r1, [r6, #4]
   1ade4:	60ba      	str	r2, [r7, #8]
   1ade6:	607b      	str	r3, [r7, #4]
   1ade8:	2b07      	cmp	r3, #7
   1adea:	ddf1      	ble.n	1add0 <_vfprintf_r+0x790>
   1adec:	003a      	movs	r2, r7
   1adee:	0021      	movs	r1, r4
   1adf0:	9806      	ldr	r0, [sp, #24]
   1adf2:	f003 fb65 	bl	1e4c0 <__sprint_r>
   1adf6:	2800      	cmp	r0, #0
   1adf8:	d000      	beq.n	1adfc <_vfprintf_r+0x7bc>
   1adfa:	e18a      	b.n	1b112 <_vfprintf_r+0xad2>
   1adfc:	3d10      	subs	r5, #16
   1adfe:	68ba      	ldr	r2, [r7, #8]
   1ae00:	687b      	ldr	r3, [r7, #4]
   1ae02:	ae32      	add	r6, sp, #200	; 0xc8
   1ae04:	2d10      	cmp	r5, #16
   1ae06:	dce7      	bgt.n	1add8 <_vfprintf_r+0x798>
   1ae08:	46a3      	mov	fp, r4
   1ae0a:	0014      	movs	r4, r2
   1ae0c:	464a      	mov	r2, r9
   1ae0e:	1964      	adds	r4, r4, r5
   1ae10:	3301      	adds	r3, #1
   1ae12:	6032      	str	r2, [r6, #0]
   1ae14:	6075      	str	r5, [r6, #4]
   1ae16:	60bc      	str	r4, [r7, #8]
   1ae18:	607b      	str	r3, [r7, #4]
   1ae1a:	2b07      	cmp	r3, #7
   1ae1c:	dd00      	ble.n	1ae20 <_vfprintf_r+0x7e0>
   1ae1e:	e1ad      	b.n	1b17c <_vfprintf_r+0xb3c>
   1ae20:	3608      	adds	r6, #8
   1ae22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae24:	05db      	lsls	r3, r3, #23
   1ae26:	d500      	bpl.n	1ae2a <_vfprintf_r+0x7ea>
   1ae28:	e0be      	b.n	1afa8 <_vfprintf_r+0x968>
   1ae2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ae2c:	6033      	str	r3, [r6, #0]
   1ae2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ae30:	469c      	mov	ip, r3
   1ae32:	6073      	str	r3, [r6, #4]
   1ae34:	687b      	ldr	r3, [r7, #4]
   1ae36:	4464      	add	r4, ip
   1ae38:	3301      	adds	r3, #1
   1ae3a:	60bc      	str	r4, [r7, #8]
   1ae3c:	607b      	str	r3, [r7, #4]
   1ae3e:	2b07      	cmp	r3, #7
   1ae40:	dd00      	ble.n	1ae44 <_vfprintf_r+0x804>
   1ae42:	e0a6      	b.n	1af92 <_vfprintf_r+0x952>
   1ae44:	3608      	adds	r6, #8
   1ae46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae48:	075b      	lsls	r3, r3, #29
   1ae4a:	d54a      	bpl.n	1aee2 <_vfprintf_r+0x8a2>
   1ae4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ae4e:	9a08      	ldr	r2, [sp, #32]
   1ae50:	1a9d      	subs	r5, r3, r2
   1ae52:	2d00      	cmp	r5, #0
   1ae54:	dd45      	ble.n	1aee2 <_vfprintf_r+0x8a2>
   1ae56:	4a0a      	ldr	r2, [pc, #40]	; (1ae80 <_vfprintf_r+0x840>)
   1ae58:	687b      	ldr	r3, [r7, #4]
   1ae5a:	4690      	mov	r8, r2
   1ae5c:	2d10      	cmp	r5, #16
   1ae5e:	dd2f      	ble.n	1aec0 <_vfprintf_r+0x880>
   1ae60:	2210      	movs	r2, #16
   1ae62:	4691      	mov	r9, r2
   1ae64:	0022      	movs	r2, r4
   1ae66:	465c      	mov	r4, fp
   1ae68:	e010      	b.n	1ae8c <_vfprintf_r+0x84c>
   1ae6a:	46c0      	nop			; (mov r8, r8)
   1ae6c:	000206b4 	.word	0x000206b4
   1ae70:	000206a0 	.word	0x000206a0
   1ae74:	7fefffff 	.word	0x7fefffff
   1ae78:	00020690 	.word	0x00020690
   1ae7c:	000206e0 	.word	0x000206e0
   1ae80:	000206d0 	.word	0x000206d0
   1ae84:	3d10      	subs	r5, #16
   1ae86:	3608      	adds	r6, #8
   1ae88:	2d10      	cmp	r5, #16
   1ae8a:	dd17      	ble.n	1aebc <_vfprintf_r+0x87c>
   1ae8c:	49d1      	ldr	r1, [pc, #836]	; (1b1d4 <_vfprintf_r+0xb94>)
   1ae8e:	3210      	adds	r2, #16
   1ae90:	6031      	str	r1, [r6, #0]
   1ae92:	4649      	mov	r1, r9
   1ae94:	3301      	adds	r3, #1
   1ae96:	6071      	str	r1, [r6, #4]
   1ae98:	60ba      	str	r2, [r7, #8]
   1ae9a:	607b      	str	r3, [r7, #4]
   1ae9c:	2b07      	cmp	r3, #7
   1ae9e:	ddf1      	ble.n	1ae84 <_vfprintf_r+0x844>
   1aea0:	003a      	movs	r2, r7
   1aea2:	0021      	movs	r1, r4
   1aea4:	9806      	ldr	r0, [sp, #24]
   1aea6:	f003 fb0b 	bl	1e4c0 <__sprint_r>
   1aeaa:	2800      	cmp	r0, #0
   1aeac:	d000      	beq.n	1aeb0 <_vfprintf_r+0x870>
   1aeae:	e130      	b.n	1b112 <_vfprintf_r+0xad2>
   1aeb0:	3d10      	subs	r5, #16
   1aeb2:	68ba      	ldr	r2, [r7, #8]
   1aeb4:	687b      	ldr	r3, [r7, #4]
   1aeb6:	ae32      	add	r6, sp, #200	; 0xc8
   1aeb8:	2d10      	cmp	r5, #16
   1aeba:	dce7      	bgt.n	1ae8c <_vfprintf_r+0x84c>
   1aebc:	46a3      	mov	fp, r4
   1aebe:	0014      	movs	r4, r2
   1aec0:	4642      	mov	r2, r8
   1aec2:	1964      	adds	r4, r4, r5
   1aec4:	3301      	adds	r3, #1
   1aec6:	c624      	stmia	r6!, {r2, r5}
   1aec8:	60bc      	str	r4, [r7, #8]
   1aeca:	607b      	str	r3, [r7, #4]
   1aecc:	2b07      	cmp	r3, #7
   1aece:	dd08      	ble.n	1aee2 <_vfprintf_r+0x8a2>
   1aed0:	003a      	movs	r2, r7
   1aed2:	4659      	mov	r1, fp
   1aed4:	9806      	ldr	r0, [sp, #24]
   1aed6:	f003 faf3 	bl	1e4c0 <__sprint_r>
   1aeda:	2800      	cmp	r0, #0
   1aedc:	d000      	beq.n	1aee0 <_vfprintf_r+0x8a0>
   1aede:	e13f      	b.n	1b160 <_vfprintf_r+0xb20>
   1aee0:	68bc      	ldr	r4, [r7, #8]
   1aee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aee4:	9908      	ldr	r1, [sp, #32]
   1aee6:	428b      	cmp	r3, r1
   1aee8:	da00      	bge.n	1aeec <_vfprintf_r+0x8ac>
   1aeea:	000b      	movs	r3, r1
   1aeec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1aeee:	4694      	mov	ip, r2
   1aef0:	449c      	add	ip, r3
   1aef2:	4663      	mov	r3, ip
   1aef4:	930a      	str	r3, [sp, #40]	; 0x28
   1aef6:	2c00      	cmp	r4, #0
   1aef8:	d000      	beq.n	1aefc <_vfprintf_r+0x8bc>
   1aefa:	e129      	b.n	1b150 <_vfprintf_r+0xb10>
   1aefc:	2300      	movs	r3, #0
   1aefe:	ae32      	add	r6, sp, #200	; 0xc8
   1af00:	607b      	str	r3, [r7, #4]
   1af02:	f7ff fbeb 	bl	1a6dc <_vfprintf_r+0x9c>
   1af06:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1af08:	2b01      	cmp	r3, #1
   1af0a:	dc00      	bgt.n	1af0e <_vfprintf_r+0x8ce>
   1af0c:	e103      	b.n	1b116 <_vfprintf_r+0xad6>
   1af0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1af10:	3401      	adds	r4, #1
   1af12:	6033      	str	r3, [r6, #0]
   1af14:	2301      	movs	r3, #1
   1af16:	6073      	str	r3, [r6, #4]
   1af18:	687b      	ldr	r3, [r7, #4]
   1af1a:	60bc      	str	r4, [r7, #8]
   1af1c:	3301      	adds	r3, #1
   1af1e:	607b      	str	r3, [r7, #4]
   1af20:	2b07      	cmp	r3, #7
   1af22:	dd00      	ble.n	1af26 <_vfprintf_r+0x8e6>
   1af24:	e2ef      	b.n	1b506 <_vfprintf_r+0xec6>
   1af26:	3608      	adds	r6, #8
   1af28:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1af2a:	3301      	adds	r3, #1
   1af2c:	6032      	str	r2, [r6, #0]
   1af2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1af30:	4698      	mov	r8, r3
   1af32:	4694      	mov	ip, r2
   1af34:	4464      	add	r4, ip
   1af36:	6072      	str	r2, [r6, #4]
   1af38:	60bc      	str	r4, [r7, #8]
   1af3a:	607b      	str	r3, [r7, #4]
   1af3c:	2b07      	cmp	r3, #7
   1af3e:	dd00      	ble.n	1af42 <_vfprintf_r+0x902>
   1af40:	e318      	b.n	1b574 <_vfprintf_r+0xf34>
   1af42:	3608      	adds	r6, #8
   1af44:	2200      	movs	r2, #0
   1af46:	2300      	movs	r3, #0
   1af48:	9816      	ldr	r0, [sp, #88]	; 0x58
   1af4a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1af4c:	f7fb fcba 	bl	168c4 <__aeabi_dcmpeq>
   1af50:	2800      	cmp	r0, #0
   1af52:	d000      	beq.n	1af56 <_vfprintf_r+0x916>
   1af54:	e1f4      	b.n	1b340 <_vfprintf_r+0xd00>
   1af56:	9d11      	ldr	r5, [sp, #68]	; 0x44
   1af58:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1af5a:	3501      	adds	r5, #1
   1af5c:	3b01      	subs	r3, #1
   1af5e:	6035      	str	r5, [r6, #0]
   1af60:	6073      	str	r3, [r6, #4]
   1af62:	18e4      	adds	r4, r4, r3
   1af64:	2301      	movs	r3, #1
   1af66:	469c      	mov	ip, r3
   1af68:	44e0      	add	r8, ip
   1af6a:	4643      	mov	r3, r8
   1af6c:	60bc      	str	r4, [r7, #8]
   1af6e:	607b      	str	r3, [r7, #4]
   1af70:	2b07      	cmp	r3, #7
   1af72:	dd00      	ble.n	1af76 <_vfprintf_r+0x936>
   1af74:	e0e0      	b.n	1b138 <_vfprintf_r+0xaf8>
   1af76:	3608      	adds	r6, #8
   1af78:	ab21      	add	r3, sp, #132	; 0x84
   1af7a:	6033      	str	r3, [r6, #0]
   1af7c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1af7e:	469c      	mov	ip, r3
   1af80:	6073      	str	r3, [r6, #4]
   1af82:	4643      	mov	r3, r8
   1af84:	4464      	add	r4, ip
   1af86:	3301      	adds	r3, #1
   1af88:	60bc      	str	r4, [r7, #8]
   1af8a:	607b      	str	r3, [r7, #4]
   1af8c:	2b07      	cmp	r3, #7
   1af8e:	dc00      	bgt.n	1af92 <_vfprintf_r+0x952>
   1af90:	e758      	b.n	1ae44 <_vfprintf_r+0x804>
   1af92:	003a      	movs	r2, r7
   1af94:	4659      	mov	r1, fp
   1af96:	9806      	ldr	r0, [sp, #24]
   1af98:	f003 fa92 	bl	1e4c0 <__sprint_r>
   1af9c:	2800      	cmp	r0, #0
   1af9e:	d000      	beq.n	1afa2 <_vfprintf_r+0x962>
   1afa0:	e0de      	b.n	1b160 <_vfprintf_r+0xb20>
   1afa2:	68bc      	ldr	r4, [r7, #8]
   1afa4:	ae32      	add	r6, sp, #200	; 0xc8
   1afa6:	e74e      	b.n	1ae46 <_vfprintf_r+0x806>
   1afa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1afaa:	2b65      	cmp	r3, #101	; 0x65
   1afac:	ddab      	ble.n	1af06 <_vfprintf_r+0x8c6>
   1afae:	2200      	movs	r2, #0
   1afb0:	2300      	movs	r3, #0
   1afb2:	9816      	ldr	r0, [sp, #88]	; 0x58
   1afb4:	9915      	ldr	r1, [sp, #84]	; 0x54
   1afb6:	f7fb fc85 	bl	168c4 <__aeabi_dcmpeq>
   1afba:	2800      	cmp	r0, #0
   1afbc:	d100      	bne.n	1afc0 <_vfprintf_r+0x980>
   1afbe:	e134      	b.n	1b22a <_vfprintf_r+0xbea>
   1afc0:	4b85      	ldr	r3, [pc, #532]	; (1b1d8 <_vfprintf_r+0xb98>)
   1afc2:	3401      	adds	r4, #1
   1afc4:	6033      	str	r3, [r6, #0]
   1afc6:	2301      	movs	r3, #1
   1afc8:	6073      	str	r3, [r6, #4]
   1afca:	687b      	ldr	r3, [r7, #4]
   1afcc:	60bc      	str	r4, [r7, #8]
   1afce:	3301      	adds	r3, #1
   1afd0:	607b      	str	r3, [r7, #4]
   1afd2:	2b07      	cmp	r3, #7
   1afd4:	dd00      	ble.n	1afd8 <_vfprintf_r+0x998>
   1afd6:	e3dc      	b.n	1b792 <_vfprintf_r+0x1152>
   1afd8:	3608      	adds	r6, #8
   1afda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1afdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1afde:	4293      	cmp	r3, r2
   1afe0:	db03      	blt.n	1afea <_vfprintf_r+0x9aa>
   1afe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1afe4:	07db      	lsls	r3, r3, #31
   1afe6:	d400      	bmi.n	1afea <_vfprintf_r+0x9aa>
   1afe8:	e3b7      	b.n	1b75a <_vfprintf_r+0x111a>
   1afea:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1afec:	68ba      	ldr	r2, [r7, #8]
   1afee:	6033      	str	r3, [r6, #0]
   1aff0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1aff2:	469c      	mov	ip, r3
   1aff4:	6073      	str	r3, [r6, #4]
   1aff6:	687b      	ldr	r3, [r7, #4]
   1aff8:	4462      	add	r2, ip
   1affa:	3301      	adds	r3, #1
   1affc:	0014      	movs	r4, r2
   1affe:	60ba      	str	r2, [r7, #8]
   1b000:	607b      	str	r3, [r7, #4]
   1b002:	2b07      	cmp	r3, #7
   1b004:	dd01      	ble.n	1b00a <_vfprintf_r+0x9ca>
   1b006:	f000 fc19 	bl	1b83c <_vfprintf_r+0x11fc>
   1b00a:	3608      	adds	r6, #8
   1b00c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b00e:	1e5d      	subs	r5, r3, #1
   1b010:	2d00      	cmp	r5, #0
   1b012:	dc00      	bgt.n	1b016 <_vfprintf_r+0x9d6>
   1b014:	e717      	b.n	1ae46 <_vfprintf_r+0x806>
   1b016:	4a71      	ldr	r2, [pc, #452]	; (1b1dc <_vfprintf_r+0xb9c>)
   1b018:	687b      	ldr	r3, [r7, #4]
   1b01a:	4691      	mov	r9, r2
   1b01c:	2d10      	cmp	r5, #16
   1b01e:	dc00      	bgt.n	1b022 <_vfprintf_r+0x9e2>
   1b020:	e1c3      	b.n	1b3aa <_vfprintf_r+0xd6a>
   1b022:	2210      	movs	r2, #16
   1b024:	4690      	mov	r8, r2
   1b026:	0022      	movs	r2, r4
   1b028:	464c      	mov	r4, r9
   1b02a:	46d9      	mov	r9, fp
   1b02c:	e004      	b.n	1b038 <_vfprintf_r+0x9f8>
   1b02e:	3608      	adds	r6, #8
   1b030:	3d10      	subs	r5, #16
   1b032:	2d10      	cmp	r5, #16
   1b034:	dc00      	bgt.n	1b038 <_vfprintf_r+0x9f8>
   1b036:	e37c      	b.n	1b732 <_vfprintf_r+0x10f2>
   1b038:	4641      	mov	r1, r8
   1b03a:	3210      	adds	r2, #16
   1b03c:	3301      	adds	r3, #1
   1b03e:	6034      	str	r4, [r6, #0]
   1b040:	6071      	str	r1, [r6, #4]
   1b042:	60ba      	str	r2, [r7, #8]
   1b044:	607b      	str	r3, [r7, #4]
   1b046:	2b07      	cmp	r3, #7
   1b048:	ddf1      	ble.n	1b02e <_vfprintf_r+0x9ee>
   1b04a:	003a      	movs	r2, r7
   1b04c:	4649      	mov	r1, r9
   1b04e:	9806      	ldr	r0, [sp, #24]
   1b050:	f003 fa36 	bl	1e4c0 <__sprint_r>
   1b054:	2800      	cmp	r0, #0
   1b056:	d10b      	bne.n	1b070 <_vfprintf_r+0xa30>
   1b058:	68ba      	ldr	r2, [r7, #8]
   1b05a:	687b      	ldr	r3, [r7, #4]
   1b05c:	ae32      	add	r6, sp, #200	; 0xc8
   1b05e:	e7e7      	b.n	1b030 <_vfprintf_r+0x9f0>
   1b060:	68bb      	ldr	r3, [r7, #8]
   1b062:	46d9      	mov	r9, fp
   1b064:	2b00      	cmp	r3, #0
   1b066:	d001      	beq.n	1b06c <_vfprintf_r+0xa2c>
   1b068:	f000 fd4c 	bl	1bb04 <_vfprintf_r+0x14c4>
   1b06c:	2300      	movs	r3, #0
   1b06e:	607b      	str	r3, [r7, #4]
   1b070:	464b      	mov	r3, r9
   1b072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1b074:	07db      	lsls	r3, r3, #31
   1b076:	d40d      	bmi.n	1b094 <_vfprintf_r+0xa54>
   1b078:	464b      	mov	r3, r9
   1b07a:	899b      	ldrh	r3, [r3, #12]
   1b07c:	059a      	lsls	r2, r3, #22
   1b07e:	d505      	bpl.n	1b08c <_vfprintf_r+0xa4c>
   1b080:	065b      	lsls	r3, r3, #25
   1b082:	d401      	bmi.n	1b088 <_vfprintf_r+0xa48>
   1b084:	f7ff fb8d 	bl	1a7a2 <_vfprintf_r+0x162>
   1b088:	f7ff fb88 	bl	1a79c <_vfprintf_r+0x15c>
   1b08c:	464b      	mov	r3, r9
   1b08e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b090:	f002 fbc6 	bl	1d820 <__retarget_lock_release_recursive>
   1b094:	464b      	mov	r3, r9
   1b096:	899b      	ldrh	r3, [r3, #12]
   1b098:	e7f2      	b.n	1b080 <_vfprintf_r+0xa40>
   1b09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b09c:	9a08      	ldr	r2, [sp, #32]
   1b09e:	1a9d      	subs	r5, r3, r2
   1b0a0:	2d00      	cmp	r5, #0
   1b0a2:	dc00      	bgt.n	1b0a6 <_vfprintf_r+0xa66>
   1b0a4:	e685      	b.n	1adb2 <_vfprintf_r+0x772>
   1b0a6:	4a4d      	ldr	r2, [pc, #308]	; (1b1dc <_vfprintf_r+0xb9c>)
   1b0a8:	687b      	ldr	r3, [r7, #4]
   1b0aa:	4691      	mov	r9, r2
   1b0ac:	2d10      	cmp	r5, #16
   1b0ae:	dd24      	ble.n	1b0fa <_vfprintf_r+0xaba>
   1b0b0:	2210      	movs	r2, #16
   1b0b2:	0021      	movs	r1, r4
   1b0b4:	4690      	mov	r8, r2
   1b0b6:	465c      	mov	r4, fp
   1b0b8:	0032      	movs	r2, r6
   1b0ba:	464e      	mov	r6, r9
   1b0bc:	e003      	b.n	1b0c6 <_vfprintf_r+0xa86>
   1b0be:	3d10      	subs	r5, #16
   1b0c0:	3208      	adds	r2, #8
   1b0c2:	2d10      	cmp	r5, #16
   1b0c4:	dd15      	ble.n	1b0f2 <_vfprintf_r+0xab2>
   1b0c6:	4640      	mov	r0, r8
   1b0c8:	3110      	adds	r1, #16
   1b0ca:	3301      	adds	r3, #1
   1b0cc:	6016      	str	r6, [r2, #0]
   1b0ce:	6050      	str	r0, [r2, #4]
   1b0d0:	60b9      	str	r1, [r7, #8]
   1b0d2:	607b      	str	r3, [r7, #4]
   1b0d4:	2b07      	cmp	r3, #7
   1b0d6:	ddf2      	ble.n	1b0be <_vfprintf_r+0xa7e>
   1b0d8:	003a      	movs	r2, r7
   1b0da:	0021      	movs	r1, r4
   1b0dc:	9806      	ldr	r0, [sp, #24]
   1b0de:	f003 f9ef 	bl	1e4c0 <__sprint_r>
   1b0e2:	2800      	cmp	r0, #0
   1b0e4:	d115      	bne.n	1b112 <_vfprintf_r+0xad2>
   1b0e6:	3d10      	subs	r5, #16
   1b0e8:	68b9      	ldr	r1, [r7, #8]
   1b0ea:	687b      	ldr	r3, [r7, #4]
   1b0ec:	aa32      	add	r2, sp, #200	; 0xc8
   1b0ee:	2d10      	cmp	r5, #16
   1b0f0:	dce9      	bgt.n	1b0c6 <_vfprintf_r+0xa86>
   1b0f2:	46a3      	mov	fp, r4
   1b0f4:	46b1      	mov	r9, r6
   1b0f6:	000c      	movs	r4, r1
   1b0f8:	0016      	movs	r6, r2
   1b0fa:	464a      	mov	r2, r9
   1b0fc:	1964      	adds	r4, r4, r5
   1b0fe:	3301      	adds	r3, #1
   1b100:	6032      	str	r2, [r6, #0]
   1b102:	6075      	str	r5, [r6, #4]
   1b104:	60bc      	str	r4, [r7, #8]
   1b106:	607b      	str	r3, [r7, #4]
   1b108:	2b07      	cmp	r3, #7
   1b10a:	dd00      	ble.n	1b10e <_vfprintf_r+0xace>
   1b10c:	e263      	b.n	1b5d6 <_vfprintf_r+0xf96>
   1b10e:	3608      	adds	r6, #8
   1b110:	e64f      	b.n	1adb2 <_vfprintf_r+0x772>
   1b112:	46a1      	mov	r9, r4
   1b114:	e7ac      	b.n	1b070 <_vfprintf_r+0xa30>
   1b116:	2301      	movs	r3, #1
   1b118:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b11a:	4213      	tst	r3, r2
   1b11c:	d000      	beq.n	1b120 <_vfprintf_r+0xae0>
   1b11e:	e6f6      	b.n	1af0e <_vfprintf_r+0x8ce>
   1b120:	6073      	str	r3, [r6, #4]
   1b122:	687b      	ldr	r3, [r7, #4]
   1b124:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b126:	3301      	adds	r3, #1
   1b128:	3401      	adds	r4, #1
   1b12a:	6032      	str	r2, [r6, #0]
   1b12c:	60bc      	str	r4, [r7, #8]
   1b12e:	4698      	mov	r8, r3
   1b130:	607b      	str	r3, [r7, #4]
   1b132:	2b07      	cmp	r3, #7
   1b134:	dc00      	bgt.n	1b138 <_vfprintf_r+0xaf8>
   1b136:	e71e      	b.n	1af76 <_vfprintf_r+0x936>
   1b138:	003a      	movs	r2, r7
   1b13a:	4659      	mov	r1, fp
   1b13c:	9806      	ldr	r0, [sp, #24]
   1b13e:	f003 f9bf 	bl	1e4c0 <__sprint_r>
   1b142:	2800      	cmp	r0, #0
   1b144:	d10c      	bne.n	1b160 <_vfprintf_r+0xb20>
   1b146:	687b      	ldr	r3, [r7, #4]
   1b148:	68bc      	ldr	r4, [r7, #8]
   1b14a:	4698      	mov	r8, r3
   1b14c:	ae32      	add	r6, sp, #200	; 0xc8
   1b14e:	e713      	b.n	1af78 <_vfprintf_r+0x938>
   1b150:	003a      	movs	r2, r7
   1b152:	4659      	mov	r1, fp
   1b154:	9806      	ldr	r0, [sp, #24]
   1b156:	f003 f9b3 	bl	1e4c0 <__sprint_r>
   1b15a:	2800      	cmp	r0, #0
   1b15c:	d100      	bne.n	1b160 <_vfprintf_r+0xb20>
   1b15e:	e6cd      	b.n	1aefc <_vfprintf_r+0x8bc>
   1b160:	46d9      	mov	r9, fp
   1b162:	e785      	b.n	1b070 <_vfprintf_r+0xa30>
   1b164:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b166:	2b01      	cmp	r3, #1
   1b168:	d100      	bne.n	1b16c <_vfprintf_r+0xb2c>
   1b16a:	e148      	b.n	1b3fe <_vfprintf_r+0xdbe>
   1b16c:	2b02      	cmp	r3, #2
   1b16e:	d123      	bne.n	1b1b8 <_vfprintf_r+0xb78>
   1b170:	9409      	str	r4, [sp, #36]	; 0x24
   1b172:	2300      	movs	r3, #0
   1b174:	2400      	movs	r4, #0
   1b176:	930c      	str	r3, [sp, #48]	; 0x30
   1b178:	940d      	str	r4, [sp, #52]	; 0x34
   1b17a:	e4a1      	b.n	1aac0 <_vfprintf_r+0x480>
   1b17c:	003a      	movs	r2, r7
   1b17e:	4659      	mov	r1, fp
   1b180:	9806      	ldr	r0, [sp, #24]
   1b182:	f003 f99d 	bl	1e4c0 <__sprint_r>
   1b186:	2800      	cmp	r0, #0
   1b188:	d1ea      	bne.n	1b160 <_vfprintf_r+0xb20>
   1b18a:	68bc      	ldr	r4, [r7, #8]
   1b18c:	ae32      	add	r6, sp, #200	; 0xc8
   1b18e:	e648      	b.n	1ae22 <_vfprintf_r+0x7e2>
   1b190:	003a      	movs	r2, r7
   1b192:	4659      	mov	r1, fp
   1b194:	9806      	ldr	r0, [sp, #24]
   1b196:	f003 f993 	bl	1e4c0 <__sprint_r>
   1b19a:	2800      	cmp	r0, #0
   1b19c:	d1e0      	bne.n	1b160 <_vfprintf_r+0xb20>
   1b19e:	68bc      	ldr	r4, [r7, #8]
   1b1a0:	ae32      	add	r6, sp, #200	; 0xc8
   1b1a2:	e5f2      	b.n	1ad8a <_vfprintf_r+0x74a>
   1b1a4:	003a      	movs	r2, r7
   1b1a6:	4659      	mov	r1, fp
   1b1a8:	9806      	ldr	r0, [sp, #24]
   1b1aa:	f003 f989 	bl	1e4c0 <__sprint_r>
   1b1ae:	2800      	cmp	r0, #0
   1b1b0:	d1d6      	bne.n	1b160 <_vfprintf_r+0xb20>
   1b1b2:	68bc      	ldr	r4, [r7, #8]
   1b1b4:	ae32      	add	r6, sp, #200	; 0xc8
   1b1b6:	e5f8      	b.n	1adaa <_vfprintf_r+0x76a>
   1b1b8:	9409      	str	r4, [sp, #36]	; 0x24
   1b1ba:	2300      	movs	r3, #0
   1b1bc:	2400      	movs	r4, #0
   1b1be:	930c      	str	r3, [sp, #48]	; 0x30
   1b1c0:	940d      	str	r4, [sp, #52]	; 0x34
   1b1c2:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b1c4:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b1c6:	4653      	mov	r3, sl
   1b1c8:	aa32      	add	r2, sp, #200	; 0xc8
   1b1ca:	4691      	mov	r9, r2
   1b1cc:	9308      	str	r3, [sp, #32]
   1b1ce:	46b2      	mov	sl, r6
   1b1d0:	e007      	b.n	1b1e2 <_vfprintf_r+0xba2>
   1b1d2:	46c0      	nop			; (mov r8, r8)
   1b1d4:	000206d0 	.word	0x000206d0
   1b1d8:	0001f940 	.word	0x0001f940
   1b1dc:	000206e0 	.word	0x000206e0
   1b1e0:	46a1      	mov	r9, r4
   1b1e2:	074a      	lsls	r2, r1, #29
   1b1e4:	4694      	mov	ip, r2
   1b1e6:	464b      	mov	r3, r9
   1b1e8:	4665      	mov	r5, ip
   1b1ea:	1e5c      	subs	r4, r3, #1
   1b1ec:	08c6      	lsrs	r6, r0, #3
   1b1ee:	2307      	movs	r3, #7
   1b1f0:	08ca      	lsrs	r2, r1, #3
   1b1f2:	4335      	orrs	r5, r6
   1b1f4:	0011      	movs	r1, r2
   1b1f6:	002a      	movs	r2, r5
   1b1f8:	4003      	ands	r3, r0
   1b1fa:	3330      	adds	r3, #48	; 0x30
   1b1fc:	7023      	strb	r3, [r4, #0]
   1b1fe:	0028      	movs	r0, r5
   1b200:	430a      	orrs	r2, r1
   1b202:	d1ed      	bne.n	1b1e0 <_vfprintf_r+0xba0>
   1b204:	900c      	str	r0, [sp, #48]	; 0x30
   1b206:	910d      	str	r1, [sp, #52]	; 0x34
   1b208:	9908      	ldr	r1, [sp, #32]
   1b20a:	4656      	mov	r6, sl
   1b20c:	468a      	mov	sl, r1
   1b20e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b210:	464a      	mov	r2, r9
   1b212:	9411      	str	r4, [sp, #68]	; 0x44
   1b214:	07c9      	lsls	r1, r1, #31
   1b216:	d500      	bpl.n	1b21a <_vfprintf_r+0xbda>
   1b218:	e0e0      	b.n	1b3dc <_vfprintf_r+0xd9c>
   1b21a:	ab32      	add	r3, sp, #200	; 0xc8
   1b21c:	1b1b      	subs	r3, r3, r4
   1b21e:	930e      	str	r3, [sp, #56]	; 0x38
   1b220:	f7ff fb7b 	bl	1a91a <_vfprintf_r+0x2da>
   1b224:	9c07      	ldr	r4, [sp, #28]
   1b226:	f7ff fa7d 	bl	1a724 <_vfprintf_r+0xe4>
   1b22a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1b22c:	2800      	cmp	r0, #0
   1b22e:	dc00      	bgt.n	1b232 <_vfprintf_r+0xbf2>
   1b230:	e2b9      	b.n	1b7a6 <_vfprintf_r+0x1166>
   1b232:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b234:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b236:	0013      	movs	r3, r2
   1b238:	4690      	mov	r8, r2
   1b23a:	428b      	cmp	r3, r1
   1b23c:	dd00      	ble.n	1b240 <_vfprintf_r+0xc00>
   1b23e:	4688      	mov	r8, r1
   1b240:	4643      	mov	r3, r8
   1b242:	2b00      	cmp	r3, #0
   1b244:	dd0c      	ble.n	1b260 <_vfprintf_r+0xc20>
   1b246:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b248:	4444      	add	r4, r8
   1b24a:	6033      	str	r3, [r6, #0]
   1b24c:	4643      	mov	r3, r8
   1b24e:	6073      	str	r3, [r6, #4]
   1b250:	687b      	ldr	r3, [r7, #4]
   1b252:	60bc      	str	r4, [r7, #8]
   1b254:	3301      	adds	r3, #1
   1b256:	607b      	str	r3, [r7, #4]
   1b258:	2b07      	cmp	r3, #7
   1b25a:	dd00      	ble.n	1b25e <_vfprintf_r+0xc1e>
   1b25c:	e389      	b.n	1b972 <_vfprintf_r+0x1332>
   1b25e:	3608      	adds	r6, #8
   1b260:	4643      	mov	r3, r8
   1b262:	43db      	mvns	r3, r3
   1b264:	4642      	mov	r2, r8
   1b266:	17db      	asrs	r3, r3, #31
   1b268:	4013      	ands	r3, r2
   1b26a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b26c:	1ad3      	subs	r3, r2, r3
   1b26e:	4698      	mov	r8, r3
   1b270:	2b00      	cmp	r3, #0
   1b272:	dc00      	bgt.n	1b276 <_vfprintf_r+0xc36>
   1b274:	e0eb      	b.n	1b44e <_vfprintf_r+0xe0e>
   1b276:	2b10      	cmp	r3, #16
   1b278:	dc01      	bgt.n	1b27e <_vfprintf_r+0xc3e>
   1b27a:	f000 fcd9 	bl	1bc30 <_vfprintf_r+0x15f0>
   1b27e:	4adc      	ldr	r2, [pc, #880]	; (1b5f0 <_vfprintf_r+0xfb0>)
   1b280:	687b      	ldr	r3, [r7, #4]
   1b282:	4691      	mov	r9, r2
   1b284:	2210      	movs	r2, #16
   1b286:	464d      	mov	r5, r9
   1b288:	4692      	mov	sl, r2
   1b28a:	0022      	movs	r2, r4
   1b28c:	4644      	mov	r4, r8
   1b28e:	46d8      	mov	r8, fp
   1b290:	e004      	b.n	1b29c <_vfprintf_r+0xc5c>
   1b292:	3608      	adds	r6, #8
   1b294:	3c10      	subs	r4, #16
   1b296:	2c10      	cmp	r4, #16
   1b298:	dc00      	bgt.n	1b29c <_vfprintf_r+0xc5c>
   1b29a:	e0bf      	b.n	1b41c <_vfprintf_r+0xddc>
   1b29c:	4651      	mov	r1, sl
   1b29e:	3210      	adds	r2, #16
   1b2a0:	3301      	adds	r3, #1
   1b2a2:	6035      	str	r5, [r6, #0]
   1b2a4:	6071      	str	r1, [r6, #4]
   1b2a6:	60ba      	str	r2, [r7, #8]
   1b2a8:	607b      	str	r3, [r7, #4]
   1b2aa:	2b07      	cmp	r3, #7
   1b2ac:	ddf1      	ble.n	1b292 <_vfprintf_r+0xc52>
   1b2ae:	003a      	movs	r2, r7
   1b2b0:	4641      	mov	r1, r8
   1b2b2:	9806      	ldr	r0, [sp, #24]
   1b2b4:	f003 f904 	bl	1e4c0 <__sprint_r>
   1b2b8:	2800      	cmp	r0, #0
   1b2ba:	d000      	beq.n	1b2be <_vfprintf_r+0xc7e>
   1b2bc:	e3b6      	b.n	1ba2c <_vfprintf_r+0x13ec>
   1b2be:	68ba      	ldr	r2, [r7, #8]
   1b2c0:	687b      	ldr	r3, [r7, #4]
   1b2c2:	ae32      	add	r6, sp, #200	; 0xc8
   1b2c4:	e7e6      	b.n	1b294 <_vfprintf_r+0xc54>
   1b2c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b2c8:	2b00      	cmp	r3, #0
   1b2ca:	d100      	bne.n	1b2ce <_vfprintf_r+0xc8e>
   1b2cc:	e092      	b.n	1b3f4 <_vfprintf_r+0xdb4>
   1b2ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1b2d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1b2d2:	ab32      	add	r3, sp, #200	; 0xc8
   1b2d4:	46b1      	mov	r9, r6
   1b2d6:	001e      	movs	r6, r3
   1b2d8:	0020      	movs	r0, r4
   1b2da:	0029      	movs	r1, r5
   1b2dc:	220a      	movs	r2, #10
   1b2de:	2300      	movs	r3, #0
   1b2e0:	f7fb fb58 	bl	16994 <__aeabi_uldivmod>
   1b2e4:	3e01      	subs	r6, #1
   1b2e6:	3230      	adds	r2, #48	; 0x30
   1b2e8:	7032      	strb	r2, [r6, #0]
   1b2ea:	2300      	movs	r3, #0
   1b2ec:	0020      	movs	r0, r4
   1b2ee:	0029      	movs	r1, r5
   1b2f0:	220a      	movs	r2, #10
   1b2f2:	f7fb fb4f 	bl	16994 <__aeabi_uldivmod>
   1b2f6:	0003      	movs	r3, r0
   1b2f8:	0004      	movs	r4, r0
   1b2fa:	000d      	movs	r5, r1
   1b2fc:	430b      	orrs	r3, r1
   1b2fe:	d1eb      	bne.n	1b2d8 <_vfprintf_r+0xc98>
   1b300:	0032      	movs	r2, r6
   1b302:	ab32      	add	r3, sp, #200	; 0xc8
   1b304:	1a9b      	subs	r3, r3, r2
   1b306:	9611      	str	r6, [sp, #68]	; 0x44
   1b308:	940c      	str	r4, [sp, #48]	; 0x30
   1b30a:	950d      	str	r5, [sp, #52]	; 0x34
   1b30c:	464e      	mov	r6, r9
   1b30e:	930e      	str	r3, [sp, #56]	; 0x38
   1b310:	f7ff fb03 	bl	1a91a <_vfprintf_r+0x2da>
   1b314:	2300      	movs	r3, #0
   1b316:	930e      	str	r3, [sp, #56]	; 0x38
   1b318:	ab32      	add	r3, sp, #200	; 0xc8
   1b31a:	9311      	str	r3, [sp, #68]	; 0x44
   1b31c:	f7ff fafd 	bl	1a91a <_vfprintf_r+0x2da>
   1b320:	003a      	movs	r2, r7
   1b322:	4659      	mov	r1, fp
   1b324:	9806      	ldr	r0, [sp, #24]
   1b326:	f003 f8cb 	bl	1e4c0 <__sprint_r>
   1b32a:	2800      	cmp	r0, #0
   1b32c:	d000      	beq.n	1b330 <_vfprintf_r+0xcf0>
   1b32e:	e717      	b.n	1b160 <_vfprintf_r+0xb20>
   1b330:	ab16      	add	r3, sp, #88	; 0x58
   1b332:	7fdb      	ldrb	r3, [r3, #31]
   1b334:	68bc      	ldr	r4, [r7, #8]
   1b336:	4698      	mov	r8, r3
   1b338:	ae32      	add	r6, sp, #200	; 0xc8
   1b33a:	e513      	b.n	1ad64 <_vfprintf_r+0x724>
   1b33c:	46b1      	mov	r9, r6
   1b33e:	e697      	b.n	1b070 <_vfprintf_r+0xa30>
   1b340:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b342:	1e5d      	subs	r5, r3, #1
   1b344:	2d00      	cmp	r5, #0
   1b346:	dc00      	bgt.n	1b34a <_vfprintf_r+0xd0a>
   1b348:	e616      	b.n	1af78 <_vfprintf_r+0x938>
   1b34a:	4ba9      	ldr	r3, [pc, #676]	; (1b5f0 <_vfprintf_r+0xfb0>)
   1b34c:	4699      	mov	r9, r3
   1b34e:	2d10      	cmp	r5, #16
   1b350:	dc00      	bgt.n	1b354 <_vfprintf_r+0xd14>
   1b352:	e10a      	b.n	1b56a <_vfprintf_r+0xf2a>
   1b354:	2310      	movs	r3, #16
   1b356:	0022      	movs	r2, r4
   1b358:	469a      	mov	sl, r3
   1b35a:	465c      	mov	r4, fp
   1b35c:	4643      	mov	r3, r8
   1b35e:	e004      	b.n	1b36a <_vfprintf_r+0xd2a>
   1b360:	3608      	adds	r6, #8
   1b362:	3d10      	subs	r5, #16
   1b364:	2d10      	cmp	r5, #16
   1b366:	dc00      	bgt.n	1b36a <_vfprintf_r+0xd2a>
   1b368:	e0fc      	b.n	1b564 <_vfprintf_r+0xf24>
   1b36a:	4649      	mov	r1, r9
   1b36c:	6031      	str	r1, [r6, #0]
   1b36e:	4651      	mov	r1, sl
   1b370:	3210      	adds	r2, #16
   1b372:	3301      	adds	r3, #1
   1b374:	6071      	str	r1, [r6, #4]
   1b376:	60ba      	str	r2, [r7, #8]
   1b378:	607b      	str	r3, [r7, #4]
   1b37a:	2b07      	cmp	r3, #7
   1b37c:	ddf0      	ble.n	1b360 <_vfprintf_r+0xd20>
   1b37e:	003a      	movs	r2, r7
   1b380:	0021      	movs	r1, r4
   1b382:	9806      	ldr	r0, [sp, #24]
   1b384:	f003 f89c 	bl	1e4c0 <__sprint_r>
   1b388:	2800      	cmp	r0, #0
   1b38a:	d000      	beq.n	1b38e <_vfprintf_r+0xd4e>
   1b38c:	e6c1      	b.n	1b112 <_vfprintf_r+0xad2>
   1b38e:	68ba      	ldr	r2, [r7, #8]
   1b390:	687b      	ldr	r3, [r7, #4]
   1b392:	ae32      	add	r6, sp, #200	; 0xc8
   1b394:	e7e5      	b.n	1b362 <_vfprintf_r+0xd22>
   1b396:	990c      	ldr	r1, [sp, #48]	; 0x30
   1b398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1b39a:	0008      	movs	r0, r1
   1b39c:	4310      	orrs	r0, r2
   1b39e:	2302      	movs	r3, #2
   1b3a0:	0002      	movs	r2, r0
   1b3a2:	f7ff fa93 	bl	1a8cc <_vfprintf_r+0x28c>
   1b3a6:	46a3      	mov	fp, r4
   1b3a8:	0014      	movs	r4, r2
   1b3aa:	464a      	mov	r2, r9
   1b3ac:	1964      	adds	r4, r4, r5
   1b3ae:	3301      	adds	r3, #1
   1b3b0:	6032      	str	r2, [r6, #0]
   1b3b2:	6075      	str	r5, [r6, #4]
   1b3b4:	60bc      	str	r4, [r7, #8]
   1b3b6:	607b      	str	r3, [r7, #4]
   1b3b8:	2b07      	cmp	r3, #7
   1b3ba:	dc00      	bgt.n	1b3be <_vfprintf_r+0xd7e>
   1b3bc:	e542      	b.n	1ae44 <_vfprintf_r+0x804>
   1b3be:	e5e8      	b.n	1af92 <_vfprintf_r+0x952>
   1b3c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b3c2:	681a      	ldr	r2, [r3, #0]
   1b3c4:	f7ff fa68 	bl	1a898 <_vfprintf_r+0x258>
   1b3c8:	6813      	ldr	r3, [r2, #0]
   1b3ca:	9308      	str	r3, [sp, #32]
   1b3cc:	f7ff fb57 	bl	1aa7e <_vfprintf_r+0x43e>
   1b3d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b3d2:	681a      	ldr	r2, [r3, #0]
   1b3d4:	e412      	b.n	1abfc <_vfprintf_r+0x5bc>
   1b3d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b3d8:	681a      	ldr	r2, [r3, #0]
   1b3da:	e426      	b.n	1ac2a <_vfprintf_r+0x5ea>
   1b3dc:	2b30      	cmp	r3, #48	; 0x30
   1b3de:	d100      	bne.n	1b3e2 <_vfprintf_r+0xda2>
   1b3e0:	e23c      	b.n	1b85c <_vfprintf_r+0x121c>
   1b3e2:	2330      	movs	r3, #48	; 0x30
   1b3e4:	3a02      	subs	r2, #2
   1b3e6:	7013      	strb	r3, [r2, #0]
   1b3e8:	ab32      	add	r3, sp, #200	; 0xc8
   1b3ea:	1a9b      	subs	r3, r3, r2
   1b3ec:	930e      	str	r3, [sp, #56]	; 0x38
   1b3ee:	9211      	str	r2, [sp, #68]	; 0x44
   1b3f0:	f7ff fa93 	bl	1a91a <_vfprintf_r+0x2da>
   1b3f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b3f6:	2b09      	cmp	r3, #9
   1b3f8:	d900      	bls.n	1b3fc <_vfprintf_r+0xdbc>
   1b3fa:	e768      	b.n	1b2ce <_vfprintf_r+0xc8e>
   1b3fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1b3fe:	2227      	movs	r2, #39	; 0x27
   1b400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b402:	a928      	add	r1, sp, #160	; 0xa0
   1b404:	3330      	adds	r3, #48	; 0x30
   1b406:	548b      	strb	r3, [r1, r2]
   1b408:	2301      	movs	r3, #1
   1b40a:	aa16      	add	r2, sp, #88	; 0x58
   1b40c:	4694      	mov	ip, r2
   1b40e:	930e      	str	r3, [sp, #56]	; 0x38
   1b410:	336e      	adds	r3, #110	; 0x6e
   1b412:	4463      	add	r3, ip
   1b414:	9409      	str	r4, [sp, #36]	; 0x24
   1b416:	9311      	str	r3, [sp, #68]	; 0x44
   1b418:	f7ff fa7f 	bl	1a91a <_vfprintf_r+0x2da>
   1b41c:	46c3      	mov	fp, r8
   1b41e:	46a9      	mov	r9, r5
   1b420:	46a0      	mov	r8, r4
   1b422:	0014      	movs	r4, r2
   1b424:	464a      	mov	r2, r9
   1b426:	6032      	str	r2, [r6, #0]
   1b428:	4642      	mov	r2, r8
   1b42a:	4444      	add	r4, r8
   1b42c:	3301      	adds	r3, #1
   1b42e:	6072      	str	r2, [r6, #4]
   1b430:	60bc      	str	r4, [r7, #8]
   1b432:	607b      	str	r3, [r7, #4]
   1b434:	2b07      	cmp	r3, #7
   1b436:	dc00      	bgt.n	1b43a <_vfprintf_r+0xdfa>
   1b438:	e18d      	b.n	1b756 <_vfprintf_r+0x1116>
   1b43a:	003a      	movs	r2, r7
   1b43c:	4659      	mov	r1, fp
   1b43e:	9806      	ldr	r0, [sp, #24]
   1b440:	f003 f83e 	bl	1e4c0 <__sprint_r>
   1b444:	2800      	cmp	r0, #0
   1b446:	d000      	beq.n	1b44a <_vfprintf_r+0xe0a>
   1b448:	e68a      	b.n	1b160 <_vfprintf_r+0xb20>
   1b44a:	68bc      	ldr	r4, [r7, #8]
   1b44c:	ae32      	add	r6, sp, #200	; 0xc8
   1b44e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b450:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b452:	4293      	cmp	r3, r2
   1b454:	db00      	blt.n	1b458 <_vfprintf_r+0xe18>
   1b456:	e179      	b.n	1b74c <_vfprintf_r+0x110c>
   1b458:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1b45a:	6032      	str	r2, [r6, #0]
   1b45c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b45e:	4694      	mov	ip, r2
   1b460:	6072      	str	r2, [r6, #4]
   1b462:	687a      	ldr	r2, [r7, #4]
   1b464:	4464      	add	r4, ip
   1b466:	3201      	adds	r2, #1
   1b468:	60bc      	str	r4, [r7, #8]
   1b46a:	607a      	str	r2, [r7, #4]
   1b46c:	2a07      	cmp	r2, #7
   1b46e:	dd00      	ble.n	1b472 <_vfprintf_r+0xe32>
   1b470:	e176      	b.n	1b760 <_vfprintf_r+0x1120>
   1b472:	3608      	adds	r6, #8
   1b474:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1b476:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b478:	1ad3      	subs	r3, r2, r3
   1b47a:	1a52      	subs	r2, r2, r1
   1b47c:	4690      	mov	r8, r2
   1b47e:	429a      	cmp	r2, r3
   1b480:	dd00      	ble.n	1b484 <_vfprintf_r+0xe44>
   1b482:	4698      	mov	r8, r3
   1b484:	4642      	mov	r2, r8
   1b486:	2a00      	cmp	r2, #0
   1b488:	dd0f      	ble.n	1b4aa <_vfprintf_r+0xe6a>
   1b48a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b48c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b48e:	468c      	mov	ip, r1
   1b490:	4462      	add	r2, ip
   1b492:	6032      	str	r2, [r6, #0]
   1b494:	4642      	mov	r2, r8
   1b496:	6072      	str	r2, [r6, #4]
   1b498:	687a      	ldr	r2, [r7, #4]
   1b49a:	4444      	add	r4, r8
   1b49c:	3201      	adds	r2, #1
   1b49e:	60bc      	str	r4, [r7, #8]
   1b4a0:	607a      	str	r2, [r7, #4]
   1b4a2:	2a07      	cmp	r2, #7
   1b4a4:	dd00      	ble.n	1b4a8 <_vfprintf_r+0xe68>
   1b4a6:	e289      	b.n	1b9bc <_vfprintf_r+0x137c>
   1b4a8:	3608      	adds	r6, #8
   1b4aa:	4642      	mov	r2, r8
   1b4ac:	43d5      	mvns	r5, r2
   1b4ae:	17ed      	asrs	r5, r5, #31
   1b4b0:	4015      	ands	r5, r2
   1b4b2:	1b5d      	subs	r5, r3, r5
   1b4b4:	2d00      	cmp	r5, #0
   1b4b6:	dc00      	bgt.n	1b4ba <_vfprintf_r+0xe7a>
   1b4b8:	e4c5      	b.n	1ae46 <_vfprintf_r+0x806>
   1b4ba:	4a4d      	ldr	r2, [pc, #308]	; (1b5f0 <_vfprintf_r+0xfb0>)
   1b4bc:	687b      	ldr	r3, [r7, #4]
   1b4be:	4691      	mov	r9, r2
   1b4c0:	2d10      	cmp	r5, #16
   1b4c2:	dc00      	bgt.n	1b4c6 <_vfprintf_r+0xe86>
   1b4c4:	e771      	b.n	1b3aa <_vfprintf_r+0xd6a>
   1b4c6:	2210      	movs	r2, #16
   1b4c8:	4690      	mov	r8, r2
   1b4ca:	0022      	movs	r2, r4
   1b4cc:	465c      	mov	r4, fp
   1b4ce:	e004      	b.n	1b4da <_vfprintf_r+0xe9a>
   1b4d0:	3608      	adds	r6, #8
   1b4d2:	3d10      	subs	r5, #16
   1b4d4:	2d10      	cmp	r5, #16
   1b4d6:	dc00      	bgt.n	1b4da <_vfprintf_r+0xe9a>
   1b4d8:	e765      	b.n	1b3a6 <_vfprintf_r+0xd66>
   1b4da:	4649      	mov	r1, r9
   1b4dc:	6031      	str	r1, [r6, #0]
   1b4de:	4641      	mov	r1, r8
   1b4e0:	3210      	adds	r2, #16
   1b4e2:	3301      	adds	r3, #1
   1b4e4:	6071      	str	r1, [r6, #4]
   1b4e6:	60ba      	str	r2, [r7, #8]
   1b4e8:	607b      	str	r3, [r7, #4]
   1b4ea:	2b07      	cmp	r3, #7
   1b4ec:	ddf0      	ble.n	1b4d0 <_vfprintf_r+0xe90>
   1b4ee:	003a      	movs	r2, r7
   1b4f0:	0021      	movs	r1, r4
   1b4f2:	9806      	ldr	r0, [sp, #24]
   1b4f4:	f002 ffe4 	bl	1e4c0 <__sprint_r>
   1b4f8:	2800      	cmp	r0, #0
   1b4fa:	d000      	beq.n	1b4fe <_vfprintf_r+0xebe>
   1b4fc:	e609      	b.n	1b112 <_vfprintf_r+0xad2>
   1b4fe:	68ba      	ldr	r2, [r7, #8]
   1b500:	687b      	ldr	r3, [r7, #4]
   1b502:	ae32      	add	r6, sp, #200	; 0xc8
   1b504:	e7e5      	b.n	1b4d2 <_vfprintf_r+0xe92>
   1b506:	003a      	movs	r2, r7
   1b508:	4659      	mov	r1, fp
   1b50a:	9806      	ldr	r0, [sp, #24]
   1b50c:	f002 ffd8 	bl	1e4c0 <__sprint_r>
   1b510:	2800      	cmp	r0, #0
   1b512:	d000      	beq.n	1b516 <_vfprintf_r+0xed6>
   1b514:	e624      	b.n	1b160 <_vfprintf_r+0xb20>
   1b516:	68bc      	ldr	r4, [r7, #8]
   1b518:	687b      	ldr	r3, [r7, #4]
   1b51a:	ae32      	add	r6, sp, #200	; 0xc8
   1b51c:	e504      	b.n	1af28 <_vfprintf_r+0x8e8>
   1b51e:	2307      	movs	r3, #7
   1b520:	3207      	adds	r2, #7
   1b522:	439a      	bics	r2, r3
   1b524:	3301      	adds	r3, #1
   1b526:	469c      	mov	ip, r3
   1b528:	4494      	add	ip, r2
   1b52a:	4663      	mov	r3, ip
   1b52c:	930f      	str	r3, [sp, #60]	; 0x3c
   1b52e:	6853      	ldr	r3, [r2, #4]
   1b530:	6812      	ldr	r2, [r2, #0]
   1b532:	930d      	str	r3, [sp, #52]	; 0x34
   1b534:	920c      	str	r2, [sp, #48]	; 0x30
   1b536:	f7ff faa7 	bl	1aa88 <_vfprintf_r+0x448>
   1b53a:	2207      	movs	r2, #7
   1b53c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b53e:	3307      	adds	r3, #7
   1b540:	4393      	bics	r3, r2
   1b542:	3201      	adds	r2, #1
   1b544:	4694      	mov	ip, r2
   1b546:	449c      	add	ip, r3
   1b548:	4662      	mov	r2, ip
   1b54a:	920f      	str	r2, [sp, #60]	; 0x3c
   1b54c:	681a      	ldr	r2, [r3, #0]
   1b54e:	685b      	ldr	r3, [r3, #4]
   1b550:	0011      	movs	r1, r2
   1b552:	001a      	movs	r2, r3
   1b554:	0008      	movs	r0, r1
   1b556:	4310      	orrs	r0, r2
   1b558:	910c      	str	r1, [sp, #48]	; 0x30
   1b55a:	920d      	str	r2, [sp, #52]	; 0x34
   1b55c:	2300      	movs	r3, #0
   1b55e:	0002      	movs	r2, r0
   1b560:	f7ff f9b4 	bl	1a8cc <_vfprintf_r+0x28c>
   1b564:	46a3      	mov	fp, r4
   1b566:	4698      	mov	r8, r3
   1b568:	0014      	movs	r4, r2
   1b56a:	464b      	mov	r3, r9
   1b56c:	6075      	str	r5, [r6, #4]
   1b56e:	6033      	str	r3, [r6, #0]
   1b570:	1964      	adds	r4, r4, r5
   1b572:	e4f7      	b.n	1af64 <_vfprintf_r+0x924>
   1b574:	003a      	movs	r2, r7
   1b576:	4659      	mov	r1, fp
   1b578:	9806      	ldr	r0, [sp, #24]
   1b57a:	f002 ffa1 	bl	1e4c0 <__sprint_r>
   1b57e:	2800      	cmp	r0, #0
   1b580:	d000      	beq.n	1b584 <_vfprintf_r+0xf44>
   1b582:	e5ed      	b.n	1b160 <_vfprintf_r+0xb20>
   1b584:	687b      	ldr	r3, [r7, #4]
   1b586:	68bc      	ldr	r4, [r7, #8]
   1b588:	4698      	mov	r8, r3
   1b58a:	ae32      	add	r6, sp, #200	; 0xc8
   1b58c:	e4da      	b.n	1af44 <_vfprintf_r+0x904>
   1b58e:	2207      	movs	r2, #7
   1b590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b592:	3307      	adds	r3, #7
   1b594:	4393      	bics	r3, r2
   1b596:	3201      	adds	r2, #1
   1b598:	4694      	mov	ip, r2
   1b59a:	449c      	add	ip, r3
   1b59c:	4662      	mov	r2, ip
   1b59e:	920f      	str	r2, [sp, #60]	; 0x3c
   1b5a0:	681a      	ldr	r2, [r3, #0]
   1b5a2:	685b      	ldr	r3, [r3, #4]
   1b5a4:	0011      	movs	r1, r2
   1b5a6:	001a      	movs	r2, r3
   1b5a8:	0008      	movs	r0, r1
   1b5aa:	4310      	orrs	r0, r2
   1b5ac:	910c      	str	r1, [sp, #48]	; 0x30
   1b5ae:	920d      	str	r2, [sp, #52]	; 0x34
   1b5b0:	2301      	movs	r3, #1
   1b5b2:	0002      	movs	r2, r0
   1b5b4:	f7ff f98a 	bl	1a8cc <_vfprintf_r+0x28c>
   1b5b8:	2207      	movs	r2, #7
   1b5ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b5bc:	3307      	adds	r3, #7
   1b5be:	4393      	bics	r3, r2
   1b5c0:	3201      	adds	r2, #1
   1b5c2:	4694      	mov	ip, r2
   1b5c4:	449c      	add	ip, r3
   1b5c6:	4662      	mov	r2, ip
   1b5c8:	920f      	str	r2, [sp, #60]	; 0x3c
   1b5ca:	681a      	ldr	r2, [r3, #0]
   1b5cc:	685b      	ldr	r3, [r3, #4]
   1b5ce:	920c      	str	r2, [sp, #48]	; 0x30
   1b5d0:	930d      	str	r3, [sp, #52]	; 0x34
   1b5d2:	f7ff f966 	bl	1a8a2 <_vfprintf_r+0x262>
   1b5d6:	003a      	movs	r2, r7
   1b5d8:	4659      	mov	r1, fp
   1b5da:	9806      	ldr	r0, [sp, #24]
   1b5dc:	f002 ff70 	bl	1e4c0 <__sprint_r>
   1b5e0:	2800      	cmp	r0, #0
   1b5e2:	d000      	beq.n	1b5e6 <_vfprintf_r+0xfa6>
   1b5e4:	e5bc      	b.n	1b160 <_vfprintf_r+0xb20>
   1b5e6:	68bc      	ldr	r4, [r7, #8]
   1b5e8:	ae32      	add	r6, sp, #200	; 0xc8
   1b5ea:	f7ff fbe2 	bl	1adb2 <_vfprintf_r+0x772>
   1b5ee:	46c0      	nop			; (mov r8, r8)
   1b5f0:	000206e0 	.word	0x000206e0
   1b5f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   1b5f6:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b5f8:	2300      	movs	r3, #0
   1b5fa:	4242      	negs	r2, r0
   1b5fc:	418b      	sbcs	r3, r1
   1b5fe:	0011      	movs	r1, r2
   1b600:	001a      	movs	r2, r3
   1b602:	232d      	movs	r3, #45	; 0x2d
   1b604:	a816      	add	r0, sp, #88	; 0x58
   1b606:	77c3      	strb	r3, [r0, #31]
   1b608:	0008      	movs	r0, r1
   1b60a:	4310      	orrs	r0, r2
   1b60c:	910c      	str	r1, [sp, #48]	; 0x30
   1b60e:	920d      	str	r2, [sp, #52]	; 0x34
   1b610:	4698      	mov	r8, r3
   1b612:	0002      	movs	r2, r0
   1b614:	3b2c      	subs	r3, #44	; 0x2c
   1b616:	f7ff f95d 	bl	1a8d4 <_vfprintf_r+0x294>
   1b61a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1b61c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1b61e:	000a      	movs	r2, r1
   1b620:	0008      	movs	r0, r1
   1b622:	002b      	movs	r3, r5
   1b624:	0029      	movs	r1, r5
   1b626:	f003 f9d7 	bl	1e9d8 <__aeabi_dcmpun>
   1b62a:	2800      	cmp	r0, #0
   1b62c:	d000      	beq.n	1b630 <_vfprintf_r+0xff0>
   1b62e:	e2c6      	b.n	1bbbe <_vfprintf_r+0x157e>
   1b630:	4653      	mov	r3, sl
   1b632:	3301      	adds	r3, #1
   1b634:	d100      	bne.n	1b638 <_vfprintf_r+0xff8>
   1b636:	e09f      	b.n	1b778 <_vfprintf_r+0x1138>
   1b638:	2320      	movs	r3, #32
   1b63a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b63c:	439a      	bics	r2, r3
   1b63e:	920e      	str	r2, [sp, #56]	; 0x38
   1b640:	2a47      	cmp	r2, #71	; 0x47
   1b642:	d100      	bne.n	1b646 <_vfprintf_r+0x1006>
   1b644:	e1a1      	b.n	1b98a <_vfprintf_r+0x134a>
   1b646:	2380      	movs	r3, #128	; 0x80
   1b648:	005b      	lsls	r3, r3, #1
   1b64a:	4323      	orrs	r3, r4
   1b64c:	9309      	str	r3, [sp, #36]	; 0x24
   1b64e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1b650:	2b00      	cmp	r3, #0
   1b652:	da00      	bge.n	1b656 <_vfprintf_r+0x1016>
   1b654:	e1ed      	b.n	1ba32 <_vfprintf_r+0x13f2>
   1b656:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1b658:	9308      	str	r3, [sp, #32]
   1b65a:	2300      	movs	r3, #0
   1b65c:	4691      	mov	r9, r2
   1b65e:	9310      	str	r3, [sp, #64]	; 0x40
   1b660:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b662:	2b66      	cmp	r3, #102	; 0x66
   1b664:	d100      	bne.n	1b668 <_vfprintf_r+0x1028>
   1b666:	e1b8      	b.n	1b9da <_vfprintf_r+0x139a>
   1b668:	2b46      	cmp	r3, #70	; 0x46
   1b66a:	d100      	bne.n	1b66e <_vfprintf_r+0x102e>
   1b66c:	e237      	b.n	1bade <_vfprintf_r+0x149e>
   1b66e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b670:	9806      	ldr	r0, [sp, #24]
   1b672:	3a45      	subs	r2, #69	; 0x45
   1b674:	0013      	movs	r3, r2
   1b676:	4259      	negs	r1, r3
   1b678:	4159      	adcs	r1, r3
   1b67a:	ab20      	add	r3, sp, #128	; 0x80
   1b67c:	000d      	movs	r5, r1
   1b67e:	9303      	str	r3, [sp, #12]
   1b680:	ab1f      	add	r3, sp, #124	; 0x7c
   1b682:	9302      	str	r3, [sp, #8]
   1b684:	2302      	movs	r3, #2
   1b686:	aa23      	add	r2, sp, #140	; 0x8c
   1b688:	4455      	add	r5, sl
   1b68a:	921b      	str	r2, [sp, #108]	; 0x6c
   1b68c:	9204      	str	r2, [sp, #16]
   1b68e:	9300      	str	r3, [sp, #0]
   1b690:	9501      	str	r5, [sp, #4]
   1b692:	9b08      	ldr	r3, [sp, #32]
   1b694:	464a      	mov	r2, r9
   1b696:	f000 fcb9 	bl	1c00c <_dtoa_r>
   1b69a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b69c:	9011      	str	r0, [sp, #68]	; 0x44
   1b69e:	2b67      	cmp	r3, #103	; 0x67
   1b6a0:	d000      	beq.n	1b6a4 <_vfprintf_r+0x1064>
   1b6a2:	e20b      	b.n	1babc <_vfprintf_r+0x147c>
   1b6a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b6a6:	4698      	mov	r8, r3
   1b6a8:	44a8      	add	r8, r5
   1b6aa:	07e3      	lsls	r3, r4, #31
   1b6ac:	d400      	bmi.n	1b6b0 <_vfprintf_r+0x1070>
   1b6ae:	e277      	b.n	1bba0 <_vfprintf_r+0x1560>
   1b6b0:	2300      	movs	r3, #0
   1b6b2:	2200      	movs	r2, #0
   1b6b4:	4648      	mov	r0, r9
   1b6b6:	9908      	ldr	r1, [sp, #32]
   1b6b8:	f7fb f904 	bl	168c4 <__aeabi_dcmpeq>
   1b6bc:	4643      	mov	r3, r8
   1b6be:	2800      	cmp	r0, #0
   1b6c0:	d10a      	bne.n	1b6d8 <_vfprintf_r+0x1098>
   1b6c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b6c4:	4543      	cmp	r3, r8
   1b6c6:	d207      	bcs.n	1b6d8 <_vfprintf_r+0x1098>
   1b6c8:	2130      	movs	r1, #48	; 0x30
   1b6ca:	4640      	mov	r0, r8
   1b6cc:	1c5a      	adds	r2, r3, #1
   1b6ce:	9223      	str	r2, [sp, #140]	; 0x8c
   1b6d0:	7019      	strb	r1, [r3, #0]
   1b6d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1b6d4:	4298      	cmp	r0, r3
   1b6d6:	d8f9      	bhi.n	1b6cc <_vfprintf_r+0x108c>
   1b6d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b6da:	1a9b      	subs	r3, r3, r2
   1b6dc:	9314      	str	r3, [sp, #80]	; 0x50
   1b6de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b6e0:	2b47      	cmp	r3, #71	; 0x47
   1b6e2:	d100      	bne.n	1b6e6 <_vfprintf_r+0x10a6>
   1b6e4:	e0d0      	b.n	1b888 <_vfprintf_r+0x1248>
   1b6e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b6e8:	2b65      	cmp	r3, #101	; 0x65
   1b6ea:	dc00      	bgt.n	1b6ee <_vfprintf_r+0x10ae>
   1b6ec:	e2d5      	b.n	1bc9a <_vfprintf_r+0x165a>
   1b6ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b6f0:	2b66      	cmp	r3, #102	; 0x66
   1b6f2:	d100      	bne.n	1b6f6 <_vfprintf_r+0x10b6>
   1b6f4:	e1c6      	b.n	1ba84 <_vfprintf_r+0x1444>
   1b6f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b6f8:	9313      	str	r3, [sp, #76]	; 0x4c
   1b6fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b6fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b6fe:	0019      	movs	r1, r3
   1b700:	4291      	cmp	r1, r2
   1b702:	dd00      	ble.n	1b706 <_vfprintf_r+0x10c6>
   1b704:	e1a0      	b.n	1ba48 <_vfprintf_r+0x1408>
   1b706:	07e3      	lsls	r3, r4, #31
   1b708:	d500      	bpl.n	1b70c <_vfprintf_r+0x10cc>
   1b70a:	e242      	b.n	1bb92 <_vfprintf_r+0x1552>
   1b70c:	43d3      	mvns	r3, r2
   1b70e:	17db      	asrs	r3, r3, #31
   1b710:	0011      	movs	r1, r2
   1b712:	401a      	ands	r2, r3
   1b714:	2367      	movs	r3, #103	; 0x67
   1b716:	9208      	str	r2, [sp, #32]
   1b718:	910e      	str	r1, [sp, #56]	; 0x38
   1b71a:	9312      	str	r3, [sp, #72]	; 0x48
   1b71c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b71e:	2b00      	cmp	r3, #0
   1b720:	d000      	beq.n	1b724 <_vfprintf_r+0x10e4>
   1b722:	e0a9      	b.n	1b878 <_vfprintf_r+0x1238>
   1b724:	ab16      	add	r3, sp, #88	; 0x58
   1b726:	7fdb      	ldrb	r3, [r3, #31]
   1b728:	4698      	mov	r8, r3
   1b72a:	2300      	movs	r3, #0
   1b72c:	469a      	mov	sl, r3
   1b72e:	f7ff f8fc 	bl	1a92a <_vfprintf_r+0x2ea>
   1b732:	46cb      	mov	fp, r9
   1b734:	46a1      	mov	r9, r4
   1b736:	0014      	movs	r4, r2
   1b738:	e637      	b.n	1b3aa <_vfprintf_r+0xd6a>
   1b73a:	464b      	mov	r3, r9
   1b73c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1b73e:	f002 f86f 	bl	1d820 <__retarget_lock_release_recursive>
   1b742:	2301      	movs	r3, #1
   1b744:	425b      	negs	r3, r3
   1b746:	930a      	str	r3, [sp, #40]	; 0x28
   1b748:	f7ff f82b 	bl	1a7a2 <_vfprintf_r+0x162>
   1b74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b74e:	07d2      	lsls	r2, r2, #31
   1b750:	d400      	bmi.n	1b754 <_vfprintf_r+0x1114>
   1b752:	e68f      	b.n	1b474 <_vfprintf_r+0xe34>
   1b754:	e680      	b.n	1b458 <_vfprintf_r+0xe18>
   1b756:	3608      	adds	r6, #8
   1b758:	e679      	b.n	1b44e <_vfprintf_r+0xe0e>
   1b75a:	68bc      	ldr	r4, [r7, #8]
   1b75c:	f7ff fb73 	bl	1ae46 <_vfprintf_r+0x806>
   1b760:	003a      	movs	r2, r7
   1b762:	4659      	mov	r1, fp
   1b764:	9806      	ldr	r0, [sp, #24]
   1b766:	f002 feab 	bl	1e4c0 <__sprint_r>
   1b76a:	2800      	cmp	r0, #0
   1b76c:	d000      	beq.n	1b770 <_vfprintf_r+0x1130>
   1b76e:	e4f7      	b.n	1b160 <_vfprintf_r+0xb20>
   1b770:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b772:	68bc      	ldr	r4, [r7, #8]
   1b774:	ae32      	add	r6, sp, #200	; 0xc8
   1b776:	e67d      	b.n	1b474 <_vfprintf_r+0xe34>
   1b778:	2320      	movs	r3, #32
   1b77a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1b77c:	439a      	bics	r2, r3
   1b77e:	3b1a      	subs	r3, #26
   1b780:	920e      	str	r2, [sp, #56]	; 0x38
   1b782:	469a      	mov	sl, r3
   1b784:	e75f      	b.n	1b646 <_vfprintf_r+0x1006>
   1b786:	232d      	movs	r3, #45	; 0x2d
   1b788:	aa16      	add	r2, sp, #88	; 0x58
   1b78a:	77d3      	strb	r3, [r2, #31]
   1b78c:	4698      	mov	r8, r3
   1b78e:	f7ff faa8 	bl	1ace2 <_vfprintf_r+0x6a2>
   1b792:	003a      	movs	r2, r7
   1b794:	4659      	mov	r1, fp
   1b796:	9806      	ldr	r0, [sp, #24]
   1b798:	f002 fe92 	bl	1e4c0 <__sprint_r>
   1b79c:	2800      	cmp	r0, #0
   1b79e:	d000      	beq.n	1b7a2 <_vfprintf_r+0x1162>
   1b7a0:	e4de      	b.n	1b160 <_vfprintf_r+0xb20>
   1b7a2:	ae32      	add	r6, sp, #200	; 0xc8
   1b7a4:	e419      	b.n	1afda <_vfprintf_r+0x99a>
   1b7a6:	4be3      	ldr	r3, [pc, #908]	; (1bb34 <_vfprintf_r+0x14f4>)
   1b7a8:	3401      	adds	r4, #1
   1b7aa:	6033      	str	r3, [r6, #0]
   1b7ac:	2301      	movs	r3, #1
   1b7ae:	6073      	str	r3, [r6, #4]
   1b7b0:	687b      	ldr	r3, [r7, #4]
   1b7b2:	60bc      	str	r4, [r7, #8]
   1b7b4:	3301      	adds	r3, #1
   1b7b6:	607b      	str	r3, [r7, #4]
   1b7b8:	2b07      	cmp	r3, #7
   1b7ba:	dd00      	ble.n	1b7be <_vfprintf_r+0x117e>
   1b7bc:	e155      	b.n	1ba6a <_vfprintf_r+0x142a>
   1b7be:	3608      	adds	r6, #8
   1b7c0:	2800      	cmp	r0, #0
   1b7c2:	d107      	bne.n	1b7d4 <_vfprintf_r+0x1194>
   1b7c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b7c6:	2b00      	cmp	r3, #0
   1b7c8:	d104      	bne.n	1b7d4 <_vfprintf_r+0x1194>
   1b7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b7cc:	07db      	lsls	r3, r3, #31
   1b7ce:	d401      	bmi.n	1b7d4 <_vfprintf_r+0x1194>
   1b7d0:	f7ff fb39 	bl	1ae46 <_vfprintf_r+0x806>
   1b7d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1b7d6:	6033      	str	r3, [r6, #0]
   1b7d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1b7da:	1919      	adds	r1, r3, r4
   1b7dc:	6073      	str	r3, [r6, #4]
   1b7de:	687b      	ldr	r3, [r7, #4]
   1b7e0:	60b9      	str	r1, [r7, #8]
   1b7e2:	3301      	adds	r3, #1
   1b7e4:	607b      	str	r3, [r7, #4]
   1b7e6:	2b07      	cmp	r3, #7
   1b7e8:	dd00      	ble.n	1b7ec <_vfprintf_r+0x11ac>
   1b7ea:	e1c4      	b.n	1bb76 <_vfprintf_r+0x1536>
   1b7ec:	0032      	movs	r2, r6
   1b7ee:	3208      	adds	r2, #8
   1b7f0:	2800      	cmp	r0, #0
   1b7f2:	da00      	bge.n	1b7f6 <_vfprintf_r+0x11b6>
   1b7f4:	e195      	b.n	1bb22 <_vfprintf_r+0x14e2>
   1b7f6:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b7f8:	3301      	adds	r3, #1
   1b7fa:	6010      	str	r0, [r2, #0]
   1b7fc:	9814      	ldr	r0, [sp, #80]	; 0x50
   1b7fe:	607b      	str	r3, [r7, #4]
   1b800:	1844      	adds	r4, r0, r1
   1b802:	6050      	str	r0, [r2, #4]
   1b804:	60bc      	str	r4, [r7, #8]
   1b806:	2b07      	cmp	r3, #7
   1b808:	dd01      	ble.n	1b80e <_vfprintf_r+0x11ce>
   1b80a:	f7ff fbc2 	bl	1af92 <_vfprintf_r+0x952>
   1b80e:	3208      	adds	r2, #8
   1b810:	0016      	movs	r6, r2
   1b812:	f7ff fb18 	bl	1ae46 <_vfprintf_r+0x806>
   1b816:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1b818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b81a:	680b      	ldr	r3, [r1, #0]
   1b81c:	601a      	str	r2, [r3, #0]
   1b81e:	17d2      	asrs	r2, r2, #31
   1b820:	605a      	str	r2, [r3, #4]
   1b822:	000b      	movs	r3, r1
   1b824:	3304      	adds	r3, #4
   1b826:	930f      	str	r3, [sp, #60]	; 0x3c
   1b828:	f7fe ff58 	bl	1a6dc <_vfprintf_r+0x9c>
   1b82c:	464b      	mov	r3, r9
   1b82e:	9a07      	ldr	r2, [sp, #28]
   1b830:	431c      	orrs	r4, r3
   1b832:	3201      	adds	r2, #1
   1b834:	7813      	ldrb	r3, [r2, #0]
   1b836:	9207      	str	r2, [sp, #28]
   1b838:	f7fe ff8b 	bl	1a752 <_vfprintf_r+0x112>
   1b83c:	003a      	movs	r2, r7
   1b83e:	4659      	mov	r1, fp
   1b840:	9806      	ldr	r0, [sp, #24]
   1b842:	f002 fe3d 	bl	1e4c0 <__sprint_r>
   1b846:	2800      	cmp	r0, #0
   1b848:	d000      	beq.n	1b84c <_vfprintf_r+0x120c>
   1b84a:	e489      	b.n	1b160 <_vfprintf_r+0xb20>
   1b84c:	68bc      	ldr	r4, [r7, #8]
   1b84e:	ae32      	add	r6, sp, #200	; 0xc8
   1b850:	f7ff fbdc 	bl	1b00c <_vfprintf_r+0x9cc>
   1b854:	4bb8      	ldr	r3, [pc, #736]	; (1bb38 <_vfprintf_r+0x14f8>)
   1b856:	9311      	str	r3, [sp, #68]	; 0x44
   1b858:	f7ff fa4a 	bl	1acf0 <_vfprintf_r+0x6b0>
   1b85c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1b85e:	ab32      	add	r3, sp, #200	; 0xc8
   1b860:	1a9b      	subs	r3, r3, r2
   1b862:	930e      	str	r3, [sp, #56]	; 0x38
   1b864:	f7ff f859 	bl	1a91a <_vfprintf_r+0x2da>
   1b868:	9811      	ldr	r0, [sp, #68]	; 0x44
   1b86a:	f7fe fd03 	bl	1a274 <strlen>
   1b86e:	0002      	movs	r2, r0
   1b870:	900e      	str	r0, [sp, #56]	; 0x38
   1b872:	0003      	movs	r3, r0
   1b874:	f7ff f9a1 	bl	1abba <_vfprintf_r+0x57a>
   1b878:	232d      	movs	r3, #45	; 0x2d
   1b87a:	aa16      	add	r2, sp, #88	; 0x58
   1b87c:	77d3      	strb	r3, [r2, #31]
   1b87e:	4698      	mov	r8, r3
   1b880:	2300      	movs	r3, #0
   1b882:	469a      	mov	sl, r3
   1b884:	f7ff f854 	bl	1a930 <_vfprintf_r+0x2f0>
   1b888:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b88a:	9313      	str	r3, [sp, #76]	; 0x4c
   1b88c:	1cda      	adds	r2, r3, #3
   1b88e:	db02      	blt.n	1b896 <_vfprintf_r+0x1256>
   1b890:	459a      	cmp	sl, r3
   1b892:	db00      	blt.n	1b896 <_vfprintf_r+0x1256>
   1b894:	e731      	b.n	1b6fa <_vfprintf_r+0x10ba>
   1b896:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b898:	3b02      	subs	r3, #2
   1b89a:	9312      	str	r3, [sp, #72]	; 0x48
   1b89c:	222c      	movs	r2, #44	; 0x2c
   1b89e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b8a0:	2148      	movs	r1, #72	; 0x48
   1b8a2:	1e5d      	subs	r5, r3, #1
   1b8a4:	ab16      	add	r3, sp, #88	; 0x58
   1b8a6:	189b      	adds	r3, r3, r2
   1b8a8:	466a      	mov	r2, sp
   1b8aa:	1852      	adds	r2, r2, r1
   1b8ac:	7812      	ldrb	r2, [r2, #0]
   1b8ae:	951f      	str	r5, [sp, #124]	; 0x7c
   1b8b0:	701a      	strb	r2, [r3, #0]
   1b8b2:	2d00      	cmp	r5, #0
   1b8b4:	da00      	bge.n	1b8b8 <_vfprintf_r+0x1278>
   1b8b6:	e1cb      	b.n	1bc50 <_vfprintf_r+0x1610>
   1b8b8:	212d      	movs	r1, #45	; 0x2d
   1b8ba:	232b      	movs	r3, #43	; 0x2b
   1b8bc:	aa16      	add	r2, sp, #88	; 0x58
   1b8be:	1852      	adds	r2, r2, r1
   1b8c0:	7013      	strb	r3, [r2, #0]
   1b8c2:	2d09      	cmp	r5, #9
   1b8c4:	dc00      	bgt.n	1b8c8 <_vfprintf_r+0x1288>
   1b8c6:	e16d      	b.n	1bba4 <_vfprintf_r+0x1564>
   1b8c8:	aa16      	add	r2, sp, #88	; 0x58
   1b8ca:	233b      	movs	r3, #59	; 0x3b
   1b8cc:	4694      	mov	ip, r2
   1b8ce:	4463      	add	r3, ip
   1b8d0:	469a      	mov	sl, r3
   1b8d2:	46b1      	mov	r9, r6
   1b8d4:	46a0      	mov	r8, r4
   1b8d6:	4656      	mov	r6, sl
   1b8d8:	e000      	b.n	1b8dc <_vfprintf_r+0x129c>
   1b8da:	0026      	movs	r6, r4
   1b8dc:	0028      	movs	r0, r5
   1b8de:	210a      	movs	r1, #10
   1b8e0:	f7fa ffda 	bl	16898 <__aeabi_idivmod>
   1b8e4:	1e74      	subs	r4, r6, #1
   1b8e6:	3130      	adds	r1, #48	; 0x30
   1b8e8:	7021      	strb	r1, [r4, #0]
   1b8ea:	0028      	movs	r0, r5
   1b8ec:	210a      	movs	r1, #10
   1b8ee:	f7fa feed 	bl	166cc <__divsi3>
   1b8f2:	0005      	movs	r5, r0
   1b8f4:	2809      	cmp	r0, #9
   1b8f6:	dcf0      	bgt.n	1b8da <_vfprintf_r+0x129a>
   1b8f8:	0023      	movs	r3, r4
   1b8fa:	4644      	mov	r4, r8
   1b8fc:	46b0      	mov	r8, r6
   1b8fe:	464e      	mov	r6, r9
   1b900:	4699      	mov	r9, r3
   1b902:	0003      	movs	r3, r0
   1b904:	3330      	adds	r3, #48	; 0x30
   1b906:	b2d8      	uxtb	r0, r3
   1b908:	4643      	mov	r3, r8
   1b90a:	3b02      	subs	r3, #2
   1b90c:	7018      	strb	r0, [r3, #0]
   1b90e:	459a      	cmp	sl, r3
   1b910:	d800      	bhi.n	1b914 <_vfprintf_r+0x12d4>
   1b912:	e1f6      	b.n	1bd02 <_vfprintf_r+0x16c2>
   1b914:	4642      	mov	r2, r8
   1b916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1b918:	4645      	mov	r5, r8
   1b91a:	1a99      	subs	r1, r3, r2
   1b91c:	2301      	movs	r3, #1
   1b91e:	3107      	adds	r1, #7
   1b920:	425b      	negs	r3, r3
   1b922:	e001      	b.n	1b928 <_vfprintf_r+0x12e8>
   1b924:	5ce8      	ldrb	r0, [r5, r3]
   1b926:	3301      	adds	r3, #1
   1b928:	aa21      	add	r2, sp, #132	; 0x84
   1b92a:	18d2      	adds	r2, r2, r3
   1b92c:	70d0      	strb	r0, [r2, #3]
   1b92e:	428b      	cmp	r3, r1
   1b930:	d1f8      	bne.n	1b924 <_vfprintf_r+0x12e4>
   1b932:	a916      	add	r1, sp, #88	; 0x58
   1b934:	468c      	mov	ip, r1
   1b936:	222e      	movs	r2, #46	; 0x2e
   1b938:	464b      	mov	r3, r9
   1b93a:	4462      	add	r2, ip
   1b93c:	4694      	mov	ip, r2
   1b93e:	1afb      	subs	r3, r7, r3
   1b940:	4463      	add	r3, ip
   1b942:	aa21      	add	r2, sp, #132	; 0x84
   1b944:	9914      	ldr	r1, [sp, #80]	; 0x50
   1b946:	1a9b      	subs	r3, r3, r2
   1b948:	469c      	mov	ip, r3
   1b94a:	000a      	movs	r2, r1
   1b94c:	4462      	add	r2, ip
   1b94e:	931a      	str	r3, [sp, #104]	; 0x68
   1b950:	920e      	str	r2, [sp, #56]	; 0x38
   1b952:	2901      	cmp	r1, #1
   1b954:	dc00      	bgt.n	1b958 <_vfprintf_r+0x1318>
   1b956:	e170      	b.n	1bc3a <_vfprintf_r+0x15fa>
   1b958:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1b95a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b95c:	4694      	mov	ip, r2
   1b95e:	4463      	add	r3, ip
   1b960:	001a      	movs	r2, r3
   1b962:	930e      	str	r3, [sp, #56]	; 0x38
   1b964:	43db      	mvns	r3, r3
   1b966:	17db      	asrs	r3, r3, #31
   1b968:	401a      	ands	r2, r3
   1b96a:	2300      	movs	r3, #0
   1b96c:	9208      	str	r2, [sp, #32]
   1b96e:	9313      	str	r3, [sp, #76]	; 0x4c
   1b970:	e6d4      	b.n	1b71c <_vfprintf_r+0x10dc>
   1b972:	003a      	movs	r2, r7
   1b974:	4659      	mov	r1, fp
   1b976:	9806      	ldr	r0, [sp, #24]
   1b978:	f002 fda2 	bl	1e4c0 <__sprint_r>
   1b97c:	2800      	cmp	r0, #0
   1b97e:	d001      	beq.n	1b984 <_vfprintf_r+0x1344>
   1b980:	f7ff fbee 	bl	1b160 <_vfprintf_r+0xb20>
   1b984:	68bc      	ldr	r4, [r7, #8]
   1b986:	ae32      	add	r6, sp, #200	; 0xc8
   1b988:	e46a      	b.n	1b260 <_vfprintf_r+0xc20>
   1b98a:	4653      	mov	r3, sl
   1b98c:	2b00      	cmp	r3, #0
   1b98e:	d000      	beq.n	1b992 <_vfprintf_r+0x1352>
   1b990:	e659      	b.n	1b646 <_vfprintf_r+0x1006>
   1b992:	3301      	adds	r3, #1
   1b994:	469a      	mov	sl, r3
   1b996:	e656      	b.n	1b646 <_vfprintf_r+0x1006>
   1b998:	4653      	mov	r3, sl
   1b99a:	9308      	str	r3, [sp, #32]
   1b99c:	2b06      	cmp	r3, #6
   1b99e:	d901      	bls.n	1b9a4 <_vfprintf_r+0x1364>
   1b9a0:	2306      	movs	r3, #6
   1b9a2:	9308      	str	r3, [sp, #32]
   1b9a4:	9b08      	ldr	r3, [sp, #32]
   1b9a6:	950f      	str	r5, [sp, #60]	; 0x3c
   1b9a8:	930e      	str	r3, [sp, #56]	; 0x38
   1b9aa:	2300      	movs	r3, #0
   1b9ac:	4698      	mov	r8, r3
   1b9ae:	469a      	mov	sl, r3
   1b9b0:	9313      	str	r3, [sp, #76]	; 0x4c
   1b9b2:	4b62      	ldr	r3, [pc, #392]	; (1bb3c <_vfprintf_r+0x14fc>)
   1b9b4:	9409      	str	r4, [sp, #36]	; 0x24
   1b9b6:	9311      	str	r3, [sp, #68]	; 0x44
   1b9b8:	f7fe ffbd 	bl	1a936 <_vfprintf_r+0x2f6>
   1b9bc:	003a      	movs	r2, r7
   1b9be:	4659      	mov	r1, fp
   1b9c0:	9806      	ldr	r0, [sp, #24]
   1b9c2:	f002 fd7d 	bl	1e4c0 <__sprint_r>
   1b9c6:	2800      	cmp	r0, #0
   1b9c8:	d001      	beq.n	1b9ce <_vfprintf_r+0x138e>
   1b9ca:	f7ff fbc9 	bl	1b160 <_vfprintf_r+0xb20>
   1b9ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1b9d0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1b9d2:	68bc      	ldr	r4, [r7, #8]
   1b9d4:	1a9b      	subs	r3, r3, r2
   1b9d6:	ae32      	add	r6, sp, #200	; 0xc8
   1b9d8:	e567      	b.n	1b4aa <_vfprintf_r+0xe6a>
   1b9da:	ab23      	add	r3, sp, #140	; 0x8c
   1b9dc:	931b      	str	r3, [sp, #108]	; 0x6c
   1b9de:	9304      	str	r3, [sp, #16]
   1b9e0:	ab20      	add	r3, sp, #128	; 0x80
   1b9e2:	9303      	str	r3, [sp, #12]
   1b9e4:	ab1f      	add	r3, sp, #124	; 0x7c
   1b9e6:	9302      	str	r3, [sp, #8]
   1b9e8:	4653      	mov	r3, sl
   1b9ea:	9301      	str	r3, [sp, #4]
   1b9ec:	2303      	movs	r3, #3
   1b9ee:	464a      	mov	r2, r9
   1b9f0:	9300      	str	r3, [sp, #0]
   1b9f2:	9806      	ldr	r0, [sp, #24]
   1b9f4:	9b08      	ldr	r3, [sp, #32]
   1b9f6:	f000 fb09 	bl	1c00c <_dtoa_r>
   1b9fa:	0003      	movs	r3, r0
   1b9fc:	4453      	add	r3, sl
   1b9fe:	4698      	mov	r8, r3
   1ba00:	4655      	mov	r5, sl
   1ba02:	9011      	str	r0, [sp, #68]	; 0x44
   1ba04:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ba06:	781b      	ldrb	r3, [r3, #0]
   1ba08:	2b30      	cmp	r3, #48	; 0x30
   1ba0a:	d002      	beq.n	1ba12 <_vfprintf_r+0x13d2>
   1ba0c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ba0e:	4498      	add	r8, r3
   1ba10:	e64e      	b.n	1b6b0 <_vfprintf_r+0x1070>
   1ba12:	2200      	movs	r2, #0
   1ba14:	2300      	movs	r3, #0
   1ba16:	4648      	mov	r0, r9
   1ba18:	9908      	ldr	r1, [sp, #32]
   1ba1a:	f7fa ff53 	bl	168c4 <__aeabi_dcmpeq>
   1ba1e:	2800      	cmp	r0, #0
   1ba20:	d1f4      	bne.n	1ba0c <_vfprintf_r+0x13cc>
   1ba22:	2301      	movs	r3, #1
   1ba24:	1b5b      	subs	r3, r3, r5
   1ba26:	931f      	str	r3, [sp, #124]	; 0x7c
   1ba28:	4498      	add	r8, r3
   1ba2a:	e641      	b.n	1b6b0 <_vfprintf_r+0x1070>
   1ba2c:	46c1      	mov	r9, r8
   1ba2e:	f7ff fb1f 	bl	1b070 <_vfprintf_r+0xa30>
   1ba32:	2280      	movs	r2, #128	; 0x80
   1ba34:	0612      	lsls	r2, r2, #24
   1ba36:	4694      	mov	ip, r2
   1ba38:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ba3a:	4699      	mov	r9, r3
   1ba3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ba3e:	4463      	add	r3, ip
   1ba40:	9308      	str	r3, [sp, #32]
   1ba42:	232d      	movs	r3, #45	; 0x2d
   1ba44:	9310      	str	r3, [sp, #64]	; 0x40
   1ba46:	e60b      	b.n	1b660 <_vfprintf_r+0x1020>
   1ba48:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1ba4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1ba4c:	4694      	mov	ip, r2
   1ba4e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1ba50:	4463      	add	r3, ip
   1ba52:	930e      	str	r3, [sp, #56]	; 0x38
   1ba54:	2a00      	cmp	r2, #0
   1ba56:	dc00      	bgt.n	1ba5a <_vfprintf_r+0x141a>
   1ba58:	e0e3      	b.n	1bc22 <_vfprintf_r+0x15e2>
   1ba5a:	001a      	movs	r2, r3
   1ba5c:	43db      	mvns	r3, r3
   1ba5e:	17db      	asrs	r3, r3, #31
   1ba60:	401a      	ands	r2, r3
   1ba62:	2367      	movs	r3, #103	; 0x67
   1ba64:	9208      	str	r2, [sp, #32]
   1ba66:	9312      	str	r3, [sp, #72]	; 0x48
   1ba68:	e658      	b.n	1b71c <_vfprintf_r+0x10dc>
   1ba6a:	003a      	movs	r2, r7
   1ba6c:	4659      	mov	r1, fp
   1ba6e:	9806      	ldr	r0, [sp, #24]
   1ba70:	f002 fd26 	bl	1e4c0 <__sprint_r>
   1ba74:	2800      	cmp	r0, #0
   1ba76:	d001      	beq.n	1ba7c <_vfprintf_r+0x143c>
   1ba78:	f7ff fb72 	bl	1b160 <_vfprintf_r+0xb20>
   1ba7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1ba7e:	68bc      	ldr	r4, [r7, #8]
   1ba80:	ae32      	add	r6, sp, #200	; 0xc8
   1ba82:	e69d      	b.n	1b7c0 <_vfprintf_r+0x1180>
   1ba84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1ba86:	9313      	str	r3, [sp, #76]	; 0x4c
   1ba88:	2b00      	cmp	r3, #0
   1ba8a:	dc00      	bgt.n	1ba8e <_vfprintf_r+0x144e>
   1ba8c:	e0f2      	b.n	1bc74 <_vfprintf_r+0x1634>
   1ba8e:	4652      	mov	r2, sl
   1ba90:	2a00      	cmp	r2, #0
   1ba92:	d000      	beq.n	1ba96 <_vfprintf_r+0x1456>
   1ba94:	e0a0      	b.n	1bbd8 <_vfprintf_r+0x1598>
   1ba96:	07e2      	lsls	r2, r4, #31
   1ba98:	d500      	bpl.n	1ba9c <_vfprintf_r+0x145c>
   1ba9a:	e09d      	b.n	1bbd8 <_vfprintf_r+0x1598>
   1ba9c:	9308      	str	r3, [sp, #32]
   1ba9e:	930e      	str	r3, [sp, #56]	; 0x38
   1baa0:	e63c      	b.n	1b71c <_vfprintf_r+0x10dc>
   1baa2:	ab16      	add	r3, sp, #88	; 0x58
   1baa4:	7fdb      	ldrb	r3, [r3, #31]
   1baa6:	950f      	str	r5, [sp, #60]	; 0x3c
   1baa8:	4698      	mov	r8, r3
   1baaa:	4653      	mov	r3, sl
   1baac:	9308      	str	r3, [sp, #32]
   1baae:	930e      	str	r3, [sp, #56]	; 0x38
   1bab0:	2300      	movs	r3, #0
   1bab2:	9409      	str	r4, [sp, #36]	; 0x24
   1bab4:	469a      	mov	sl, r3
   1bab6:	9313      	str	r3, [sp, #76]	; 0x4c
   1bab8:	f7fe ff37 	bl	1a92a <_vfprintf_r+0x2ea>
   1babc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1babe:	4698      	mov	r8, r3
   1bac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bac2:	44a8      	add	r8, r5
   1bac4:	2b47      	cmp	r3, #71	; 0x47
   1bac6:	d000      	beq.n	1baca <_vfprintf_r+0x148a>
   1bac8:	e5f2      	b.n	1b6b0 <_vfprintf_r+0x1070>
   1baca:	07e3      	lsls	r3, r4, #31
   1bacc:	d400      	bmi.n	1bad0 <_vfprintf_r+0x1490>
   1bace:	e0dc      	b.n	1bc8a <_vfprintf_r+0x164a>
   1bad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bad2:	4698      	mov	r8, r3
   1bad4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bad6:	44a8      	add	r8, r5
   1bad8:	2b46      	cmp	r3, #70	; 0x46
   1bada:	d093      	beq.n	1ba04 <_vfprintf_r+0x13c4>
   1badc:	e5e8      	b.n	1b6b0 <_vfprintf_r+0x1070>
   1bade:	ab23      	add	r3, sp, #140	; 0x8c
   1bae0:	931b      	str	r3, [sp, #108]	; 0x6c
   1bae2:	9304      	str	r3, [sp, #16]
   1bae4:	ab20      	add	r3, sp, #128	; 0x80
   1bae6:	9303      	str	r3, [sp, #12]
   1bae8:	ab1f      	add	r3, sp, #124	; 0x7c
   1baea:	9302      	str	r3, [sp, #8]
   1baec:	4653      	mov	r3, sl
   1baee:	9301      	str	r3, [sp, #4]
   1baf0:	2303      	movs	r3, #3
   1baf2:	464a      	mov	r2, r9
   1baf4:	9300      	str	r3, [sp, #0]
   1baf6:	9806      	ldr	r0, [sp, #24]
   1baf8:	9b08      	ldr	r3, [sp, #32]
   1bafa:	f000 fa87 	bl	1c00c <_dtoa_r>
   1bafe:	4655      	mov	r5, sl
   1bb00:	9011      	str	r0, [sp, #68]	; 0x44
   1bb02:	e7e5      	b.n	1bad0 <_vfprintf_r+0x1490>
   1bb04:	003a      	movs	r2, r7
   1bb06:	4659      	mov	r1, fp
   1bb08:	9806      	ldr	r0, [sp, #24]
   1bb0a:	f002 fcd9 	bl	1e4c0 <__sprint_r>
   1bb0e:	2800      	cmp	r0, #0
   1bb10:	d101      	bne.n	1bb16 <_vfprintf_r+0x14d6>
   1bb12:	f7ff faab 	bl	1b06c <_vfprintf_r+0xa2c>
   1bb16:	f7ff faab 	bl	1b070 <_vfprintf_r+0xa30>
   1bb1a:	4642      	mov	r2, r8
   1bb1c:	9207      	str	r2, [sp, #28]
   1bb1e:	f7fe fe1b 	bl	1a758 <_vfprintf_r+0x118>
   1bb22:	4244      	negs	r4, r0
   1bb24:	3010      	adds	r0, #16
   1bb26:	db00      	blt.n	1bb2a <_vfprintf_r+0x14ea>
   1bb28:	e0d8      	b.n	1bcdc <_vfprintf_r+0x169c>
   1bb2a:	4805      	ldr	r0, [pc, #20]	; (1bb40 <_vfprintf_r+0x1500>)
   1bb2c:	2610      	movs	r6, #16
   1bb2e:	0005      	movs	r5, r0
   1bb30:	e00c      	b.n	1bb4c <_vfprintf_r+0x150c>
   1bb32:	46c0      	nop			; (mov r8, r8)
   1bb34:	0001f940 	.word	0x0001f940
   1bb38:	00020694 	.word	0x00020694
   1bb3c:	000206c8 	.word	0x000206c8
   1bb40:	000206e0 	.word	0x000206e0
   1bb44:	3208      	adds	r2, #8
   1bb46:	3c10      	subs	r4, #16
   1bb48:	2c10      	cmp	r4, #16
   1bb4a:	dd51      	ble.n	1bbf0 <_vfprintf_r+0x15b0>
   1bb4c:	3110      	adds	r1, #16
   1bb4e:	3301      	adds	r3, #1
   1bb50:	6015      	str	r5, [r2, #0]
   1bb52:	6056      	str	r6, [r2, #4]
   1bb54:	60b9      	str	r1, [r7, #8]
   1bb56:	607b      	str	r3, [r7, #4]
   1bb58:	2b07      	cmp	r3, #7
   1bb5a:	ddf3      	ble.n	1bb44 <_vfprintf_r+0x1504>
   1bb5c:	003a      	movs	r2, r7
   1bb5e:	4659      	mov	r1, fp
   1bb60:	9806      	ldr	r0, [sp, #24]
   1bb62:	f002 fcad 	bl	1e4c0 <__sprint_r>
   1bb66:	2800      	cmp	r0, #0
   1bb68:	d001      	beq.n	1bb6e <_vfprintf_r+0x152e>
   1bb6a:	f7ff faf9 	bl	1b160 <_vfprintf_r+0xb20>
   1bb6e:	68b9      	ldr	r1, [r7, #8]
   1bb70:	687b      	ldr	r3, [r7, #4]
   1bb72:	aa32      	add	r2, sp, #200	; 0xc8
   1bb74:	e7e7      	b.n	1bb46 <_vfprintf_r+0x1506>
   1bb76:	003a      	movs	r2, r7
   1bb78:	4659      	mov	r1, fp
   1bb7a:	9806      	ldr	r0, [sp, #24]
   1bb7c:	f002 fca0 	bl	1e4c0 <__sprint_r>
   1bb80:	2800      	cmp	r0, #0
   1bb82:	d001      	beq.n	1bb88 <_vfprintf_r+0x1548>
   1bb84:	f7ff faec 	bl	1b160 <_vfprintf_r+0xb20>
   1bb88:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1bb8a:	68b9      	ldr	r1, [r7, #8]
   1bb8c:	687b      	ldr	r3, [r7, #4]
   1bb8e:	aa32      	add	r2, sp, #200	; 0xc8
   1bb90:	e62e      	b.n	1b7f0 <_vfprintf_r+0x11b0>
   1bb92:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bb94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bb96:	4694      	mov	ip, r2
   1bb98:	4463      	add	r3, ip
   1bb9a:	001a      	movs	r2, r3
   1bb9c:	930e      	str	r3, [sp, #56]	; 0x38
   1bb9e:	e75d      	b.n	1ba5c <_vfprintf_r+0x141c>
   1bba0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bba2:	e599      	b.n	1b6d8 <_vfprintf_r+0x1098>
   1bba4:	212e      	movs	r1, #46	; 0x2e
   1bba6:	2330      	movs	r3, #48	; 0x30
   1bba8:	aa16      	add	r2, sp, #88	; 0x58
   1bbaa:	1852      	adds	r2, r2, r1
   1bbac:	7013      	strb	r3, [r2, #0]
   1bbae:	002b      	movs	r3, r5
   1bbb0:	aa16      	add	r2, sp, #88	; 0x58
   1bbb2:	3101      	adds	r1, #1
   1bbb4:	3330      	adds	r3, #48	; 0x30
   1bbb6:	1852      	adds	r2, r2, r1
   1bbb8:	7013      	strb	r3, [r2, #0]
   1bbba:	ab22      	add	r3, sp, #136	; 0x88
   1bbbc:	e6c1      	b.n	1b942 <_vfprintf_r+0x1302>
   1bbbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1bbc0:	2b00      	cmp	r3, #0
   1bbc2:	db52      	blt.n	1bc6a <_vfprintf_r+0x162a>
   1bbc4:	ab16      	add	r3, sp, #88	; 0x58
   1bbc6:	7fdb      	ldrb	r3, [r3, #31]
   1bbc8:	4698      	mov	r8, r3
   1bbca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bbcc:	2b47      	cmp	r3, #71	; 0x47
   1bbce:	dc48      	bgt.n	1bc62 <_vfprintf_r+0x1622>
   1bbd0:	4b4e      	ldr	r3, [pc, #312]	; (1bd0c <_vfprintf_r+0x16cc>)
   1bbd2:	9311      	str	r3, [sp, #68]	; 0x44
   1bbd4:	f7ff f88c 	bl	1acf0 <_vfprintf_r+0x6b0>
   1bbd8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1bbda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1bbdc:	4694      	mov	ip, r2
   1bbde:	4463      	add	r3, ip
   1bbe0:	4453      	add	r3, sl
   1bbe2:	001a      	movs	r2, r3
   1bbe4:	930e      	str	r3, [sp, #56]	; 0x38
   1bbe6:	43db      	mvns	r3, r3
   1bbe8:	17db      	asrs	r3, r3, #31
   1bbea:	401a      	ands	r2, r3
   1bbec:	9208      	str	r2, [sp, #32]
   1bbee:	e595      	b.n	1b71c <_vfprintf_r+0x10dc>
   1bbf0:	46a9      	mov	r9, r5
   1bbf2:	4648      	mov	r0, r9
   1bbf4:	1909      	adds	r1, r1, r4
   1bbf6:	3301      	adds	r3, #1
   1bbf8:	6010      	str	r0, [r2, #0]
   1bbfa:	6054      	str	r4, [r2, #4]
   1bbfc:	60b9      	str	r1, [r7, #8]
   1bbfe:	3208      	adds	r2, #8
   1bc00:	607b      	str	r3, [r7, #4]
   1bc02:	2b07      	cmp	r3, #7
   1bc04:	dc00      	bgt.n	1bc08 <_vfprintf_r+0x15c8>
   1bc06:	e5f6      	b.n	1b7f6 <_vfprintf_r+0x11b6>
   1bc08:	003a      	movs	r2, r7
   1bc0a:	4659      	mov	r1, fp
   1bc0c:	9806      	ldr	r0, [sp, #24]
   1bc0e:	f002 fc57 	bl	1e4c0 <__sprint_r>
   1bc12:	2800      	cmp	r0, #0
   1bc14:	d001      	beq.n	1bc1a <_vfprintf_r+0x15da>
   1bc16:	f7ff faa3 	bl	1b160 <_vfprintf_r+0xb20>
   1bc1a:	68b9      	ldr	r1, [r7, #8]
   1bc1c:	687b      	ldr	r3, [r7, #4]
   1bc1e:	aa32      	add	r2, sp, #200	; 0xc8
   1bc20:	e5e9      	b.n	1b7f6 <_vfprintf_r+0x11b6>
   1bc22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bc24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bc26:	1a98      	subs	r0, r3, r2
   1bc28:	1c43      	adds	r3, r0, #1
   1bc2a:	001a      	movs	r2, r3
   1bc2c:	930e      	str	r3, [sp, #56]	; 0x38
   1bc2e:	e715      	b.n	1ba5c <_vfprintf_r+0x141c>
   1bc30:	4a37      	ldr	r2, [pc, #220]	; (1bd10 <_vfprintf_r+0x16d0>)
   1bc32:	687b      	ldr	r3, [r7, #4]
   1bc34:	4691      	mov	r9, r2
   1bc36:	f7ff fbf5 	bl	1b424 <_vfprintf_r+0xde4>
   1bc3a:	2301      	movs	r3, #1
   1bc3c:	4023      	ands	r3, r4
   1bc3e:	9313      	str	r3, [sp, #76]	; 0x4c
   1bc40:	d000      	beq.n	1bc44 <_vfprintf_r+0x1604>
   1bc42:	e689      	b.n	1b958 <_vfprintf_r+0x1318>
   1bc44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1bc46:	43d3      	mvns	r3, r2
   1bc48:	17db      	asrs	r3, r3, #31
   1bc4a:	401a      	ands	r2, r3
   1bc4c:	9208      	str	r2, [sp, #32]
   1bc4e:	e565      	b.n	1b71c <_vfprintf_r+0x10dc>
   1bc50:	2301      	movs	r3, #1
   1bc52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bc54:	391b      	subs	r1, #27
   1bc56:	1a9d      	subs	r5, r3, r2
   1bc58:	aa16      	add	r2, sp, #88	; 0x58
   1bc5a:	332c      	adds	r3, #44	; 0x2c
   1bc5c:	1852      	adds	r2, r2, r1
   1bc5e:	7013      	strb	r3, [r2, #0]
   1bc60:	e62f      	b.n	1b8c2 <_vfprintf_r+0x1282>
   1bc62:	4b2c      	ldr	r3, [pc, #176]	; (1bd14 <_vfprintf_r+0x16d4>)
   1bc64:	9311      	str	r3, [sp, #68]	; 0x44
   1bc66:	f7ff f843 	bl	1acf0 <_vfprintf_r+0x6b0>
   1bc6a:	232d      	movs	r3, #45	; 0x2d
   1bc6c:	aa16      	add	r2, sp, #88	; 0x58
   1bc6e:	77d3      	strb	r3, [r2, #31]
   1bc70:	4698      	mov	r8, r3
   1bc72:	e7aa      	b.n	1bbca <_vfprintf_r+0x158a>
   1bc74:	4653      	mov	r3, sl
   1bc76:	2b00      	cmp	r3, #0
   1bc78:	d101      	bne.n	1bc7e <_vfprintf_r+0x163e>
   1bc7a:	07e3      	lsls	r3, r4, #31
   1bc7c:	d503      	bpl.n	1bc86 <_vfprintf_r+0x1646>
   1bc7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bc80:	1c58      	adds	r0, r3, #1
   1bc82:	0003      	movs	r3, r0
   1bc84:	e7ac      	b.n	1bbe0 <_vfprintf_r+0x15a0>
   1bc86:	2301      	movs	r3, #1
   1bc88:	e708      	b.n	1ba9c <_vfprintf_r+0x145c>
   1bc8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1bc8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1bc8e:	1a9b      	subs	r3, r3, r2
   1bc90:	9314      	str	r3, [sp, #80]	; 0x50
   1bc92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bc94:	2b47      	cmp	r3, #71	; 0x47
   1bc96:	d100      	bne.n	1bc9a <_vfprintf_r+0x165a>
   1bc98:	e5f6      	b.n	1b888 <_vfprintf_r+0x1248>
   1bc9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1bc9c:	9313      	str	r3, [sp, #76]	; 0x4c
   1bc9e:	e5fd      	b.n	1b89c <_vfprintf_r+0x125c>
   1bca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bca2:	1d1d      	adds	r5, r3, #4
   1bca4:	681b      	ldr	r3, [r3, #0]
   1bca6:	46a8      	mov	r8, r5
   1bca8:	469a      	mov	sl, r3
   1bcaa:	2b00      	cmp	r3, #0
   1bcac:	db0a      	blt.n	1bcc4 <_vfprintf_r+0x1684>
   1bcae:	4645      	mov	r5, r8
   1bcb0:	9b07      	ldr	r3, [sp, #28]
   1bcb2:	950f      	str	r5, [sp, #60]	; 0x3c
   1bcb4:	785b      	ldrb	r3, [r3, #1]
   1bcb6:	9207      	str	r2, [sp, #28]
   1bcb8:	f7fe fd4b 	bl	1a752 <_vfprintf_r+0x112>
   1bcbc:	ab16      	add	r3, sp, #88	; 0x58
   1bcbe:	77d8      	strb	r0, [r3, #31]
   1bcc0:	f7ff f830 	bl	1ad24 <_vfprintf_r+0x6e4>
   1bcc4:	2301      	movs	r3, #1
   1bcc6:	425b      	negs	r3, r3
   1bcc8:	469a      	mov	sl, r3
   1bcca:	e7f0      	b.n	1bcae <_vfprintf_r+0x166e>
   1bccc:	ab16      	add	r3, sp, #88	; 0x58
   1bcce:	77d8      	strb	r0, [r3, #31]
   1bcd0:	f7fe ff27 	bl	1ab22 <_vfprintf_r+0x4e2>
   1bcd4:	ab16      	add	r3, sp, #88	; 0x58
   1bcd6:	77d8      	strb	r0, [r3, #31]
   1bcd8:	f7fe fdce 	bl	1a878 <_vfprintf_r+0x238>
   1bcdc:	480c      	ldr	r0, [pc, #48]	; (1bd10 <_vfprintf_r+0x16d0>)
   1bcde:	4681      	mov	r9, r0
   1bce0:	e787      	b.n	1bbf2 <_vfprintf_r+0x15b2>
   1bce2:	ab16      	add	r3, sp, #88	; 0x58
   1bce4:	77d8      	strb	r0, [r3, #31]
   1bce6:	f7ff f829 	bl	1ad3c <_vfprintf_r+0x6fc>
   1bcea:	ab16      	add	r3, sp, #88	; 0x58
   1bcec:	77d8      	strb	r0, [r3, #31]
   1bcee:	f7fe ffc3 	bl	1ac78 <_vfprintf_r+0x638>
   1bcf2:	ab16      	add	r3, sp, #88	; 0x58
   1bcf4:	77d8      	strb	r0, [r3, #31]
   1bcf6:	f7fe ffa5 	bl	1ac44 <_vfprintf_r+0x604>
   1bcfa:	ab16      	add	r3, sp, #88	; 0x58
   1bcfc:	77d8      	strb	r0, [r3, #31]
   1bcfe:	f7fe feaf 	bl	1aa60 <_vfprintf_r+0x420>
   1bd02:	aa16      	add	r2, sp, #88	; 0x58
   1bd04:	232e      	movs	r3, #46	; 0x2e
   1bd06:	4694      	mov	ip, r2
   1bd08:	4463      	add	r3, ip
   1bd0a:	e61a      	b.n	1b942 <_vfprintf_r+0x1302>
   1bd0c:	00020698 	.word	0x00020698
   1bd10:	000206e0 	.word	0x000206e0
   1bd14:	0002069c 	.word	0x0002069c

0001bd18 <__sbprintf>:
   1bd18:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd1a:	0015      	movs	r5, r2
   1bd1c:	2202      	movs	r2, #2
   1bd1e:	4c1e      	ldr	r4, [pc, #120]	; (1bd98 <__sbprintf+0x80>)
   1bd20:	001f      	movs	r7, r3
   1bd22:	898b      	ldrh	r3, [r1, #12]
   1bd24:	44a5      	add	sp, r4
   1bd26:	4393      	bics	r3, r2
   1bd28:	466a      	mov	r2, sp
   1bd2a:	8193      	strh	r3, [r2, #12]
   1bd2c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1bd2e:	0006      	movs	r6, r0
   1bd30:	9319      	str	r3, [sp, #100]	; 0x64
   1bd32:	89cb      	ldrh	r3, [r1, #14]
   1bd34:	a816      	add	r0, sp, #88	; 0x58
   1bd36:	81d3      	strh	r3, [r2, #14]
   1bd38:	69cb      	ldr	r3, [r1, #28]
   1bd3a:	000c      	movs	r4, r1
   1bd3c:	9307      	str	r3, [sp, #28]
   1bd3e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1bd40:	9309      	str	r3, [sp, #36]	; 0x24
   1bd42:	ab1a      	add	r3, sp, #104	; 0x68
   1bd44:	9300      	str	r3, [sp, #0]
   1bd46:	9304      	str	r3, [sp, #16]
   1bd48:	2380      	movs	r3, #128	; 0x80
   1bd4a:	00db      	lsls	r3, r3, #3
   1bd4c:	9302      	str	r3, [sp, #8]
   1bd4e:	9305      	str	r3, [sp, #20]
   1bd50:	2300      	movs	r3, #0
   1bd52:	9306      	str	r3, [sp, #24]
   1bd54:	f001 fd5e 	bl	1d814 <__retarget_lock_init_recursive>
   1bd58:	002a      	movs	r2, r5
   1bd5a:	003b      	movs	r3, r7
   1bd5c:	4669      	mov	r1, sp
   1bd5e:	0030      	movs	r0, r6
   1bd60:	f7fe fc6e 	bl	1a640 <_vfprintf_r>
   1bd64:	1e05      	subs	r5, r0, #0
   1bd66:	db05      	blt.n	1bd74 <__sbprintf+0x5c>
   1bd68:	4669      	mov	r1, sp
   1bd6a:	0030      	movs	r0, r6
   1bd6c:	f001 f9ba 	bl	1d0e4 <_fflush_r>
   1bd70:	2800      	cmp	r0, #0
   1bd72:	d10e      	bne.n	1bd92 <__sbprintf+0x7a>
   1bd74:	466b      	mov	r3, sp
   1bd76:	899b      	ldrh	r3, [r3, #12]
   1bd78:	065b      	lsls	r3, r3, #25
   1bd7a:	d503      	bpl.n	1bd84 <__sbprintf+0x6c>
   1bd7c:	2240      	movs	r2, #64	; 0x40
   1bd7e:	89a3      	ldrh	r3, [r4, #12]
   1bd80:	4313      	orrs	r3, r2
   1bd82:	81a3      	strh	r3, [r4, #12]
   1bd84:	9816      	ldr	r0, [sp, #88]	; 0x58
   1bd86:	f001 fd47 	bl	1d818 <__retarget_lock_close_recursive>
   1bd8a:	0028      	movs	r0, r5
   1bd8c:	4b03      	ldr	r3, [pc, #12]	; (1bd9c <__sbprintf+0x84>)
   1bd8e:	449d      	add	sp, r3
   1bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd92:	2501      	movs	r5, #1
   1bd94:	426d      	negs	r5, r5
   1bd96:	e7ed      	b.n	1bd74 <__sbprintf+0x5c>
   1bd98:	fffffb94 	.word	0xfffffb94
   1bd9c:	0000046c 	.word	0x0000046c

0001bda0 <__ascii_wctomb>:
   1bda0:	2900      	cmp	r1, #0
   1bda2:	d004      	beq.n	1bdae <__ascii_wctomb+0xe>
   1bda4:	2aff      	cmp	r2, #255	; 0xff
   1bda6:	d804      	bhi.n	1bdb2 <__ascii_wctomb+0x12>
   1bda8:	2001      	movs	r0, #1
   1bdaa:	700a      	strb	r2, [r1, #0]
   1bdac:	4770      	bx	lr
   1bdae:	2000      	movs	r0, #0
   1bdb0:	e7fc      	b.n	1bdac <__ascii_wctomb+0xc>
   1bdb2:	238a      	movs	r3, #138	; 0x8a
   1bdb4:	6003      	str	r3, [r0, #0]
   1bdb6:	2001      	movs	r0, #1
   1bdb8:	4240      	negs	r0, r0
   1bdba:	e7f7      	b.n	1bdac <__ascii_wctomb+0xc>

0001bdbc <__swsetup_r>:
   1bdbc:	4b33      	ldr	r3, [pc, #204]	; (1be8c <__swsetup_r+0xd0>)
   1bdbe:	b570      	push	{r4, r5, r6, lr}
   1bdc0:	0005      	movs	r5, r0
   1bdc2:	6818      	ldr	r0, [r3, #0]
   1bdc4:	000c      	movs	r4, r1
   1bdc6:	2800      	cmp	r0, #0
   1bdc8:	d002      	beq.n	1bdd0 <__swsetup_r+0x14>
   1bdca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1bdcc:	2b00      	cmp	r3, #0
   1bdce:	d03c      	beq.n	1be4a <__swsetup_r+0x8e>
   1bdd0:	230c      	movs	r3, #12
   1bdd2:	5ee2      	ldrsh	r2, [r4, r3]
   1bdd4:	b293      	uxth	r3, r2
   1bdd6:	0719      	lsls	r1, r3, #28
   1bdd8:	d50d      	bpl.n	1bdf6 <__swsetup_r+0x3a>
   1bdda:	6921      	ldr	r1, [r4, #16]
   1bddc:	2900      	cmp	r1, #0
   1bdde:	d015      	beq.n	1be0c <__swsetup_r+0x50>
   1bde0:	07da      	lsls	r2, r3, #31
   1bde2:	d521      	bpl.n	1be28 <__swsetup_r+0x6c>
   1bde4:	2300      	movs	r3, #0
   1bde6:	60a3      	str	r3, [r4, #8]
   1bde8:	6963      	ldr	r3, [r4, #20]
   1bdea:	2000      	movs	r0, #0
   1bdec:	425b      	negs	r3, r3
   1bdee:	61a3      	str	r3, [r4, #24]
   1bdf0:	2900      	cmp	r1, #0
   1bdf2:	d021      	beq.n	1be38 <__swsetup_r+0x7c>
   1bdf4:	bd70      	pop	{r4, r5, r6, pc}
   1bdf6:	06d9      	lsls	r1, r3, #27
   1bdf8:	d53f      	bpl.n	1be7a <__swsetup_r+0xbe>
   1bdfa:	075b      	lsls	r3, r3, #29
   1bdfc:	d428      	bmi.n	1be50 <__swsetup_r+0x94>
   1bdfe:	6921      	ldr	r1, [r4, #16]
   1be00:	2308      	movs	r3, #8
   1be02:	4313      	orrs	r3, r2
   1be04:	81a3      	strh	r3, [r4, #12]
   1be06:	b29b      	uxth	r3, r3
   1be08:	2900      	cmp	r1, #0
   1be0a:	d1e9      	bne.n	1bde0 <__swsetup_r+0x24>
   1be0c:	22a0      	movs	r2, #160	; 0xa0
   1be0e:	2080      	movs	r0, #128	; 0x80
   1be10:	0092      	lsls	r2, r2, #2
   1be12:	0080      	lsls	r0, r0, #2
   1be14:	401a      	ands	r2, r3
   1be16:	4282      	cmp	r2, r0
   1be18:	d0e2      	beq.n	1bde0 <__swsetup_r+0x24>
   1be1a:	0021      	movs	r1, r4
   1be1c:	0028      	movs	r0, r5
   1be1e:	f001 fd31 	bl	1d884 <__smakebuf_r>
   1be22:	89a3      	ldrh	r3, [r4, #12]
   1be24:	6921      	ldr	r1, [r4, #16]
   1be26:	e7db      	b.n	1bde0 <__swsetup_r+0x24>
   1be28:	2200      	movs	r2, #0
   1be2a:	079b      	lsls	r3, r3, #30
   1be2c:	d400      	bmi.n	1be30 <__swsetup_r+0x74>
   1be2e:	6962      	ldr	r2, [r4, #20]
   1be30:	60a2      	str	r2, [r4, #8]
   1be32:	2000      	movs	r0, #0
   1be34:	2900      	cmp	r1, #0
   1be36:	d1dd      	bne.n	1bdf4 <__swsetup_r+0x38>
   1be38:	220c      	movs	r2, #12
   1be3a:	5ea3      	ldrsh	r3, [r4, r2]
   1be3c:	061a      	lsls	r2, r3, #24
   1be3e:	d5d9      	bpl.n	1bdf4 <__swsetup_r+0x38>
   1be40:	2240      	movs	r2, #64	; 0x40
   1be42:	4313      	orrs	r3, r2
   1be44:	81a3      	strh	r3, [r4, #12]
   1be46:	3801      	subs	r0, #1
   1be48:	e7d4      	b.n	1bdf4 <__swsetup_r+0x38>
   1be4a:	f001 f9a5 	bl	1d198 <__sinit>
   1be4e:	e7bf      	b.n	1bdd0 <__swsetup_r+0x14>
   1be50:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1be52:	2900      	cmp	r1, #0
   1be54:	d00a      	beq.n	1be6c <__swsetup_r+0xb0>
   1be56:	0023      	movs	r3, r4
   1be58:	3340      	adds	r3, #64	; 0x40
   1be5a:	4299      	cmp	r1, r3
   1be5c:	d004      	beq.n	1be68 <__swsetup_r+0xac>
   1be5e:	0028      	movs	r0, r5
   1be60:	f001 fa44 	bl	1d2ec <_free_r>
   1be64:	230c      	movs	r3, #12
   1be66:	5ee2      	ldrsh	r2, [r4, r3]
   1be68:	2300      	movs	r3, #0
   1be6a:	6323      	str	r3, [r4, #48]	; 0x30
   1be6c:	2324      	movs	r3, #36	; 0x24
   1be6e:	439a      	bics	r2, r3
   1be70:	2300      	movs	r3, #0
   1be72:	6921      	ldr	r1, [r4, #16]
   1be74:	6063      	str	r3, [r4, #4]
   1be76:	6021      	str	r1, [r4, #0]
   1be78:	e7c2      	b.n	1be00 <__swsetup_r+0x44>
   1be7a:	2309      	movs	r3, #9
   1be7c:	602b      	str	r3, [r5, #0]
   1be7e:	2340      	movs	r3, #64	; 0x40
   1be80:	2001      	movs	r0, #1
   1be82:	431a      	orrs	r2, r3
   1be84:	81a2      	strh	r2, [r4, #12]
   1be86:	4240      	negs	r0, r0
   1be88:	e7b4      	b.n	1bdf4 <__swsetup_r+0x38>
   1be8a:	46c0      	nop			; (mov r8, r8)
   1be8c:	20000018 	.word	0x20000018

0001be90 <register_fini>:
   1be90:	4b03      	ldr	r3, [pc, #12]	; (1bea0 <register_fini+0x10>)
   1be92:	b510      	push	{r4, lr}
   1be94:	2b00      	cmp	r3, #0
   1be96:	d002      	beq.n	1be9e <register_fini+0xe>
   1be98:	4802      	ldr	r0, [pc, #8]	; (1bea4 <register_fini+0x14>)
   1be9a:	f000 f805 	bl	1bea8 <atexit>
   1be9e:	bd10      	pop	{r4, pc}
   1bea0:	00000000 	.word	0x00000000
   1bea4:	0001d219 	.word	0x0001d219

0001bea8 <atexit>:
   1bea8:	b510      	push	{r4, lr}
   1beaa:	0001      	movs	r1, r0
   1beac:	2300      	movs	r3, #0
   1beae:	2200      	movs	r2, #0
   1beb0:	2000      	movs	r0, #0
   1beb2:	f002 fb23 	bl	1e4fc <__register_exitproc>
   1beb6:	bd10      	pop	{r4, pc}

0001beb8 <quorem>:
   1beb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1beba:	4645      	mov	r5, r8
   1bebc:	4680      	mov	r8, r0
   1bebe:	46de      	mov	lr, fp
   1bec0:	4657      	mov	r7, sl
   1bec2:	464e      	mov	r6, r9
   1bec4:	4642      	mov	r2, r8
   1bec6:	b5e0      	push	{r5, r6, r7, lr}
   1bec8:	690c      	ldr	r4, [r1, #16]
   1beca:	6912      	ldr	r2, [r2, #16]
   1becc:	b085      	sub	sp, #20
   1bece:	000b      	movs	r3, r1
   1bed0:	9102      	str	r1, [sp, #8]
   1bed2:	2000      	movs	r0, #0
   1bed4:	4294      	cmp	r4, r2
   1bed6:	dd00      	ble.n	1beda <quorem+0x22>
   1bed8:	e090      	b.n	1bffc <quorem+0x144>
   1beda:	2214      	movs	r2, #20
   1bedc:	4694      	mov	ip, r2
   1bede:	4463      	add	r3, ip
   1bee0:	4699      	mov	r9, r3
   1bee2:	464a      	mov	r2, r9
   1bee4:	3c01      	subs	r4, #1
   1bee6:	00a3      	lsls	r3, r4, #2
   1bee8:	18d6      	adds	r6, r2, r3
   1beea:	2214      	movs	r2, #20
   1beec:	4442      	add	r2, r8
   1beee:	4693      	mov	fp, r2
   1bef0:	449b      	add	fp, r3
   1bef2:	6833      	ldr	r3, [r6, #0]
   1bef4:	0015      	movs	r5, r2
   1bef6:	1c59      	adds	r1, r3, #1
   1bef8:	465b      	mov	r3, fp
   1befa:	6818      	ldr	r0, [r3, #0]
   1befc:	9201      	str	r2, [sp, #4]
   1befe:	f7fa fb5b 	bl	165b8 <__udivsi3>
   1bf02:	1e03      	subs	r3, r0, #0
   1bf04:	9000      	str	r0, [sp, #0]
   1bf06:	d042      	beq.n	1bf8e <quorem+0xd6>
   1bf08:	0029      	movs	r1, r5
   1bf0a:	2700      	movs	r7, #0
   1bf0c:	464d      	mov	r5, r9
   1bf0e:	2000      	movs	r0, #0
   1bf10:	46b1      	mov	r9, r6
   1bf12:	46a2      	mov	sl, r4
   1bf14:	003e      	movs	r6, r7
   1bf16:	0004      	movs	r4, r0
   1bf18:	469c      	mov	ip, r3
   1bf1a:	002f      	movs	r7, r5
   1bf1c:	0008      	movs	r0, r1
   1bf1e:	9503      	str	r5, [sp, #12]
   1bf20:	4663      	mov	r3, ip
   1bf22:	cf04      	ldmia	r7!, {r2}
   1bf24:	0415      	lsls	r5, r2, #16
   1bf26:	0c2d      	lsrs	r5, r5, #16
   1bf28:	435d      	muls	r5, r3
   1bf2a:	0c12      	lsrs	r2, r2, #16
   1bf2c:	435a      	muls	r2, r3
   1bf2e:	19ad      	adds	r5, r5, r6
   1bf30:	0c2b      	lsrs	r3, r5, #16
   1bf32:	18d2      	adds	r2, r2, r3
   1bf34:	6803      	ldr	r3, [r0, #0]
   1bf36:	042d      	lsls	r5, r5, #16
   1bf38:	0419      	lsls	r1, r3, #16
   1bf3a:	0c09      	lsrs	r1, r1, #16
   1bf3c:	1909      	adds	r1, r1, r4
   1bf3e:	0c16      	lsrs	r6, r2, #16
   1bf40:	0c2d      	lsrs	r5, r5, #16
   1bf42:	0412      	lsls	r2, r2, #16
   1bf44:	1b49      	subs	r1, r1, r5
   1bf46:	0c12      	lsrs	r2, r2, #16
   1bf48:	0c1b      	lsrs	r3, r3, #16
   1bf4a:	1a9b      	subs	r3, r3, r2
   1bf4c:	140a      	asrs	r2, r1, #16
   1bf4e:	189b      	adds	r3, r3, r2
   1bf50:	0409      	lsls	r1, r1, #16
   1bf52:	141c      	asrs	r4, r3, #16
   1bf54:	0c09      	lsrs	r1, r1, #16
   1bf56:	041b      	lsls	r3, r3, #16
   1bf58:	4319      	orrs	r1, r3
   1bf5a:	c002      	stmia	r0!, {r1}
   1bf5c:	45b9      	cmp	r9, r7
   1bf5e:	d2df      	bcs.n	1bf20 <quorem+0x68>
   1bf60:	9b03      	ldr	r3, [sp, #12]
   1bf62:	464e      	mov	r6, r9
   1bf64:	4699      	mov	r9, r3
   1bf66:	465b      	mov	r3, fp
   1bf68:	681b      	ldr	r3, [r3, #0]
   1bf6a:	4654      	mov	r4, sl
   1bf6c:	2b00      	cmp	r3, #0
   1bf6e:	d10e      	bne.n	1bf8e <quorem+0xd6>
   1bf70:	465b      	mov	r3, fp
   1bf72:	9a01      	ldr	r2, [sp, #4]
   1bf74:	3b04      	subs	r3, #4
   1bf76:	429a      	cmp	r2, r3
   1bf78:	d304      	bcc.n	1bf84 <quorem+0xcc>
   1bf7a:	e006      	b.n	1bf8a <quorem+0xd2>
   1bf7c:	3b04      	subs	r3, #4
   1bf7e:	3c01      	subs	r4, #1
   1bf80:	429a      	cmp	r2, r3
   1bf82:	d202      	bcs.n	1bf8a <quorem+0xd2>
   1bf84:	6819      	ldr	r1, [r3, #0]
   1bf86:	2900      	cmp	r1, #0
   1bf88:	d0f8      	beq.n	1bf7c <quorem+0xc4>
   1bf8a:	4643      	mov	r3, r8
   1bf8c:	611c      	str	r4, [r3, #16]
   1bf8e:	9902      	ldr	r1, [sp, #8]
   1bf90:	4640      	mov	r0, r8
   1bf92:	f001 ff33 	bl	1ddfc <__mcmp>
   1bf96:	2800      	cmp	r0, #0
   1bf98:	db2f      	blt.n	1bffa <quorem+0x142>
   1bf9a:	464f      	mov	r7, r9
   1bf9c:	2000      	movs	r0, #0
   1bf9e:	9b00      	ldr	r3, [sp, #0]
   1bfa0:	9d01      	ldr	r5, [sp, #4]
   1bfa2:	3301      	adds	r3, #1
   1bfa4:	9300      	str	r3, [sp, #0]
   1bfa6:	682b      	ldr	r3, [r5, #0]
   1bfa8:	cf02      	ldmia	r7!, {r1}
   1bfaa:	041a      	lsls	r2, r3, #16
   1bfac:	0c12      	lsrs	r2, r2, #16
   1bfae:	1810      	adds	r0, r2, r0
   1bfb0:	040a      	lsls	r2, r1, #16
   1bfb2:	0c12      	lsrs	r2, r2, #16
   1bfb4:	1a82      	subs	r2, r0, r2
   1bfb6:	0c09      	lsrs	r1, r1, #16
   1bfb8:	0c1b      	lsrs	r3, r3, #16
   1bfba:	1a5b      	subs	r3, r3, r1
   1bfbc:	1411      	asrs	r1, r2, #16
   1bfbe:	185b      	adds	r3, r3, r1
   1bfc0:	0412      	lsls	r2, r2, #16
   1bfc2:	1418      	asrs	r0, r3, #16
   1bfc4:	0c12      	lsrs	r2, r2, #16
   1bfc6:	041b      	lsls	r3, r3, #16
   1bfc8:	4313      	orrs	r3, r2
   1bfca:	c508      	stmia	r5!, {r3}
   1bfcc:	42be      	cmp	r6, r7
   1bfce:	d2ea      	bcs.n	1bfa6 <quorem+0xee>
   1bfd0:	9901      	ldr	r1, [sp, #4]
   1bfd2:	00a3      	lsls	r3, r4, #2
   1bfd4:	468c      	mov	ip, r1
   1bfd6:	4463      	add	r3, ip
   1bfd8:	681a      	ldr	r2, [r3, #0]
   1bfda:	2a00      	cmp	r2, #0
   1bfdc:	d10d      	bne.n	1bffa <quorem+0x142>
   1bfde:	3b04      	subs	r3, #4
   1bfe0:	000a      	movs	r2, r1
   1bfe2:	4299      	cmp	r1, r3
   1bfe4:	d304      	bcc.n	1bff0 <quorem+0x138>
   1bfe6:	e006      	b.n	1bff6 <quorem+0x13e>
   1bfe8:	3b04      	subs	r3, #4
   1bfea:	3c01      	subs	r4, #1
   1bfec:	429a      	cmp	r2, r3
   1bfee:	d202      	bcs.n	1bff6 <quorem+0x13e>
   1bff0:	6819      	ldr	r1, [r3, #0]
   1bff2:	2900      	cmp	r1, #0
   1bff4:	d0f8      	beq.n	1bfe8 <quorem+0x130>
   1bff6:	4643      	mov	r3, r8
   1bff8:	611c      	str	r4, [r3, #16]
   1bffa:	9800      	ldr	r0, [sp, #0]
   1bffc:	b005      	add	sp, #20
   1bffe:	bc3c      	pop	{r2, r3, r4, r5}
   1c000:	4690      	mov	r8, r2
   1c002:	4699      	mov	r9, r3
   1c004:	46a2      	mov	sl, r4
   1c006:	46ab      	mov	fp, r5
   1c008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c00a:	46c0      	nop			; (mov r8, r8)

0001c00c <_dtoa_r>:
   1c00c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c00e:	4657      	mov	r7, sl
   1c010:	464e      	mov	r6, r9
   1c012:	4645      	mov	r5, r8
   1c014:	46de      	mov	lr, fp
   1c016:	b5e0      	push	{r5, r6, r7, lr}
   1c018:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1c01a:	b099      	sub	sp, #100	; 0x64
   1c01c:	4682      	mov	sl, r0
   1c01e:	001d      	movs	r5, r3
   1c020:	0016      	movs	r6, r2
   1c022:	001f      	movs	r7, r3
   1c024:	2900      	cmp	r1, #0
   1c026:	d009      	beq.n	1c03c <_dtoa_r+0x30>
   1c028:	2301      	movs	r3, #1
   1c02a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c02c:	4093      	lsls	r3, r2
   1c02e:	604a      	str	r2, [r1, #4]
   1c030:	608b      	str	r3, [r1, #8]
   1c032:	f001 fcd7 	bl	1d9e4 <_Bfree>
   1c036:	2300      	movs	r3, #0
   1c038:	4652      	mov	r2, sl
   1c03a:	6413      	str	r3, [r2, #64]	; 0x40
   1c03c:	46b8      	mov	r8, r7
   1c03e:	2f00      	cmp	r7, #0
   1c040:	db37      	blt.n	1c0b2 <_dtoa_r+0xa6>
   1c042:	2300      	movs	r3, #0
   1c044:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c046:	6013      	str	r3, [r2, #0]
   1c048:	4642      	mov	r2, r8
   1c04a:	4bd6      	ldr	r3, [pc, #856]	; (1c3a4 <_dtoa_r+0x398>)
   1c04c:	401a      	ands	r2, r3
   1c04e:	429a      	cmp	r2, r3
   1c050:	d018      	beq.n	1c084 <_dtoa_r+0x78>
   1c052:	2200      	movs	r2, #0
   1c054:	2300      	movs	r3, #0
   1c056:	0030      	movs	r0, r6
   1c058:	0039      	movs	r1, r7
   1c05a:	f7fa fc33 	bl	168c4 <__aeabi_dcmpeq>
   1c05e:	2800      	cmp	r0, #0
   1c060:	d02f      	beq.n	1c0c2 <_dtoa_r+0xb6>
   1c062:	2301      	movs	r3, #1
   1c064:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c066:	6013      	str	r3, [r2, #0]
   1c068:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c06a:	2b00      	cmp	r3, #0
   1c06c:	d100      	bne.n	1c070 <_dtoa_r+0x64>
   1c06e:	e22a      	b.n	1c4c6 <_dtoa_r+0x4ba>
   1c070:	48cd      	ldr	r0, [pc, #820]	; (1c3a8 <_dtoa_r+0x39c>)
   1c072:	6018      	str	r0, [r3, #0]
   1c074:	3801      	subs	r0, #1
   1c076:	b019      	add	sp, #100	; 0x64
   1c078:	bc3c      	pop	{r2, r3, r4, r5}
   1c07a:	4690      	mov	r8, r2
   1c07c:	4699      	mov	r9, r3
   1c07e:	46a2      	mov	sl, r4
   1c080:	46ab      	mov	fp, r5
   1c082:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c084:	4bc9      	ldr	r3, [pc, #804]	; (1c3ac <_dtoa_r+0x3a0>)
   1c086:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c088:	6013      	str	r3, [r2, #0]
   1c08a:	2e00      	cmp	r6, #0
   1c08c:	d10b      	bne.n	1c0a6 <_dtoa_r+0x9a>
   1c08e:	4643      	mov	r3, r8
   1c090:	0318      	lsls	r0, r3, #12
   1c092:	d108      	bne.n	1c0a6 <_dtoa_r+0x9a>
   1c094:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c096:	48c6      	ldr	r0, [pc, #792]	; (1c3b0 <_dtoa_r+0x3a4>)
   1c098:	2b00      	cmp	r3, #0
   1c09a:	d0ec      	beq.n	1c076 <_dtoa_r+0x6a>
   1c09c:	0003      	movs	r3, r0
   1c09e:	3308      	adds	r3, #8
   1c0a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1c0a2:	6013      	str	r3, [r2, #0]
   1c0a4:	e7e7      	b.n	1c076 <_dtoa_r+0x6a>
   1c0a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c0a8:	48c2      	ldr	r0, [pc, #776]	; (1c3b4 <_dtoa_r+0x3a8>)
   1c0aa:	2b00      	cmp	r3, #0
   1c0ac:	d0e3      	beq.n	1c076 <_dtoa_r+0x6a>
   1c0ae:	1cc3      	adds	r3, r0, #3
   1c0b0:	e7f6      	b.n	1c0a0 <_dtoa_r+0x94>
   1c0b2:	2301      	movs	r3, #1
   1c0b4:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1c0b6:	0068      	lsls	r0, r5, #1
   1c0b8:	6013      	str	r3, [r2, #0]
   1c0ba:	0843      	lsrs	r3, r0, #1
   1c0bc:	4698      	mov	r8, r3
   1c0be:	001f      	movs	r7, r3
   1c0c0:	e7c2      	b.n	1c048 <_dtoa_r+0x3c>
   1c0c2:	ab16      	add	r3, sp, #88	; 0x58
   1c0c4:	9301      	str	r3, [sp, #4]
   1c0c6:	ab17      	add	r3, sp, #92	; 0x5c
   1c0c8:	9300      	str	r3, [sp, #0]
   1c0ca:	0032      	movs	r2, r6
   1c0cc:	003b      	movs	r3, r7
   1c0ce:	4650      	mov	r0, sl
   1c0d0:	f001 ff4a 	bl	1df68 <__d2b>
   1c0d4:	4643      	mov	r3, r8
   1c0d6:	4683      	mov	fp, r0
   1c0d8:	0d1a      	lsrs	r2, r3, #20
   1c0da:	d100      	bne.n	1c0de <_dtoa_r+0xd2>
   1c0dc:	e1d6      	b.n	1c48c <_dtoa_r+0x480>
   1c0de:	033b      	lsls	r3, r7, #12
   1c0e0:	4cb5      	ldr	r4, [pc, #724]	; (1c3b8 <_dtoa_r+0x3ac>)
   1c0e2:	0b1b      	lsrs	r3, r3, #12
   1c0e4:	431c      	orrs	r4, r3
   1c0e6:	4bb5      	ldr	r3, [pc, #724]	; (1c3bc <_dtoa_r+0x3b0>)
   1c0e8:	0030      	movs	r0, r6
   1c0ea:	4698      	mov	r8, r3
   1c0ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c0ee:	0021      	movs	r1, r4
   1c0f0:	4699      	mov	r9, r3
   1c0f2:	2300      	movs	r3, #0
   1c0f4:	4490      	add	r8, r2
   1c0f6:	930f      	str	r3, [sp, #60]	; 0x3c
   1c0f8:	2200      	movs	r2, #0
   1c0fa:	4bb1      	ldr	r3, [pc, #708]	; (1c3c0 <_dtoa_r+0x3b4>)
   1c0fc:	f7fc fe62 	bl	18dc4 <__aeabi_dsub>
   1c100:	4ab0      	ldr	r2, [pc, #704]	; (1c3c4 <_dtoa_r+0x3b8>)
   1c102:	4bb1      	ldr	r3, [pc, #708]	; (1c3c8 <_dtoa_r+0x3bc>)
   1c104:	f7fc fbde 	bl	188c4 <__aeabi_dmul>
   1c108:	4ab0      	ldr	r2, [pc, #704]	; (1c3cc <_dtoa_r+0x3c0>)
   1c10a:	4bb1      	ldr	r3, [pc, #708]	; (1c3d0 <_dtoa_r+0x3c4>)
   1c10c:	f7fb fc96 	bl	17a3c <__aeabi_dadd>
   1c110:	0004      	movs	r4, r0
   1c112:	4640      	mov	r0, r8
   1c114:	000d      	movs	r5, r1
   1c116:	f7fd f99f 	bl	19458 <__aeabi_i2d>
   1c11a:	4aae      	ldr	r2, [pc, #696]	; (1c3d4 <_dtoa_r+0x3c8>)
   1c11c:	4bae      	ldr	r3, [pc, #696]	; (1c3d8 <_dtoa_r+0x3cc>)
   1c11e:	f7fc fbd1 	bl	188c4 <__aeabi_dmul>
   1c122:	0002      	movs	r2, r0
   1c124:	000b      	movs	r3, r1
   1c126:	0020      	movs	r0, r4
   1c128:	0029      	movs	r1, r5
   1c12a:	f7fb fc87 	bl	17a3c <__aeabi_dadd>
   1c12e:	0004      	movs	r4, r0
   1c130:	000d      	movs	r5, r1
   1c132:	f7fd f95d 	bl	193f0 <__aeabi_d2iz>
   1c136:	2200      	movs	r2, #0
   1c138:	9003      	str	r0, [sp, #12]
   1c13a:	2300      	movs	r3, #0
   1c13c:	0020      	movs	r0, r4
   1c13e:	0029      	movs	r1, r5
   1c140:	f7fa fbc6 	bl	168d0 <__aeabi_dcmplt>
   1c144:	2800      	cmp	r0, #0
   1c146:	d000      	beq.n	1c14a <_dtoa_r+0x13e>
   1c148:	e2b1      	b.n	1c6ae <_dtoa_r+0x6a2>
   1c14a:	2301      	movs	r3, #1
   1c14c:	9c03      	ldr	r4, [sp, #12]
   1c14e:	930c      	str	r3, [sp, #48]	; 0x30
   1c150:	2c16      	cmp	r4, #22
   1c152:	d810      	bhi.n	1c176 <_dtoa_r+0x16a>
   1c154:	49a1      	ldr	r1, [pc, #644]	; (1c3dc <_dtoa_r+0x3d0>)
   1c156:	00e3      	lsls	r3, r4, #3
   1c158:	18c9      	adds	r1, r1, r3
   1c15a:	0032      	movs	r2, r6
   1c15c:	6808      	ldr	r0, [r1, #0]
   1c15e:	6849      	ldr	r1, [r1, #4]
   1c160:	003b      	movs	r3, r7
   1c162:	f7fa fbc9 	bl	168f8 <__aeabi_dcmpgt>
   1c166:	2800      	cmp	r0, #0
   1c168:	d100      	bne.n	1c16c <_dtoa_r+0x160>
   1c16a:	e31d      	b.n	1c7a8 <_dtoa_r+0x79c>
   1c16c:	0023      	movs	r3, r4
   1c16e:	3b01      	subs	r3, #1
   1c170:	9303      	str	r3, [sp, #12]
   1c172:	2300      	movs	r3, #0
   1c174:	930c      	str	r3, [sp, #48]	; 0x30
   1c176:	464b      	mov	r3, r9
   1c178:	4642      	mov	r2, r8
   1c17a:	1a9a      	subs	r2, r3, r2
   1c17c:	2300      	movs	r3, #0
   1c17e:	9306      	str	r3, [sp, #24]
   1c180:	0013      	movs	r3, r2
   1c182:	3b01      	subs	r3, #1
   1c184:	9304      	str	r3, [sp, #16]
   1c186:	d500      	bpl.n	1c18a <_dtoa_r+0x17e>
   1c188:	e2a1      	b.n	1c6ce <_dtoa_r+0x6c2>
   1c18a:	9b03      	ldr	r3, [sp, #12]
   1c18c:	2b00      	cmp	r3, #0
   1c18e:	da00      	bge.n	1c192 <_dtoa_r+0x186>
   1c190:	e284      	b.n	1c69c <_dtoa_r+0x690>
   1c192:	469c      	mov	ip, r3
   1c194:	930d      	str	r3, [sp, #52]	; 0x34
   1c196:	2300      	movs	r3, #0
   1c198:	9a04      	ldr	r2, [sp, #16]
   1c19a:	4699      	mov	r9, r3
   1c19c:	0011      	movs	r1, r2
   1c19e:	4461      	add	r1, ip
   1c1a0:	9104      	str	r1, [sp, #16]
   1c1a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c1a4:	2b09      	cmp	r3, #9
   1c1a6:	d900      	bls.n	1c1aa <_dtoa_r+0x19e>
   1c1a8:	e18f      	b.n	1c4ca <_dtoa_r+0x4be>
   1c1aa:	2401      	movs	r4, #1
   1c1ac:	2b05      	cmp	r3, #5
   1c1ae:	dd02      	ble.n	1c1b6 <_dtoa_r+0x1aa>
   1c1b0:	2400      	movs	r4, #0
   1c1b2:	3b04      	subs	r3, #4
   1c1b4:	9322      	str	r3, [sp, #136]	; 0x88
   1c1b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c1b8:	2b03      	cmp	r3, #3
   1c1ba:	d101      	bne.n	1c1c0 <_dtoa_r+0x1b4>
   1c1bc:	f000 fcce 	bl	1cb5c <_dtoa_r+0xb50>
   1c1c0:	dc01      	bgt.n	1c1c6 <_dtoa_r+0x1ba>
   1c1c2:	f000 fc92 	bl	1caea <_dtoa_r+0xade>
   1c1c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c1c8:	2b04      	cmp	r3, #4
   1c1ca:	d101      	bne.n	1c1d0 <_dtoa_r+0x1c4>
   1c1cc:	f000 fc40 	bl	1ca50 <_dtoa_r+0xa44>
   1c1d0:	2301      	movs	r3, #1
   1c1d2:	930b      	str	r3, [sp, #44]	; 0x2c
   1c1d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c1d6:	2b05      	cmp	r3, #5
   1c1d8:	d001      	beq.n	1c1de <_dtoa_r+0x1d2>
   1c1da:	f000 fc8b 	bl	1caf4 <_dtoa_r+0xae8>
   1c1de:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1c1e0:	9b03      	ldr	r3, [sp, #12]
   1c1e2:	4694      	mov	ip, r2
   1c1e4:	4463      	add	r3, ip
   1c1e6:	930e      	str	r3, [sp, #56]	; 0x38
   1c1e8:	3301      	adds	r3, #1
   1c1ea:	9307      	str	r3, [sp, #28]
   1c1ec:	1e1d      	subs	r5, r3, #0
   1c1ee:	dc01      	bgt.n	1c1f4 <_dtoa_r+0x1e8>
   1c1f0:	f000 fd49 	bl	1cc86 <_dtoa_r+0xc7a>
   1c1f4:	9b07      	ldr	r3, [sp, #28]
   1c1f6:	4698      	mov	r8, r3
   1c1f8:	2300      	movs	r3, #0
   1c1fa:	4652      	mov	r2, sl
   1c1fc:	2100      	movs	r1, #0
   1c1fe:	6453      	str	r3, [r2, #68]	; 0x44
   1c200:	2d17      	cmp	r5, #23
   1c202:	d90a      	bls.n	1c21a <_dtoa_r+0x20e>
   1c204:	2201      	movs	r2, #1
   1c206:	3304      	adds	r3, #4
   1c208:	005b      	lsls	r3, r3, #1
   1c20a:	0018      	movs	r0, r3
   1c20c:	3014      	adds	r0, #20
   1c20e:	0011      	movs	r1, r2
   1c210:	3201      	adds	r2, #1
   1c212:	4285      	cmp	r5, r0
   1c214:	d2f8      	bcs.n	1c208 <_dtoa_r+0x1fc>
   1c216:	4653      	mov	r3, sl
   1c218:	6459      	str	r1, [r3, #68]	; 0x44
   1c21a:	4650      	mov	r0, sl
   1c21c:	f001 fbba 	bl	1d994 <_Balloc>
   1c220:	4653      	mov	r3, sl
   1c222:	6418      	str	r0, [r3, #64]	; 0x40
   1c224:	4643      	mov	r3, r8
   1c226:	900a      	str	r0, [sp, #40]	; 0x28
   1c228:	2b0e      	cmp	r3, #14
   1c22a:	d900      	bls.n	1c22e <_dtoa_r+0x222>
   1c22c:	e161      	b.n	1c4f2 <_dtoa_r+0x4e6>
   1c22e:	2c00      	cmp	r4, #0
   1c230:	d100      	bne.n	1c234 <_dtoa_r+0x228>
   1c232:	e15e      	b.n	1c4f2 <_dtoa_r+0x4e6>
   1c234:	9610      	str	r6, [sp, #64]	; 0x40
   1c236:	9711      	str	r7, [sp, #68]	; 0x44
   1c238:	9e03      	ldr	r6, [sp, #12]
   1c23a:	2e00      	cmp	r6, #0
   1c23c:	dc01      	bgt.n	1c242 <_dtoa_r+0x236>
   1c23e:	f000 fd25 	bl	1cc8c <_dtoa_r+0xc80>
   1c242:	0032      	movs	r2, r6
   1c244:	210f      	movs	r1, #15
   1c246:	4b65      	ldr	r3, [pc, #404]	; (1c3dc <_dtoa_r+0x3d0>)
   1c248:	400a      	ands	r2, r1
   1c24a:	00d2      	lsls	r2, r2, #3
   1c24c:	189b      	adds	r3, r3, r2
   1c24e:	1136      	asrs	r6, r6, #4
   1c250:	681c      	ldr	r4, [r3, #0]
   1c252:	685d      	ldr	r5, [r3, #4]
   1c254:	06f3      	lsls	r3, r6, #27
   1c256:	d401      	bmi.n	1c25c <_dtoa_r+0x250>
   1c258:	f000 fcca 	bl	1cbf0 <_dtoa_r+0xbe4>
   1c25c:	4b60      	ldr	r3, [pc, #384]	; (1c3e0 <_dtoa_r+0x3d4>)
   1c25e:	400e      	ands	r6, r1
   1c260:	6a1a      	ldr	r2, [r3, #32]
   1c262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c264:	9810      	ldr	r0, [sp, #64]	; 0x40
   1c266:	9911      	ldr	r1, [sp, #68]	; 0x44
   1c268:	f7fb fef8 	bl	1805c <__aeabi_ddiv>
   1c26c:	2303      	movs	r3, #3
   1c26e:	4698      	mov	r8, r3
   1c270:	9008      	str	r0, [sp, #32]
   1c272:	9109      	str	r1, [sp, #36]	; 0x24
   1c274:	2e00      	cmp	r6, #0
   1c276:	d011      	beq.n	1c29c <_dtoa_r+0x290>
   1c278:	4f59      	ldr	r7, [pc, #356]	; (1c3e0 <_dtoa_r+0x3d4>)
   1c27a:	2301      	movs	r3, #1
   1c27c:	4233      	tst	r3, r6
   1c27e:	d009      	beq.n	1c294 <_dtoa_r+0x288>
   1c280:	469c      	mov	ip, r3
   1c282:	683a      	ldr	r2, [r7, #0]
   1c284:	687b      	ldr	r3, [r7, #4]
   1c286:	0020      	movs	r0, r4
   1c288:	0029      	movs	r1, r5
   1c28a:	44e0      	add	r8, ip
   1c28c:	f7fc fb1a 	bl	188c4 <__aeabi_dmul>
   1c290:	0004      	movs	r4, r0
   1c292:	000d      	movs	r5, r1
   1c294:	1076      	asrs	r6, r6, #1
   1c296:	3708      	adds	r7, #8
   1c298:	2e00      	cmp	r6, #0
   1c29a:	d1ee      	bne.n	1c27a <_dtoa_r+0x26e>
   1c29c:	0022      	movs	r2, r4
   1c29e:	9808      	ldr	r0, [sp, #32]
   1c2a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c2a2:	002b      	movs	r3, r5
   1c2a4:	f7fb feda 	bl	1805c <__aeabi_ddiv>
   1c2a8:	0006      	movs	r6, r0
   1c2aa:	000f      	movs	r7, r1
   1c2ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c2ae:	2b00      	cmp	r3, #0
   1c2b0:	d009      	beq.n	1c2c6 <_dtoa_r+0x2ba>
   1c2b2:	2200      	movs	r2, #0
   1c2b4:	4b40      	ldr	r3, [pc, #256]	; (1c3b8 <_dtoa_r+0x3ac>)
   1c2b6:	0030      	movs	r0, r6
   1c2b8:	0039      	movs	r1, r7
   1c2ba:	f7fa fb09 	bl	168d0 <__aeabi_dcmplt>
   1c2be:	2800      	cmp	r0, #0
   1c2c0:	d001      	beq.n	1c2c6 <_dtoa_r+0x2ba>
   1c2c2:	f000 fdc2 	bl	1ce4a <_dtoa_r+0xe3e>
   1c2c6:	4640      	mov	r0, r8
   1c2c8:	f7fd f8c6 	bl	19458 <__aeabi_i2d>
   1c2cc:	0032      	movs	r2, r6
   1c2ce:	003b      	movs	r3, r7
   1c2d0:	f7fc faf8 	bl	188c4 <__aeabi_dmul>
   1c2d4:	2200      	movs	r2, #0
   1c2d6:	4b43      	ldr	r3, [pc, #268]	; (1c3e4 <_dtoa_r+0x3d8>)
   1c2d8:	f7fb fbb0 	bl	17a3c <__aeabi_dadd>
   1c2dc:	4a42      	ldr	r2, [pc, #264]	; (1c3e8 <_dtoa_r+0x3dc>)
   1c2de:	000b      	movs	r3, r1
   1c2e0:	4694      	mov	ip, r2
   1c2e2:	4463      	add	r3, ip
   1c2e4:	9008      	str	r0, [sp, #32]
   1c2e6:	9109      	str	r1, [sp, #36]	; 0x24
   1c2e8:	9309      	str	r3, [sp, #36]	; 0x24
   1c2ea:	9b07      	ldr	r3, [sp, #28]
   1c2ec:	2b00      	cmp	r3, #0
   1c2ee:	d101      	bne.n	1c2f4 <_dtoa_r+0x2e8>
   1c2f0:	f000 fc50 	bl	1cb94 <_dtoa_r+0xb88>
   1c2f4:	9b03      	ldr	r3, [sp, #12]
   1c2f6:	9313      	str	r3, [sp, #76]	; 0x4c
   1c2f8:	9b07      	ldr	r3, [sp, #28]
   1c2fa:	9312      	str	r3, [sp, #72]	; 0x48
   1c2fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c2fe:	2b00      	cmp	r3, #0
   1c300:	d101      	bne.n	1c306 <_dtoa_r+0x2fa>
   1c302:	f000 fd1d 	bl	1cd40 <_dtoa_r+0xd34>
   1c306:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c308:	2000      	movs	r0, #0
   1c30a:	1e5a      	subs	r2, r3, #1
   1c30c:	4b33      	ldr	r3, [pc, #204]	; (1c3dc <_dtoa_r+0x3d0>)
   1c30e:	00d2      	lsls	r2, r2, #3
   1c310:	189b      	adds	r3, r3, r2
   1c312:	681a      	ldr	r2, [r3, #0]
   1c314:	685b      	ldr	r3, [r3, #4]
   1c316:	4935      	ldr	r1, [pc, #212]	; (1c3ec <_dtoa_r+0x3e0>)
   1c318:	f7fb fea0 	bl	1805c <__aeabi_ddiv>
   1c31c:	9a08      	ldr	r2, [sp, #32]
   1c31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c320:	f7fc fd50 	bl	18dc4 <__aeabi_dsub>
   1c324:	9008      	str	r0, [sp, #32]
   1c326:	9109      	str	r1, [sp, #36]	; 0x24
   1c328:	0039      	movs	r1, r7
   1c32a:	0030      	movs	r0, r6
   1c32c:	f7fd f860 	bl	193f0 <__aeabi_d2iz>
   1c330:	0004      	movs	r4, r0
   1c332:	f7fd f891 	bl	19458 <__aeabi_i2d>
   1c336:	0002      	movs	r2, r0
   1c338:	000b      	movs	r3, r1
   1c33a:	0030      	movs	r0, r6
   1c33c:	0039      	movs	r1, r7
   1c33e:	f7fc fd41 	bl	18dc4 <__aeabi_dsub>
   1c342:	0005      	movs	r5, r0
   1c344:	000e      	movs	r6, r1
   1c346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c348:	3430      	adds	r4, #48	; 0x30
   1c34a:	1c51      	adds	r1, r2, #1
   1c34c:	b2e7      	uxtb	r7, r4
   1c34e:	9114      	str	r1, [sp, #80]	; 0x50
   1c350:	7017      	strb	r7, [r2, #0]
   1c352:	0033      	movs	r3, r6
   1c354:	9808      	ldr	r0, [sp, #32]
   1c356:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c358:	002a      	movs	r2, r5
   1c35a:	f7fa facd 	bl	168f8 <__aeabi_dcmpgt>
   1c35e:	2800      	cmp	r0, #0
   1c360:	d001      	beq.n	1c366 <_dtoa_r+0x35a>
   1c362:	f000 fdfe 	bl	1cf62 <_dtoa_r+0xf56>
   1c366:	002a      	movs	r2, r5
   1c368:	0033      	movs	r3, r6
   1c36a:	2000      	movs	r0, #0
   1c36c:	4912      	ldr	r1, [pc, #72]	; (1c3b8 <_dtoa_r+0x3ac>)
   1c36e:	f7fc fd29 	bl	18dc4 <__aeabi_dsub>
   1c372:	0002      	movs	r2, r0
   1c374:	000b      	movs	r3, r1
   1c376:	9808      	ldr	r0, [sp, #32]
   1c378:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c37a:	f7fa fabd 	bl	168f8 <__aeabi_dcmpgt>
   1c37e:	2800      	cmp	r0, #0
   1c380:	d001      	beq.n	1c386 <_dtoa_r+0x37a>
   1c382:	f000 fde7 	bl	1cf54 <_dtoa_r+0xf48>
   1c386:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c388:	2b01      	cmp	r3, #1
   1c38a:	d101      	bne.n	1c390 <_dtoa_r+0x384>
   1c38c:	f000 fc78 	bl	1cc80 <_dtoa_r+0xc74>
   1c390:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c392:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c394:	4694      	mov	ip, r2
   1c396:	4463      	add	r3, ip
   1c398:	4698      	mov	r8, r3
   1c39a:	464b      	mov	r3, r9
   1c39c:	9312      	str	r3, [sp, #72]	; 0x48
   1c39e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1c3a0:	4699      	mov	r9, r3
   1c3a2:	e038      	b.n	1c416 <_dtoa_r+0x40a>
   1c3a4:	7ff00000 	.word	0x7ff00000
   1c3a8:	0001f941 	.word	0x0001f941
   1c3ac:	0000270f 	.word	0x0000270f
   1c3b0:	000207f4 	.word	0x000207f4
   1c3b4:	00020800 	.word	0x00020800
   1c3b8:	3ff00000 	.word	0x3ff00000
   1c3bc:	fffffc01 	.word	0xfffffc01
   1c3c0:	3ff80000 	.word	0x3ff80000
   1c3c4:	636f4361 	.word	0x636f4361
   1c3c8:	3fd287a7 	.word	0x3fd287a7
   1c3cc:	8b60c8b3 	.word	0x8b60c8b3
   1c3d0:	3fc68a28 	.word	0x3fc68a28
   1c3d4:	509f79fb 	.word	0x509f79fb
   1c3d8:	3fd34413 	.word	0x3fd34413
   1c3dc:	00020830 	.word	0x00020830
   1c3e0:	00020808 	.word	0x00020808
   1c3e4:	401c0000 	.word	0x401c0000
   1c3e8:	fcc00000 	.word	0xfcc00000
   1c3ec:	3fe00000 	.word	0x3fe00000
   1c3f0:	002a      	movs	r2, r5
   1c3f2:	0033      	movs	r3, r6
   1c3f4:	2000      	movs	r0, #0
   1c3f6:	49b9      	ldr	r1, [pc, #740]	; (1c6dc <_dtoa_r+0x6d0>)
   1c3f8:	f7fc fce4 	bl	18dc4 <__aeabi_dsub>
   1c3fc:	9a08      	ldr	r2, [sp, #32]
   1c3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c400:	f7fa fa66 	bl	168d0 <__aeabi_dcmplt>
   1c404:	2800      	cmp	r0, #0
   1c406:	d001      	beq.n	1c40c <_dtoa_r+0x400>
   1c408:	f000 fd74 	bl	1cef4 <_dtoa_r+0xee8>
   1c40c:	46a1      	mov	r9, r4
   1c40e:	4544      	cmp	r4, r8
   1c410:	d101      	bne.n	1c416 <_dtoa_r+0x40a>
   1c412:	f000 fc33 	bl	1cc7c <_dtoa_r+0xc70>
   1c416:	9808      	ldr	r0, [sp, #32]
   1c418:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c41a:	2200      	movs	r2, #0
   1c41c:	4bb0      	ldr	r3, [pc, #704]	; (1c6e0 <_dtoa_r+0x6d4>)
   1c41e:	f7fc fa51 	bl	188c4 <__aeabi_dmul>
   1c422:	2200      	movs	r2, #0
   1c424:	4bae      	ldr	r3, [pc, #696]	; (1c6e0 <_dtoa_r+0x6d4>)
   1c426:	9008      	str	r0, [sp, #32]
   1c428:	9109      	str	r1, [sp, #36]	; 0x24
   1c42a:	0028      	movs	r0, r5
   1c42c:	0031      	movs	r1, r6
   1c42e:	f7fc fa49 	bl	188c4 <__aeabi_dmul>
   1c432:	000d      	movs	r5, r1
   1c434:	0004      	movs	r4, r0
   1c436:	f7fc ffdb 	bl	193f0 <__aeabi_d2iz>
   1c43a:	0007      	movs	r7, r0
   1c43c:	f7fd f80c 	bl	19458 <__aeabi_i2d>
   1c440:	0002      	movs	r2, r0
   1c442:	000b      	movs	r3, r1
   1c444:	0020      	movs	r0, r4
   1c446:	0029      	movs	r1, r5
   1c448:	f7fc fcbc 	bl	18dc4 <__aeabi_dsub>
   1c44c:	464b      	mov	r3, r9
   1c44e:	3730      	adds	r7, #48	; 0x30
   1c450:	b2ff      	uxtb	r7, r7
   1c452:	1c5c      	adds	r4, r3, #1
   1c454:	701f      	strb	r7, [r3, #0]
   1c456:	9a08      	ldr	r2, [sp, #32]
   1c458:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c45a:	0005      	movs	r5, r0
   1c45c:	000e      	movs	r6, r1
   1c45e:	f7fa fa37 	bl	168d0 <__aeabi_dcmplt>
   1c462:	2800      	cmp	r0, #0
   1c464:	d0c4      	beq.n	1c3f0 <_dtoa_r+0x3e4>
   1c466:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1c468:	9303      	str	r3, [sp, #12]
   1c46a:	4659      	mov	r1, fp
   1c46c:	4650      	mov	r0, sl
   1c46e:	f001 fab9 	bl	1d9e4 <_Bfree>
   1c472:	2300      	movs	r3, #0
   1c474:	7023      	strb	r3, [r4, #0]
   1c476:	9b03      	ldr	r3, [sp, #12]
   1c478:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1c47a:	3301      	adds	r3, #1
   1c47c:	6013      	str	r3, [r2, #0]
   1c47e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1c480:	2b00      	cmp	r3, #0
   1c482:	d100      	bne.n	1c486 <_dtoa_r+0x47a>
   1c484:	e3a8      	b.n	1cbd8 <_dtoa_r+0xbcc>
   1c486:	601c      	str	r4, [r3, #0]
   1c488:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c48a:	e5f4      	b.n	1c076 <_dtoa_r+0x6a>
   1c48c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1c48e:	4699      	mov	r9, r3
   1c490:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c492:	444b      	add	r3, r9
   1c494:	001c      	movs	r4, r3
   1c496:	4b93      	ldr	r3, [pc, #588]	; (1c6e4 <_dtoa_r+0x6d8>)
   1c498:	18e3      	adds	r3, r4, r3
   1c49a:	2b20      	cmp	r3, #32
   1c49c:	dc00      	bgt.n	1c4a0 <_dtoa_r+0x494>
   1c49e:	e17e      	b.n	1c79e <_dtoa_r+0x792>
   1c4a0:	0031      	movs	r1, r6
   1c4a2:	4a91      	ldr	r2, [pc, #580]	; (1c6e8 <_dtoa_r+0x6dc>)
   1c4a4:	4640      	mov	r0, r8
   1c4a6:	18a2      	adds	r2, r4, r2
   1c4a8:	40d1      	lsrs	r1, r2
   1c4aa:	000a      	movs	r2, r1
   1c4ac:	2140      	movs	r1, #64	; 0x40
   1c4ae:	1acb      	subs	r3, r1, r3
   1c4b0:	4098      	lsls	r0, r3
   1c4b2:	4310      	orrs	r0, r2
   1c4b4:	f7fd f812 	bl	194dc <__aeabi_ui2d>
   1c4b8:	1e63      	subs	r3, r4, #1
   1c4ba:	4698      	mov	r8, r3
   1c4bc:	2301      	movs	r3, #1
   1c4be:	4d8b      	ldr	r5, [pc, #556]	; (1c6ec <_dtoa_r+0x6e0>)
   1c4c0:	930f      	str	r3, [sp, #60]	; 0x3c
   1c4c2:	1949      	adds	r1, r1, r5
   1c4c4:	e618      	b.n	1c0f8 <_dtoa_r+0xec>
   1c4c6:	488a      	ldr	r0, [pc, #552]	; (1c6f0 <_dtoa_r+0x6e4>)
   1c4c8:	e5d5      	b.n	1c076 <_dtoa_r+0x6a>
   1c4ca:	2300      	movs	r3, #0
   1c4cc:	4652      	mov	r2, sl
   1c4ce:	2100      	movs	r1, #0
   1c4d0:	6453      	str	r3, [r2, #68]	; 0x44
   1c4d2:	4650      	mov	r0, sl
   1c4d4:	f001 fa5e 	bl	1d994 <_Balloc>
   1c4d8:	4653      	mov	r3, sl
   1c4da:	6418      	str	r0, [r3, #64]	; 0x40
   1c4dc:	2301      	movs	r3, #1
   1c4de:	425b      	negs	r3, r3
   1c4e0:	9307      	str	r3, [sp, #28]
   1c4e2:	930e      	str	r3, [sp, #56]	; 0x38
   1c4e4:	3302      	adds	r3, #2
   1c4e6:	2200      	movs	r2, #0
   1c4e8:	930b      	str	r3, [sp, #44]	; 0x2c
   1c4ea:	2300      	movs	r3, #0
   1c4ec:	900a      	str	r0, [sp, #40]	; 0x28
   1c4ee:	9223      	str	r2, [sp, #140]	; 0x8c
   1c4f0:	9322      	str	r3, [sp, #136]	; 0x88
   1c4f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c4f4:	2b00      	cmp	r3, #0
   1c4f6:	da00      	bge.n	1c4fa <_dtoa_r+0x4ee>
   1c4f8:	e0ab      	b.n	1c652 <_dtoa_r+0x646>
   1c4fa:	9a03      	ldr	r2, [sp, #12]
   1c4fc:	2a0e      	cmp	r2, #14
   1c4fe:	dd00      	ble.n	1c502 <_dtoa_r+0x4f6>
   1c500:	e0a7      	b.n	1c652 <_dtoa_r+0x646>
   1c502:	4b7c      	ldr	r3, [pc, #496]	; (1c6f4 <_dtoa_r+0x6e8>)
   1c504:	00d2      	lsls	r2, r2, #3
   1c506:	189b      	adds	r3, r3, r2
   1c508:	685c      	ldr	r4, [r3, #4]
   1c50a:	681b      	ldr	r3, [r3, #0]
   1c50c:	9304      	str	r3, [sp, #16]
   1c50e:	9405      	str	r4, [sp, #20]
   1c510:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1c512:	2b00      	cmp	r3, #0
   1c514:	da00      	bge.n	1c518 <_dtoa_r+0x50c>
   1c516:	e2a7      	b.n	1ca68 <_dtoa_r+0xa5c>
   1c518:	9c04      	ldr	r4, [sp, #16]
   1c51a:	9d05      	ldr	r5, [sp, #20]
   1c51c:	0030      	movs	r0, r6
   1c51e:	0022      	movs	r2, r4
   1c520:	002b      	movs	r3, r5
   1c522:	0039      	movs	r1, r7
   1c524:	f7fb fd9a 	bl	1805c <__aeabi_ddiv>
   1c528:	f7fc ff62 	bl	193f0 <__aeabi_d2iz>
   1c52c:	4680      	mov	r8, r0
   1c52e:	f7fc ff93 	bl	19458 <__aeabi_i2d>
   1c532:	0022      	movs	r2, r4
   1c534:	002b      	movs	r3, r5
   1c536:	f7fc f9c5 	bl	188c4 <__aeabi_dmul>
   1c53a:	0002      	movs	r2, r0
   1c53c:	000b      	movs	r3, r1
   1c53e:	0030      	movs	r0, r6
   1c540:	0039      	movs	r1, r7
   1c542:	f7fc fc3f 	bl	18dc4 <__aeabi_dsub>
   1c546:	4643      	mov	r3, r8
   1c548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c54a:	3330      	adds	r3, #48	; 0x30
   1c54c:	7013      	strb	r3, [r2, #0]
   1c54e:	9b07      	ldr	r3, [sp, #28]
   1c550:	0006      	movs	r6, r0
   1c552:	000f      	movs	r7, r1
   1c554:	1c54      	adds	r4, r2, #1
   1c556:	2b01      	cmp	r3, #1
   1c558:	d04e      	beq.n	1c5f8 <_dtoa_r+0x5ec>
   1c55a:	2200      	movs	r2, #0
   1c55c:	4b60      	ldr	r3, [pc, #384]	; (1c6e0 <_dtoa_r+0x6d4>)
   1c55e:	f7fc f9b1 	bl	188c4 <__aeabi_dmul>
   1c562:	2200      	movs	r2, #0
   1c564:	2300      	movs	r3, #0
   1c566:	0006      	movs	r6, r0
   1c568:	000f      	movs	r7, r1
   1c56a:	f7fa f9ab 	bl	168c4 <__aeabi_dcmpeq>
   1c56e:	2800      	cmp	r0, #0
   1c570:	d000      	beq.n	1c574 <_dtoa_r+0x568>
   1c572:	e77a      	b.n	1c46a <_dtoa_r+0x45e>
   1c574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c576:	9a07      	ldr	r2, [sp, #28]
   1c578:	1c9d      	adds	r5, r3, #2
   1c57a:	469c      	mov	ip, r3
   1c57c:	465b      	mov	r3, fp
   1c57e:	9306      	str	r3, [sp, #24]
   1c580:	4653      	mov	r3, sl
   1c582:	4462      	add	r2, ip
   1c584:	46aa      	mov	sl, r5
   1c586:	9c04      	ldr	r4, [sp, #16]
   1c588:	9d05      	ldr	r5, [sp, #20]
   1c58a:	4691      	mov	r9, r2
   1c58c:	9307      	str	r3, [sp, #28]
   1c58e:	e00f      	b.n	1c5b0 <_dtoa_r+0x5a4>
   1c590:	2200      	movs	r2, #0
   1c592:	4b53      	ldr	r3, [pc, #332]	; (1c6e0 <_dtoa_r+0x6d4>)
   1c594:	f7fc f996 	bl	188c4 <__aeabi_dmul>
   1c598:	2301      	movs	r3, #1
   1c59a:	469c      	mov	ip, r3
   1c59c:	2200      	movs	r2, #0
   1c59e:	2300      	movs	r3, #0
   1c5a0:	0006      	movs	r6, r0
   1c5a2:	000f      	movs	r7, r1
   1c5a4:	44e2      	add	sl, ip
   1c5a6:	f7fa f98d 	bl	168c4 <__aeabi_dcmpeq>
   1c5aa:	2800      	cmp	r0, #0
   1c5ac:	d000      	beq.n	1c5b0 <_dtoa_r+0x5a4>
   1c5ae:	e2d9      	b.n	1cb64 <_dtoa_r+0xb58>
   1c5b0:	0022      	movs	r2, r4
   1c5b2:	002b      	movs	r3, r5
   1c5b4:	0030      	movs	r0, r6
   1c5b6:	0039      	movs	r1, r7
   1c5b8:	f7fb fd50 	bl	1805c <__aeabi_ddiv>
   1c5bc:	f7fc ff18 	bl	193f0 <__aeabi_d2iz>
   1c5c0:	4680      	mov	r8, r0
   1c5c2:	f7fc ff49 	bl	19458 <__aeabi_i2d>
   1c5c6:	0022      	movs	r2, r4
   1c5c8:	002b      	movs	r3, r5
   1c5ca:	f7fc f97b 	bl	188c4 <__aeabi_dmul>
   1c5ce:	0002      	movs	r2, r0
   1c5d0:	000b      	movs	r3, r1
   1c5d2:	0030      	movs	r0, r6
   1c5d4:	0039      	movs	r1, r7
   1c5d6:	f7fc fbf5 	bl	18dc4 <__aeabi_dsub>
   1c5da:	4653      	mov	r3, sl
   1c5dc:	4642      	mov	r2, r8
   1c5de:	3b01      	subs	r3, #1
   1c5e0:	3230      	adds	r2, #48	; 0x30
   1c5e2:	0006      	movs	r6, r0
   1c5e4:	000f      	movs	r7, r1
   1c5e6:	46d3      	mov	fp, sl
   1c5e8:	701a      	strb	r2, [r3, #0]
   1c5ea:	45d1      	cmp	r9, sl
   1c5ec:	d1d0      	bne.n	1c590 <_dtoa_r+0x584>
   1c5ee:	9b06      	ldr	r3, [sp, #24]
   1c5f0:	4654      	mov	r4, sl
   1c5f2:	469b      	mov	fp, r3
   1c5f4:	9b07      	ldr	r3, [sp, #28]
   1c5f6:	469a      	mov	sl, r3
   1c5f8:	0032      	movs	r2, r6
   1c5fa:	003b      	movs	r3, r7
   1c5fc:	0030      	movs	r0, r6
   1c5fe:	0039      	movs	r1, r7
   1c600:	f7fb fa1c 	bl	17a3c <__aeabi_dadd>
   1c604:	0006      	movs	r6, r0
   1c606:	000f      	movs	r7, r1
   1c608:	0002      	movs	r2, r0
   1c60a:	000b      	movs	r3, r1
   1c60c:	9804      	ldr	r0, [sp, #16]
   1c60e:	9905      	ldr	r1, [sp, #20]
   1c610:	f7fa f95e 	bl	168d0 <__aeabi_dcmplt>
   1c614:	2800      	cmp	r0, #0
   1c616:	d10c      	bne.n	1c632 <_dtoa_r+0x626>
   1c618:	9804      	ldr	r0, [sp, #16]
   1c61a:	9905      	ldr	r1, [sp, #20]
   1c61c:	0032      	movs	r2, r6
   1c61e:	003b      	movs	r3, r7
   1c620:	f7fa f950 	bl	168c4 <__aeabi_dcmpeq>
   1c624:	2800      	cmp	r0, #0
   1c626:	d100      	bne.n	1c62a <_dtoa_r+0x61e>
   1c628:	e71f      	b.n	1c46a <_dtoa_r+0x45e>
   1c62a:	4643      	mov	r3, r8
   1c62c:	07db      	lsls	r3, r3, #31
   1c62e:	d400      	bmi.n	1c632 <_dtoa_r+0x626>
   1c630:	e71b      	b.n	1c46a <_dtoa_r+0x45e>
   1c632:	1e65      	subs	r5, r4, #1
   1c634:	782f      	ldrb	r7, [r5, #0]
   1c636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c638:	e006      	b.n	1c648 <_dtoa_r+0x63c>
   1c63a:	429d      	cmp	r5, r3
   1c63c:	d100      	bne.n	1c640 <_dtoa_r+0x634>
   1c63e:	e351      	b.n	1cce4 <_dtoa_r+0xcd8>
   1c640:	3c02      	subs	r4, #2
   1c642:	7827      	ldrb	r7, [r4, #0]
   1c644:	002c      	movs	r4, r5
   1c646:	3d01      	subs	r5, #1
   1c648:	2f39      	cmp	r7, #57	; 0x39
   1c64a:	d0f6      	beq.n	1c63a <_dtoa_r+0x62e>
   1c64c:	3701      	adds	r7, #1
   1c64e:	702f      	strb	r7, [r5, #0]
   1c650:	e70b      	b.n	1c46a <_dtoa_r+0x45e>
   1c652:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c654:	2a00      	cmp	r2, #0
   1c656:	d04f      	beq.n	1c6f8 <_dtoa_r+0x6ec>
   1c658:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c65a:	2a01      	cmp	r2, #1
   1c65c:	dc00      	bgt.n	1c660 <_dtoa_r+0x654>
   1c65e:	e22c      	b.n	1caba <_dtoa_r+0xaae>
   1c660:	9b07      	ldr	r3, [sp, #28]
   1c662:	1e5c      	subs	r4, r3, #1
   1c664:	464b      	mov	r3, r9
   1c666:	45a1      	cmp	r9, r4
   1c668:	da00      	bge.n	1c66c <_dtoa_r+0x660>
   1c66a:	e2b8      	b.n	1cbde <_dtoa_r+0xbd2>
   1c66c:	1b1c      	subs	r4, r3, r4
   1c66e:	9b07      	ldr	r3, [sp, #28]
   1c670:	2b00      	cmp	r3, #0
   1c672:	da00      	bge.n	1c676 <_dtoa_r+0x66a>
   1c674:	e3d4      	b.n	1ce20 <_dtoa_r+0xe14>
   1c676:	9b06      	ldr	r3, [sp, #24]
   1c678:	9308      	str	r3, [sp, #32]
   1c67a:	9b07      	ldr	r3, [sp, #28]
   1c67c:	9a06      	ldr	r2, [sp, #24]
   1c67e:	2101      	movs	r1, #1
   1c680:	4694      	mov	ip, r2
   1c682:	449c      	add	ip, r3
   1c684:	4662      	mov	r2, ip
   1c686:	9206      	str	r2, [sp, #24]
   1c688:	9a04      	ldr	r2, [sp, #16]
   1c68a:	4650      	mov	r0, sl
   1c68c:	4694      	mov	ip, r2
   1c68e:	449c      	add	ip, r3
   1c690:	4663      	mov	r3, ip
   1c692:	9304      	str	r3, [sp, #16]
   1c694:	f001 fa3e 	bl	1db14 <__i2b>
   1c698:	4680      	mov	r8, r0
   1c69a:	e032      	b.n	1c702 <_dtoa_r+0x6f6>
   1c69c:	9a06      	ldr	r2, [sp, #24]
   1c69e:	9b03      	ldr	r3, [sp, #12]
   1c6a0:	1ad2      	subs	r2, r2, r3
   1c6a2:	425b      	negs	r3, r3
   1c6a4:	4699      	mov	r9, r3
   1c6a6:	2300      	movs	r3, #0
   1c6a8:	9206      	str	r2, [sp, #24]
   1c6aa:	930d      	str	r3, [sp, #52]	; 0x34
   1c6ac:	e579      	b.n	1c1a2 <_dtoa_r+0x196>
   1c6ae:	9803      	ldr	r0, [sp, #12]
   1c6b0:	f7fc fed2 	bl	19458 <__aeabi_i2d>
   1c6b4:	000b      	movs	r3, r1
   1c6b6:	0002      	movs	r2, r0
   1c6b8:	0029      	movs	r1, r5
   1c6ba:	0020      	movs	r0, r4
   1c6bc:	f7fa f902 	bl	168c4 <__aeabi_dcmpeq>
   1c6c0:	0002      	movs	r2, r0
   1c6c2:	4250      	negs	r0, r2
   1c6c4:	4150      	adcs	r0, r2
   1c6c6:	9b03      	ldr	r3, [sp, #12]
   1c6c8:	1a1b      	subs	r3, r3, r0
   1c6ca:	9303      	str	r3, [sp, #12]
   1c6cc:	e53d      	b.n	1c14a <_dtoa_r+0x13e>
   1c6ce:	2301      	movs	r3, #1
   1c6d0:	1a9b      	subs	r3, r3, r2
   1c6d2:	9306      	str	r3, [sp, #24]
   1c6d4:	2300      	movs	r3, #0
   1c6d6:	9304      	str	r3, [sp, #16]
   1c6d8:	e557      	b.n	1c18a <_dtoa_r+0x17e>
   1c6da:	46c0      	nop			; (mov r8, r8)
   1c6dc:	3ff00000 	.word	0x3ff00000
   1c6e0:	40240000 	.word	0x40240000
   1c6e4:	00000432 	.word	0x00000432
   1c6e8:	00000412 	.word	0x00000412
   1c6ec:	fe100000 	.word	0xfe100000
   1c6f0:	0001f940 	.word	0x0001f940
   1c6f4:	00020830 	.word	0x00020830
   1c6f8:	9b06      	ldr	r3, [sp, #24]
   1c6fa:	464c      	mov	r4, r9
   1c6fc:	9308      	str	r3, [sp, #32]
   1c6fe:	2300      	movs	r3, #0
   1c700:	4698      	mov	r8, r3
   1c702:	9908      	ldr	r1, [sp, #32]
   1c704:	1e0b      	subs	r3, r1, #0
   1c706:	dd0e      	ble.n	1c726 <_dtoa_r+0x71a>
   1c708:	9a04      	ldr	r2, [sp, #16]
   1c70a:	2a00      	cmp	r2, #0
   1c70c:	dd0b      	ble.n	1c726 <_dtoa_r+0x71a>
   1c70e:	4293      	cmp	r3, r2
   1c710:	dd00      	ble.n	1c714 <_dtoa_r+0x708>
   1c712:	e187      	b.n	1ca24 <_dtoa_r+0xa18>
   1c714:	9a06      	ldr	r2, [sp, #24]
   1c716:	1ad2      	subs	r2, r2, r3
   1c718:	9206      	str	r2, [sp, #24]
   1c71a:	9a08      	ldr	r2, [sp, #32]
   1c71c:	1ad2      	subs	r2, r2, r3
   1c71e:	9208      	str	r2, [sp, #32]
   1c720:	9a04      	ldr	r2, [sp, #16]
   1c722:	1ad3      	subs	r3, r2, r3
   1c724:	9304      	str	r3, [sp, #16]
   1c726:	464b      	mov	r3, r9
   1c728:	2b00      	cmp	r3, #0
   1c72a:	d01a      	beq.n	1c762 <_dtoa_r+0x756>
   1c72c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c72e:	2b00      	cmp	r3, #0
   1c730:	d100      	bne.n	1c734 <_dtoa_r+0x728>
   1c732:	e1bb      	b.n	1caac <_dtoa_r+0xaa0>
   1c734:	2c00      	cmp	r4, #0
   1c736:	dd10      	ble.n	1c75a <_dtoa_r+0x74e>
   1c738:	4641      	mov	r1, r8
   1c73a:	0022      	movs	r2, r4
   1c73c:	4650      	mov	r0, sl
   1c73e:	f001 fa9d 	bl	1dc7c <__pow5mult>
   1c742:	465a      	mov	r2, fp
   1c744:	0001      	movs	r1, r0
   1c746:	4680      	mov	r8, r0
   1c748:	4650      	mov	r0, sl
   1c74a:	f001 f9ed 	bl	1db28 <__multiply>
   1c74e:	0005      	movs	r5, r0
   1c750:	4659      	mov	r1, fp
   1c752:	4650      	mov	r0, sl
   1c754:	f001 f946 	bl	1d9e4 <_Bfree>
   1c758:	46ab      	mov	fp, r5
   1c75a:	464b      	mov	r3, r9
   1c75c:	1b1a      	subs	r2, r3, r4
   1c75e:	d000      	beq.n	1c762 <_dtoa_r+0x756>
   1c760:	e1a5      	b.n	1caae <_dtoa_r+0xaa2>
   1c762:	2101      	movs	r1, #1
   1c764:	4650      	mov	r0, sl
   1c766:	f001 f9d5 	bl	1db14 <__i2b>
   1c76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c76c:	4681      	mov	r9, r0
   1c76e:	2b00      	cmp	r3, #0
   1c770:	dd1d      	ble.n	1c7ae <_dtoa_r+0x7a2>
   1c772:	001a      	movs	r2, r3
   1c774:	0001      	movs	r1, r0
   1c776:	4650      	mov	r0, sl
   1c778:	f001 fa80 	bl	1dc7c <__pow5mult>
   1c77c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c77e:	4681      	mov	r9, r0
   1c780:	2b01      	cmp	r3, #1
   1c782:	dc00      	bgt.n	1c786 <_dtoa_r+0x77a>
   1c784:	e150      	b.n	1ca28 <_dtoa_r+0xa1c>
   1c786:	2400      	movs	r4, #0
   1c788:	464b      	mov	r3, r9
   1c78a:	691b      	ldr	r3, [r3, #16]
   1c78c:	3303      	adds	r3, #3
   1c78e:	009b      	lsls	r3, r3, #2
   1c790:	444b      	add	r3, r9
   1c792:	6858      	ldr	r0, [r3, #4]
   1c794:	f001 f976 	bl	1da84 <__hi0bits>
   1c798:	2320      	movs	r3, #32
   1c79a:	1a1b      	subs	r3, r3, r0
   1c79c:	e010      	b.n	1c7c0 <_dtoa_r+0x7b4>
   1c79e:	2220      	movs	r2, #32
   1c7a0:	0030      	movs	r0, r6
   1c7a2:	1ad3      	subs	r3, r2, r3
   1c7a4:	4098      	lsls	r0, r3
   1c7a6:	e685      	b.n	1c4b4 <_dtoa_r+0x4a8>
   1c7a8:	2300      	movs	r3, #0
   1c7aa:	930c      	str	r3, [sp, #48]	; 0x30
   1c7ac:	e4e3      	b.n	1c176 <_dtoa_r+0x16a>
   1c7ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c7b0:	2400      	movs	r4, #0
   1c7b2:	2b01      	cmp	r3, #1
   1c7b4:	dc00      	bgt.n	1c7b8 <_dtoa_r+0x7ac>
   1c7b6:	e18b      	b.n	1cad0 <_dtoa_r+0xac4>
   1c7b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1c7ba:	2301      	movs	r3, #1
   1c7bc:	2a00      	cmp	r2, #0
   1c7be:	d1e3      	bne.n	1c788 <_dtoa_r+0x77c>
   1c7c0:	9904      	ldr	r1, [sp, #16]
   1c7c2:	201f      	movs	r0, #31
   1c7c4:	468c      	mov	ip, r1
   1c7c6:	4463      	add	r3, ip
   1c7c8:	4018      	ands	r0, r3
   1c7ca:	d100      	bne.n	1c7ce <_dtoa_r+0x7c2>
   1c7cc:	e0ae      	b.n	1c92c <_dtoa_r+0x920>
   1c7ce:	2320      	movs	r3, #32
   1c7d0:	1a1b      	subs	r3, r3, r0
   1c7d2:	2b04      	cmp	r3, #4
   1c7d4:	dc00      	bgt.n	1c7d8 <_dtoa_r+0x7cc>
   1c7d6:	e3cc      	b.n	1cf72 <_dtoa_r+0xf66>
   1c7d8:	231c      	movs	r3, #28
   1c7da:	1a18      	subs	r0, r3, r0
   1c7dc:	9b06      	ldr	r3, [sp, #24]
   1c7de:	469c      	mov	ip, r3
   1c7e0:	4484      	add	ip, r0
   1c7e2:	4663      	mov	r3, ip
   1c7e4:	9306      	str	r3, [sp, #24]
   1c7e6:	9b08      	ldr	r3, [sp, #32]
   1c7e8:	469c      	mov	ip, r3
   1c7ea:	4484      	add	ip, r0
   1c7ec:	4663      	mov	r3, ip
   1c7ee:	468c      	mov	ip, r1
   1c7f0:	4484      	add	ip, r0
   1c7f2:	9308      	str	r3, [sp, #32]
   1c7f4:	4663      	mov	r3, ip
   1c7f6:	9304      	str	r3, [sp, #16]
   1c7f8:	9b06      	ldr	r3, [sp, #24]
   1c7fa:	2b00      	cmp	r3, #0
   1c7fc:	dd05      	ble.n	1c80a <_dtoa_r+0x7fe>
   1c7fe:	4659      	mov	r1, fp
   1c800:	001a      	movs	r2, r3
   1c802:	4650      	mov	r0, sl
   1c804:	f001 fa9a 	bl	1dd3c <__lshift>
   1c808:	4683      	mov	fp, r0
   1c80a:	9b04      	ldr	r3, [sp, #16]
   1c80c:	2b00      	cmp	r3, #0
   1c80e:	dd05      	ble.n	1c81c <_dtoa_r+0x810>
   1c810:	4649      	mov	r1, r9
   1c812:	001a      	movs	r2, r3
   1c814:	4650      	mov	r0, sl
   1c816:	f001 fa91 	bl	1dd3c <__lshift>
   1c81a:	4681      	mov	r9, r0
   1c81c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c81e:	2b00      	cmp	r3, #0
   1c820:	d000      	beq.n	1c824 <_dtoa_r+0x818>
   1c822:	e094      	b.n	1c94e <_dtoa_r+0x942>
   1c824:	9b07      	ldr	r3, [sp, #28]
   1c826:	2b00      	cmp	r3, #0
   1c828:	dc00      	bgt.n	1c82c <_dtoa_r+0x820>
   1c82a:	e175      	b.n	1cb18 <_dtoa_r+0xb0c>
   1c82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c82e:	2b00      	cmp	r3, #0
   1c830:	d100      	bne.n	1c834 <_dtoa_r+0x828>
   1c832:	e0a6      	b.n	1c982 <_dtoa_r+0x976>
   1c834:	9b08      	ldr	r3, [sp, #32]
   1c836:	2b00      	cmp	r3, #0
   1c838:	dd05      	ble.n	1c846 <_dtoa_r+0x83a>
   1c83a:	4641      	mov	r1, r8
   1c83c:	001a      	movs	r2, r3
   1c83e:	4650      	mov	r0, sl
   1c840:	f001 fa7c 	bl	1dd3c <__lshift>
   1c844:	4680      	mov	r8, r0
   1c846:	4643      	mov	r3, r8
   1c848:	930c      	str	r3, [sp, #48]	; 0x30
   1c84a:	2c00      	cmp	r4, #0
   1c84c:	d000      	beq.n	1c850 <_dtoa_r+0x844>
   1c84e:	e250      	b.n	1ccf2 <_dtoa_r+0xce6>
   1c850:	9c07      	ldr	r4, [sp, #28]
   1c852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c854:	3c01      	subs	r4, #1
   1c856:	0023      	movs	r3, r4
   1c858:	4694      	mov	ip, r2
   1c85a:	4463      	add	r3, ip
   1c85c:	9308      	str	r3, [sp, #32]
   1c85e:	2301      	movs	r3, #1
   1c860:	4033      	ands	r3, r6
   1c862:	9307      	str	r3, [sp, #28]
   1c864:	464b      	mov	r3, r9
   1c866:	9306      	str	r3, [sp, #24]
   1c868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c86a:	4657      	mov	r7, sl
   1c86c:	4645      	mov	r5, r8
   1c86e:	465e      	mov	r6, fp
   1c870:	4692      	mov	sl, r2
   1c872:	4698      	mov	r8, r3
   1c874:	9b06      	ldr	r3, [sp, #24]
   1c876:	0030      	movs	r0, r6
   1c878:	0019      	movs	r1, r3
   1c87a:	4699      	mov	r9, r3
   1c87c:	f7ff fb1c 	bl	1beb8 <quorem>
   1c880:	0003      	movs	r3, r0
   1c882:	900b      	str	r0, [sp, #44]	; 0x2c
   1c884:	3330      	adds	r3, #48	; 0x30
   1c886:	0029      	movs	r1, r5
   1c888:	0030      	movs	r0, r6
   1c88a:	9304      	str	r3, [sp, #16]
   1c88c:	f001 fab6 	bl	1ddfc <__mcmp>
   1c890:	4649      	mov	r1, r9
   1c892:	0004      	movs	r4, r0
   1c894:	4642      	mov	r2, r8
   1c896:	0038      	movs	r0, r7
   1c898:	f001 faca 	bl	1de30 <__mdiff>
   1c89c:	68c3      	ldr	r3, [r0, #12]
   1c89e:	4681      	mov	r9, r0
   1c8a0:	2b00      	cmp	r3, #0
   1c8a2:	d000      	beq.n	1c8a6 <_dtoa_r+0x89a>
   1c8a4:	e11e      	b.n	1cae4 <_dtoa_r+0xad8>
   1c8a6:	0001      	movs	r1, r0
   1c8a8:	0030      	movs	r0, r6
   1c8aa:	f001 faa7 	bl	1ddfc <__mcmp>
   1c8ae:	4683      	mov	fp, r0
   1c8b0:	4649      	mov	r1, r9
   1c8b2:	0038      	movs	r0, r7
   1c8b4:	f001 f896 	bl	1d9e4 <_Bfree>
   1c8b8:	465b      	mov	r3, fp
   1c8ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1c8bc:	4313      	orrs	r3, r2
   1c8be:	d103      	bne.n	1c8c8 <_dtoa_r+0x8bc>
   1c8c0:	9b07      	ldr	r3, [sp, #28]
   1c8c2:	2b00      	cmp	r3, #0
   1c8c4:	d100      	bne.n	1c8c8 <_dtoa_r+0x8bc>
   1c8c6:	e306      	b.n	1ced6 <_dtoa_r+0xeca>
   1c8c8:	2c00      	cmp	r4, #0
   1c8ca:	da00      	bge.n	1c8ce <_dtoa_r+0x8c2>
   1c8cc:	e1a8      	b.n	1cc20 <_dtoa_r+0xc14>
   1c8ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1c8d0:	431c      	orrs	r4, r3
   1c8d2:	d103      	bne.n	1c8dc <_dtoa_r+0x8d0>
   1c8d4:	9b07      	ldr	r3, [sp, #28]
   1c8d6:	2b00      	cmp	r3, #0
   1c8d8:	d100      	bne.n	1c8dc <_dtoa_r+0x8d0>
   1c8da:	e1a1      	b.n	1cc20 <_dtoa_r+0xc14>
   1c8dc:	465b      	mov	r3, fp
   1c8de:	2b00      	cmp	r3, #0
   1c8e0:	dd00      	ble.n	1c8e4 <_dtoa_r+0x8d8>
   1c8e2:	e282      	b.n	1cdea <_dtoa_r+0xdde>
   1c8e4:	4669      	mov	r1, sp
   1c8e6:	4652      	mov	r2, sl
   1c8e8:	4653      	mov	r3, sl
   1c8ea:	7c09      	ldrb	r1, [r1, #16]
   1c8ec:	1c5c      	adds	r4, r3, #1
   1c8ee:	7011      	strb	r1, [r2, #0]
   1c8f0:	9a08      	ldr	r2, [sp, #32]
   1c8f2:	4552      	cmp	r2, sl
   1c8f4:	d100      	bne.n	1c8f8 <_dtoa_r+0x8ec>
   1c8f6:	e28a      	b.n	1ce0e <_dtoa_r+0xe02>
   1c8f8:	0031      	movs	r1, r6
   1c8fa:	2300      	movs	r3, #0
   1c8fc:	220a      	movs	r2, #10
   1c8fe:	0038      	movs	r0, r7
   1c900:	f001 f87a 	bl	1d9f8 <__multadd>
   1c904:	2300      	movs	r3, #0
   1c906:	0006      	movs	r6, r0
   1c908:	220a      	movs	r2, #10
   1c90a:	0029      	movs	r1, r5
   1c90c:	0038      	movs	r0, r7
   1c90e:	4545      	cmp	r5, r8
   1c910:	d100      	bne.n	1c914 <_dtoa_r+0x908>
   1c912:	e0e1      	b.n	1cad8 <_dtoa_r+0xacc>
   1c914:	f001 f870 	bl	1d9f8 <__multadd>
   1c918:	4641      	mov	r1, r8
   1c91a:	0005      	movs	r5, r0
   1c91c:	2300      	movs	r3, #0
   1c91e:	220a      	movs	r2, #10
   1c920:	0038      	movs	r0, r7
   1c922:	f001 f869 	bl	1d9f8 <__multadd>
   1c926:	46a2      	mov	sl, r4
   1c928:	4680      	mov	r8, r0
   1c92a:	e7a3      	b.n	1c874 <_dtoa_r+0x868>
   1c92c:	201c      	movs	r0, #28
   1c92e:	9b06      	ldr	r3, [sp, #24]
   1c930:	469c      	mov	ip, r3
   1c932:	4484      	add	ip, r0
   1c934:	4663      	mov	r3, ip
   1c936:	9306      	str	r3, [sp, #24]
   1c938:	9b08      	ldr	r3, [sp, #32]
   1c93a:	469c      	mov	ip, r3
   1c93c:	4484      	add	ip, r0
   1c93e:	4663      	mov	r3, ip
   1c940:	9308      	str	r3, [sp, #32]
   1c942:	9b04      	ldr	r3, [sp, #16]
   1c944:	469c      	mov	ip, r3
   1c946:	4484      	add	ip, r0
   1c948:	4663      	mov	r3, ip
   1c94a:	9304      	str	r3, [sp, #16]
   1c94c:	e754      	b.n	1c7f8 <_dtoa_r+0x7ec>
   1c94e:	4649      	mov	r1, r9
   1c950:	4658      	mov	r0, fp
   1c952:	f001 fa53 	bl	1ddfc <__mcmp>
   1c956:	2800      	cmp	r0, #0
   1c958:	db00      	blt.n	1c95c <_dtoa_r+0x950>
   1c95a:	e763      	b.n	1c824 <_dtoa_r+0x818>
   1c95c:	9b03      	ldr	r3, [sp, #12]
   1c95e:	4659      	mov	r1, fp
   1c960:	3b01      	subs	r3, #1
   1c962:	9303      	str	r3, [sp, #12]
   1c964:	220a      	movs	r2, #10
   1c966:	2300      	movs	r3, #0
   1c968:	4650      	mov	r0, sl
   1c96a:	f001 f845 	bl	1d9f8 <__multadd>
   1c96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c970:	4683      	mov	fp, r0
   1c972:	2b00      	cmp	r3, #0
   1c974:	d000      	beq.n	1c978 <_dtoa_r+0x96c>
   1c976:	e2ca      	b.n	1cf0e <_dtoa_r+0xf02>
   1c978:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c97a:	2b00      	cmp	r3, #0
   1c97c:	dc00      	bgt.n	1c980 <_dtoa_r+0x974>
   1c97e:	e2d8      	b.n	1cf32 <_dtoa_r+0xf26>
   1c980:	9307      	str	r3, [sp, #28]
   1c982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c984:	465d      	mov	r5, fp
   1c986:	2400      	movs	r4, #0
   1c988:	9f07      	ldr	r7, [sp, #28]
   1c98a:	469b      	mov	fp, r3
   1c98c:	e006      	b.n	1c99c <_dtoa_r+0x990>
   1c98e:	0029      	movs	r1, r5
   1c990:	2300      	movs	r3, #0
   1c992:	220a      	movs	r2, #10
   1c994:	4650      	mov	r0, sl
   1c996:	f001 f82f 	bl	1d9f8 <__multadd>
   1c99a:	0005      	movs	r5, r0
   1c99c:	4649      	mov	r1, r9
   1c99e:	0028      	movs	r0, r5
   1c9a0:	f7ff fa8a 	bl	1beb8 <quorem>
   1c9a4:	465b      	mov	r3, fp
   1c9a6:	3030      	adds	r0, #48	; 0x30
   1c9a8:	5518      	strb	r0, [r3, r4]
   1c9aa:	3401      	adds	r4, #1
   1c9ac:	42bc      	cmp	r4, r7
   1c9ae:	dbee      	blt.n	1c98e <_dtoa_r+0x982>
   1c9b0:	46ab      	mov	fp, r5
   1c9b2:	0006      	movs	r6, r0
   1c9b4:	9c07      	ldr	r4, [sp, #28]
   1c9b6:	2c00      	cmp	r4, #0
   1c9b8:	dc00      	bgt.n	1c9bc <_dtoa_r+0x9b0>
   1c9ba:	e237      	b.n	1ce2c <_dtoa_r+0xe20>
   1c9bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c9be:	2700      	movs	r7, #0
   1c9c0:	469c      	mov	ip, r3
   1c9c2:	4464      	add	r4, ip
   1c9c4:	4659      	mov	r1, fp
   1c9c6:	2201      	movs	r2, #1
   1c9c8:	4650      	mov	r0, sl
   1c9ca:	f001 f9b7 	bl	1dd3c <__lshift>
   1c9ce:	4649      	mov	r1, r9
   1c9d0:	4683      	mov	fp, r0
   1c9d2:	f001 fa13 	bl	1ddfc <__mcmp>
   1c9d6:	2800      	cmp	r0, #0
   1c9d8:	dc00      	bgt.n	1c9dc <_dtoa_r+0x9d0>
   1c9da:	e144      	b.n	1cc66 <_dtoa_r+0xc5a>
   1c9dc:	1e65      	subs	r5, r4, #1
   1c9de:	782b      	ldrb	r3, [r5, #0]
   1c9e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c9e2:	e006      	b.n	1c9f2 <_dtoa_r+0x9e6>
   1c9e4:	4295      	cmp	r5, r2
   1c9e6:	d100      	bne.n	1c9ea <_dtoa_r+0x9de>
   1c9e8:	e0b1      	b.n	1cb4e <_dtoa_r+0xb42>
   1c9ea:	3c02      	subs	r4, #2
   1c9ec:	7823      	ldrb	r3, [r4, #0]
   1c9ee:	002c      	movs	r4, r5
   1c9f0:	3d01      	subs	r5, #1
   1c9f2:	2b39      	cmp	r3, #57	; 0x39
   1c9f4:	d0f6      	beq.n	1c9e4 <_dtoa_r+0x9d8>
   1c9f6:	3301      	adds	r3, #1
   1c9f8:	702b      	strb	r3, [r5, #0]
   1c9fa:	4649      	mov	r1, r9
   1c9fc:	4650      	mov	r0, sl
   1c9fe:	f000 fff1 	bl	1d9e4 <_Bfree>
   1ca02:	4643      	mov	r3, r8
   1ca04:	2b00      	cmp	r3, #0
   1ca06:	d100      	bne.n	1ca0a <_dtoa_r+0x9fe>
   1ca08:	e52f      	b.n	1c46a <_dtoa_r+0x45e>
   1ca0a:	2f00      	cmp	r7, #0
   1ca0c:	d005      	beq.n	1ca1a <_dtoa_r+0xa0e>
   1ca0e:	4547      	cmp	r7, r8
   1ca10:	d003      	beq.n	1ca1a <_dtoa_r+0xa0e>
   1ca12:	0039      	movs	r1, r7
   1ca14:	4650      	mov	r0, sl
   1ca16:	f000 ffe5 	bl	1d9e4 <_Bfree>
   1ca1a:	4641      	mov	r1, r8
   1ca1c:	4650      	mov	r0, sl
   1ca1e:	f000 ffe1 	bl	1d9e4 <_Bfree>
   1ca22:	e522      	b.n	1c46a <_dtoa_r+0x45e>
   1ca24:	0013      	movs	r3, r2
   1ca26:	e675      	b.n	1c714 <_dtoa_r+0x708>
   1ca28:	2e00      	cmp	r6, #0
   1ca2a:	d000      	beq.n	1ca2e <_dtoa_r+0xa22>
   1ca2c:	e6ab      	b.n	1c786 <_dtoa_r+0x77a>
   1ca2e:	033b      	lsls	r3, r7, #12
   1ca30:	2400      	movs	r4, #0
   1ca32:	2b00      	cmp	r3, #0
   1ca34:	d000      	beq.n	1ca38 <_dtoa_r+0xa2c>
   1ca36:	e6bf      	b.n	1c7b8 <_dtoa_r+0x7ac>
   1ca38:	4bba      	ldr	r3, [pc, #744]	; (1cd24 <_dtoa_r+0xd18>)
   1ca3a:	423b      	tst	r3, r7
   1ca3c:	d100      	bne.n	1ca40 <_dtoa_r+0xa34>
   1ca3e:	e6bb      	b.n	1c7b8 <_dtoa_r+0x7ac>
   1ca40:	9b06      	ldr	r3, [sp, #24]
   1ca42:	3401      	adds	r4, #1
   1ca44:	3301      	adds	r3, #1
   1ca46:	9306      	str	r3, [sp, #24]
   1ca48:	9b04      	ldr	r3, [sp, #16]
   1ca4a:	3301      	adds	r3, #1
   1ca4c:	9304      	str	r3, [sp, #16]
   1ca4e:	e6b3      	b.n	1c7b8 <_dtoa_r+0x7ac>
   1ca50:	2301      	movs	r3, #1
   1ca52:	930b      	str	r3, [sp, #44]	; 0x2c
   1ca54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ca56:	2b00      	cmp	r3, #0
   1ca58:	dc00      	bgt.n	1ca5c <_dtoa_r+0xa50>
   1ca5a:	e0d1      	b.n	1cc00 <_dtoa_r+0xbf4>
   1ca5c:	001d      	movs	r5, r3
   1ca5e:	4698      	mov	r8, r3
   1ca60:	930e      	str	r3, [sp, #56]	; 0x38
   1ca62:	9307      	str	r3, [sp, #28]
   1ca64:	f7ff fbc8 	bl	1c1f8 <_dtoa_r+0x1ec>
   1ca68:	9b07      	ldr	r3, [sp, #28]
   1ca6a:	2b00      	cmp	r3, #0
   1ca6c:	dd00      	ble.n	1ca70 <_dtoa_r+0xa64>
   1ca6e:	e553      	b.n	1c518 <_dtoa_r+0x50c>
   1ca70:	d000      	beq.n	1ca74 <_dtoa_r+0xa68>
   1ca72:	e0ad      	b.n	1cbd0 <_dtoa_r+0xbc4>
   1ca74:	9804      	ldr	r0, [sp, #16]
   1ca76:	9905      	ldr	r1, [sp, #20]
   1ca78:	2200      	movs	r2, #0
   1ca7a:	4bab      	ldr	r3, [pc, #684]	; (1cd28 <_dtoa_r+0xd1c>)
   1ca7c:	f7fb ff22 	bl	188c4 <__aeabi_dmul>
   1ca80:	003b      	movs	r3, r7
   1ca82:	0032      	movs	r2, r6
   1ca84:	f7f9 ff42 	bl	1690c <__aeabi_dcmpge>
   1ca88:	2300      	movs	r3, #0
   1ca8a:	4699      	mov	r9, r3
   1ca8c:	4698      	mov	r8, r3
   1ca8e:	2800      	cmp	r0, #0
   1ca90:	d055      	beq.n	1cb3e <_dtoa_r+0xb32>
   1ca92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ca94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1ca96:	43db      	mvns	r3, r3
   1ca98:	9303      	str	r3, [sp, #12]
   1ca9a:	4649      	mov	r1, r9
   1ca9c:	4650      	mov	r0, sl
   1ca9e:	f000 ffa1 	bl	1d9e4 <_Bfree>
   1caa2:	4643      	mov	r3, r8
   1caa4:	2b00      	cmp	r3, #0
   1caa6:	d100      	bne.n	1caaa <_dtoa_r+0xa9e>
   1caa8:	e4df      	b.n	1c46a <_dtoa_r+0x45e>
   1caaa:	e7b6      	b.n	1ca1a <_dtoa_r+0xa0e>
   1caac:	464a      	mov	r2, r9
   1caae:	4659      	mov	r1, fp
   1cab0:	4650      	mov	r0, sl
   1cab2:	f001 f8e3 	bl	1dc7c <__pow5mult>
   1cab6:	4683      	mov	fp, r0
   1cab8:	e653      	b.n	1c762 <_dtoa_r+0x756>
   1caba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1cabc:	2a00      	cmp	r2, #0
   1cabe:	d100      	bne.n	1cac2 <_dtoa_r+0xab6>
   1cac0:	e1b6      	b.n	1ce30 <_dtoa_r+0xe24>
   1cac2:	4a9a      	ldr	r2, [pc, #616]	; (1cd2c <_dtoa_r+0xd20>)
   1cac4:	464c      	mov	r4, r9
   1cac6:	4694      	mov	ip, r2
   1cac8:	9a06      	ldr	r2, [sp, #24]
   1caca:	4463      	add	r3, ip
   1cacc:	9208      	str	r2, [sp, #32]
   1cace:	e5d5      	b.n	1c67c <_dtoa_r+0x670>
   1cad0:	2e00      	cmp	r6, #0
   1cad2:	d000      	beq.n	1cad6 <_dtoa_r+0xaca>
   1cad4:	e670      	b.n	1c7b8 <_dtoa_r+0x7ac>
   1cad6:	e7aa      	b.n	1ca2e <_dtoa_r+0xa22>
   1cad8:	f000 ff8e 	bl	1d9f8 <__multadd>
   1cadc:	46a2      	mov	sl, r4
   1cade:	0005      	movs	r5, r0
   1cae0:	4680      	mov	r8, r0
   1cae2:	e6c7      	b.n	1c874 <_dtoa_r+0x868>
   1cae4:	2301      	movs	r3, #1
   1cae6:	469b      	mov	fp, r3
   1cae8:	e6e2      	b.n	1c8b0 <_dtoa_r+0x8a4>
   1caea:	2300      	movs	r3, #0
   1caec:	930b      	str	r3, [sp, #44]	; 0x2c
   1caee:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1caf0:	2b02      	cmp	r3, #2
   1caf2:	d0af      	beq.n	1ca54 <_dtoa_r+0xa48>
   1caf4:	2400      	movs	r4, #0
   1caf6:	4653      	mov	r3, sl
   1caf8:	0021      	movs	r1, r4
   1cafa:	645c      	str	r4, [r3, #68]	; 0x44
   1cafc:	4650      	mov	r0, sl
   1cafe:	f000 ff49 	bl	1d994 <_Balloc>
   1cb02:	4653      	mov	r3, sl
   1cb04:	6418      	str	r0, [r3, #64]	; 0x40
   1cb06:	2301      	movs	r3, #1
   1cb08:	425b      	negs	r3, r3
   1cb0a:	9307      	str	r3, [sp, #28]
   1cb0c:	930e      	str	r3, [sp, #56]	; 0x38
   1cb0e:	3302      	adds	r3, #2
   1cb10:	900a      	str	r0, [sp, #40]	; 0x28
   1cb12:	9423      	str	r4, [sp, #140]	; 0x8c
   1cb14:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb16:	e4ec      	b.n	1c4f2 <_dtoa_r+0x4e6>
   1cb18:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cb1a:	2b02      	cmp	r3, #2
   1cb1c:	dc00      	bgt.n	1cb20 <_dtoa_r+0xb14>
   1cb1e:	e685      	b.n	1c82c <_dtoa_r+0x820>
   1cb20:	9b07      	ldr	r3, [sp, #28]
   1cb22:	2b00      	cmp	r3, #0
   1cb24:	d1b5      	bne.n	1ca92 <_dtoa_r+0xa86>
   1cb26:	4649      	mov	r1, r9
   1cb28:	2205      	movs	r2, #5
   1cb2a:	4650      	mov	r0, sl
   1cb2c:	f000 ff64 	bl	1d9f8 <__multadd>
   1cb30:	4681      	mov	r9, r0
   1cb32:	0001      	movs	r1, r0
   1cb34:	4658      	mov	r0, fp
   1cb36:	f001 f961 	bl	1ddfc <__mcmp>
   1cb3a:	2800      	cmp	r0, #0
   1cb3c:	dda9      	ble.n	1ca92 <_dtoa_r+0xa86>
   1cb3e:	2331      	movs	r3, #49	; 0x31
   1cb40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cb42:	7013      	strb	r3, [r2, #0]
   1cb44:	9b03      	ldr	r3, [sp, #12]
   1cb46:	1c54      	adds	r4, r2, #1
   1cb48:	3301      	adds	r3, #1
   1cb4a:	9303      	str	r3, [sp, #12]
   1cb4c:	e7a5      	b.n	1ca9a <_dtoa_r+0xa8e>
   1cb4e:	9b03      	ldr	r3, [sp, #12]
   1cb50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cb52:	3301      	adds	r3, #1
   1cb54:	9303      	str	r3, [sp, #12]
   1cb56:	2331      	movs	r3, #49	; 0x31
   1cb58:	7013      	strb	r3, [r2, #0]
   1cb5a:	e74e      	b.n	1c9fa <_dtoa_r+0x9ee>
   1cb5c:	2300      	movs	r3, #0
   1cb5e:	930b      	str	r3, [sp, #44]	; 0x2c
   1cb60:	f7ff fb3d 	bl	1c1de <_dtoa_r+0x1d2>
   1cb64:	9b06      	ldr	r3, [sp, #24]
   1cb66:	465c      	mov	r4, fp
   1cb68:	469b      	mov	fp, r3
   1cb6a:	9b07      	ldr	r3, [sp, #28]
   1cb6c:	469a      	mov	sl, r3
   1cb6e:	e47c      	b.n	1c46a <_dtoa_r+0x45e>
   1cb70:	4640      	mov	r0, r8
   1cb72:	f7fc fc71 	bl	19458 <__aeabi_i2d>
   1cb76:	0032      	movs	r2, r6
   1cb78:	003b      	movs	r3, r7
   1cb7a:	f7fb fea3 	bl	188c4 <__aeabi_dmul>
   1cb7e:	2200      	movs	r2, #0
   1cb80:	4b6b      	ldr	r3, [pc, #428]	; (1cd30 <_dtoa_r+0xd24>)
   1cb82:	f7fa ff5b 	bl	17a3c <__aeabi_dadd>
   1cb86:	4a6b      	ldr	r2, [pc, #428]	; (1cd34 <_dtoa_r+0xd28>)
   1cb88:	000b      	movs	r3, r1
   1cb8a:	4694      	mov	ip, r2
   1cb8c:	4463      	add	r3, ip
   1cb8e:	9008      	str	r0, [sp, #32]
   1cb90:	9109      	str	r1, [sp, #36]	; 0x24
   1cb92:	9309      	str	r3, [sp, #36]	; 0x24
   1cb94:	2200      	movs	r2, #0
   1cb96:	4b64      	ldr	r3, [pc, #400]	; (1cd28 <_dtoa_r+0xd1c>)
   1cb98:	0030      	movs	r0, r6
   1cb9a:	0039      	movs	r1, r7
   1cb9c:	f7fc f912 	bl	18dc4 <__aeabi_dsub>
   1cba0:	9e08      	ldr	r6, [sp, #32]
   1cba2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1cba4:	0032      	movs	r2, r6
   1cba6:	003b      	movs	r3, r7
   1cba8:	0004      	movs	r4, r0
   1cbaa:	000d      	movs	r5, r1
   1cbac:	f7f9 fea4 	bl	168f8 <__aeabi_dcmpgt>
   1cbb0:	2800      	cmp	r0, #0
   1cbb2:	d000      	beq.n	1cbb6 <_dtoa_r+0xbaa>
   1cbb4:	e0b2      	b.n	1cd1c <_dtoa_r+0xd10>
   1cbb6:	2080      	movs	r0, #128	; 0x80
   1cbb8:	0600      	lsls	r0, r0, #24
   1cbba:	4684      	mov	ip, r0
   1cbbc:	0039      	movs	r1, r7
   1cbbe:	4461      	add	r1, ip
   1cbc0:	000b      	movs	r3, r1
   1cbc2:	0032      	movs	r2, r6
   1cbc4:	0020      	movs	r0, r4
   1cbc6:	0029      	movs	r1, r5
   1cbc8:	f7f9 fe82 	bl	168d0 <__aeabi_dcmplt>
   1cbcc:	2800      	cmp	r0, #0
   1cbce:	d057      	beq.n	1cc80 <_dtoa_r+0xc74>
   1cbd0:	2300      	movs	r3, #0
   1cbd2:	4699      	mov	r9, r3
   1cbd4:	4698      	mov	r8, r3
   1cbd6:	e75c      	b.n	1ca92 <_dtoa_r+0xa86>
   1cbd8:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cbda:	f7ff fa4c 	bl	1c076 <_dtoa_r+0x6a>
   1cbde:	1ae2      	subs	r2, r4, r3
   1cbe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cbe2:	46a1      	mov	r9, r4
   1cbe4:	469c      	mov	ip, r3
   1cbe6:	4494      	add	ip, r2
   1cbe8:	4663      	mov	r3, ip
   1cbea:	2400      	movs	r4, #0
   1cbec:	930d      	str	r3, [sp, #52]	; 0x34
   1cbee:	e53e      	b.n	1c66e <_dtoa_r+0x662>
   1cbf0:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1cbf2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1cbf4:	9208      	str	r2, [sp, #32]
   1cbf6:	9309      	str	r3, [sp, #36]	; 0x24
   1cbf8:	2302      	movs	r3, #2
   1cbfa:	4698      	mov	r8, r3
   1cbfc:	f7ff fb3a 	bl	1c274 <_dtoa_r+0x268>
   1cc00:	2300      	movs	r3, #0
   1cc02:	4652      	mov	r2, sl
   1cc04:	2100      	movs	r1, #0
   1cc06:	6453      	str	r3, [r2, #68]	; 0x44
   1cc08:	4650      	mov	r0, sl
   1cc0a:	f000 fec3 	bl	1d994 <_Balloc>
   1cc0e:	4653      	mov	r3, sl
   1cc10:	6418      	str	r0, [r3, #64]	; 0x40
   1cc12:	2301      	movs	r3, #1
   1cc14:	900a      	str	r0, [sp, #40]	; 0x28
   1cc16:	9307      	str	r3, [sp, #28]
   1cc18:	9323      	str	r3, [sp, #140]	; 0x8c
   1cc1a:	930e      	str	r3, [sp, #56]	; 0x38
   1cc1c:	f7ff fb07 	bl	1c22e <_dtoa_r+0x222>
   1cc20:	4643      	mov	r3, r8
   1cc22:	930c      	str	r3, [sp, #48]	; 0x30
   1cc24:	465b      	mov	r3, fp
   1cc26:	9a06      	ldr	r2, [sp, #24]
   1cc28:	46a8      	mov	r8, r5
   1cc2a:	46b3      	mov	fp, r6
   1cc2c:	4655      	mov	r5, sl
   1cc2e:	9e04      	ldr	r6, [sp, #16]
   1cc30:	4691      	mov	r9, r2
   1cc32:	46ba      	mov	sl, r7
   1cc34:	2b00      	cmp	r3, #0
   1cc36:	dd10      	ble.n	1cc5a <_dtoa_r+0xc4e>
   1cc38:	4659      	mov	r1, fp
   1cc3a:	2201      	movs	r2, #1
   1cc3c:	0038      	movs	r0, r7
   1cc3e:	f001 f87d 	bl	1dd3c <__lshift>
   1cc42:	4649      	mov	r1, r9
   1cc44:	4683      	mov	fp, r0
   1cc46:	f001 f8d9 	bl	1ddfc <__mcmp>
   1cc4a:	2800      	cmp	r0, #0
   1cc4c:	dc00      	bgt.n	1cc50 <_dtoa_r+0xc44>
   1cc4e:	e157      	b.n	1cf00 <_dtoa_r+0xef4>
   1cc50:	2e39      	cmp	r6, #57	; 0x39
   1cc52:	d100      	bne.n	1cc56 <_dtoa_r+0xc4a>
   1cc54:	e122      	b.n	1ce9c <_dtoa_r+0xe90>
   1cc56:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1cc58:	3631      	adds	r6, #49	; 0x31
   1cc5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cc5c:	4647      	mov	r7, r8
   1cc5e:	1c6c      	adds	r4, r5, #1
   1cc60:	702e      	strb	r6, [r5, #0]
   1cc62:	4698      	mov	r8, r3
   1cc64:	e6c9      	b.n	1c9fa <_dtoa_r+0x9ee>
   1cc66:	2800      	cmp	r0, #0
   1cc68:	d103      	bne.n	1cc72 <_dtoa_r+0xc66>
   1cc6a:	07f3      	lsls	r3, r6, #31
   1cc6c:	d501      	bpl.n	1cc72 <_dtoa_r+0xc66>
   1cc6e:	e6b5      	b.n	1c9dc <_dtoa_r+0x9d0>
   1cc70:	001c      	movs	r4, r3
   1cc72:	1e63      	subs	r3, r4, #1
   1cc74:	781a      	ldrb	r2, [r3, #0]
   1cc76:	2a30      	cmp	r2, #48	; 0x30
   1cc78:	d0fa      	beq.n	1cc70 <_dtoa_r+0xc64>
   1cc7a:	e6be      	b.n	1c9fa <_dtoa_r+0x9ee>
   1cc7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cc7e:	4699      	mov	r9, r3
   1cc80:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1cc82:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1cc84:	e435      	b.n	1c4f2 <_dtoa_r+0x4e6>
   1cc86:	2501      	movs	r5, #1
   1cc88:	f7ff fab4 	bl	1c1f4 <_dtoa_r+0x1e8>
   1cc8c:	9b03      	ldr	r3, [sp, #12]
   1cc8e:	2b00      	cmp	r3, #0
   1cc90:	d100      	bne.n	1cc94 <_dtoa_r+0xc88>
   1cc92:	e0d4      	b.n	1ce3e <_dtoa_r+0xe32>
   1cc94:	9810      	ldr	r0, [sp, #64]	; 0x40
   1cc96:	9911      	ldr	r1, [sp, #68]	; 0x44
   1cc98:	425c      	negs	r4, r3
   1cc9a:	230f      	movs	r3, #15
   1cc9c:	4a26      	ldr	r2, [pc, #152]	; (1cd38 <_dtoa_r+0xd2c>)
   1cc9e:	4023      	ands	r3, r4
   1cca0:	00db      	lsls	r3, r3, #3
   1cca2:	18d3      	adds	r3, r2, r3
   1cca4:	681a      	ldr	r2, [r3, #0]
   1cca6:	685b      	ldr	r3, [r3, #4]
   1cca8:	f7fb fe0c 	bl	188c4 <__aeabi_dmul>
   1ccac:	1124      	asrs	r4, r4, #4
   1ccae:	0006      	movs	r6, r0
   1ccb0:	000f      	movs	r7, r1
   1ccb2:	2c00      	cmp	r4, #0
   1ccb4:	d100      	bne.n	1ccb8 <_dtoa_r+0xcac>
   1ccb6:	e149      	b.n	1cf4c <_dtoa_r+0xf40>
   1ccb8:	2302      	movs	r3, #2
   1ccba:	4698      	mov	r8, r3
   1ccbc:	4d1f      	ldr	r5, [pc, #124]	; (1cd3c <_dtoa_r+0xd30>)
   1ccbe:	2301      	movs	r3, #1
   1ccc0:	4223      	tst	r3, r4
   1ccc2:	d009      	beq.n	1ccd8 <_dtoa_r+0xccc>
   1ccc4:	469c      	mov	ip, r3
   1ccc6:	682a      	ldr	r2, [r5, #0]
   1ccc8:	686b      	ldr	r3, [r5, #4]
   1ccca:	0030      	movs	r0, r6
   1cccc:	0039      	movs	r1, r7
   1ccce:	44e0      	add	r8, ip
   1ccd0:	f7fb fdf8 	bl	188c4 <__aeabi_dmul>
   1ccd4:	0006      	movs	r6, r0
   1ccd6:	000f      	movs	r7, r1
   1ccd8:	1064      	asrs	r4, r4, #1
   1ccda:	3508      	adds	r5, #8
   1ccdc:	2c00      	cmp	r4, #0
   1ccde:	d1ee      	bne.n	1ccbe <_dtoa_r+0xcb2>
   1cce0:	f7ff fae4 	bl	1c2ac <_dtoa_r+0x2a0>
   1cce4:	9b03      	ldr	r3, [sp, #12]
   1cce6:	2730      	movs	r7, #48	; 0x30
   1cce8:	3301      	adds	r3, #1
   1ccea:	9303      	str	r3, [sp, #12]
   1ccec:	2330      	movs	r3, #48	; 0x30
   1ccee:	702b      	strb	r3, [r5, #0]
   1ccf0:	e4ac      	b.n	1c64c <_dtoa_r+0x640>
   1ccf2:	6859      	ldr	r1, [r3, #4]
   1ccf4:	4650      	mov	r0, sl
   1ccf6:	f000 fe4d 	bl	1d994 <_Balloc>
   1ccfa:	4643      	mov	r3, r8
   1ccfc:	4641      	mov	r1, r8
   1ccfe:	0004      	movs	r4, r0
   1cd00:	691b      	ldr	r3, [r3, #16]
   1cd02:	310c      	adds	r1, #12
   1cd04:	1c9a      	adds	r2, r3, #2
   1cd06:	0092      	lsls	r2, r2, #2
   1cd08:	300c      	adds	r0, #12
   1cd0a:	f7fd f807 	bl	19d1c <memcpy>
   1cd0e:	2201      	movs	r2, #1
   1cd10:	0021      	movs	r1, r4
   1cd12:	4650      	mov	r0, sl
   1cd14:	f001 f812 	bl	1dd3c <__lshift>
   1cd18:	900c      	str	r0, [sp, #48]	; 0x30
   1cd1a:	e599      	b.n	1c850 <_dtoa_r+0x844>
   1cd1c:	2300      	movs	r3, #0
   1cd1e:	4699      	mov	r9, r3
   1cd20:	4698      	mov	r8, r3
   1cd22:	e70c      	b.n	1cb3e <_dtoa_r+0xb32>
   1cd24:	7ff00000 	.word	0x7ff00000
   1cd28:	40140000 	.word	0x40140000
   1cd2c:	00000433 	.word	0x00000433
   1cd30:	401c0000 	.word	0x401c0000
   1cd34:	fcc00000 	.word	0xfcc00000
   1cd38:	00020830 	.word	0x00020830
   1cd3c:	00020808 	.word	0x00020808
   1cd40:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cd42:	498f      	ldr	r1, [pc, #572]	; (1cf80 <_dtoa_r+0xf74>)
   1cd44:	3b01      	subs	r3, #1
   1cd46:	00db      	lsls	r3, r3, #3
   1cd48:	18c9      	adds	r1, r1, r3
   1cd4a:	6808      	ldr	r0, [r1, #0]
   1cd4c:	6849      	ldr	r1, [r1, #4]
   1cd4e:	9a08      	ldr	r2, [sp, #32]
   1cd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cd52:	f7fb fdb7 	bl	188c4 <__aeabi_dmul>
   1cd56:	9014      	str	r0, [sp, #80]	; 0x50
   1cd58:	9115      	str	r1, [sp, #84]	; 0x54
   1cd5a:	0039      	movs	r1, r7
   1cd5c:	0030      	movs	r0, r6
   1cd5e:	f7fc fb47 	bl	193f0 <__aeabi_d2iz>
   1cd62:	0005      	movs	r5, r0
   1cd64:	f7fc fb78 	bl	19458 <__aeabi_i2d>
   1cd68:	0002      	movs	r2, r0
   1cd6a:	000b      	movs	r3, r1
   1cd6c:	0030      	movs	r0, r6
   1cd6e:	0039      	movs	r1, r7
   1cd70:	f7fc f828 	bl	18dc4 <__aeabi_dsub>
   1cd74:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1cd76:	9008      	str	r0, [sp, #32]
   1cd78:	9109      	str	r1, [sp, #36]	; 0x24
   1cd7a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cd7c:	001a      	movs	r2, r3
   1cd7e:	468c      	mov	ip, r1
   1cd80:	3530      	adds	r5, #48	; 0x30
   1cd82:	4462      	add	r2, ip
   1cd84:	1c4c      	adds	r4, r1, #1
   1cd86:	700d      	strb	r5, [r1, #0]
   1cd88:	4690      	mov	r8, r2
   1cd8a:	2b01      	cmp	r3, #1
   1cd8c:	d01b      	beq.n	1cdc6 <_dtoa_r+0xdba>
   1cd8e:	9808      	ldr	r0, [sp, #32]
   1cd90:	9909      	ldr	r1, [sp, #36]	; 0x24
   1cd92:	0025      	movs	r5, r4
   1cd94:	2200      	movs	r2, #0
   1cd96:	4b7b      	ldr	r3, [pc, #492]	; (1cf84 <_dtoa_r+0xf78>)
   1cd98:	f7fb fd94 	bl	188c4 <__aeabi_dmul>
   1cd9c:	000f      	movs	r7, r1
   1cd9e:	0006      	movs	r6, r0
   1cda0:	f7fc fb26 	bl	193f0 <__aeabi_d2iz>
   1cda4:	0004      	movs	r4, r0
   1cda6:	f7fc fb57 	bl	19458 <__aeabi_i2d>
   1cdaa:	3430      	adds	r4, #48	; 0x30
   1cdac:	0002      	movs	r2, r0
   1cdae:	000b      	movs	r3, r1
   1cdb0:	0030      	movs	r0, r6
   1cdb2:	0039      	movs	r1, r7
   1cdb4:	f7fc f806 	bl	18dc4 <__aeabi_dsub>
   1cdb8:	702c      	strb	r4, [r5, #0]
   1cdba:	3501      	adds	r5, #1
   1cdbc:	45a8      	cmp	r8, r5
   1cdbe:	d1e9      	bne.n	1cd94 <_dtoa_r+0xd88>
   1cdc0:	4644      	mov	r4, r8
   1cdc2:	9008      	str	r0, [sp, #32]
   1cdc4:	9109      	str	r1, [sp, #36]	; 0x24
   1cdc6:	9814      	ldr	r0, [sp, #80]	; 0x50
   1cdc8:	9915      	ldr	r1, [sp, #84]	; 0x54
   1cdca:	2200      	movs	r2, #0
   1cdcc:	4b6e      	ldr	r3, [pc, #440]	; (1cf88 <_dtoa_r+0xf7c>)
   1cdce:	f7fa fe35 	bl	17a3c <__aeabi_dadd>
   1cdd2:	9a08      	ldr	r2, [sp, #32]
   1cdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cdd6:	f7f9 fd7b 	bl	168d0 <__aeabi_dcmplt>
   1cdda:	2800      	cmp	r0, #0
   1cddc:	d067      	beq.n	1ceae <_dtoa_r+0xea2>
   1cdde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cde0:	1e65      	subs	r5, r4, #1
   1cde2:	9303      	str	r3, [sp, #12]
   1cde4:	782f      	ldrb	r7, [r5, #0]
   1cde6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cde8:	e42e      	b.n	1c648 <_dtoa_r+0x63c>
   1cdea:	4643      	mov	r3, r8
   1cdec:	46b3      	mov	fp, r6
   1cdee:	930c      	str	r3, [sp, #48]	; 0x30
   1cdf0:	9e04      	ldr	r6, [sp, #16]
   1cdf2:	9b06      	ldr	r3, [sp, #24]
   1cdf4:	46a8      	mov	r8, r5
   1cdf6:	4699      	mov	r9, r3
   1cdf8:	4655      	mov	r5, sl
   1cdfa:	46ba      	mov	sl, r7
   1cdfc:	2e39      	cmp	r6, #57	; 0x39
   1cdfe:	d04d      	beq.n	1ce9c <_dtoa_r+0xe90>
   1ce00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ce02:	3601      	adds	r6, #1
   1ce04:	4647      	mov	r7, r8
   1ce06:	1c6c      	adds	r4, r5, #1
   1ce08:	702e      	strb	r6, [r5, #0]
   1ce0a:	4698      	mov	r8, r3
   1ce0c:	e5f5      	b.n	1c9fa <_dtoa_r+0x9ee>
   1ce0e:	4642      	mov	r2, r8
   1ce10:	9b06      	ldr	r3, [sp, #24]
   1ce12:	46b3      	mov	fp, r6
   1ce14:	46ba      	mov	sl, r7
   1ce16:	9e04      	ldr	r6, [sp, #16]
   1ce18:	4699      	mov	r9, r3
   1ce1a:	002f      	movs	r7, r5
   1ce1c:	4690      	mov	r8, r2
   1ce1e:	e5d1      	b.n	1c9c4 <_dtoa_r+0x9b8>
   1ce20:	9b06      	ldr	r3, [sp, #24]
   1ce22:	9a07      	ldr	r2, [sp, #28]
   1ce24:	1a9b      	subs	r3, r3, r2
   1ce26:	9308      	str	r3, [sp, #32]
   1ce28:	2300      	movs	r3, #0
   1ce2a:	e427      	b.n	1c67c <_dtoa_r+0x670>
   1ce2c:	2401      	movs	r4, #1
   1ce2e:	e5c5      	b.n	1c9bc <_dtoa_r+0x9b0>
   1ce30:	2336      	movs	r3, #54	; 0x36
   1ce32:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1ce34:	464c      	mov	r4, r9
   1ce36:	1a9b      	subs	r3, r3, r2
   1ce38:	9a06      	ldr	r2, [sp, #24]
   1ce3a:	9208      	str	r2, [sp, #32]
   1ce3c:	e41e      	b.n	1c67c <_dtoa_r+0x670>
   1ce3e:	2302      	movs	r3, #2
   1ce40:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1ce42:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1ce44:	4698      	mov	r8, r3
   1ce46:	f7ff fa31 	bl	1c2ac <_dtoa_r+0x2a0>
   1ce4a:	9b07      	ldr	r3, [sp, #28]
   1ce4c:	2b00      	cmp	r3, #0
   1ce4e:	d100      	bne.n	1ce52 <_dtoa_r+0xe46>
   1ce50:	e68e      	b.n	1cb70 <_dtoa_r+0xb64>
   1ce52:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1ce54:	2c00      	cmp	r4, #0
   1ce56:	dc00      	bgt.n	1ce5a <_dtoa_r+0xe4e>
   1ce58:	e712      	b.n	1cc80 <_dtoa_r+0xc74>
   1ce5a:	9b03      	ldr	r3, [sp, #12]
   1ce5c:	2200      	movs	r2, #0
   1ce5e:	3b01      	subs	r3, #1
   1ce60:	9313      	str	r3, [sp, #76]	; 0x4c
   1ce62:	0030      	movs	r0, r6
   1ce64:	4b47      	ldr	r3, [pc, #284]	; (1cf84 <_dtoa_r+0xf78>)
   1ce66:	0039      	movs	r1, r7
   1ce68:	f7fb fd2c 	bl	188c4 <__aeabi_dmul>
   1ce6c:	0006      	movs	r6, r0
   1ce6e:	4640      	mov	r0, r8
   1ce70:	000f      	movs	r7, r1
   1ce72:	3001      	adds	r0, #1
   1ce74:	f7fc faf0 	bl	19458 <__aeabi_i2d>
   1ce78:	0032      	movs	r2, r6
   1ce7a:	003b      	movs	r3, r7
   1ce7c:	f7fb fd22 	bl	188c4 <__aeabi_dmul>
   1ce80:	2200      	movs	r2, #0
   1ce82:	4b42      	ldr	r3, [pc, #264]	; (1cf8c <_dtoa_r+0xf80>)
   1ce84:	f7fa fdda 	bl	17a3c <__aeabi_dadd>
   1ce88:	4a41      	ldr	r2, [pc, #260]	; (1cf90 <_dtoa_r+0xf84>)
   1ce8a:	000b      	movs	r3, r1
   1ce8c:	4694      	mov	ip, r2
   1ce8e:	4463      	add	r3, ip
   1ce90:	9008      	str	r0, [sp, #32]
   1ce92:	9109      	str	r1, [sp, #36]	; 0x24
   1ce94:	9412      	str	r4, [sp, #72]	; 0x48
   1ce96:	9309      	str	r3, [sp, #36]	; 0x24
   1ce98:	f7ff fa30 	bl	1c2fc <_dtoa_r+0x2f0>
   1ce9c:	2339      	movs	r3, #57	; 0x39
   1ce9e:	702b      	strb	r3, [r5, #0]
   1cea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1cea2:	4647      	mov	r7, r8
   1cea4:	1c6c      	adds	r4, r5, #1
   1cea6:	4698      	mov	r8, r3
   1cea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ceaa:	2339      	movs	r3, #57	; 0x39
   1ceac:	e5a1      	b.n	1c9f2 <_dtoa_r+0x9e6>
   1ceae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ceb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ceb2:	2000      	movs	r0, #0
   1ceb4:	4934      	ldr	r1, [pc, #208]	; (1cf88 <_dtoa_r+0xf7c>)
   1ceb6:	f7fb ff85 	bl	18dc4 <__aeabi_dsub>
   1ceba:	9a08      	ldr	r2, [sp, #32]
   1cebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cebe:	f7f9 fd1b 	bl	168f8 <__aeabi_dcmpgt>
   1cec2:	2800      	cmp	r0, #0
   1cec4:	d101      	bne.n	1ceca <_dtoa_r+0xebe>
   1cec6:	e6db      	b.n	1cc80 <_dtoa_r+0xc74>
   1cec8:	001c      	movs	r4, r3
   1ceca:	1e63      	subs	r3, r4, #1
   1cecc:	781a      	ldrb	r2, [r3, #0]
   1cece:	2a30      	cmp	r2, #48	; 0x30
   1ced0:	d0fa      	beq.n	1cec8 <_dtoa_r+0xebc>
   1ced2:	f7ff fac8 	bl	1c466 <_dtoa_r+0x45a>
   1ced6:	4643      	mov	r3, r8
   1ced8:	46b3      	mov	fp, r6
   1ceda:	930c      	str	r3, [sp, #48]	; 0x30
   1cedc:	9e04      	ldr	r6, [sp, #16]
   1cede:	9b06      	ldr	r3, [sp, #24]
   1cee0:	46a8      	mov	r8, r5
   1cee2:	4699      	mov	r9, r3
   1cee4:	4655      	mov	r5, sl
   1cee6:	46ba      	mov	sl, r7
   1cee8:	2e39      	cmp	r6, #57	; 0x39
   1ceea:	d0d7      	beq.n	1ce9c <_dtoa_r+0xe90>
   1ceec:	2c00      	cmp	r4, #0
   1ceee:	dd00      	ble.n	1cef2 <_dtoa_r+0xee6>
   1cef0:	e6b1      	b.n	1cc56 <_dtoa_r+0xc4a>
   1cef2:	e6b2      	b.n	1cc5a <_dtoa_r+0xc4e>
   1cef4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1cef6:	464d      	mov	r5, r9
   1cef8:	9203      	str	r2, [sp, #12]
   1cefa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cefc:	f7ff fba4 	bl	1c648 <_dtoa_r+0x63c>
   1cf00:	2800      	cmp	r0, #0
   1cf02:	d000      	beq.n	1cf06 <_dtoa_r+0xefa>
   1cf04:	e6a9      	b.n	1cc5a <_dtoa_r+0xc4e>
   1cf06:	07f3      	lsls	r3, r6, #31
   1cf08:	d400      	bmi.n	1cf0c <_dtoa_r+0xf00>
   1cf0a:	e6a6      	b.n	1cc5a <_dtoa_r+0xc4e>
   1cf0c:	e6a0      	b.n	1cc50 <_dtoa_r+0xc44>
   1cf0e:	2300      	movs	r3, #0
   1cf10:	4641      	mov	r1, r8
   1cf12:	220a      	movs	r2, #10
   1cf14:	4650      	mov	r0, sl
   1cf16:	f000 fd6f 	bl	1d9f8 <__multadd>
   1cf1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf1c:	4680      	mov	r8, r0
   1cf1e:	2b00      	cmp	r3, #0
   1cf20:	dd01      	ble.n	1cf26 <_dtoa_r+0xf1a>
   1cf22:	9307      	str	r3, [sp, #28]
   1cf24:	e486      	b.n	1c834 <_dtoa_r+0x828>
   1cf26:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cf28:	2b02      	cmp	r3, #2
   1cf2a:	dc1f      	bgt.n	1cf6c <_dtoa_r+0xf60>
   1cf2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf2e:	9307      	str	r3, [sp, #28]
   1cf30:	e480      	b.n	1c834 <_dtoa_r+0x828>
   1cf32:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cf34:	2b02      	cmp	r3, #2
   1cf36:	dc19      	bgt.n	1cf6c <_dtoa_r+0xf60>
   1cf38:	4649      	mov	r1, r9
   1cf3a:	f7fe ffbd 	bl	1beb8 <quorem>
   1cf3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cf40:	3030      	adds	r0, #48	; 0x30
   1cf42:	7018      	strb	r0, [r3, #0]
   1cf44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf46:	0006      	movs	r6, r0
   1cf48:	9307      	str	r3, [sp, #28]
   1cf4a:	e533      	b.n	1c9b4 <_dtoa_r+0x9a8>
   1cf4c:	2302      	movs	r3, #2
   1cf4e:	4698      	mov	r8, r3
   1cf50:	f7ff f9ac 	bl	1c2ac <_dtoa_r+0x2a0>
   1cf54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cf56:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cf58:	9303      	str	r3, [sp, #12]
   1cf5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cf5c:	001d      	movs	r5, r3
   1cf5e:	f7ff fb73 	bl	1c648 <_dtoa_r+0x63c>
   1cf62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cf64:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1cf66:	9303      	str	r3, [sp, #12]
   1cf68:	f7ff fa7f 	bl	1c46a <_dtoa_r+0x45e>
   1cf6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cf6e:	9307      	str	r3, [sp, #28]
   1cf70:	e5d6      	b.n	1cb20 <_dtoa_r+0xb14>
   1cf72:	2b04      	cmp	r3, #4
   1cf74:	d100      	bne.n	1cf78 <_dtoa_r+0xf6c>
   1cf76:	e43f      	b.n	1c7f8 <_dtoa_r+0x7ec>
   1cf78:	233c      	movs	r3, #60	; 0x3c
   1cf7a:	1a18      	subs	r0, r3, r0
   1cf7c:	e4d7      	b.n	1c92e <_dtoa_r+0x922>
   1cf7e:	46c0      	nop			; (mov r8, r8)
   1cf80:	00020830 	.word	0x00020830
   1cf84:	40240000 	.word	0x40240000
   1cf88:	3fe00000 	.word	0x3fe00000
   1cf8c:	401c0000 	.word	0x401c0000
   1cf90:	fcc00000 	.word	0xfcc00000

0001cf94 <__sflush_r>:
   1cf94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf96:	46c6      	mov	lr, r8
   1cf98:	b500      	push	{lr}
   1cf9a:	230c      	movs	r3, #12
   1cf9c:	5eca      	ldrsh	r2, [r1, r3]
   1cf9e:	4680      	mov	r8, r0
   1cfa0:	b293      	uxth	r3, r2
   1cfa2:	000c      	movs	r4, r1
   1cfa4:	0719      	lsls	r1, r3, #28
   1cfa6:	d440      	bmi.n	1d02a <__sflush_r+0x96>
   1cfa8:	2380      	movs	r3, #128	; 0x80
   1cfaa:	011b      	lsls	r3, r3, #4
   1cfac:	4313      	orrs	r3, r2
   1cfae:	6862      	ldr	r2, [r4, #4]
   1cfb0:	81a3      	strh	r3, [r4, #12]
   1cfb2:	2a00      	cmp	r2, #0
   1cfb4:	dc00      	bgt.n	1cfb8 <__sflush_r+0x24>
   1cfb6:	e070      	b.n	1d09a <__sflush_r+0x106>
   1cfb8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1cfba:	2e00      	cmp	r6, #0
   1cfbc:	d031      	beq.n	1d022 <__sflush_r+0x8e>
   1cfbe:	4642      	mov	r2, r8
   1cfc0:	4641      	mov	r1, r8
   1cfc2:	6815      	ldr	r5, [r2, #0]
   1cfc4:	2200      	movs	r2, #0
   1cfc6:	b29b      	uxth	r3, r3
   1cfc8:	600a      	str	r2, [r1, #0]
   1cfca:	04da      	lsls	r2, r3, #19
   1cfcc:	d400      	bmi.n	1cfd0 <__sflush_r+0x3c>
   1cfce:	e069      	b.n	1d0a4 <__sflush_r+0x110>
   1cfd0:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1cfd2:	075b      	lsls	r3, r3, #29
   1cfd4:	d506      	bpl.n	1cfe4 <__sflush_r+0x50>
   1cfd6:	6863      	ldr	r3, [r4, #4]
   1cfd8:	1ad2      	subs	r2, r2, r3
   1cfda:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1cfdc:	2b00      	cmp	r3, #0
   1cfde:	d001      	beq.n	1cfe4 <__sflush_r+0x50>
   1cfe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1cfe2:	1ad2      	subs	r2, r2, r3
   1cfe4:	2300      	movs	r3, #0
   1cfe6:	69e1      	ldr	r1, [r4, #28]
   1cfe8:	4640      	mov	r0, r8
   1cfea:	47b0      	blx	r6
   1cfec:	1c43      	adds	r3, r0, #1
   1cfee:	d03d      	beq.n	1d06c <__sflush_r+0xd8>
   1cff0:	89a3      	ldrh	r3, [r4, #12]
   1cff2:	4a3a      	ldr	r2, [pc, #232]	; (1d0dc <__sflush_r+0x148>)
   1cff4:	4013      	ands	r3, r2
   1cff6:	2200      	movs	r2, #0
   1cff8:	6062      	str	r2, [r4, #4]
   1cffa:	6922      	ldr	r2, [r4, #16]
   1cffc:	b21b      	sxth	r3, r3
   1cffe:	81a3      	strh	r3, [r4, #12]
   1d000:	6022      	str	r2, [r4, #0]
   1d002:	04db      	lsls	r3, r3, #19
   1d004:	d447      	bmi.n	1d096 <__sflush_r+0x102>
   1d006:	4643      	mov	r3, r8
   1d008:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1d00a:	601d      	str	r5, [r3, #0]
   1d00c:	2900      	cmp	r1, #0
   1d00e:	d008      	beq.n	1d022 <__sflush_r+0x8e>
   1d010:	0023      	movs	r3, r4
   1d012:	3340      	adds	r3, #64	; 0x40
   1d014:	4299      	cmp	r1, r3
   1d016:	d002      	beq.n	1d01e <__sflush_r+0x8a>
   1d018:	4640      	mov	r0, r8
   1d01a:	f000 f967 	bl	1d2ec <_free_r>
   1d01e:	2300      	movs	r3, #0
   1d020:	6323      	str	r3, [r4, #48]	; 0x30
   1d022:	2000      	movs	r0, #0
   1d024:	bc04      	pop	{r2}
   1d026:	4690      	mov	r8, r2
   1d028:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d02a:	6926      	ldr	r6, [r4, #16]
   1d02c:	2e00      	cmp	r6, #0
   1d02e:	d0f8      	beq.n	1d022 <__sflush_r+0x8e>
   1d030:	6822      	ldr	r2, [r4, #0]
   1d032:	6026      	str	r6, [r4, #0]
   1d034:	1b95      	subs	r5, r2, r6
   1d036:	2200      	movs	r2, #0
   1d038:	079b      	lsls	r3, r3, #30
   1d03a:	d100      	bne.n	1d03e <__sflush_r+0xaa>
   1d03c:	6962      	ldr	r2, [r4, #20]
   1d03e:	60a2      	str	r2, [r4, #8]
   1d040:	2d00      	cmp	r5, #0
   1d042:	dc04      	bgt.n	1d04e <__sflush_r+0xba>
   1d044:	e7ed      	b.n	1d022 <__sflush_r+0x8e>
   1d046:	1836      	adds	r6, r6, r0
   1d048:	1a2d      	subs	r5, r5, r0
   1d04a:	2d00      	cmp	r5, #0
   1d04c:	dde9      	ble.n	1d022 <__sflush_r+0x8e>
   1d04e:	002b      	movs	r3, r5
   1d050:	0032      	movs	r2, r6
   1d052:	69e1      	ldr	r1, [r4, #28]
   1d054:	4640      	mov	r0, r8
   1d056:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d058:	47b8      	blx	r7
   1d05a:	2800      	cmp	r0, #0
   1d05c:	dcf3      	bgt.n	1d046 <__sflush_r+0xb2>
   1d05e:	2240      	movs	r2, #64	; 0x40
   1d060:	2001      	movs	r0, #1
   1d062:	89a3      	ldrh	r3, [r4, #12]
   1d064:	4240      	negs	r0, r0
   1d066:	4313      	orrs	r3, r2
   1d068:	81a3      	strh	r3, [r4, #12]
   1d06a:	e7db      	b.n	1d024 <__sflush_r+0x90>
   1d06c:	4643      	mov	r3, r8
   1d06e:	6819      	ldr	r1, [r3, #0]
   1d070:	291d      	cmp	r1, #29
   1d072:	d8f4      	bhi.n	1d05e <__sflush_r+0xca>
   1d074:	4b1a      	ldr	r3, [pc, #104]	; (1d0e0 <__sflush_r+0x14c>)
   1d076:	2201      	movs	r2, #1
   1d078:	40cb      	lsrs	r3, r1
   1d07a:	439a      	bics	r2, r3
   1d07c:	d1ef      	bne.n	1d05e <__sflush_r+0xca>
   1d07e:	89a3      	ldrh	r3, [r4, #12]
   1d080:	4e16      	ldr	r6, [pc, #88]	; (1d0dc <__sflush_r+0x148>)
   1d082:	6062      	str	r2, [r4, #4]
   1d084:	4033      	ands	r3, r6
   1d086:	6922      	ldr	r2, [r4, #16]
   1d088:	b21b      	sxth	r3, r3
   1d08a:	81a3      	strh	r3, [r4, #12]
   1d08c:	6022      	str	r2, [r4, #0]
   1d08e:	04db      	lsls	r3, r3, #19
   1d090:	d5b9      	bpl.n	1d006 <__sflush_r+0x72>
   1d092:	2900      	cmp	r1, #0
   1d094:	d1b7      	bne.n	1d006 <__sflush_r+0x72>
   1d096:	6520      	str	r0, [r4, #80]	; 0x50
   1d098:	e7b5      	b.n	1d006 <__sflush_r+0x72>
   1d09a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1d09c:	2a00      	cmp	r2, #0
   1d09e:	dd00      	ble.n	1d0a2 <__sflush_r+0x10e>
   1d0a0:	e78a      	b.n	1cfb8 <__sflush_r+0x24>
   1d0a2:	e7be      	b.n	1d022 <__sflush_r+0x8e>
   1d0a4:	2200      	movs	r2, #0
   1d0a6:	2301      	movs	r3, #1
   1d0a8:	69e1      	ldr	r1, [r4, #28]
   1d0aa:	4640      	mov	r0, r8
   1d0ac:	47b0      	blx	r6
   1d0ae:	0002      	movs	r2, r0
   1d0b0:	1c43      	adds	r3, r0, #1
   1d0b2:	d002      	beq.n	1d0ba <__sflush_r+0x126>
   1d0b4:	89a3      	ldrh	r3, [r4, #12]
   1d0b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1d0b8:	e78b      	b.n	1cfd2 <__sflush_r+0x3e>
   1d0ba:	4643      	mov	r3, r8
   1d0bc:	681b      	ldr	r3, [r3, #0]
   1d0be:	2b00      	cmp	r3, #0
   1d0c0:	d0f8      	beq.n	1d0b4 <__sflush_r+0x120>
   1d0c2:	2b1d      	cmp	r3, #29
   1d0c4:	d001      	beq.n	1d0ca <__sflush_r+0x136>
   1d0c6:	2b16      	cmp	r3, #22
   1d0c8:	d103      	bne.n	1d0d2 <__sflush_r+0x13e>
   1d0ca:	4643      	mov	r3, r8
   1d0cc:	2000      	movs	r0, #0
   1d0ce:	601d      	str	r5, [r3, #0]
   1d0d0:	e7a8      	b.n	1d024 <__sflush_r+0x90>
   1d0d2:	2140      	movs	r1, #64	; 0x40
   1d0d4:	89a3      	ldrh	r3, [r4, #12]
   1d0d6:	430b      	orrs	r3, r1
   1d0d8:	81a3      	strh	r3, [r4, #12]
   1d0da:	e7a3      	b.n	1d024 <__sflush_r+0x90>
   1d0dc:	fffff7ff 	.word	0xfffff7ff
   1d0e0:	20400001 	.word	0x20400001

0001d0e4 <_fflush_r>:
   1d0e4:	b570      	push	{r4, r5, r6, lr}
   1d0e6:	0005      	movs	r5, r0
   1d0e8:	000c      	movs	r4, r1
   1d0ea:	2800      	cmp	r0, #0
   1d0ec:	d002      	beq.n	1d0f4 <_fflush_r+0x10>
   1d0ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1d0f0:	2b00      	cmp	r3, #0
   1d0f2:	d016      	beq.n	1d122 <_fflush_r+0x3e>
   1d0f4:	220c      	movs	r2, #12
   1d0f6:	5ea3      	ldrsh	r3, [r4, r2]
   1d0f8:	2600      	movs	r6, #0
   1d0fa:	2b00      	cmp	r3, #0
   1d0fc:	d00f      	beq.n	1d11e <_fflush_r+0x3a>
   1d0fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d100:	07d2      	lsls	r2, r2, #31
   1d102:	d401      	bmi.n	1d108 <_fflush_r+0x24>
   1d104:	059b      	lsls	r3, r3, #22
   1d106:	d513      	bpl.n	1d130 <_fflush_r+0x4c>
   1d108:	0021      	movs	r1, r4
   1d10a:	0028      	movs	r0, r5
   1d10c:	f7ff ff42 	bl	1cf94 <__sflush_r>
   1d110:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1d112:	0006      	movs	r6, r0
   1d114:	07db      	lsls	r3, r3, #31
   1d116:	d402      	bmi.n	1d11e <_fflush_r+0x3a>
   1d118:	89a3      	ldrh	r3, [r4, #12]
   1d11a:	059b      	lsls	r3, r3, #22
   1d11c:	d504      	bpl.n	1d128 <_fflush_r+0x44>
   1d11e:	0030      	movs	r0, r6
   1d120:	bd70      	pop	{r4, r5, r6, pc}
   1d122:	f000 f839 	bl	1d198 <__sinit>
   1d126:	e7e5      	b.n	1d0f4 <_fflush_r+0x10>
   1d128:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d12a:	f000 fb79 	bl	1d820 <__retarget_lock_release_recursive>
   1d12e:	e7f6      	b.n	1d11e <_fflush_r+0x3a>
   1d130:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1d132:	f000 fb73 	bl	1d81c <__retarget_lock_acquire_recursive>
   1d136:	e7e7      	b.n	1d108 <_fflush_r+0x24>

0001d138 <_cleanup_r>:
   1d138:	b510      	push	{r4, lr}
   1d13a:	4902      	ldr	r1, [pc, #8]	; (1d144 <_cleanup_r+0xc>)
   1d13c:	f000 fb36 	bl	1d7ac <_fwalk_reent>
   1d140:	bd10      	pop	{r4, pc}
   1d142:	46c0      	nop			; (mov r8, r8)
   1d144:	0001e66d 	.word	0x0001e66d

0001d148 <std.isra.0>:
   1d148:	2300      	movs	r3, #0
   1d14a:	b510      	push	{r4, lr}
   1d14c:	0004      	movs	r4, r0
   1d14e:	6003      	str	r3, [r0, #0]
   1d150:	6043      	str	r3, [r0, #4]
   1d152:	6083      	str	r3, [r0, #8]
   1d154:	8181      	strh	r1, [r0, #12]
   1d156:	6643      	str	r3, [r0, #100]	; 0x64
   1d158:	81c2      	strh	r2, [r0, #14]
   1d15a:	6103      	str	r3, [r0, #16]
   1d15c:	6143      	str	r3, [r0, #20]
   1d15e:	6183      	str	r3, [r0, #24]
   1d160:	2208      	movs	r2, #8
   1d162:	2100      	movs	r1, #0
   1d164:	305c      	adds	r0, #92	; 0x5c
   1d166:	f7fc fe6b 	bl	19e40 <memset>
   1d16a:	0020      	movs	r0, r4
   1d16c:	4b06      	ldr	r3, [pc, #24]	; (1d188 <std.isra.0+0x40>)
   1d16e:	61e4      	str	r4, [r4, #28]
   1d170:	6223      	str	r3, [r4, #32]
   1d172:	4b06      	ldr	r3, [pc, #24]	; (1d18c <std.isra.0+0x44>)
   1d174:	3058      	adds	r0, #88	; 0x58
   1d176:	6263      	str	r3, [r4, #36]	; 0x24
   1d178:	4b05      	ldr	r3, [pc, #20]	; (1d190 <std.isra.0+0x48>)
   1d17a:	62a3      	str	r3, [r4, #40]	; 0x28
   1d17c:	4b05      	ldr	r3, [pc, #20]	; (1d194 <std.isra.0+0x4c>)
   1d17e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1d180:	f000 fb48 	bl	1d814 <__retarget_lock_init_recursive>
   1d184:	bd10      	pop	{r4, pc}
   1d186:	46c0      	nop			; (mov r8, r8)
   1d188:	0001e3a1 	.word	0x0001e3a1
   1d18c:	0001e3c9 	.word	0x0001e3c9
   1d190:	0001e405 	.word	0x0001e405
   1d194:	0001e431 	.word	0x0001e431

0001d198 <__sinit>:
   1d198:	b570      	push	{r4, r5, r6, lr}
   1d19a:	0004      	movs	r4, r0
   1d19c:	4d14      	ldr	r5, [pc, #80]	; (1d1f0 <__sinit+0x58>)
   1d19e:	0028      	movs	r0, r5
   1d1a0:	f000 fb3c 	bl	1d81c <__retarget_lock_acquire_recursive>
   1d1a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d1a6:	2b00      	cmp	r3, #0
   1d1a8:	d11d      	bne.n	1d1e6 <__sinit+0x4e>
   1d1aa:	4a12      	ldr	r2, [pc, #72]	; (1d1f4 <__sinit+0x5c>)
   1d1ac:	2104      	movs	r1, #4
   1d1ae:	63e2      	str	r2, [r4, #60]	; 0x3c
   1d1b0:	22b8      	movs	r2, #184	; 0xb8
   1d1b2:	0092      	lsls	r2, r2, #2
   1d1b4:	50a3      	str	r3, [r4, r2]
   1d1b6:	23b9      	movs	r3, #185	; 0xb9
   1d1b8:	2203      	movs	r2, #3
   1d1ba:	009b      	lsls	r3, r3, #2
   1d1bc:	50e2      	str	r2, [r4, r3]
   1d1be:	3308      	adds	r3, #8
   1d1c0:	18e2      	adds	r2, r4, r3
   1d1c2:	3b04      	subs	r3, #4
   1d1c4:	50e2      	str	r2, [r4, r3]
   1d1c6:	6860      	ldr	r0, [r4, #4]
   1d1c8:	2200      	movs	r2, #0
   1d1ca:	f7ff ffbd 	bl	1d148 <std.isra.0>
   1d1ce:	2201      	movs	r2, #1
   1d1d0:	2109      	movs	r1, #9
   1d1d2:	68a0      	ldr	r0, [r4, #8]
   1d1d4:	f7ff ffb8 	bl	1d148 <std.isra.0>
   1d1d8:	2202      	movs	r2, #2
   1d1da:	2112      	movs	r1, #18
   1d1dc:	68e0      	ldr	r0, [r4, #12]
   1d1de:	f7ff ffb3 	bl	1d148 <std.isra.0>
   1d1e2:	2301      	movs	r3, #1
   1d1e4:	63a3      	str	r3, [r4, #56]	; 0x38
   1d1e6:	0028      	movs	r0, r5
   1d1e8:	f000 fb1a 	bl	1d820 <__retarget_lock_release_recursive>
   1d1ec:	bd70      	pop	{r4, r5, r6, pc}
   1d1ee:	46c0      	nop			; (mov r8, r8)
   1d1f0:	20002fcc 	.word	0x20002fcc
   1d1f4:	0001d139 	.word	0x0001d139

0001d1f8 <__sfp_lock_acquire>:
   1d1f8:	b510      	push	{r4, lr}
   1d1fa:	4802      	ldr	r0, [pc, #8]	; (1d204 <__sfp_lock_acquire+0xc>)
   1d1fc:	f000 fb0e 	bl	1d81c <__retarget_lock_acquire_recursive>
   1d200:	bd10      	pop	{r4, pc}
   1d202:	46c0      	nop			; (mov r8, r8)
   1d204:	20002fe0 	.word	0x20002fe0

0001d208 <__sfp_lock_release>:
   1d208:	b510      	push	{r4, lr}
   1d20a:	4802      	ldr	r0, [pc, #8]	; (1d214 <__sfp_lock_release+0xc>)
   1d20c:	f000 fb08 	bl	1d820 <__retarget_lock_release_recursive>
   1d210:	bd10      	pop	{r4, pc}
   1d212:	46c0      	nop			; (mov r8, r8)
   1d214:	20002fe0 	.word	0x20002fe0

0001d218 <__libc_fini_array>:
   1d218:	b570      	push	{r4, r5, r6, lr}
   1d21a:	4b09      	ldr	r3, [pc, #36]	; (1d240 <__libc_fini_array+0x28>)
   1d21c:	4c09      	ldr	r4, [pc, #36]	; (1d244 <__libc_fini_array+0x2c>)
   1d21e:	1ae4      	subs	r4, r4, r3
   1d220:	10a4      	asrs	r4, r4, #2
   1d222:	d009      	beq.n	1d238 <__libc_fini_array+0x20>
   1d224:	4a08      	ldr	r2, [pc, #32]	; (1d248 <__libc_fini_array+0x30>)
   1d226:	18a5      	adds	r5, r4, r2
   1d228:	00ad      	lsls	r5, r5, #2
   1d22a:	18ed      	adds	r5, r5, r3
   1d22c:	682b      	ldr	r3, [r5, #0]
   1d22e:	3c01      	subs	r4, #1
   1d230:	4798      	blx	r3
   1d232:	3d04      	subs	r5, #4
   1d234:	2c00      	cmp	r4, #0
   1d236:	d1f9      	bne.n	1d22c <__libc_fini_array+0x14>
   1d238:	f003 fb6e 	bl	20918 <_fini>
   1d23c:	bd70      	pop	{r4, r5, r6, pc}
   1d23e:	46c0      	nop			; (mov r8, r8)
   1d240:	00020924 	.word	0x00020924
   1d244:	00020928 	.word	0x00020928
   1d248:	3fffffff 	.word	0x3fffffff

0001d24c <_malloc_trim_r>:
   1d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d24e:	000c      	movs	r4, r1
   1d250:	0006      	movs	r6, r0
   1d252:	f7fc fe3f 	bl	19ed4 <__malloc_lock>
   1d256:	4f20      	ldr	r7, [pc, #128]	; (1d2d8 <_malloc_trim_r+0x8c>)
   1d258:	68bb      	ldr	r3, [r7, #8]
   1d25a:	685d      	ldr	r5, [r3, #4]
   1d25c:	2303      	movs	r3, #3
   1d25e:	439d      	bics	r5, r3
   1d260:	4b1e      	ldr	r3, [pc, #120]	; (1d2dc <_malloc_trim_r+0x90>)
   1d262:	1b2c      	subs	r4, r5, r4
   1d264:	469c      	mov	ip, r3
   1d266:	4464      	add	r4, ip
   1d268:	0b24      	lsrs	r4, r4, #12
   1d26a:	4b1d      	ldr	r3, [pc, #116]	; (1d2e0 <_malloc_trim_r+0x94>)
   1d26c:	3c01      	subs	r4, #1
   1d26e:	0324      	lsls	r4, r4, #12
   1d270:	429c      	cmp	r4, r3
   1d272:	dd07      	ble.n	1d284 <_malloc_trim_r+0x38>
   1d274:	2100      	movs	r1, #0
   1d276:	0030      	movs	r0, r6
   1d278:	f7fc fecc 	bl	1a014 <_sbrk_r>
   1d27c:	68bb      	ldr	r3, [r7, #8]
   1d27e:	195b      	adds	r3, r3, r5
   1d280:	4298      	cmp	r0, r3
   1d282:	d004      	beq.n	1d28e <_malloc_trim_r+0x42>
   1d284:	0030      	movs	r0, r6
   1d286:	f7fc fe2d 	bl	19ee4 <__malloc_unlock>
   1d28a:	2000      	movs	r0, #0
   1d28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d28e:	4261      	negs	r1, r4
   1d290:	0030      	movs	r0, r6
   1d292:	f7fc febf 	bl	1a014 <_sbrk_r>
   1d296:	1c43      	adds	r3, r0, #1
   1d298:	d00d      	beq.n	1d2b6 <_malloc_trim_r+0x6a>
   1d29a:	2201      	movs	r2, #1
   1d29c:	68bb      	ldr	r3, [r7, #8]
   1d29e:	1b2d      	subs	r5, r5, r4
   1d2a0:	4315      	orrs	r5, r2
   1d2a2:	605d      	str	r5, [r3, #4]
   1d2a4:	4b0f      	ldr	r3, [pc, #60]	; (1d2e4 <_malloc_trim_r+0x98>)
   1d2a6:	0030      	movs	r0, r6
   1d2a8:	681a      	ldr	r2, [r3, #0]
   1d2aa:	1b14      	subs	r4, r2, r4
   1d2ac:	601c      	str	r4, [r3, #0]
   1d2ae:	f7fc fe19 	bl	19ee4 <__malloc_unlock>
   1d2b2:	2001      	movs	r0, #1
   1d2b4:	e7ea      	b.n	1d28c <_malloc_trim_r+0x40>
   1d2b6:	2100      	movs	r1, #0
   1d2b8:	0030      	movs	r0, r6
   1d2ba:	f7fc feab 	bl	1a014 <_sbrk_r>
   1d2be:	68ba      	ldr	r2, [r7, #8]
   1d2c0:	1a83      	subs	r3, r0, r2
   1d2c2:	2b0f      	cmp	r3, #15
   1d2c4:	ddde      	ble.n	1d284 <_malloc_trim_r+0x38>
   1d2c6:	4908      	ldr	r1, [pc, #32]	; (1d2e8 <_malloc_trim_r+0x9c>)
   1d2c8:	6809      	ldr	r1, [r1, #0]
   1d2ca:	1a40      	subs	r0, r0, r1
   1d2cc:	4905      	ldr	r1, [pc, #20]	; (1d2e4 <_malloc_trim_r+0x98>)
   1d2ce:	6008      	str	r0, [r1, #0]
   1d2d0:	2101      	movs	r1, #1
   1d2d2:	430b      	orrs	r3, r1
   1d2d4:	6053      	str	r3, [r2, #4]
   1d2d6:	e7d5      	b.n	1d284 <_malloc_trim_r+0x38>
   1d2d8:	200005b4 	.word	0x200005b4
   1d2dc:	00000fef 	.word	0x00000fef
   1d2e0:	00000fff 	.word	0x00000fff
   1d2e4:	20001138 	.word	0x20001138
   1d2e8:	200009bc 	.word	0x200009bc

0001d2ec <_free_r>:
   1d2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d2ee:	0004      	movs	r4, r0
   1d2f0:	1e0d      	subs	r5, r1, #0
   1d2f2:	d03c      	beq.n	1d36e <_free_r+0x82>
   1d2f4:	f7fc fdee 	bl	19ed4 <__malloc_lock>
   1d2f8:	0029      	movs	r1, r5
   1d2fa:	3908      	subs	r1, #8
   1d2fc:	6848      	ldr	r0, [r1, #4]
   1d2fe:	2301      	movs	r3, #1
   1d300:	0005      	movs	r5, r0
   1d302:	2603      	movs	r6, #3
   1d304:	439d      	bics	r5, r3
   1d306:	194a      	adds	r2, r1, r5
   1d308:	469c      	mov	ip, r3
   1d30a:	4f61      	ldr	r7, [pc, #388]	; (1d490 <_free_r+0x1a4>)
   1d30c:	6853      	ldr	r3, [r2, #4]
   1d30e:	43b3      	bics	r3, r6
   1d310:	68be      	ldr	r6, [r7, #8]
   1d312:	42b2      	cmp	r2, r6
   1d314:	d056      	beq.n	1d3c4 <_free_r+0xd8>
   1d316:	4666      	mov	r6, ip
   1d318:	6053      	str	r3, [r2, #4]
   1d31a:	4206      	tst	r6, r0
   1d31c:	d10a      	bne.n	1d334 <_free_r+0x48>
   1d31e:	003e      	movs	r6, r7
   1d320:	6808      	ldr	r0, [r1, #0]
   1d322:	3608      	adds	r6, #8
   1d324:	1a09      	subs	r1, r1, r0
   1d326:	182d      	adds	r5, r5, r0
   1d328:	6888      	ldr	r0, [r1, #8]
   1d32a:	42b0      	cmp	r0, r6
   1d32c:	d065      	beq.n	1d3fa <_free_r+0x10e>
   1d32e:	68ce      	ldr	r6, [r1, #12]
   1d330:	60c6      	str	r6, [r0, #12]
   1d332:	60b0      	str	r0, [r6, #8]
   1d334:	2001      	movs	r0, #1
   1d336:	18d6      	adds	r6, r2, r3
   1d338:	6876      	ldr	r6, [r6, #4]
   1d33a:	4206      	tst	r6, r0
   1d33c:	d033      	beq.n	1d3a6 <_free_r+0xba>
   1d33e:	4b55      	ldr	r3, [pc, #340]	; (1d494 <_free_r+0x1a8>)
   1d340:	4328      	orrs	r0, r5
   1d342:	6048      	str	r0, [r1, #4]
   1d344:	514d      	str	r5, [r1, r5]
   1d346:	429d      	cmp	r5, r3
   1d348:	d812      	bhi.n	1d370 <_free_r+0x84>
   1d34a:	08ed      	lsrs	r5, r5, #3
   1d34c:	3bff      	subs	r3, #255	; 0xff
   1d34e:	10aa      	asrs	r2, r5, #2
   1d350:	3bff      	subs	r3, #255	; 0xff
   1d352:	4093      	lsls	r3, r2
   1d354:	687a      	ldr	r2, [r7, #4]
   1d356:	00ed      	lsls	r5, r5, #3
   1d358:	4313      	orrs	r3, r2
   1d35a:	607b      	str	r3, [r7, #4]
   1d35c:	19ef      	adds	r7, r5, r7
   1d35e:	68bb      	ldr	r3, [r7, #8]
   1d360:	60cf      	str	r7, [r1, #12]
   1d362:	608b      	str	r3, [r1, #8]
   1d364:	60b9      	str	r1, [r7, #8]
   1d366:	60d9      	str	r1, [r3, #12]
   1d368:	0020      	movs	r0, r4
   1d36a:	f7fc fdbb 	bl	19ee4 <__malloc_unlock>
   1d36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d370:	0a68      	lsrs	r0, r5, #9
   1d372:	2804      	cmp	r0, #4
   1d374:	d850      	bhi.n	1d418 <_free_r+0x12c>
   1d376:	09a8      	lsrs	r0, r5, #6
   1d378:	0002      	movs	r2, r0
   1d37a:	3039      	adds	r0, #57	; 0x39
   1d37c:	3238      	adds	r2, #56	; 0x38
   1d37e:	00c0      	lsls	r0, r0, #3
   1d380:	1838      	adds	r0, r7, r0
   1d382:	3808      	subs	r0, #8
   1d384:	6883      	ldr	r3, [r0, #8]
   1d386:	2603      	movs	r6, #3
   1d388:	4298      	cmp	r0, r3
   1d38a:	d04c      	beq.n	1d426 <_free_r+0x13a>
   1d38c:	685a      	ldr	r2, [r3, #4]
   1d38e:	43b2      	bics	r2, r6
   1d390:	4295      	cmp	r5, r2
   1d392:	d230      	bcs.n	1d3f6 <_free_r+0x10a>
   1d394:	689b      	ldr	r3, [r3, #8]
   1d396:	4298      	cmp	r0, r3
   1d398:	d1f8      	bne.n	1d38c <_free_r+0xa0>
   1d39a:	68c3      	ldr	r3, [r0, #12]
   1d39c:	60cb      	str	r3, [r1, #12]
   1d39e:	6088      	str	r0, [r1, #8]
   1d3a0:	6099      	str	r1, [r3, #8]
   1d3a2:	60c1      	str	r1, [r0, #12]
   1d3a4:	e7e0      	b.n	1d368 <_free_r+0x7c>
   1d3a6:	18ed      	adds	r5, r5, r3
   1d3a8:	4e3b      	ldr	r6, [pc, #236]	; (1d498 <_free_r+0x1ac>)
   1d3aa:	6893      	ldr	r3, [r2, #8]
   1d3ac:	42b3      	cmp	r3, r6
   1d3ae:	d042      	beq.n	1d436 <_free_r+0x14a>
   1d3b0:	68d2      	ldr	r2, [r2, #12]
   1d3b2:	4328      	orrs	r0, r5
   1d3b4:	60da      	str	r2, [r3, #12]
   1d3b6:	6093      	str	r3, [r2, #8]
   1d3b8:	4b36      	ldr	r3, [pc, #216]	; (1d494 <_free_r+0x1a8>)
   1d3ba:	6048      	str	r0, [r1, #4]
   1d3bc:	514d      	str	r5, [r1, r5]
   1d3be:	429d      	cmp	r5, r3
   1d3c0:	d8d6      	bhi.n	1d370 <_free_r+0x84>
   1d3c2:	e7c2      	b.n	1d34a <_free_r+0x5e>
   1d3c4:	4662      	mov	r2, ip
   1d3c6:	18eb      	adds	r3, r5, r3
   1d3c8:	4202      	tst	r2, r0
   1d3ca:	d106      	bne.n	1d3da <_free_r+0xee>
   1d3cc:	680a      	ldr	r2, [r1, #0]
   1d3ce:	1a89      	subs	r1, r1, r2
   1d3d0:	6888      	ldr	r0, [r1, #8]
   1d3d2:	189b      	adds	r3, r3, r2
   1d3d4:	68ca      	ldr	r2, [r1, #12]
   1d3d6:	60c2      	str	r2, [r0, #12]
   1d3d8:	6090      	str	r0, [r2, #8]
   1d3da:	2201      	movs	r2, #1
   1d3dc:	431a      	orrs	r2, r3
   1d3de:	604a      	str	r2, [r1, #4]
   1d3e0:	4a2e      	ldr	r2, [pc, #184]	; (1d49c <_free_r+0x1b0>)
   1d3e2:	60b9      	str	r1, [r7, #8]
   1d3e4:	6812      	ldr	r2, [r2, #0]
   1d3e6:	4293      	cmp	r3, r2
   1d3e8:	d3be      	bcc.n	1d368 <_free_r+0x7c>
   1d3ea:	4b2d      	ldr	r3, [pc, #180]	; (1d4a0 <_free_r+0x1b4>)
   1d3ec:	0020      	movs	r0, r4
   1d3ee:	6819      	ldr	r1, [r3, #0]
   1d3f0:	f7ff ff2c 	bl	1d24c <_malloc_trim_r>
   1d3f4:	e7b8      	b.n	1d368 <_free_r+0x7c>
   1d3f6:	0018      	movs	r0, r3
   1d3f8:	e7cf      	b.n	1d39a <_free_r+0xae>
   1d3fa:	4666      	mov	r6, ip
   1d3fc:	18d0      	adds	r0, r2, r3
   1d3fe:	6840      	ldr	r0, [r0, #4]
   1d400:	4230      	tst	r0, r6
   1d402:	d13f      	bne.n	1d484 <_free_r+0x198>
   1d404:	6890      	ldr	r0, [r2, #8]
   1d406:	195d      	adds	r5, r3, r5
   1d408:	68d3      	ldr	r3, [r2, #12]
   1d40a:	60c3      	str	r3, [r0, #12]
   1d40c:	6098      	str	r0, [r3, #8]
   1d40e:	4663      	mov	r3, ip
   1d410:	432b      	orrs	r3, r5
   1d412:	604b      	str	r3, [r1, #4]
   1d414:	514d      	str	r5, [r1, r5]
   1d416:	e7a7      	b.n	1d368 <_free_r+0x7c>
   1d418:	2814      	cmp	r0, #20
   1d41a:	d814      	bhi.n	1d446 <_free_r+0x15a>
   1d41c:	0002      	movs	r2, r0
   1d41e:	305c      	adds	r0, #92	; 0x5c
   1d420:	325b      	adds	r2, #91	; 0x5b
   1d422:	00c0      	lsls	r0, r0, #3
   1d424:	e7ac      	b.n	1d380 <_free_r+0x94>
   1d426:	2301      	movs	r3, #1
   1d428:	1092      	asrs	r2, r2, #2
   1d42a:	4093      	lsls	r3, r2
   1d42c:	687a      	ldr	r2, [r7, #4]
   1d42e:	4313      	orrs	r3, r2
   1d430:	607b      	str	r3, [r7, #4]
   1d432:	0003      	movs	r3, r0
   1d434:	e7b2      	b.n	1d39c <_free_r+0xb0>
   1d436:	4328      	orrs	r0, r5
   1d438:	60d9      	str	r1, [r3, #12]
   1d43a:	6099      	str	r1, [r3, #8]
   1d43c:	60cb      	str	r3, [r1, #12]
   1d43e:	608b      	str	r3, [r1, #8]
   1d440:	6048      	str	r0, [r1, #4]
   1d442:	514d      	str	r5, [r1, r5]
   1d444:	e790      	b.n	1d368 <_free_r+0x7c>
   1d446:	2854      	cmp	r0, #84	; 0x54
   1d448:	d805      	bhi.n	1d456 <_free_r+0x16a>
   1d44a:	0b28      	lsrs	r0, r5, #12
   1d44c:	0002      	movs	r2, r0
   1d44e:	306f      	adds	r0, #111	; 0x6f
   1d450:	326e      	adds	r2, #110	; 0x6e
   1d452:	00c0      	lsls	r0, r0, #3
   1d454:	e794      	b.n	1d380 <_free_r+0x94>
   1d456:	22aa      	movs	r2, #170	; 0xaa
   1d458:	0052      	lsls	r2, r2, #1
   1d45a:	4290      	cmp	r0, r2
   1d45c:	d805      	bhi.n	1d46a <_free_r+0x17e>
   1d45e:	0be8      	lsrs	r0, r5, #15
   1d460:	0002      	movs	r2, r0
   1d462:	3078      	adds	r0, #120	; 0x78
   1d464:	3277      	adds	r2, #119	; 0x77
   1d466:	00c0      	lsls	r0, r0, #3
   1d468:	e78a      	b.n	1d380 <_free_r+0x94>
   1d46a:	4a0e      	ldr	r2, [pc, #56]	; (1d4a4 <_free_r+0x1b8>)
   1d46c:	4290      	cmp	r0, r2
   1d46e:	d805      	bhi.n	1d47c <_free_r+0x190>
   1d470:	0ca8      	lsrs	r0, r5, #18
   1d472:	0002      	movs	r2, r0
   1d474:	307d      	adds	r0, #125	; 0x7d
   1d476:	327c      	adds	r2, #124	; 0x7c
   1d478:	00c0      	lsls	r0, r0, #3
   1d47a:	e781      	b.n	1d380 <_free_r+0x94>
   1d47c:	20fe      	movs	r0, #254	; 0xfe
   1d47e:	227e      	movs	r2, #126	; 0x7e
   1d480:	0080      	lsls	r0, r0, #2
   1d482:	e77d      	b.n	1d380 <_free_r+0x94>
   1d484:	4663      	mov	r3, ip
   1d486:	432b      	orrs	r3, r5
   1d488:	604b      	str	r3, [r1, #4]
   1d48a:	6015      	str	r5, [r2, #0]
   1d48c:	e76c      	b.n	1d368 <_free_r+0x7c>
   1d48e:	46c0      	nop			; (mov r8, r8)
   1d490:	200005b4 	.word	0x200005b4
   1d494:	000001ff 	.word	0x000001ff
   1d498:	200005bc 	.word	0x200005bc
   1d49c:	200009c0 	.word	0x200009c0
   1d4a0:	20001168 	.word	0x20001168
   1d4a4:	00000554 	.word	0x00000554

0001d4a8 <__sfvwrite_r>:
   1d4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4aa:	464e      	mov	r6, r9
   1d4ac:	46de      	mov	lr, fp
   1d4ae:	4657      	mov	r7, sl
   1d4b0:	4645      	mov	r5, r8
   1d4b2:	b5e0      	push	{r5, r6, r7, lr}
   1d4b4:	6893      	ldr	r3, [r2, #8]
   1d4b6:	b083      	sub	sp, #12
   1d4b8:	9000      	str	r0, [sp, #0]
   1d4ba:	000c      	movs	r4, r1
   1d4bc:	0016      	movs	r6, r2
   1d4be:	2b00      	cmp	r3, #0
   1d4c0:	d025      	beq.n	1d50e <__sfvwrite_r+0x66>
   1d4c2:	898b      	ldrh	r3, [r1, #12]
   1d4c4:	071a      	lsls	r2, r3, #28
   1d4c6:	d52a      	bpl.n	1d51e <__sfvwrite_r+0x76>
   1d4c8:	690a      	ldr	r2, [r1, #16]
   1d4ca:	2a00      	cmp	r2, #0
   1d4cc:	d027      	beq.n	1d51e <__sfvwrite_r+0x76>
   1d4ce:	6832      	ldr	r2, [r6, #0]
   1d4d0:	4693      	mov	fp, r2
   1d4d2:	079a      	lsls	r2, r3, #30
   1d4d4:	d52f      	bpl.n	1d536 <__sfvwrite_r+0x8e>
   1d4d6:	4bb2      	ldr	r3, [pc, #712]	; (1d7a0 <__sfvwrite_r+0x2f8>)
   1d4d8:	2700      	movs	r7, #0
   1d4da:	2500      	movs	r5, #0
   1d4dc:	4698      	mov	r8, r3
   1d4de:	46b1      	mov	r9, r6
   1d4e0:	2d00      	cmp	r5, #0
   1d4e2:	d100      	bne.n	1d4e6 <__sfvwrite_r+0x3e>
   1d4e4:	e072      	b.n	1d5cc <__sfvwrite_r+0x124>
   1d4e6:	002b      	movs	r3, r5
   1d4e8:	4545      	cmp	r5, r8
   1d4ea:	d900      	bls.n	1d4ee <__sfvwrite_r+0x46>
   1d4ec:	4bac      	ldr	r3, [pc, #688]	; (1d7a0 <__sfvwrite_r+0x2f8>)
   1d4ee:	003a      	movs	r2, r7
   1d4f0:	69e1      	ldr	r1, [r4, #28]
   1d4f2:	9800      	ldr	r0, [sp, #0]
   1d4f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d4f6:	47b0      	blx	r6
   1d4f8:	2800      	cmp	r0, #0
   1d4fa:	dc00      	bgt.n	1d4fe <__sfvwrite_r+0x56>
   1d4fc:	e073      	b.n	1d5e6 <__sfvwrite_r+0x13e>
   1d4fe:	464b      	mov	r3, r9
   1d500:	689b      	ldr	r3, [r3, #8]
   1d502:	183f      	adds	r7, r7, r0
   1d504:	1a2d      	subs	r5, r5, r0
   1d506:	1a18      	subs	r0, r3, r0
   1d508:	464b      	mov	r3, r9
   1d50a:	6098      	str	r0, [r3, #8]
   1d50c:	d1e8      	bne.n	1d4e0 <__sfvwrite_r+0x38>
   1d50e:	2000      	movs	r0, #0
   1d510:	b003      	add	sp, #12
   1d512:	bc3c      	pop	{r2, r3, r4, r5}
   1d514:	4690      	mov	r8, r2
   1d516:	4699      	mov	r9, r3
   1d518:	46a2      	mov	sl, r4
   1d51a:	46ab      	mov	fp, r5
   1d51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d51e:	0021      	movs	r1, r4
   1d520:	9800      	ldr	r0, [sp, #0]
   1d522:	f7fe fc4b 	bl	1bdbc <__swsetup_r>
   1d526:	2800      	cmp	r0, #0
   1d528:	d000      	beq.n	1d52c <__sfvwrite_r+0x84>
   1d52a:	e130      	b.n	1d78e <__sfvwrite_r+0x2e6>
   1d52c:	6832      	ldr	r2, [r6, #0]
   1d52e:	89a3      	ldrh	r3, [r4, #12]
   1d530:	4693      	mov	fp, r2
   1d532:	079a      	lsls	r2, r3, #30
   1d534:	d4cf      	bmi.n	1d4d6 <__sfvwrite_r+0x2e>
   1d536:	07da      	lsls	r2, r3, #31
   1d538:	d55d      	bpl.n	1d5f6 <__sfvwrite_r+0x14e>
   1d53a:	2300      	movs	r3, #0
   1d53c:	2000      	movs	r0, #0
   1d53e:	469a      	mov	sl, r3
   1d540:	2700      	movs	r7, #0
   1d542:	001d      	movs	r5, r3
   1d544:	46b1      	mov	r9, r6
   1d546:	e029      	b.n	1d59c <__sfvwrite_r+0xf4>
   1d548:	2800      	cmp	r0, #0
   1d54a:	d033      	beq.n	1d5b4 <__sfvwrite_r+0x10c>
   1d54c:	46a8      	mov	r8, r5
   1d54e:	42bd      	cmp	r5, r7
   1d550:	d900      	bls.n	1d554 <__sfvwrite_r+0xac>
   1d552:	46b8      	mov	r8, r7
   1d554:	6820      	ldr	r0, [r4, #0]
   1d556:	6922      	ldr	r2, [r4, #16]
   1d558:	4646      	mov	r6, r8
   1d55a:	6963      	ldr	r3, [r4, #20]
   1d55c:	4290      	cmp	r0, r2
   1d55e:	d907      	bls.n	1d570 <__sfvwrite_r+0xc8>
   1d560:	68a2      	ldr	r2, [r4, #8]
   1d562:	4694      	mov	ip, r2
   1d564:	449c      	add	ip, r3
   1d566:	4662      	mov	r2, ip
   1d568:	9201      	str	r2, [sp, #4]
   1d56a:	45e0      	cmp	r8, ip
   1d56c:	dd00      	ble.n	1d570 <__sfvwrite_r+0xc8>
   1d56e:	e0e9      	b.n	1d744 <__sfvwrite_r+0x29c>
   1d570:	4598      	cmp	r8, r3
   1d572:	da00      	bge.n	1d576 <__sfvwrite_r+0xce>
   1d574:	e08f      	b.n	1d696 <__sfvwrite_r+0x1ee>
   1d576:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1d578:	4652      	mov	r2, sl
   1d57a:	69e1      	ldr	r1, [r4, #28]
   1d57c:	9800      	ldr	r0, [sp, #0]
   1d57e:	47b0      	blx	r6
   1d580:	1e06      	subs	r6, r0, #0
   1d582:	dd30      	ble.n	1d5e6 <__sfvwrite_r+0x13e>
   1d584:	1bad      	subs	r5, r5, r6
   1d586:	2001      	movs	r0, #1
   1d588:	2d00      	cmp	r5, #0
   1d58a:	d026      	beq.n	1d5da <__sfvwrite_r+0x132>
   1d58c:	464b      	mov	r3, r9
   1d58e:	689b      	ldr	r3, [r3, #8]
   1d590:	44b2      	add	sl, r6
   1d592:	1bbf      	subs	r7, r7, r6
   1d594:	1b9e      	subs	r6, r3, r6
   1d596:	464b      	mov	r3, r9
   1d598:	609e      	str	r6, [r3, #8]
   1d59a:	d0b8      	beq.n	1d50e <__sfvwrite_r+0x66>
   1d59c:	2f00      	cmp	r7, #0
   1d59e:	d1d3      	bne.n	1d548 <__sfvwrite_r+0xa0>
   1d5a0:	465b      	mov	r3, fp
   1d5a2:	681b      	ldr	r3, [r3, #0]
   1d5a4:	469a      	mov	sl, r3
   1d5a6:	465b      	mov	r3, fp
   1d5a8:	685f      	ldr	r7, [r3, #4]
   1d5aa:	2308      	movs	r3, #8
   1d5ac:	469c      	mov	ip, r3
   1d5ae:	44e3      	add	fp, ip
   1d5b0:	2f00      	cmp	r7, #0
   1d5b2:	d0f5      	beq.n	1d5a0 <__sfvwrite_r+0xf8>
   1d5b4:	003a      	movs	r2, r7
   1d5b6:	210a      	movs	r1, #10
   1d5b8:	4650      	mov	r0, sl
   1d5ba:	f000 f9ab 	bl	1d914 <memchr>
   1d5be:	2800      	cmp	r0, #0
   1d5c0:	d100      	bne.n	1d5c4 <__sfvwrite_r+0x11c>
   1d5c2:	e0e2      	b.n	1d78a <__sfvwrite_r+0x2e2>
   1d5c4:	4653      	mov	r3, sl
   1d5c6:	3001      	adds	r0, #1
   1d5c8:	1ac5      	subs	r5, r0, r3
   1d5ca:	e7bf      	b.n	1d54c <__sfvwrite_r+0xa4>
   1d5cc:	465b      	mov	r3, fp
   1d5ce:	681f      	ldr	r7, [r3, #0]
   1d5d0:	685d      	ldr	r5, [r3, #4]
   1d5d2:	2308      	movs	r3, #8
   1d5d4:	469c      	mov	ip, r3
   1d5d6:	44e3      	add	fp, ip
   1d5d8:	e782      	b.n	1d4e0 <__sfvwrite_r+0x38>
   1d5da:	0021      	movs	r1, r4
   1d5dc:	9800      	ldr	r0, [sp, #0]
   1d5de:	f7ff fd81 	bl	1d0e4 <_fflush_r>
   1d5e2:	2800      	cmp	r0, #0
   1d5e4:	d0d2      	beq.n	1d58c <__sfvwrite_r+0xe4>
   1d5e6:	220c      	movs	r2, #12
   1d5e8:	5ea3      	ldrsh	r3, [r4, r2]
   1d5ea:	2240      	movs	r2, #64	; 0x40
   1d5ec:	2001      	movs	r0, #1
   1d5ee:	4313      	orrs	r3, r2
   1d5f0:	81a3      	strh	r3, [r4, #12]
   1d5f2:	4240      	negs	r0, r0
   1d5f4:	e78c      	b.n	1d510 <__sfvwrite_r+0x68>
   1d5f6:	2200      	movs	r2, #0
   1d5f8:	4691      	mov	r9, r2
   1d5fa:	464d      	mov	r5, r9
   1d5fc:	2d00      	cmp	r5, #0
   1d5fe:	d023      	beq.n	1d648 <__sfvwrite_r+0x1a0>
   1d600:	68a2      	ldr	r2, [r4, #8]
   1d602:	4690      	mov	r8, r2
   1d604:	2280      	movs	r2, #128	; 0x80
   1d606:	0092      	lsls	r2, r2, #2
   1d608:	4213      	tst	r3, r2
   1d60a:	d026      	beq.n	1d65a <__sfvwrite_r+0x1b2>
   1d60c:	46c2      	mov	sl, r8
   1d60e:	4545      	cmp	r5, r8
   1d610:	d34d      	bcc.n	1d6ae <__sfvwrite_r+0x206>
   1d612:	2290      	movs	r2, #144	; 0x90
   1d614:	00d2      	lsls	r2, r2, #3
   1d616:	4213      	tst	r3, r2
   1d618:	d14e      	bne.n	1d6b8 <__sfvwrite_r+0x210>
   1d61a:	002f      	movs	r7, r5
   1d61c:	6820      	ldr	r0, [r4, #0]
   1d61e:	4652      	mov	r2, sl
   1d620:	4649      	mov	r1, r9
   1d622:	f7fc fbbd 	bl	19da0 <memmove>
   1d626:	4642      	mov	r2, r8
   1d628:	68a3      	ldr	r3, [r4, #8]
   1d62a:	1a98      	subs	r0, r3, r2
   1d62c:	6823      	ldr	r3, [r4, #0]
   1d62e:	60a0      	str	r0, [r4, #8]
   1d630:	4453      	add	r3, sl
   1d632:	6023      	str	r3, [r4, #0]
   1d634:	68b3      	ldr	r3, [r6, #8]
   1d636:	44b9      	add	r9, r7
   1d638:	1bed      	subs	r5, r5, r7
   1d63a:	1bdf      	subs	r7, r3, r7
   1d63c:	60b7      	str	r7, [r6, #8]
   1d63e:	d100      	bne.n	1d642 <__sfvwrite_r+0x19a>
   1d640:	e765      	b.n	1d50e <__sfvwrite_r+0x66>
   1d642:	89a3      	ldrh	r3, [r4, #12]
   1d644:	2d00      	cmp	r5, #0
   1d646:	d1db      	bne.n	1d600 <__sfvwrite_r+0x158>
   1d648:	465a      	mov	r2, fp
   1d64a:	6812      	ldr	r2, [r2, #0]
   1d64c:	4691      	mov	r9, r2
   1d64e:	465a      	mov	r2, fp
   1d650:	6855      	ldr	r5, [r2, #4]
   1d652:	2208      	movs	r2, #8
   1d654:	4694      	mov	ip, r2
   1d656:	44e3      	add	fp, ip
   1d658:	e7d0      	b.n	1d5fc <__sfvwrite_r+0x154>
   1d65a:	6820      	ldr	r0, [r4, #0]
   1d65c:	6923      	ldr	r3, [r4, #16]
   1d65e:	4298      	cmp	r0, r3
   1d660:	d802      	bhi.n	1d668 <__sfvwrite_r+0x1c0>
   1d662:	6967      	ldr	r7, [r4, #20]
   1d664:	42bd      	cmp	r5, r7
   1d666:	d259      	bcs.n	1d71c <__sfvwrite_r+0x274>
   1d668:	4647      	mov	r7, r8
   1d66a:	42af      	cmp	r7, r5
   1d66c:	d900      	bls.n	1d670 <__sfvwrite_r+0x1c8>
   1d66e:	002f      	movs	r7, r5
   1d670:	003a      	movs	r2, r7
   1d672:	4649      	mov	r1, r9
   1d674:	f7fc fb94 	bl	19da0 <memmove>
   1d678:	68a3      	ldr	r3, [r4, #8]
   1d67a:	6822      	ldr	r2, [r4, #0]
   1d67c:	1bdb      	subs	r3, r3, r7
   1d67e:	19d2      	adds	r2, r2, r7
   1d680:	60a3      	str	r3, [r4, #8]
   1d682:	6022      	str	r2, [r4, #0]
   1d684:	2b00      	cmp	r3, #0
   1d686:	d1d5      	bne.n	1d634 <__sfvwrite_r+0x18c>
   1d688:	0021      	movs	r1, r4
   1d68a:	9800      	ldr	r0, [sp, #0]
   1d68c:	f7ff fd2a 	bl	1d0e4 <_fflush_r>
   1d690:	2800      	cmp	r0, #0
   1d692:	d0cf      	beq.n	1d634 <__sfvwrite_r+0x18c>
   1d694:	e7a7      	b.n	1d5e6 <__sfvwrite_r+0x13e>
   1d696:	4642      	mov	r2, r8
   1d698:	4651      	mov	r1, sl
   1d69a:	f7fc fb81 	bl	19da0 <memmove>
   1d69e:	4642      	mov	r2, r8
   1d6a0:	68a3      	ldr	r3, [r4, #8]
   1d6a2:	1a9b      	subs	r3, r3, r2
   1d6a4:	60a3      	str	r3, [r4, #8]
   1d6a6:	6823      	ldr	r3, [r4, #0]
   1d6a8:	4443      	add	r3, r8
   1d6aa:	6023      	str	r3, [r4, #0]
   1d6ac:	e76a      	b.n	1d584 <__sfvwrite_r+0xdc>
   1d6ae:	46a8      	mov	r8, r5
   1d6b0:	6820      	ldr	r0, [r4, #0]
   1d6b2:	002f      	movs	r7, r5
   1d6b4:	46aa      	mov	sl, r5
   1d6b6:	e7b2      	b.n	1d61e <__sfvwrite_r+0x176>
   1d6b8:	6921      	ldr	r1, [r4, #16]
   1d6ba:	6822      	ldr	r2, [r4, #0]
   1d6bc:	1a52      	subs	r2, r2, r1
   1d6be:	4692      	mov	sl, r2
   1d6c0:	6962      	ldr	r2, [r4, #20]
   1d6c2:	0057      	lsls	r7, r2, #1
   1d6c4:	18bf      	adds	r7, r7, r2
   1d6c6:	0ffa      	lsrs	r2, r7, #31
   1d6c8:	19d7      	adds	r7, r2, r7
   1d6ca:	4652      	mov	r2, sl
   1d6cc:	1c50      	adds	r0, r2, #1
   1d6ce:	107f      	asrs	r7, r7, #1
   1d6d0:	1940      	adds	r0, r0, r5
   1d6d2:	003a      	movs	r2, r7
   1d6d4:	42b8      	cmp	r0, r7
   1d6d6:	d901      	bls.n	1d6dc <__sfvwrite_r+0x234>
   1d6d8:	0007      	movs	r7, r0
   1d6da:	0002      	movs	r2, r0
   1d6dc:	055b      	lsls	r3, r3, #21
   1d6de:	d542      	bpl.n	1d766 <__sfvwrite_r+0x2be>
   1d6e0:	0011      	movs	r1, r2
   1d6e2:	9800      	ldr	r0, [sp, #0]
   1d6e4:	f7fc f82a 	bl	1973c <_malloc_r>
   1d6e8:	4680      	mov	r8, r0
   1d6ea:	1e03      	subs	r3, r0, #0
   1d6ec:	d052      	beq.n	1d794 <__sfvwrite_r+0x2ec>
   1d6ee:	4652      	mov	r2, sl
   1d6f0:	6921      	ldr	r1, [r4, #16]
   1d6f2:	f7fc fb13 	bl	19d1c <memcpy>
   1d6f6:	89a3      	ldrh	r3, [r4, #12]
   1d6f8:	4a2a      	ldr	r2, [pc, #168]	; (1d7a4 <__sfvwrite_r+0x2fc>)
   1d6fa:	4013      	ands	r3, r2
   1d6fc:	2280      	movs	r2, #128	; 0x80
   1d6fe:	4313      	orrs	r3, r2
   1d700:	81a3      	strh	r3, [r4, #12]
   1d702:	4643      	mov	r3, r8
   1d704:	4640      	mov	r0, r8
   1d706:	6123      	str	r3, [r4, #16]
   1d708:	4653      	mov	r3, sl
   1d70a:	4450      	add	r0, sl
   1d70c:	6167      	str	r7, [r4, #20]
   1d70e:	1aff      	subs	r7, r7, r3
   1d710:	60a7      	str	r7, [r4, #8]
   1d712:	6020      	str	r0, [r4, #0]
   1d714:	46a8      	mov	r8, r5
   1d716:	002f      	movs	r7, r5
   1d718:	46aa      	mov	sl, r5
   1d71a:	e780      	b.n	1d61e <__sfvwrite_r+0x176>
   1d71c:	4b22      	ldr	r3, [pc, #136]	; (1d7a8 <__sfvwrite_r+0x300>)
   1d71e:	0028      	movs	r0, r5
   1d720:	429d      	cmp	r5, r3
   1d722:	d900      	bls.n	1d726 <__sfvwrite_r+0x27e>
   1d724:	0018      	movs	r0, r3
   1d726:	0039      	movs	r1, r7
   1d728:	f7f8 ffd0 	bl	166cc <__divsi3>
   1d72c:	003b      	movs	r3, r7
   1d72e:	464a      	mov	r2, r9
   1d730:	4343      	muls	r3, r0
   1d732:	69e1      	ldr	r1, [r4, #28]
   1d734:	9800      	ldr	r0, [sp, #0]
   1d736:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1d738:	47b8      	blx	r7
   1d73a:	2800      	cmp	r0, #0
   1d73c:	dc00      	bgt.n	1d740 <__sfvwrite_r+0x298>
   1d73e:	e752      	b.n	1d5e6 <__sfvwrite_r+0x13e>
   1d740:	0007      	movs	r7, r0
   1d742:	e777      	b.n	1d634 <__sfvwrite_r+0x18c>
   1d744:	4666      	mov	r6, ip
   1d746:	4651      	mov	r1, sl
   1d748:	f7fc fb2a 	bl	19da0 <memmove>
   1d74c:	46b4      	mov	ip, r6
   1d74e:	6823      	ldr	r3, [r4, #0]
   1d750:	0021      	movs	r1, r4
   1d752:	4463      	add	r3, ip
   1d754:	6023      	str	r3, [r4, #0]
   1d756:	9800      	ldr	r0, [sp, #0]
   1d758:	f7ff fcc4 	bl	1d0e4 <_fflush_r>
   1d75c:	2800      	cmp	r0, #0
   1d75e:	d000      	beq.n	1d762 <__sfvwrite_r+0x2ba>
   1d760:	e741      	b.n	1d5e6 <__sfvwrite_r+0x13e>
   1d762:	9e01      	ldr	r6, [sp, #4]
   1d764:	e70e      	b.n	1d584 <__sfvwrite_r+0xdc>
   1d766:	9800      	ldr	r0, [sp, #0]
   1d768:	f000 fc5c 	bl	1e024 <_realloc_r>
   1d76c:	4680      	mov	r8, r0
   1d76e:	2800      	cmp	r0, #0
   1d770:	d1c7      	bne.n	1d702 <__sfvwrite_r+0x25a>
   1d772:	9d00      	ldr	r5, [sp, #0]
   1d774:	6921      	ldr	r1, [r4, #16]
   1d776:	0028      	movs	r0, r5
   1d778:	f7ff fdb8 	bl	1d2ec <_free_r>
   1d77c:	2280      	movs	r2, #128	; 0x80
   1d77e:	89a3      	ldrh	r3, [r4, #12]
   1d780:	4393      	bics	r3, r2
   1d782:	3a74      	subs	r2, #116	; 0x74
   1d784:	b21b      	sxth	r3, r3
   1d786:	602a      	str	r2, [r5, #0]
   1d788:	e72f      	b.n	1d5ea <__sfvwrite_r+0x142>
   1d78a:	1c7d      	adds	r5, r7, #1
   1d78c:	e6de      	b.n	1d54c <__sfvwrite_r+0xa4>
   1d78e:	2001      	movs	r0, #1
   1d790:	4240      	negs	r0, r0
   1d792:	e6bd      	b.n	1d510 <__sfvwrite_r+0x68>
   1d794:	9a00      	ldr	r2, [sp, #0]
   1d796:	330c      	adds	r3, #12
   1d798:	6013      	str	r3, [r2, #0]
   1d79a:	220c      	movs	r2, #12
   1d79c:	5ea3      	ldrsh	r3, [r4, r2]
   1d79e:	e724      	b.n	1d5ea <__sfvwrite_r+0x142>
   1d7a0:	7ffffc00 	.word	0x7ffffc00
   1d7a4:	fffffb7f 	.word	0xfffffb7f
   1d7a8:	7fffffff 	.word	0x7fffffff

0001d7ac <_fwalk_reent>:
   1d7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7ae:	4647      	mov	r7, r8
   1d7b0:	46ce      	mov	lr, r9
   1d7b2:	b580      	push	{r7, lr}
   1d7b4:	27b8      	movs	r7, #184	; 0xb8
   1d7b6:	4680      	mov	r8, r0
   1d7b8:	00bf      	lsls	r7, r7, #2
   1d7ba:	4447      	add	r7, r8
   1d7bc:	4689      	mov	r9, r1
   1d7be:	2600      	movs	r6, #0
   1d7c0:	2f00      	cmp	r7, #0
   1d7c2:	d014      	beq.n	1d7ee <_fwalk_reent+0x42>
   1d7c4:	687b      	ldr	r3, [r7, #4]
   1d7c6:	68bc      	ldr	r4, [r7, #8]
   1d7c8:	1e5d      	subs	r5, r3, #1
   1d7ca:	d40d      	bmi.n	1d7e8 <_fwalk_reent+0x3c>
   1d7cc:	89a3      	ldrh	r3, [r4, #12]
   1d7ce:	2b01      	cmp	r3, #1
   1d7d0:	d907      	bls.n	1d7e2 <_fwalk_reent+0x36>
   1d7d2:	220e      	movs	r2, #14
   1d7d4:	5ea3      	ldrsh	r3, [r4, r2]
   1d7d6:	3301      	adds	r3, #1
   1d7d8:	d003      	beq.n	1d7e2 <_fwalk_reent+0x36>
   1d7da:	0021      	movs	r1, r4
   1d7dc:	4640      	mov	r0, r8
   1d7de:	47c8      	blx	r9
   1d7e0:	4306      	orrs	r6, r0
   1d7e2:	3468      	adds	r4, #104	; 0x68
   1d7e4:	3d01      	subs	r5, #1
   1d7e6:	d2f1      	bcs.n	1d7cc <_fwalk_reent+0x20>
   1d7e8:	683f      	ldr	r7, [r7, #0]
   1d7ea:	2f00      	cmp	r7, #0
   1d7ec:	d1ea      	bne.n	1d7c4 <_fwalk_reent+0x18>
   1d7ee:	0030      	movs	r0, r6
   1d7f0:	bc0c      	pop	{r2, r3}
   1d7f2:	4690      	mov	r8, r2
   1d7f4:	4699      	mov	r9, r3
   1d7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d7f8 <_localeconv_r>:
   1d7f8:	4b04      	ldr	r3, [pc, #16]	; (1d80c <_localeconv_r+0x14>)
   1d7fa:	681b      	ldr	r3, [r3, #0]
   1d7fc:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1d7fe:	2800      	cmp	r0, #0
   1d800:	d001      	beq.n	1d806 <_localeconv_r+0xe>
   1d802:	30f0      	adds	r0, #240	; 0xf0
   1d804:	4770      	bx	lr
   1d806:	4802      	ldr	r0, [pc, #8]	; (1d810 <_localeconv_r+0x18>)
   1d808:	e7fb      	b.n	1d802 <_localeconv_r+0xa>
   1d80a:	46c0      	nop			; (mov r8, r8)
   1d80c:	20000018 	.word	0x20000018
   1d810:	20000448 	.word	0x20000448

0001d814 <__retarget_lock_init_recursive>:
   1d814:	4770      	bx	lr
   1d816:	46c0      	nop			; (mov r8, r8)

0001d818 <__retarget_lock_close_recursive>:
   1d818:	4770      	bx	lr
   1d81a:	46c0      	nop			; (mov r8, r8)

0001d81c <__retarget_lock_acquire_recursive>:
   1d81c:	4770      	bx	lr
   1d81e:	46c0      	nop			; (mov r8, r8)

0001d820 <__retarget_lock_release_recursive>:
   1d820:	4770      	bx	lr
   1d822:	46c0      	nop			; (mov r8, r8)

0001d824 <__swhatbuf_r>:
   1d824:	b570      	push	{r4, r5, r6, lr}
   1d826:	000c      	movs	r4, r1
   1d828:	001e      	movs	r6, r3
   1d82a:	230e      	movs	r3, #14
   1d82c:	5ec9      	ldrsh	r1, [r1, r3]
   1d82e:	b090      	sub	sp, #64	; 0x40
   1d830:	0015      	movs	r5, r2
   1d832:	2900      	cmp	r1, #0
   1d834:	db15      	blt.n	1d862 <__swhatbuf_r+0x3e>
   1d836:	aa01      	add	r2, sp, #4
   1d838:	f000 fff8 	bl	1e82c <_fstat_r>
   1d83c:	2800      	cmp	r0, #0
   1d83e:	db10      	blt.n	1d862 <__swhatbuf_r+0x3e>
   1d840:	22f0      	movs	r2, #240	; 0xf0
   1d842:	9b02      	ldr	r3, [sp, #8]
   1d844:	0212      	lsls	r2, r2, #8
   1d846:	4013      	ands	r3, r2
   1d848:	4a0d      	ldr	r2, [pc, #52]	; (1d880 <__swhatbuf_r+0x5c>)
   1d84a:	2080      	movs	r0, #128	; 0x80
   1d84c:	4694      	mov	ip, r2
   1d84e:	4463      	add	r3, ip
   1d850:	425a      	negs	r2, r3
   1d852:	4153      	adcs	r3, r2
   1d854:	6033      	str	r3, [r6, #0]
   1d856:	2380      	movs	r3, #128	; 0x80
   1d858:	00db      	lsls	r3, r3, #3
   1d85a:	602b      	str	r3, [r5, #0]
   1d85c:	0100      	lsls	r0, r0, #4
   1d85e:	b010      	add	sp, #64	; 0x40
   1d860:	bd70      	pop	{r4, r5, r6, pc}
   1d862:	2300      	movs	r3, #0
   1d864:	6033      	str	r3, [r6, #0]
   1d866:	89a3      	ldrh	r3, [r4, #12]
   1d868:	061b      	lsls	r3, r3, #24
   1d86a:	d503      	bpl.n	1d874 <__swhatbuf_r+0x50>
   1d86c:	2340      	movs	r3, #64	; 0x40
   1d86e:	2000      	movs	r0, #0
   1d870:	602b      	str	r3, [r5, #0]
   1d872:	e7f4      	b.n	1d85e <__swhatbuf_r+0x3a>
   1d874:	2380      	movs	r3, #128	; 0x80
   1d876:	00db      	lsls	r3, r3, #3
   1d878:	602b      	str	r3, [r5, #0]
   1d87a:	2000      	movs	r0, #0
   1d87c:	e7ef      	b.n	1d85e <__swhatbuf_r+0x3a>
   1d87e:	46c0      	nop			; (mov r8, r8)
   1d880:	ffffe000 	.word	0xffffe000

0001d884 <__smakebuf_r>:
   1d884:	b570      	push	{r4, r5, r6, lr}
   1d886:	898b      	ldrh	r3, [r1, #12]
   1d888:	b082      	sub	sp, #8
   1d88a:	0006      	movs	r6, r0
   1d88c:	000c      	movs	r4, r1
   1d88e:	079b      	lsls	r3, r3, #30
   1d890:	d507      	bpl.n	1d8a2 <__smakebuf_r+0x1e>
   1d892:	0023      	movs	r3, r4
   1d894:	3343      	adds	r3, #67	; 0x43
   1d896:	6023      	str	r3, [r4, #0]
   1d898:	6123      	str	r3, [r4, #16]
   1d89a:	2301      	movs	r3, #1
   1d89c:	6163      	str	r3, [r4, #20]
   1d89e:	b002      	add	sp, #8
   1d8a0:	bd70      	pop	{r4, r5, r6, pc}
   1d8a2:	ab01      	add	r3, sp, #4
   1d8a4:	466a      	mov	r2, sp
   1d8a6:	f7ff ffbd 	bl	1d824 <__swhatbuf_r>
   1d8aa:	9900      	ldr	r1, [sp, #0]
   1d8ac:	0005      	movs	r5, r0
   1d8ae:	0030      	movs	r0, r6
   1d8b0:	f7fb ff44 	bl	1973c <_malloc_r>
   1d8b4:	2800      	cmp	r0, #0
   1d8b6:	d01e      	beq.n	1d8f6 <__smakebuf_r+0x72>
   1d8b8:	2280      	movs	r2, #128	; 0x80
   1d8ba:	4b15      	ldr	r3, [pc, #84]	; (1d910 <__smakebuf_r+0x8c>)
   1d8bc:	63f3      	str	r3, [r6, #60]	; 0x3c
   1d8be:	89a3      	ldrh	r3, [r4, #12]
   1d8c0:	6020      	str	r0, [r4, #0]
   1d8c2:	4313      	orrs	r3, r2
   1d8c4:	9a00      	ldr	r2, [sp, #0]
   1d8c6:	b21b      	sxth	r3, r3
   1d8c8:	6162      	str	r2, [r4, #20]
   1d8ca:	9a01      	ldr	r2, [sp, #4]
   1d8cc:	81a3      	strh	r3, [r4, #12]
   1d8ce:	6120      	str	r0, [r4, #16]
   1d8d0:	2a00      	cmp	r2, #0
   1d8d2:	d102      	bne.n	1d8da <__smakebuf_r+0x56>
   1d8d4:	432b      	orrs	r3, r5
   1d8d6:	81a3      	strh	r3, [r4, #12]
   1d8d8:	e7e1      	b.n	1d89e <__smakebuf_r+0x1a>
   1d8da:	230e      	movs	r3, #14
   1d8dc:	5ee1      	ldrsh	r1, [r4, r3]
   1d8de:	0030      	movs	r0, r6
   1d8e0:	f000 ffb8 	bl	1e854 <_isatty_r>
   1d8e4:	2800      	cmp	r0, #0
   1d8e6:	d010      	beq.n	1d90a <__smakebuf_r+0x86>
   1d8e8:	2203      	movs	r2, #3
   1d8ea:	89a3      	ldrh	r3, [r4, #12]
   1d8ec:	4393      	bics	r3, r2
   1d8ee:	2201      	movs	r2, #1
   1d8f0:	4313      	orrs	r3, r2
   1d8f2:	b21b      	sxth	r3, r3
   1d8f4:	e7ee      	b.n	1d8d4 <__smakebuf_r+0x50>
   1d8f6:	220c      	movs	r2, #12
   1d8f8:	5ea3      	ldrsh	r3, [r4, r2]
   1d8fa:	059a      	lsls	r2, r3, #22
   1d8fc:	d4cf      	bmi.n	1d89e <__smakebuf_r+0x1a>
   1d8fe:	2203      	movs	r2, #3
   1d900:	4393      	bics	r3, r2
   1d902:	2202      	movs	r2, #2
   1d904:	4313      	orrs	r3, r2
   1d906:	81a3      	strh	r3, [r4, #12]
   1d908:	e7c3      	b.n	1d892 <__smakebuf_r+0xe>
   1d90a:	220c      	movs	r2, #12
   1d90c:	5ea3      	ldrsh	r3, [r4, r2]
   1d90e:	e7e1      	b.n	1d8d4 <__smakebuf_r+0x50>
   1d910:	0001d139 	.word	0x0001d139

0001d914 <memchr>:
   1d914:	b570      	push	{r4, r5, r6, lr}
   1d916:	b2cd      	uxtb	r5, r1
   1d918:	0783      	lsls	r3, r0, #30
   1d91a:	d034      	beq.n	1d986 <memchr+0x72>
   1d91c:	1e54      	subs	r4, r2, #1
   1d91e:	2a00      	cmp	r2, #0
   1d920:	d01b      	beq.n	1d95a <memchr+0x46>
   1d922:	7803      	ldrb	r3, [r0, #0]
   1d924:	42ab      	cmp	r3, r5
   1d926:	d019      	beq.n	1d95c <memchr+0x48>
   1d928:	2203      	movs	r2, #3
   1d92a:	e004      	b.n	1d936 <memchr+0x22>
   1d92c:	3c01      	subs	r4, #1
   1d92e:	d314      	bcc.n	1d95a <memchr+0x46>
   1d930:	7803      	ldrb	r3, [r0, #0]
   1d932:	42ab      	cmp	r3, r5
   1d934:	d012      	beq.n	1d95c <memchr+0x48>
   1d936:	3001      	adds	r0, #1
   1d938:	4210      	tst	r0, r2
   1d93a:	d1f7      	bne.n	1d92c <memchr+0x18>
   1d93c:	2c03      	cmp	r4, #3
   1d93e:	d80e      	bhi.n	1d95e <memchr+0x4a>
   1d940:	2c00      	cmp	r4, #0
   1d942:	d00a      	beq.n	1d95a <memchr+0x46>
   1d944:	7803      	ldrb	r3, [r0, #0]
   1d946:	42ab      	cmp	r3, r5
   1d948:	d008      	beq.n	1d95c <memchr+0x48>
   1d94a:	1904      	adds	r4, r0, r4
   1d94c:	e002      	b.n	1d954 <memchr+0x40>
   1d94e:	7803      	ldrb	r3, [r0, #0]
   1d950:	42ab      	cmp	r3, r5
   1d952:	d003      	beq.n	1d95c <memchr+0x48>
   1d954:	3001      	adds	r0, #1
   1d956:	4284      	cmp	r4, r0
   1d958:	d1f9      	bne.n	1d94e <memchr+0x3a>
   1d95a:	2000      	movs	r0, #0
   1d95c:	bd70      	pop	{r4, r5, r6, pc}
   1d95e:	22ff      	movs	r2, #255	; 0xff
   1d960:	060b      	lsls	r3, r1, #24
   1d962:	0c1b      	lsrs	r3, r3, #16
   1d964:	4011      	ands	r1, r2
   1d966:	4319      	orrs	r1, r3
   1d968:	040b      	lsls	r3, r1, #16
   1d96a:	4e08      	ldr	r6, [pc, #32]	; (1d98c <memchr+0x78>)
   1d96c:	4319      	orrs	r1, r3
   1d96e:	6803      	ldr	r3, [r0, #0]
   1d970:	4a07      	ldr	r2, [pc, #28]	; (1d990 <memchr+0x7c>)
   1d972:	404b      	eors	r3, r1
   1d974:	189a      	adds	r2, r3, r2
   1d976:	439a      	bics	r2, r3
   1d978:	4232      	tst	r2, r6
   1d97a:	d1e3      	bne.n	1d944 <memchr+0x30>
   1d97c:	3c04      	subs	r4, #4
   1d97e:	3004      	adds	r0, #4
   1d980:	2c03      	cmp	r4, #3
   1d982:	d8f4      	bhi.n	1d96e <memchr+0x5a>
   1d984:	e7dc      	b.n	1d940 <memchr+0x2c>
   1d986:	0014      	movs	r4, r2
   1d988:	e7d8      	b.n	1d93c <memchr+0x28>
   1d98a:	46c0      	nop			; (mov r8, r8)
   1d98c:	80808080 	.word	0x80808080
   1d990:	fefefeff 	.word	0xfefefeff

0001d994 <_Balloc>:
   1d994:	b570      	push	{r4, r5, r6, lr}
   1d996:	0004      	movs	r4, r0
   1d998:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1d99a:	000d      	movs	r5, r1
   1d99c:	2800      	cmp	r0, #0
   1d99e:	d00a      	beq.n	1d9b6 <_Balloc+0x22>
   1d9a0:	00ab      	lsls	r3, r5, #2
   1d9a2:	18c3      	adds	r3, r0, r3
   1d9a4:	6818      	ldr	r0, [r3, #0]
   1d9a6:	2800      	cmp	r0, #0
   1d9a8:	d00f      	beq.n	1d9ca <_Balloc+0x36>
   1d9aa:	6802      	ldr	r2, [r0, #0]
   1d9ac:	601a      	str	r2, [r3, #0]
   1d9ae:	2300      	movs	r3, #0
   1d9b0:	6103      	str	r3, [r0, #16]
   1d9b2:	60c3      	str	r3, [r0, #12]
   1d9b4:	bd70      	pop	{r4, r5, r6, pc}
   1d9b6:	2221      	movs	r2, #33	; 0x21
   1d9b8:	2104      	movs	r1, #4
   1d9ba:	0020      	movs	r0, r4
   1d9bc:	f000 fe18 	bl	1e5f0 <_calloc_r>
   1d9c0:	64e0      	str	r0, [r4, #76]	; 0x4c
   1d9c2:	2800      	cmp	r0, #0
   1d9c4:	d1ec      	bne.n	1d9a0 <_Balloc+0xc>
   1d9c6:	2000      	movs	r0, #0
   1d9c8:	e7f4      	b.n	1d9b4 <_Balloc+0x20>
   1d9ca:	2601      	movs	r6, #1
   1d9cc:	40ae      	lsls	r6, r5
   1d9ce:	1d72      	adds	r2, r6, #5
   1d9d0:	0092      	lsls	r2, r2, #2
   1d9d2:	2101      	movs	r1, #1
   1d9d4:	0020      	movs	r0, r4
   1d9d6:	f000 fe0b 	bl	1e5f0 <_calloc_r>
   1d9da:	2800      	cmp	r0, #0
   1d9dc:	d0f3      	beq.n	1d9c6 <_Balloc+0x32>
   1d9de:	6045      	str	r5, [r0, #4]
   1d9e0:	6086      	str	r6, [r0, #8]
   1d9e2:	e7e4      	b.n	1d9ae <_Balloc+0x1a>

0001d9e4 <_Bfree>:
   1d9e4:	2900      	cmp	r1, #0
   1d9e6:	d006      	beq.n	1d9f6 <_Bfree+0x12>
   1d9e8:	684b      	ldr	r3, [r1, #4]
   1d9ea:	009a      	lsls	r2, r3, #2
   1d9ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1d9ee:	189b      	adds	r3, r3, r2
   1d9f0:	681a      	ldr	r2, [r3, #0]
   1d9f2:	600a      	str	r2, [r1, #0]
   1d9f4:	6019      	str	r1, [r3, #0]
   1d9f6:	4770      	bx	lr

0001d9f8 <__multadd>:
   1d9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d9fa:	46ce      	mov	lr, r9
   1d9fc:	4647      	mov	r7, r8
   1d9fe:	4681      	mov	r9, r0
   1da00:	0008      	movs	r0, r1
   1da02:	b580      	push	{r7, lr}
   1da04:	000d      	movs	r5, r1
   1da06:	690c      	ldr	r4, [r1, #16]
   1da08:	001f      	movs	r7, r3
   1da0a:	2100      	movs	r1, #0
   1da0c:	3014      	adds	r0, #20
   1da0e:	6803      	ldr	r3, [r0, #0]
   1da10:	3101      	adds	r1, #1
   1da12:	041e      	lsls	r6, r3, #16
   1da14:	0c36      	lsrs	r6, r6, #16
   1da16:	4356      	muls	r6, r2
   1da18:	0c1b      	lsrs	r3, r3, #16
   1da1a:	4353      	muls	r3, r2
   1da1c:	19f6      	adds	r6, r6, r7
   1da1e:	0c37      	lsrs	r7, r6, #16
   1da20:	19db      	adds	r3, r3, r7
   1da22:	0436      	lsls	r6, r6, #16
   1da24:	0c1f      	lsrs	r7, r3, #16
   1da26:	0c36      	lsrs	r6, r6, #16
   1da28:	041b      	lsls	r3, r3, #16
   1da2a:	199b      	adds	r3, r3, r6
   1da2c:	c008      	stmia	r0!, {r3}
   1da2e:	428c      	cmp	r4, r1
   1da30:	dced      	bgt.n	1da0e <__multadd+0x16>
   1da32:	2f00      	cmp	r7, #0
   1da34:	d008      	beq.n	1da48 <__multadd+0x50>
   1da36:	68ab      	ldr	r3, [r5, #8]
   1da38:	429c      	cmp	r4, r3
   1da3a:	da0a      	bge.n	1da52 <__multadd+0x5a>
   1da3c:	1d23      	adds	r3, r4, #4
   1da3e:	009b      	lsls	r3, r3, #2
   1da40:	18eb      	adds	r3, r5, r3
   1da42:	3401      	adds	r4, #1
   1da44:	605f      	str	r7, [r3, #4]
   1da46:	612c      	str	r4, [r5, #16]
   1da48:	0028      	movs	r0, r5
   1da4a:	bc0c      	pop	{r2, r3}
   1da4c:	4690      	mov	r8, r2
   1da4e:	4699      	mov	r9, r3
   1da50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1da52:	686b      	ldr	r3, [r5, #4]
   1da54:	4648      	mov	r0, r9
   1da56:	1c59      	adds	r1, r3, #1
   1da58:	f7ff ff9c 	bl	1d994 <_Balloc>
   1da5c:	0029      	movs	r1, r5
   1da5e:	692b      	ldr	r3, [r5, #16]
   1da60:	4680      	mov	r8, r0
   1da62:	1c9a      	adds	r2, r3, #2
   1da64:	0092      	lsls	r2, r2, #2
   1da66:	310c      	adds	r1, #12
   1da68:	300c      	adds	r0, #12
   1da6a:	f7fc f957 	bl	19d1c <memcpy>
   1da6e:	686b      	ldr	r3, [r5, #4]
   1da70:	009a      	lsls	r2, r3, #2
   1da72:	464b      	mov	r3, r9
   1da74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1da76:	189b      	adds	r3, r3, r2
   1da78:	681a      	ldr	r2, [r3, #0]
   1da7a:	602a      	str	r2, [r5, #0]
   1da7c:	601d      	str	r5, [r3, #0]
   1da7e:	4645      	mov	r5, r8
   1da80:	e7dc      	b.n	1da3c <__multadd+0x44>
   1da82:	46c0      	nop			; (mov r8, r8)

0001da84 <__hi0bits>:
   1da84:	0003      	movs	r3, r0
   1da86:	0c02      	lsrs	r2, r0, #16
   1da88:	2000      	movs	r0, #0
   1da8a:	2a00      	cmp	r2, #0
   1da8c:	d101      	bne.n	1da92 <__hi0bits+0xe>
   1da8e:	041b      	lsls	r3, r3, #16
   1da90:	3010      	adds	r0, #16
   1da92:	0e1a      	lsrs	r2, r3, #24
   1da94:	d101      	bne.n	1da9a <__hi0bits+0x16>
   1da96:	3008      	adds	r0, #8
   1da98:	021b      	lsls	r3, r3, #8
   1da9a:	0f1a      	lsrs	r2, r3, #28
   1da9c:	d101      	bne.n	1daa2 <__hi0bits+0x1e>
   1da9e:	3004      	adds	r0, #4
   1daa0:	011b      	lsls	r3, r3, #4
   1daa2:	0f9a      	lsrs	r2, r3, #30
   1daa4:	d101      	bne.n	1daaa <__hi0bits+0x26>
   1daa6:	3002      	adds	r0, #2
   1daa8:	009b      	lsls	r3, r3, #2
   1daaa:	2b00      	cmp	r3, #0
   1daac:	db03      	blt.n	1dab6 <__hi0bits+0x32>
   1daae:	3001      	adds	r0, #1
   1dab0:	005b      	lsls	r3, r3, #1
   1dab2:	d400      	bmi.n	1dab6 <__hi0bits+0x32>
   1dab4:	2020      	movs	r0, #32
   1dab6:	4770      	bx	lr

0001dab8 <__lo0bits>:
   1dab8:	6803      	ldr	r3, [r0, #0]
   1daba:	075a      	lsls	r2, r3, #29
   1dabc:	d009      	beq.n	1dad2 <__lo0bits+0x1a>
   1dabe:	2200      	movs	r2, #0
   1dac0:	07d9      	lsls	r1, r3, #31
   1dac2:	d404      	bmi.n	1dace <__lo0bits+0x16>
   1dac4:	079a      	lsls	r2, r3, #30
   1dac6:	d420      	bmi.n	1db0a <__lo0bits+0x52>
   1dac8:	2202      	movs	r2, #2
   1daca:	089b      	lsrs	r3, r3, #2
   1dacc:	6003      	str	r3, [r0, #0]
   1dace:	0010      	movs	r0, r2
   1dad0:	4770      	bx	lr
   1dad2:	0419      	lsls	r1, r3, #16
   1dad4:	2200      	movs	r2, #0
   1dad6:	2900      	cmp	r1, #0
   1dad8:	d101      	bne.n	1dade <__lo0bits+0x26>
   1dada:	0c1b      	lsrs	r3, r3, #16
   1dadc:	3210      	adds	r2, #16
   1dade:	21ff      	movs	r1, #255	; 0xff
   1dae0:	4219      	tst	r1, r3
   1dae2:	d101      	bne.n	1dae8 <__lo0bits+0x30>
   1dae4:	3208      	adds	r2, #8
   1dae6:	0a1b      	lsrs	r3, r3, #8
   1dae8:	0719      	lsls	r1, r3, #28
   1daea:	d101      	bne.n	1daf0 <__lo0bits+0x38>
   1daec:	3204      	adds	r2, #4
   1daee:	091b      	lsrs	r3, r3, #4
   1daf0:	0799      	lsls	r1, r3, #30
   1daf2:	d101      	bne.n	1daf8 <__lo0bits+0x40>
   1daf4:	3202      	adds	r2, #2
   1daf6:	089b      	lsrs	r3, r3, #2
   1daf8:	07d9      	lsls	r1, r3, #31
   1dafa:	d404      	bmi.n	1db06 <__lo0bits+0x4e>
   1dafc:	085b      	lsrs	r3, r3, #1
   1dafe:	d101      	bne.n	1db04 <__lo0bits+0x4c>
   1db00:	2220      	movs	r2, #32
   1db02:	e7e4      	b.n	1dace <__lo0bits+0x16>
   1db04:	3201      	adds	r2, #1
   1db06:	6003      	str	r3, [r0, #0]
   1db08:	e7e1      	b.n	1dace <__lo0bits+0x16>
   1db0a:	085b      	lsrs	r3, r3, #1
   1db0c:	6003      	str	r3, [r0, #0]
   1db0e:	2201      	movs	r2, #1
   1db10:	e7dd      	b.n	1dace <__lo0bits+0x16>
   1db12:	46c0      	nop			; (mov r8, r8)

0001db14 <__i2b>:
   1db14:	b510      	push	{r4, lr}
   1db16:	000c      	movs	r4, r1
   1db18:	2101      	movs	r1, #1
   1db1a:	f7ff ff3b 	bl	1d994 <_Balloc>
   1db1e:	2301      	movs	r3, #1
   1db20:	6144      	str	r4, [r0, #20]
   1db22:	6103      	str	r3, [r0, #16]
   1db24:	bd10      	pop	{r4, pc}
   1db26:	46c0      	nop			; (mov r8, r8)

0001db28 <__multiply>:
   1db28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db2a:	4657      	mov	r7, sl
   1db2c:	464e      	mov	r6, r9
   1db2e:	4645      	mov	r5, r8
   1db30:	46de      	mov	lr, fp
   1db32:	b5e0      	push	{r5, r6, r7, lr}
   1db34:	6914      	ldr	r4, [r2, #16]
   1db36:	690e      	ldr	r6, [r1, #16]
   1db38:	b085      	sub	sp, #20
   1db3a:	000f      	movs	r7, r1
   1db3c:	0015      	movs	r5, r2
   1db3e:	42a6      	cmp	r6, r4
   1db40:	da04      	bge.n	1db4c <__multiply+0x24>
   1db42:	0033      	movs	r3, r6
   1db44:	0017      	movs	r7, r2
   1db46:	0026      	movs	r6, r4
   1db48:	000d      	movs	r5, r1
   1db4a:	001c      	movs	r4, r3
   1db4c:	1933      	adds	r3, r6, r4
   1db4e:	4698      	mov	r8, r3
   1db50:	68bb      	ldr	r3, [r7, #8]
   1db52:	6879      	ldr	r1, [r7, #4]
   1db54:	4598      	cmp	r8, r3
   1db56:	dd00      	ble.n	1db5a <__multiply+0x32>
   1db58:	3101      	adds	r1, #1
   1db5a:	f7ff ff1b 	bl	1d994 <_Balloc>
   1db5e:	2214      	movs	r2, #20
   1db60:	0003      	movs	r3, r0
   1db62:	4694      	mov	ip, r2
   1db64:	4463      	add	r3, ip
   1db66:	469b      	mov	fp, r3
   1db68:	4643      	mov	r3, r8
   1db6a:	009b      	lsls	r3, r3, #2
   1db6c:	445b      	add	r3, fp
   1db6e:	0019      	movs	r1, r3
   1db70:	9302      	str	r3, [sp, #8]
   1db72:	9003      	str	r0, [sp, #12]
   1db74:	465b      	mov	r3, fp
   1db76:	2200      	movs	r2, #0
   1db78:	458b      	cmp	fp, r1
   1db7a:	d203      	bcs.n	1db84 <__multiply+0x5c>
   1db7c:	9902      	ldr	r1, [sp, #8]
   1db7e:	c304      	stmia	r3!, {r2}
   1db80:	4299      	cmp	r1, r3
   1db82:	d8fc      	bhi.n	1db7e <__multiply+0x56>
   1db84:	2314      	movs	r3, #20
   1db86:	00a4      	lsls	r4, r4, #2
   1db88:	469a      	mov	sl, r3
   1db8a:	3714      	adds	r7, #20
   1db8c:	0023      	movs	r3, r4
   1db8e:	46bc      	mov	ip, r7
   1db90:	44aa      	add	sl, r5
   1db92:	00b6      	lsls	r6, r6, #2
   1db94:	4453      	add	r3, sl
   1db96:	9700      	str	r7, [sp, #0]
   1db98:	44b4      	add	ip, r6
   1db9a:	9301      	str	r3, [sp, #4]
   1db9c:	459a      	cmp	sl, r3
   1db9e:	d24f      	bcs.n	1dc40 <__multiply+0x118>
   1dba0:	4653      	mov	r3, sl
   1dba2:	681b      	ldr	r3, [r3, #0]
   1dba4:	041e      	lsls	r6, r3, #16
   1dba6:	0c36      	lsrs	r6, r6, #16
   1dba8:	d020      	beq.n	1dbec <__multiply+0xc4>
   1dbaa:	465c      	mov	r4, fp
   1dbac:	2700      	movs	r7, #0
   1dbae:	9d00      	ldr	r5, [sp, #0]
   1dbb0:	0021      	movs	r1, r4
   1dbb2:	cc08      	ldmia	r4!, {r3}
   1dbb4:	cd04      	ldmia	r5!, {r2}
   1dbb6:	4699      	mov	r9, r3
   1dbb8:	4648      	mov	r0, r9
   1dbba:	0413      	lsls	r3, r2, #16
   1dbbc:	0c1b      	lsrs	r3, r3, #16
   1dbbe:	4373      	muls	r3, r6
   1dbc0:	0400      	lsls	r0, r0, #16
   1dbc2:	0c00      	lsrs	r0, r0, #16
   1dbc4:	181b      	adds	r3, r3, r0
   1dbc6:	19d8      	adds	r0, r3, r7
   1dbc8:	0c13      	lsrs	r3, r2, #16
   1dbca:	464a      	mov	r2, r9
   1dbcc:	4373      	muls	r3, r6
   1dbce:	0c12      	lsrs	r2, r2, #16
   1dbd0:	189b      	adds	r3, r3, r2
   1dbd2:	0c02      	lsrs	r2, r0, #16
   1dbd4:	189b      	adds	r3, r3, r2
   1dbd6:	0402      	lsls	r2, r0, #16
   1dbd8:	0c1f      	lsrs	r7, r3, #16
   1dbda:	0c12      	lsrs	r2, r2, #16
   1dbdc:	041b      	lsls	r3, r3, #16
   1dbde:	4313      	orrs	r3, r2
   1dbe0:	600b      	str	r3, [r1, #0]
   1dbe2:	45ac      	cmp	ip, r5
   1dbe4:	d8e4      	bhi.n	1dbb0 <__multiply+0x88>
   1dbe6:	4653      	mov	r3, sl
   1dbe8:	6027      	str	r7, [r4, #0]
   1dbea:	681b      	ldr	r3, [r3, #0]
   1dbec:	0c1e      	lsrs	r6, r3, #16
   1dbee:	d020      	beq.n	1dc32 <__multiply+0x10a>
   1dbf0:	465b      	mov	r3, fp
   1dbf2:	2100      	movs	r1, #0
   1dbf4:	681b      	ldr	r3, [r3, #0]
   1dbf6:	465c      	mov	r4, fp
   1dbf8:	0018      	movs	r0, r3
   1dbfa:	000f      	movs	r7, r1
   1dbfc:	4662      	mov	r2, ip
   1dbfe:	9d00      	ldr	r5, [sp, #0]
   1dc00:	8829      	ldrh	r1, [r5, #0]
   1dc02:	0c00      	lsrs	r0, r0, #16
   1dc04:	4371      	muls	r1, r6
   1dc06:	1809      	adds	r1, r1, r0
   1dc08:	19c9      	adds	r1, r1, r7
   1dc0a:	041b      	lsls	r3, r3, #16
   1dc0c:	0408      	lsls	r0, r1, #16
   1dc0e:	0c1b      	lsrs	r3, r3, #16
   1dc10:	4303      	orrs	r3, r0
   1dc12:	6023      	str	r3, [r4, #0]
   1dc14:	cd08      	ldmia	r5!, {r3}
   1dc16:	6860      	ldr	r0, [r4, #4]
   1dc18:	0c1b      	lsrs	r3, r3, #16
   1dc1a:	4373      	muls	r3, r6
   1dc1c:	0407      	lsls	r7, r0, #16
   1dc1e:	0c3f      	lsrs	r7, r7, #16
   1dc20:	19db      	adds	r3, r3, r7
   1dc22:	0c09      	lsrs	r1, r1, #16
   1dc24:	185b      	adds	r3, r3, r1
   1dc26:	0c1f      	lsrs	r7, r3, #16
   1dc28:	3404      	adds	r4, #4
   1dc2a:	42aa      	cmp	r2, r5
   1dc2c:	d8e8      	bhi.n	1dc00 <__multiply+0xd8>
   1dc2e:	4694      	mov	ip, r2
   1dc30:	6023      	str	r3, [r4, #0]
   1dc32:	2304      	movs	r3, #4
   1dc34:	4699      	mov	r9, r3
   1dc36:	9b01      	ldr	r3, [sp, #4]
   1dc38:	44ca      	add	sl, r9
   1dc3a:	44cb      	add	fp, r9
   1dc3c:	4553      	cmp	r3, sl
   1dc3e:	d8af      	bhi.n	1dba0 <__multiply+0x78>
   1dc40:	4643      	mov	r3, r8
   1dc42:	2b00      	cmp	r3, #0
   1dc44:	dd0e      	ble.n	1dc64 <__multiply+0x13c>
   1dc46:	9b02      	ldr	r3, [sp, #8]
   1dc48:	3b04      	subs	r3, #4
   1dc4a:	681a      	ldr	r2, [r3, #0]
   1dc4c:	2a00      	cmp	r2, #0
   1dc4e:	d109      	bne.n	1dc64 <__multiply+0x13c>
   1dc50:	4642      	mov	r2, r8
   1dc52:	e003      	b.n	1dc5c <__multiply+0x134>
   1dc54:	3b04      	subs	r3, #4
   1dc56:	6819      	ldr	r1, [r3, #0]
   1dc58:	2900      	cmp	r1, #0
   1dc5a:	d102      	bne.n	1dc62 <__multiply+0x13a>
   1dc5c:	3a01      	subs	r2, #1
   1dc5e:	2a00      	cmp	r2, #0
   1dc60:	d1f8      	bne.n	1dc54 <__multiply+0x12c>
   1dc62:	4690      	mov	r8, r2
   1dc64:	9b03      	ldr	r3, [sp, #12]
   1dc66:	4642      	mov	r2, r8
   1dc68:	0018      	movs	r0, r3
   1dc6a:	611a      	str	r2, [r3, #16]
   1dc6c:	b005      	add	sp, #20
   1dc6e:	bc3c      	pop	{r2, r3, r4, r5}
   1dc70:	4690      	mov	r8, r2
   1dc72:	4699      	mov	r9, r3
   1dc74:	46a2      	mov	sl, r4
   1dc76:	46ab      	mov	fp, r5
   1dc78:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dc7a:	46c0      	nop			; (mov r8, r8)

0001dc7c <__pow5mult>:
   1dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dc7e:	4647      	mov	r7, r8
   1dc80:	46ce      	mov	lr, r9
   1dc82:	2303      	movs	r3, #3
   1dc84:	b580      	push	{r7, lr}
   1dc86:	4680      	mov	r8, r0
   1dc88:	000f      	movs	r7, r1
   1dc8a:	0014      	movs	r4, r2
   1dc8c:	4013      	ands	r3, r2
   1dc8e:	d13a      	bne.n	1dd06 <__pow5mult+0x8a>
   1dc90:	10a4      	asrs	r4, r4, #2
   1dc92:	003e      	movs	r6, r7
   1dc94:	2c00      	cmp	r4, #0
   1dc96:	d025      	beq.n	1dce4 <__pow5mult+0x68>
   1dc98:	4643      	mov	r3, r8
   1dc9a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1dc9c:	2d00      	cmp	r5, #0
   1dc9e:	d03b      	beq.n	1dd18 <__pow5mult+0x9c>
   1dca0:	003e      	movs	r6, r7
   1dca2:	2300      	movs	r3, #0
   1dca4:	2701      	movs	r7, #1
   1dca6:	4699      	mov	r9, r3
   1dca8:	4227      	tst	r7, r4
   1dcaa:	d107      	bne.n	1dcbc <__pow5mult+0x40>
   1dcac:	1064      	asrs	r4, r4, #1
   1dcae:	d019      	beq.n	1dce4 <__pow5mult+0x68>
   1dcb0:	6828      	ldr	r0, [r5, #0]
   1dcb2:	2800      	cmp	r0, #0
   1dcb4:	d01b      	beq.n	1dcee <__pow5mult+0x72>
   1dcb6:	0005      	movs	r5, r0
   1dcb8:	4227      	tst	r7, r4
   1dcba:	d0f7      	beq.n	1dcac <__pow5mult+0x30>
   1dcbc:	002a      	movs	r2, r5
   1dcbe:	0031      	movs	r1, r6
   1dcc0:	4640      	mov	r0, r8
   1dcc2:	f7ff ff31 	bl	1db28 <__multiply>
   1dcc6:	2e00      	cmp	r6, #0
   1dcc8:	d01b      	beq.n	1dd02 <__pow5mult+0x86>
   1dcca:	4642      	mov	r2, r8
   1dccc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1dcce:	6873      	ldr	r3, [r6, #4]
   1dcd0:	4694      	mov	ip, r2
   1dcd2:	009b      	lsls	r3, r3, #2
   1dcd4:	4463      	add	r3, ip
   1dcd6:	681a      	ldr	r2, [r3, #0]
   1dcd8:	1064      	asrs	r4, r4, #1
   1dcda:	6032      	str	r2, [r6, #0]
   1dcdc:	601e      	str	r6, [r3, #0]
   1dcde:	0006      	movs	r6, r0
   1dce0:	2c00      	cmp	r4, #0
   1dce2:	d1e5      	bne.n	1dcb0 <__pow5mult+0x34>
   1dce4:	0030      	movs	r0, r6
   1dce6:	bc0c      	pop	{r2, r3}
   1dce8:	4690      	mov	r8, r2
   1dcea:	4699      	mov	r9, r3
   1dcec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1dcee:	002a      	movs	r2, r5
   1dcf0:	0029      	movs	r1, r5
   1dcf2:	4640      	mov	r0, r8
   1dcf4:	f7ff ff18 	bl	1db28 <__multiply>
   1dcf8:	464b      	mov	r3, r9
   1dcfa:	6028      	str	r0, [r5, #0]
   1dcfc:	6003      	str	r3, [r0, #0]
   1dcfe:	0005      	movs	r5, r0
   1dd00:	e7da      	b.n	1dcb8 <__pow5mult+0x3c>
   1dd02:	0006      	movs	r6, r0
   1dd04:	e7d2      	b.n	1dcac <__pow5mult+0x30>
   1dd06:	4a0b      	ldr	r2, [pc, #44]	; (1dd34 <__pow5mult+0xb8>)
   1dd08:	3b01      	subs	r3, #1
   1dd0a:	009b      	lsls	r3, r3, #2
   1dd0c:	589a      	ldr	r2, [r3, r2]
   1dd0e:	2300      	movs	r3, #0
   1dd10:	f7ff fe72 	bl	1d9f8 <__multadd>
   1dd14:	0007      	movs	r7, r0
   1dd16:	e7bb      	b.n	1dc90 <__pow5mult+0x14>
   1dd18:	2101      	movs	r1, #1
   1dd1a:	4640      	mov	r0, r8
   1dd1c:	f7ff fe3a 	bl	1d994 <_Balloc>
   1dd20:	4b05      	ldr	r3, [pc, #20]	; (1dd38 <__pow5mult+0xbc>)
   1dd22:	0005      	movs	r5, r0
   1dd24:	6143      	str	r3, [r0, #20]
   1dd26:	2301      	movs	r3, #1
   1dd28:	6103      	str	r3, [r0, #16]
   1dd2a:	4643      	mov	r3, r8
   1dd2c:	6498      	str	r0, [r3, #72]	; 0x48
   1dd2e:	2300      	movs	r3, #0
   1dd30:	6003      	str	r3, [r0, #0]
   1dd32:	e7b5      	b.n	1dca0 <__pow5mult+0x24>
   1dd34:	000208f8 	.word	0x000208f8
   1dd38:	00000271 	.word	0x00000271

0001dd3c <__lshift>:
   1dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dd3e:	464e      	mov	r6, r9
   1dd40:	4645      	mov	r5, r8
   1dd42:	46de      	mov	lr, fp
   1dd44:	4657      	mov	r7, sl
   1dd46:	b5e0      	push	{r5, r6, r7, lr}
   1dd48:	000e      	movs	r6, r1
   1dd4a:	6933      	ldr	r3, [r6, #16]
   1dd4c:	1154      	asrs	r4, r2, #5
   1dd4e:	4698      	mov	r8, r3
   1dd50:	44a0      	add	r8, r4
   1dd52:	4643      	mov	r3, r8
   1dd54:	1c5d      	adds	r5, r3, #1
   1dd56:	68b3      	ldr	r3, [r6, #8]
   1dd58:	4683      	mov	fp, r0
   1dd5a:	4691      	mov	r9, r2
   1dd5c:	6849      	ldr	r1, [r1, #4]
   1dd5e:	429d      	cmp	r5, r3
   1dd60:	dd03      	ble.n	1dd6a <__lshift+0x2e>
   1dd62:	3101      	adds	r1, #1
   1dd64:	005b      	lsls	r3, r3, #1
   1dd66:	429d      	cmp	r5, r3
   1dd68:	dcfb      	bgt.n	1dd62 <__lshift+0x26>
   1dd6a:	4658      	mov	r0, fp
   1dd6c:	f7ff fe12 	bl	1d994 <_Balloc>
   1dd70:	0003      	movs	r3, r0
   1dd72:	4684      	mov	ip, r0
   1dd74:	3314      	adds	r3, #20
   1dd76:	2c00      	cmp	r4, #0
   1dd78:	dd06      	ble.n	1dd88 <__lshift+0x4c>
   1dd7a:	2100      	movs	r1, #0
   1dd7c:	00a4      	lsls	r4, r4, #2
   1dd7e:	001a      	movs	r2, r3
   1dd80:	191b      	adds	r3, r3, r4
   1dd82:	c202      	stmia	r2!, {r1}
   1dd84:	4293      	cmp	r3, r2
   1dd86:	d1fc      	bne.n	1dd82 <__lshift+0x46>
   1dd88:	6932      	ldr	r2, [r6, #16]
   1dd8a:	4648      	mov	r0, r9
   1dd8c:	0097      	lsls	r7, r2, #2
   1dd8e:	0031      	movs	r1, r6
   1dd90:	221f      	movs	r2, #31
   1dd92:	3114      	adds	r1, #20
   1dd94:	4010      	ands	r0, r2
   1dd96:	19cf      	adds	r7, r1, r7
   1dd98:	4681      	mov	r9, r0
   1dd9a:	2800      	cmp	r0, #0
   1dd9c:	d025      	beq.n	1ddea <__lshift+0xae>
   1dd9e:	2220      	movs	r2, #32
   1dda0:	1a12      	subs	r2, r2, r0
   1dda2:	4692      	mov	sl, r2
   1dda4:	2200      	movs	r2, #0
   1dda6:	4648      	mov	r0, r9
   1dda8:	680c      	ldr	r4, [r1, #0]
   1ddaa:	4084      	lsls	r4, r0
   1ddac:	4650      	mov	r0, sl
   1ddae:	4314      	orrs	r4, r2
   1ddb0:	601c      	str	r4, [r3, #0]
   1ddb2:	c904      	ldmia	r1!, {r2}
   1ddb4:	3304      	adds	r3, #4
   1ddb6:	40c2      	lsrs	r2, r0
   1ddb8:	428f      	cmp	r7, r1
   1ddba:	d8f4      	bhi.n	1dda6 <__lshift+0x6a>
   1ddbc:	601a      	str	r2, [r3, #0]
   1ddbe:	2a00      	cmp	r2, #0
   1ddc0:	d001      	beq.n	1ddc6 <__lshift+0x8a>
   1ddc2:	4645      	mov	r5, r8
   1ddc4:	3502      	adds	r5, #2
   1ddc6:	4663      	mov	r3, ip
   1ddc8:	3d01      	subs	r5, #1
   1ddca:	611d      	str	r5, [r3, #16]
   1ddcc:	6873      	ldr	r3, [r6, #4]
   1ddce:	4660      	mov	r0, ip
   1ddd0:	009a      	lsls	r2, r3, #2
   1ddd2:	465b      	mov	r3, fp
   1ddd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ddd6:	189b      	adds	r3, r3, r2
   1ddd8:	681a      	ldr	r2, [r3, #0]
   1ddda:	6032      	str	r2, [r6, #0]
   1dddc:	601e      	str	r6, [r3, #0]
   1ddde:	bc3c      	pop	{r2, r3, r4, r5}
   1dde0:	4690      	mov	r8, r2
   1dde2:	4699      	mov	r9, r3
   1dde4:	46a2      	mov	sl, r4
   1dde6:	46ab      	mov	fp, r5
   1dde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ddea:	c904      	ldmia	r1!, {r2}
   1ddec:	c304      	stmia	r3!, {r2}
   1ddee:	428f      	cmp	r7, r1
   1ddf0:	d9e9      	bls.n	1ddc6 <__lshift+0x8a>
   1ddf2:	c904      	ldmia	r1!, {r2}
   1ddf4:	c304      	stmia	r3!, {r2}
   1ddf6:	428f      	cmp	r7, r1
   1ddf8:	d8f7      	bhi.n	1ddea <__lshift+0xae>
   1ddfa:	e7e4      	b.n	1ddc6 <__lshift+0x8a>

0001ddfc <__mcmp>:
   1ddfc:	690a      	ldr	r2, [r1, #16]
   1ddfe:	6903      	ldr	r3, [r0, #16]
   1de00:	b530      	push	{r4, r5, lr}
   1de02:	0005      	movs	r5, r0
   1de04:	1a98      	subs	r0, r3, r2
   1de06:	d111      	bne.n	1de2c <__mcmp+0x30>
   1de08:	0092      	lsls	r2, r2, #2
   1de0a:	3514      	adds	r5, #20
   1de0c:	3114      	adds	r1, #20
   1de0e:	18ab      	adds	r3, r5, r2
   1de10:	1889      	adds	r1, r1, r2
   1de12:	e001      	b.n	1de18 <__mcmp+0x1c>
   1de14:	429d      	cmp	r5, r3
   1de16:	d209      	bcs.n	1de2c <__mcmp+0x30>
   1de18:	3b04      	subs	r3, #4
   1de1a:	3904      	subs	r1, #4
   1de1c:	681c      	ldr	r4, [r3, #0]
   1de1e:	680a      	ldr	r2, [r1, #0]
   1de20:	4294      	cmp	r4, r2
   1de22:	d0f7      	beq.n	1de14 <__mcmp+0x18>
   1de24:	4294      	cmp	r4, r2
   1de26:	4180      	sbcs	r0, r0
   1de28:	2201      	movs	r2, #1
   1de2a:	4310      	orrs	r0, r2
   1de2c:	bd30      	pop	{r4, r5, pc}
   1de2e:	46c0      	nop			; (mov r8, r8)

0001de30 <__mdiff>:
   1de30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de32:	4645      	mov	r5, r8
   1de34:	46de      	mov	lr, fp
   1de36:	4657      	mov	r7, sl
   1de38:	464e      	mov	r6, r9
   1de3a:	0014      	movs	r4, r2
   1de3c:	690b      	ldr	r3, [r1, #16]
   1de3e:	6912      	ldr	r2, [r2, #16]
   1de40:	b5e0      	push	{r5, r6, r7, lr}
   1de42:	4688      	mov	r8, r1
   1de44:	1a9d      	subs	r5, r3, r2
   1de46:	d11a      	bne.n	1de7e <__mdiff+0x4e>
   1de48:	000f      	movs	r7, r1
   1de4a:	2114      	movs	r1, #20
   1de4c:	468c      	mov	ip, r1
   1de4e:	0092      	lsls	r2, r2, #2
   1de50:	3714      	adds	r7, #20
   1de52:	44a4      	add	ip, r4
   1de54:	18bb      	adds	r3, r7, r2
   1de56:	4462      	add	r2, ip
   1de58:	e002      	b.n	1de60 <__mdiff+0x30>
   1de5a:	429f      	cmp	r7, r3
   1de5c:	d300      	bcc.n	1de60 <__mdiff+0x30>
   1de5e:	e070      	b.n	1df42 <__mdiff+0x112>
   1de60:	3b04      	subs	r3, #4
   1de62:	3a04      	subs	r2, #4
   1de64:	681e      	ldr	r6, [r3, #0]
   1de66:	6811      	ldr	r1, [r2, #0]
   1de68:	428e      	cmp	r6, r1
   1de6a:	d0f6      	beq.n	1de5a <__mdiff+0x2a>
   1de6c:	d300      	bcc.n	1de70 <__mdiff+0x40>
   1de6e:	e071      	b.n	1df54 <__mdiff+0x124>
   1de70:	4643      	mov	r3, r8
   1de72:	003e      	movs	r6, r7
   1de74:	46a0      	mov	r8, r4
   1de76:	4667      	mov	r7, ip
   1de78:	001c      	movs	r4, r3
   1de7a:	2501      	movs	r5, #1
   1de7c:	e006      	b.n	1de8c <__mdiff+0x5c>
   1de7e:	2d00      	cmp	r5, #0
   1de80:	db6a      	blt.n	1df58 <__mdiff+0x128>
   1de82:	4647      	mov	r7, r8
   1de84:	0026      	movs	r6, r4
   1de86:	2500      	movs	r5, #0
   1de88:	3714      	adds	r7, #20
   1de8a:	3614      	adds	r6, #20
   1de8c:	4643      	mov	r3, r8
   1de8e:	6859      	ldr	r1, [r3, #4]
   1de90:	f7ff fd80 	bl	1d994 <_Balloc>
   1de94:	4643      	mov	r3, r8
   1de96:	4681      	mov	r9, r0
   1de98:	60c5      	str	r5, [r0, #12]
   1de9a:	6918      	ldr	r0, [r3, #16]
   1de9c:	464d      	mov	r5, r9
   1de9e:	0083      	lsls	r3, r0, #2
   1dea0:	469c      	mov	ip, r3
   1dea2:	6923      	ldr	r3, [r4, #16]
   1dea4:	44bc      	add	ip, r7
   1dea6:	009b      	lsls	r3, r3, #2
   1dea8:	4698      	mov	r8, r3
   1deaa:	2300      	movs	r3, #0
   1deac:	44b0      	add	r8, r6
   1deae:	3514      	adds	r5, #20
   1deb0:	469a      	mov	sl, r3
   1deb2:	e000      	b.n	1deb6 <__mdiff+0x86>
   1deb4:	0027      	movs	r7, r4
   1deb6:	ce04      	ldmia	r6!, {r2}
   1deb8:	003c      	movs	r4, r7
   1deba:	4693      	mov	fp, r2
   1debc:	4659      	mov	r1, fp
   1debe:	cc08      	ldmia	r4!, {r3}
   1dec0:	0409      	lsls	r1, r1, #16
   1dec2:	041a      	lsls	r2, r3, #16
   1dec4:	0c12      	lsrs	r2, r2, #16
   1dec6:	4452      	add	r2, sl
   1dec8:	0c09      	lsrs	r1, r1, #16
   1deca:	1a52      	subs	r2, r2, r1
   1decc:	0c19      	lsrs	r1, r3, #16
   1dece:	465b      	mov	r3, fp
   1ded0:	0c1b      	lsrs	r3, r3, #16
   1ded2:	1acb      	subs	r3, r1, r3
   1ded4:	1411      	asrs	r1, r2, #16
   1ded6:	185b      	adds	r3, r3, r1
   1ded8:	0412      	lsls	r2, r2, #16
   1deda:	1419      	asrs	r1, r3, #16
   1dedc:	0c12      	lsrs	r2, r2, #16
   1dede:	041b      	lsls	r3, r3, #16
   1dee0:	468a      	mov	sl, r1
   1dee2:	4313      	orrs	r3, r2
   1dee4:	1d29      	adds	r1, r5, #4
   1dee6:	602b      	str	r3, [r5, #0]
   1dee8:	000d      	movs	r5, r1
   1deea:	45b0      	cmp	r8, r6
   1deec:	d8e2      	bhi.n	1deb4 <__mdiff+0x84>
   1deee:	45a4      	cmp	ip, r4
   1def0:	d916      	bls.n	1df20 <__mdiff+0xf0>
   1def2:	cc08      	ldmia	r4!, {r3}
   1def4:	041a      	lsls	r2, r3, #16
   1def6:	0c12      	lsrs	r2, r2, #16
   1def8:	4452      	add	r2, sl
   1defa:	1416      	asrs	r6, r2, #16
   1defc:	0c1b      	lsrs	r3, r3, #16
   1defe:	199b      	adds	r3, r3, r6
   1df00:	0412      	lsls	r2, r2, #16
   1df02:	141e      	asrs	r6, r3, #16
   1df04:	0c12      	lsrs	r2, r2, #16
   1df06:	041b      	lsls	r3, r3, #16
   1df08:	4313      	orrs	r3, r2
   1df0a:	46b2      	mov	sl, r6
   1df0c:	c508      	stmia	r5!, {r3}
   1df0e:	45a4      	cmp	ip, r4
   1df10:	d8ef      	bhi.n	1def2 <__mdiff+0xc2>
   1df12:	4662      	mov	r2, ip
   1df14:	2403      	movs	r4, #3
   1df16:	1bd2      	subs	r2, r2, r7
   1df18:	3a05      	subs	r2, #5
   1df1a:	43a2      	bics	r2, r4
   1df1c:	3204      	adds	r2, #4
   1df1e:	1889      	adds	r1, r1, r2
   1df20:	3904      	subs	r1, #4
   1df22:	2b00      	cmp	r3, #0
   1df24:	d104      	bne.n	1df30 <__mdiff+0x100>
   1df26:	3904      	subs	r1, #4
   1df28:	680b      	ldr	r3, [r1, #0]
   1df2a:	3801      	subs	r0, #1
   1df2c:	2b00      	cmp	r3, #0
   1df2e:	d0fa      	beq.n	1df26 <__mdiff+0xf6>
   1df30:	464b      	mov	r3, r9
   1df32:	6118      	str	r0, [r3, #16]
   1df34:	4648      	mov	r0, r9
   1df36:	bc3c      	pop	{r2, r3, r4, r5}
   1df38:	4690      	mov	r8, r2
   1df3a:	4699      	mov	r9, r3
   1df3c:	46a2      	mov	sl, r4
   1df3e:	46ab      	mov	fp, r5
   1df40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1df42:	2100      	movs	r1, #0
   1df44:	f7ff fd26 	bl	1d994 <_Balloc>
   1df48:	2301      	movs	r3, #1
   1df4a:	6103      	str	r3, [r0, #16]
   1df4c:	2300      	movs	r3, #0
   1df4e:	4681      	mov	r9, r0
   1df50:	6143      	str	r3, [r0, #20]
   1df52:	e7ef      	b.n	1df34 <__mdiff+0x104>
   1df54:	4666      	mov	r6, ip
   1df56:	e799      	b.n	1de8c <__mdiff+0x5c>
   1df58:	0027      	movs	r7, r4
   1df5a:	000e      	movs	r6, r1
   1df5c:	46a0      	mov	r8, r4
   1df5e:	3714      	adds	r7, #20
   1df60:	3614      	adds	r6, #20
   1df62:	000c      	movs	r4, r1
   1df64:	2501      	movs	r5, #1
   1df66:	e791      	b.n	1de8c <__mdiff+0x5c>

0001df68 <__d2b>:
   1df68:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df6a:	2101      	movs	r1, #1
   1df6c:	001c      	movs	r4, r3
   1df6e:	b083      	sub	sp, #12
   1df70:	9e08      	ldr	r6, [sp, #32]
   1df72:	0015      	movs	r5, r2
   1df74:	f7ff fd0e 	bl	1d994 <_Balloc>
   1df78:	0323      	lsls	r3, r4, #12
   1df7a:	0064      	lsls	r4, r4, #1
   1df7c:	0007      	movs	r7, r0
   1df7e:	0b1b      	lsrs	r3, r3, #12
   1df80:	0d64      	lsrs	r4, r4, #21
   1df82:	d002      	beq.n	1df8a <__d2b+0x22>
   1df84:	2280      	movs	r2, #128	; 0x80
   1df86:	0352      	lsls	r2, r2, #13
   1df88:	4313      	orrs	r3, r2
   1df8a:	9301      	str	r3, [sp, #4]
   1df8c:	2d00      	cmp	r5, #0
   1df8e:	d019      	beq.n	1dfc4 <__d2b+0x5c>
   1df90:	4668      	mov	r0, sp
   1df92:	9500      	str	r5, [sp, #0]
   1df94:	f7ff fd90 	bl	1dab8 <__lo0bits>
   1df98:	2800      	cmp	r0, #0
   1df9a:	d130      	bne.n	1dffe <__d2b+0x96>
   1df9c:	9b00      	ldr	r3, [sp, #0]
   1df9e:	617b      	str	r3, [r7, #20]
   1dfa0:	9b01      	ldr	r3, [sp, #4]
   1dfa2:	61bb      	str	r3, [r7, #24]
   1dfa4:	1e5a      	subs	r2, r3, #1
   1dfa6:	4193      	sbcs	r3, r2
   1dfa8:	1c5d      	adds	r5, r3, #1
   1dfaa:	613d      	str	r5, [r7, #16]
   1dfac:	2c00      	cmp	r4, #0
   1dfae:	d014      	beq.n	1dfda <__d2b+0x72>
   1dfb0:	4b19      	ldr	r3, [pc, #100]	; (1e018 <__d2b+0xb0>)
   1dfb2:	469c      	mov	ip, r3
   1dfb4:	2335      	movs	r3, #53	; 0x35
   1dfb6:	4464      	add	r4, ip
   1dfb8:	1824      	adds	r4, r4, r0
   1dfba:	1a18      	subs	r0, r3, r0
   1dfbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dfbe:	6034      	str	r4, [r6, #0]
   1dfc0:	6018      	str	r0, [r3, #0]
   1dfc2:	e019      	b.n	1dff8 <__d2b+0x90>
   1dfc4:	a801      	add	r0, sp, #4
   1dfc6:	f7ff fd77 	bl	1dab8 <__lo0bits>
   1dfca:	9b01      	ldr	r3, [sp, #4]
   1dfcc:	3020      	adds	r0, #32
   1dfce:	617b      	str	r3, [r7, #20]
   1dfd0:	2301      	movs	r3, #1
   1dfd2:	2501      	movs	r5, #1
   1dfd4:	613b      	str	r3, [r7, #16]
   1dfd6:	2c00      	cmp	r4, #0
   1dfd8:	d1ea      	bne.n	1dfb0 <__d2b+0x48>
   1dfda:	4b10      	ldr	r3, [pc, #64]	; (1e01c <__d2b+0xb4>)
   1dfdc:	469c      	mov	ip, r3
   1dfde:	4b10      	ldr	r3, [pc, #64]	; (1e020 <__d2b+0xb8>)
   1dfe0:	4460      	add	r0, ip
   1dfe2:	18eb      	adds	r3, r5, r3
   1dfe4:	009b      	lsls	r3, r3, #2
   1dfe6:	18fb      	adds	r3, r7, r3
   1dfe8:	6030      	str	r0, [r6, #0]
   1dfea:	6958      	ldr	r0, [r3, #20]
   1dfec:	f7ff fd4a 	bl	1da84 <__hi0bits>
   1dff0:	016b      	lsls	r3, r5, #5
   1dff2:	1a18      	subs	r0, r3, r0
   1dff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1dff6:	6018      	str	r0, [r3, #0]
   1dff8:	0038      	movs	r0, r7
   1dffa:	b003      	add	sp, #12
   1dffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dffe:	9b01      	ldr	r3, [sp, #4]
   1e000:	2220      	movs	r2, #32
   1e002:	0019      	movs	r1, r3
   1e004:	1a12      	subs	r2, r2, r0
   1e006:	4091      	lsls	r1, r2
   1e008:	000a      	movs	r2, r1
   1e00a:	40c3      	lsrs	r3, r0
   1e00c:	9900      	ldr	r1, [sp, #0]
   1e00e:	9301      	str	r3, [sp, #4]
   1e010:	430a      	orrs	r2, r1
   1e012:	617a      	str	r2, [r7, #20]
   1e014:	e7c5      	b.n	1dfa2 <__d2b+0x3a>
   1e016:	46c0      	nop			; (mov r8, r8)
   1e018:	fffffbcd 	.word	0xfffffbcd
   1e01c:	fffffbce 	.word	0xfffffbce
   1e020:	3fffffff 	.word	0x3fffffff

0001e024 <_realloc_r>:
   1e024:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e026:	464e      	mov	r6, r9
   1e028:	4645      	mov	r5, r8
   1e02a:	46de      	mov	lr, fp
   1e02c:	4657      	mov	r7, sl
   1e02e:	b5e0      	push	{r5, r6, r7, lr}
   1e030:	b085      	sub	sp, #20
   1e032:	9001      	str	r0, [sp, #4]
   1e034:	000e      	movs	r6, r1
   1e036:	0015      	movs	r5, r2
   1e038:	2900      	cmp	r1, #0
   1e03a:	d100      	bne.n	1e03e <_realloc_r+0x1a>
   1e03c:	e09e      	b.n	1e17c <_realloc_r+0x158>
   1e03e:	0037      	movs	r7, r6
   1e040:	9801      	ldr	r0, [sp, #4]
   1e042:	3f08      	subs	r7, #8
   1e044:	f7fb ff46 	bl	19ed4 <__malloc_lock>
   1e048:	687a      	ldr	r2, [r7, #4]
   1e04a:	2303      	movs	r3, #3
   1e04c:	0014      	movs	r4, r2
   1e04e:	439c      	bics	r4, r3
   1e050:	002b      	movs	r3, r5
   1e052:	330b      	adds	r3, #11
   1e054:	46b9      	mov	r9, r7
   1e056:	2b16      	cmp	r3, #22
   1e058:	d847      	bhi.n	1e0ea <_realloc_r+0xc6>
   1e05a:	2110      	movs	r1, #16
   1e05c:	2310      	movs	r3, #16
   1e05e:	4688      	mov	r8, r1
   1e060:	4545      	cmp	r5, r8
   1e062:	d846      	bhi.n	1e0f2 <_realloc_r+0xce>
   1e064:	429c      	cmp	r4, r3
   1e066:	da49      	bge.n	1e0fc <_realloc_r+0xd8>
   1e068:	49cc      	ldr	r1, [pc, #816]	; (1e39c <_realloc_r+0x378>)
   1e06a:	1938      	adds	r0, r7, r4
   1e06c:	468b      	mov	fp, r1
   1e06e:	6889      	ldr	r1, [r1, #8]
   1e070:	9002      	str	r0, [sp, #8]
   1e072:	4288      	cmp	r0, r1
   1e074:	d100      	bne.n	1e078 <_realloc_r+0x54>
   1e076:	e0c2      	b.n	1e1fe <_realloc_r+0x1da>
   1e078:	2101      	movs	r1, #1
   1e07a:	468a      	mov	sl, r1
   1e07c:	6840      	ldr	r0, [r0, #4]
   1e07e:	0001      	movs	r1, r0
   1e080:	9003      	str	r0, [sp, #12]
   1e082:	4650      	mov	r0, sl
   1e084:	4381      	bics	r1, r0
   1e086:	468c      	mov	ip, r1
   1e088:	9902      	ldr	r1, [sp, #8]
   1e08a:	468b      	mov	fp, r1
   1e08c:	44dc      	add	ip, fp
   1e08e:	4661      	mov	r1, ip
   1e090:	6849      	ldr	r1, [r1, #4]
   1e092:	4201      	tst	r1, r0
   1e094:	d04d      	beq.n	1e132 <_realloc_r+0x10e>
   1e096:	4210      	tst	r0, r2
   1e098:	d100      	bne.n	1e09c <_realloc_r+0x78>
   1e09a:	e0a2      	b.n	1e1e2 <_realloc_r+0x1be>
   1e09c:	0029      	movs	r1, r5
   1e09e:	9801      	ldr	r0, [sp, #4]
   1e0a0:	f7fb fb4c 	bl	1973c <_malloc_r>
   1e0a4:	1e05      	subs	r5, r0, #0
   1e0a6:	d039      	beq.n	1e11c <_realloc_r+0xf8>
   1e0a8:	2301      	movs	r3, #1
   1e0aa:	0002      	movs	r2, r0
   1e0ac:	6879      	ldr	r1, [r7, #4]
   1e0ae:	3a08      	subs	r2, #8
   1e0b0:	4399      	bics	r1, r3
   1e0b2:	187f      	adds	r7, r7, r1
   1e0b4:	42ba      	cmp	r2, r7
   1e0b6:	d100      	bne.n	1e0ba <_realloc_r+0x96>
   1e0b8:	e12e      	b.n	1e318 <_realloc_r+0x2f4>
   1e0ba:	1f22      	subs	r2, r4, #4
   1e0bc:	2a24      	cmp	r2, #36	; 0x24
   1e0be:	d900      	bls.n	1e0c2 <_realloc_r+0x9e>
   1e0c0:	e114      	b.n	1e2ec <_realloc_r+0x2c8>
   1e0c2:	2a13      	cmp	r2, #19
   1e0c4:	d900      	bls.n	1e0c8 <_realloc_r+0xa4>
   1e0c6:	e0e8      	b.n	1e29a <_realloc_r+0x276>
   1e0c8:	0003      	movs	r3, r0
   1e0ca:	0032      	movs	r2, r6
   1e0cc:	6811      	ldr	r1, [r2, #0]
   1e0ce:	6019      	str	r1, [r3, #0]
   1e0d0:	6851      	ldr	r1, [r2, #4]
   1e0d2:	6059      	str	r1, [r3, #4]
   1e0d4:	6892      	ldr	r2, [r2, #8]
   1e0d6:	609a      	str	r2, [r3, #8]
   1e0d8:	9c01      	ldr	r4, [sp, #4]
   1e0da:	0031      	movs	r1, r6
   1e0dc:	0020      	movs	r0, r4
   1e0de:	f7ff f905 	bl	1d2ec <_free_r>
   1e0e2:	0020      	movs	r0, r4
   1e0e4:	f7fb fefe 	bl	19ee4 <__malloc_unlock>
   1e0e8:	e01b      	b.n	1e122 <_realloc_r+0xfe>
   1e0ea:	2107      	movs	r1, #7
   1e0ec:	438b      	bics	r3, r1
   1e0ee:	4698      	mov	r8, r3
   1e0f0:	d5b6      	bpl.n	1e060 <_realloc_r+0x3c>
   1e0f2:	230c      	movs	r3, #12
   1e0f4:	9a01      	ldr	r2, [sp, #4]
   1e0f6:	2500      	movs	r5, #0
   1e0f8:	6013      	str	r3, [r2, #0]
   1e0fa:	e012      	b.n	1e122 <_realloc_r+0xfe>
   1e0fc:	0035      	movs	r5, r6
   1e0fe:	4643      	mov	r3, r8
   1e100:	1ae3      	subs	r3, r4, r3
   1e102:	2b0f      	cmp	r3, #15
   1e104:	d825      	bhi.n	1e152 <_realloc_r+0x12e>
   1e106:	464b      	mov	r3, r9
   1e108:	2201      	movs	r2, #1
   1e10a:	4649      	mov	r1, r9
   1e10c:	685b      	ldr	r3, [r3, #4]
   1e10e:	4013      	ands	r3, r2
   1e110:	4323      	orrs	r3, r4
   1e112:	604b      	str	r3, [r1, #4]
   1e114:	444c      	add	r4, r9
   1e116:	6863      	ldr	r3, [r4, #4]
   1e118:	431a      	orrs	r2, r3
   1e11a:	6062      	str	r2, [r4, #4]
   1e11c:	9801      	ldr	r0, [sp, #4]
   1e11e:	f7fb fee1 	bl	19ee4 <__malloc_unlock>
   1e122:	0028      	movs	r0, r5
   1e124:	b005      	add	sp, #20
   1e126:	bc3c      	pop	{r2, r3, r4, r5}
   1e128:	4690      	mov	r8, r2
   1e12a:	4699      	mov	r9, r3
   1e12c:	46a2      	mov	sl, r4
   1e12e:	46ab      	mov	fp, r5
   1e130:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e132:	2103      	movs	r1, #3
   1e134:	9803      	ldr	r0, [sp, #12]
   1e136:	468c      	mov	ip, r1
   1e138:	4388      	bics	r0, r1
   1e13a:	1821      	adds	r1, r4, r0
   1e13c:	468b      	mov	fp, r1
   1e13e:	4299      	cmp	r1, r3
   1e140:	db21      	blt.n	1e186 <_realloc_r+0x162>
   1e142:	9a02      	ldr	r2, [sp, #8]
   1e144:	0035      	movs	r5, r6
   1e146:	68d3      	ldr	r3, [r2, #12]
   1e148:	6892      	ldr	r2, [r2, #8]
   1e14a:	465c      	mov	r4, fp
   1e14c:	60d3      	str	r3, [r2, #12]
   1e14e:	609a      	str	r2, [r3, #8]
   1e150:	e7d5      	b.n	1e0fe <_realloc_r+0xda>
   1e152:	464a      	mov	r2, r9
   1e154:	2001      	movs	r0, #1
   1e156:	4646      	mov	r6, r8
   1e158:	6852      	ldr	r2, [r2, #4]
   1e15a:	4649      	mov	r1, r9
   1e15c:	4002      	ands	r2, r0
   1e15e:	4332      	orrs	r2, r6
   1e160:	464e      	mov	r6, r9
   1e162:	4441      	add	r1, r8
   1e164:	4303      	orrs	r3, r0
   1e166:	6072      	str	r2, [r6, #4]
   1e168:	444c      	add	r4, r9
   1e16a:	604b      	str	r3, [r1, #4]
   1e16c:	6863      	ldr	r3, [r4, #4]
   1e16e:	3108      	adds	r1, #8
   1e170:	4318      	orrs	r0, r3
   1e172:	6060      	str	r0, [r4, #4]
   1e174:	9801      	ldr	r0, [sp, #4]
   1e176:	f7ff f8b9 	bl	1d2ec <_free_r>
   1e17a:	e7cf      	b.n	1e11c <_realloc_r+0xf8>
   1e17c:	0011      	movs	r1, r2
   1e17e:	f7fb fadd 	bl	1973c <_malloc_r>
   1e182:	0005      	movs	r5, r0
   1e184:	e7cd      	b.n	1e122 <_realloc_r+0xfe>
   1e186:	4651      	mov	r1, sl
   1e188:	4211      	tst	r1, r2
   1e18a:	d000      	beq.n	1e18e <_realloc_r+0x16a>
   1e18c:	e786      	b.n	1e09c <_realloc_r+0x78>
   1e18e:	4661      	mov	r1, ip
   1e190:	683a      	ldr	r2, [r7, #0]
   1e192:	1aba      	subs	r2, r7, r2
   1e194:	4692      	mov	sl, r2
   1e196:	6852      	ldr	r2, [r2, #4]
   1e198:	438a      	bics	r2, r1
   1e19a:	1880      	adds	r0, r0, r2
   1e19c:	4683      	mov	fp, r0
   1e19e:	44a3      	add	fp, r4
   1e1a0:	459b      	cmp	fp, r3
   1e1a2:	db26      	blt.n	1e1f2 <_realloc_r+0x1ce>
   1e1a4:	9a02      	ldr	r2, [sp, #8]
   1e1a6:	68d3      	ldr	r3, [r2, #12]
   1e1a8:	6892      	ldr	r2, [r2, #8]
   1e1aa:	60d3      	str	r3, [r2, #12]
   1e1ac:	609a      	str	r2, [r3, #8]
   1e1ae:	4653      	mov	r3, sl
   1e1b0:	4652      	mov	r2, sl
   1e1b2:	4655      	mov	r5, sl
   1e1b4:	6892      	ldr	r2, [r2, #8]
   1e1b6:	68db      	ldr	r3, [r3, #12]
   1e1b8:	3508      	adds	r5, #8
   1e1ba:	60d3      	str	r3, [r2, #12]
   1e1bc:	609a      	str	r2, [r3, #8]
   1e1be:	1f22      	subs	r2, r4, #4
   1e1c0:	2a24      	cmp	r2, #36	; 0x24
   1e1c2:	d900      	bls.n	1e1c6 <_realloc_r+0x1a2>
   1e1c4:	e096      	b.n	1e2f4 <_realloc_r+0x2d0>
   1e1c6:	2a13      	cmp	r2, #19
   1e1c8:	d972      	bls.n	1e2b0 <_realloc_r+0x28c>
   1e1ca:	4653      	mov	r3, sl
   1e1cc:	6831      	ldr	r1, [r6, #0]
   1e1ce:	6099      	str	r1, [r3, #8]
   1e1d0:	6871      	ldr	r1, [r6, #4]
   1e1d2:	60d9      	str	r1, [r3, #12]
   1e1d4:	2a1b      	cmp	r2, #27
   1e1d6:	d900      	bls.n	1e1da <_realloc_r+0x1b6>
   1e1d8:	e0a4      	b.n	1e324 <_realloc_r+0x300>
   1e1da:	0032      	movs	r2, r6
   1e1dc:	3310      	adds	r3, #16
   1e1de:	3208      	adds	r2, #8
   1e1e0:	e068      	b.n	1e2b4 <_realloc_r+0x290>
   1e1e2:	683a      	ldr	r2, [r7, #0]
   1e1e4:	1aba      	subs	r2, r7, r2
   1e1e6:	4692      	mov	sl, r2
   1e1e8:	4651      	mov	r1, sl
   1e1ea:	2203      	movs	r2, #3
   1e1ec:	6849      	ldr	r1, [r1, #4]
   1e1ee:	4391      	bics	r1, r2
   1e1f0:	000a      	movs	r2, r1
   1e1f2:	4693      	mov	fp, r2
   1e1f4:	44a3      	add	fp, r4
   1e1f6:	459b      	cmp	fp, r3
   1e1f8:	da00      	bge.n	1e1fc <_realloc_r+0x1d8>
   1e1fa:	e74f      	b.n	1e09c <_realloc_r+0x78>
   1e1fc:	e7d7      	b.n	1e1ae <_realloc_r+0x18a>
   1e1fe:	2003      	movs	r0, #3
   1e200:	9902      	ldr	r1, [sp, #8]
   1e202:	4684      	mov	ip, r0
   1e204:	6849      	ldr	r1, [r1, #4]
   1e206:	4381      	bics	r1, r0
   1e208:	4640      	mov	r0, r8
   1e20a:	1909      	adds	r1, r1, r4
   1e20c:	3010      	adds	r0, #16
   1e20e:	9002      	str	r0, [sp, #8]
   1e210:	4281      	cmp	r1, r0
   1e212:	da58      	bge.n	1e2c6 <_realloc_r+0x2a2>
   1e214:	07d2      	lsls	r2, r2, #31
   1e216:	d500      	bpl.n	1e21a <_realloc_r+0x1f6>
   1e218:	e740      	b.n	1e09c <_realloc_r+0x78>
   1e21a:	4660      	mov	r0, ip
   1e21c:	683a      	ldr	r2, [r7, #0]
   1e21e:	1aba      	subs	r2, r7, r2
   1e220:	4692      	mov	sl, r2
   1e222:	6852      	ldr	r2, [r2, #4]
   1e224:	4382      	bics	r2, r0
   1e226:	9802      	ldr	r0, [sp, #8]
   1e228:	1851      	adds	r1, r2, r1
   1e22a:	9103      	str	r1, [sp, #12]
   1e22c:	4288      	cmp	r0, r1
   1e22e:	dce0      	bgt.n	1e1f2 <_realloc_r+0x1ce>
   1e230:	4653      	mov	r3, sl
   1e232:	4652      	mov	r2, sl
   1e234:	4655      	mov	r5, sl
   1e236:	6892      	ldr	r2, [r2, #8]
   1e238:	68db      	ldr	r3, [r3, #12]
   1e23a:	3508      	adds	r5, #8
   1e23c:	60d3      	str	r3, [r2, #12]
   1e23e:	609a      	str	r2, [r3, #8]
   1e240:	1f22      	subs	r2, r4, #4
   1e242:	2a24      	cmp	r2, #36	; 0x24
   1e244:	d900      	bls.n	1e248 <_realloc_r+0x224>
   1e246:	e08e      	b.n	1e366 <_realloc_r+0x342>
   1e248:	2a13      	cmp	r2, #19
   1e24a:	d800      	bhi.n	1e24e <_realloc_r+0x22a>
   1e24c:	e088      	b.n	1e360 <_realloc_r+0x33c>
   1e24e:	4653      	mov	r3, sl
   1e250:	6831      	ldr	r1, [r6, #0]
   1e252:	6099      	str	r1, [r3, #8]
   1e254:	6871      	ldr	r1, [r6, #4]
   1e256:	60d9      	str	r1, [r3, #12]
   1e258:	2a1b      	cmp	r2, #27
   1e25a:	d900      	bls.n	1e25e <_realloc_r+0x23a>
   1e25c:	e088      	b.n	1e370 <_realloc_r+0x34c>
   1e25e:	0032      	movs	r2, r6
   1e260:	3310      	adds	r3, #16
   1e262:	3208      	adds	r2, #8
   1e264:	6811      	ldr	r1, [r2, #0]
   1e266:	6019      	str	r1, [r3, #0]
   1e268:	6851      	ldr	r1, [r2, #4]
   1e26a:	6059      	str	r1, [r3, #4]
   1e26c:	6892      	ldr	r2, [r2, #8]
   1e26e:	609a      	str	r2, [r3, #8]
   1e270:	4651      	mov	r1, sl
   1e272:	465b      	mov	r3, fp
   1e274:	4642      	mov	r2, r8
   1e276:	4441      	add	r1, r8
   1e278:	6099      	str	r1, [r3, #8]
   1e27a:	9b03      	ldr	r3, [sp, #12]
   1e27c:	9801      	ldr	r0, [sp, #4]
   1e27e:	1a9a      	subs	r2, r3, r2
   1e280:	2301      	movs	r3, #1
   1e282:	431a      	orrs	r2, r3
   1e284:	604a      	str	r2, [r1, #4]
   1e286:	4652      	mov	r2, sl
   1e288:	6852      	ldr	r2, [r2, #4]
   1e28a:	4013      	ands	r3, r2
   1e28c:	4642      	mov	r2, r8
   1e28e:	4313      	orrs	r3, r2
   1e290:	4652      	mov	r2, sl
   1e292:	6053      	str	r3, [r2, #4]
   1e294:	f7fb fe26 	bl	19ee4 <__malloc_unlock>
   1e298:	e743      	b.n	1e122 <_realloc_r+0xfe>
   1e29a:	6833      	ldr	r3, [r6, #0]
   1e29c:	6003      	str	r3, [r0, #0]
   1e29e:	6873      	ldr	r3, [r6, #4]
   1e2a0:	6043      	str	r3, [r0, #4]
   1e2a2:	2a1b      	cmp	r2, #27
   1e2a4:	d82d      	bhi.n	1e302 <_realloc_r+0x2de>
   1e2a6:	0003      	movs	r3, r0
   1e2a8:	0032      	movs	r2, r6
   1e2aa:	3308      	adds	r3, #8
   1e2ac:	3208      	adds	r2, #8
   1e2ae:	e70d      	b.n	1e0cc <_realloc_r+0xa8>
   1e2b0:	002b      	movs	r3, r5
   1e2b2:	0032      	movs	r2, r6
   1e2b4:	6811      	ldr	r1, [r2, #0]
   1e2b6:	465c      	mov	r4, fp
   1e2b8:	6019      	str	r1, [r3, #0]
   1e2ba:	6851      	ldr	r1, [r2, #4]
   1e2bc:	46d1      	mov	r9, sl
   1e2be:	6059      	str	r1, [r3, #4]
   1e2c0:	6892      	ldr	r2, [r2, #8]
   1e2c2:	609a      	str	r2, [r3, #8]
   1e2c4:	e71b      	b.n	1e0fe <_realloc_r+0xda>
   1e2c6:	4643      	mov	r3, r8
   1e2c8:	18fa      	adds	r2, r7, r3
   1e2ca:	465b      	mov	r3, fp
   1e2cc:	609a      	str	r2, [r3, #8]
   1e2ce:	4643      	mov	r3, r8
   1e2d0:	1ac9      	subs	r1, r1, r3
   1e2d2:	2301      	movs	r3, #1
   1e2d4:	4319      	orrs	r1, r3
   1e2d6:	6051      	str	r1, [r2, #4]
   1e2d8:	687a      	ldr	r2, [r7, #4]
   1e2da:	9801      	ldr	r0, [sp, #4]
   1e2dc:	4013      	ands	r3, r2
   1e2de:	4642      	mov	r2, r8
   1e2e0:	4313      	orrs	r3, r2
   1e2e2:	607b      	str	r3, [r7, #4]
   1e2e4:	f7fb fdfe 	bl	19ee4 <__malloc_unlock>
   1e2e8:	0035      	movs	r5, r6
   1e2ea:	e71a      	b.n	1e122 <_realloc_r+0xfe>
   1e2ec:	0031      	movs	r1, r6
   1e2ee:	f7fb fd57 	bl	19da0 <memmove>
   1e2f2:	e6f1      	b.n	1e0d8 <_realloc_r+0xb4>
   1e2f4:	0031      	movs	r1, r6
   1e2f6:	0028      	movs	r0, r5
   1e2f8:	f7fb fd52 	bl	19da0 <memmove>
   1e2fc:	465c      	mov	r4, fp
   1e2fe:	46d1      	mov	r9, sl
   1e300:	e6fd      	b.n	1e0fe <_realloc_r+0xda>
   1e302:	68b3      	ldr	r3, [r6, #8]
   1e304:	6083      	str	r3, [r0, #8]
   1e306:	68f3      	ldr	r3, [r6, #12]
   1e308:	60c3      	str	r3, [r0, #12]
   1e30a:	2a24      	cmp	r2, #36	; 0x24
   1e30c:	d015      	beq.n	1e33a <_realloc_r+0x316>
   1e30e:	0003      	movs	r3, r0
   1e310:	0032      	movs	r2, r6
   1e312:	3310      	adds	r3, #16
   1e314:	3210      	adds	r2, #16
   1e316:	e6d9      	b.n	1e0cc <_realloc_r+0xa8>
   1e318:	6853      	ldr	r3, [r2, #4]
   1e31a:	2203      	movs	r2, #3
   1e31c:	4393      	bics	r3, r2
   1e31e:	18e4      	adds	r4, r4, r3
   1e320:	0035      	movs	r5, r6
   1e322:	e6ec      	b.n	1e0fe <_realloc_r+0xda>
   1e324:	4653      	mov	r3, sl
   1e326:	68b1      	ldr	r1, [r6, #8]
   1e328:	6119      	str	r1, [r3, #16]
   1e32a:	68f1      	ldr	r1, [r6, #12]
   1e32c:	6159      	str	r1, [r3, #20]
   1e32e:	2a24      	cmp	r2, #36	; 0x24
   1e330:	d00c      	beq.n	1e34c <_realloc_r+0x328>
   1e332:	0032      	movs	r2, r6
   1e334:	3318      	adds	r3, #24
   1e336:	3210      	adds	r2, #16
   1e338:	e7bc      	b.n	1e2b4 <_realloc_r+0x290>
   1e33a:	6933      	ldr	r3, [r6, #16]
   1e33c:	0032      	movs	r2, r6
   1e33e:	6103      	str	r3, [r0, #16]
   1e340:	0003      	movs	r3, r0
   1e342:	6971      	ldr	r1, [r6, #20]
   1e344:	3318      	adds	r3, #24
   1e346:	3218      	adds	r2, #24
   1e348:	6141      	str	r1, [r0, #20]
   1e34a:	e6bf      	b.n	1e0cc <_realloc_r+0xa8>
   1e34c:	4653      	mov	r3, sl
   1e34e:	6932      	ldr	r2, [r6, #16]
   1e350:	4651      	mov	r1, sl
   1e352:	619a      	str	r2, [r3, #24]
   1e354:	0032      	movs	r2, r6
   1e356:	6970      	ldr	r0, [r6, #20]
   1e358:	3320      	adds	r3, #32
   1e35a:	3218      	adds	r2, #24
   1e35c:	61c8      	str	r0, [r1, #28]
   1e35e:	e7a9      	b.n	1e2b4 <_realloc_r+0x290>
   1e360:	002b      	movs	r3, r5
   1e362:	0032      	movs	r2, r6
   1e364:	e77e      	b.n	1e264 <_realloc_r+0x240>
   1e366:	0031      	movs	r1, r6
   1e368:	0028      	movs	r0, r5
   1e36a:	f7fb fd19 	bl	19da0 <memmove>
   1e36e:	e77f      	b.n	1e270 <_realloc_r+0x24c>
   1e370:	4653      	mov	r3, sl
   1e372:	68b1      	ldr	r1, [r6, #8]
   1e374:	6119      	str	r1, [r3, #16]
   1e376:	68f1      	ldr	r1, [r6, #12]
   1e378:	6159      	str	r1, [r3, #20]
   1e37a:	2a24      	cmp	r2, #36	; 0x24
   1e37c:	d003      	beq.n	1e386 <_realloc_r+0x362>
   1e37e:	0032      	movs	r2, r6
   1e380:	3318      	adds	r3, #24
   1e382:	3210      	adds	r2, #16
   1e384:	e76e      	b.n	1e264 <_realloc_r+0x240>
   1e386:	4653      	mov	r3, sl
   1e388:	6932      	ldr	r2, [r6, #16]
   1e38a:	4651      	mov	r1, sl
   1e38c:	619a      	str	r2, [r3, #24]
   1e38e:	0032      	movs	r2, r6
   1e390:	6970      	ldr	r0, [r6, #20]
   1e392:	3320      	adds	r3, #32
   1e394:	3218      	adds	r2, #24
   1e396:	61c8      	str	r0, [r1, #28]
   1e398:	e764      	b.n	1e264 <_realloc_r+0x240>
   1e39a:	46c0      	nop			; (mov r8, r8)
   1e39c:	200005b4 	.word	0x200005b4

0001e3a0 <__sread>:
   1e3a0:	b570      	push	{r4, r5, r6, lr}
   1e3a2:	000c      	movs	r4, r1
   1e3a4:	250e      	movs	r5, #14
   1e3a6:	5f49      	ldrsh	r1, [r1, r5]
   1e3a8:	f000 fa7a 	bl	1e8a0 <_read_r>
   1e3ac:	2800      	cmp	r0, #0
   1e3ae:	db03      	blt.n	1e3b8 <__sread+0x18>
   1e3b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e3b2:	181b      	adds	r3, r3, r0
   1e3b4:	6523      	str	r3, [r4, #80]	; 0x50
   1e3b6:	bd70      	pop	{r4, r5, r6, pc}
   1e3b8:	89a3      	ldrh	r3, [r4, #12]
   1e3ba:	4a02      	ldr	r2, [pc, #8]	; (1e3c4 <__sread+0x24>)
   1e3bc:	4013      	ands	r3, r2
   1e3be:	81a3      	strh	r3, [r4, #12]
   1e3c0:	e7f9      	b.n	1e3b6 <__sread+0x16>
   1e3c2:	46c0      	nop			; (mov r8, r8)
   1e3c4:	ffffefff 	.word	0xffffefff

0001e3c8 <__swrite>:
   1e3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3ca:	0016      	movs	r6, r2
   1e3cc:	001f      	movs	r7, r3
   1e3ce:	220c      	movs	r2, #12
   1e3d0:	5e8b      	ldrsh	r3, [r1, r2]
   1e3d2:	0005      	movs	r5, r0
   1e3d4:	000c      	movs	r4, r1
   1e3d6:	05da      	lsls	r2, r3, #23
   1e3d8:	d507      	bpl.n	1e3ea <__swrite+0x22>
   1e3da:	230e      	movs	r3, #14
   1e3dc:	5ec9      	ldrsh	r1, [r1, r3]
   1e3de:	2200      	movs	r2, #0
   1e3e0:	2302      	movs	r3, #2
   1e3e2:	f000 fa49 	bl	1e878 <_lseek_r>
   1e3e6:	220c      	movs	r2, #12
   1e3e8:	5ea3      	ldrsh	r3, [r4, r2]
   1e3ea:	4a05      	ldr	r2, [pc, #20]	; (1e400 <__swrite+0x38>)
   1e3ec:	0028      	movs	r0, r5
   1e3ee:	4013      	ands	r3, r2
   1e3f0:	81a3      	strh	r3, [r4, #12]
   1e3f2:	0032      	movs	r2, r6
   1e3f4:	230e      	movs	r3, #14
   1e3f6:	5ee1      	ldrsh	r1, [r4, r3]
   1e3f8:	003b      	movs	r3, r7
   1e3fa:	f000 f86b 	bl	1e4d4 <_write_r>
   1e3fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e400:	ffffefff 	.word	0xffffefff

0001e404 <__sseek>:
   1e404:	b570      	push	{r4, r5, r6, lr}
   1e406:	000c      	movs	r4, r1
   1e408:	250e      	movs	r5, #14
   1e40a:	5f49      	ldrsh	r1, [r1, r5]
   1e40c:	f000 fa34 	bl	1e878 <_lseek_r>
   1e410:	1c43      	adds	r3, r0, #1
   1e412:	d006      	beq.n	1e422 <__sseek+0x1e>
   1e414:	2380      	movs	r3, #128	; 0x80
   1e416:	89a2      	ldrh	r2, [r4, #12]
   1e418:	015b      	lsls	r3, r3, #5
   1e41a:	4313      	orrs	r3, r2
   1e41c:	81a3      	strh	r3, [r4, #12]
   1e41e:	6520      	str	r0, [r4, #80]	; 0x50
   1e420:	bd70      	pop	{r4, r5, r6, pc}
   1e422:	89a3      	ldrh	r3, [r4, #12]
   1e424:	4a01      	ldr	r2, [pc, #4]	; (1e42c <__sseek+0x28>)
   1e426:	4013      	ands	r3, r2
   1e428:	81a3      	strh	r3, [r4, #12]
   1e42a:	e7f9      	b.n	1e420 <__sseek+0x1c>
   1e42c:	ffffefff 	.word	0xffffefff

0001e430 <__sclose>:
   1e430:	b510      	push	{r4, lr}
   1e432:	230e      	movs	r3, #14
   1e434:	5ec9      	ldrsh	r1, [r1, r3]
   1e436:	f000 f907 	bl	1e648 <_close_r>
   1e43a:	bd10      	pop	{r4, pc}

0001e43c <__sprint_r.part.0>:
   1e43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e43e:	464e      	mov	r6, r9
   1e440:	4645      	mov	r5, r8
   1e442:	46de      	mov	lr, fp
   1e444:	4657      	mov	r7, sl
   1e446:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1e448:	b5e0      	push	{r5, r6, r7, lr}
   1e44a:	4680      	mov	r8, r0
   1e44c:	000e      	movs	r6, r1
   1e44e:	4691      	mov	r9, r2
   1e450:	049b      	lsls	r3, r3, #18
   1e452:	d531      	bpl.n	1e4b8 <__sprint_r.part.0+0x7c>
   1e454:	6813      	ldr	r3, [r2, #0]
   1e456:	469a      	mov	sl, r3
   1e458:	6893      	ldr	r3, [r2, #8]
   1e45a:	2b00      	cmp	r3, #0
   1e45c:	d02a      	beq.n	1e4b4 <__sprint_r.part.0+0x78>
   1e45e:	4652      	mov	r2, sl
   1e460:	6852      	ldr	r2, [r2, #4]
   1e462:	2500      	movs	r5, #0
   1e464:	4693      	mov	fp, r2
   1e466:	0897      	lsrs	r7, r2, #2
   1e468:	4652      	mov	r2, sl
   1e46a:	6814      	ldr	r4, [r2, #0]
   1e46c:	d104      	bne.n	1e478 <__sprint_r.part.0+0x3c>
   1e46e:	e016      	b.n	1e49e <__sprint_r.part.0+0x62>
   1e470:	3501      	adds	r5, #1
   1e472:	3404      	adds	r4, #4
   1e474:	42af      	cmp	r7, r5
   1e476:	d010      	beq.n	1e49a <__sprint_r.part.0+0x5e>
   1e478:	0032      	movs	r2, r6
   1e47a:	6821      	ldr	r1, [r4, #0]
   1e47c:	4640      	mov	r0, r8
   1e47e:	f000 f9a7 	bl	1e7d0 <_fputwc_r>
   1e482:	1c43      	adds	r3, r0, #1
   1e484:	d1f4      	bne.n	1e470 <__sprint_r.part.0+0x34>
   1e486:	464a      	mov	r2, r9
   1e488:	2300      	movs	r3, #0
   1e48a:	6093      	str	r3, [r2, #8]
   1e48c:	6053      	str	r3, [r2, #4]
   1e48e:	bc3c      	pop	{r2, r3, r4, r5}
   1e490:	4690      	mov	r8, r2
   1e492:	4699      	mov	r9, r3
   1e494:	46a2      	mov	sl, r4
   1e496:	46ab      	mov	fp, r5
   1e498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e49a:	464b      	mov	r3, r9
   1e49c:	689b      	ldr	r3, [r3, #8]
   1e49e:	465a      	mov	r2, fp
   1e4a0:	2103      	movs	r1, #3
   1e4a2:	438a      	bics	r2, r1
   1e4a4:	1a9b      	subs	r3, r3, r2
   1e4a6:	464a      	mov	r2, r9
   1e4a8:	6093      	str	r3, [r2, #8]
   1e4aa:	2208      	movs	r2, #8
   1e4ac:	4694      	mov	ip, r2
   1e4ae:	44e2      	add	sl, ip
   1e4b0:	2b00      	cmp	r3, #0
   1e4b2:	d1d4      	bne.n	1e45e <__sprint_r.part.0+0x22>
   1e4b4:	2000      	movs	r0, #0
   1e4b6:	e7e6      	b.n	1e486 <__sprint_r.part.0+0x4a>
   1e4b8:	f7fe fff6 	bl	1d4a8 <__sfvwrite_r>
   1e4bc:	e7e3      	b.n	1e486 <__sprint_r.part.0+0x4a>
   1e4be:	46c0      	nop			; (mov r8, r8)

0001e4c0 <__sprint_r>:
   1e4c0:	6893      	ldr	r3, [r2, #8]
   1e4c2:	b510      	push	{r4, lr}
   1e4c4:	2b00      	cmp	r3, #0
   1e4c6:	d002      	beq.n	1e4ce <__sprint_r+0xe>
   1e4c8:	f7ff ffb8 	bl	1e43c <__sprint_r.part.0>
   1e4cc:	bd10      	pop	{r4, pc}
   1e4ce:	6053      	str	r3, [r2, #4]
   1e4d0:	2000      	movs	r0, #0
   1e4d2:	e7fb      	b.n	1e4cc <__sprint_r+0xc>

0001e4d4 <_write_r>:
   1e4d4:	b570      	push	{r4, r5, r6, lr}
   1e4d6:	0005      	movs	r5, r0
   1e4d8:	0008      	movs	r0, r1
   1e4da:	0011      	movs	r1, r2
   1e4dc:	2200      	movs	r2, #0
   1e4de:	4c06      	ldr	r4, [pc, #24]	; (1e4f8 <_write_r+0x24>)
   1e4e0:	6022      	str	r2, [r4, #0]
   1e4e2:	001a      	movs	r2, r3
   1e4e4:	f7e9 fa4e 	bl	7984 <_write>
   1e4e8:	1c43      	adds	r3, r0, #1
   1e4ea:	d000      	beq.n	1e4ee <_write_r+0x1a>
   1e4ec:	bd70      	pop	{r4, r5, r6, pc}
   1e4ee:	6823      	ldr	r3, [r4, #0]
   1e4f0:	2b00      	cmp	r3, #0
   1e4f2:	d0fb      	beq.n	1e4ec <_write_r+0x18>
   1e4f4:	602b      	str	r3, [r5, #0]
   1e4f6:	e7f9      	b.n	1e4ec <_write_r+0x18>
   1e4f8:	20002fe4 	.word	0x20002fe4

0001e4fc <__register_exitproc>:
   1e4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e4fe:	464e      	mov	r6, r9
   1e500:	4645      	mov	r5, r8
   1e502:	46de      	mov	lr, fp
   1e504:	4657      	mov	r7, sl
   1e506:	b5e0      	push	{r5, r6, r7, lr}
   1e508:	4d36      	ldr	r5, [pc, #216]	; (1e5e4 <__register_exitproc+0xe8>)
   1e50a:	b083      	sub	sp, #12
   1e50c:	0006      	movs	r6, r0
   1e50e:	6828      	ldr	r0, [r5, #0]
   1e510:	4698      	mov	r8, r3
   1e512:	000f      	movs	r7, r1
   1e514:	4691      	mov	r9, r2
   1e516:	f7ff f981 	bl	1d81c <__retarget_lock_acquire_recursive>
   1e51a:	4b33      	ldr	r3, [pc, #204]	; (1e5e8 <__register_exitproc+0xec>)
   1e51c:	681c      	ldr	r4, [r3, #0]
   1e51e:	23a4      	movs	r3, #164	; 0xa4
   1e520:	005b      	lsls	r3, r3, #1
   1e522:	58e0      	ldr	r0, [r4, r3]
   1e524:	2800      	cmp	r0, #0
   1e526:	d052      	beq.n	1e5ce <__register_exitproc+0xd2>
   1e528:	6843      	ldr	r3, [r0, #4]
   1e52a:	2b1f      	cmp	r3, #31
   1e52c:	dc13      	bgt.n	1e556 <__register_exitproc+0x5a>
   1e52e:	1c5a      	adds	r2, r3, #1
   1e530:	9201      	str	r2, [sp, #4]
   1e532:	2e00      	cmp	r6, #0
   1e534:	d128      	bne.n	1e588 <__register_exitproc+0x8c>
   1e536:	9a01      	ldr	r2, [sp, #4]
   1e538:	3302      	adds	r3, #2
   1e53a:	009b      	lsls	r3, r3, #2
   1e53c:	6042      	str	r2, [r0, #4]
   1e53e:	501f      	str	r7, [r3, r0]
   1e540:	6828      	ldr	r0, [r5, #0]
   1e542:	f7ff f96d 	bl	1d820 <__retarget_lock_release_recursive>
   1e546:	2000      	movs	r0, #0
   1e548:	b003      	add	sp, #12
   1e54a:	bc3c      	pop	{r2, r3, r4, r5}
   1e54c:	4690      	mov	r8, r2
   1e54e:	4699      	mov	r9, r3
   1e550:	46a2      	mov	sl, r4
   1e552:	46ab      	mov	fp, r5
   1e554:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e556:	4b25      	ldr	r3, [pc, #148]	; (1e5ec <__register_exitproc+0xf0>)
   1e558:	2b00      	cmp	r3, #0
   1e55a:	d03d      	beq.n	1e5d8 <__register_exitproc+0xdc>
   1e55c:	20c8      	movs	r0, #200	; 0xc8
   1e55e:	0040      	lsls	r0, r0, #1
   1e560:	f7fb f8d8 	bl	19714 <malloc>
   1e564:	2800      	cmp	r0, #0
   1e566:	d037      	beq.n	1e5d8 <__register_exitproc+0xdc>
   1e568:	22a4      	movs	r2, #164	; 0xa4
   1e56a:	2300      	movs	r3, #0
   1e56c:	0052      	lsls	r2, r2, #1
   1e56e:	58a1      	ldr	r1, [r4, r2]
   1e570:	6043      	str	r3, [r0, #4]
   1e572:	6001      	str	r1, [r0, #0]
   1e574:	50a0      	str	r0, [r4, r2]
   1e576:	3240      	adds	r2, #64	; 0x40
   1e578:	5083      	str	r3, [r0, r2]
   1e57a:	3204      	adds	r2, #4
   1e57c:	5083      	str	r3, [r0, r2]
   1e57e:	3301      	adds	r3, #1
   1e580:	9301      	str	r3, [sp, #4]
   1e582:	2300      	movs	r3, #0
   1e584:	2e00      	cmp	r6, #0
   1e586:	d0d6      	beq.n	1e536 <__register_exitproc+0x3a>
   1e588:	009a      	lsls	r2, r3, #2
   1e58a:	4692      	mov	sl, r2
   1e58c:	4482      	add	sl, r0
   1e58e:	464a      	mov	r2, r9
   1e590:	2188      	movs	r1, #136	; 0x88
   1e592:	4654      	mov	r4, sl
   1e594:	5062      	str	r2, [r4, r1]
   1e596:	22c4      	movs	r2, #196	; 0xc4
   1e598:	0052      	lsls	r2, r2, #1
   1e59a:	4691      	mov	r9, r2
   1e59c:	4481      	add	r9, r0
   1e59e:	464a      	mov	r2, r9
   1e5a0:	3987      	subs	r1, #135	; 0x87
   1e5a2:	4099      	lsls	r1, r3
   1e5a4:	6812      	ldr	r2, [r2, #0]
   1e5a6:	468b      	mov	fp, r1
   1e5a8:	430a      	orrs	r2, r1
   1e5aa:	4694      	mov	ip, r2
   1e5ac:	464a      	mov	r2, r9
   1e5ae:	4661      	mov	r1, ip
   1e5b0:	6011      	str	r1, [r2, #0]
   1e5b2:	2284      	movs	r2, #132	; 0x84
   1e5b4:	4641      	mov	r1, r8
   1e5b6:	0052      	lsls	r2, r2, #1
   1e5b8:	50a1      	str	r1, [r4, r2]
   1e5ba:	2e02      	cmp	r6, #2
   1e5bc:	d1bb      	bne.n	1e536 <__register_exitproc+0x3a>
   1e5be:	0002      	movs	r2, r0
   1e5c0:	465c      	mov	r4, fp
   1e5c2:	328d      	adds	r2, #141	; 0x8d
   1e5c4:	32ff      	adds	r2, #255	; 0xff
   1e5c6:	6811      	ldr	r1, [r2, #0]
   1e5c8:	430c      	orrs	r4, r1
   1e5ca:	6014      	str	r4, [r2, #0]
   1e5cc:	e7b3      	b.n	1e536 <__register_exitproc+0x3a>
   1e5ce:	0020      	movs	r0, r4
   1e5d0:	304d      	adds	r0, #77	; 0x4d
   1e5d2:	30ff      	adds	r0, #255	; 0xff
   1e5d4:	50e0      	str	r0, [r4, r3]
   1e5d6:	e7a7      	b.n	1e528 <__register_exitproc+0x2c>
   1e5d8:	6828      	ldr	r0, [r5, #0]
   1e5da:	f7ff f921 	bl	1d820 <__retarget_lock_release_recursive>
   1e5de:	2001      	movs	r0, #1
   1e5e0:	4240      	negs	r0, r0
   1e5e2:	e7b1      	b.n	1e548 <__register_exitproc+0x4c>
   1e5e4:	200009c4 	.word	0x200009c4
   1e5e8:	000204ec 	.word	0x000204ec
   1e5ec:	00019715 	.word	0x00019715

0001e5f0 <_calloc_r>:
   1e5f0:	b510      	push	{r4, lr}
   1e5f2:	4351      	muls	r1, r2
   1e5f4:	f7fb f8a2 	bl	1973c <_malloc_r>
   1e5f8:	1e04      	subs	r4, r0, #0
   1e5fa:	d01c      	beq.n	1e636 <_calloc_r+0x46>
   1e5fc:	0003      	movs	r3, r0
   1e5fe:	3b08      	subs	r3, #8
   1e600:	685a      	ldr	r2, [r3, #4]
   1e602:	2303      	movs	r3, #3
   1e604:	439a      	bics	r2, r3
   1e606:	3a04      	subs	r2, #4
   1e608:	2a24      	cmp	r2, #36	; 0x24
   1e60a:	d816      	bhi.n	1e63a <_calloc_r+0x4a>
   1e60c:	0003      	movs	r3, r0
   1e60e:	2a13      	cmp	r2, #19
   1e610:	d90d      	bls.n	1e62e <_calloc_r+0x3e>
   1e612:	2100      	movs	r1, #0
   1e614:	3308      	adds	r3, #8
   1e616:	6001      	str	r1, [r0, #0]
   1e618:	6041      	str	r1, [r0, #4]
   1e61a:	2a1b      	cmp	r2, #27
   1e61c:	d907      	bls.n	1e62e <_calloc_r+0x3e>
   1e61e:	6081      	str	r1, [r0, #8]
   1e620:	60c1      	str	r1, [r0, #12]
   1e622:	2a24      	cmp	r2, #36	; 0x24
   1e624:	d10d      	bne.n	1e642 <_calloc_r+0x52>
   1e626:	0003      	movs	r3, r0
   1e628:	6101      	str	r1, [r0, #16]
   1e62a:	3318      	adds	r3, #24
   1e62c:	6141      	str	r1, [r0, #20]
   1e62e:	2200      	movs	r2, #0
   1e630:	601a      	str	r2, [r3, #0]
   1e632:	605a      	str	r2, [r3, #4]
   1e634:	609a      	str	r2, [r3, #8]
   1e636:	0020      	movs	r0, r4
   1e638:	bd10      	pop	{r4, pc}
   1e63a:	2100      	movs	r1, #0
   1e63c:	f7fb fc00 	bl	19e40 <memset>
   1e640:	e7f9      	b.n	1e636 <_calloc_r+0x46>
   1e642:	0003      	movs	r3, r0
   1e644:	3310      	adds	r3, #16
   1e646:	e7f2      	b.n	1e62e <_calloc_r+0x3e>

0001e648 <_close_r>:
   1e648:	2300      	movs	r3, #0
   1e64a:	b570      	push	{r4, r5, r6, lr}
   1e64c:	4c06      	ldr	r4, [pc, #24]	; (1e668 <_close_r+0x20>)
   1e64e:	0005      	movs	r5, r0
   1e650:	0008      	movs	r0, r1
   1e652:	6023      	str	r3, [r4, #0]
   1e654:	f7e9 f9d0 	bl	79f8 <_close>
   1e658:	1c43      	adds	r3, r0, #1
   1e65a:	d000      	beq.n	1e65e <_close_r+0x16>
   1e65c:	bd70      	pop	{r4, r5, r6, pc}
   1e65e:	6823      	ldr	r3, [r4, #0]
   1e660:	2b00      	cmp	r3, #0
   1e662:	d0fb      	beq.n	1e65c <_close_r+0x14>
   1e664:	602b      	str	r3, [r5, #0]
   1e666:	e7f9      	b.n	1e65c <_close_r+0x14>
   1e668:	20002fe4 	.word	0x20002fe4

0001e66c <_fclose_r>:
   1e66c:	b570      	push	{r4, r5, r6, lr}
   1e66e:	0005      	movs	r5, r0
   1e670:	1e0c      	subs	r4, r1, #0
   1e672:	d040      	beq.n	1e6f6 <_fclose_r+0x8a>
   1e674:	2800      	cmp	r0, #0
   1e676:	d002      	beq.n	1e67e <_fclose_r+0x12>
   1e678:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e67a:	2b00      	cmp	r3, #0
   1e67c:	d03e      	beq.n	1e6fc <_fclose_r+0x90>
   1e67e:	2601      	movs	r6, #1
   1e680:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e682:	4233      	tst	r3, r6
   1e684:	d133      	bne.n	1e6ee <_fclose_r+0x82>
   1e686:	89a3      	ldrh	r3, [r4, #12]
   1e688:	059b      	lsls	r3, r3, #22
   1e68a:	d543      	bpl.n	1e714 <_fclose_r+0xa8>
   1e68c:	0021      	movs	r1, r4
   1e68e:	0028      	movs	r0, r5
   1e690:	f7fe fc80 	bl	1cf94 <__sflush_r>
   1e694:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1e696:	0006      	movs	r6, r0
   1e698:	2b00      	cmp	r3, #0
   1e69a:	d004      	beq.n	1e6a6 <_fclose_r+0x3a>
   1e69c:	69e1      	ldr	r1, [r4, #28]
   1e69e:	0028      	movs	r0, r5
   1e6a0:	4798      	blx	r3
   1e6a2:	2800      	cmp	r0, #0
   1e6a4:	db44      	blt.n	1e730 <_fclose_r+0xc4>
   1e6a6:	89a3      	ldrh	r3, [r4, #12]
   1e6a8:	061b      	lsls	r3, r3, #24
   1e6aa:	d42a      	bmi.n	1e702 <_fclose_r+0x96>
   1e6ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1e6ae:	2900      	cmp	r1, #0
   1e6b0:	d008      	beq.n	1e6c4 <_fclose_r+0x58>
   1e6b2:	0023      	movs	r3, r4
   1e6b4:	3340      	adds	r3, #64	; 0x40
   1e6b6:	4299      	cmp	r1, r3
   1e6b8:	d002      	beq.n	1e6c0 <_fclose_r+0x54>
   1e6ba:	0028      	movs	r0, r5
   1e6bc:	f7fe fe16 	bl	1d2ec <_free_r>
   1e6c0:	2300      	movs	r3, #0
   1e6c2:	6323      	str	r3, [r4, #48]	; 0x30
   1e6c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1e6c6:	2900      	cmp	r1, #0
   1e6c8:	d004      	beq.n	1e6d4 <_fclose_r+0x68>
   1e6ca:	0028      	movs	r0, r5
   1e6cc:	f7fe fe0e 	bl	1d2ec <_free_r>
   1e6d0:	2300      	movs	r3, #0
   1e6d2:	6463      	str	r3, [r4, #68]	; 0x44
   1e6d4:	f7fe fd90 	bl	1d1f8 <__sfp_lock_acquire>
   1e6d8:	2300      	movs	r3, #0
   1e6da:	81a3      	strh	r3, [r4, #12]
   1e6dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e6de:	07db      	lsls	r3, r3, #31
   1e6e0:	d514      	bpl.n	1e70c <_fclose_r+0xa0>
   1e6e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e6e4:	f7ff f898 	bl	1d818 <__retarget_lock_close_recursive>
   1e6e8:	f7fe fd8e 	bl	1d208 <__sfp_lock_release>
   1e6ec:	e004      	b.n	1e6f8 <_fclose_r+0x8c>
   1e6ee:	220c      	movs	r2, #12
   1e6f0:	5ea3      	ldrsh	r3, [r4, r2]
   1e6f2:	2b00      	cmp	r3, #0
   1e6f4:	d1ca      	bne.n	1e68c <_fclose_r+0x20>
   1e6f6:	2600      	movs	r6, #0
   1e6f8:	0030      	movs	r0, r6
   1e6fa:	bd70      	pop	{r4, r5, r6, pc}
   1e6fc:	f7fe fd4c 	bl	1d198 <__sinit>
   1e700:	e7bd      	b.n	1e67e <_fclose_r+0x12>
   1e702:	6921      	ldr	r1, [r4, #16]
   1e704:	0028      	movs	r0, r5
   1e706:	f7fe fdf1 	bl	1d2ec <_free_r>
   1e70a:	e7cf      	b.n	1e6ac <_fclose_r+0x40>
   1e70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e70e:	f7ff f887 	bl	1d820 <__retarget_lock_release_recursive>
   1e712:	e7e6      	b.n	1e6e2 <_fclose_r+0x76>
   1e714:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e716:	f7ff f881 	bl	1d81c <__retarget_lock_acquire_recursive>
   1e71a:	220c      	movs	r2, #12
   1e71c:	5ea3      	ldrsh	r3, [r4, r2]
   1e71e:	2b00      	cmp	r3, #0
   1e720:	d1b4      	bne.n	1e68c <_fclose_r+0x20>
   1e722:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e724:	401e      	ands	r6, r3
   1e726:	d1e6      	bne.n	1e6f6 <_fclose_r+0x8a>
   1e728:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e72a:	f7ff f879 	bl	1d820 <__retarget_lock_release_recursive>
   1e72e:	e7e3      	b.n	1e6f8 <_fclose_r+0x8c>
   1e730:	2601      	movs	r6, #1
   1e732:	4276      	negs	r6, r6
   1e734:	e7b7      	b.n	1e6a6 <_fclose_r+0x3a>
   1e736:	46c0      	nop			; (mov r8, r8)

0001e738 <__fputwc>:
   1e738:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e73a:	46ce      	mov	lr, r9
   1e73c:	4647      	mov	r7, r8
   1e73e:	b580      	push	{r7, lr}
   1e740:	b085      	sub	sp, #20
   1e742:	4680      	mov	r8, r0
   1e744:	4689      	mov	r9, r1
   1e746:	0014      	movs	r4, r2
   1e748:	f7fa ffc2 	bl	196d0 <__locale_mb_cur_max>
   1e74c:	2801      	cmp	r0, #1
   1e74e:	d031      	beq.n	1e7b4 <__fputwc+0x7c>
   1e750:	0023      	movs	r3, r4
   1e752:	af03      	add	r7, sp, #12
   1e754:	335c      	adds	r3, #92	; 0x5c
   1e756:	464a      	mov	r2, r9
   1e758:	0039      	movs	r1, r7
   1e75a:	4640      	mov	r0, r8
   1e75c:	f000 f912 	bl	1e984 <_wcrtomb_r>
   1e760:	0006      	movs	r6, r0
   1e762:	1c43      	adds	r3, r0, #1
   1e764:	d021      	beq.n	1e7aa <__fputwc+0x72>
   1e766:	2800      	cmp	r0, #0
   1e768:	d030      	beq.n	1e7cc <__fputwc+0x94>
   1e76a:	7839      	ldrb	r1, [r7, #0]
   1e76c:	2500      	movs	r5, #0
   1e76e:	e007      	b.n	1e780 <__fputwc+0x48>
   1e770:	6823      	ldr	r3, [r4, #0]
   1e772:	1c5a      	adds	r2, r3, #1
   1e774:	6022      	str	r2, [r4, #0]
   1e776:	7019      	strb	r1, [r3, #0]
   1e778:	3501      	adds	r5, #1
   1e77a:	42b5      	cmp	r5, r6
   1e77c:	d226      	bcs.n	1e7cc <__fputwc+0x94>
   1e77e:	5d79      	ldrb	r1, [r7, r5]
   1e780:	68a3      	ldr	r3, [r4, #8]
   1e782:	3b01      	subs	r3, #1
   1e784:	60a3      	str	r3, [r4, #8]
   1e786:	2b00      	cmp	r3, #0
   1e788:	daf2      	bge.n	1e770 <__fputwc+0x38>
   1e78a:	69a2      	ldr	r2, [r4, #24]
   1e78c:	4293      	cmp	r3, r2
   1e78e:	db01      	blt.n	1e794 <__fputwc+0x5c>
   1e790:	290a      	cmp	r1, #10
   1e792:	d1ed      	bne.n	1e770 <__fputwc+0x38>
   1e794:	0022      	movs	r2, r4
   1e796:	4640      	mov	r0, r8
   1e798:	f000 f896 	bl	1e8c8 <__swbuf_r>
   1e79c:	1c43      	adds	r3, r0, #1
   1e79e:	d1eb      	bne.n	1e778 <__fputwc+0x40>
   1e7a0:	b005      	add	sp, #20
   1e7a2:	bc0c      	pop	{r2, r3}
   1e7a4:	4690      	mov	r8, r2
   1e7a6:	4699      	mov	r9, r3
   1e7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e7aa:	2240      	movs	r2, #64	; 0x40
   1e7ac:	89a3      	ldrh	r3, [r4, #12]
   1e7ae:	4313      	orrs	r3, r2
   1e7b0:	81a3      	strh	r3, [r4, #12]
   1e7b2:	e7f5      	b.n	1e7a0 <__fputwc+0x68>
   1e7b4:	464b      	mov	r3, r9
   1e7b6:	3b01      	subs	r3, #1
   1e7b8:	2bfe      	cmp	r3, #254	; 0xfe
   1e7ba:	d8c9      	bhi.n	1e750 <__fputwc+0x18>
   1e7bc:	466a      	mov	r2, sp
   1e7be:	464b      	mov	r3, r9
   1e7c0:	71d3      	strb	r3, [r2, #7]
   1e7c2:	79d1      	ldrb	r1, [r2, #7]
   1e7c4:	af03      	add	r7, sp, #12
   1e7c6:	7039      	strb	r1, [r7, #0]
   1e7c8:	2601      	movs	r6, #1
   1e7ca:	e7cf      	b.n	1e76c <__fputwc+0x34>
   1e7cc:	4648      	mov	r0, r9
   1e7ce:	e7e7      	b.n	1e7a0 <__fputwc+0x68>

0001e7d0 <_fputwc_r>:
   1e7d0:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1e7d2:	b570      	push	{r4, r5, r6, lr}
   1e7d4:	0005      	movs	r5, r0
   1e7d6:	000e      	movs	r6, r1
   1e7d8:	0014      	movs	r4, r2
   1e7da:	07db      	lsls	r3, r3, #31
   1e7dc:	d41e      	bmi.n	1e81c <_fputwc_r+0x4c>
   1e7de:	230c      	movs	r3, #12
   1e7e0:	5ed2      	ldrsh	r2, [r2, r3]
   1e7e2:	b291      	uxth	r1, r2
   1e7e4:	058b      	lsls	r3, r1, #22
   1e7e6:	d516      	bpl.n	1e816 <_fputwc_r+0x46>
   1e7e8:	2380      	movs	r3, #128	; 0x80
   1e7ea:	019b      	lsls	r3, r3, #6
   1e7ec:	4219      	tst	r1, r3
   1e7ee:	d104      	bne.n	1e7fa <_fputwc_r+0x2a>
   1e7f0:	431a      	orrs	r2, r3
   1e7f2:	81a2      	strh	r2, [r4, #12]
   1e7f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1e7f6:	4313      	orrs	r3, r2
   1e7f8:	6663      	str	r3, [r4, #100]	; 0x64
   1e7fa:	0028      	movs	r0, r5
   1e7fc:	0022      	movs	r2, r4
   1e7fe:	0031      	movs	r1, r6
   1e800:	f7ff ff9a 	bl	1e738 <__fputwc>
   1e804:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1e806:	0005      	movs	r5, r0
   1e808:	07db      	lsls	r3, r3, #31
   1e80a:	d402      	bmi.n	1e812 <_fputwc_r+0x42>
   1e80c:	89a3      	ldrh	r3, [r4, #12]
   1e80e:	059b      	lsls	r3, r3, #22
   1e810:	d508      	bpl.n	1e824 <_fputwc_r+0x54>
   1e812:	0028      	movs	r0, r5
   1e814:	bd70      	pop	{r4, r5, r6, pc}
   1e816:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e818:	f7ff f800 	bl	1d81c <__retarget_lock_acquire_recursive>
   1e81c:	230c      	movs	r3, #12
   1e81e:	5ee2      	ldrsh	r2, [r4, r3]
   1e820:	b291      	uxth	r1, r2
   1e822:	e7e1      	b.n	1e7e8 <_fputwc_r+0x18>
   1e824:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1e826:	f7fe fffb 	bl	1d820 <__retarget_lock_release_recursive>
   1e82a:	e7f2      	b.n	1e812 <_fputwc_r+0x42>

0001e82c <_fstat_r>:
   1e82c:	2300      	movs	r3, #0
   1e82e:	b570      	push	{r4, r5, r6, lr}
   1e830:	4c07      	ldr	r4, [pc, #28]	; (1e850 <_fstat_r+0x24>)
   1e832:	0005      	movs	r5, r0
   1e834:	0008      	movs	r0, r1
   1e836:	0011      	movs	r1, r2
   1e838:	6023      	str	r3, [r4, #0]
   1e83a:	f7e9 f8e0 	bl	79fe <_fstat>
   1e83e:	1c43      	adds	r3, r0, #1
   1e840:	d000      	beq.n	1e844 <_fstat_r+0x18>
   1e842:	bd70      	pop	{r4, r5, r6, pc}
   1e844:	6823      	ldr	r3, [r4, #0]
   1e846:	2b00      	cmp	r3, #0
   1e848:	d0fb      	beq.n	1e842 <_fstat_r+0x16>
   1e84a:	602b      	str	r3, [r5, #0]
   1e84c:	e7f9      	b.n	1e842 <_fstat_r+0x16>
   1e84e:	46c0      	nop			; (mov r8, r8)
   1e850:	20002fe4 	.word	0x20002fe4

0001e854 <_isatty_r>:
   1e854:	2300      	movs	r3, #0
   1e856:	b570      	push	{r4, r5, r6, lr}
   1e858:	4c06      	ldr	r4, [pc, #24]	; (1e874 <_isatty_r+0x20>)
   1e85a:	0005      	movs	r5, r0
   1e85c:	0008      	movs	r0, r1
   1e85e:	6023      	str	r3, [r4, #0]
   1e860:	f7e9 f8d2 	bl	7a08 <_isatty>
   1e864:	1c43      	adds	r3, r0, #1
   1e866:	d000      	beq.n	1e86a <_isatty_r+0x16>
   1e868:	bd70      	pop	{r4, r5, r6, pc}
   1e86a:	6823      	ldr	r3, [r4, #0]
   1e86c:	2b00      	cmp	r3, #0
   1e86e:	d0fb      	beq.n	1e868 <_isatty_r+0x14>
   1e870:	602b      	str	r3, [r5, #0]
   1e872:	e7f9      	b.n	1e868 <_isatty_r+0x14>
   1e874:	20002fe4 	.word	0x20002fe4

0001e878 <_lseek_r>:
   1e878:	b570      	push	{r4, r5, r6, lr}
   1e87a:	0005      	movs	r5, r0
   1e87c:	0008      	movs	r0, r1
   1e87e:	0011      	movs	r1, r2
   1e880:	2200      	movs	r2, #0
   1e882:	4c06      	ldr	r4, [pc, #24]	; (1e89c <_lseek_r+0x24>)
   1e884:	6022      	str	r2, [r4, #0]
   1e886:	001a      	movs	r2, r3
   1e888:	f7e9 f8c0 	bl	7a0c <_lseek>
   1e88c:	1c43      	adds	r3, r0, #1
   1e88e:	d000      	beq.n	1e892 <_lseek_r+0x1a>
   1e890:	bd70      	pop	{r4, r5, r6, pc}
   1e892:	6823      	ldr	r3, [r4, #0]
   1e894:	2b00      	cmp	r3, #0
   1e896:	d0fb      	beq.n	1e890 <_lseek_r+0x18>
   1e898:	602b      	str	r3, [r5, #0]
   1e89a:	e7f9      	b.n	1e890 <_lseek_r+0x18>
   1e89c:	20002fe4 	.word	0x20002fe4

0001e8a0 <_read_r>:
   1e8a0:	b570      	push	{r4, r5, r6, lr}
   1e8a2:	0005      	movs	r5, r0
   1e8a4:	0008      	movs	r0, r1
   1e8a6:	0011      	movs	r1, r2
   1e8a8:	2200      	movs	r2, #0
   1e8aa:	4c06      	ldr	r4, [pc, #24]	; (1e8c4 <_read_r+0x24>)
   1e8ac:	6022      	str	r2, [r4, #0]
   1e8ae:	001a      	movs	r2, r3
   1e8b0:	f7e9 f846 	bl	7940 <_read>
   1e8b4:	1c43      	adds	r3, r0, #1
   1e8b6:	d000      	beq.n	1e8ba <_read_r+0x1a>
   1e8b8:	bd70      	pop	{r4, r5, r6, pc}
   1e8ba:	6823      	ldr	r3, [r4, #0]
   1e8bc:	2b00      	cmp	r3, #0
   1e8be:	d0fb      	beq.n	1e8b8 <_read_r+0x18>
   1e8c0:	602b      	str	r3, [r5, #0]
   1e8c2:	e7f9      	b.n	1e8b8 <_read_r+0x18>
   1e8c4:	20002fe4 	.word	0x20002fe4

0001e8c8 <__swbuf_r>:
   1e8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8ca:	0006      	movs	r6, r0
   1e8cc:	000d      	movs	r5, r1
   1e8ce:	0014      	movs	r4, r2
   1e8d0:	2800      	cmp	r0, #0
   1e8d2:	d002      	beq.n	1e8da <__swbuf_r+0x12>
   1e8d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1e8d6:	2b00      	cmp	r3, #0
   1e8d8:	d04e      	beq.n	1e978 <__swbuf_r+0xb0>
   1e8da:	69a3      	ldr	r3, [r4, #24]
   1e8dc:	60a3      	str	r3, [r4, #8]
   1e8de:	230c      	movs	r3, #12
   1e8e0:	5ee0      	ldrsh	r0, [r4, r3]
   1e8e2:	b281      	uxth	r1, r0
   1e8e4:	070b      	lsls	r3, r1, #28
   1e8e6:	d53c      	bpl.n	1e962 <__swbuf_r+0x9a>
   1e8e8:	6923      	ldr	r3, [r4, #16]
   1e8ea:	2b00      	cmp	r3, #0
   1e8ec:	d039      	beq.n	1e962 <__swbuf_r+0x9a>
   1e8ee:	22ff      	movs	r2, #255	; 0xff
   1e8f0:	b2ef      	uxtb	r7, r5
   1e8f2:	4015      	ands	r5, r2
   1e8f4:	2280      	movs	r2, #128	; 0x80
   1e8f6:	0192      	lsls	r2, r2, #6
   1e8f8:	4211      	tst	r1, r2
   1e8fa:	d015      	beq.n	1e928 <__swbuf_r+0x60>
   1e8fc:	6822      	ldr	r2, [r4, #0]
   1e8fe:	6961      	ldr	r1, [r4, #20]
   1e900:	1ad3      	subs	r3, r2, r3
   1e902:	428b      	cmp	r3, r1
   1e904:	da1b      	bge.n	1e93e <__swbuf_r+0x76>
   1e906:	3301      	adds	r3, #1
   1e908:	68a1      	ldr	r1, [r4, #8]
   1e90a:	3901      	subs	r1, #1
   1e90c:	60a1      	str	r1, [r4, #8]
   1e90e:	1c51      	adds	r1, r2, #1
   1e910:	6021      	str	r1, [r4, #0]
   1e912:	7017      	strb	r7, [r2, #0]
   1e914:	6962      	ldr	r2, [r4, #20]
   1e916:	429a      	cmp	r2, r3
   1e918:	d01a      	beq.n	1e950 <__swbuf_r+0x88>
   1e91a:	89a3      	ldrh	r3, [r4, #12]
   1e91c:	07db      	lsls	r3, r3, #31
   1e91e:	d501      	bpl.n	1e924 <__swbuf_r+0x5c>
   1e920:	2d0a      	cmp	r5, #10
   1e922:	d015      	beq.n	1e950 <__swbuf_r+0x88>
   1e924:	0028      	movs	r0, r5
   1e926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e928:	4302      	orrs	r2, r0
   1e92a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1e92c:	81a2      	strh	r2, [r4, #12]
   1e92e:	4a14      	ldr	r2, [pc, #80]	; (1e980 <__swbuf_r+0xb8>)
   1e930:	400a      	ands	r2, r1
   1e932:	6662      	str	r2, [r4, #100]	; 0x64
   1e934:	6961      	ldr	r1, [r4, #20]
   1e936:	6822      	ldr	r2, [r4, #0]
   1e938:	1ad3      	subs	r3, r2, r3
   1e93a:	428b      	cmp	r3, r1
   1e93c:	dbe3      	blt.n	1e906 <__swbuf_r+0x3e>
   1e93e:	0021      	movs	r1, r4
   1e940:	0030      	movs	r0, r6
   1e942:	f7fe fbcf 	bl	1d0e4 <_fflush_r>
   1e946:	2800      	cmp	r0, #0
   1e948:	d108      	bne.n	1e95c <__swbuf_r+0x94>
   1e94a:	6822      	ldr	r2, [r4, #0]
   1e94c:	2301      	movs	r3, #1
   1e94e:	e7db      	b.n	1e908 <__swbuf_r+0x40>
   1e950:	0021      	movs	r1, r4
   1e952:	0030      	movs	r0, r6
   1e954:	f7fe fbc6 	bl	1d0e4 <_fflush_r>
   1e958:	2800      	cmp	r0, #0
   1e95a:	d0e3      	beq.n	1e924 <__swbuf_r+0x5c>
   1e95c:	2501      	movs	r5, #1
   1e95e:	426d      	negs	r5, r5
   1e960:	e7e0      	b.n	1e924 <__swbuf_r+0x5c>
   1e962:	0021      	movs	r1, r4
   1e964:	0030      	movs	r0, r6
   1e966:	f7fd fa29 	bl	1bdbc <__swsetup_r>
   1e96a:	2800      	cmp	r0, #0
   1e96c:	d1f6      	bne.n	1e95c <__swbuf_r+0x94>
   1e96e:	230c      	movs	r3, #12
   1e970:	5ee0      	ldrsh	r0, [r4, r3]
   1e972:	6923      	ldr	r3, [r4, #16]
   1e974:	b281      	uxth	r1, r0
   1e976:	e7ba      	b.n	1e8ee <__swbuf_r+0x26>
   1e978:	f7fe fc0e 	bl	1d198 <__sinit>
   1e97c:	e7ad      	b.n	1e8da <__swbuf_r+0x12>
   1e97e:	46c0      	nop			; (mov r8, r8)
   1e980:	ffffdfff 	.word	0xffffdfff

0001e984 <_wcrtomb_r>:
   1e984:	b570      	push	{r4, r5, r6, lr}
   1e986:	001d      	movs	r5, r3
   1e988:	4b11      	ldr	r3, [pc, #68]	; (1e9d0 <_wcrtomb_r+0x4c>)
   1e98a:	b084      	sub	sp, #16
   1e98c:	681b      	ldr	r3, [r3, #0]
   1e98e:	0004      	movs	r4, r0
   1e990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1e992:	2900      	cmp	r1, #0
   1e994:	d00e      	beq.n	1e9b4 <_wcrtomb_r+0x30>
   1e996:	2b00      	cmp	r3, #0
   1e998:	d016      	beq.n	1e9c8 <_wcrtomb_r+0x44>
   1e99a:	20e0      	movs	r0, #224	; 0xe0
   1e99c:	581e      	ldr	r6, [r3, r0]
   1e99e:	002b      	movs	r3, r5
   1e9a0:	0020      	movs	r0, r4
   1e9a2:	47b0      	blx	r6
   1e9a4:	1c43      	adds	r3, r0, #1
   1e9a6:	d103      	bne.n	1e9b0 <_wcrtomb_r+0x2c>
   1e9a8:	2300      	movs	r3, #0
   1e9aa:	602b      	str	r3, [r5, #0]
   1e9ac:	338a      	adds	r3, #138	; 0x8a
   1e9ae:	6023      	str	r3, [r4, #0]
   1e9b0:	b004      	add	sp, #16
   1e9b2:	bd70      	pop	{r4, r5, r6, pc}
   1e9b4:	2b00      	cmp	r3, #0
   1e9b6:	d009      	beq.n	1e9cc <_wcrtomb_r+0x48>
   1e9b8:	22e0      	movs	r2, #224	; 0xe0
   1e9ba:	a901      	add	r1, sp, #4
   1e9bc:	589e      	ldr	r6, [r3, r2]
   1e9be:	0020      	movs	r0, r4
   1e9c0:	002b      	movs	r3, r5
   1e9c2:	2200      	movs	r2, #0
   1e9c4:	47b0      	blx	r6
   1e9c6:	e7ed      	b.n	1e9a4 <_wcrtomb_r+0x20>
   1e9c8:	4b02      	ldr	r3, [pc, #8]	; (1e9d4 <_wcrtomb_r+0x50>)
   1e9ca:	e7e6      	b.n	1e99a <_wcrtomb_r+0x16>
   1e9cc:	4b01      	ldr	r3, [pc, #4]	; (1e9d4 <_wcrtomb_r+0x50>)
   1e9ce:	e7f3      	b.n	1e9b8 <_wcrtomb_r+0x34>
   1e9d0:	20000018 	.word	0x20000018
   1e9d4:	20000448 	.word	0x20000448

0001e9d8 <__aeabi_dcmpun>:
   1e9d8:	b570      	push	{r4, r5, r6, lr}
   1e9da:	4e0e      	ldr	r6, [pc, #56]	; (1ea14 <__aeabi_dcmpun+0x3c>)
   1e9dc:	030d      	lsls	r5, r1, #12
   1e9de:	031c      	lsls	r4, r3, #12
   1e9e0:	0049      	lsls	r1, r1, #1
   1e9e2:	005b      	lsls	r3, r3, #1
   1e9e4:	0b2d      	lsrs	r5, r5, #12
   1e9e6:	0d49      	lsrs	r1, r1, #21
   1e9e8:	0b24      	lsrs	r4, r4, #12
   1e9ea:	0d5b      	lsrs	r3, r3, #21
   1e9ec:	42b1      	cmp	r1, r6
   1e9ee:	d004      	beq.n	1e9fa <__aeabi_dcmpun+0x22>
   1e9f0:	4908      	ldr	r1, [pc, #32]	; (1ea14 <__aeabi_dcmpun+0x3c>)
   1e9f2:	2000      	movs	r0, #0
   1e9f4:	428b      	cmp	r3, r1
   1e9f6:	d008      	beq.n	1ea0a <__aeabi_dcmpun+0x32>
   1e9f8:	bd70      	pop	{r4, r5, r6, pc}
   1e9fa:	4305      	orrs	r5, r0
   1e9fc:	2001      	movs	r0, #1
   1e9fe:	2d00      	cmp	r5, #0
   1ea00:	d1fa      	bne.n	1e9f8 <__aeabi_dcmpun+0x20>
   1ea02:	4904      	ldr	r1, [pc, #16]	; (1ea14 <__aeabi_dcmpun+0x3c>)
   1ea04:	2000      	movs	r0, #0
   1ea06:	428b      	cmp	r3, r1
   1ea08:	d1f6      	bne.n	1e9f8 <__aeabi_dcmpun+0x20>
   1ea0a:	4314      	orrs	r4, r2
   1ea0c:	0020      	movs	r0, r4
   1ea0e:	1e44      	subs	r4, r0, #1
   1ea10:	41a0      	sbcs	r0, r4
   1ea12:	e7f1      	b.n	1e9f8 <__aeabi_dcmpun+0x20>
   1ea14:	000007ff 	.word	0x000007ff

0001ea18 <k.4571>:
   1ea18:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
   1ea28:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
   1ea38:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
   1ea48:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
   1ea58:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
   1ea68:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
   1ea78:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
   1ea88:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
   1ea98:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
   1eaa8:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
   1eab8:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
   1eac8:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
   1ead8:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
   1eae8:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
   1eaf8:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
   1eb08:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.
   1eb18:	43331104 40c40704 0000147a 00001504     ..3C...@z.......
   1eb28:	00001510 0000151c 00001528 00001534     ........(...4...
   1eb38:	52455355 414f4220 00004452 5f534c4d     USER BOARD..MLS_
   1eb48:	5f4b4453 5f305f31 00345f50 20626546     SDK_1_0_P_4.Feb 
   1eb58:	32203531 00323230 353a3631 39333a35     15 2022.16:55:39
	...

0001eb69 <gParserStartCmdSize>:
   1eb69:	1c000002                                         ...

0001eb6c <maParserBaseCmd>:
   1eb6c:	0001f21c 0001eb8c 00000000 00000009     ................
   1eb7c:	0001f220 0001f13c 00000000 00000005      ...<...........

0001eb8c <maParserLoraCmd>:
   1eb8c:	0001f238 00000000 00002265 00000100     8.......e"......
   1eb9c:	0001f2ac 00000000 00002361 00000100     ........a#......
   1ebac:	0001f2b4 00000000 0000239d 00000300     .........#......
   1ebbc:	0001f224 0001ef0c 00000000 00000022     $..........."...
   1ebcc:	0001f240 0001ec4c 00000000 00000028     @...L.......(...
   1ebdc:	0001f2b8 00000000 00002c2d 00000000     ........-,......
   1ebec:	0001f2c0 00000000 00002c51 00000000     ........Q,......
   1ebfc:	0001f2c8 00000000 00002c69 00000000     ........i,......
   1ec0c:	0001f2d0 00000000 00002e61 00000000     ........a.......

0001ec1c <maParserLoraGetChCmd>:
   1ec1c:	0001f4cc 00000000 00002861 00000100     ........a(......
   1ec2c:	0001f314 00000000 00002a6d 00000100     ........m*......
   1ec3c:	0001f4d4 00000000 00002b49 00000100     ........I+......

0001ec4c <maParserLoraGetCmd>:
   1ec4c:	0001f2dc 00000000 00002485 00000000     .........$......
   1ec5c:	0001f2e0 00000000 000024f5 00000000     .........$......
   1ec6c:	0001f2e4 00000000 00002591 00000000     .........%......
   1ec7c:	0001f2ec 00000000 00002629 00000000     ........)&......
   1ec8c:	0001f2f4 00000000 000026b1 00000000     .........&......
   1ec9c:	0001f68c 0001ec1c 00000000 00000003     ................
   1ecac:	0001f2fc 00000000 00002bf9 00000000     .........+......
   1ecbc:	0001f304 00000000 00002ce1 00000000     .........,......
   1eccc:	0001f308 00000000 0000305d 00000000     ........]0......
   1ecdc:	0001f314 00000000 00003169 00000000     ........i1......
   1ecec:	0001f31c 00000000 0000328d 00000000     .........2......
   1ecfc:	0001f324 00000000 000032c1 00000000     $........2......
   1ed0c:	0001f32c 00000000 000032f5 00000000     ,........2......
   1ed1c:	0001f334 00000000 00003329 00000000     4.......)3......
   1ed2c:	0001f33c 00000000 00003399 00000000     <........3......
   1ed3c:	0001f340 00000000 00003415 00000000     @........4......
   1ed4c:	0001f34c 00000000 00003449 00000000     L.......I4......
   1ed5c:	0001f91c 00000000 0000347d 00000000     ........}4......
   1ed6c:	0001f358 00000000 00002f75 00000000     X.......u/......
   1ed7c:	0001f360 00000000 00002fa9 00000000     `......../......
   1ed8c:	0001f368 00000000 00002fd9 00000000     h......../......
   1ed9c:	0001f370 00000000 00002d99 00000000     p........-......
   1edac:	0001f374 00000000 000034f5 00000000     t........4......
   1edbc:	0001f37c 00000000 00003539 00000000     |.......95......
   1edcc:	0001f390 00000000 000035c1 00000100     .........5......
   1eddc:	0001f39c 00000000 0000360d 00000100     .........6......
   1edec:	0001f3a8 00000000 000036a9 00000100     .........6......
   1edfc:	0001f3b8 00000000 000037f5 00000100     .........7......
   1ee0c:	0001f3c4 00000000 00003875 00000100     ........u8......
   1ee1c:	0001f3cc 0001eecc 00000000 00000001     ................
   1ee2c:	0001f3d4 00000000 000038c5 00000000     .........8......
   1ee3c:	0001f3dc 00000000 000038f9 00000000     .........8......
   1ee4c:	0001f3e8 00000000 00003925 00000000     ........%9......
   1ee5c:	0001f3f0 00000000 00003951 00000000     ........Q9......
   1ee6c:	0001f42c 00000000 00003985 00000000     ,........9......
   1ee7c:	0001f3fc 00000000 000039b5 00000000     .........9......
   1ee8c:	0001f408 00000000 000039c1 00000000     .........9......
   1ee9c:	0001f418 00000000 000039cd 00000000     .........9......
   1eeac:	0001f428 00000000 00003a01 00000000     (........:......
   1eebc:	0001f43c 00000000 00003aad 00000000     <........:......

0001eecc <maParserLoraGetSubBandCmd>:
   1eecc:	0001f314 00000000 0000295d 00000100     ........])......

0001eedc <maParserLoraSetChCmd>:
   1eedc:	0001f4cc 00000000 000027e9 00000200     .........'......
   1eeec:	0001f314 00000000 00002a05 00000200     .........*......
   1eefc:	0001f4d4 00000000 00002ab9 00000300     .........*......

0001ef0c <maParserLoraSetCmd>:
   1ef0c:	0001f2dc 00000000 00002449 00000100     ........I$......
   1ef1c:	0001f2e0 00000000 000024b9 00000100     .........$......
   1ef2c:	0001f2e4 00000000 00002521 00000100     ........!%......
   1ef3c:	0001f2ec 00000000 000025d1 00000100     .........%......
   1ef4c:	0001f2f4 00000000 00002659 00000100     ........Y&......
   1ef5c:	0001f450 00000000 000026e1 00000100     P........&......
   1ef6c:	0001f458 00000000 00002739 00000100     X.......9'......
   1ef7c:	0001f460 00000000 00002791 00000100     `........'......
   1ef8c:	0001f2fc 00000000 00002bbd 00000100     .........+......
   1ef9c:	0001f68c 0001eedc 00000000 00000003     ................
   1efac:	0001f304 00000000 00002c75 00000200     ........u,......
   1efbc:	0001f468 00000000 000031a9 00000100     h........1......
   1efcc:	0001f31c 00000000 000031f5 00000100     .........1......
   1efdc:	0001f324 00000000 00003241 00000100     $.......A2......
   1efec:	0001f33c 00000000 0000335d 00000100     <.......]3......
   1effc:	0001f340 00000000 000033c5 00000100     @........3......
   1f00c:	0001f46c 00000000 00003009 00000100     l........0......
   1f01c:	0001f358 00000000 00002f11 00000100     X......../......
   1f02c:	0001f360 00000000 00002e79 00000100     `.......y.......
   1f03c:	0001f368 00000000 00002ec5 00000100     h...............
   1f04c:	0001f370 00000000 00002d41 00000500     p.......A-......
   1f05c:	0001f374 00000000 000034a9 00000100     t........4......
   1f06c:	0001f390 00000000 00003599 00000200     .........5......
   1f07c:	0001f3a8 00000000 0000365d 00000200     ........]6......
   1f08c:	0001f474 00000000 00003709 00000200     t........7......
   1f09c:	0001f484 00000000 00003759 00000200     ........Y7......
   1f0ac:	0001f3b8 00000000 000037a9 00000200     .........7......
   1f0bc:	0001f3c4 00000000 00003845 00000200     ........E8......
   1f0cc:	0001f308 00000000 00003091 00000100     .........0......
   1f0dc:	0001f494 00000000 000030dd 00000100     .........0......
   1f0ec:	0001f4a8 00000000 0000312d 00000100     ........-1......
   1f0fc:	0001f3cc 0001f12c 00000000 00000001     ....,...........
   1f10c:	0001f43c 00000000 00003a31 00000100     <.......1:......
   1f11c:	0001f4b8 00000000 00003a71 00000100     ........q:......

0001f12c <maParserLoraSetSubBandCmd>:
   1f12c:	0001f314 00000000 000028b1 00000200     .........(......

0001f13c <maParserSysCmd>:
   1f13c:	0001f224 0001f20c 00000000 00000001     $...............
   1f14c:	0001f228 00000000 00003dc5 00000000     (........=......
   1f15c:	0001f238 00000000 00003da9 00000000     8........=......
   1f16c:	0001f240 0001f18c 00000000 00000008     @...............
   1f17c:	0001f244 00000000 00003de9 00000200     D........=......

0001f18c <maParserSysGetCmd>:
   1f18c:	0001f24c 00000000 00003b81 00000000     L........;......
   1f19c:	0001f250 00000000 00003b55 00000000     P.......U;......
   1f1ac:	0001f258 00000000 00003b99 00000000     X........;......
   1f1bc:	0001f264 00000000 00003c29 00000000     d.......)<......
   1f1cc:	0001f270 00000000 00003c71 00000000     p.......q<......
   1f1dc:	0001f280 00000000 00003ccd 00000000     .........<......
   1f1ec:	0001f290 00000000 00003d1d 00000000     .........=......
   1f1fc:	0001f2a0 00000000 00003d91 00000000     .........=......

0001f20c <maParserSysSetCmd>:
   1f20c:	0001f258 00000000 00003bc9 00000100     X........;......
   1f21c:	0063616d 00737973 00746573 74636166     mac.sys.set.fact
   1f22c:	5279726f 54455345 00000000 65736572     oryRESET....rese
   1f23c:	00000074 00746567 65656c73 00000070     t...get.sleep...
   1f24c:	00726576 75657768 00000069 74737563     ver.hweui...cust
   1f25c:	61706d6f 006d6172 70797263 6e736f74     omparam.cryptosn
   1f26c:	00000000 70797263 65646f74 69756576     ....cryptodeveui
   1f27c:	00000000 70797263 6f6a6f74 75656e69     ....cryptojoineu
   1f28c:	00000069 70797263 6b746f74 666e696d     i...cryptotkminf
   1f29c:	0000006f 74737563 64696d6f 00000000     o...customid....
   1f2ac:	6e696f6a 00000000 00007874 73756170     join....tx..paus
   1f2bc:	00000065 75736572 0000656d 65766173     e...resume..save
   1f2cc:	00000000 63726f66 414e4565 00454c42     ....forceENABLE.
   1f2dc:	00007264 00726461 61766564 00726464     dr..adr.devaddr.
   1f2ec:	65766564 00006975 6e696f6a 00697565     deveui..joineui.
   1f2fc:	69727770 00007864 00327872 64676761     pwridx..rx2.aggd
   1f30c:	6c637963 00000065 74617473 00007375     cycle...status..
   1f31c:	78746572 00000000 73706572 00000000     retx....reps....
   1f32c:	6e67726d 00000000 626e7767 00000000     mrgn....gwnb....
   1f33c:	00007261 65647872 3179616c 00000000     ar..rxdelay1....
   1f34c:	65647872 3279616c 00000000 636e7973     rxdelay2....sync
   1f35c:	00000000 74637075 00000072 74636e64     ....upctr...dnct
   1f36c:	00000072 0074626c 6c636465 00737361     r...lbt.edclass.
   1f37c:	6c636465 73737361 6f707075 64657472     edclasssupported
   1f38c:	00000000 7361636d 616e6574 00656c62     ....mcastenable.
   1f39c:	7361636d 636e6474 00007274 7361636d     mcastdnctr..mcas
   1f3ac:	76656474 72646461 00000000 7361636d     tdevaddr....mcas
   1f3bc:	65726674 00000071 7361636d 00726474     tfreq...mcastdr.
   1f3cc:	62627573 00646e61 72746b70 00697373     subband.pktrssi.
   1f3dc:	70667369 69646e65 0000676e 6c647369     isfpending..isdl
   1f3ec:	006b6361 7473616c 64696863 00000000     ack.lastchid....
   1f3fc:	72666e63 79727465 00746e63 6e636e75     cnfretrycnt.uncn
   1f40c:	74657266 6e637972 00000074 5074786e     fretrycnt...nxtP
   1f41c:	6f6c7961 69536461 0000657a 6e696f6a     ayloadSize..join
   1f42c:	79747564 6c637963 6d697465 00000065     dutycycletime...
   1f43c:	6e696f6a 6b636162 6566666f 6c62616e     joinbackoffenabl
   1f44c:	00000065 736b776e 0079656b 73707061     e...nwkskey.apps
   1f45c:	0079656b 6b707061 00007965 00746162     key.appkey..bat.
   1f46c:	6b6e696c 006b6863 7361636d 6b776e74     linkchk.mcastnwk
   1f47c:	79656b73 00000000 7361636d 70706174     skey....mcastapp
   1f48c:	79656b73 00000000 70797263 65646f74     skey....cryptode
   1f49c:	616e6576 64656c62 00000000 74736574     venabled....test
   1f4ac:	65646f6d 62616e65 0064656c 4678616d     modeenabled.maxF
   1f4bc:	50746e63 70557364 61567464 0000006c     cntPdsUpdtVal...
   1f4cc:	71657266 00000000 61727264 0065676e     freq....drrange.
   1f4dc:	00001f3a 00001fac 00001fb6 00001fc0     :...............
   1f4ec:	00001fca 00001fd4 00001ffc 00002006     ............. ..
   1f4fc:	0000201a 00002024 0000202e 00002038     . ..$ ... ..8 ..
   1f50c:	00002042 0000204c 00001f26 00001fde     B ..L ..&.......
   1f51c:	00001fe8 00001ff2 00002010 00001f26     ......... ..&...
   1f52c:	00001f26 00001f26 00002056 0000207a     &...&...V ..z ..
   1f53c:	00002084 000020a2 000020ac 000020b6     . ... ... ... ..
   1f54c:	000020c0 000020ca 000020d4 00002070     . ... ... ..p ..
   1f55c:	000020de 000020e8 000020f2 000020fc     . ... ... ... ..
   1f56c:	00002106 0000212e 00002138 0000214c     .!...!..8!..L!..
   1f57c:	00002156 00002160 0000216a 00002174     V!..`!..j!..t!..
   1f58c:	0000217e 00001f26 00002110 0000211a     ~!..&....!...!..
   1f59c:	00002124 00002142 00002098 0000208e     $!..B!... ... ..
   1f5ac:	00001f26 00002188 5f63616d 00207872     &....!..mac_rx .
   1f5bc:	5f6b6361 65636572 64657669 00000000     ack_received....
   1f5cc:	5f746f6e 6e696f6a 00006465 61766e69     not_joined..inva
   1f5dc:	5f64696c 61726170 0000006d 7379656b     lid_param...keys
   1f5ec:	746f6e5f 696e695f 00000074 656c6973     _not_init...sile
   1f5fc:	0000746e 6d617266 756f635f 7265746e     nt..fram_counter
   1f60c:	7272655f 6a65725f 5f6e696f 6465656e     _err_rejoin_need
   1f61c:	00006465 61766e69 5f64696c 746e6366     ed..invalid_fcnt
   1f62c:	00000072 5f63696d 6f727265 00000072     r...mic_error...
   1f63c:	61766e69 5f64696c 7079746d 00000065     invalid_mtype...
   1f64c:	61766e69 5f64696c 66667562 6c5f7265     invalid_buffer_l
   1f65c:	74676e65 00000068 5f63616d 73756170     ength...mac_paus
   1f66c:	00006465 7361636d 64685f74 6e695f72     ed..mcast_hdr_in
   1f67c:	696c6176 00000064 665f6f6e 5f656572     valid...no_free_
   1f68c:	00006863 79737562 00000000 615f6f6e     ch..busy....no_a
   1f69c:	00206b63 6e696f6a 5f6e695f 676f7270     ck .join_in_prog
   1f6ac:	73736572 00000000 6f736572 65637275     ress....resource
   1f6bc:	616e755f 6c696176 656c6261 00000000     _unavailable....
   1f6cc:	61766e69 5f64696c 75716572 00747365     invalid_request.
   1f6dc:	61766e69 5f64696c 6b636170 00007465     invalid_packet..
   1f6ec:	5f63616d 6f5f7874 0000006b 69646172     mac_tx_ok...radi
   1f6fc:	78745f6f 006b6f5f 69646172 6f6e5f6f     o_tx_ok.radio_no
   1f70c:	7461645f 00000061 69646172 78745f6f     _data...radio_tx
   1f71c:	6d69745f 74756f65 00000000 745f7874     _timeout....tx_t
   1f72c:	6f656d69 00007475 69646172 61645f6f     imeout..radio_da
   1f73c:	735f6174 00657a69 69646172 6e695f6f     ta_size.radio_in
   1f74c:	696c6176 65725f64 00000071 69646172     valid_req...radi
   1f75c:	75625f6f 00007973 69646172 756f5f6f     o_busy..radio_ou
   1f76c:	666f5f74 6e61725f 00006567 69646172     t_of_range..radi
   1f77c:	6e755f6f 5f707573 72747461 00000000     o_unsup_attr....
   1f78c:	69646172 68635f6f 656e6e61 75625f6c     radio_channel_bu
   1f79c:	00007973 00706261 6161746f 00000000     sy..abp.otaa....
   1f7ac:	646e6142 20732520 20746f6e 70707573     Band %s not supp
   1f7bc:	6574726f 000a0d64 00006b6f 00666e63     orted...ok..cnf.
   1f7cc:	6e636e75 00000066                       uncnf...

0001f7d4 <gapParseIsmBand>:
   1f7d4:	0001f924 0001f928 0001f92c 0001f934     $...(...,...4...
   1f7e4:	0001f93c 0001f944 0001f94c 0001f954     <...D...L...T...
   1f7f4:	0001f95c 0001f964 0001f96c 0001f974     \...d...l...t...
   1f804:	0001f97c 0001f984 0001f98c 0001f994     |...............

0001f814 <gapParseJoinStatus>:
   1f814:	0001f9a4 0001f9ac 0001f684 0001f728     ............(...
   1f824:	0001f630                                0...

0001f828 <gapParseOnOff>:
   1f828:	0001f99c 0001f9a0                       ........

0001f830 <gapParserBool>:
   1f830:	0001f8b0 0001f8b8                       ........

0001f838 <gapParserEdClass>:
   1f838:	0001f8c0 0001f8c8 0001f8d0 0001f8d8     ................

0001f848 <gapParserLorawanStatus>:
   1f848:	0001f8e8 0001f704 0001f734 0001f744     ........4...D...
   1f858:	0001f758 0001f764 0001f778 0001f78c     X...d...x.......
   1f868:	0001f7c4 0001f5cc 0001f5d8 0001f5e8     ................
   1f878:	0001f5f8 0001f600 0001f8f4 0001f664     ............d...
   1f888:	0001f684 0001f690 0001f908 0001f6a0     ................
   1f898:	0001f6b4 0001f6cc 0001f910 0001f728     ............(...
   1f8a8:	0001f714 0001f6dc 736c6166 00000065     ........false...
   1f8b8:	65757274 00000000 53414c43 00412053     true....CLASS A.
   1f8c8:	53414c43 00422053 53414c43 00432053     CLASS B.CLASS C.
   1f8d8:	53414c43 4e492053 494c4156 00000044     CLASS INVALID...
   1f8e8:	69646172 6b6f5f6f 00000000 61766e69     radio_ok....inva
   1f8f8:	5f64696c 61746164 6e656c5f 00000000     lid_data_len....
   1f908:	615f6f6e 00006b63 75736e75 726f7070     no_ack..unsuppor
   1f918:	5f646574 646e6162 00000000 00383638     ted_band....868.
   1f928:	00333334 3139616e 00000035 31397561     433.na915...au91
   1f938:	00000035 3239726b 00000030 396e706a     5...kr920...jpn9
   1f948:	00003332 396e7262 00003332 39626d63     23..brn923..cmb9
   1f958:	00003332 39736e69 00003332 736f616c     23..ins923..laos
   1f968:	00333239 32397a6e 00000033 32397073     923.nz923...sp92
   1f978:	00000033 396e7774 00003332 69616874     3...twn923..thai
   1f988:	00333239 396d7476 00003332 38646e69     923.vtm923..ind8
   1f998:	00003536 0066666f 00006e6f 696e6564     65..off.on..deni
   1f9a8:	00006465 65636361 64657470 00000000     ed..accepted....
   1f9b8:	6c250a0d 000a0d64 6e617473 00796264     ..%ld...standby.
   1f9c8:	6b636162 00007075 00727265 6978450a     backup..err..Exi
   1f9d8:	676e6974 656c5320 0d0a7065 00000000     ting Sleep......

0001f9e8 <gapParserSysStatus>:
   1f9e8:	0001f7c4 0001f5d8 0001f9d0 656c730a     .............sle
   1f9f8:	6f5f7065 6c25206b 736d2064 00000d0a     ep_ok %ld ms....
   1fa08:	00000a0d 00004c0c 00004c0c 00004bda     .....L...L...K..
   1fa18:	00004c0c 00004bda 00004bc0 00004bc0     .L...K...K...K..
   1fa28:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fa38:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fa48:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fa58:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fa68:	00004c0c 00004c0c 00004c0c 00004bda     .L...L...L...K..
   1fa78:	00004c0c 00004bda 00004c0c 00004c0c     .L...K...L...L..
   1fa88:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fa98:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1faa8:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fab8:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fac8:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fad8:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fae8:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1faf8:	00004c0c 00004c0c 00004c0c 00004c0c     .L...L...L...L..
   1fb08:	00004c0c 00004bda 00004bda 00004be2     .L...K...K...K..
   1fb18:	00004be2 00004be2 00004be2 42000000     .K...K...K.....B
   1fb28:	42000400 42000800 42000c00 42001000     ...B...B...B...B
   1fb38:	43000400 00006b06 00006b02 00006b02     ...C.k...k...k..
   1fb48:	00006b68 00006b68 00006b1c 00006b0c     hk..hk...k...k..
   1fb58:	00006b22 00006b56 00006d0c 00006cec     "k..Vk...m...l..
   1fb68:	00006cec 00006d86 00006cfe 00006d1a     .l...m...l...m..
   1fb78:	00006cf0 00006d28 00006d6a 00006dc4     .l..(m..jm...m..
   1fb88:	00006e06 00006e06 00006e06 00006db6     .n...n...n...m..
   1fb98:	00006dd2 00006da8 00006de0 00006df6     .m...m...m...m..
   1fba8:	000075de 000076d4 000076de 000076e8     .u...v...v...v..
   1fbb8:	000076f2 00007724 0000772e 00007738     .v..$w...w..8w..
   1fbc8:	00007742 0000774c 42002000 42002400     Bw..Lw... .B.$.B
   1fbd8:	42002800 42002c00 43000800 00000002     .(.B.,.B...C....
   1fbe8:	00000100 00000002 00000200 00000002     ................
   1fbf8:	00000400 00000002 00000800 00000003     ................
   1fc08:	00000004                                ....

0001fc0c <AdvChannels923>:
   1fc0c:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1fc1c:	3709f740 ff100100                       @..7....

0001fc24 <DefaultChannels923>:
   1fc24:	50015001                                .P.P

0001fc28 <DefaultDrParamsAS>:
   1fc28:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1fc38:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1fc48:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1fc58:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001fc68 <SubBandDutyCycle923>:
   1fc68:	00000064                                d...

0001fc6c <SubBandParams923>:
   1fc6c:	35c36d80 37502800 00000000              .m.5.(P7....

0001fc78 <pds_reg_as_item_list>:
   1fc78:	20002553 00200004 20002573 25c00104     S%. .. .s%. ...%
   1fc88:	200024fe ea010204                       .$. ....

0001fc90 <DefaultChannels915AU>:
   1fc90:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fca0:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fcb0:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fcc0:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fcd0:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fce0:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fcf0:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd00:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1fd10:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

0001fd20 <DefaultDrParamsAU>:
   1fd20:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   1fd30:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   1fd40:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1fd50:	00f2003d 010908be 00000000 010a0000     =...............
   1fd60:	00350007 01090c0c 00810005 01090b06     ..5.............
   1fd70:	00f20007 01090a01 00f2000c 010909fe     ................
   1fd80:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001fd90 <pds_reg_au_item_list>:
   1fd90:	20002583 00900008 20002627 95010108     .%. ....'&. ....

0001fda0 <AdvChannels433>:
   1fda0:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1fdb0:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1fdc0:	ff0c0101                                ....

0001fdc4 <AdvChannels868>:
   1fdc4:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1fdd4:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1fde4:	ff100101                                ....

0001fde8 <DefaultChannels433>:
   1fde8:	50015001 00005001                       .P.P.P..

0001fdf0 <DefaultChannels868>:
   1fdf0:	50015001 00005001                       .P.P.P..

0001fdf8 <DefaultDrparamsEU>:
   1fdf8:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   1fe08:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   1fe18:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1fe28:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0001fe38 <SubBandDutyCycle868>:
   1fe38:	006403e8 03e80064 0064000a              ..d.d.....d.

0001fe44 <SubBandParams433>:
   1fe44:	19cf0e40 19ea8580 00000000              @...........

0001fe50 <SubBandParams868>:
   1fe50:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1fe60:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1fe70:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1fe80:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1fe90:	33db2580 00000000                       .%.3....

0001fe98 <pds_reg_eu868_fid1_item_list>:
   1fe98:	20002553 00200003                       S%. .. .

0001fea0 <pds_reg_eu868_fid2_item_list>:
   1fea0:	20002573 00c0000b                       s%. ....

0001fea8 <AdvChannels865>:
   1fea8:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   1feb8:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   1fec8:	ff1e0100                                ....

0001fecc <DefaultChannels865>:
   1fecc:	50015001 00005001                       .P.P.P..

0001fed4 <DefaultDrParamsIN>:
   1fed4:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1fee4:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1fef4:	00f20031 010708be 00f20053 010707bc     1.......S.......
   1ff04:	00000000 010a0000 00f20008 000a00fe     ................

0001ff14 <pds_reg_ind_item_list>:
   1ff14:	20002553 00200006 20002573 25c00106     S%. .. .s%. ...%

0001ff24 <AdvChannels923JP>:
   1ff24:	3706ea00 3706ea00 ff100101 3709f740     ...7...7....@..7
   1ff34:	3709f740 ff100101                       @..7....

0001ff3c <DefaultChannels923JP>:
   1ff3c:	50015001                                .P.P

0001ff40 <DefaultDrParamsJP>:
   1ff40:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1ff50:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1ff60:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1ff70:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001ff80 <SubBandDutyCycleJP923>:
   1ff80:	000a0064                                d...

0001ff84 <SubBandParamsJP923>:
   1ff84:	36d61600 36f7a7c0 00000000 36fab500     ...6...6.......6
   1ff94:	37502800 00000000                       .(P7....

0001ff9c <pds_reg_jpn_fid1_item_list>:
   1ff9c:	20002553 00200007 20002573 25c00107     S%. .. .s%. ...%

0001ffac <AdvChannels920KR>:
   1ffac:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   1ffbc:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   1ffcc:	ff0e0100                                ....

0001ffd0 <DefaultChannels920KR>:
   1ffd0:	50015001 00005001                       .P.P.P..

0001ffd8 <DefaultDrParamsKR>:
   1ffd8:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1ffe8:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1fff8:	00f20031 010708be 00f20053 010707bc     1.......S.......

00020008 <pds_reg_kr_fid1_item_list>:
   20008:	20002553 00200005 20002573 25c00105     S%. .. .s%. ...%

00020018 <DefaultChannels915>:
   20018:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20028:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20038:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20048:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20058:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20068:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20078:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20088:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   20098:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

000200a8 <DefaultDrParamsNA>:
   200a8:	000b0012 01070ac6 00350005 01070906     ..........5.....
   200b8:	007d0007 01070801 00f2000c 010707fe     ..}.............
   200c8:	00f20016 010908fc 00000000 010a0000     ................
   200d8:	00000000 010a0000 00000000 010a0000     ................
   200e8:	00350023 01090cd5 00810007 01090b06     #.5.............
   200f8:	00f20007 01090a01 00f2000c 010909fe     ................
   20108:	00f20016 010908fc 00f2002a 010907fc     ........*.......

00020118 <pds_reg_na_item_list>:
   20118:	20002583 00900002 20002627 95010102     .%. ....'&. ....
   20128:	0000a69c 0000a69c 0000a69c 0000a69c     ................
   20138:	0000a702 0000a768 0000a71a 0000a702     ....h...........

00020148 <keySlots>:
   20148:	0b030200 0a090e0c                       ........

00020150 <taskHandlers>:
   20150:	0000f0a9 0001548d 00014aa1 0000e721     .....T...J..!...
   20160:	0000fb59                                Y...

00020164 <tc_interrupt_vectors.13496>:
   20164:	14131211 00000015 614c0a0d 72207473     ..........Last r
   20174:	74657365 75616320 203a6573 00000000     eset cause: ....
   20184:	74737953 52206d65 74657365 71655220     System Reset Req
   20194:	74736575 0000000d 63746157 676f6468     uest....Watchdog
   201a4:	73655220 000d7465 65747845 6c616e72      Reset..External
   201b4:	73655220 000d7465 776f7242 754f206e      Reset..Brown Ou
   201c4:	33332074 74654420 6f746365 65522072     t 33 Detector Re
   201d4:	0d746573 00000000 776f7242 754f206e     set.....Brown Ou
   201e4:	32312074 74654420 6f746365 65522072     t 12 Detector Re
   201f4:	0d746573 00000000 65776f50 6e4f2d72     set.....Power-On
   20204:	73655220 000d7465 61526f4c 204e4157      Reset..LoRaWAN 
   20214:	63617453 5055206b 0080000d              Stack UP....

00020220 <CSWTCH.144>:
   20220:	00000000 40fe8480 00000000 410e8480     .......@.......A
   20230:	00000000 411e8480                       .......A

00020238 <FskSyncWordBuff>:
   20238:	01c194c1                                         ...

0002023b <macEndDevCmdReplyLen>:
   2023b:	02010201 01010203 01000002              ............

00020247 <maxEIRPTable>:
   20247:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
	...

00020258 <pds_mac_fid1_item_list>:
   20258:	20002c52 00010000 20002c50 06010100     R,. ....P,. ....
   20268:	20002be4 0c040200 20002c53 15010300     .+. ....S,. ....
   20278:	20002c54 1b040400 20002ca4 24040500     T,. .....,. ...$
   20288:	20002c80 2d040600 20002c94 36100700     .,. ...-.,. ...6
   20298:	20002c84 4b100800 20002c6e 60040900     .,. ...Kn,. ...`
   202a8:	20002c3d 69010b00 20002bec 6f010a00     =,. ...i.+. ...o
   202b8:	20002c24 75020c00 20002c26 7c020d00     $,. ...u&,. ...|
   202c8:	20002c28 83020e00 20002c2a 8a020f00     (,. ....*,. ....
   202d8:	20002c2c 91021000 20002c2e 98021100     ,,. .....,. ....
   202e8:	20002c30 9f011200 20002c31 a5011300     0,. ....1,. ....
   202f8:	20002c36 b1011500 20002c35 ab011400     6,. ....5,. ....
   20308:	20002bdc b7041600                       .+. ....

00020310 <pds_mac_fid2_item_list>:
   20310:	20002bc6 00050001 20002c4a 0a010101     .+. ....J,. ....
   20320:	20002b5c 10010201 20002b5d 16040301     \+. ....]+. ....
   20330:	20002b61 1f100401 20002b71 34100501     a+. ....q+. ...4
   20340:	20002ba1 49100601 20002bb1 5e080701     .+. ...I.+. ...^
   20350:	20002bb9 6b080801 20002c32 78020901     .+. ...k2,. ...x
   20360:	20002be0 7f040a01 20002bd8 88040b01     .+. .....+. ....
   20370:	20002c3b 91010c01 20002d7c 97010d01     ;,. ....|-. ....
   20380:	20002d7d 9d010e01                       }-. ....

00020388 <lorawanHandlers>:
   20388:	00014951 00014865 00014a29 000000fd     QI..eH..)J......

00020398 <radioTaskHandlers>:
   20398:	0001605d 0001615d 00015ea1 00015725     ]`..]a...^..%W..
   203a8:	00016485 00017104 000170d4 000170e6     .d...q...p...p..
   203b8:	00017028 000170e6 000170ca 000170e6     (p...p...p...p..
   203c8:	00017028 000170d4 000170d4 000170ca     (p...p...p...p..
   203d8:	00017028 00017030 00017030 00017030     (p..0p..0p..0p..
   203e8:	000170ec 000170d4 000170d4 000170a8     .p...p...p...p..
   203f8:	0001718c 000170a8 000170ca 000170a8     .q...p...p...p..
   20408:	0001718c 000170d4 000170d4 000170ca     .q...p...p...p..
   20418:	0001718c 00017030 00017030 00017030     .q..0p..0p..0p..
   20428:	00017196 00017484 000173d4 000173d4     .q...t...s...s..
   20438:	000173d2 00017476 00017476 0001746c     .s..vt..vt..lt..
   20448:	000173d2 00017476 0001746c 00017476     .s..vt..lt..vt..
   20458:	000173d2 0001747c 0001747c 0001747c     .s..|t..|t..|t..
   20468:	0001750c 00018254 00018236 000181f0     .u..T...6.......
   20478:	0001810e 000181f0 00018228 000181f0     ........(.......
   20488:	0001810e 00018236 00018236 00018228     ....6...6...(...
   20498:	0001810e 00018106 00018106 00018106     ................
   204a8:	0001846c 00018ab4 00018974 00018974     l.......t...t...
   204b8:	00018970 00018a8c 00018a8c 00018a7e     p...........~...
   204c8:	00018970 00018a8c 00018a7e 00018a8c     p.......~.......
   204d8:	00018970 00018a94 00018a94 00018a94     p...............
   204e8:	00018c98                                ....

000204ec <_global_impure_ptr>:
   204ec:	20000020 00000043 49534f50 00000058      .. C...POSIX...
   204fc:	0000002e 0000000a 33323130 37363534     ........01234567
   2050c:	62613938 66656463 6a696867 6e6d6c6b     89abcdefghijklmn
   2051c:	7271706f 76757473 7a797877 00000000     opqrstuvwxyz....
   2052c:	0001ac5e 0001ad32 0001ad32 0001ac4a     ^...2...2...J...
   2053c:	0001ad32 0001ad32 0001ad32 0001ad32     2...2...2...2...
   2054c:	0001ad32 0001ad32 0001ad04 0001a816     2...2...........
   2055c:	0001ad32 0001a80c 0001a820 0001ad32     2....... ...2...
   2056c:	0001ac54 0001a9e0 0001a9e0 0001a9e0     T...............
   2057c:	0001a9e0 0001a9e0 0001a9e0 0001a9e0     ................
   2058c:	0001a9e0 0001a9e0 0001ad32 0001ad32     ........2...2...
   2059c:	0001ad32 0001ad32 0001ad32 0001ad32     2...2...2...2...
   205ac:	0001ad32 0001ad32 0001ad32 0001ad32     2...2...2...2...
   205bc:	0001ad1a 0001ac6e 0001ad32 0001ac6e     ....n...2...n...
   205cc:	0001ad32 0001ad32 0001ad32 0001ad32     2...2...2...2...
   205dc:	0001abd4 0001ad32 0001ad32 0001abde     ....2...2.......
   205ec:	0001ad32 0001ad32 0001ad32 0001ad32     2...2...2...2...
   205fc:	0001ad32 0001ac0c 0001ad32 0001ad32     2.......2...2...
   2060c:	0001ac3a 0001ad32 0001ad32 0001ad32     :...2...2...2...
   2061c:	0001ad32 0001ad32 0001ad32 0001ad32     2...2...2...2...
   2062c:	0001ad32 0001ad32 0001ad32 0001aa20     2...2...2... ...
   2063c:	0001aa56 0001ac6e 0001ac6e 0001ac6e     V...n...n...n...
   2064c:	0001aafe 0001aa56 0001ad32 0001ad32     ....V...2...2...
   2065c:	0001ab08 0001ad32 0001ab1a 0001ad2e     ....2...........
   2066c:	0001ab48 0001ab72 0001ad32 0001ab7c     H...r...2...|...
   2067c:	0001ad32 0001ad2a 0001ad32 0001ad32     2...*...2...2...
   2068c:	0001a86e 00464e49 00666e69 004e414e     n...INF.inf.NAN.
   2069c:	006e616e 33323130 37363534 42413938     nan.0123456789AB
   206ac:	46454443 00000000 33323130 37363534     CDEF....01234567
   206bc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   206cc:	0000296c                                l)..

000206d0 <blanks.7238>:
   206d0:	20202020 20202020 20202020 20202020                     

000206e0 <zeroes.7239>:
   206e0:	30303030 30303030 30303030 30303030     0000000000000000

000206f0 <_ctype_>:
   206f0:	20202000 20202020 28282020 20282828     .         ((((( 
   20700:	20202020 20202020 20202020 20202020                     
   20710:	10108820 10101010 10101010 10101010      ...............
   20720:	04040410 04040404 10040404 10101010     ................
   20730:	41411010 41414141 01010101 01010101     ..AAAAAA........
   20740:	01010101 01010101 01010101 10101010     ................
   20750:	42421010 42424242 02020202 02020202     ..BBBBBB........
   20760:	02020202 02020202 02020202 10101010     ................
   20770:	00000020 00000000 00000000 00000000      ...............
	...
   207f4:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   20804:	00000000                                ....

00020808 <__mprec_bigtens>:
   20808:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   20818:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   20828:	7f73bf3c 75154fdd                       <.s..O.u

00020830 <__mprec_tens>:
   20830:	00000000 3ff00000 00000000 40240000     .......?......$@
   20840:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   20850:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   20860:	00000000 412e8480 00000000 416312d0     .......A......cA
   20870:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   20880:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   20890:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   208a0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   208b0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   208c0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   208d0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   208e0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   208f0:	79d99db4 44ea7843                       ...yCx.D

000208f8 <p05.6055>:
   208f8:	00000005 00000019 0000007d              ........}...

00020904 <_init>:
   20904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20906:	46c0      	nop			; (mov r8, r8)
   20908:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2090a:	bc08      	pop	{r3}
   2090c:	469e      	mov	lr, r3
   2090e:	4770      	bx	lr

00020910 <__init_array_start>:
   20910:	0001be91 	.word	0x0001be91

00020914 <__frame_dummy_init_array_entry>:
   20914:	000000dd                                ....

00020918 <_fini>:
   20918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2091a:	46c0      	nop			; (mov r8, r8)
   2091c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   2091e:	bc08      	pop	{r3}
   20920:	469e      	mov	lr, r3
   20922:	4770      	bx	lr

00020924 <__fini_array_start>:
   20924:	000000b5 	.word	0x000000b5
